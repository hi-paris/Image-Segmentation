[08/30 01:21:05] detectron2 INFO: Rank of current process: 0. World size: 2
[08/30 01:21:07] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/30 01:21:07] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_softmax_entropy.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/30 01:21:07] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_softmax_entropy.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/30 01:21:07] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/30 01:21:07] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy/config.yaml
[08/30 01:21:07] d2.utils.env INFO: Using a generated random seed 10332198
[08/30 01:21:12] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[08/30 01:21:12] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/30 01:21:12] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/30 01:21:12] d2.data.build INFO: Using training sampler TrainingSampler
[08/30 01:21:13] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/30 01:21:13] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/30 01:21:13] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/30 01:21:13] d2.data.build INFO: Making batched data loader with batch_size=4
[08/30 01:21:13] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/30 01:21:17] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[08/30 01:21:17] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[08/30 01:21:17] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[08/30 01:21:28] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[08/30 01:21:28] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[08/30 01:22:04] d2.utils.events INFO:  eta: 0:23:47  iter: 19  total_loss: 43.56  m1_loss_ce: 0.5795  m1_loss_mask: 0.1709  m1_loss_dice: 1.233  m1_loss_ce_0: 0.6149  m1_loss_mask_0: 0.1985  m1_loss_dice_0: 1.396  m1_loss_ce_1: 0.6429  m1_loss_mask_1: 0.1844  m1_loss_dice_1: 1.367  m1_loss_ce_2: 0.6342  m1_loss_mask_2: 0.173  m1_loss_dice_2: 1.301  m1_loss_ce_3: 0.5981  m1_loss_mask_3: 0.1738  m1_loss_dice_3: 1.235  m1_loss_ce_4: 0.5807  m1_loss_mask_4: 0.1733  m1_loss_dice_4: 1.236  m1_loss_ce_5: 0.5409  m1_loss_mask_5: 0.1724  m1_loss_dice_5: 1.255  m1_loss_ce_6: 0.5482  m1_loss_mask_6: 0.1734  m1_loss_dice_6: 1.259  m1_loss_ce_7: 0.5695  m1_loss_mask_7: 0.1749  m1_loss_dice_7: 1.246  m1_loss_ce_8: 0.5703  m1_loss_mask_8: 0.1712  m1_loss_dice_8: 1.223  m2_loss_ce: 0.5331  m2_loss_mask: 0.1729  m2_loss_dice: 1.259  m2_loss_ce_0: 0.6105  m2_loss_mask_0: 0.1995  m2_loss_dice_0: 1.505  m2_loss_ce_1: 0.6915  m2_loss_mask_1: 0.1807  m2_loss_dice_1: 1.295  m2_loss_ce_2: 0.6187  m2_loss_mask_2: 0.1734  m2_loss_dice_2: 1.309  m2_loss_ce_3: 0.5801  m2_loss_mask_3: 0.1736  m2_loss_dice_3: 1.242  m2_loss_ce_4: 0.5532  m2_loss_mask_4: 0.1767  m2_loss_dice_4: 1.236  m2_loss_ce_5: 0.5408  m2_loss_mask_5: 0.1738  m2_loss_dice_5: 1.284  m2_loss_ce_6: 0.5003  m2_loss_mask_6: 0.1752  m2_loss_dice_6: 1.232  m2_loss_ce_7: 0.5179  m2_loss_mask_7: 0.1766  m2_loss_dice_7: 1.227  m2_loss_ce_8: 0.5353  m2_loss_mask_8: 0.174  m2_loss_dice_8: 1.238  com_loss_ce: 1.834  com_loss_mask: 0.6924  com_loss_dice: 0.9704    time: 1.4612  last_time: 1.4710  data_time: 0.2197  last_data_time: 0.0324   lr: 0.0001  max_mem: 34765M
[08/30 01:22:33] d2.utils.events INFO:  eta: 0:22:59  iter: 39  total_loss: 43.54  m1_loss_ce: 0.5685  m1_loss_mask: 0.1536  m1_loss_dice: 1.182  m1_loss_ce_0: 0.644  m1_loss_mask_0: 0.1812  m1_loss_dice_0: 1.42  m1_loss_ce_1: 0.7234  m1_loss_mask_1: 0.1672  m1_loss_dice_1: 1.3  m1_loss_ce_2: 0.6355  m1_loss_mask_2: 0.1612  m1_loss_dice_2: 1.285  m1_loss_ce_3: 0.5946  m1_loss_mask_3: 0.1631  m1_loss_dice_3: 1.201  m1_loss_ce_4: 0.6194  m1_loss_mask_4: 0.1614  m1_loss_dice_4: 1.214  m1_loss_ce_5: 0.5884  m1_loss_mask_5: 0.1594  m1_loss_dice_5: 1.192  m1_loss_ce_6: 0.5273  m1_loss_mask_6: 0.1602  m1_loss_dice_6: 1.188  m1_loss_ce_7: 0.5536  m1_loss_mask_7: 0.1579  m1_loss_dice_7: 1.182  m1_loss_ce_8: 0.5315  m1_loss_mask_8: 0.1563  m1_loss_dice_8: 1.198  m2_loss_ce: 0.566  m2_loss_mask: 0.148  m2_loss_dice: 1.212  m2_loss_ce_0: 0.6372  m2_loss_mask_0: 0.1914  m2_loss_dice_0: 1.46  m2_loss_ce_1: 0.7028  m2_loss_mask_1: 0.1626  m2_loss_dice_1: 1.333  m2_loss_ce_2: 0.6337  m2_loss_mask_2: 0.1527  m2_loss_dice_2: 1.267  m2_loss_ce_3: 0.6152  m2_loss_mask_3: 0.1526  m2_loss_dice_3: 1.201  m2_loss_ce_4: 0.5958  m2_loss_mask_4: 0.1549  m2_loss_dice_4: 1.217  m2_loss_ce_5: 0.5574  m2_loss_mask_5: 0.1505  m2_loss_dice_5: 1.263  m2_loss_ce_6: 0.587  m2_loss_mask_6: 0.1493  m2_loss_dice_6: 1.19  m2_loss_ce_7: 0.5695  m2_loss_mask_7: 0.149  m2_loss_dice_7: 1.219  m2_loss_ce_8: 0.5612  m2_loss_mask_8: 0.1498  m2_loss_dice_8: 1.222  com_loss_ce: 1.801  com_loss_mask: 0.6924  com_loss_dice: 0.9687    time: 1.4509  last_time: 1.5144  data_time: 0.0379  last_data_time: 0.0383   lr: 0.0001  max_mem: 34765M
[08/30 01:23:02] d2.utils.events INFO:  eta: 0:22:30  iter: 59  total_loss: 45.42  m1_loss_ce: 0.5772  m1_loss_mask: 0.1734  m1_loss_dice: 1.217  m1_loss_ce_0: 0.6758  m1_loss_mask_0: 0.2011  m1_loss_dice_0: 1.396  m1_loss_ce_1: 0.6991  m1_loss_mask_1: 0.1839  m1_loss_dice_1: 1.284  m1_loss_ce_2: 0.6245  m1_loss_mask_2: 0.1778  m1_loss_dice_2: 1.266  m1_loss_ce_3: 0.5984  m1_loss_mask_3: 0.1772  m1_loss_dice_3: 1.204  m1_loss_ce_4: 0.6008  m1_loss_mask_4: 0.1777  m1_loss_dice_4: 1.26  m1_loss_ce_5: 0.552  m1_loss_mask_5: 0.175  m1_loss_dice_5: 1.208  m1_loss_ce_6: 0.5663  m1_loss_mask_6: 0.1714  m1_loss_dice_6: 1.179  m1_loss_ce_7: 0.5898  m1_loss_mask_7: 0.1728  m1_loss_dice_7: 1.165  m1_loss_ce_8: 0.5482  m1_loss_mask_8: 0.1748  m1_loss_dice_8: 1.186  m2_loss_ce: 0.5563  m2_loss_mask: 0.1662  m2_loss_dice: 1.223  m2_loss_ce_0: 0.6061  m2_loss_mask_0: 0.2  m2_loss_dice_0: 1.477  m2_loss_ce_1: 0.6852  m2_loss_mask_1: 0.18  m2_loss_dice_1: 1.333  m2_loss_ce_2: 0.6651  m2_loss_mask_2: 0.174  m2_loss_dice_2: 1.267  m2_loss_ce_3: 0.6116  m2_loss_mask_3: 0.1731  m2_loss_dice_3: 1.233  m2_loss_ce_4: 0.5946  m2_loss_mask_4: 0.1709  m2_loss_dice_4: 1.227  m2_loss_ce_5: 0.6071  m2_loss_mask_5: 0.1683  m2_loss_dice_5: 1.224  m2_loss_ce_6: 0.5579  m2_loss_mask_6: 0.1702  m2_loss_dice_6: 1.231  m2_loss_ce_7: 0.557  m2_loss_mask_7: 0.1676  m2_loss_dice_7: 1.246  m2_loss_ce_8: 0.573  m2_loss_mask_8: 0.1681  m2_loss_dice_8: 1.23  com_loss_ce: 1.801  com_loss_mask: 0.6924  com_loss_dice: 0.9711    time: 1.4542  last_time: 1.4433  data_time: 0.0383  last_data_time: 0.0455   lr: 0.0001  max_mem: 34765M
[08/30 01:23:31] d2.utils.events INFO:  eta: 0:22:06  iter: 79  total_loss: 43.89  m1_loss_ce: 0.5636  m1_loss_mask: 0.1631  m1_loss_dice: 1.18  m1_loss_ce_0: 0.6717  m1_loss_mask_0: 0.1949  m1_loss_dice_0: 1.43  m1_loss_ce_1: 0.7012  m1_loss_mask_1: 0.1828  m1_loss_dice_1: 1.315  m1_loss_ce_2: 0.6546  m1_loss_mask_2: 0.1686  m1_loss_dice_2: 1.251  m1_loss_ce_3: 0.6051  m1_loss_mask_3: 0.174  m1_loss_dice_3: 1.257  m1_loss_ce_4: 0.5675  m1_loss_mask_4: 0.1722  m1_loss_dice_4: 1.239  m1_loss_ce_5: 0.543  m1_loss_mask_5: 0.1667  m1_loss_dice_5: 1.239  m1_loss_ce_6: 0.5449  m1_loss_mask_6: 0.1661  m1_loss_dice_6: 1.209  m1_loss_ce_7: 0.5528  m1_loss_mask_7: 0.1649  m1_loss_dice_7: 1.211  m1_loss_ce_8: 0.5344  m1_loss_mask_8: 0.1708  m1_loss_dice_8: 1.226  m2_loss_ce: 0.5171  m2_loss_mask: 0.1691  m2_loss_dice: 1.222  m2_loss_ce_0: 0.618  m2_loss_mask_0: 0.1947  m2_loss_dice_0: 1.49  m2_loss_ce_1: 0.7127  m2_loss_mask_1: 0.1752  m2_loss_dice_1: 1.32  m2_loss_ce_2: 0.6296  m2_loss_mask_2: 0.1667  m2_loss_dice_2: 1.288  m2_loss_ce_3: 0.5918  m2_loss_mask_3: 0.1709  m2_loss_dice_3: 1.241  m2_loss_ce_4: 0.5776  m2_loss_mask_4: 0.172  m2_loss_dice_4: 1.261  m2_loss_ce_5: 0.5747  m2_loss_mask_5: 0.1704  m2_loss_dice_5: 1.215  m2_loss_ce_6: 0.5419  m2_loss_mask_6: 0.1715  m2_loss_dice_6: 1.212  m2_loss_ce_7: 0.5289  m2_loss_mask_7: 0.1712  m2_loss_dice_7: 1.235  m2_loss_ce_8: 0.556  m2_loss_mask_8: 0.169  m2_loss_dice_8: 1.231  com_loss_ce: 1.802  com_loss_mask: 0.6924  com_loss_dice: 0.9716    time: 1.4543  last_time: 1.4231  data_time: 0.0393  last_data_time: 0.0343   lr: 0.0001  max_mem: 35216M
[08/30 01:24:01] d2.utils.events INFO:  eta: 0:21:42  iter: 99  total_loss: 44.42  m1_loss_ce: 0.5618  m1_loss_mask: 0.1665  m1_loss_dice: 1.222  m1_loss_ce_0: 0.641  m1_loss_mask_0: 0.1915  m1_loss_dice_0: 1.418  m1_loss_ce_1: 0.6691  m1_loss_mask_1: 0.1764  m1_loss_dice_1: 1.348  m1_loss_ce_2: 0.6161  m1_loss_mask_2: 0.1734  m1_loss_dice_2: 1.313  m1_loss_ce_3: 0.6129  m1_loss_mask_3: 0.1695  m1_loss_dice_3: 1.238  m1_loss_ce_4: 0.5538  m1_loss_mask_4: 0.1675  m1_loss_dice_4: 1.222  m1_loss_ce_5: 0.5567  m1_loss_mask_5: 0.166  m1_loss_dice_5: 1.237  m1_loss_ce_6: 0.543  m1_loss_mask_6: 0.1682  m1_loss_dice_6: 1.243  m1_loss_ce_7: 0.5313  m1_loss_mask_7: 0.1668  m1_loss_dice_7: 1.257  m1_loss_ce_8: 0.5328  m1_loss_mask_8: 0.1693  m1_loss_dice_8: 1.214  m2_loss_ce: 0.5188  m2_loss_mask: 0.1668  m2_loss_dice: 1.233  m2_loss_ce_0: 0.6137  m2_loss_mask_0: 0.2011  m2_loss_dice_0: 1.532  m2_loss_ce_1: 0.7049  m2_loss_mask_1: 0.1743  m2_loss_dice_1: 1.336  m2_loss_ce_2: 0.6647  m2_loss_mask_2: 0.1693  m2_loss_dice_2: 1.286  m2_loss_ce_3: 0.5919  m2_loss_mask_3: 0.1712  m2_loss_dice_3: 1.243  m2_loss_ce_4: 0.5573  m2_loss_mask_4: 0.1695  m2_loss_dice_4: 1.261  m2_loss_ce_5: 0.5828  m2_loss_mask_5: 0.1672  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.5502  m2_loss_mask_6: 0.1681  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.5143  m2_loss_mask_7: 0.1688  m2_loss_dice_7: 1.225  m2_loss_ce_8: 0.5255  m2_loss_mask_8: 0.166  m2_loss_dice_8: 1.215  com_loss_ce: 1.776  com_loss_mask: 0.6924  com_loss_dice: 0.9698    time: 1.4601  last_time: 1.5228  data_time: 0.0482  last_data_time: 0.0478   lr: 0.0001  max_mem: 35427M
[08/30 01:24:31] d2.utils.events INFO:  eta: 0:21:17  iter: 119  total_loss: 43.1  m1_loss_ce: 0.5616  m1_loss_mask: 0.171  m1_loss_dice: 1.209  m1_loss_ce_0: 0.5896  m1_loss_mask_0: 0.1797  m1_loss_dice_0: 1.394  m1_loss_ce_1: 0.6654  m1_loss_mask_1: 0.1791  m1_loss_dice_1: 1.359  m1_loss_ce_2: 0.6205  m1_loss_mask_2: 0.1723  m1_loss_dice_2: 1.295  m1_loss_ce_3: 0.5718  m1_loss_mask_3: 0.1713  m1_loss_dice_3: 1.241  m1_loss_ce_4: 0.5663  m1_loss_mask_4: 0.1721  m1_loss_dice_4: 1.25  m1_loss_ce_5: 0.5635  m1_loss_mask_5: 0.1683  m1_loss_dice_5: 1.215  m1_loss_ce_6: 0.5701  m1_loss_mask_6: 0.1689  m1_loss_dice_6: 1.19  m1_loss_ce_7: 0.5442  m1_loss_mask_7: 0.1667  m1_loss_dice_7: 1.184  m1_loss_ce_8: 0.5434  m1_loss_mask_8: 0.168  m1_loss_dice_8: 1.179  m2_loss_ce: 0.5535  m2_loss_mask: 0.1655  m2_loss_dice: 1.199  m2_loss_ce_0: 0.6347  m2_loss_mask_0: 0.1909  m2_loss_dice_0: 1.425  m2_loss_ce_1: 0.7018  m2_loss_mask_1: 0.1759  m2_loss_dice_1: 1.329  m2_loss_ce_2: 0.6307  m2_loss_mask_2: 0.1687  m2_loss_dice_2: 1.272  m2_loss_ce_3: 0.5911  m2_loss_mask_3: 0.1692  m2_loss_dice_3: 1.232  m2_loss_ce_4: 0.5733  m2_loss_mask_4: 0.1701  m2_loss_dice_4: 1.206  m2_loss_ce_5: 0.5479  m2_loss_mask_5: 0.1661  m2_loss_dice_5: 1.19  m2_loss_ce_6: 0.5593  m2_loss_mask_6: 0.1667  m2_loss_dice_6: 1.202  m2_loss_ce_7: 0.5403  m2_loss_mask_7: 0.1664  m2_loss_dice_7: 1.2  m2_loss_ce_8: 0.5539  m2_loss_mask_8: 0.1647  m2_loss_dice_8: 1.214  com_loss_ce: 1.778  com_loss_mask: 0.6924  com_loss_dice: 0.9688    time: 1.4611  last_time: 1.4167  data_time: 0.0438  last_data_time: 0.0406   lr: 0.0001  max_mem: 35427M
[08/30 01:25:00] d2.utils.events INFO:  eta: 0:20:45  iter: 139  total_loss: 43.54  m1_loss_ce: 0.5333  m1_loss_mask: 0.1686  m1_loss_dice: 1.239  m1_loss_ce_0: 0.6075  m1_loss_mask_0: 0.2021  m1_loss_dice_0: 1.419  m1_loss_ce_1: 0.6965  m1_loss_mask_1: 0.1786  m1_loss_dice_1: 1.347  m1_loss_ce_2: 0.5996  m1_loss_mask_2: 0.1698  m1_loss_dice_2: 1.289  m1_loss_ce_3: 0.5604  m1_loss_mask_3: 0.1754  m1_loss_dice_3: 1.249  m1_loss_ce_4: 0.5735  m1_loss_mask_4: 0.1664  m1_loss_dice_4: 1.276  m1_loss_ce_5: 0.5339  m1_loss_mask_5: 0.1663  m1_loss_dice_5: 1.232  m1_loss_ce_6: 0.5333  m1_loss_mask_6: 0.1695  m1_loss_dice_6: 1.225  m1_loss_ce_7: 0.4995  m1_loss_mask_7: 0.1674  m1_loss_dice_7: 1.225  m1_loss_ce_8: 0.4869  m1_loss_mask_8: 0.1699  m1_loss_dice_8: 1.227  m2_loss_ce: 0.5033  m2_loss_mask: 0.1673  m2_loss_dice: 1.228  m2_loss_ce_0: 0.5745  m2_loss_mask_0: 0.1955  m2_loss_dice_0: 1.521  m2_loss_ce_1: 0.6628  m2_loss_mask_1: 0.1747  m2_loss_dice_1: 1.338  m2_loss_ce_2: 0.6129  m2_loss_mask_2: 0.1686  m2_loss_dice_2: 1.287  m2_loss_ce_3: 0.5303  m2_loss_mask_3: 0.1707  m2_loss_dice_3: 1.245  m2_loss_ce_4: 0.5374  m2_loss_mask_4: 0.1679  m2_loss_dice_4: 1.252  m2_loss_ce_5: 0.5304  m2_loss_mask_5: 0.1671  m2_loss_dice_5: 1.228  m2_loss_ce_6: 0.4972  m2_loss_mask_6: 0.1691  m2_loss_dice_6: 1.244  m2_loss_ce_7: 0.5007  m2_loss_mask_7: 0.1666  m2_loss_dice_7: 1.23  m2_loss_ce_8: 0.5157  m2_loss_mask_8: 0.1672  m2_loss_dice_8: 1.215  com_loss_ce: 1.809  com_loss_mask: 0.6924  com_loss_dice: 0.9709    time: 1.4607  last_time: 1.4256  data_time: 0.0432  last_data_time: 0.0366   lr: 0.0001  max_mem: 35427M
[08/30 01:25:29] d2.utils.events INFO:  eta: 0:20:22  iter: 159  total_loss: 42.68  m1_loss_ce: 0.5663  m1_loss_mask: 0.1628  m1_loss_dice: 1.144  m1_loss_ce_0: 0.6063  m1_loss_mask_0: 0.2033  m1_loss_dice_0: 1.408  m1_loss_ce_1: 0.7227  m1_loss_mask_1: 0.1817  m1_loss_dice_1: 1.285  m1_loss_ce_2: 0.6646  m1_loss_mask_2: 0.17  m1_loss_dice_2: 1.226  m1_loss_ce_3: 0.6065  m1_loss_mask_3: 0.1664  m1_loss_dice_3: 1.19  m1_loss_ce_4: 0.5639  m1_loss_mask_4: 0.1742  m1_loss_dice_4: 1.182  m1_loss_ce_5: 0.5698  m1_loss_mask_5: 0.1711  m1_loss_dice_5: 1.155  m1_loss_ce_6: 0.555  m1_loss_mask_6: 0.1646  m1_loss_dice_6: 1.176  m1_loss_ce_7: 0.5108  m1_loss_mask_7: 0.1621  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.5188  m1_loss_mask_8: 0.1671  m1_loss_dice_8: 1.162  m2_loss_ce: 0.5181  m2_loss_mask: 0.1669  m2_loss_dice: 1.154  m2_loss_ce_0: 0.5855  m2_loss_mask_0: 0.2068  m2_loss_dice_0: 1.465  m2_loss_ce_1: 0.7271  m2_loss_mask_1: 0.1818  m2_loss_dice_1: 1.301  m2_loss_ce_2: 0.6404  m2_loss_mask_2: 0.1755  m2_loss_dice_2: 1.249  m2_loss_ce_3: 0.5917  m2_loss_mask_3: 0.1667  m2_loss_dice_3: 1.2  m2_loss_ce_4: 0.572  m2_loss_mask_4: 0.169  m2_loss_dice_4: 1.179  m2_loss_ce_5: 0.5893  m2_loss_mask_5: 0.1671  m2_loss_dice_5: 1.189  m2_loss_ce_6: 0.5478  m2_loss_mask_6: 0.1664  m2_loss_dice_6: 1.163  m2_loss_ce_7: 0.5464  m2_loss_mask_7: 0.1659  m2_loss_dice_7: 1.163  m2_loss_ce_8: 0.5568  m2_loss_mask_8: 0.1645  m2_loss_dice_8: 1.159  com_loss_ce: 1.796  com_loss_mask: 0.6924  com_loss_dice: 0.9684    time: 1.4603  last_time: 1.4269  data_time: 0.0386  last_data_time: 0.0350   lr: 0.0001  max_mem: 35427M
[08/30 01:25:59] d2.utils.events INFO:  eta: 0:19:55  iter: 179  total_loss: 43.86  m1_loss_ce: 0.5606  m1_loss_mask: 0.1605  m1_loss_dice: 1.226  m1_loss_ce_0: 0.6147  m1_loss_mask_0: 0.1947  m1_loss_dice_0: 1.495  m1_loss_ce_1: 0.7469  m1_loss_mask_1: 0.1783  m1_loss_dice_1: 1.402  m1_loss_ce_2: 0.6696  m1_loss_mask_2: 0.1683  m1_loss_dice_2: 1.339  m1_loss_ce_3: 0.6166  m1_loss_mask_3: 0.1675  m1_loss_dice_3: 1.254  m1_loss_ce_4: 0.5897  m1_loss_mask_4: 0.1663  m1_loss_dice_4: 1.221  m1_loss_ce_5: 0.5736  m1_loss_mask_5: 0.1658  m1_loss_dice_5: 1.251  m1_loss_ce_6: 0.5579  m1_loss_mask_6: 0.1646  m1_loss_dice_6: 1.218  m1_loss_ce_7: 0.5536  m1_loss_mask_7: 0.1626  m1_loss_dice_7: 1.212  m1_loss_ce_8: 0.538  m1_loss_mask_8: 0.1633  m1_loss_dice_8: 1.218  m2_loss_ce: 0.4958  m2_loss_mask: 0.1576  m2_loss_dice: 1.256  m2_loss_ce_0: 0.5889  m2_loss_mask_0: 0.1953  m2_loss_dice_0: 1.57  m2_loss_ce_1: 0.6858  m2_loss_mask_1: 0.1774  m2_loss_dice_1: 1.354  m2_loss_ce_2: 0.6191  m2_loss_mask_2: 0.1686  m2_loss_dice_2: 1.342  m2_loss_ce_3: 0.5556  m2_loss_mask_3: 0.161  m2_loss_dice_3: 1.255  m2_loss_ce_4: 0.5712  m2_loss_mask_4: 0.1579  m2_loss_dice_4: 1.263  m2_loss_ce_5: 0.5514  m2_loss_mask_5: 0.1567  m2_loss_dice_5: 1.243  m2_loss_ce_6: 0.5493  m2_loss_mask_6: 0.1595  m2_loss_dice_6: 1.252  m2_loss_ce_7: 0.5397  m2_loss_mask_7: 0.1577  m2_loss_dice_7: 1.224  m2_loss_ce_8: 0.5394  m2_loss_mask_8: 0.1568  m2_loss_dice_8: 1.223  com_loss_ce: 1.788  com_loss_mask: 0.6924  com_loss_dice: 0.9724    time: 1.4615  last_time: 1.4599  data_time: 0.0428  last_data_time: 0.0540   lr: 0.0001  max_mem: 35686M
[08/30 01:26:27] d2.utils.events INFO:  eta: 0:19:21  iter: 199  total_loss: 42.72  m1_loss_ce: 0.5438  m1_loss_mask: 0.1719  m1_loss_dice: 1.212  m1_loss_ce_0: 0.6345  m1_loss_mask_0: 0.1967  m1_loss_dice_0: 1.38  m1_loss_ce_1: 0.6739  m1_loss_mask_1: 0.1849  m1_loss_dice_1: 1.313  m1_loss_ce_2: 0.6285  m1_loss_mask_2: 0.1765  m1_loss_dice_2: 1.227  m1_loss_ce_3: 0.586  m1_loss_mask_3: 0.1778  m1_loss_dice_3: 1.226  m1_loss_ce_4: 0.5865  m1_loss_mask_4: 0.1782  m1_loss_dice_4: 1.198  m1_loss_ce_5: 0.5447  m1_loss_mask_5: 0.1736  m1_loss_dice_5: 1.178  m1_loss_ce_6: 0.5279  m1_loss_mask_6: 0.1733  m1_loss_dice_6: 1.158  m1_loss_ce_7: 0.5117  m1_loss_mask_7: 0.175  m1_loss_dice_7: 1.174  m1_loss_ce_8: 0.5035  m1_loss_mask_8: 0.1744  m1_loss_dice_8: 1.175  m2_loss_ce: 0.5137  m2_loss_mask: 0.1619  m2_loss_dice: 1.169  m2_loss_ce_0: 0.6136  m2_loss_mask_0: 0.1961  m2_loss_dice_0: 1.441  m2_loss_ce_1: 0.704  m2_loss_mask_1: 0.1762  m2_loss_dice_1: 1.284  m2_loss_ce_2: 0.6237  m2_loss_mask_2: 0.1655  m2_loss_dice_2: 1.244  m2_loss_ce_3: 0.5872  m2_loss_mask_3: 0.1672  m2_loss_dice_3: 1.199  m2_loss_ce_4: 0.5826  m2_loss_mask_4: 0.166  m2_loss_dice_4: 1.194  m2_loss_ce_5: 0.5673  m2_loss_mask_5: 0.1634  m2_loss_dice_5: 1.174  m2_loss_ce_6: 0.5306  m2_loss_mask_6: 0.1647  m2_loss_dice_6: 1.159  m2_loss_ce_7: 0.529  m2_loss_mask_7: 0.164  m2_loss_dice_7: 1.16  m2_loss_ce_8: 0.5344  m2_loss_mask_8: 0.1628  m2_loss_dice_8: 1.189  com_loss_ce: 1.795  com_loss_mask: 0.6924  com_loss_dice: 0.97    time: 1.4581  last_time: 1.4475  data_time: 0.0401  last_data_time: 0.0350   lr: 0.0001  max_mem: 35686M
[08/30 01:26:57] d2.utils.events INFO:  eta: 0:18:55  iter: 219  total_loss: 45.32  m1_loss_ce: 0.5657  m1_loss_mask: 0.1718  m1_loss_dice: 1.266  m1_loss_ce_0: 0.6304  m1_loss_mask_0: 0.2046  m1_loss_dice_0: 1.505  m1_loss_ce_1: 0.714  m1_loss_mask_1: 0.1903  m1_loss_dice_1: 1.376  m1_loss_ce_2: 0.6669  m1_loss_mask_2: 0.1786  m1_loss_dice_2: 1.312  m1_loss_ce_3: 0.5997  m1_loss_mask_3: 0.1768  m1_loss_dice_3: 1.276  m1_loss_ce_4: 0.5553  m1_loss_mask_4: 0.1745  m1_loss_dice_4: 1.282  m1_loss_ce_5: 0.5896  m1_loss_mask_5: 0.1724  m1_loss_dice_5: 1.249  m1_loss_ce_6: 0.5345  m1_loss_mask_6: 0.1739  m1_loss_dice_6: 1.236  m1_loss_ce_7: 0.5582  m1_loss_mask_7: 0.1738  m1_loss_dice_7: 1.213  m1_loss_ce_8: 0.5551  m1_loss_mask_8: 0.1725  m1_loss_dice_8: 1.252  m2_loss_ce: 0.5533  m2_loss_mask: 0.1701  m2_loss_dice: 1.282  m2_loss_ce_0: 0.5743  m2_loss_mask_0: 0.2119  m2_loss_dice_0: 1.53  m2_loss_ce_1: 0.6803  m2_loss_mask_1: 0.18  m2_loss_dice_1: 1.37  m2_loss_ce_2: 0.6293  m2_loss_mask_2: 0.1786  m2_loss_dice_2: 1.338  m2_loss_ce_3: 0.5863  m2_loss_mask_3: 0.1764  m2_loss_dice_3: 1.275  m2_loss_ce_4: 0.5743  m2_loss_mask_4: 0.1739  m2_loss_dice_4: 1.296  m2_loss_ce_5: 0.5722  m2_loss_mask_5: 0.1692  m2_loss_dice_5: 1.263  m2_loss_ce_6: 0.5205  m2_loss_mask_6: 0.1706  m2_loss_dice_6: 1.285  m2_loss_ce_7: 0.5269  m2_loss_mask_7: 0.1688  m2_loss_dice_7: 1.276  m2_loss_ce_8: 0.5256  m2_loss_mask_8: 0.1695  m2_loss_dice_8: 1.258  com_loss_ce: 1.81  com_loss_mask: 0.6924  com_loss_dice: 0.9706    time: 1.4590  last_time: 1.5027  data_time: 0.0409  last_data_time: 0.0362   lr: 0.0001  max_mem: 35686M
[08/30 01:27:26] d2.utils.events INFO:  eta: 0:18:27  iter: 239  total_loss: 44.54  m1_loss_ce: 0.5804  m1_loss_mask: 0.1656  m1_loss_dice: 1.188  m1_loss_ce_0: 0.685  m1_loss_mask_0: 0.1838  m1_loss_dice_0: 1.461  m1_loss_ce_1: 0.7477  m1_loss_mask_1: 0.1717  m1_loss_dice_1: 1.356  m1_loss_ce_2: 0.6765  m1_loss_mask_2: 0.1608  m1_loss_dice_2: 1.282  m1_loss_ce_3: 0.6227  m1_loss_mask_3: 0.1652  m1_loss_dice_3: 1.243  m1_loss_ce_4: 0.6052  m1_loss_mask_4: 0.1681  m1_loss_dice_4: 1.202  m1_loss_ce_5: 0.5687  m1_loss_mask_5: 0.1675  m1_loss_dice_5: 1.23  m1_loss_ce_6: 0.6014  m1_loss_mask_6: 0.1628  m1_loss_dice_6: 1.214  m1_loss_ce_7: 0.5809  m1_loss_mask_7: 0.1646  m1_loss_dice_7: 1.189  m1_loss_ce_8: 0.6145  m1_loss_mask_8: 0.1674  m1_loss_dice_8: 1.209  m2_loss_ce: 0.5796  m2_loss_mask: 0.161  m2_loss_dice: 1.204  m2_loss_ce_0: 0.6466  m2_loss_mask_0: 0.1899  m2_loss_dice_0: 1.532  m2_loss_ce_1: 0.7397  m2_loss_mask_1: 0.1707  m2_loss_dice_1: 1.347  m2_loss_ce_2: 0.6997  m2_loss_mask_2: 0.1652  m2_loss_dice_2: 1.281  m2_loss_ce_3: 0.6574  m2_loss_mask_3: 0.1644  m2_loss_dice_3: 1.239  m2_loss_ce_4: 0.6216  m2_loss_mask_4: 0.1659  m2_loss_dice_4: 1.247  m2_loss_ce_5: 0.6244  m2_loss_mask_5: 0.1614  m2_loss_dice_5: 1.249  m2_loss_ce_6: 0.5805  m2_loss_mask_6: 0.1628  m2_loss_dice_6: 1.227  m2_loss_ce_7: 0.607  m2_loss_mask_7: 0.1638  m2_loss_dice_7: 1.189  m2_loss_ce_8: 0.5678  m2_loss_mask_8: 0.1601  m2_loss_dice_8: 1.21  com_loss_ce: 1.836  com_loss_mask: 0.6924  com_loss_dice: 0.9728    time: 1.4598  last_time: 1.4266  data_time: 0.0467  last_data_time: 0.0426   lr: 0.0001  max_mem: 35686M
[08/30 01:27:56] d2.utils.events INFO:  eta: 0:17:57  iter: 259  total_loss: 45.09  m1_loss_ce: 0.5985  m1_loss_mask: 0.1629  m1_loss_dice: 1.211  m1_loss_ce_0: 0.6316  m1_loss_mask_0: 0.1904  m1_loss_dice_0: 1.435  m1_loss_ce_1: 0.6984  m1_loss_mask_1: 0.1865  m1_loss_dice_1: 1.355  m1_loss_ce_2: 0.625  m1_loss_mask_2: 0.1665  m1_loss_dice_2: 1.294  m1_loss_ce_3: 0.6063  m1_loss_mask_3: 0.166  m1_loss_dice_3: 1.251  m1_loss_ce_4: 0.5865  m1_loss_mask_4: 0.1641  m1_loss_dice_4: 1.247  m1_loss_ce_5: 0.5727  m1_loss_mask_5: 0.1632  m1_loss_dice_5: 1.23  m1_loss_ce_6: 0.5573  m1_loss_mask_6: 0.1629  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.5752  m1_loss_mask_7: 0.1632  m1_loss_dice_7: 1.212  m1_loss_ce_8: 0.5597  m1_loss_mask_8: 0.1625  m1_loss_dice_8: 1.22  m2_loss_ce: 0.5971  m2_loss_mask: 0.1638  m2_loss_dice: 1.201  m2_loss_ce_0: 0.6232  m2_loss_mask_0: 0.2044  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.7304  m2_loss_mask_1: 0.1783  m2_loss_dice_1: 1.33  m2_loss_ce_2: 0.6439  m2_loss_mask_2: 0.1685  m2_loss_dice_2: 1.269  m2_loss_ce_3: 0.6096  m2_loss_mask_3: 0.168  m2_loss_dice_3: 1.245  m2_loss_ce_4: 0.6185  m2_loss_mask_4: 0.1688  m2_loss_dice_4: 1.227  m2_loss_ce_5: 0.5885  m2_loss_mask_5: 0.1632  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.6032  m2_loss_mask_6: 0.1637  m2_loss_dice_6: 1.208  m2_loss_ce_7: 0.5985  m2_loss_mask_7: 0.1659  m2_loss_dice_7: 1.209  m2_loss_ce_8: 0.5737  m2_loss_mask_8: 0.1635  m2_loss_dice_8: 1.195  com_loss_ce: 1.826  com_loss_mask: 0.6924  com_loss_dice: 0.972    time: 1.4601  last_time: 1.4555  data_time: 0.0442  last_data_time: 0.0456   lr: 0.0001  max_mem: 35686M
[08/30 01:28:25] d2.utils.events INFO:  eta: 0:17:29  iter: 279  total_loss: 44.15  m1_loss_ce: 0.5593  m1_loss_mask: 0.1532  m1_loss_dice: 1.212  m1_loss_ce_0: 0.6199  m1_loss_mask_0: 0.1713  m1_loss_dice_0: 1.409  m1_loss_ce_1: 0.6909  m1_loss_mask_1: 0.1654  m1_loss_dice_1: 1.346  m1_loss_ce_2: 0.6453  m1_loss_mask_2: 0.1564  m1_loss_dice_2: 1.28  m1_loss_ce_3: 0.6  m1_loss_mask_3: 0.1547  m1_loss_dice_3: 1.265  m1_loss_ce_4: 0.5502  m1_loss_mask_4: 0.1552  m1_loss_dice_4: 1.236  m1_loss_ce_5: 0.5591  m1_loss_mask_5: 0.1522  m1_loss_dice_5: 1.259  m1_loss_ce_6: 0.5582  m1_loss_mask_6: 0.1542  m1_loss_dice_6: 1.229  m1_loss_ce_7: 0.5365  m1_loss_mask_7: 0.1556  m1_loss_dice_7: 1.23  m1_loss_ce_8: 0.5192  m1_loss_mask_8: 0.1528  m1_loss_dice_8: 1.19  m2_loss_ce: 0.56  m2_loss_mask: 0.15  m2_loss_dice: 1.224  m2_loss_ce_0: 0.6046  m2_loss_mask_0: 0.1756  m2_loss_dice_0: 1.519  m2_loss_ce_1: 0.727  m2_loss_mask_1: 0.1603  m2_loss_dice_1: 1.301  m2_loss_ce_2: 0.6408  m2_loss_mask_2: 0.1553  m2_loss_dice_2: 1.316  m2_loss_ce_3: 0.6072  m2_loss_mask_3: 0.1556  m2_loss_dice_3: 1.261  m2_loss_ce_4: 0.5889  m2_loss_mask_4: 0.1562  m2_loss_dice_4: 1.238  m2_loss_ce_5: 0.5694  m2_loss_mask_5: 0.1511  m2_loss_dice_5: 1.238  m2_loss_ce_6: 0.5625  m2_loss_mask_6: 0.153  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.5809  m2_loss_mask_7: 0.1508  m2_loss_dice_7: 1.217  m2_loss_ce_8: 0.5549  m2_loss_mask_8: 0.1501  m2_loss_dice_8: 1.275  com_loss_ce: 1.814  com_loss_mask: 0.6923  com_loss_dice: 0.9712    time: 1.4598  last_time: 1.4326  data_time: 0.0444  last_data_time: 0.0412   lr: 0.0001  max_mem: 35686M
[08/30 01:28:54] d2.utils.events INFO:  eta: 0:17:00  iter: 299  total_loss: 43.74  m1_loss_ce: 0.5464  m1_loss_mask: 0.1602  m1_loss_dice: 1.246  m1_loss_ce_0: 0.6024  m1_loss_mask_0: 0.1801  m1_loss_dice_0: 1.485  m1_loss_ce_1: 0.6649  m1_loss_mask_1: 0.172  m1_loss_dice_1: 1.38  m1_loss_ce_2: 0.6191  m1_loss_mask_2: 0.1627  m1_loss_dice_2: 1.291  m1_loss_ce_3: 0.5717  m1_loss_mask_3: 0.1622  m1_loss_dice_3: 1.296  m1_loss_ce_4: 0.5362  m1_loss_mask_4: 0.1625  m1_loss_dice_4: 1.282  m1_loss_ce_5: 0.5106  m1_loss_mask_5: 0.1601  m1_loss_dice_5: 1.261  m1_loss_ce_6: 0.5292  m1_loss_mask_6: 0.1615  m1_loss_dice_6: 1.248  m1_loss_ce_7: 0.4955  m1_loss_mask_7: 0.1634  m1_loss_dice_7: 1.237  m1_loss_ce_8: 0.5287  m1_loss_mask_8: 0.1619  m1_loss_dice_8: 1.238  m2_loss_ce: 0.5192  m2_loss_mask: 0.1547  m2_loss_dice: 1.202  m2_loss_ce_0: 0.5978  m2_loss_mask_0: 0.1892  m2_loss_dice_0: 1.473  m2_loss_ce_1: 0.6829  m2_loss_mask_1: 0.1666  m2_loss_dice_1: 1.344  m2_loss_ce_2: 0.6627  m2_loss_mask_2: 0.1593  m2_loss_dice_2: 1.281  m2_loss_ce_3: 0.6018  m2_loss_mask_3: 0.159  m2_loss_dice_3: 1.23  m2_loss_ce_4: 0.5787  m2_loss_mask_4: 0.1596  m2_loss_dice_4: 1.254  m2_loss_ce_5: 0.5677  m2_loss_mask_5: 0.1584  m2_loss_dice_5: 1.263  m2_loss_ce_6: 0.5475  m2_loss_mask_6: 0.1612  m2_loss_dice_6: 1.252  m2_loss_ce_7: 0.5311  m2_loss_mask_7: 0.1568  m2_loss_dice_7: 1.267  m2_loss_ce_8: 0.5423  m2_loss_mask_8: 0.1566  m2_loss_dice_8: 1.222  com_loss_ce: 1.818  com_loss_mask: 0.6924  com_loss_dice: 0.9728    time: 1.4604  last_time: 1.4822  data_time: 0.0439  last_data_time: 0.0479   lr: 0.0001  max_mem: 35686M
[08/30 01:29:24] d2.utils.events INFO:  eta: 0:16:31  iter: 319  total_loss: 45.58  m1_loss_ce: 0.5847  m1_loss_mask: 0.1764  m1_loss_dice: 1.2  m1_loss_ce_0: 0.6611  m1_loss_mask_0: 0.1974  m1_loss_dice_0: 1.443  m1_loss_ce_1: 0.7216  m1_loss_mask_1: 0.1852  m1_loss_dice_1: 1.356  m1_loss_ce_2: 0.639  m1_loss_mask_2: 0.1771  m1_loss_dice_2: 1.287  m1_loss_ce_3: 0.5909  m1_loss_mask_3: 0.1796  m1_loss_dice_3: 1.196  m1_loss_ce_4: 0.5781  m1_loss_mask_4: 0.1807  m1_loss_dice_4: 1.248  m1_loss_ce_5: 0.551  m1_loss_mask_5: 0.1776  m1_loss_dice_5: 1.231  m1_loss_ce_6: 0.5873  m1_loss_mask_6: 0.1781  m1_loss_dice_6: 1.197  m1_loss_ce_7: 0.5578  m1_loss_mask_7: 0.1795  m1_loss_dice_7: 1.23  m1_loss_ce_8: 0.574  m1_loss_mask_8: 0.1789  m1_loss_dice_8: 1.221  m2_loss_ce: 0.5611  m2_loss_mask: 0.1692  m2_loss_dice: 1.152  m2_loss_ce_0: 0.6067  m2_loss_mask_0: 0.1995  m2_loss_dice_0: 1.475  m2_loss_ce_1: 0.6884  m2_loss_mask_1: 0.1871  m2_loss_dice_1: 1.293  m2_loss_ce_2: 0.6646  m2_loss_mask_2: 0.1707  m2_loss_dice_2: 1.261  m2_loss_ce_3: 0.6067  m2_loss_mask_3: 0.1722  m2_loss_dice_3: 1.217  m2_loss_ce_4: 0.617  m2_loss_mask_4: 0.1737  m2_loss_dice_4: 1.213  m2_loss_ce_5: 0.5997  m2_loss_mask_5: 0.1725  m2_loss_dice_5: 1.25  m2_loss_ce_6: 0.5772  m2_loss_mask_6: 0.174  m2_loss_dice_6: 1.2  m2_loss_ce_7: 0.5786  m2_loss_mask_7: 0.1733  m2_loss_dice_7: 1.213  m2_loss_ce_8: 0.58  m2_loss_mask_8: 0.17  m2_loss_dice_8: 1.18  com_loss_ce: 1.821  com_loss_mask: 0.6924  com_loss_dice: 0.9706    time: 1.4604  last_time: 1.4606  data_time: 0.0434  last_data_time: 0.0416   lr: 0.0001  max_mem: 35686M
[08/30 01:29:53] d2.utils.events INFO:  eta: 0:16:02  iter: 339  total_loss: 43.91  m1_loss_ce: 0.5834  m1_loss_mask: 0.1692  m1_loss_dice: 1.207  m1_loss_ce_0: 0.6682  m1_loss_mask_0: 0.2026  m1_loss_dice_0: 1.405  m1_loss_ce_1: 0.7409  m1_loss_mask_1: 0.1874  m1_loss_dice_1: 1.313  m1_loss_ce_2: 0.6579  m1_loss_mask_2: 0.1746  m1_loss_dice_2: 1.294  m1_loss_ce_3: 0.617  m1_loss_mask_3: 0.1778  m1_loss_dice_3: 1.241  m1_loss_ce_4: 0.591  m1_loss_mask_4: 0.1743  m1_loss_dice_4: 1.214  m1_loss_ce_5: 0.5605  m1_loss_mask_5: 0.1694  m1_loss_dice_5: 1.187  m1_loss_ce_6: 0.5522  m1_loss_mask_6: 0.1694  m1_loss_dice_6: 1.215  m1_loss_ce_7: 0.5748  m1_loss_mask_7: 0.1699  m1_loss_dice_7: 1.209  m1_loss_ce_8: 0.5632  m1_loss_mask_8: 0.1676  m1_loss_dice_8: 1.203  m2_loss_ce: 0.561  m2_loss_mask: 0.1741  m2_loss_dice: 1.163  m2_loss_ce_0: 0.6335  m2_loss_mask_0: 0.209  m2_loss_dice_0: 1.436  m2_loss_ce_1: 0.7247  m2_loss_mask_1: 0.1877  m2_loss_dice_1: 1.286  m2_loss_ce_2: 0.6698  m2_loss_mask_2: 0.1756  m2_loss_dice_2: 1.234  m2_loss_ce_3: 0.6443  m2_loss_mask_3: 0.1743  m2_loss_dice_3: 1.197  m2_loss_ce_4: 0.6178  m2_loss_mask_4: 0.1767  m2_loss_dice_4: 1.184  m2_loss_ce_5: 0.6059  m2_loss_mask_5: 0.1737  m2_loss_dice_5: 1.195  m2_loss_ce_6: 0.5759  m2_loss_mask_6: 0.1747  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.5828  m2_loss_mask_7: 0.1748  m2_loss_dice_7: 1.169  m2_loss_ce_8: 0.5707  m2_loss_mask_8: 0.1719  m2_loss_dice_8: 1.148  com_loss_ce: 1.847  com_loss_mask: 0.6923  com_loss_dice: 0.9702    time: 1.4604  last_time: 1.4487  data_time: 0.0445  last_data_time: 0.0405   lr: 0.0001  max_mem: 35686M
[08/30 01:30:23] d2.utils.events INFO:  eta: 0:15:33  iter: 359  total_loss: 44.26  m1_loss_ce: 0.5312  m1_loss_mask: 0.1661  m1_loss_dice: 1.234  m1_loss_ce_0: 0.6211  m1_loss_mask_0: 0.2016  m1_loss_dice_0: 1.402  m1_loss_ce_1: 0.6227  m1_loss_mask_1: 0.1853  m1_loss_dice_1: 1.363  m1_loss_ce_2: 0.5941  m1_loss_mask_2: 0.1748  m1_loss_dice_2: 1.333  m1_loss_ce_3: 0.5725  m1_loss_mask_3: 0.1733  m1_loss_dice_3: 1.289  m1_loss_ce_4: 0.5634  m1_loss_mask_4: 0.1718  m1_loss_dice_4: 1.231  m1_loss_ce_5: 0.5382  m1_loss_mask_5: 0.1725  m1_loss_dice_5: 1.276  m1_loss_ce_6: 0.514  m1_loss_mask_6: 0.1692  m1_loss_dice_6: 1.225  m1_loss_ce_7: 0.5189  m1_loss_mask_7: 0.1699  m1_loss_dice_7: 1.237  m1_loss_ce_8: 0.5371  m1_loss_mask_8: 0.1641  m1_loss_dice_8: 1.233  m2_loss_ce: 0.5525  m2_loss_mask: 0.1593  m2_loss_dice: 1.199  m2_loss_ce_0: 0.614  m2_loss_mask_0: 0.1893  m2_loss_dice_0: 1.476  m2_loss_ce_1: 0.6788  m2_loss_mask_1: 0.1773  m2_loss_dice_1: 1.366  m2_loss_ce_2: 0.6048  m2_loss_mask_2: 0.1664  m2_loss_dice_2: 1.281  m2_loss_ce_3: 0.5705  m2_loss_mask_3: 0.1622  m2_loss_dice_3: 1.242  m2_loss_ce_4: 0.5363  m2_loss_mask_4: 0.1654  m2_loss_dice_4: 1.268  m2_loss_ce_5: 0.5456  m2_loss_mask_5: 0.1578  m2_loss_dice_5: 1.275  m2_loss_ce_6: 0.5488  m2_loss_mask_6: 0.1591  m2_loss_dice_6: 1.252  m2_loss_ce_7: 0.5521  m2_loss_mask_7: 0.1612  m2_loss_dice_7: 1.236  m2_loss_ce_8: 0.516  m2_loss_mask_8: 0.1626  m2_loss_dice_8: 1.267  com_loss_ce: 1.819  com_loss_mask: 0.6924  com_loss_dice: 0.9718    time: 1.4615  last_time: 1.4504  data_time: 0.0434  last_data_time: 0.0322   lr: 0.0001  max_mem: 35686M
[08/30 01:30:52] d2.utils.events INFO:  eta: 0:15:04  iter: 379  total_loss: 44.17  m1_loss_ce: 0.5466  m1_loss_mask: 0.1655  m1_loss_dice: 1.198  m1_loss_ce_0: 0.6106  m1_loss_mask_0: 0.1904  m1_loss_dice_0: 1.444  m1_loss_ce_1: 0.7186  m1_loss_mask_1: 0.1757  m1_loss_dice_1: 1.348  m1_loss_ce_2: 0.644  m1_loss_mask_2: 0.1639  m1_loss_dice_2: 1.273  m1_loss_ce_3: 0.5768  m1_loss_mask_3: 0.1665  m1_loss_dice_3: 1.235  m1_loss_ce_4: 0.5653  m1_loss_mask_4: 0.1646  m1_loss_dice_4: 1.195  m1_loss_ce_5: 0.5554  m1_loss_mask_5: 0.1624  m1_loss_dice_5: 1.216  m1_loss_ce_6: 0.5426  m1_loss_mask_6: 0.1646  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.5653  m1_loss_mask_7: 0.1631  m1_loss_dice_7: 1.201  m1_loss_ce_8: 0.5298  m1_loss_mask_8: 0.1634  m1_loss_dice_8: 1.198  m2_loss_ce: 0.5582  m2_loss_mask: 0.167  m2_loss_dice: 1.216  m2_loss_ce_0: 0.6495  m2_loss_mask_0: 0.2013  m2_loss_dice_0: 1.461  m2_loss_ce_1: 0.7493  m2_loss_mask_1: 0.184  m2_loss_dice_1: 1.336  m2_loss_ce_2: 0.6594  m2_loss_mask_2: 0.1691  m2_loss_dice_2: 1.293  m2_loss_ce_3: 0.6137  m2_loss_mask_3: 0.1701  m2_loss_dice_3: 1.235  m2_loss_ce_4: 0.5912  m2_loss_mask_4: 0.1721  m2_loss_dice_4: 1.247  m2_loss_ce_5: 0.5995  m2_loss_mask_5: 0.166  m2_loss_dice_5: 1.236  m2_loss_ce_6: 0.5909  m2_loss_mask_6: 0.1682  m2_loss_dice_6: 1.223  m2_loss_ce_7: 0.5908  m2_loss_mask_7: 0.1685  m2_loss_dice_7: 1.217  m2_loss_ce_8: 0.5549  m2_loss_mask_8: 0.1662  m2_loss_dice_8: 1.185  com_loss_ce: 1.819  com_loss_mask: 0.6924  com_loss_dice: 0.9727    time: 1.4617  last_time: 1.4394  data_time: 0.0446  last_data_time: 0.0374   lr: 0.0001  max_mem: 35686M
[08/30 01:31:22] d2.utils.events INFO:  eta: 0:14:35  iter: 399  total_loss: 43.06  m1_loss_ce: 0.5311  m1_loss_mask: 0.1595  m1_loss_dice: 1.168  m1_loss_ce_0: 0.6126  m1_loss_mask_0: 0.1876  m1_loss_dice_0: 1.392  m1_loss_ce_1: 0.6688  m1_loss_mask_1: 0.1739  m1_loss_dice_1: 1.29  m1_loss_ce_2: 0.5973  m1_loss_mask_2: 0.1595  m1_loss_dice_2: 1.236  m1_loss_ce_3: 0.5443  m1_loss_mask_3: 0.1635  m1_loss_dice_3: 1.19  m1_loss_ce_4: 0.5306  m1_loss_mask_4: 0.1626  m1_loss_dice_4: 1.195  m1_loss_ce_5: 0.5505  m1_loss_mask_5: 0.1596  m1_loss_dice_5: 1.184  m1_loss_ce_6: 0.5166  m1_loss_mask_6: 0.1597  m1_loss_dice_6: 1.145  m1_loss_ce_7: 0.4934  m1_loss_mask_7: 0.1584  m1_loss_dice_7: 1.156  m1_loss_ce_8: 0.4789  m1_loss_mask_8: 0.1594  m1_loss_dice_8: 1.167  m2_loss_ce: 0.4926  m2_loss_mask: 0.164  m2_loss_dice: 1.212  m2_loss_ce_0: 0.5776  m2_loss_mask_0: 0.1928  m2_loss_dice_0: 1.427  m2_loss_ce_1: 0.6393  m2_loss_mask_1: 0.1769  m2_loss_dice_1: 1.27  m2_loss_ce_2: 0.5794  m2_loss_mask_2: 0.1666  m2_loss_dice_2: 1.245  m2_loss_ce_3: 0.5461  m2_loss_mask_3: 0.1664  m2_loss_dice_3: 1.235  m2_loss_ce_4: 0.5382  m2_loss_mask_4: 0.1684  m2_loss_dice_4: 1.241  m2_loss_ce_5: 0.5061  m2_loss_mask_5: 0.1642  m2_loss_dice_5: 1.224  m2_loss_ce_6: 0.499  m2_loss_mask_6: 0.1665  m2_loss_dice_6: 1.174  m2_loss_ce_7: 0.5277  m2_loss_mask_7: 0.1648  m2_loss_dice_7: 1.226  m2_loss_ce_8: 0.5214  m2_loss_mask_8: 0.163  m2_loss_dice_8: 1.231  com_loss_ce: 1.781  com_loss_mask: 0.6924  com_loss_dice: 0.9686    time: 1.4633  last_time: 1.4817  data_time: 0.0452  last_data_time: 0.0522   lr: 0.0001  max_mem: 35686M
[08/30 01:31:51] d2.utils.events INFO:  eta: 0:14:06  iter: 419  total_loss: 45.21  m1_loss_ce: 0.5865  m1_loss_mask: 0.1525  m1_loss_dice: 1.206  m1_loss_ce_0: 0.6568  m1_loss_mask_0: 0.1804  m1_loss_dice_0: 1.403  m1_loss_ce_1: 0.7274  m1_loss_mask_1: 0.1634  m1_loss_dice_1: 1.351  m1_loss_ce_2: 0.7042  m1_loss_mask_2: 0.1555  m1_loss_dice_2: 1.267  m1_loss_ce_3: 0.6624  m1_loss_mask_3: 0.1587  m1_loss_dice_3: 1.223  m1_loss_ce_4: 0.6332  m1_loss_mask_4: 0.1594  m1_loss_dice_4: 1.228  m1_loss_ce_5: 0.5962  m1_loss_mask_5: 0.1563  m1_loss_dice_5: 1.21  m1_loss_ce_6: 0.5929  m1_loss_mask_6: 0.1565  m1_loss_dice_6: 1.183  m1_loss_ce_7: 0.5883  m1_loss_mask_7: 0.1557  m1_loss_dice_7: 1.188  m1_loss_ce_8: 0.5776  m1_loss_mask_8: 0.1531  m1_loss_dice_8: 1.208  m2_loss_ce: 0.569  m2_loss_mask: 0.1582  m2_loss_dice: 1.208  m2_loss_ce_0: 0.676  m2_loss_mask_0: 0.1866  m2_loss_dice_0: 1.469  m2_loss_ce_1: 0.7404  m2_loss_mask_1: 0.1669  m2_loss_dice_1: 1.368  m2_loss_ce_2: 0.6889  m2_loss_mask_2: 0.1655  m2_loss_dice_2: 1.27  m2_loss_ce_3: 0.6729  m2_loss_mask_3: 0.1618  m2_loss_dice_3: 1.262  m2_loss_ce_4: 0.6399  m2_loss_mask_4: 0.1614  m2_loss_dice_4: 1.235  m2_loss_ce_5: 0.6414  m2_loss_mask_5: 0.1588  m2_loss_dice_5: 1.266  m2_loss_ce_6: 0.5978  m2_loss_mask_6: 0.1588  m2_loss_dice_6: 1.219  m2_loss_ce_7: 0.6095  m2_loss_mask_7: 0.1574  m2_loss_dice_7: 1.201  m2_loss_ce_8: 0.6128  m2_loss_mask_8: 0.1552  m2_loss_dice_8: 1.238  com_loss_ce: 1.847  com_loss_mask: 0.6924  com_loss_dice: 0.9715    time: 1.4631  last_time: 1.4706  data_time: 0.0401  last_data_time: 0.0443   lr: 0.0001  max_mem: 35686M
[08/30 01:32:21] d2.utils.events INFO:  eta: 0:13:37  iter: 439  total_loss: 42.73  m1_loss_ce: 0.5077  m1_loss_mask: 0.1629  m1_loss_dice: 1.161  m1_loss_ce_0: 0.5904  m1_loss_mask_0: 0.1881  m1_loss_dice_0: 1.36  m1_loss_ce_1: 0.6399  m1_loss_mask_1: 0.1715  m1_loss_dice_1: 1.294  m1_loss_ce_2: 0.6123  m1_loss_mask_2: 0.1662  m1_loss_dice_2: 1.256  m1_loss_ce_3: 0.553  m1_loss_mask_3: 0.1706  m1_loss_dice_3: 1.196  m1_loss_ce_4: 0.5306  m1_loss_mask_4: 0.1693  m1_loss_dice_4: 1.201  m1_loss_ce_5: 0.5273  m1_loss_mask_5: 0.1657  m1_loss_dice_5: 1.171  m1_loss_ce_6: 0.5004  m1_loss_mask_6: 0.165  m1_loss_dice_6: 1.179  m1_loss_ce_7: 0.4708  m1_loss_mask_7: 0.1656  m1_loss_dice_7: 1.161  m1_loss_ce_8: 0.494  m1_loss_mask_8: 0.165  m1_loss_dice_8: 1.168  m2_loss_ce: 0.5028  m2_loss_mask: 0.163  m2_loss_dice: 1.184  m2_loss_ce_0: 0.6039  m2_loss_mask_0: 0.1932  m2_loss_dice_0: 1.44  m2_loss_ce_1: 0.6663  m2_loss_mask_1: 0.1683  m2_loss_dice_1: 1.29  m2_loss_ce_2: 0.6098  m2_loss_mask_2: 0.1646  m2_loss_dice_2: 1.236  m2_loss_ce_3: 0.5779  m2_loss_mask_3: 0.1668  m2_loss_dice_3: 1.199  m2_loss_ce_4: 0.5555  m2_loss_mask_4: 0.1655  m2_loss_dice_4: 1.201  m2_loss_ce_5: 0.5498  m2_loss_mask_5: 0.1631  m2_loss_dice_5: 1.185  m2_loss_ce_6: 0.5217  m2_loss_mask_6: 0.163  m2_loss_dice_6: 1.192  m2_loss_ce_7: 0.5209  m2_loss_mask_7: 0.1637  m2_loss_dice_7: 1.204  m2_loss_ce_8: 0.5016  m2_loss_mask_8: 0.1607  m2_loss_dice_8: 1.21  com_loss_ce: 1.83  com_loss_mask: 0.6924  com_loss_dice: 0.9712    time: 1.4631  last_time: 1.4979  data_time: 0.0439  last_data_time: 0.0425   lr: 0.0001  max_mem: 35686M
[08/30 01:32:51] d2.utils.events INFO:  eta: 0:13:09  iter: 459  total_loss: 44.32  m1_loss_ce: 0.5363  m1_loss_mask: 0.1602  m1_loss_dice: 1.218  m1_loss_ce_0: 0.6366  m1_loss_mask_0: 0.1856  m1_loss_dice_0: 1.438  m1_loss_ce_1: 0.7044  m1_loss_mask_1: 0.178  m1_loss_dice_1: 1.342  m1_loss_ce_2: 0.6224  m1_loss_mask_2: 0.1652  m1_loss_dice_2: 1.287  m1_loss_ce_3: 0.5773  m1_loss_mask_3: 0.1658  m1_loss_dice_3: 1.204  m1_loss_ce_4: 0.5916  m1_loss_mask_4: 0.1626  m1_loss_dice_4: 1.229  m1_loss_ce_5: 0.5497  m1_loss_mask_5: 0.161  m1_loss_dice_5: 1.197  m1_loss_ce_6: 0.5121  m1_loss_mask_6: 0.1622  m1_loss_dice_6: 1.229  m1_loss_ce_7: 0.523  m1_loss_mask_7: 0.1592  m1_loss_dice_7: 1.248  m1_loss_ce_8: 0.5377  m1_loss_mask_8: 0.159  m1_loss_dice_8: 1.218  m2_loss_ce: 0.5498  m2_loss_mask: 0.165  m2_loss_dice: 1.204  m2_loss_ce_0: 0.617  m2_loss_mask_0: 0.2072  m2_loss_dice_0: 1.459  m2_loss_ce_1: 0.7277  m2_loss_mask_1: 0.1808  m2_loss_dice_1: 1.333  m2_loss_ce_2: 0.6622  m2_loss_mask_2: 0.174  m2_loss_dice_2: 1.262  m2_loss_ce_3: 0.6133  m2_loss_mask_3: 0.1679  m2_loss_dice_3: 1.25  m2_loss_ce_4: 0.5762  m2_loss_mask_4: 0.1691  m2_loss_dice_4: 1.246  m2_loss_ce_5: 0.5451  m2_loss_mask_5: 0.1652  m2_loss_dice_5: 1.245  m2_loss_ce_6: 0.5514  m2_loss_mask_6: 0.1682  m2_loss_dice_6: 1.218  m2_loss_ce_7: 0.5379  m2_loss_mask_7: 0.1654  m2_loss_dice_7: 1.176  m2_loss_ce_8: 0.5662  m2_loss_mask_8: 0.1641  m2_loss_dice_8: 1.219  com_loss_ce: 1.814  com_loss_mask: 0.6924  com_loss_dice: 0.9713    time: 1.4645  last_time: 1.4641  data_time: 0.0437  last_data_time: 0.0418   lr: 0.0001  max_mem: 35686M
[08/30 01:33:21] d2.utils.events INFO:  eta: 0:12:40  iter: 479  total_loss: 44.73  m1_loss_ce: 0.5639  m1_loss_mask: 0.1676  m1_loss_dice: 1.15  m1_loss_ce_0: 0.6554  m1_loss_mask_0: 0.1925  m1_loss_dice_0: 1.361  m1_loss_ce_1: 0.7211  m1_loss_mask_1: 0.1793  m1_loss_dice_1: 1.359  m1_loss_ce_2: 0.6887  m1_loss_mask_2: 0.1727  m1_loss_dice_2: 1.229  m1_loss_ce_3: 0.611  m1_loss_mask_3: 0.172  m1_loss_dice_3: 1.189  m1_loss_ce_4: 0.6063  m1_loss_mask_4: 0.1722  m1_loss_dice_4: 1.214  m1_loss_ce_5: 0.5532  m1_loss_mask_5: 0.1685  m1_loss_dice_5: 1.209  m1_loss_ce_6: 0.5501  m1_loss_mask_6: 0.1721  m1_loss_dice_6: 1.17  m1_loss_ce_7: 0.5662  m1_loss_mask_7: 0.17  m1_loss_dice_7: 1.208  m1_loss_ce_8: 0.5501  m1_loss_mask_8: 0.1681  m1_loss_dice_8: 1.206  m2_loss_ce: 0.583  m2_loss_mask: 0.1652  m2_loss_dice: 1.202  m2_loss_ce_0: 0.6551  m2_loss_mask_0: 0.2016  m2_loss_dice_0: 1.453  m2_loss_ce_1: 0.768  m2_loss_mask_1: 0.1775  m2_loss_dice_1: 1.299  m2_loss_ce_2: 0.6805  m2_loss_mask_2: 0.1729  m2_loss_dice_2: 1.275  m2_loss_ce_3: 0.6299  m2_loss_mask_3: 0.1733  m2_loss_dice_3: 1.246  m2_loss_ce_4: 0.6152  m2_loss_mask_4: 0.1681  m2_loss_dice_4: 1.245  m2_loss_ce_5: 0.5837  m2_loss_mask_5: 0.1702  m2_loss_dice_5: 1.232  m2_loss_ce_6: 0.5786  m2_loss_mask_6: 0.167  m2_loss_dice_6: 1.179  m2_loss_ce_7: 0.5484  m2_loss_mask_7: 0.1659  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.5664  m2_loss_mask_8: 0.1654  m2_loss_dice_8: 1.212  com_loss_ce: 1.828  com_loss_mask: 0.6924  com_loss_dice: 0.9711    time: 1.4654  last_time: 1.4882  data_time: 0.0442  last_data_time: 0.0401   lr: 0.0001  max_mem: 35686M
[08/30 01:33:51] d2.utils.events INFO:  eta: 0:12:11  iter: 499  total_loss: 44.51  m1_loss_ce: 0.5286  m1_loss_mask: 0.1616  m1_loss_dice: 1.235  m1_loss_ce_0: 0.6632  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.395  m1_loss_ce_1: 0.6498  m1_loss_mask_1: 0.1743  m1_loss_dice_1: 1.32  m1_loss_ce_2: 0.6169  m1_loss_mask_2: 0.1689  m1_loss_dice_2: 1.298  m1_loss_ce_3: 0.5749  m1_loss_mask_3: 0.1685  m1_loss_dice_3: 1.225  m1_loss_ce_4: 0.5432  m1_loss_mask_4: 0.167  m1_loss_dice_4: 1.258  m1_loss_ce_5: 0.5251  m1_loss_mask_5: 0.1632  m1_loss_dice_5: 1.276  m1_loss_ce_6: 0.497  m1_loss_mask_6: 0.1634  m1_loss_dice_6: 1.24  m1_loss_ce_7: 0.5286  m1_loss_mask_7: 0.1628  m1_loss_dice_7: 1.189  m1_loss_ce_8: 0.4941  m1_loss_mask_8: 0.1628  m1_loss_dice_8: 1.242  m2_loss_ce: 0.5723  m2_loss_mask: 0.1621  m2_loss_dice: 1.225  m2_loss_ce_0: 0.6188  m2_loss_mask_0: 0.1865  m2_loss_dice_0: 1.526  m2_loss_ce_1: 0.6844  m2_loss_mask_1: 0.175  m2_loss_dice_1: 1.376  m2_loss_ce_2: 0.654  m2_loss_mask_2: 0.1675  m2_loss_dice_2: 1.277  m2_loss_ce_3: 0.5984  m2_loss_mask_3: 0.1654  m2_loss_dice_3: 1.283  m2_loss_ce_4: 0.5831  m2_loss_mask_4: 0.1652  m2_loss_dice_4: 1.278  m2_loss_ce_5: 0.5813  m2_loss_mask_5: 0.1591  m2_loss_dice_5: 1.279  m2_loss_ce_6: 0.551  m2_loss_mask_6: 0.1652  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.5365  m2_loss_mask_7: 0.1618  m2_loss_dice_7: 1.205  m2_loss_ce_8: 0.5525  m2_loss_mask_8: 0.1635  m2_loss_dice_8: 1.243  com_loss_ce: 1.807  com_loss_mask: 0.6923  com_loss_dice: 0.9707    time: 1.4670  last_time: 1.5154  data_time: 0.0449  last_data_time: 0.0425   lr: 0.0001  max_mem: 35727M
[08/30 01:34:20] d2.utils.events INFO:  eta: 0:11:42  iter: 519  total_loss: 43.58  m1_loss_ce: 0.5455  m1_loss_mask: 0.168  m1_loss_dice: 1.196  m1_loss_ce_0: 0.6306  m1_loss_mask_0: 0.183  m1_loss_dice_0: 1.35  m1_loss_ce_1: 0.6919  m1_loss_mask_1: 0.1769  m1_loss_dice_1: 1.33  m1_loss_ce_2: 0.6384  m1_loss_mask_2: 0.169  m1_loss_dice_2: 1.232  m1_loss_ce_3: 0.5735  m1_loss_mask_3: 0.1714  m1_loss_dice_3: 1.205  m1_loss_ce_4: 0.5199  m1_loss_mask_4: 0.1699  m1_loss_dice_4: 1.217  m1_loss_ce_5: 0.5177  m1_loss_mask_5: 0.1673  m1_loss_dice_5: 1.212  m1_loss_ce_6: 0.5131  m1_loss_mask_6: 0.1679  m1_loss_dice_6: 1.177  m1_loss_ce_7: 0.5047  m1_loss_mask_7: 0.1679  m1_loss_dice_7: 1.211  m1_loss_ce_8: 0.4932  m1_loss_mask_8: 0.1692  m1_loss_dice_8: 1.192  m2_loss_ce: 0.5231  m2_loss_mask: 0.1699  m2_loss_dice: 1.21  m2_loss_ce_0: 0.6166  m2_loss_mask_0: 0.1958  m2_loss_dice_0: 1.444  m2_loss_ce_1: 0.6801  m2_loss_mask_1: 0.1775  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.6226  m2_loss_mask_2: 0.1707  m2_loss_dice_2: 1.297  m2_loss_ce_3: 0.6085  m2_loss_mask_3: 0.1709  m2_loss_dice_3: 1.217  m2_loss_ce_4: 0.5687  m2_loss_mask_4: 0.17  m2_loss_dice_4: 1.238  m2_loss_ce_5: 0.5566  m2_loss_mask_5: 0.1683  m2_loss_dice_5: 1.23  m2_loss_ce_6: 0.5626  m2_loss_mask_6: 0.1697  m2_loss_dice_6: 1.223  m2_loss_ce_7: 0.5276  m2_loss_mask_7: 0.1686  m2_loss_dice_7: 1.219  m2_loss_ce_8: 0.532  m2_loss_mask_8: 0.1689  m2_loss_dice_8: 1.211  com_loss_ce: 1.806  com_loss_mask: 0.6924  com_loss_dice: 0.9704    time: 1.4669  last_time: 1.3948  data_time: 0.0443  last_data_time: 0.0515   lr: 0.0001  max_mem: 35727M
[08/30 01:34:50] d2.utils.events INFO:  eta: 0:11:13  iter: 539  total_loss: 43.58  m1_loss_ce: 0.5576  m1_loss_mask: 0.1722  m1_loss_dice: 1.201  m1_loss_ce_0: 0.6298  m1_loss_mask_0: 0.2017  m1_loss_dice_0: 1.379  m1_loss_ce_1: 0.6979  m1_loss_mask_1: 0.1906  m1_loss_dice_1: 1.314  m1_loss_ce_2: 0.6487  m1_loss_mask_2: 0.1774  m1_loss_dice_2: 1.245  m1_loss_ce_3: 0.5786  m1_loss_mask_3: 0.1748  m1_loss_dice_3: 1.214  m1_loss_ce_4: 0.5316  m1_loss_mask_4: 0.1743  m1_loss_dice_4: 1.195  m1_loss_ce_5: 0.5462  m1_loss_mask_5: 0.1743  m1_loss_dice_5: 1.201  m1_loss_ce_6: 0.5132  m1_loss_mask_6: 0.1736  m1_loss_dice_6: 1.171  m1_loss_ce_7: 0.519  m1_loss_mask_7: 0.1729  m1_loss_dice_7: 1.179  m1_loss_ce_8: 0.5007  m1_loss_mask_8: 0.1718  m1_loss_dice_8: 1.193  m2_loss_ce: 0.5138  m2_loss_mask: 0.1802  m2_loss_dice: 1.199  m2_loss_ce_0: 0.617  m2_loss_mask_0: 0.2149  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.7213  m2_loss_mask_1: 0.1961  m2_loss_dice_1: 1.323  m2_loss_ce_2: 0.6245  m2_loss_mask_2: 0.1878  m2_loss_dice_2: 1.284  m2_loss_ce_3: 0.6005  m2_loss_mask_3: 0.1833  m2_loss_dice_3: 1.195  m2_loss_ce_4: 0.5673  m2_loss_mask_4: 0.1831  m2_loss_dice_4: 1.206  m2_loss_ce_5: 0.5527  m2_loss_mask_5: 0.1802  m2_loss_dice_5: 1.221  m2_loss_ce_6: 0.5366  m2_loss_mask_6: 0.1806  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.5321  m2_loss_mask_7: 0.1787  m2_loss_dice_7: 1.174  m2_loss_ce_8: 0.5254  m2_loss_mask_8: 0.178  m2_loss_dice_8: 1.196  com_loss_ce: 1.782  com_loss_mask: 0.6924  com_loss_dice: 0.9712    time: 1.4672  last_time: 1.4710  data_time: 0.0420  last_data_time: 0.0439   lr: 0.0001  max_mem: 35727M
[08/30 01:35:19] d2.utils.events INFO:  eta: 0:10:44  iter: 559  total_loss: 43.67  m1_loss_ce: 0.575  m1_loss_mask: 0.1633  m1_loss_dice: 1.224  m1_loss_ce_0: 0.627  m1_loss_mask_0: 0.1887  m1_loss_dice_0: 1.396  m1_loss_ce_1: 0.6873  m1_loss_mask_1: 0.17  m1_loss_dice_1: 1.295  m1_loss_ce_2: 0.6454  m1_loss_mask_2: 0.1642  m1_loss_dice_2: 1.276  m1_loss_ce_3: 0.5763  m1_loss_mask_3: 0.1651  m1_loss_dice_3: 1.216  m1_loss_ce_4: 0.5371  m1_loss_mask_4: 0.1673  m1_loss_dice_4: 1.2  m1_loss_ce_5: 0.5195  m1_loss_mask_5: 0.1645  m1_loss_dice_5: 1.224  m1_loss_ce_6: 0.541  m1_loss_mask_6: 0.1633  m1_loss_dice_6: 1.2  m1_loss_ce_7: 0.5137  m1_loss_mask_7: 0.1627  m1_loss_dice_7: 1.203  m1_loss_ce_8: 0.5491  m1_loss_mask_8: 0.1608  m1_loss_dice_8: 1.193  m2_loss_ce: 0.5649  m2_loss_mask: 0.1674  m2_loss_dice: 1.23  m2_loss_ce_0: 0.64  m2_loss_mask_0: 0.2017  m2_loss_dice_0: 1.449  m2_loss_ce_1: 0.7168  m2_loss_mask_1: 0.1811  m2_loss_dice_1: 1.336  m2_loss_ce_2: 0.6356  m2_loss_mask_2: 0.1741  m2_loss_dice_2: 1.287  m2_loss_ce_3: 0.6018  m2_loss_mask_3: 0.1701  m2_loss_dice_3: 1.207  m2_loss_ce_4: 0.5729  m2_loss_mask_4: 0.1717  m2_loss_dice_4: 1.234  m2_loss_ce_5: 0.5985  m2_loss_mask_5: 0.1678  m2_loss_dice_5: 1.236  m2_loss_ce_6: 0.5338  m2_loss_mask_6: 0.1684  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.5607  m2_loss_mask_7: 0.1688  m2_loss_dice_7: 1.249  m2_loss_ce_8: 0.572  m2_loss_mask_8: 0.167  m2_loss_dice_8: 1.21  com_loss_ce: 1.795  com_loss_mask: 0.6924  com_loss_dice: 0.9713    time: 1.4674  last_time: 1.4846  data_time: 0.0396  last_data_time: 0.0424   lr: 0.0001  max_mem: 35727M
[08/30 01:35:49] d2.utils.events INFO:  eta: 0:10:15  iter: 579  total_loss: 45.48  m1_loss_ce: 0.5241  m1_loss_mask: 0.1586  m1_loss_dice: 1.282  m1_loss_ce_0: 0.6439  m1_loss_mask_0: 0.1954  m1_loss_dice_0: 1.432  m1_loss_ce_1: 0.7027  m1_loss_mask_1: 0.1776  m1_loss_dice_1: 1.321  m1_loss_ce_2: 0.6334  m1_loss_mask_2: 0.1667  m1_loss_dice_2: 1.335  m1_loss_ce_3: 0.5926  m1_loss_mask_3: 0.1683  m1_loss_dice_3: 1.275  m1_loss_ce_4: 0.6013  m1_loss_mask_4: 0.163  m1_loss_dice_4: 1.265  m1_loss_ce_5: 0.5734  m1_loss_mask_5: 0.1608  m1_loss_dice_5: 1.245  m1_loss_ce_6: 0.5133  m1_loss_mask_6: 0.1605  m1_loss_dice_6: 1.271  m1_loss_ce_7: 0.5478  m1_loss_mask_7: 0.1584  m1_loss_dice_7: 1.245  m1_loss_ce_8: 0.5563  m1_loss_mask_8: 0.1595  m1_loss_dice_8: 1.254  m2_loss_ce: 0.5571  m2_loss_mask: 0.1697  m2_loss_dice: 1.25  m2_loss_ce_0: 0.6294  m2_loss_mask_0: 0.1997  m2_loss_dice_0: 1.495  m2_loss_ce_1: 0.7121  m2_loss_mask_1: 0.1868  m2_loss_dice_1: 1.367  m2_loss_ce_2: 0.6344  m2_loss_mask_2: 0.1774  m2_loss_dice_2: 1.337  m2_loss_ce_3: 0.5869  m2_loss_mask_3: 0.1821  m2_loss_dice_3: 1.264  m2_loss_ce_4: 0.5902  m2_loss_mask_4: 0.1762  m2_loss_dice_4: 1.279  m2_loss_ce_5: 0.5864  m2_loss_mask_5: 0.1781  m2_loss_dice_5: 1.286  m2_loss_ce_6: 0.5593  m2_loss_mask_6: 0.176  m2_loss_dice_6: 1.291  m2_loss_ce_7: 0.5616  m2_loss_mask_7: 0.1773  m2_loss_dice_7: 1.249  m2_loss_ce_8: 0.5689  m2_loss_mask_8: 0.1703  m2_loss_dice_8: 1.297  com_loss_ce: 1.801  com_loss_mask: 0.6923  com_loss_dice: 0.9717    time: 1.4682  last_time: 1.4799  data_time: 0.0442  last_data_time: 0.0355   lr: 0.0001  max_mem: 35727M
[08/30 01:36:19] d2.utils.events INFO:  eta: 0:09:46  iter: 599  total_loss: 43.38  m1_loss_ce: 0.5525  m1_loss_mask: 0.1602  m1_loss_dice: 1.179  m1_loss_ce_0: 0.6454  m1_loss_mask_0: 0.1848  m1_loss_dice_0: 1.313  m1_loss_ce_1: 0.7004  m1_loss_mask_1: 0.1761  m1_loss_dice_1: 1.266  m1_loss_ce_2: 0.6594  m1_loss_mask_2: 0.163  m1_loss_dice_2: 1.211  m1_loss_ce_3: 0.5889  m1_loss_mask_3: 0.1618  m1_loss_dice_3: 1.192  m1_loss_ce_4: 0.5737  m1_loss_mask_4: 0.1623  m1_loss_dice_4: 1.209  m1_loss_ce_5: 0.5581  m1_loss_mask_5: 0.1587  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.5263  m1_loss_mask_6: 0.1613  m1_loss_dice_6: 1.171  m1_loss_ce_7: 0.5372  m1_loss_mask_7: 0.1588  m1_loss_dice_7: 1.179  m1_loss_ce_8: 0.5137  m1_loss_mask_8: 0.1601  m1_loss_dice_8: 1.188  m2_loss_ce: 0.5512  m2_loss_mask: 0.1612  m2_loss_dice: 1.182  m2_loss_ce_0: 0.6145  m2_loss_mask_0: 0.1909  m2_loss_dice_0: 1.423  m2_loss_ce_1: 0.697  m2_loss_mask_1: 0.1796  m2_loss_dice_1: 1.268  m2_loss_ce_2: 0.6481  m2_loss_mask_2: 0.1673  m2_loss_dice_2: 1.262  m2_loss_ce_3: 0.5804  m2_loss_mask_3: 0.1712  m2_loss_dice_3: 1.212  m2_loss_ce_4: 0.5797  m2_loss_mask_4: 0.1724  m2_loss_dice_4: 1.17  m2_loss_ce_5: 0.5851  m2_loss_mask_5: 0.1702  m2_loss_dice_5: 1.163  m2_loss_ce_6: 0.5402  m2_loss_mask_6: 0.1706  m2_loss_dice_6: 1.171  m2_loss_ce_7: 0.5481  m2_loss_mask_7: 0.1642  m2_loss_dice_7: 1.173  m2_loss_ce_8: 0.539  m2_loss_mask_8: 0.163  m2_loss_dice_8: 1.201  com_loss_ce: 1.817  com_loss_mask: 0.6924  com_loss_dice: 0.9702    time: 1.4691  last_time: 1.4908  data_time: 0.0456  last_data_time: 0.0438   lr: 0.0001  max_mem: 35727M
[08/30 01:36:49] d2.utils.events INFO:  eta: 0:09:16  iter: 619  total_loss: 44.78  m1_loss_ce: 0.5437  m1_loss_mask: 0.1656  m1_loss_dice: 1.177  m1_loss_ce_0: 0.6492  m1_loss_mask_0: 0.2017  m1_loss_dice_0: 1.399  m1_loss_ce_1: 0.7106  m1_loss_mask_1: 0.1817  m1_loss_dice_1: 1.307  m1_loss_ce_2: 0.6512  m1_loss_mask_2: 0.1719  m1_loss_dice_2: 1.278  m1_loss_ce_3: 0.6155  m1_loss_mask_3: 0.1674  m1_loss_dice_3: 1.195  m1_loss_ce_4: 0.5482  m1_loss_mask_4: 0.1691  m1_loss_dice_4: 1.23  m1_loss_ce_5: 0.568  m1_loss_mask_5: 0.1666  m1_loss_dice_5: 1.235  m1_loss_ce_6: 0.5615  m1_loss_mask_6: 0.165  m1_loss_dice_6: 1.208  m1_loss_ce_7: 0.5474  m1_loss_mask_7: 0.167  m1_loss_dice_7: 1.21  m1_loss_ce_8: 0.5512  m1_loss_mask_8: 0.167  m1_loss_dice_8: 1.179  m2_loss_ce: 0.5601  m2_loss_mask: 0.162  m2_loss_dice: 1.236  m2_loss_ce_0: 0.6215  m2_loss_mask_0: 0.1993  m2_loss_dice_0: 1.483  m2_loss_ce_1: 0.6943  m2_loss_mask_1: 0.1741  m2_loss_dice_1: 1.383  m2_loss_ce_2: 0.6896  m2_loss_mask_2: 0.167  m2_loss_dice_2: 1.341  m2_loss_ce_3: 0.6221  m2_loss_mask_3: 0.1638  m2_loss_dice_3: 1.255  m2_loss_ce_4: 0.6302  m2_loss_mask_4: 0.1679  m2_loss_dice_4: 1.249  m2_loss_ce_5: 0.5903  m2_loss_mask_5: 0.1645  m2_loss_dice_5: 1.247  m2_loss_ce_6: 0.5788  m2_loss_mask_6: 0.165  m2_loss_dice_6: 1.259  m2_loss_ce_7: 0.5694  m2_loss_mask_7: 0.1687  m2_loss_dice_7: 1.273  m2_loss_ce_8: 0.5655  m2_loss_mask_8: 0.1656  m2_loss_dice_8: 1.243  com_loss_ce: 1.834  com_loss_mask: 0.6925  com_loss_dice: 0.9702    time: 1.4696  last_time: 1.4915  data_time: 0.0434  last_data_time: 0.0356   lr: 0.0001  max_mem: 35727M
[08/30 01:37:19] d2.utils.events INFO:  eta: 0:08:47  iter: 639  total_loss: 41.9  m1_loss_ce: 0.4747  m1_loss_mask: 0.1541  m1_loss_dice: 1.162  m1_loss_ce_0: 0.623  m1_loss_mask_0: 0.1839  m1_loss_dice_0: 1.341  m1_loss_ce_1: 0.6687  m1_loss_mask_1: 0.1705  m1_loss_dice_1: 1.288  m1_loss_ce_2: 0.6008  m1_loss_mask_2: 0.1642  m1_loss_dice_2: 1.195  m1_loss_ce_3: 0.5161  m1_loss_mask_3: 0.1618  m1_loss_dice_3: 1.148  m1_loss_ce_4: 0.4872  m1_loss_mask_4: 0.1582  m1_loss_dice_4: 1.154  m1_loss_ce_5: 0.4845  m1_loss_mask_5: 0.1578  m1_loss_dice_5: 1.133  m1_loss_ce_6: 0.4755  m1_loss_mask_6: 0.1564  m1_loss_dice_6: 1.166  m1_loss_ce_7: 0.4763  m1_loss_mask_7: 0.1562  m1_loss_dice_7: 1.157  m1_loss_ce_8: 0.4504  m1_loss_mask_8: 0.1551  m1_loss_dice_8: 1.133  m2_loss_ce: 0.4837  m2_loss_mask: 0.1573  m2_loss_dice: 1.164  m2_loss_ce_0: 0.6053  m2_loss_mask_0: 0.194  m2_loss_dice_0: 1.416  m2_loss_ce_1: 0.6811  m2_loss_mask_1: 0.1714  m2_loss_dice_1: 1.242  m2_loss_ce_2: 0.6151  m2_loss_mask_2: 0.1572  m2_loss_dice_2: 1.21  m2_loss_ce_3: 0.5417  m2_loss_mask_3: 0.1581  m2_loss_dice_3: 1.172  m2_loss_ce_4: 0.5506  m2_loss_mask_4: 0.1596  m2_loss_dice_4: 1.18  m2_loss_ce_5: 0.533  m2_loss_mask_5: 0.1584  m2_loss_dice_5: 1.179  m2_loss_ce_6: 0.5115  m2_loss_mask_6: 0.1584  m2_loss_dice_6: 1.143  m2_loss_ce_7: 0.4936  m2_loss_mask_7: 0.1577  m2_loss_dice_7: 1.162  m2_loss_ce_8: 0.512  m2_loss_mask_8: 0.1585  m2_loss_dice_8: 1.174  com_loss_ce: 1.792  com_loss_mask: 0.6924  com_loss_dice: 0.9708    time: 1.4702  last_time: 1.4224  data_time: 0.0434  last_data_time: 0.0352   lr: 0.0001  max_mem: 35857M
[08/30 01:37:49] d2.utils.events INFO:  eta: 0:08:18  iter: 659  total_loss: 42.24  m1_loss_ce: 0.5407  m1_loss_mask: 0.1652  m1_loss_dice: 1.147  m1_loss_ce_0: 0.6307  m1_loss_mask_0: 0.1931  m1_loss_dice_0: 1.34  m1_loss_ce_1: 0.6478  m1_loss_mask_1: 0.1732  m1_loss_dice_1: 1.285  m1_loss_ce_2: 0.6142  m1_loss_mask_2: 0.1668  m1_loss_dice_2: 1.22  m1_loss_ce_3: 0.5551  m1_loss_mask_3: 0.1665  m1_loss_dice_3: 1.147  m1_loss_ce_4: 0.5305  m1_loss_mask_4: 0.1674  m1_loss_dice_4: 1.192  m1_loss_ce_5: 0.5209  m1_loss_mask_5: 0.1634  m1_loss_dice_5: 1.178  m1_loss_ce_6: 0.5233  m1_loss_mask_6: 0.1665  m1_loss_dice_6: 1.143  m1_loss_ce_7: 0.5024  m1_loss_mask_7: 0.1655  m1_loss_dice_7: 1.167  m1_loss_ce_8: 0.5105  m1_loss_mask_8: 0.1645  m1_loss_dice_8: 1.129  m2_loss_ce: 0.5215  m2_loss_mask: 0.167  m2_loss_dice: 1.195  m2_loss_ce_0: 0.5695  m2_loss_mask_0: 0.2004  m2_loss_dice_0: 1.404  m2_loss_ce_1: 0.6675  m2_loss_mask_1: 0.1753  m2_loss_dice_1: 1.255  m2_loss_ce_2: 0.6083  m2_loss_mask_2: 0.1698  m2_loss_dice_2: 1.238  m2_loss_ce_3: 0.5668  m2_loss_mask_3: 0.1696  m2_loss_dice_3: 1.204  m2_loss_ce_4: 0.5435  m2_loss_mask_4: 0.1693  m2_loss_dice_4: 1.232  m2_loss_ce_5: 0.5599  m2_loss_mask_5: 0.1693  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.5422  m2_loss_mask_6: 0.1666  m2_loss_dice_6: 1.172  m2_loss_ce_7: 0.5425  m2_loss_mask_7: 0.164  m2_loss_dice_7: 1.197  m2_loss_ce_8: 0.5574  m2_loss_mask_8: 0.1647  m2_loss_dice_8: 1.149  com_loss_ce: 1.794  com_loss_mask: 0.6924  com_loss_dice: 0.9686    time: 1.4707  last_time: 1.4911  data_time: 0.0406  last_data_time: 0.0384   lr: 0.0001  max_mem: 35857M
[08/30 01:38:19] d2.utils.events INFO:  eta: 0:07:49  iter: 679  total_loss: 43.25  m1_loss_ce: 0.5316  m1_loss_mask: 0.1605  m1_loss_dice: 1.2  m1_loss_ce_0: 0.6008  m1_loss_mask_0: 0.1842  m1_loss_dice_0: 1.402  m1_loss_ce_1: 0.7058  m1_loss_mask_1: 0.1693  m1_loss_dice_1: 1.304  m1_loss_ce_2: 0.6415  m1_loss_mask_2: 0.1635  m1_loss_dice_2: 1.26  m1_loss_ce_3: 0.5656  m1_loss_mask_3: 0.1623  m1_loss_dice_3: 1.179  m1_loss_ce_4: 0.5519  m1_loss_mask_4: 0.1643  m1_loss_dice_4: 1.223  m1_loss_ce_5: 0.5244  m1_loss_mask_5: 0.1513  m1_loss_dice_5: 1.232  m1_loss_ce_6: 0.5106  m1_loss_mask_6: 0.16  m1_loss_dice_6: 1.202  m1_loss_ce_7: 0.5275  m1_loss_mask_7: 0.1606  m1_loss_dice_7: 1.197  m1_loss_ce_8: 0.5076  m1_loss_mask_8: 0.1607  m1_loss_dice_8: 1.213  m2_loss_ce: 0.5252  m2_loss_mask: 0.1665  m2_loss_dice: 1.186  m2_loss_ce_0: 0.6163  m2_loss_mask_0: 0.2014  m2_loss_dice_0: 1.463  m2_loss_ce_1: 0.7141  m2_loss_mask_1: 0.1831  m2_loss_dice_1: 1.351  m2_loss_ce_2: 0.662  m2_loss_mask_2: 0.1738  m2_loss_dice_2: 1.306  m2_loss_ce_3: 0.593  m2_loss_mask_3: 0.1731  m2_loss_dice_3: 1.212  m2_loss_ce_4: 0.5738  m2_loss_mask_4: 0.1689  m2_loss_dice_4: 1.224  m2_loss_ce_5: 0.5444  m2_loss_mask_5: 0.1684  m2_loss_dice_5: 1.229  m2_loss_ce_6: 0.5271  m2_loss_mask_6: 0.1694  m2_loss_dice_6: 1.212  m2_loss_ce_7: 0.5425  m2_loss_mask_7: 0.1658  m2_loss_dice_7: 1.195  m2_loss_ce_8: 0.5551  m2_loss_mask_8: 0.1671  m2_loss_dice_8: 1.229  com_loss_ce: 1.799  com_loss_mask: 0.6924  com_loss_dice: 0.9728    time: 1.4710  last_time: 1.4538  data_time: 0.0445  last_data_time: 0.0520   lr: 0.0001  max_mem: 35857M
[08/30 01:38:48] d2.utils.events INFO:  eta: 0:07:20  iter: 699  total_loss: 44.44  m1_loss_ce: 0.5412  m1_loss_mask: 0.1643  m1_loss_dice: 1.211  m1_loss_ce_0: 0.6603  m1_loss_mask_0: 0.1925  m1_loss_dice_0: 1.419  m1_loss_ce_1: 0.6493  m1_loss_mask_1: 0.1754  m1_loss_dice_1: 1.27  m1_loss_ce_2: 0.6368  m1_loss_mask_2: 0.1648  m1_loss_dice_2: 1.27  m1_loss_ce_3: 0.5885  m1_loss_mask_3: 0.1667  m1_loss_dice_3: 1.194  m1_loss_ce_4: 0.5427  m1_loss_mask_4: 0.1642  m1_loss_dice_4: 1.228  m1_loss_ce_5: 0.5169  m1_loss_mask_5: 0.1659  m1_loss_dice_5: 1.197  m1_loss_ce_6: 0.5221  m1_loss_mask_6: 0.1647  m1_loss_dice_6: 1.193  m1_loss_ce_7: 0.5236  m1_loss_mask_7: 0.1651  m1_loss_dice_7: 1.178  m1_loss_ce_8: 0.5378  m1_loss_mask_8: 0.163  m1_loss_dice_8: 1.193  m2_loss_ce: 0.5425  m2_loss_mask: 0.1708  m2_loss_dice: 1.235  m2_loss_ce_0: 0.6253  m2_loss_mask_0: 0.1986  m2_loss_dice_0: 1.503  m2_loss_ce_1: 0.7224  m2_loss_mask_1: 0.1816  m2_loss_dice_1: 1.353  m2_loss_ce_2: 0.6371  m2_loss_mask_2: 0.1729  m2_loss_dice_2: 1.35  m2_loss_ce_3: 0.5779  m2_loss_mask_3: 0.1738  m2_loss_dice_3: 1.234  m2_loss_ce_4: 0.5946  m2_loss_mask_4: 0.1757  m2_loss_dice_4: 1.248  m2_loss_ce_5: 0.5514  m2_loss_mask_5: 0.1727  m2_loss_dice_5: 1.246  m2_loss_ce_6: 0.5454  m2_loss_mask_6: 0.1775  m2_loss_dice_6: 1.251  m2_loss_ce_7: 0.532  m2_loss_mask_7: 0.1737  m2_loss_dice_7: 1.241  m2_loss_ce_8: 0.5371  m2_loss_mask_8: 0.1715  m2_loss_dice_8: 1.23  com_loss_ce: 1.807  com_loss_mask: 0.6924  com_loss_dice: 0.9714    time: 1.4712  last_time: 1.4265  data_time: 0.0394  last_data_time: 0.0555   lr: 0.0001  max_mem: 35857M
[08/30 01:39:18] d2.utils.events INFO:  eta: 0:06:50  iter: 719  total_loss: 43.09  m1_loss_ce: 0.5154  m1_loss_mask: 0.1604  m1_loss_dice: 1.245  m1_loss_ce_0: 0.5844  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.412  m1_loss_ce_1: 0.64  m1_loss_mask_1: 0.1706  m1_loss_dice_1: 1.336  m1_loss_ce_2: 0.6235  m1_loss_mask_2: 0.162  m1_loss_dice_2: 1.28  m1_loss_ce_3: 0.5481  m1_loss_mask_3: 0.1596  m1_loss_dice_3: 1.21  m1_loss_ce_4: 0.522  m1_loss_mask_4: 0.1584  m1_loss_dice_4: 1.217  m1_loss_ce_5: 0.5197  m1_loss_mask_5: 0.1552  m1_loss_dice_5: 1.205  m1_loss_ce_6: 0.5024  m1_loss_mask_6: 0.1596  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.4938  m1_loss_mask_7: 0.1585  m1_loss_dice_7: 1.221  m1_loss_ce_8: 0.4887  m1_loss_mask_8: 0.1619  m1_loss_dice_8: 1.198  m2_loss_ce: 0.5032  m2_loss_mask: 0.1533  m2_loss_dice: 1.23  m2_loss_ce_0: 0.5483  m2_loss_mask_0: 0.1894  m2_loss_dice_0: 1.505  m2_loss_ce_1: 0.6625  m2_loss_mask_1: 0.173  m2_loss_dice_1: 1.331  m2_loss_ce_2: 0.6016  m2_loss_mask_2: 0.1566  m2_loss_dice_2: 1.274  m2_loss_ce_3: 0.5711  m2_loss_mask_3: 0.1577  m2_loss_dice_3: 1.266  m2_loss_ce_4: 0.5652  m2_loss_mask_4: 0.1588  m2_loss_dice_4: 1.225  m2_loss_ce_5: 0.525  m2_loss_mask_5: 0.1543  m2_loss_dice_5: 1.236  m2_loss_ce_6: 0.5033  m2_loss_mask_6: 0.1574  m2_loss_dice_6: 1.225  m2_loss_ce_7: 0.4977  m2_loss_mask_7: 0.1559  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.4814  m2_loss_mask_8: 0.1568  m2_loss_dice_8: 1.223  com_loss_ce: 1.805  com_loss_mask: 0.6924  com_loss_dice: 0.9704    time: 1.4711  last_time: 1.4655  data_time: 0.0468  last_data_time: 0.0458   lr: 0.0001  max_mem: 35857M
[08/30 01:39:48] d2.utils.events INFO:  eta: 0:06:21  iter: 739  total_loss: 45.86  m1_loss_ce: 0.5652  m1_loss_mask: 0.1544  m1_loss_dice: 1.294  m1_loss_ce_0: 0.6263  m1_loss_mask_0: 0.1887  m1_loss_dice_0: 1.509  m1_loss_ce_1: 0.6897  m1_loss_mask_1: 0.1661  m1_loss_dice_1: 1.407  m1_loss_ce_2: 0.651  m1_loss_mask_2: 0.1575  m1_loss_dice_2: 1.377  m1_loss_ce_3: 0.5759  m1_loss_mask_3: 0.1552  m1_loss_dice_3: 1.316  m1_loss_ce_4: 0.5391  m1_loss_mask_4: 0.1537  m1_loss_dice_4: 1.324  m1_loss_ce_5: 0.5412  m1_loss_mask_5: 0.1519  m1_loss_dice_5: 1.309  m1_loss_ce_6: 0.5275  m1_loss_mask_6: 0.1533  m1_loss_dice_6: 1.248  m1_loss_ce_7: 0.5171  m1_loss_mask_7: 0.1525  m1_loss_dice_7: 1.278  m1_loss_ce_8: 0.5408  m1_loss_mask_8: 0.153  m1_loss_dice_8: 1.278  m2_loss_ce: 0.5291  m2_loss_mask: 0.1585  m2_loss_dice: 1.321  m2_loss_ce_0: 0.5926  m2_loss_mask_0: 0.1858  m2_loss_dice_0: 1.582  m2_loss_ce_1: 0.7187  m2_loss_mask_1: 0.1686  m2_loss_dice_1: 1.461  m2_loss_ce_2: 0.6465  m2_loss_mask_2: 0.1621  m2_loss_dice_2: 1.377  m2_loss_ce_3: 0.6049  m2_loss_mask_3: 0.1659  m2_loss_dice_3: 1.311  m2_loss_ce_4: 0.5755  m2_loss_mask_4: 0.1658  m2_loss_dice_4: 1.353  m2_loss_ce_5: 0.5656  m2_loss_mask_5: 0.1618  m2_loss_dice_5: 1.337  m2_loss_ce_6: 0.545  m2_loss_mask_6: 0.1616  m2_loss_dice_6: 1.256  m2_loss_ce_7: 0.5388  m2_loss_mask_7: 0.1606  m2_loss_dice_7: 1.305  m2_loss_ce_8: 0.5331  m2_loss_mask_8: 0.1586  m2_loss_dice_8: 1.303  com_loss_ce: 1.792  com_loss_mask: 0.6924  com_loss_dice: 0.9733    time: 1.4716  last_time: 1.5219  data_time: 0.0447  last_data_time: 0.0504   lr: 0.0001  max_mem: 35857M
[08/30 01:40:17] d2.utils.events INFO:  eta: 0:05:52  iter: 759  total_loss: 43.41  m1_loss_ce: 0.515  m1_loss_mask: 0.1562  m1_loss_dice: 1.209  m1_loss_ce_0: 0.6102  m1_loss_mask_0: 0.1805  m1_loss_dice_0: 1.377  m1_loss_ce_1: 0.6766  m1_loss_mask_1: 0.173  m1_loss_dice_1: 1.318  m1_loss_ce_2: 0.5993  m1_loss_mask_2: 0.1615  m1_loss_dice_2: 1.253  m1_loss_ce_3: 0.5246  m1_loss_mask_3: 0.1616  m1_loss_dice_3: 1.212  m1_loss_ce_4: 0.5482  m1_loss_mask_4: 0.161  m1_loss_dice_4: 1.179  m1_loss_ce_5: 0.5227  m1_loss_mask_5: 0.1581  m1_loss_dice_5: 1.204  m1_loss_ce_6: 0.5273  m1_loss_mask_6: 0.1591  m1_loss_dice_6: 1.187  m1_loss_ce_7: 0.5244  m1_loss_mask_7: 0.1583  m1_loss_dice_7: 1.168  m1_loss_ce_8: 0.517  m1_loss_mask_8: 0.1562  m1_loss_dice_8: 1.204  m2_loss_ce: 0.551  m2_loss_mask: 0.1664  m2_loss_dice: 1.21  m2_loss_ce_0: 0.6257  m2_loss_mask_0: 0.1951  m2_loss_dice_0: 1.425  m2_loss_ce_1: 0.7251  m2_loss_mask_1: 0.1796  m2_loss_dice_1: 1.286  m2_loss_ce_2: 0.6562  m2_loss_mask_2: 0.1715  m2_loss_dice_2: 1.27  m2_loss_ce_3: 0.597  m2_loss_mask_3: 0.1723  m2_loss_dice_3: 1.235  m2_loss_ce_4: 0.599  m2_loss_mask_4: 0.1719  m2_loss_dice_4: 1.232  m2_loss_ce_5: 0.583  m2_loss_mask_5: 0.1691  m2_loss_dice_5: 1.216  m2_loss_ce_6: 0.5813  m2_loss_mask_6: 0.1682  m2_loss_dice_6: 1.202  m2_loss_ce_7: 0.5669  m2_loss_mask_7: 0.1684  m2_loss_dice_7: 1.221  m2_loss_ce_8: 0.5751  m2_loss_mask_8: 0.167  m2_loss_dice_8: 1.211  com_loss_ce: 1.798  com_loss_mask: 0.6923  com_loss_dice: 0.9688    time: 1.4717  last_time: 1.4048  data_time: 0.0392  last_data_time: 0.0341   lr: 0.0001  max_mem: 35857M
[08/30 01:40:48] d2.utils.events INFO:  eta: 0:05:23  iter: 779  total_loss: 44.93  m1_loss_ce: 0.5306  m1_loss_mask: 0.1543  m1_loss_dice: 1.222  m1_loss_ce_0: 0.6134  m1_loss_mask_0: 0.1762  m1_loss_dice_0: 1.429  m1_loss_ce_1: 0.668  m1_loss_mask_1: 0.1661  m1_loss_dice_1: 1.379  m1_loss_ce_2: 0.6172  m1_loss_mask_2: 0.1599  m1_loss_dice_2: 1.302  m1_loss_ce_3: 0.5666  m1_loss_mask_3: 0.1572  m1_loss_dice_3: 1.232  m1_loss_ce_4: 0.5595  m1_loss_mask_4: 0.1551  m1_loss_dice_4: 1.247  m1_loss_ce_5: 0.532  m1_loss_mask_5: 0.1549  m1_loss_dice_5: 1.243  m1_loss_ce_6: 0.545  m1_loss_mask_6: 0.1548  m1_loss_dice_6: 1.236  m1_loss_ce_7: 0.5257  m1_loss_mask_7: 0.1556  m1_loss_dice_7: 1.223  m1_loss_ce_8: 0.5502  m1_loss_mask_8: 0.1546  m1_loss_dice_8: 1.255  m2_loss_ce: 0.5664  m2_loss_mask: 0.1606  m2_loss_dice: 1.256  m2_loss_ce_0: 0.5957  m2_loss_mask_0: 0.1903  m2_loss_dice_0: 1.517  m2_loss_ce_1: 0.7115  m2_loss_mask_1: 0.1719  m2_loss_dice_1: 1.366  m2_loss_ce_2: 0.6543  m2_loss_mask_2: 0.1612  m2_loss_dice_2: 1.352  m2_loss_ce_3: 0.6029  m2_loss_mask_3: 0.1588  m2_loss_dice_3: 1.304  m2_loss_ce_4: 0.5902  m2_loss_mask_4: 0.1599  m2_loss_dice_4: 1.277  m2_loss_ce_5: 0.5835  m2_loss_mask_5: 0.1562  m2_loss_dice_5: 1.265  m2_loss_ce_6: 0.5505  m2_loss_mask_6: 0.1589  m2_loss_dice_6: 1.253  m2_loss_ce_7: 0.5504  m2_loss_mask_7: 0.1572  m2_loss_dice_7: 1.265  m2_loss_ce_8: 0.5736  m2_loss_mask_8: 0.161  m2_loss_dice_8: 1.283  com_loss_ce: 1.813  com_loss_mask: 0.6924  com_loss_dice: 0.9717    time: 1.4730  last_time: 1.5407  data_time: 0.0408  last_data_time: 0.0357   lr: 0.0001  max_mem: 35857M
[08/30 01:41:18] d2.utils.events INFO:  eta: 0:04:54  iter: 799  total_loss: 43.3  m1_loss_ce: 0.5315  m1_loss_mask: 0.1536  m1_loss_dice: 1.181  m1_loss_ce_0: 0.6432  m1_loss_mask_0: 0.1787  m1_loss_dice_0: 1.403  m1_loss_ce_1: 0.6497  m1_loss_mask_1: 0.1654  m1_loss_dice_1: 1.322  m1_loss_ce_2: 0.6103  m1_loss_mask_2: 0.1536  m1_loss_dice_2: 1.278  m1_loss_ce_3: 0.5859  m1_loss_mask_3: 0.1556  m1_loss_dice_3: 1.221  m1_loss_ce_4: 0.5338  m1_loss_mask_4: 0.1544  m1_loss_dice_4: 1.184  m1_loss_ce_5: 0.5377  m1_loss_mask_5: 0.1554  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.516  m1_loss_mask_6: 0.1551  m1_loss_dice_6: 1.184  m1_loss_ce_7: 0.5084  m1_loss_mask_7: 0.1533  m1_loss_dice_7: 1.158  m1_loss_ce_8: 0.5151  m1_loss_mask_8: 0.151  m1_loss_dice_8: 1.192  m2_loss_ce: 0.5603  m2_loss_mask: 0.1652  m2_loss_dice: 1.221  m2_loss_ce_0: 0.6095  m2_loss_mask_0: 0.191  m2_loss_dice_0: 1.499  m2_loss_ce_1: 0.7132  m2_loss_mask_1: 0.1733  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.6634  m2_loss_mask_2: 0.1665  m2_loss_dice_2: 1.297  m2_loss_ce_3: 0.5937  m2_loss_mask_3: 0.1647  m2_loss_dice_3: 1.211  m2_loss_ce_4: 0.5574  m2_loss_mask_4: 0.1663  m2_loss_dice_4: 1.233  m2_loss_ce_5: 0.568  m2_loss_mask_5: 0.1621  m2_loss_dice_5: 1.232  m2_loss_ce_6: 0.5532  m2_loss_mask_6: 0.1643  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.5831  m2_loss_mask_7: 0.1655  m2_loss_dice_7: 1.204  m2_loss_ce_8: 0.5454  m2_loss_mask_8: 0.1641  m2_loss_dice_8: 1.228  com_loss_ce: 1.811  com_loss_mask: 0.6924  com_loss_dice: 0.9716    time: 1.4738  last_time: 1.6230  data_time: 0.0434  last_data_time: 0.0373   lr: 0.0001  max_mem: 35857M
[08/30 01:41:48] d2.utils.events INFO:  eta: 0:04:24  iter: 819  total_loss: 44.15  m1_loss_ce: 0.4983  m1_loss_mask: 0.1683  m1_loss_dice: 1.243  m1_loss_ce_0: 0.6039  m1_loss_mask_0: 0.1783  m1_loss_dice_0: 1.411  m1_loss_ce_1: 0.6759  m1_loss_mask_1: 0.1753  m1_loss_dice_1: 1.429  m1_loss_ce_2: 0.6269  m1_loss_mask_2: 0.1659  m1_loss_dice_2: 1.349  m1_loss_ce_3: 0.5723  m1_loss_mask_3: 0.1697  m1_loss_dice_3: 1.315  m1_loss_ce_4: 0.5355  m1_loss_mask_4: 0.1657  m1_loss_dice_4: 1.255  m1_loss_ce_5: 0.5076  m1_loss_mask_5: 0.1677  m1_loss_dice_5: 1.251  m1_loss_ce_6: 0.5049  m1_loss_mask_6: 0.1688  m1_loss_dice_6: 1.245  m1_loss_ce_7: 0.4802  m1_loss_mask_7: 0.167  m1_loss_dice_7: 1.269  m1_loss_ce_8: 0.485  m1_loss_mask_8: 0.1663  m1_loss_dice_8: 1.232  m2_loss_ce: 0.5663  m2_loss_mask: 0.1633  m2_loss_dice: 1.269  m2_loss_ce_0: 0.6188  m2_loss_mask_0: 0.1841  m2_loss_dice_0: 1.472  m2_loss_ce_1: 0.7185  m2_loss_mask_1: 0.1726  m2_loss_dice_1: 1.378  m2_loss_ce_2: 0.6547  m2_loss_mask_2: 0.1664  m2_loss_dice_2: 1.34  m2_loss_ce_3: 0.6209  m2_loss_mask_3: 0.1707  m2_loss_dice_3: 1.294  m2_loss_ce_4: 0.5902  m2_loss_mask_4: 0.168  m2_loss_dice_4: 1.259  m2_loss_ce_5: 0.5732  m2_loss_mask_5: 0.1674  m2_loss_dice_5: 1.297  m2_loss_ce_6: 0.5485  m2_loss_mask_6: 0.1665  m2_loss_dice_6: 1.288  m2_loss_ce_7: 0.5483  m2_loss_mask_7: 0.1655  m2_loss_dice_7: 1.283  m2_loss_ce_8: 0.5514  m2_loss_mask_8: 0.1632  m2_loss_dice_8: 1.293  com_loss_ce: 1.792  com_loss_mask: 0.6924  com_loss_dice: 0.9714    time: 1.4740  last_time: 1.4632  data_time: 0.0428  last_data_time: 0.0534   lr: 0.0001  max_mem: 35857M
[08/30 01:42:18] d2.utils.events INFO:  eta: 0:03:55  iter: 839  total_loss: 43.92  m1_loss_ce: 0.5535  m1_loss_mask: 0.1632  m1_loss_dice: 1.198  m1_loss_ce_0: 0.5978  m1_loss_mask_0: 0.1918  m1_loss_dice_0: 1.445  m1_loss_ce_1: 0.6631  m1_loss_mask_1: 0.1753  m1_loss_dice_1: 1.342  m1_loss_ce_2: 0.6434  m1_loss_mask_2: 0.1673  m1_loss_dice_2: 1.309  m1_loss_ce_3: 0.5657  m1_loss_mask_3: 0.1668  m1_loss_dice_3: 1.245  m1_loss_ce_4: 0.5703  m1_loss_mask_4: 0.1649  m1_loss_dice_4: 1.2  m1_loss_ce_5: 0.5239  m1_loss_mask_5: 0.1635  m1_loss_dice_5: 1.218  m1_loss_ce_6: 0.4939  m1_loss_mask_6: 0.1631  m1_loss_dice_6: 1.185  m1_loss_ce_7: 0.5123  m1_loss_mask_7: 0.1616  m1_loss_dice_7: 1.188  m1_loss_ce_8: 0.5329  m1_loss_mask_8: 0.164  m1_loss_dice_8: 1.205  m2_loss_ce: 0.571  m2_loss_mask: 0.1704  m2_loss_dice: 1.222  m2_loss_ce_0: 0.6397  m2_loss_mask_0: 0.2124  m2_loss_dice_0: 1.458  m2_loss_ce_1: 0.7437  m2_loss_mask_1: 0.1871  m2_loss_dice_1: 1.372  m2_loss_ce_2: 0.6569  m2_loss_mask_2: 0.1747  m2_loss_dice_2: 1.296  m2_loss_ce_3: 0.5927  m2_loss_mask_3: 0.1784  m2_loss_dice_3: 1.241  m2_loss_ce_4: 0.603  m2_loss_mask_4: 0.1732  m2_loss_dice_4: 1.219  m2_loss_ce_5: 0.5882  m2_loss_mask_5: 0.1701  m2_loss_dice_5: 1.279  m2_loss_ce_6: 0.5966  m2_loss_mask_6: 0.1709  m2_loss_dice_6: 1.248  m2_loss_ce_7: 0.572  m2_loss_mask_7: 0.17  m2_loss_dice_7: 1.219  m2_loss_ce_8: 0.5898  m2_loss_mask_8: 0.1718  m2_loss_dice_8: 1.23  com_loss_ce: 1.804  com_loss_mask: 0.6924  com_loss_dice: 0.97    time: 1.4745  last_time: 1.5317  data_time: 0.0445  last_data_time: 0.0450   lr: 0.0001  max_mem: 35857M
[08/30 01:42:47] d2.utils.events INFO:  eta: 0:03:25  iter: 859  total_loss: 43.59  m1_loss_ce: 0.5406  m1_loss_mask: 0.1678  m1_loss_dice: 1.159  m1_loss_ce_0: 0.638  m1_loss_mask_0: 0.2057  m1_loss_dice_0: 1.372  m1_loss_ce_1: 0.7294  m1_loss_mask_1: 0.1884  m1_loss_dice_1: 1.296  m1_loss_ce_2: 0.6401  m1_loss_mask_2: 0.1776  m1_loss_dice_2: 1.223  m1_loss_ce_3: 0.6044  m1_loss_mask_3: 0.1709  m1_loss_dice_3: 1.178  m1_loss_ce_4: 0.5366  m1_loss_mask_4: 0.1731  m1_loss_dice_4: 1.182  m1_loss_ce_5: 0.5503  m1_loss_mask_5: 0.1705  m1_loss_dice_5: 1.185  m1_loss_ce_6: 0.5539  m1_loss_mask_6: 0.1696  m1_loss_dice_6: 1.153  m1_loss_ce_7: 0.5357  m1_loss_mask_7: 0.1707  m1_loss_dice_7: 1.148  m1_loss_ce_8: 0.5195  m1_loss_mask_8: 0.1701  m1_loss_dice_8: 1.142  m2_loss_ce: 0.5764  m2_loss_mask: 0.1755  m2_loss_dice: 1.2  m2_loss_ce_0: 0.6085  m2_loss_mask_0: 0.205  m2_loss_dice_0: 1.473  m2_loss_ce_1: 0.725  m2_loss_mask_1: 0.1865  m2_loss_dice_1: 1.273  m2_loss_ce_2: 0.672  m2_loss_mask_2: 0.1753  m2_loss_dice_2: 1.231  m2_loss_ce_3: 0.6475  m2_loss_mask_3: 0.1754  m2_loss_dice_3: 1.229  m2_loss_ce_4: 0.6141  m2_loss_mask_4: 0.1786  m2_loss_dice_4: 1.156  m2_loss_ce_5: 0.5947  m2_loss_mask_5: 0.1742  m2_loss_dice_5: 1.205  m2_loss_ce_6: 0.5543  m2_loss_mask_6: 0.1782  m2_loss_dice_6: 1.192  m2_loss_ce_7: 0.5803  m2_loss_mask_7: 0.177  m2_loss_dice_7: 1.173  m2_loss_ce_8: 0.5919  m2_loss_mask_8: 0.1763  m2_loss_dice_8: 1.199  com_loss_ce: 1.792  com_loss_mask: 0.6924  com_loss_dice: 0.9722    time: 1.4746  last_time: 1.4676  data_time: 0.0392  last_data_time: 0.0363   lr: 0.0001  max_mem: 35857M
[08/30 01:43:18] d2.utils.events INFO:  eta: 0:02:56  iter: 879  total_loss: 45.61  m1_loss_ce: 0.5578  m1_loss_mask: 0.1616  m1_loss_dice: 1.291  m1_loss_ce_0: 0.618  m1_loss_mask_0: 0.186  m1_loss_dice_0: 1.51  m1_loss_ce_1: 0.6472  m1_loss_mask_1: 0.1676  m1_loss_dice_1: 1.377  m1_loss_ce_2: 0.6316  m1_loss_mask_2: 0.1605  m1_loss_dice_2: 1.346  m1_loss_ce_3: 0.5833  m1_loss_mask_3: 0.163  m1_loss_dice_3: 1.297  m1_loss_ce_4: 0.5797  m1_loss_mask_4: 0.1642  m1_loss_dice_4: 1.279  m1_loss_ce_5: 0.5134  m1_loss_mask_5: 0.1621  m1_loss_dice_5: 1.344  m1_loss_ce_6: 0.5205  m1_loss_mask_6: 0.1644  m1_loss_dice_6: 1.273  m1_loss_ce_7: 0.5684  m1_loss_mask_7: 0.1632  m1_loss_dice_7: 1.265  m1_loss_ce_8: 0.5343  m1_loss_mask_8: 0.1616  m1_loss_dice_8: 1.273  m2_loss_ce: 0.5676  m2_loss_mask: 0.1567  m2_loss_dice: 1.326  m2_loss_ce_0: 0.6474  m2_loss_mask_0: 0.1858  m2_loss_dice_0: 1.593  m2_loss_ce_1: 0.7197  m2_loss_mask_1: 0.1693  m2_loss_dice_1: 1.438  m2_loss_ce_2: 0.6374  m2_loss_mask_2: 0.1598  m2_loss_dice_2: 1.375  m2_loss_ce_3: 0.6231  m2_loss_mask_3: 0.1635  m2_loss_dice_3: 1.307  m2_loss_ce_4: 0.5928  m2_loss_mask_4: 0.1574  m2_loss_dice_4: 1.352  m2_loss_ce_5: 0.5916  m2_loss_mask_5: 0.1549  m2_loss_dice_5: 1.338  m2_loss_ce_6: 0.5988  m2_loss_mask_6: 0.1603  m2_loss_dice_6: 1.299  m2_loss_ce_7: 0.5613  m2_loss_mask_7: 0.1583  m2_loss_dice_7: 1.322  m2_loss_ce_8: 0.5681  m2_loss_mask_8: 0.1574  m2_loss_dice_8: 1.293  com_loss_ce: 1.81  com_loss_mask: 0.6924  com_loss_dice: 0.9727    time: 1.4754  last_time: 1.5323  data_time: 0.0431  last_data_time: 0.0355   lr: 0.0001  max_mem: 35857M
[08/30 01:43:48] d2.utils.events INFO:  eta: 0:02:27  iter: 899  total_loss: 42.95  m1_loss_ce: 0.497  m1_loss_mask: 0.1609  m1_loss_dice: 1.145  m1_loss_ce_0: 0.6603  m1_loss_mask_0: 0.1925  m1_loss_dice_0: 1.372  m1_loss_ce_1: 0.6711  m1_loss_mask_1: 0.1766  m1_loss_dice_1: 1.307  m1_loss_ce_2: 0.6033  m1_loss_mask_2: 0.1683  m1_loss_dice_2: 1.247  m1_loss_ce_3: 0.5255  m1_loss_mask_3: 0.1701  m1_loss_dice_3: 1.195  m1_loss_ce_4: 0.5074  m1_loss_mask_4: 0.1673  m1_loss_dice_4: 1.176  m1_loss_ce_5: 0.5192  m1_loss_mask_5: 0.1653  m1_loss_dice_5: 1.18  m1_loss_ce_6: 0.4864  m1_loss_mask_6: 0.1662  m1_loss_dice_6: 1.15  m1_loss_ce_7: 0.4704  m1_loss_mask_7: 0.1654  m1_loss_dice_7: 1.15  m1_loss_ce_8: 0.4797  m1_loss_mask_8: 0.1658  m1_loss_dice_8: 1.152  m2_loss_ce: 0.5595  m2_loss_mask: 0.1695  m2_loss_dice: 1.2  m2_loss_ce_0: 0.607  m2_loss_mask_0: 0.2102  m2_loss_dice_0: 1.439  m2_loss_ce_1: 0.7089  m2_loss_mask_1: 0.1844  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.6544  m2_loss_mask_2: 0.1736  m2_loss_dice_2: 1.247  m2_loss_ce_3: 0.6229  m2_loss_mask_3: 0.1726  m2_loss_dice_3: 1.21  m2_loss_ce_4: 0.5647  m2_loss_mask_4: 0.1715  m2_loss_dice_4: 1.182  m2_loss_ce_5: 0.5683  m2_loss_mask_5: 0.1726  m2_loss_dice_5: 1.178  m2_loss_ce_6: 0.5487  m2_loss_mask_6: 0.174  m2_loss_dice_6: 1.201  m2_loss_ce_7: 0.5274  m2_loss_mask_7: 0.1692  m2_loss_dice_7: 1.173  m2_loss_ce_8: 0.5336  m2_loss_mask_8: 0.1705  m2_loss_dice_8: 1.177  com_loss_ce: 1.788  com_loss_mask: 0.6924  com_loss_dice: 0.9702    time: 1.4761  last_time: 1.4361  data_time: 0.0446  last_data_time: 0.0432   lr: 0.0001  max_mem: 35857M
[08/30 01:44:18] d2.utils.events INFO:  eta: 0:01:57  iter: 919  total_loss: 41.51  m1_loss_ce: 0.4851  m1_loss_mask: 0.1534  m1_loss_dice: 1.134  m1_loss_ce_0: 0.6205  m1_loss_mask_0: 0.1768  m1_loss_dice_0: 1.343  m1_loss_ce_1: 0.6371  m1_loss_mask_1: 0.1628  m1_loss_dice_1: 1.277  m1_loss_ce_2: 0.5978  m1_loss_mask_2: 0.1595  m1_loss_dice_2: 1.186  m1_loss_ce_3: 0.5369  m1_loss_mask_3: 0.155  m1_loss_dice_3: 1.152  m1_loss_ce_4: 0.4846  m1_loss_mask_4: 0.1557  m1_loss_dice_4: 1.152  m1_loss_ce_5: 0.4927  m1_loss_mask_5: 0.154  m1_loss_dice_5: 1.116  m1_loss_ce_6: 0.4904  m1_loss_mask_6: 0.1528  m1_loss_dice_6: 1.119  m1_loss_ce_7: 0.4786  m1_loss_mask_7: 0.153  m1_loss_dice_7: 1.143  m1_loss_ce_8: 0.474  m1_loss_mask_8: 0.154  m1_loss_dice_8: 1.125  m2_loss_ce: 0.527  m2_loss_mask: 0.1636  m2_loss_dice: 1.211  m2_loss_ce_0: 0.5668  m2_loss_mask_0: 0.2037  m2_loss_dice_0: 1.416  m2_loss_ce_1: 0.6791  m2_loss_mask_1: 0.1745  m2_loss_dice_1: 1.288  m2_loss_ce_2: 0.6176  m2_loss_mask_2: 0.1681  m2_loss_dice_2: 1.244  m2_loss_ce_3: 0.5818  m2_loss_mask_3: 0.1688  m2_loss_dice_3: 1.159  m2_loss_ce_4: 0.53  m2_loss_mask_4: 0.1638  m2_loss_dice_4: 1.207  m2_loss_ce_5: 0.5245  m2_loss_mask_5: 0.1649  m2_loss_dice_5: 1.216  m2_loss_ce_6: 0.5178  m2_loss_mask_6: 0.1633  m2_loss_dice_6: 1.172  m2_loss_ce_7: 0.5453  m2_loss_mask_7: 0.1648  m2_loss_dice_7: 1.177  m2_loss_ce_8: 0.5062  m2_loss_mask_8: 0.1643  m2_loss_dice_8: 1.175  com_loss_ce: 1.792  com_loss_mask: 0.6924  com_loss_dice: 0.9702    time: 1.4766  last_time: 1.4354  data_time: 0.0456  last_data_time: 0.0436   lr: 0.0001  max_mem: 35857M
[08/30 01:44:48] d2.utils.events INFO:  eta: 0:01:28  iter: 939  total_loss: 41.74  m1_loss_ce: 0.4925  m1_loss_mask: 0.1738  m1_loss_dice: 1.144  m1_loss_ce_0: 0.5777  m1_loss_mask_0: 0.1907  m1_loss_dice_0: 1.339  m1_loss_ce_1: 0.6194  m1_loss_mask_1: 0.1812  m1_loss_dice_1: 1.262  m1_loss_ce_2: 0.57  m1_loss_mask_2: 0.1766  m1_loss_dice_2: 1.226  m1_loss_ce_3: 0.5115  m1_loss_mask_3: 0.1763  m1_loss_dice_3: 1.156  m1_loss_ce_4: 0.4682  m1_loss_mask_4: 0.1738  m1_loss_dice_4: 1.16  m1_loss_ce_5: 0.4802  m1_loss_mask_5: 0.1685  m1_loss_dice_5: 1.159  m1_loss_ce_6: 0.4695  m1_loss_mask_6: 0.1677  m1_loss_dice_6: 1.125  m1_loss_ce_7: 0.4618  m1_loss_mask_7: 0.1744  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.4502  m1_loss_mask_8: 0.1725  m1_loss_dice_8: 1.129  m2_loss_ce: 0.4936  m2_loss_mask: 0.1722  m2_loss_dice: 1.138  m2_loss_ce_0: 0.5746  m2_loss_mask_0: 0.206  m2_loss_dice_0: 1.429  m2_loss_ce_1: 0.6709  m2_loss_mask_1: 0.1796  m2_loss_dice_1: 1.251  m2_loss_ce_2: 0.6044  m2_loss_mask_2: 0.1745  m2_loss_dice_2: 1.239  m2_loss_ce_3: 0.5286  m2_loss_mask_3: 0.1728  m2_loss_dice_3: 1.141  m2_loss_ce_4: 0.5237  m2_loss_mask_4: 0.1722  m2_loss_dice_4: 1.164  m2_loss_ce_5: 0.5185  m2_loss_mask_5: 0.1726  m2_loss_dice_5: 1.141  m2_loss_ce_6: 0.5186  m2_loss_mask_6: 0.1726  m2_loss_dice_6: 1.153  m2_loss_ce_7: 0.5029  m2_loss_mask_7: 0.1704  m2_loss_dice_7: 1.133  m2_loss_ce_8: 0.518  m2_loss_mask_8: 0.1719  m2_loss_dice_8: 1.14  com_loss_ce: 1.776  com_loss_mask: 0.6924  com_loss_dice: 0.9694    time: 1.4764  last_time: 1.5506  data_time: 0.0415  last_data_time: 0.0419   lr: 0.0001  max_mem: 35857M
[08/30 01:45:18] d2.utils.events INFO:  eta: 0:00:58  iter: 959  total_loss: 42.76  m1_loss_ce: 0.5046  m1_loss_mask: 0.151  m1_loss_dice: 1.216  m1_loss_ce_0: 0.5494  m1_loss_mask_0: 0.1808  m1_loss_dice_0: 1.446  m1_loss_ce_1: 0.642  m1_loss_mask_1: 0.1652  m1_loss_dice_1: 1.312  m1_loss_ce_2: 0.5965  m1_loss_mask_2: 0.1587  m1_loss_dice_2: 1.298  m1_loss_ce_3: 0.5143  m1_loss_mask_3: 0.1535  m1_loss_dice_3: 1.216  m1_loss_ce_4: 0.5065  m1_loss_mask_4: 0.1525  m1_loss_dice_4: 1.217  m1_loss_ce_5: 0.5377  m1_loss_mask_5: 0.1537  m1_loss_dice_5: 1.193  m1_loss_ce_6: 0.5026  m1_loss_mask_6: 0.1525  m1_loss_dice_6: 1.231  m1_loss_ce_7: 0.5049  m1_loss_mask_7: 0.1522  m1_loss_dice_7: 1.211  m1_loss_ce_8: 0.4758  m1_loss_mask_8: 0.1528  m1_loss_dice_8: 1.23  m2_loss_ce: 0.5223  m2_loss_mask: 0.1647  m2_loss_dice: 1.209  m2_loss_ce_0: 0.5843  m2_loss_mask_0: 0.1959  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.7162  m2_loss_mask_1: 0.1754  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.6345  m2_loss_mask_2: 0.1662  m2_loss_dice_2: 1.316  m2_loss_ce_3: 0.5935  m2_loss_mask_3: 0.1645  m2_loss_dice_3: 1.261  m2_loss_ce_4: 0.5472  m2_loss_mask_4: 0.1677  m2_loss_dice_4: 1.194  m2_loss_ce_5: 0.5395  m2_loss_mask_5: 0.1657  m2_loss_dice_5: 1.21  m2_loss_ce_6: 0.5248  m2_loss_mask_6: 0.1664  m2_loss_dice_6: 1.233  m2_loss_ce_7: 0.5311  m2_loss_mask_7: 0.1667  m2_loss_dice_7: 1.2  m2_loss_ce_8: 0.5383  m2_loss_mask_8: 0.1685  m2_loss_dice_8: 1.218  com_loss_ce: 1.787  com_loss_mask: 0.6924  com_loss_dice: 0.9703    time: 1.4772  last_time: 1.5529  data_time: 0.0458  last_data_time: 0.0466   lr: 0.0001  max_mem: 35857M
[08/30 01:45:48] d2.utils.events INFO:  eta: 0:00:29  iter: 979  total_loss: 41.78  m1_loss_ce: 0.5032  m1_loss_mask: 0.1505  m1_loss_dice: 1.153  m1_loss_ce_0: 0.5581  m1_loss_mask_0: 0.1756  m1_loss_dice_0: 1.359  m1_loss_ce_1: 0.6538  m1_loss_mask_1: 0.1606  m1_loss_dice_1: 1.274  m1_loss_ce_2: 0.5849  m1_loss_mask_2: 0.1551  m1_loss_dice_2: 1.203  m1_loss_ce_3: 0.5636  m1_loss_mask_3: 0.1515  m1_loss_dice_3: 1.154  m1_loss_ce_4: 0.5011  m1_loss_mask_4: 0.1493  m1_loss_dice_4: 1.144  m1_loss_ce_5: 0.5144  m1_loss_mask_5: 0.1498  m1_loss_dice_5: 1.153  m1_loss_ce_6: 0.4904  m1_loss_mask_6: 0.1503  m1_loss_dice_6: 1.107  m1_loss_ce_7: 0.489  m1_loss_mask_7: 0.151  m1_loss_dice_7: 1.14  m1_loss_ce_8: 0.4977  m1_loss_mask_8: 0.1494  m1_loss_dice_8: 1.131  m2_loss_ce: 0.5155  m2_loss_mask: 0.1528  m2_loss_dice: 1.148  m2_loss_ce_0: 0.5876  m2_loss_mask_0: 0.1901  m2_loss_dice_0: 1.395  m2_loss_ce_1: 0.6623  m2_loss_mask_1: 0.1701  m2_loss_dice_1: 1.294  m2_loss_ce_2: 0.6012  m2_loss_mask_2: 0.1616  m2_loss_dice_2: 1.201  m2_loss_ce_3: 0.5759  m2_loss_mask_3: 0.1588  m2_loss_dice_3: 1.157  m2_loss_ce_4: 0.5417  m2_loss_mask_4: 0.1551  m2_loss_dice_4: 1.184  m2_loss_ce_5: 0.5458  m2_loss_mask_5: 0.1547  m2_loss_dice_5: 1.199  m2_loss_ce_6: 0.5113  m2_loss_mask_6: 0.1566  m2_loss_dice_6: 1.166  m2_loss_ce_7: 0.5102  m2_loss_mask_7: 0.1545  m2_loss_dice_7: 1.158  m2_loss_ce_8: 0.5308  m2_loss_mask_8: 0.1529  m2_loss_dice_8: 1.153  com_loss_ce: 1.763  com_loss_mask: 0.6924  com_loss_dice: 0.971    time: 1.4778  last_time: 1.4863  data_time: 0.0414  last_data_time: 0.0409   lr: 0.0001  max_mem: 35857M
[08/30 01:46:18] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy/model_final.pth
[08/30 01:46:21] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 45.46  m1_loss_ce: 0.5501  m1_loss_mask: 0.163  m1_loss_dice: 1.236  m1_loss_ce_0: 0.6393  m1_loss_mask_0: 0.184  m1_loss_dice_0: 1.45  m1_loss_ce_1: 0.6844  m1_loss_mask_1: 0.1737  m1_loss_dice_1: 1.401  m1_loss_ce_2: 0.6455  m1_loss_mask_2: 0.1672  m1_loss_dice_2: 1.305  m1_loss_ce_3: 0.5985  m1_loss_mask_3: 0.1641  m1_loss_dice_3: 1.27  m1_loss_ce_4: 0.5819  m1_loss_mask_4: 0.1636  m1_loss_dice_4: 1.267  m1_loss_ce_5: 0.5603  m1_loss_mask_5: 0.157  m1_loss_dice_5: 1.229  m1_loss_ce_6: 0.5368  m1_loss_mask_6: 0.1607  m1_loss_dice_6: 1.243  m1_loss_ce_7: 0.5444  m1_loss_mask_7: 0.1639  m1_loss_dice_7: 1.256  m1_loss_ce_8: 0.5436  m1_loss_mask_8: 0.1625  m1_loss_dice_8: 1.226  m2_loss_ce: 0.5656  m2_loss_mask: 0.1722  m2_loss_dice: 1.267  m2_loss_ce_0: 0.6349  m2_loss_mask_0: 0.2012  m2_loss_dice_0: 1.523  m2_loss_ce_1: 0.7461  m2_loss_mask_1: 0.1849  m2_loss_dice_1: 1.462  m2_loss_ce_2: 0.6908  m2_loss_mask_2: 0.1768  m2_loss_dice_2: 1.392  m2_loss_ce_3: 0.635  m2_loss_mask_3: 0.1777  m2_loss_dice_3: 1.318  m2_loss_ce_4: 0.6228  m2_loss_mask_4: 0.1757  m2_loss_dice_4: 1.325  m2_loss_ce_5: 0.5825  m2_loss_mask_5: 0.1729  m2_loss_dice_5: 1.317  m2_loss_ce_6: 0.5884  m2_loss_mask_6: 0.1738  m2_loss_dice_6: 1.237  m2_loss_ce_7: 0.5987  m2_loss_mask_7: 0.1733  m2_loss_dice_7: 1.264  m2_loss_ce_8: 0.5806  m2_loss_mask_8: 0.1729  m2_loss_dice_8: 1.316  com_loss_ce: 1.813  com_loss_mask: 0.6924  com_loss_dice: 0.9728    time: 1.4783  last_time: 1.4966  data_time: 0.0417  last_data_time: 0.0336   lr: 0.0001  max_mem: 35857M
[08/30 01:46:21] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:24:35 (1.4784 s / it)
[08/30 01:46:21] d2.engine.hooks INFO: Total training time: 0:24:43 (0:00:08 on hooks)
[08/30 01:46:21] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/30 01:46:21] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/30 01:46:21] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/30 01:46:21] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/30 01:46:21] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/30 01:47:53] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval8y526xfo ...
[08/30 01:48:10] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 58.841 | 80.783 | 71.741 |      19       |
| Things | 50.863 | 80.108 | 63.383 |       8       |
| Stuff  | 64.643 | 81.274 | 77.819 |      11       |
[08/30 01:48:10] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.426 | 97.729 | 99.690 |     Stuff     |
| class_8  | 75.032 | 84.043 | 89.278 |     Stuff     |
| class_11 | 87.380 | 89.483 | 97.651 |     Stuff     |
| class_12 | 44.599 | 79.745 | 55.927 |     Stuff     |
| class_13 | 37.007 | 76.825 | 48.171 |     Stuff     |
| class_17 | 42.511 | 63.897 | 66.530 |     Stuff     |
| class_19 | 50.568 | 68.924 | 73.369 |     Stuff     |
| class_20 | 63.684 | 76.619 | 83.117 |     Stuff     |
| class_21 | 89.169 | 90.281 | 98.768 |     Stuff     |
| class_22 | 35.393 | 74.479 | 47.521 |     Stuff     |
| class_23 | 88.303 | 91.991 | 95.991 |     Stuff     |
| class_24 | 51.372 | 77.092 | 66.637 |    Things     |
| class_25 | 47.935 | 73.906 | 64.859 |    Things     |
| class_26 | 65.382 | 83.550 | 78.255 |    Things     |
| class_27 | 49.895 | 88.112 | 56.627 |    Things     |
| class_28 | 60.565 | 89.531 | 67.647 |    Things     |
| class_31 | 46.527 | 80.365 | 57.895 |    Things     |
| class_32 | 40.232 | 75.865 | 53.030 |    Things     |
| class_33 | 44.996 | 72.443 | 62.112 |    Things     |
[08/30 01:48:10] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/30 01:48:10] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/30 01:48:10] d2.evaluation.testing INFO: copypaste: 58.8407,80.7832,71.7406,50.8629,80.1082,63.3826,64.6428,81.2741,77.8192,97.4259,97.7291,99.6898,75.0321,84.0434,89.2779,87.3803,89.4825,97.6507,44.5989,79.7448,55.9271,37.0070,76.8246,48.1707,42.5106,63.8971,66.5298,50.5682,68.9235,73.3686,63.6835,76.6193,83.1169,89.1689,90.2812,98.7680,35.3928,74.4788,47.5207,88.3028,91.9909,95.9908,51.3717,77.0925,66.6365,47.9347,73.9063,64.8588,65.3819,83.5500,78.2548,49.8947,88.1119,56.6265,60.5654,89.5314,67.6471,46.5272,80.3651,57.8947,40.2316,75.8654,53.0303,44.9959,72.4434,62.1118
[09/08 18:17:57] detectron2 INFO: Rank of current process: 0. World size: 2
[09/08 18:17:59] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[09/08 18:17:59] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_softmax_entropy.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[09/08 18:17:59] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_softmax_entropy.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[09/08 18:17:59] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[09/08 18:17:59] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy/config.yaml
[09/08 18:17:59] d2.utils.env INFO: Using a generated random seed 60354654
[09/08 18:18:02] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[09/08 18:18:02] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[09/08 18:18:03] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[09/08 18:18:03] d2.data.build INFO: Using training sampler TrainingSampler
[09/08 18:18:03] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/08 18:18:03] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[09/08 18:18:03] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[09/08 18:18:03] d2.data.build INFO: Making batched data loader with batch_size=4
[09/08 18:18:03] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[09/08 18:18:07] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[09/08 18:18:07] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[09/08 18:18:07] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[09/08 18:18:20] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[09/08 18:18:20] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[09/08 18:18:55] d2.utils.events INFO:  eta: 0:23:20  iter: 19  total_loss: 45.07  m1_loss_ce: 0.5247  m1_loss_mask: 0.1639  m1_loss_dice: 1.292  m1_loss_ce_0: 0.5812  m1_loss_mask_0: 0.1906  m1_loss_dice_0: 1.503  m1_loss_ce_1: 0.6858  m1_loss_mask_1: 0.1797  m1_loss_dice_1: 1.408  m1_loss_ce_2: 0.6089  m1_loss_mask_2: 0.1689  m1_loss_dice_2: 1.334  m1_loss_ce_3: 0.5749  m1_loss_mask_3: 0.1694  m1_loss_dice_3: 1.319  m1_loss_ce_4: 0.5387  m1_loss_mask_4: 0.1691  m1_loss_dice_4: 1.292  m1_loss_ce_5: 0.5147  m1_loss_mask_5: 0.1693  m1_loss_dice_5: 1.309  m1_loss_ce_6: 0.4902  m1_loss_mask_6: 0.1688  m1_loss_dice_6: 1.279  m1_loss_ce_7: 0.4684  m1_loss_mask_7: 0.167  m1_loss_dice_7: 1.292  m1_loss_ce_8: 0.466  m1_loss_mask_8: 0.1639  m1_loss_dice_8: 1.29  m2_loss_ce: 0.5263  m2_loss_mask: 0.1657  m2_loss_dice: 1.276  m2_loss_ce_0: 0.5826  m2_loss_mask_0: 0.1977  m2_loss_dice_0: 1.539  m2_loss_ce_1: 0.7027  m2_loss_mask_1: 0.1838  m2_loss_dice_1: 1.402  m2_loss_ce_2: 0.599  m2_loss_mask_2: 0.1688  m2_loss_dice_2: 1.32  m2_loss_ce_3: 0.5413  m2_loss_mask_3: 0.1694  m2_loss_dice_3: 1.278  m2_loss_ce_4: 0.5554  m2_loss_mask_4: 0.1696  m2_loss_dice_4: 1.293  m2_loss_ce_5: 0.5635  m2_loss_mask_5: 0.167  m2_loss_dice_5: 1.269  m2_loss_ce_6: 0.5442  m2_loss_mask_6: 0.1659  m2_loss_dice_6: 1.258  m2_loss_ce_7: 0.5302  m2_loss_mask_7: 0.1676  m2_loss_dice_7: 1.275  m2_loss_ce_8: 0.5202  m2_loss_mask_8: 0.1665  m2_loss_dice_8: 1.273  com_loss_ce: 1.817  com_loss_mask: 0.6924  com_loss_dice: 0.9735    time: 1.4380  last_time: 1.3429  data_time: 0.2562  last_data_time: 0.0421   lr: 0.0001  max_mem: 34749M
[09/08 18:19:23] d2.utils.events INFO:  eta: 0:22:34  iter: 39  total_loss: 43.68  m1_loss_ce: 0.5157  m1_loss_mask: 0.17  m1_loss_dice: 1.191  m1_loss_ce_0: 0.5954  m1_loss_mask_0: 0.1917  m1_loss_dice_0: 1.488  m1_loss_ce_1: 0.6874  m1_loss_mask_1: 0.1795  m1_loss_dice_1: 1.34  m1_loss_ce_2: 0.6133  m1_loss_mask_2: 0.1778  m1_loss_dice_2: 1.3  m1_loss_ce_3: 0.578  m1_loss_mask_3: 0.1781  m1_loss_dice_3: 1.25  m1_loss_ce_4: 0.5404  m1_loss_mask_4: 0.1765  m1_loss_dice_4: 1.264  m1_loss_ce_5: 0.5221  m1_loss_mask_5: 0.1744  m1_loss_dice_5: 1.208  m1_loss_ce_6: 0.5101  m1_loss_mask_6: 0.1733  m1_loss_dice_6: 1.218  m1_loss_ce_7: 0.5161  m1_loss_mask_7: 0.1739  m1_loss_dice_7: 1.204  m1_loss_ce_8: 0.5395  m1_loss_mask_8: 0.1749  m1_loss_dice_8: 1.261  m2_loss_ce: 0.5342  m2_loss_mask: 0.1678  m2_loss_dice: 1.221  m2_loss_ce_0: 0.5941  m2_loss_mask_0: 0.2041  m2_loss_dice_0: 1.515  m2_loss_ce_1: 0.6849  m2_loss_mask_1: 0.1811  m2_loss_dice_1: 1.376  m2_loss_ce_2: 0.6625  m2_loss_mask_2: 0.1717  m2_loss_dice_2: 1.264  m2_loss_ce_3: 0.5708  m2_loss_mask_3: 0.1745  m2_loss_dice_3: 1.196  m2_loss_ce_4: 0.5755  m2_loss_mask_4: 0.1728  m2_loss_dice_4: 1.23  m2_loss_ce_5: 0.55  m2_loss_mask_5: 0.1687  m2_loss_dice_5: 1.234  m2_loss_ce_6: 0.5428  m2_loss_mask_6: 0.1724  m2_loss_dice_6: 1.219  m2_loss_ce_7: 0.5634  m2_loss_mask_7: 0.1694  m2_loss_dice_7: 1.211  m2_loss_ce_8: 0.5464  m2_loss_mask_8: 0.1691  m2_loss_dice_8: 1.22  com_loss_ce: 1.824  com_loss_mask: 0.6924  com_loss_dice: 0.9727    time: 1.4210  last_time: 1.4234  data_time: 0.0554  last_data_time: 0.0556   lr: 0.0001  max_mem: 34749M
[09/08 18:19:52] d2.utils.events INFO:  eta: 0:22:12  iter: 59  total_loss: 43.69  m1_loss_ce: 0.4897  m1_loss_mask: 0.1619  m1_loss_dice: 1.224  m1_loss_ce_0: 0.5377  m1_loss_mask_0: 0.1844  m1_loss_dice_0: 1.445  m1_loss_ce_1: 0.5954  m1_loss_mask_1: 0.1779  m1_loss_dice_1: 1.312  m1_loss_ce_2: 0.5401  m1_loss_mask_2: 0.1671  m1_loss_dice_2: 1.292  m1_loss_ce_3: 0.5249  m1_loss_mask_3: 0.1697  m1_loss_dice_3: 1.252  m1_loss_ce_4: 0.5098  m1_loss_mask_4: 0.1627  m1_loss_dice_4: 1.249  m1_loss_ce_5: 0.4921  m1_loss_mask_5: 0.1642  m1_loss_dice_5: 1.234  m1_loss_ce_6: 0.4813  m1_loss_mask_6: 0.166  m1_loss_dice_6: 1.243  m1_loss_ce_7: 0.471  m1_loss_mask_7: 0.1608  m1_loss_dice_7: 1.219  m1_loss_ce_8: 0.4421  m1_loss_mask_8: 0.1634  m1_loss_dice_8: 1.227  m2_loss_ce: 0.5361  m2_loss_mask: 0.1625  m2_loss_dice: 1.187  m2_loss_ce_0: 0.5876  m2_loss_mask_0: 0.1891  m2_loss_dice_0: 1.493  m2_loss_ce_1: 0.6503  m2_loss_mask_1: 0.1717  m2_loss_dice_1: 1.321  m2_loss_ce_2: 0.5687  m2_loss_mask_2: 0.1648  m2_loss_dice_2: 1.278  m2_loss_ce_3: 0.5301  m2_loss_mask_3: 0.1651  m2_loss_dice_3: 1.225  m2_loss_ce_4: 0.5244  m2_loss_mask_4: 0.1647  m2_loss_dice_4: 1.237  m2_loss_ce_5: 0.5163  m2_loss_mask_5: 0.1655  m2_loss_dice_5: 1.229  m2_loss_ce_6: 0.488  m2_loss_mask_6: 0.1625  m2_loss_dice_6: 1.243  m2_loss_ce_7: 0.5068  m2_loss_mask_7: 0.1616  m2_loss_dice_7: 1.194  m2_loss_ce_8: 0.5392  m2_loss_mask_8: 0.1618  m2_loss_dice_8: 1.178  com_loss_ce: 1.792  com_loss_mask: 0.6924  com_loss_dice: 0.9721    time: 1.4273  last_time: 1.4457  data_time: 0.0517  last_data_time: 0.0983   lr: 0.0001  max_mem: 34749M
[09/08 18:20:21] d2.utils.events INFO:  eta: 0:21:46  iter: 79  total_loss: 44.48  m1_loss_ce: 0.5361  m1_loss_mask: 0.1643  m1_loss_dice: 1.237  m1_loss_ce_0: 0.5797  m1_loss_mask_0: 0.1828  m1_loss_dice_0: 1.43  m1_loss_ce_1: 0.6767  m1_loss_mask_1: 0.1755  m1_loss_dice_1: 1.351  m1_loss_ce_2: 0.5741  m1_loss_mask_2: 0.1652  m1_loss_dice_2: 1.314  m1_loss_ce_3: 0.5479  m1_loss_mask_3: 0.1662  m1_loss_dice_3: 1.265  m1_loss_ce_4: 0.5331  m1_loss_mask_4: 0.1657  m1_loss_dice_4: 1.262  m1_loss_ce_5: 0.5033  m1_loss_mask_5: 0.1646  m1_loss_dice_5: 1.248  m1_loss_ce_6: 0.5105  m1_loss_mask_6: 0.1617  m1_loss_dice_6: 1.241  m1_loss_ce_7: 0.5024  m1_loss_mask_7: 0.1636  m1_loss_dice_7: 1.221  m1_loss_ce_8: 0.4954  m1_loss_mask_8: 0.1646  m1_loss_dice_8: 1.208  m2_loss_ce: 0.5404  m2_loss_mask: 0.1663  m2_loss_dice: 1.27  m2_loss_ce_0: 0.5852  m2_loss_mask_0: 0.1894  m2_loss_dice_0: 1.578  m2_loss_ce_1: 0.6965  m2_loss_mask_1: 0.1721  m2_loss_dice_1: 1.376  m2_loss_ce_2: 0.6206  m2_loss_mask_2: 0.1647  m2_loss_dice_2: 1.324  m2_loss_ce_3: 0.5885  m2_loss_mask_3: 0.169  m2_loss_dice_3: 1.26  m2_loss_ce_4: 0.5885  m2_loss_mask_4: 0.1712  m2_loss_dice_4: 1.246  m2_loss_ce_5: 0.5583  m2_loss_mask_5: 0.1657  m2_loss_dice_5: 1.267  m2_loss_ce_6: 0.5635  m2_loss_mask_6: 0.1673  m2_loss_dice_6: 1.227  m2_loss_ce_7: 0.5396  m2_loss_mask_7: 0.168  m2_loss_dice_7: 1.213  m2_loss_ce_8: 0.5674  m2_loss_mask_8: 0.1669  m2_loss_dice_8: 1.222  com_loss_ce: 1.781  com_loss_mask: 0.6924  com_loss_dice: 0.9738    time: 1.4284  last_time: 1.3619  data_time: 0.0508  last_data_time: 0.0442   lr: 0.0001  max_mem: 34749M
[09/08 18:20:49] d2.utils.events INFO:  eta: 0:21:12  iter: 99  total_loss: 42.4  m1_loss_ce: 0.4671  m1_loss_mask: 0.1613  m1_loss_dice: 1.217  m1_loss_ce_0: 0.589  m1_loss_mask_0: 0.1951  m1_loss_dice_0: 1.38  m1_loss_ce_1: 0.5985  m1_loss_mask_1: 0.1748  m1_loss_dice_1: 1.315  m1_loss_ce_2: 0.5576  m1_loss_mask_2: 0.1687  m1_loss_dice_2: 1.249  m1_loss_ce_3: 0.5055  m1_loss_mask_3: 0.1641  m1_loss_dice_3: 1.185  m1_loss_ce_4: 0.481  m1_loss_mask_4: 0.165  m1_loss_dice_4: 1.188  m1_loss_ce_5: 0.4758  m1_loss_mask_5: 0.163  m1_loss_dice_5: 1.165  m1_loss_ce_6: 0.4619  m1_loss_mask_6: 0.1641  m1_loss_dice_6: 1.171  m1_loss_ce_7: 0.4217  m1_loss_mask_7: 0.1636  m1_loss_dice_7: 1.187  m1_loss_ce_8: 0.4954  m1_loss_mask_8: 0.1632  m1_loss_dice_8: 1.152  m2_loss_ce: 0.5187  m2_loss_mask: 0.1575  m2_loss_dice: 1.183  m2_loss_ce_0: 0.5886  m2_loss_mask_0: 0.1993  m2_loss_dice_0: 1.443  m2_loss_ce_1: 0.6555  m2_loss_mask_1: 0.1734  m2_loss_dice_1: 1.285  m2_loss_ce_2: 0.5834  m2_loss_mask_2: 0.163  m2_loss_dice_2: 1.246  m2_loss_ce_3: 0.5365  m2_loss_mask_3: 0.1599  m2_loss_dice_3: 1.209  m2_loss_ce_4: 0.5305  m2_loss_mask_4: 0.1625  m2_loss_dice_4: 1.182  m2_loss_ce_5: 0.5466  m2_loss_mask_5: 0.1607  m2_loss_dice_5: 1.191  m2_loss_ce_6: 0.5168  m2_loss_mask_6: 0.1608  m2_loss_dice_6: 1.182  m2_loss_ce_7: 0.4858  m2_loss_mask_7: 0.1582  m2_loss_dice_7: 1.144  m2_loss_ce_8: 0.4983  m2_loss_mask_8: 0.1571  m2_loss_dice_8: 1.165  com_loss_ce: 1.768  com_loss_mask: 0.6924  com_loss_dice: 0.9718    time: 1.4216  last_time: 1.3683  data_time: 0.0422  last_data_time: 0.0464   lr: 0.0001  max_mem: 34749M
[09/08 18:21:18] d2.utils.events INFO:  eta: 0:20:43  iter: 119  total_loss: 44.12  m1_loss_ce: 0.526  m1_loss_mask: 0.1887  m1_loss_dice: 1.219  m1_loss_ce_0: 0.5659  m1_loss_mask_0: 0.2043  m1_loss_dice_0: 1.428  m1_loss_ce_1: 0.646  m1_loss_mask_1: 0.1962  m1_loss_dice_1: 1.348  m1_loss_ce_2: 0.5965  m1_loss_mask_2: 0.1933  m1_loss_dice_2: 1.285  m1_loss_ce_3: 0.5539  m1_loss_mask_3: 0.1931  m1_loss_dice_3: 1.243  m1_loss_ce_4: 0.5316  m1_loss_mask_4: 0.1946  m1_loss_dice_4: 1.223  m1_loss_ce_5: 0.5101  m1_loss_mask_5: 0.1905  m1_loss_dice_5: 1.21  m1_loss_ce_6: 0.5286  m1_loss_mask_6: 0.1895  m1_loss_dice_6: 1.218  m1_loss_ce_7: 0.4912  m1_loss_mask_7: 0.1927  m1_loss_dice_7: 1.26  m1_loss_ce_8: 0.49  m1_loss_mask_8: 0.1875  m1_loss_dice_8: 1.244  m2_loss_ce: 0.5439  m2_loss_mask: 0.1815  m2_loss_dice: 1.2  m2_loss_ce_0: 0.6049  m2_loss_mask_0: 0.2015  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.7091  m2_loss_mask_1: 0.1899  m2_loss_dice_1: 1.311  m2_loss_ce_2: 0.6463  m2_loss_mask_2: 0.1791  m2_loss_dice_2: 1.322  m2_loss_ce_3: 0.586  m2_loss_mask_3: 0.1806  m2_loss_dice_3: 1.211  m2_loss_ce_4: 0.5845  m2_loss_mask_4: 0.1825  m2_loss_dice_4: 1.216  m2_loss_ce_5: 0.5827  m2_loss_mask_5: 0.18  m2_loss_dice_5: 1.219  m2_loss_ce_6: 0.5981  m2_loss_mask_6: 0.182  m2_loss_dice_6: 1.204  m2_loss_ce_7: 0.5311  m2_loss_mask_7: 0.1804  m2_loss_dice_7: 1.215  m2_loss_ce_8: 0.5437  m2_loss_mask_8: 0.1812  m2_loss_dice_8: 1.211  com_loss_ce: 1.808  com_loss_mask: 0.6924  com_loss_dice: 0.9723    time: 1.4228  last_time: 1.4054  data_time: 0.0590  last_data_time: 0.0395   lr: 0.0001  max_mem: 34749M
[09/08 18:21:47] d2.utils.events INFO:  eta: 0:20:18  iter: 139  total_loss: 45.49  m1_loss_ce: 0.4659  m1_loss_mask: 0.1632  m1_loss_dice: 1.249  m1_loss_ce_0: 0.5169  m1_loss_mask_0: 0.196  m1_loss_dice_0: 1.469  m1_loss_ce_1: 0.6558  m1_loss_mask_1: 0.1773  m1_loss_dice_1: 1.354  m1_loss_ce_2: 0.5818  m1_loss_mask_2: 0.1702  m1_loss_dice_2: 1.313  m1_loss_ce_3: 0.5314  m1_loss_mask_3: 0.174  m1_loss_dice_3: 1.292  m1_loss_ce_4: 0.4988  m1_loss_mask_4: 0.1669  m1_loss_dice_4: 1.227  m1_loss_ce_5: 0.5323  m1_loss_mask_5: 0.1656  m1_loss_dice_5: 1.269  m1_loss_ce_6: 0.4688  m1_loss_mask_6: 0.164  m1_loss_dice_6: 1.267  m1_loss_ce_7: 0.5338  m1_loss_mask_7: 0.1681  m1_loss_dice_7: 1.227  m1_loss_ce_8: 0.4911  m1_loss_mask_8: 0.1665  m1_loss_dice_8: 1.259  m2_loss_ce: 0.572  m2_loss_mask: 0.1617  m2_loss_dice: 1.238  m2_loss_ce_0: 0.6019  m2_loss_mask_0: 0.1889  m2_loss_dice_0: 1.455  m2_loss_ce_1: 0.7205  m2_loss_mask_1: 0.1719  m2_loss_dice_1: 1.338  m2_loss_ce_2: 0.6492  m2_loss_mask_2: 0.1668  m2_loss_dice_2: 1.289  m2_loss_ce_3: 0.6307  m2_loss_mask_3: 0.1681  m2_loss_dice_3: 1.256  m2_loss_ce_4: 0.6049  m2_loss_mask_4: 0.1688  m2_loss_dice_4: 1.243  m2_loss_ce_5: 0.5707  m2_loss_mask_5: 0.1656  m2_loss_dice_5: 1.232  m2_loss_ce_6: 0.5502  m2_loss_mask_6: 0.1679  m2_loss_dice_6: 1.24  m2_loss_ce_7: 0.5766  m2_loss_mask_7: 0.1657  m2_loss_dice_7: 1.211  m2_loss_ce_8: 0.53  m2_loss_mask_8: 0.163  m2_loss_dice_8: 1.249  com_loss_ce: 1.823  com_loss_mask: 0.6924  com_loss_dice: 0.9725    time: 1.4252  last_time: 1.5270  data_time: 0.0577  last_data_time: 0.0516   lr: 0.0001  max_mem: 34883M
[09/08 18:22:16] d2.utils.events INFO:  eta: 0:19:51  iter: 159  total_loss: 43.23  m1_loss_ce: 0.4679  m1_loss_mask: 0.1679  m1_loss_dice: 1.255  m1_loss_ce_0: 0.5556  m1_loss_mask_0: 0.1891  m1_loss_dice_0: 1.459  m1_loss_ce_1: 0.6225  m1_loss_mask_1: 0.1742  m1_loss_dice_1: 1.34  m1_loss_ce_2: 0.567  m1_loss_mask_2: 0.1678  m1_loss_dice_2: 1.272  m1_loss_ce_3: 0.5389  m1_loss_mask_3: 0.1681  m1_loss_dice_3: 1.249  m1_loss_ce_4: 0.4969  m1_loss_mask_4: 0.1645  m1_loss_dice_4: 1.268  m1_loss_ce_5: 0.4976  m1_loss_mask_5: 0.1648  m1_loss_dice_5: 1.237  m1_loss_ce_6: 0.5096  m1_loss_mask_6: 0.1659  m1_loss_dice_6: 1.269  m1_loss_ce_7: 0.478  m1_loss_mask_7: 0.1641  m1_loss_dice_7: 1.236  m1_loss_ce_8: 0.4966  m1_loss_mask_8: 0.1677  m1_loss_dice_8: 1.247  m2_loss_ce: 0.5424  m2_loss_mask: 0.1608  m2_loss_dice: 1.176  m2_loss_ce_0: 0.5472  m2_loss_mask_0: 0.199  m2_loss_dice_0: 1.515  m2_loss_ce_1: 0.6721  m2_loss_mask_1: 0.174  m2_loss_dice_1: 1.303  m2_loss_ce_2: 0.6042  m2_loss_mask_2: 0.1652  m2_loss_dice_2: 1.279  m2_loss_ce_3: 0.5694  m2_loss_mask_3: 0.1644  m2_loss_dice_3: 1.231  m2_loss_ce_4: 0.5786  m2_loss_mask_4: 0.1638  m2_loss_dice_4: 1.245  m2_loss_ce_5: 0.5606  m2_loss_mask_5: 0.1604  m2_loss_dice_5: 1.222  m2_loss_ce_6: 0.5219  m2_loss_mask_6: 0.1637  m2_loss_dice_6: 1.211  m2_loss_ce_7: 0.5497  m2_loss_mask_7: 0.1624  m2_loss_dice_7: 1.19  m2_loss_ce_8: 0.563  m2_loss_mask_8: 0.1604  m2_loss_dice_8: 1.203  com_loss_ce: 1.798  com_loss_mask: 0.6924  com_loss_dice: 0.9731    time: 1.4280  last_time: 1.4514  data_time: 0.0550  last_data_time: 0.0501   lr: 0.0001  max_mem: 34883M
[09/08 18:22:45] d2.utils.events INFO:  eta: 0:19:24  iter: 179  total_loss: 42.93  m1_loss_ce: 0.4822  m1_loss_mask: 0.1686  m1_loss_dice: 1.228  m1_loss_ce_0: 0.5677  m1_loss_mask_0: 0.2067  m1_loss_dice_0: 1.448  m1_loss_ce_1: 0.6384  m1_loss_mask_1: 0.1869  m1_loss_dice_1: 1.334  m1_loss_ce_2: 0.5554  m1_loss_mask_2: 0.1723  m1_loss_dice_2: 1.332  m1_loss_ce_3: 0.5102  m1_loss_mask_3: 0.1755  m1_loss_dice_3: 1.256  m1_loss_ce_4: 0.4809  m1_loss_mask_4: 0.1761  m1_loss_dice_4: 1.253  m1_loss_ce_5: 0.4737  m1_loss_mask_5: 0.1699  m1_loss_dice_5: 1.26  m1_loss_ce_6: 0.4726  m1_loss_mask_6: 0.1679  m1_loss_dice_6: 1.227  m1_loss_ce_7: 0.4608  m1_loss_mask_7: 0.1705  m1_loss_dice_7: 1.258  m1_loss_ce_8: 0.4717  m1_loss_mask_8: 0.1696  m1_loss_dice_8: 1.277  m2_loss_ce: 0.5146  m2_loss_mask: 0.1756  m2_loss_dice: 1.229  m2_loss_ce_0: 0.5753  m2_loss_mask_0: 0.2069  m2_loss_dice_0: 1.446  m2_loss_ce_1: 0.6681  m2_loss_mask_1: 0.1873  m2_loss_dice_1: 1.298  m2_loss_ce_2: 0.6041  m2_loss_mask_2: 0.1774  m2_loss_dice_2: 1.272  m2_loss_ce_3: 0.5796  m2_loss_mask_3: 0.1766  m2_loss_dice_3: 1.23  m2_loss_ce_4: 0.5319  m2_loss_mask_4: 0.1741  m2_loss_dice_4: 1.233  m2_loss_ce_5: 0.5427  m2_loss_mask_5: 0.1721  m2_loss_dice_5: 1.24  m2_loss_ce_6: 0.5132  m2_loss_mask_6: 0.1757  m2_loss_dice_6: 1.234  m2_loss_ce_7: 0.5141  m2_loss_mask_7: 0.1757  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.5092  m2_loss_mask_8: 0.1759  m2_loss_dice_8: 1.235  com_loss_ce: 1.771  com_loss_mask: 0.6924  com_loss_dice: 0.971    time: 1.4290  last_time: 1.4860  data_time: 0.0505  last_data_time: 0.0427   lr: 0.0001  max_mem: 34883M
[09/08 18:23:14] d2.utils.events INFO:  eta: 0:18:59  iter: 199  total_loss: 44.9  m1_loss_ce: 0.5133  m1_loss_mask: 0.1634  m1_loss_dice: 1.271  m1_loss_ce_0: 0.566  m1_loss_mask_0: 0.1881  m1_loss_dice_0: 1.478  m1_loss_ce_1: 0.6613  m1_loss_mask_1: 0.1772  m1_loss_dice_1: 1.408  m1_loss_ce_2: 0.6157  m1_loss_mask_2: 0.1646  m1_loss_dice_2: 1.332  m1_loss_ce_3: 0.5648  m1_loss_mask_3: 0.172  m1_loss_dice_3: 1.286  m1_loss_ce_4: 0.5404  m1_loss_mask_4: 0.169  m1_loss_dice_4: 1.275  m1_loss_ce_5: 0.5259  m1_loss_mask_5: 0.1625  m1_loss_dice_5: 1.273  m1_loss_ce_6: 0.4883  m1_loss_mask_6: 0.1643  m1_loss_dice_6: 1.258  m1_loss_ce_7: 0.5039  m1_loss_mask_7: 0.1648  m1_loss_dice_7: 1.262  m1_loss_ce_8: 0.5074  m1_loss_mask_8: 0.1654  m1_loss_dice_8: 1.252  m2_loss_ce: 0.5386  m2_loss_mask: 0.1674  m2_loss_dice: 1.264  m2_loss_ce_0: 0.5919  m2_loss_mask_0: 0.195  m2_loss_dice_0: 1.55  m2_loss_ce_1: 0.6948  m2_loss_mask_1: 0.1748  m2_loss_dice_1: 1.406  m2_loss_ce_2: 0.6185  m2_loss_mask_2: 0.17  m2_loss_dice_2: 1.379  m2_loss_ce_3: 0.5546  m2_loss_mask_3: 0.1706  m2_loss_dice_3: 1.295  m2_loss_ce_4: 0.5494  m2_loss_mask_4: 0.1659  m2_loss_dice_4: 1.298  m2_loss_ce_5: 0.5583  m2_loss_mask_5: 0.1648  m2_loss_dice_5: 1.276  m2_loss_ce_6: 0.5328  m2_loss_mask_6: 0.1686  m2_loss_dice_6: 1.258  m2_loss_ce_7: 0.531  m2_loss_mask_7: 0.1656  m2_loss_dice_7: 1.263  m2_loss_ce_8: 0.5036  m2_loss_mask_8: 0.1644  m2_loss_dice_8: 1.273  com_loss_ce: 1.793  com_loss_mask: 0.6924  com_loss_dice: 0.9749    time: 1.4332  last_time: 1.4129  data_time: 0.0602  last_data_time: 0.0541   lr: 0.0001  max_mem: 34883M
[09/08 18:23:43] d2.utils.events INFO:  eta: 0:18:31  iter: 219  total_loss: 45.49  m1_loss_ce: 0.4727  m1_loss_mask: 0.1634  m1_loss_dice: 1.26  m1_loss_ce_0: 0.5817  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.501  m1_loss_ce_1: 0.6421  m1_loss_mask_1: 0.1775  m1_loss_dice_1: 1.428  m1_loss_ce_2: 0.6024  m1_loss_mask_2: 0.1708  m1_loss_dice_2: 1.362  m1_loss_ce_3: 0.5417  m1_loss_mask_3: 0.1702  m1_loss_dice_3: 1.318  m1_loss_ce_4: 0.4883  m1_loss_mask_4: 0.1673  m1_loss_dice_4: 1.278  m1_loss_ce_5: 0.4944  m1_loss_mask_5: 0.1672  m1_loss_dice_5: 1.306  m1_loss_ce_6: 0.4612  m1_loss_mask_6: 0.1661  m1_loss_dice_6: 1.27  m1_loss_ce_7: 0.4721  m1_loss_mask_7: 0.1644  m1_loss_dice_7: 1.284  m1_loss_ce_8: 0.4761  m1_loss_mask_8: 0.167  m1_loss_dice_8: 1.281  m2_loss_ce: 0.4934  m2_loss_mask: 0.1722  m2_loss_dice: 1.297  m2_loss_ce_0: 0.5781  m2_loss_mask_0: 0.2136  m2_loss_dice_0: 1.571  m2_loss_ce_1: 0.6664  m2_loss_mask_1: 0.1854  m2_loss_dice_1: 1.421  m2_loss_ce_2: 0.608  m2_loss_mask_2: 0.1689  m2_loss_dice_2: 1.33  m2_loss_ce_3: 0.572  m2_loss_mask_3: 0.1701  m2_loss_dice_3: 1.309  m2_loss_ce_4: 0.5735  m2_loss_mask_4: 0.1688  m2_loss_dice_4: 1.276  m2_loss_ce_5: 0.5417  m2_loss_mask_5: 0.1694  m2_loss_dice_5: 1.323  m2_loss_ce_6: 0.53  m2_loss_mask_6: 0.1697  m2_loss_dice_6: 1.288  m2_loss_ce_7: 0.5019  m2_loss_mask_7: 0.1692  m2_loss_dice_7: 1.31  m2_loss_ce_8: 0.5229  m2_loss_mask_8: 0.1718  m2_loss_dice_8: 1.304  com_loss_ce: 1.803  com_loss_mask: 0.6923  com_loss_dice: 0.974    time: 1.4349  last_time: 1.4258  data_time: 0.0573  last_data_time: 0.0857   lr: 0.0001  max_mem: 34883M
[09/08 18:24:12] d2.utils.events INFO:  eta: 0:18:04  iter: 239  total_loss: 43.72  m1_loss_ce: 0.5331  m1_loss_mask: 0.1678  m1_loss_dice: 1.172  m1_loss_ce_0: 0.5529  m1_loss_mask_0: 0.189  m1_loss_dice_0: 1.426  m1_loss_ce_1: 0.667  m1_loss_mask_1: 0.1797  m1_loss_dice_1: 1.354  m1_loss_ce_2: 0.6258  m1_loss_mask_2: 0.1693  m1_loss_dice_2: 1.232  m1_loss_ce_3: 0.5608  m1_loss_mask_3: 0.1699  m1_loss_dice_3: 1.226  m1_loss_ce_4: 0.5421  m1_loss_mask_4: 0.1715  m1_loss_dice_4: 1.242  m1_loss_ce_5: 0.4972  m1_loss_mask_5: 0.1671  m1_loss_dice_5: 1.208  m1_loss_ce_6: 0.4865  m1_loss_mask_6: 0.1692  m1_loss_dice_6: 1.195  m1_loss_ce_7: 0.4892  m1_loss_mask_7: 0.1695  m1_loss_dice_7: 1.208  m1_loss_ce_8: 0.512  m1_loss_mask_8: 0.1716  m1_loss_dice_8: 1.209  m2_loss_ce: 0.5381  m2_loss_mask: 0.1604  m2_loss_dice: 1.195  m2_loss_ce_0: 0.5896  m2_loss_mask_0: 0.1944  m2_loss_dice_0: 1.459  m2_loss_ce_1: 0.7023  m2_loss_mask_1: 0.1772  m2_loss_dice_1: 1.321  m2_loss_ce_2: 0.6435  m2_loss_mask_2: 0.1624  m2_loss_dice_2: 1.266  m2_loss_ce_3: 0.6047  m2_loss_mask_3: 0.1663  m2_loss_dice_3: 1.197  m2_loss_ce_4: 0.5841  m2_loss_mask_4: 0.1631  m2_loss_dice_4: 1.226  m2_loss_ce_5: 0.5771  m2_loss_mask_5: 0.1604  m2_loss_dice_5: 1.207  m2_loss_ce_6: 0.5491  m2_loss_mask_6: 0.1601  m2_loss_dice_6: 1.228  m2_loss_ce_7: 0.5672  m2_loss_mask_7: 0.1618  m2_loss_dice_7: 1.208  m2_loss_ce_8: 0.5393  m2_loss_mask_8: 0.1612  m2_loss_dice_8: 1.221  com_loss_ce: 1.793  com_loss_mask: 0.6923  com_loss_dice: 0.9706    time: 1.4346  last_time: 1.4403  data_time: 0.0586  last_data_time: 0.0562   lr: 0.0001  max_mem: 34883M
[09/08 18:24:41] d2.utils.events INFO:  eta: 0:17:34  iter: 259  total_loss: 42.19  m1_loss_ce: 0.5029  m1_loss_mask: 0.154  m1_loss_dice: 1.188  m1_loss_ce_0: 0.5436  m1_loss_mask_0: 0.1777  m1_loss_dice_0: 1.364  m1_loss_ce_1: 0.6103  m1_loss_mask_1: 0.1676  m1_loss_dice_1: 1.34  m1_loss_ce_2: 0.5307  m1_loss_mask_2: 0.1597  m1_loss_dice_2: 1.218  m1_loss_ce_3: 0.4789  m1_loss_mask_3: 0.1585  m1_loss_dice_3: 1.228  m1_loss_ce_4: 0.4579  m1_loss_mask_4: 0.1579  m1_loss_dice_4: 1.226  m1_loss_ce_5: 0.4655  m1_loss_mask_5: 0.1549  m1_loss_dice_5: 1.207  m1_loss_ce_6: 0.4405  m1_loss_mask_6: 0.1573  m1_loss_dice_6: 1.173  m1_loss_ce_7: 0.4697  m1_loss_mask_7: 0.156  m1_loss_dice_7: 1.195  m1_loss_ce_8: 0.4358  m1_loss_mask_8: 0.159  m1_loss_dice_8: 1.191  m2_loss_ce: 0.5074  m2_loss_mask: 0.1629  m2_loss_dice: 1.159  m2_loss_ce_0: 0.562  m2_loss_mask_0: 0.1914  m2_loss_dice_0: 1.454  m2_loss_ce_1: 0.6623  m2_loss_mask_1: 0.1729  m2_loss_dice_1: 1.289  m2_loss_ce_2: 0.5973  m2_loss_mask_2: 0.165  m2_loss_dice_2: 1.261  m2_loss_ce_3: 0.5477  m2_loss_mask_3: 0.1632  m2_loss_dice_3: 1.194  m2_loss_ce_4: 0.5318  m2_loss_mask_4: 0.1605  m2_loss_dice_4: 1.189  m2_loss_ce_5: 0.4939  m2_loss_mask_5: 0.1612  m2_loss_dice_5: 1.208  m2_loss_ce_6: 0.4882  m2_loss_mask_6: 0.1641  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.4973  m2_loss_mask_7: 0.1633  m2_loss_dice_7: 1.176  m2_loss_ce_8: 0.5212  m2_loss_mask_8: 0.1632  m2_loss_dice_8: 1.147  com_loss_ce: 1.781  com_loss_mask: 0.6924  com_loss_dice: 0.9702    time: 1.4336  last_time: 1.4458  data_time: 0.0532  last_data_time: 0.0405   lr: 0.0001  max_mem: 34883M
[09/08 18:25:09] d2.utils.events INFO:  eta: 0:17:06  iter: 279  total_loss: 44.58  m1_loss_ce: 0.5109  m1_loss_mask: 0.1703  m1_loss_dice: 1.217  m1_loss_ce_0: 0.5992  m1_loss_mask_0: 0.2067  m1_loss_dice_0: 1.444  m1_loss_ce_1: 0.6351  m1_loss_mask_1: 0.1867  m1_loss_dice_1: 1.414  m1_loss_ce_2: 0.6351  m1_loss_mask_2: 0.1762  m1_loss_dice_2: 1.295  m1_loss_ce_3: 0.5422  m1_loss_mask_3: 0.1757  m1_loss_dice_3: 1.249  m1_loss_ce_4: 0.5335  m1_loss_mask_4: 0.1687  m1_loss_dice_4: 1.226  m1_loss_ce_5: 0.5174  m1_loss_mask_5: 0.1716  m1_loss_dice_5: 1.253  m1_loss_ce_6: 0.4896  m1_loss_mask_6: 0.1712  m1_loss_dice_6: 1.247  m1_loss_ce_7: 0.5323  m1_loss_mask_7: 0.1742  m1_loss_dice_7: 1.239  m1_loss_ce_8: 0.4929  m1_loss_mask_8: 0.1706  m1_loss_dice_8: 1.222  m2_loss_ce: 0.5419  m2_loss_mask: 0.1719  m2_loss_dice: 1.208  m2_loss_ce_0: 0.6174  m2_loss_mask_0: 0.2038  m2_loss_dice_0: 1.478  m2_loss_ce_1: 0.7222  m2_loss_mask_1: 0.1837  m2_loss_dice_1: 1.305  m2_loss_ce_2: 0.6206  m2_loss_mask_2: 0.1724  m2_loss_dice_2: 1.263  m2_loss_ce_3: 0.5794  m2_loss_mask_3: 0.1721  m2_loss_dice_3: 1.245  m2_loss_ce_4: 0.6002  m2_loss_mask_4: 0.1714  m2_loss_dice_4: 1.252  m2_loss_ce_5: 0.5596  m2_loss_mask_5: 0.171  m2_loss_dice_5: 1.221  m2_loss_ce_6: 0.5616  m2_loss_mask_6: 0.171  m2_loss_dice_6: 1.22  m2_loss_ce_7: 0.5526  m2_loss_mask_7: 0.1689  m2_loss_dice_7: 1.217  m2_loss_ce_8: 0.5424  m2_loss_mask_8: 0.1695  m2_loss_dice_8: 1.243  com_loss_ce: 1.808  com_loss_mask: 0.6923  com_loss_dice: 0.9723    time: 1.4334  last_time: 1.3313  data_time: 0.0525  last_data_time: 0.0373   lr: 0.0001  max_mem: 36328M
[09/08 18:25:38] d2.utils.events INFO:  eta: 0:16:37  iter: 299  total_loss: 42.66  m1_loss_ce: 0.4855  m1_loss_mask: 0.1657  m1_loss_dice: 1.185  m1_loss_ce_0: 0.5806  m1_loss_mask_0: 0.1928  m1_loss_dice_0: 1.382  m1_loss_ce_1: 0.6503  m1_loss_mask_1: 0.1737  m1_loss_dice_1: 1.293  m1_loss_ce_2: 0.5797  m1_loss_mask_2: 0.1692  m1_loss_dice_2: 1.25  m1_loss_ce_3: 0.5282  m1_loss_mask_3: 0.1668  m1_loss_dice_3: 1.201  m1_loss_ce_4: 0.4735  m1_loss_mask_4: 0.1675  m1_loss_dice_4: 1.233  m1_loss_ce_5: 0.5003  m1_loss_mask_5: 0.1662  m1_loss_dice_5: 1.23  m1_loss_ce_6: 0.4816  m1_loss_mask_6: 0.1652  m1_loss_dice_6: 1.178  m1_loss_ce_7: 0.4717  m1_loss_mask_7: 0.1667  m1_loss_dice_7: 1.184  m1_loss_ce_8: 0.4735  m1_loss_mask_8: 0.1644  m1_loss_dice_8: 1.162  m2_loss_ce: 0.5381  m2_loss_mask: 0.1619  m2_loss_dice: 1.181  m2_loss_ce_0: 0.5867  m2_loss_mask_0: 0.1944  m2_loss_dice_0: 1.405  m2_loss_ce_1: 0.7121  m2_loss_mask_1: 0.17  m2_loss_dice_1: 1.265  m2_loss_ce_2: 0.6156  m2_loss_mask_2: 0.1612  m2_loss_dice_2: 1.257  m2_loss_ce_3: 0.5494  m2_loss_mask_3: 0.1639  m2_loss_dice_3: 1.215  m2_loss_ce_4: 0.564  m2_loss_mask_4: 0.1675  m2_loss_dice_4: 1.167  m2_loss_ce_5: 0.544  m2_loss_mask_5: 0.1643  m2_loss_dice_5: 1.188  m2_loss_ce_6: 0.5464  m2_loss_mask_6: 0.164  m2_loss_dice_6: 1.156  m2_loss_ce_7: 0.5029  m2_loss_mask_7: 0.1636  m2_loss_dice_7: 1.201  m2_loss_ce_8: 0.526  m2_loss_mask_8: 0.1633  m2_loss_dice_8: 1.155  com_loss_ce: 1.796  com_loss_mask: 0.6924  com_loss_dice: 0.9719    time: 1.4324  last_time: 1.3887  data_time: 0.0501  last_data_time: 0.0673   lr: 0.0001  max_mem: 36328M
[09/08 18:26:07] d2.utils.events INFO:  eta: 0:16:08  iter: 319  total_loss: 43.29  m1_loss_ce: 0.4757  m1_loss_mask: 0.1784  m1_loss_dice: 1.192  m1_loss_ce_0: 0.5416  m1_loss_mask_0: 0.199  m1_loss_dice_0: 1.411  m1_loss_ce_1: 0.6381  m1_loss_mask_1: 0.1855  m1_loss_dice_1: 1.331  m1_loss_ce_2: 0.5631  m1_loss_mask_2: 0.1804  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.4994  m1_loss_mask_3: 0.1824  m1_loss_dice_3: 1.221  m1_loss_ce_4: 0.4765  m1_loss_mask_4: 0.1826  m1_loss_dice_4: 1.197  m1_loss_ce_5: 0.4858  m1_loss_mask_5: 0.1783  m1_loss_dice_5: 1.211  m1_loss_ce_6: 0.4656  m1_loss_mask_6: 0.1769  m1_loss_dice_6: 1.191  m1_loss_ce_7: 0.4293  m1_loss_mask_7: 0.1774  m1_loss_dice_7: 1.183  m1_loss_ce_8: 0.4759  m1_loss_mask_8: 0.1795  m1_loss_dice_8: 1.164  m2_loss_ce: 0.5452  m2_loss_mask: 0.1704  m2_loss_dice: 1.18  m2_loss_ce_0: 0.5719  m2_loss_mask_0: 0.2064  m2_loss_dice_0: 1.415  m2_loss_ce_1: 0.6952  m2_loss_mask_1: 0.1989  m2_loss_dice_1: 1.292  m2_loss_ce_2: 0.6168  m2_loss_mask_2: 0.1833  m2_loss_dice_2: 1.259  m2_loss_ce_3: 0.5635  m2_loss_mask_3: 0.1851  m2_loss_dice_3: 1.172  m2_loss_ce_4: 0.5431  m2_loss_mask_4: 0.1839  m2_loss_dice_4: 1.204  m2_loss_ce_5: 0.5295  m2_loss_mask_5: 0.1724  m2_loss_dice_5: 1.196  m2_loss_ce_6: 0.5402  m2_loss_mask_6: 0.1737  m2_loss_dice_6: 1.189  m2_loss_ce_7: 0.5355  m2_loss_mask_7: 0.1732  m2_loss_dice_7: 1.152  m2_loss_ce_8: 0.5171  m2_loss_mask_8: 0.17  m2_loss_dice_8: 1.195  com_loss_ce: 1.816  com_loss_mask: 0.6923  com_loss_dice: 0.9718    time: 1.4324  last_time: 1.4642  data_time: 0.0510  last_data_time: 0.0396   lr: 0.0001  max_mem: 36328M
[09/08 18:26:35] d2.utils.events INFO:  eta: 0:15:41  iter: 339  total_loss: 41.26  m1_loss_ce: 0.4588  m1_loss_mask: 0.1654  m1_loss_dice: 1.113  m1_loss_ce_0: 0.5367  m1_loss_mask_0: 0.1941  m1_loss_dice_0: 1.326  m1_loss_ce_1: 0.6007  m1_loss_mask_1: 0.1806  m1_loss_dice_1: 1.242  m1_loss_ce_2: 0.5599  m1_loss_mask_2: 0.1758  m1_loss_dice_2: 1.208  m1_loss_ce_3: 0.5038  m1_loss_mask_3: 0.1689  m1_loss_dice_3: 1.131  m1_loss_ce_4: 0.4622  m1_loss_mask_4: 0.1703  m1_loss_dice_4: 1.128  m1_loss_ce_5: 0.4427  m1_loss_mask_5: 0.1688  m1_loss_dice_5: 1.144  m1_loss_ce_6: 0.4347  m1_loss_mask_6: 0.1657  m1_loss_dice_6: 1.149  m1_loss_ce_7: 0.4599  m1_loss_mask_7: 0.1649  m1_loss_dice_7: 1.11  m1_loss_ce_8: 0.4438  m1_loss_mask_8: 0.1659  m1_loss_dice_8: 1.099  m2_loss_ce: 0.4697  m2_loss_mask: 0.1626  m2_loss_dice: 1.142  m2_loss_ce_0: 0.5386  m2_loss_mask_0: 0.1958  m2_loss_dice_0: 1.382  m2_loss_ce_1: 0.6284  m2_loss_mask_1: 0.176  m2_loss_dice_1: 1.233  m2_loss_ce_2: 0.5597  m2_loss_mask_2: 0.1654  m2_loss_dice_2: 1.218  m2_loss_ce_3: 0.5318  m2_loss_mask_3: 0.1674  m2_loss_dice_3: 1.155  m2_loss_ce_4: 0.4773  m2_loss_mask_4: 0.1687  m2_loss_dice_4: 1.149  m2_loss_ce_5: 0.487  m2_loss_mask_5: 0.1642  m2_loss_dice_5: 1.188  m2_loss_ce_6: 0.4915  m2_loss_mask_6: 0.167  m2_loss_dice_6: 1.156  m2_loss_ce_7: 0.4519  m2_loss_mask_7: 0.1638  m2_loss_dice_7: 1.136  m2_loss_ce_8: 0.4574  m2_loss_mask_8: 0.162  m2_loss_dice_8: 1.186  com_loss_ce: 1.781  com_loss_mask: 0.6924  com_loss_dice: 0.9702    time: 1.4327  last_time: 1.4306  data_time: 0.0509  last_data_time: 0.0371   lr: 0.0001  max_mem: 36328M
[09/08 18:27:04] d2.utils.events INFO:  eta: 0:15:12  iter: 359  total_loss: 44.43  m1_loss_ce: 0.5295  m1_loss_mask: 0.1725  m1_loss_dice: 1.26  m1_loss_ce_0: 0.6029  m1_loss_mask_0: 0.1901  m1_loss_dice_0: 1.391  m1_loss_ce_1: 0.647  m1_loss_mask_1: 0.188  m1_loss_dice_1: 1.375  m1_loss_ce_2: 0.5671  m1_loss_mask_2: 0.1771  m1_loss_dice_2: 1.325  m1_loss_ce_3: 0.5049  m1_loss_mask_3: 0.1762  m1_loss_dice_3: 1.248  m1_loss_ce_4: 0.4949  m1_loss_mask_4: 0.1748  m1_loss_dice_4: 1.282  m1_loss_ce_5: 0.4824  m1_loss_mask_5: 0.1755  m1_loss_dice_5: 1.306  m1_loss_ce_6: 0.4855  m1_loss_mask_6: 0.1726  m1_loss_dice_6: 1.263  m1_loss_ce_7: 0.4792  m1_loss_mask_7: 0.1727  m1_loss_dice_7: 1.212  m1_loss_ce_8: 0.5207  m1_loss_mask_8: 0.1691  m1_loss_dice_8: 1.224  m2_loss_ce: 0.5218  m2_loss_mask: 0.1722  m2_loss_dice: 1.223  m2_loss_ce_0: 0.5976  m2_loss_mask_0: 0.1972  m2_loss_dice_0: 1.501  m2_loss_ce_1: 0.695  m2_loss_mask_1: 0.1822  m2_loss_dice_1: 1.322  m2_loss_ce_2: 0.6077  m2_loss_mask_2: 0.1707  m2_loss_dice_2: 1.288  m2_loss_ce_3: 0.5508  m2_loss_mask_3: 0.1746  m2_loss_dice_3: 1.267  m2_loss_ce_4: 0.5187  m2_loss_mask_4: 0.174  m2_loss_dice_4: 1.26  m2_loss_ce_5: 0.5108  m2_loss_mask_5: 0.1715  m2_loss_dice_5: 1.24  m2_loss_ce_6: 0.501  m2_loss_mask_6: 0.1739  m2_loss_dice_6: 1.242  m2_loss_ce_7: 0.5418  m2_loss_mask_7: 0.1717  m2_loss_dice_7: 1.263  m2_loss_ce_8: 0.5286  m2_loss_mask_8: 0.1739  m2_loss_dice_8: 1.208  com_loss_ce: 1.782  com_loss_mask: 0.6924  com_loss_dice: 0.9709    time: 1.4319  last_time: 1.4159  data_time: 0.0492  last_data_time: 0.0752   lr: 0.0001  max_mem: 36328M
[09/08 18:27:33] d2.utils.events INFO:  eta: 0:14:44  iter: 379  total_loss: 44.19  m1_loss_ce: 0.5145  m1_loss_mask: 0.1618  m1_loss_dice: 1.254  m1_loss_ce_0: 0.5468  m1_loss_mask_0: 0.1921  m1_loss_dice_0: 1.462  m1_loss_ce_1: 0.6718  m1_loss_mask_1: 0.1769  m1_loss_dice_1: 1.348  m1_loss_ce_2: 0.5887  m1_loss_mask_2: 0.1687  m1_loss_dice_2: 1.33  m1_loss_ce_3: 0.5367  m1_loss_mask_3: 0.1645  m1_loss_dice_3: 1.281  m1_loss_ce_4: 0.5163  m1_loss_mask_4: 0.1639  m1_loss_dice_4: 1.244  m1_loss_ce_5: 0.5057  m1_loss_mask_5: 0.163  m1_loss_dice_5: 1.278  m1_loss_ce_6: 0.5118  m1_loss_mask_6: 0.1632  m1_loss_dice_6: 1.236  m1_loss_ce_7: 0.4975  m1_loss_mask_7: 0.1629  m1_loss_dice_7: 1.248  m1_loss_ce_8: 0.486  m1_loss_mask_8: 0.1612  m1_loss_dice_8: 1.253  m2_loss_ce: 0.5343  m2_loss_mask: 0.1653  m2_loss_dice: 1.255  m2_loss_ce_0: 0.6147  m2_loss_mask_0: 0.195  m2_loss_dice_0: 1.476  m2_loss_ce_1: 0.7049  m2_loss_mask_1: 0.1746  m2_loss_dice_1: 1.384  m2_loss_ce_2: 0.6166  m2_loss_mask_2: 0.1667  m2_loss_dice_2: 1.297  m2_loss_ce_3: 0.5718  m2_loss_mask_3: 0.166  m2_loss_dice_3: 1.284  m2_loss_ce_4: 0.57  m2_loss_mask_4: 0.1658  m2_loss_dice_4: 1.251  m2_loss_ce_5: 0.5575  m2_loss_mask_5: 0.1638  m2_loss_dice_5: 1.249  m2_loss_ce_6: 0.5319  m2_loss_mask_6: 0.1646  m2_loss_dice_6: 1.258  m2_loss_ce_7: 0.519  m2_loss_mask_7: 0.1622  m2_loss_dice_7: 1.275  m2_loss_ce_8: 0.5281  m2_loss_mask_8: 0.1637  m2_loss_dice_8: 1.283  com_loss_ce: 1.789  com_loss_mask: 0.6923  com_loss_dice: 0.9719    time: 1.4316  last_time: 1.3709  data_time: 0.0498  last_data_time: 0.0764   lr: 0.0001  max_mem: 36328M
[09/08 18:28:01] d2.utils.events INFO:  eta: 0:14:16  iter: 399  total_loss: 42.31  m1_loss_ce: 0.4338  m1_loss_mask: 0.1649  m1_loss_dice: 1.211  m1_loss_ce_0: 0.5296  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.398  m1_loss_ce_1: 0.5725  m1_loss_mask_1: 0.1746  m1_loss_dice_1: 1.35  m1_loss_ce_2: 0.5028  m1_loss_mask_2: 0.1665  m1_loss_dice_2: 1.281  m1_loss_ce_3: 0.4741  m1_loss_mask_3: 0.1642  m1_loss_dice_3: 1.22  m1_loss_ce_4: 0.4205  m1_loss_mask_4: 0.1631  m1_loss_dice_4: 1.241  m1_loss_ce_5: 0.4458  m1_loss_mask_5: 0.1631  m1_loss_dice_5: 1.21  m1_loss_ce_6: 0.4132  m1_loss_mask_6: 0.1661  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.4203  m1_loss_mask_7: 0.1661  m1_loss_dice_7: 1.207  m1_loss_ce_8: 0.4235  m1_loss_mask_8: 0.1635  m1_loss_dice_8: 1.197  m2_loss_ce: 0.4993  m2_loss_mask: 0.1656  m2_loss_dice: 1.242  m2_loss_ce_0: 0.5709  m2_loss_mask_0: 0.1914  m2_loss_dice_0: 1.511  m2_loss_ce_1: 0.6529  m2_loss_mask_1: 0.1738  m2_loss_dice_1: 1.338  m2_loss_ce_2: 0.622  m2_loss_mask_2: 0.1652  m2_loss_dice_2: 1.289  m2_loss_ce_3: 0.5837  m2_loss_mask_3: 0.168  m2_loss_dice_3: 1.274  m2_loss_ce_4: 0.5353  m2_loss_mask_4: 0.1649  m2_loss_dice_4: 1.236  m2_loss_ce_5: 0.5428  m2_loss_mask_5: 0.1638  m2_loss_dice_5: 1.24  m2_loss_ce_6: 0.5437  m2_loss_mask_6: 0.1653  m2_loss_dice_6: 1.213  m2_loss_ce_7: 0.5249  m2_loss_mask_7: 0.1654  m2_loss_dice_7: 1.187  m2_loss_ce_8: 0.5179  m2_loss_mask_8: 0.164  m2_loss_dice_8: 1.213  com_loss_ce: 1.782  com_loss_mask: 0.6924  com_loss_dice: 0.973    time: 1.4319  last_time: 1.3905  data_time: 0.0527  last_data_time: 0.0443   lr: 0.0001  max_mem: 36328M
[09/08 18:28:30] d2.utils.events INFO:  eta: 0:13:47  iter: 419  total_loss: 42.36  m1_loss_ce: 0.4905  m1_loss_mask: 0.1724  m1_loss_dice: 1.144  m1_loss_ce_0: 0.5429  m1_loss_mask_0: 0.1941  m1_loss_dice_0: 1.388  m1_loss_ce_1: 0.5917  m1_loss_mask_1: 0.1859  m1_loss_dice_1: 1.307  m1_loss_ce_2: 0.5545  m1_loss_mask_2: 0.1789  m1_loss_dice_2: 1.294  m1_loss_ce_3: 0.4984  m1_loss_mask_3: 0.1772  m1_loss_dice_3: 1.181  m1_loss_ce_4: 0.4644  m1_loss_mask_4: 0.1762  m1_loss_dice_4: 1.175  m1_loss_ce_5: 0.4522  m1_loss_mask_5: 0.1779  m1_loss_dice_5: 1.244  m1_loss_ce_6: 0.4143  m1_loss_mask_6: 0.1727  m1_loss_dice_6: 1.205  m1_loss_ce_7: 0.442  m1_loss_mask_7: 0.1756  m1_loss_dice_7: 1.141  m1_loss_ce_8: 0.4521  m1_loss_mask_8: 0.1732  m1_loss_dice_8: 1.186  m2_loss_ce: 0.4971  m2_loss_mask: 0.1709  m2_loss_dice: 1.209  m2_loss_ce_0: 0.5915  m2_loss_mask_0: 0.2023  m2_loss_dice_0: 1.48  m2_loss_ce_1: 0.6696  m2_loss_mask_1: 0.1864  m2_loss_dice_1: 1.301  m2_loss_ce_2: 0.6086  m2_loss_mask_2: 0.1743  m2_loss_dice_2: 1.287  m2_loss_ce_3: 0.5847  m2_loss_mask_3: 0.1719  m2_loss_dice_3: 1.228  m2_loss_ce_4: 0.5253  m2_loss_mask_4: 0.1719  m2_loss_dice_4: 1.212  m2_loss_ce_5: 0.5365  m2_loss_mask_5: 0.1711  m2_loss_dice_5: 1.232  m2_loss_ce_6: 0.522  m2_loss_mask_6: 0.1732  m2_loss_dice_6: 1.24  m2_loss_ce_7: 0.5059  m2_loss_mask_7: 0.1718  m2_loss_dice_7: 1.221  m2_loss_ce_8: 0.5047  m2_loss_mask_8: 0.1728  m2_loss_dice_8: 1.208  com_loss_ce: 1.807  com_loss_mask: 0.6924  com_loss_dice: 0.9732    time: 1.4313  last_time: 1.4616  data_time: 0.0484  last_data_time: 0.0507   lr: 0.0001  max_mem: 36328M
[09/08 18:28:59] d2.utils.events INFO:  eta: 0:13:19  iter: 439  total_loss: 44.77  m1_loss_ce: 0.5162  m1_loss_mask: 0.1672  m1_loss_dice: 1.22  m1_loss_ce_0: 0.5419  m1_loss_mask_0: 0.1906  m1_loss_dice_0: 1.519  m1_loss_ce_1: 0.6353  m1_loss_mask_1: 0.1778  m1_loss_dice_1: 1.413  m1_loss_ce_2: 0.5714  m1_loss_mask_2: 0.1644  m1_loss_dice_2: 1.315  m1_loss_ce_3: 0.5347  m1_loss_mask_3: 0.1663  m1_loss_dice_3: 1.289  m1_loss_ce_4: 0.506  m1_loss_mask_4: 0.165  m1_loss_dice_4: 1.278  m1_loss_ce_5: 0.4911  m1_loss_mask_5: 0.1697  m1_loss_dice_5: 1.292  m1_loss_ce_6: 0.4919  m1_loss_mask_6: 0.1681  m1_loss_dice_6: 1.268  m1_loss_ce_7: 0.4747  m1_loss_mask_7: 0.1694  m1_loss_dice_7: 1.299  m1_loss_ce_8: 0.4754  m1_loss_mask_8: 0.1699  m1_loss_dice_8: 1.215  m2_loss_ce: 0.5577  m2_loss_mask: 0.1659  m2_loss_dice: 1.248  m2_loss_ce_0: 0.5976  m2_loss_mask_0: 0.195  m2_loss_dice_0: 1.51  m2_loss_ce_1: 0.7175  m2_loss_mask_1: 0.1801  m2_loss_dice_1: 1.389  m2_loss_ce_2: 0.6627  m2_loss_mask_2: 0.1751  m2_loss_dice_2: 1.337  m2_loss_ce_3: 0.5787  m2_loss_mask_3: 0.1704  m2_loss_dice_3: 1.292  m2_loss_ce_4: 0.58  m2_loss_mask_4: 0.1737  m2_loss_dice_4: 1.276  m2_loss_ce_5: 0.5933  m2_loss_mask_5: 0.174  m2_loss_dice_5: 1.276  m2_loss_ce_6: 0.5808  m2_loss_mask_6: 0.1728  m2_loss_dice_6: 1.269  m2_loss_ce_7: 0.5801  m2_loss_mask_7: 0.1677  m2_loss_dice_7: 1.249  m2_loss_ce_8: 0.5585  m2_loss_mask_8: 0.1662  m2_loss_dice_8: 1.259  com_loss_ce: 1.831  com_loss_mask: 0.6924  com_loss_dice: 0.9732    time: 1.4326  last_time: 1.4498  data_time: 0.0542  last_data_time: 0.1031   lr: 0.0001  max_mem: 36328M
[09/08 18:29:28] d2.utils.events INFO:  eta: 0:12:50  iter: 459  total_loss: 41.98  m1_loss_ce: 0.4631  m1_loss_mask: 0.1619  m1_loss_dice: 1.187  m1_loss_ce_0: 0.5217  m1_loss_mask_0: 0.1813  m1_loss_dice_0: 1.382  m1_loss_ce_1: 0.6094  m1_loss_mask_1: 0.1681  m1_loss_dice_1: 1.284  m1_loss_ce_2: 0.5428  m1_loss_mask_2: 0.1662  m1_loss_dice_2: 1.215  m1_loss_ce_3: 0.5025  m1_loss_mask_3: 0.164  m1_loss_dice_3: 1.217  m1_loss_ce_4: 0.468  m1_loss_mask_4: 0.1625  m1_loss_dice_4: 1.194  m1_loss_ce_5: 0.4684  m1_loss_mask_5: 0.1637  m1_loss_dice_5: 1.206  m1_loss_ce_6: 0.449  m1_loss_mask_6: 0.1615  m1_loss_dice_6: 1.198  m1_loss_ce_7: 0.452  m1_loss_mask_7: 0.1615  m1_loss_dice_7: 1.199  m1_loss_ce_8: 0.435  m1_loss_mask_8: 0.1602  m1_loss_dice_8: 1.173  m2_loss_ce: 0.508  m2_loss_mask: 0.1662  m2_loss_dice: 1.185  m2_loss_ce_0: 0.6059  m2_loss_mask_0: 0.195  m2_loss_dice_0: 1.407  m2_loss_ce_1: 0.6902  m2_loss_mask_1: 0.1773  m2_loss_dice_1: 1.3  m2_loss_ce_2: 0.5997  m2_loss_mask_2: 0.1713  m2_loss_dice_2: 1.258  m2_loss_ce_3: 0.5636  m2_loss_mask_3: 0.1702  m2_loss_dice_3: 1.204  m2_loss_ce_4: 0.5459  m2_loss_mask_4: 0.1709  m2_loss_dice_4: 1.201  m2_loss_ce_5: 0.5325  m2_loss_mask_5: 0.1672  m2_loss_dice_5: 1.189  m2_loss_ce_6: 0.5314  m2_loss_mask_6: 0.1705  m2_loss_dice_6: 1.184  m2_loss_ce_7: 0.4982  m2_loss_mask_7: 0.1685  m2_loss_dice_7: 1.153  m2_loss_ce_8: 0.5362  m2_loss_mask_8: 0.1688  m2_loss_dice_8: 1.218  com_loss_ce: 1.802  com_loss_mask: 0.6924  com_loss_dice: 0.9724    time: 1.4326  last_time: 1.5332  data_time: 0.0575  last_data_time: 0.0387   lr: 0.0001  max_mem: 36328M
[09/08 18:29:57] d2.utils.events INFO:  eta: 0:12:22  iter: 479  total_loss: 43.41  m1_loss_ce: 0.5035  m1_loss_mask: 0.169  m1_loss_dice: 1.187  m1_loss_ce_0: 0.5645  m1_loss_mask_0: 0.1952  m1_loss_dice_0: 1.404  m1_loss_ce_1: 0.6582  m1_loss_mask_1: 0.1815  m1_loss_dice_1: 1.3  m1_loss_ce_2: 0.5746  m1_loss_mask_2: 0.1727  m1_loss_dice_2: 1.267  m1_loss_ce_3: 0.5542  m1_loss_mask_3: 0.1731  m1_loss_dice_3: 1.187  m1_loss_ce_4: 0.5162  m1_loss_mask_4: 0.1736  m1_loss_dice_4: 1.203  m1_loss_ce_5: 0.4836  m1_loss_mask_5: 0.1684  m1_loss_dice_5: 1.177  m1_loss_ce_6: 0.4656  m1_loss_mask_6: 0.1677  m1_loss_dice_6: 1.183  m1_loss_ce_7: 0.5032  m1_loss_mask_7: 0.1697  m1_loss_dice_7: 1.179  m1_loss_ce_8: 0.4912  m1_loss_mask_8: 0.1681  m1_loss_dice_8: 1.152  m2_loss_ce: 0.5539  m2_loss_mask: 0.1635  m2_loss_dice: 1.199  m2_loss_ce_0: 0.5662  m2_loss_mask_0: 0.1976  m2_loss_dice_0: 1.48  m2_loss_ce_1: 0.6623  m2_loss_mask_1: 0.1828  m2_loss_dice_1: 1.333  m2_loss_ce_2: 0.6415  m2_loss_mask_2: 0.1699  m2_loss_dice_2: 1.257  m2_loss_ce_3: 0.5589  m2_loss_mask_3: 0.1732  m2_loss_dice_3: 1.234  m2_loss_ce_4: 0.553  m2_loss_mask_4: 0.1709  m2_loss_dice_4: 1.219  m2_loss_ce_5: 0.552  m2_loss_mask_5: 0.1671  m2_loss_dice_5: 1.258  m2_loss_ce_6: 0.5388  m2_loss_mask_6: 0.1673  m2_loss_dice_6: 1.199  m2_loss_ce_7: 0.5526  m2_loss_mask_7: 0.1668  m2_loss_dice_7: 1.171  m2_loss_ce_8: 0.5347  m2_loss_mask_8: 0.1648  m2_loss_dice_8: 1.169  com_loss_ce: 1.79  com_loss_mask: 0.6924  com_loss_dice: 0.9721    time: 1.4323  last_time: 1.4554  data_time: 0.0553  last_data_time: 0.0549   lr: 0.0001  max_mem: 36328M
[09/08 18:30:25] d2.utils.events INFO:  eta: 0:11:53  iter: 499  total_loss: 43.33  m1_loss_ce: 0.4881  m1_loss_mask: 0.1716  m1_loss_dice: 1.207  m1_loss_ce_0: 0.5577  m1_loss_mask_0: 0.1966  m1_loss_dice_0: 1.402  m1_loss_ce_1: 0.6008  m1_loss_mask_1: 0.1839  m1_loss_dice_1: 1.358  m1_loss_ce_2: 0.5852  m1_loss_mask_2: 0.1747  m1_loss_dice_2: 1.257  m1_loss_ce_3: 0.5186  m1_loss_mask_3: 0.1709  m1_loss_dice_3: 1.235  m1_loss_ce_4: 0.5027  m1_loss_mask_4: 0.1743  m1_loss_dice_4: 1.234  m1_loss_ce_5: 0.5116  m1_loss_mask_5: 0.1714  m1_loss_dice_5: 1.256  m1_loss_ce_6: 0.4628  m1_loss_mask_6: 0.172  m1_loss_dice_6: 1.223  m1_loss_ce_7: 0.4814  m1_loss_mask_7: 0.1708  m1_loss_dice_7: 1.232  m1_loss_ce_8: 0.4645  m1_loss_mask_8: 0.1715  m1_loss_dice_8: 1.209  m2_loss_ce: 0.5298  m2_loss_mask: 0.1719  m2_loss_dice: 1.241  m2_loss_ce_0: 0.5663  m2_loss_mask_0: 0.2133  m2_loss_dice_0: 1.477  m2_loss_ce_1: 0.6844  m2_loss_mask_1: 0.1907  m2_loss_dice_1: 1.378  m2_loss_ce_2: 0.6061  m2_loss_mask_2: 0.1819  m2_loss_dice_2: 1.287  m2_loss_ce_3: 0.5697  m2_loss_mask_3: 0.1783  m2_loss_dice_3: 1.269  m2_loss_ce_4: 0.5733  m2_loss_mask_4: 0.178  m2_loss_dice_4: 1.269  m2_loss_ce_5: 0.5637  m2_loss_mask_5: 0.1778  m2_loss_dice_5: 1.258  m2_loss_ce_6: 0.5522  m2_loss_mask_6: 0.1745  m2_loss_dice_6: 1.229  m2_loss_ce_7: 0.536  m2_loss_mask_7: 0.1771  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.4984  m2_loss_mask_8: 0.1714  m2_loss_dice_8: 1.228  com_loss_ce: 1.795  com_loss_mask: 0.6924  com_loss_dice: 0.9738    time: 1.4319  last_time: 1.3997  data_time: 0.0482  last_data_time: 0.0453   lr: 0.0001  max_mem: 36328M
[09/08 18:30:54] d2.utils.events INFO:  eta: 0:11:24  iter: 519  total_loss: 42.98  m1_loss_ce: 0.453  m1_loss_mask: 0.1771  m1_loss_dice: 1.214  m1_loss_ce_0: 0.5701  m1_loss_mask_0: 0.2043  m1_loss_dice_0: 1.407  m1_loss_ce_1: 0.6173  m1_loss_mask_1: 0.1875  m1_loss_dice_1: 1.296  m1_loss_ce_2: 0.5747  m1_loss_mask_2: 0.1823  m1_loss_dice_2: 1.288  m1_loss_ce_3: 0.5303  m1_loss_mask_3: 0.1823  m1_loss_dice_3: 1.245  m1_loss_ce_4: 0.4972  m1_loss_mask_4: 0.1814  m1_loss_dice_4: 1.232  m1_loss_ce_5: 0.4822  m1_loss_mask_5: 0.1776  m1_loss_dice_5: 1.254  m1_loss_ce_6: 0.4517  m1_loss_mask_6: 0.1786  m1_loss_dice_6: 1.245  m1_loss_ce_7: 0.4411  m1_loss_mask_7: 0.1775  m1_loss_dice_7: 1.202  m1_loss_ce_8: 0.4304  m1_loss_mask_8: 0.178  m1_loss_dice_8: 1.231  m2_loss_ce: 0.5282  m2_loss_mask: 0.1827  m2_loss_dice: 1.213  m2_loss_ce_0: 0.5755  m2_loss_mask_0: 0.2094  m2_loss_dice_0: 1.472  m2_loss_ce_1: 0.6659  m2_loss_mask_1: 0.1928  m2_loss_dice_1: 1.339  m2_loss_ce_2: 0.6414  m2_loss_mask_2: 0.1842  m2_loss_dice_2: 1.272  m2_loss_ce_3: 0.5585  m2_loss_mask_3: 0.1842  m2_loss_dice_3: 1.239  m2_loss_ce_4: 0.5356  m2_loss_mask_4: 0.1871  m2_loss_dice_4: 1.206  m2_loss_ce_5: 0.5316  m2_loss_mask_5: 0.1848  m2_loss_dice_5: 1.23  m2_loss_ce_6: 0.5114  m2_loss_mask_6: 0.1851  m2_loss_dice_6: 1.212  m2_loss_ce_7: 0.5172  m2_loss_mask_7: 0.1833  m2_loss_dice_7: 1.192  m2_loss_ce_8: 0.5311  m2_loss_mask_8: 0.1819  m2_loss_dice_8: 1.194  com_loss_ce: 1.771  com_loss_mask: 0.6924  com_loss_dice: 0.9702    time: 1.4313  last_time: 1.5062  data_time: 0.0457  last_data_time: 0.0392   lr: 0.0001  max_mem: 36328M
[09/08 18:31:22] d2.utils.events INFO:  eta: 0:10:56  iter: 539  total_loss: 41.35  m1_loss_ce: 0.4312  m1_loss_mask: 0.1615  m1_loss_dice: 1.21  m1_loss_ce_0: 0.5321  m1_loss_mask_0: 0.1899  m1_loss_dice_0: 1.409  m1_loss_ce_1: 0.5912  m1_loss_mask_1: 0.1777  m1_loss_dice_1: 1.302  m1_loss_ce_2: 0.5445  m1_loss_mask_2: 0.1691  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.4968  m1_loss_mask_3: 0.1665  m1_loss_dice_3: 1.177  m1_loss_ce_4: 0.4391  m1_loss_mask_4: 0.1686  m1_loss_dice_4: 1.212  m1_loss_ce_5: 0.4405  m1_loss_mask_5: 0.1647  m1_loss_dice_5: 1.204  m1_loss_ce_6: 0.4013  m1_loss_mask_6: 0.1637  m1_loss_dice_6: 1.222  m1_loss_ce_7: 0.4466  m1_loss_mask_7: 0.1631  m1_loss_dice_7: 1.236  m1_loss_ce_8: 0.434  m1_loss_mask_8: 0.1623  m1_loss_dice_8: 1.174  m2_loss_ce: 0.5069  m2_loss_mask: 0.164  m2_loss_dice: 1.177  m2_loss_ce_0: 0.5603  m2_loss_mask_0: 0.1967  m2_loss_dice_0: 1.396  m2_loss_ce_1: 0.6471  m2_loss_mask_1: 0.1737  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.5744  m2_loss_mask_2: 0.1667  m2_loss_dice_2: 1.245  m2_loss_ce_3: 0.547  m2_loss_mask_3: 0.165  m2_loss_dice_3: 1.194  m2_loss_ce_4: 0.5303  m2_loss_mask_4: 0.1655  m2_loss_dice_4: 1.191  m2_loss_ce_5: 0.5295  m2_loss_mask_5: 0.1626  m2_loss_dice_5: 1.168  m2_loss_ce_6: 0.5037  m2_loss_mask_6: 0.1648  m2_loss_dice_6: 1.182  m2_loss_ce_7: 0.496  m2_loss_mask_7: 0.1627  m2_loss_dice_7: 1.194  m2_loss_ce_8: 0.4923  m2_loss_mask_8: 0.1647  m2_loss_dice_8: 1.192  com_loss_ce: 1.759  com_loss_mask: 0.6924  com_loss_dice: 0.9715    time: 1.4315  last_time: 1.4150  data_time: 0.0506  last_data_time: 0.0478   lr: 0.0001  max_mem: 36328M
[09/08 18:31:52] d2.utils.events INFO:  eta: 0:10:27  iter: 559  total_loss: 43.28  m1_loss_ce: 0.4837  m1_loss_mask: 0.1548  m1_loss_dice: 1.264  m1_loss_ce_0: 0.5658  m1_loss_mask_0: 0.1794  m1_loss_dice_0: 1.433  m1_loss_ce_1: 0.6119  m1_loss_mask_1: 0.16  m1_loss_dice_1: 1.372  m1_loss_ce_2: 0.549  m1_loss_mask_2: 0.1584  m1_loss_dice_2: 1.293  m1_loss_ce_3: 0.479  m1_loss_mask_3: 0.1575  m1_loss_dice_3: 1.244  m1_loss_ce_4: 0.486  m1_loss_mask_4: 0.1546  m1_loss_dice_4: 1.269  m1_loss_ce_5: 0.4507  m1_loss_mask_5: 0.1564  m1_loss_dice_5: 1.267  m1_loss_ce_6: 0.4418  m1_loss_mask_6: 0.1536  m1_loss_dice_6: 1.213  m1_loss_ce_7: 0.4495  m1_loss_mask_7: 0.154  m1_loss_dice_7: 1.24  m1_loss_ce_8: 0.4624  m1_loss_mask_8: 0.1547  m1_loss_dice_8: 1.227  m2_loss_ce: 0.5078  m2_loss_mask: 0.1584  m2_loss_dice: 1.232  m2_loss_ce_0: 0.5862  m2_loss_mask_0: 0.1925  m2_loss_dice_0: 1.47  m2_loss_ce_1: 0.6382  m2_loss_mask_1: 0.1717  m2_loss_dice_1: 1.339  m2_loss_ce_2: 0.5711  m2_loss_mask_2: 0.163  m2_loss_dice_2: 1.302  m2_loss_ce_3: 0.5609  m2_loss_mask_3: 0.1596  m2_loss_dice_3: 1.252  m2_loss_ce_4: 0.503  m2_loss_mask_4: 0.1601  m2_loss_dice_4: 1.286  m2_loss_ce_5: 0.5185  m2_loss_mask_5: 0.1587  m2_loss_dice_5: 1.248  m2_loss_ce_6: 0.509  m2_loss_mask_6: 0.1605  m2_loss_dice_6: 1.247  m2_loss_ce_7: 0.4841  m2_loss_mask_7: 0.1585  m2_loss_dice_7: 1.236  m2_loss_ce_8: 0.5047  m2_loss_mask_8: 0.1581  m2_loss_dice_8: 1.281  com_loss_ce: 1.783  com_loss_mask: 0.6924  com_loss_dice: 0.9719    time: 1.4322  last_time: 1.4430  data_time: 0.0599  last_data_time: 0.0696   lr: 0.0001  max_mem: 36328M
[09/08 18:32:20] d2.utils.events INFO:  eta: 0:09:59  iter: 579  total_loss: 42.71  m1_loss_ce: 0.4618  m1_loss_mask: 0.1783  m1_loss_dice: 1.235  m1_loss_ce_0: 0.5323  m1_loss_mask_0: 0.2056  m1_loss_dice_0: 1.417  m1_loss_ce_1: 0.586  m1_loss_mask_1: 0.1944  m1_loss_dice_1: 1.317  m1_loss_ce_2: 0.5532  m1_loss_mask_2: 0.1801  m1_loss_dice_2: 1.269  m1_loss_ce_3: 0.5156  m1_loss_mask_3: 0.1745  m1_loss_dice_3: 1.231  m1_loss_ce_4: 0.4459  m1_loss_mask_4: 0.1755  m1_loss_dice_4: 1.23  m1_loss_ce_5: 0.4805  m1_loss_mask_5: 0.1729  m1_loss_dice_5: 1.211  m1_loss_ce_6: 0.4256  m1_loss_mask_6: 0.176  m1_loss_dice_6: 1.216  m1_loss_ce_7: 0.4434  m1_loss_mask_7: 0.1766  m1_loss_dice_7: 1.234  m1_loss_ce_8: 0.4668  m1_loss_mask_8: 0.1776  m1_loss_dice_8: 1.21  m2_loss_ce: 0.5097  m2_loss_mask: 0.1742  m2_loss_dice: 1.228  m2_loss_ce_0: 0.5584  m2_loss_mask_0: 0.2126  m2_loss_dice_0: 1.442  m2_loss_ce_1: 0.6667  m2_loss_mask_1: 0.1873  m2_loss_dice_1: 1.322  m2_loss_ce_2: 0.5888  m2_loss_mask_2: 0.1813  m2_loss_dice_2: 1.273  m2_loss_ce_3: 0.5739  m2_loss_mask_3: 0.177  m2_loss_dice_3: 1.225  m2_loss_ce_4: 0.5545  m2_loss_mask_4: 0.1772  m2_loss_dice_4: 1.223  m2_loss_ce_5: 0.5504  m2_loss_mask_5: 0.1751  m2_loss_dice_5: 1.217  m2_loss_ce_6: 0.5462  m2_loss_mask_6: 0.1752  m2_loss_dice_6: 1.198  m2_loss_ce_7: 0.5246  m2_loss_mask_7: 0.1751  m2_loss_dice_7: 1.21  m2_loss_ce_8: 0.5408  m2_loss_mask_8: 0.1763  m2_loss_dice_8: 1.164  com_loss_ce: 1.782  com_loss_mask: 0.6924  com_loss_dice: 0.9715    time: 1.4313  last_time: 1.4703  data_time: 0.0447  last_data_time: 0.0420   lr: 0.0001  max_mem: 36328M
[09/08 18:32:49] d2.utils.events INFO:  eta: 0:09:31  iter: 599  total_loss: 42.61  m1_loss_ce: 0.4646  m1_loss_mask: 0.17  m1_loss_dice: 1.207  m1_loss_ce_0: 0.5501  m1_loss_mask_0: 0.1964  m1_loss_dice_0: 1.441  m1_loss_ce_1: 0.6002  m1_loss_mask_1: 0.1809  m1_loss_dice_1: 1.384  m1_loss_ce_2: 0.5089  m1_loss_mask_2: 0.1718  m1_loss_dice_2: 1.306  m1_loss_ce_3: 0.4759  m1_loss_mask_3: 0.1704  m1_loss_dice_3: 1.25  m1_loss_ce_4: 0.4436  m1_loss_mask_4: 0.1659  m1_loss_dice_4: 1.254  m1_loss_ce_5: 0.4618  m1_loss_mask_5: 0.1645  m1_loss_dice_5: 1.252  m1_loss_ce_6: 0.4318  m1_loss_mask_6: 0.1664  m1_loss_dice_6: 1.232  m1_loss_ce_7: 0.4372  m1_loss_mask_7: 0.1694  m1_loss_dice_7: 1.219  m1_loss_ce_8: 0.4335  m1_loss_mask_8: 0.1664  m1_loss_dice_8: 1.168  m2_loss_ce: 0.5152  m2_loss_mask: 0.1702  m2_loss_dice: 1.215  m2_loss_ce_0: 0.5689  m2_loss_mask_0: 0.2  m2_loss_dice_0: 1.492  m2_loss_ce_1: 0.6824  m2_loss_mask_1: 0.1763  m2_loss_dice_1: 1.322  m2_loss_ce_2: 0.608  m2_loss_mask_2: 0.169  m2_loss_dice_2: 1.28  m2_loss_ce_3: 0.5443  m2_loss_mask_3: 0.1689  m2_loss_dice_3: 1.26  m2_loss_ce_4: 0.5486  m2_loss_mask_4: 0.1673  m2_loss_dice_4: 1.224  m2_loss_ce_5: 0.5607  m2_loss_mask_5: 0.1668  m2_loss_dice_5: 1.212  m2_loss_ce_6: 0.5335  m2_loss_mask_6: 0.1689  m2_loss_dice_6: 1.222  m2_loss_ce_7: 0.5349  m2_loss_mask_7: 0.1687  m2_loss_dice_7: 1.215  m2_loss_ce_8: 0.5081  m2_loss_mask_8: 0.1697  m2_loss_dice_8: 1.223  com_loss_ce: 1.757  com_loss_mask: 0.6924  com_loss_dice: 0.9717    time: 1.4323  last_time: 1.4629  data_time: 0.0537  last_data_time: 0.0760   lr: 0.0001  max_mem: 36328M
[09/08 18:33:17] d2.utils.events INFO:  eta: 0:09:02  iter: 619  total_loss: 42.87  m1_loss_ce: 0.4424  m1_loss_mask: 0.1638  m1_loss_dice: 1.162  m1_loss_ce_0: 0.514  m1_loss_mask_0: 0.1969  m1_loss_dice_0: 1.359  m1_loss_ce_1: 0.5762  m1_loss_mask_1: 0.1801  m1_loss_dice_1: 1.259  m1_loss_ce_2: 0.5588  m1_loss_mask_2: 0.1694  m1_loss_dice_2: 1.219  m1_loss_ce_3: 0.5288  m1_loss_mask_3: 0.1654  m1_loss_dice_3: 1.199  m1_loss_ce_4: 0.482  m1_loss_mask_4: 0.1644  m1_loss_dice_4: 1.152  m1_loss_ce_5: 0.4687  m1_loss_mask_5: 0.1656  m1_loss_dice_5: 1.187  m1_loss_ce_6: 0.4556  m1_loss_mask_6: 0.1668  m1_loss_dice_6: 1.163  m1_loss_ce_7: 0.4508  m1_loss_mask_7: 0.1656  m1_loss_dice_7: 1.152  m1_loss_ce_8: 0.4496  m1_loss_mask_8: 0.1658  m1_loss_dice_8: 1.173  m2_loss_ce: 0.5128  m2_loss_mask: 0.1699  m2_loss_dice: 1.166  m2_loss_ce_0: 0.5703  m2_loss_mask_0: 0.21  m2_loss_dice_0: 1.414  m2_loss_ce_1: 0.6775  m2_loss_mask_1: 0.1859  m2_loss_dice_1: 1.308  m2_loss_ce_2: 0.6042  m2_loss_mask_2: 0.1762  m2_loss_dice_2: 1.234  m2_loss_ce_3: 0.5664  m2_loss_mask_3: 0.1727  m2_loss_dice_3: 1.181  m2_loss_ce_4: 0.5376  m2_loss_mask_4: 0.1775  m2_loss_dice_4: 1.226  m2_loss_ce_5: 0.5474  m2_loss_mask_5: 0.171  m2_loss_dice_5: 1.218  m2_loss_ce_6: 0.5037  m2_loss_mask_6: 0.1724  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.5331  m2_loss_mask_7: 0.1717  m2_loss_dice_7: 1.184  m2_loss_ce_8: 0.5139  m2_loss_mask_8: 0.1706  m2_loss_dice_8: 1.176  com_loss_ce: 1.767  com_loss_mask: 0.6924  com_loss_dice: 0.9702    time: 1.4313  last_time: 1.3563  data_time: 0.0487  last_data_time: 0.0440   lr: 0.0001  max_mem: 36328M
[09/08 18:33:47] d2.utils.events INFO:  eta: 0:08:33  iter: 639  total_loss: 43.08  m1_loss_ce: 0.4917  m1_loss_mask: 0.1635  m1_loss_dice: 1.234  m1_loss_ce_0: 0.5471  m1_loss_mask_0: 0.1829  m1_loss_dice_0: 1.434  m1_loss_ce_1: 0.5666  m1_loss_mask_1: 0.172  m1_loss_dice_1: 1.335  m1_loss_ce_2: 0.5334  m1_loss_mask_2: 0.1664  m1_loss_dice_2: 1.274  m1_loss_ce_3: 0.5141  m1_loss_mask_3: 0.1658  m1_loss_dice_3: 1.255  m1_loss_ce_4: 0.4608  m1_loss_mask_4: 0.1634  m1_loss_dice_4: 1.236  m1_loss_ce_5: 0.475  m1_loss_mask_5: 0.1653  m1_loss_dice_5: 1.235  m1_loss_ce_6: 0.467  m1_loss_mask_6: 0.1619  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.443  m1_loss_mask_7: 0.164  m1_loss_dice_7: 1.245  m1_loss_ce_8: 0.4567  m1_loss_mask_8: 0.164  m1_loss_dice_8: 1.236  m2_loss_ce: 0.504  m2_loss_mask: 0.1681  m2_loss_dice: 1.235  m2_loss_ce_0: 0.5657  m2_loss_mask_0: 0.1941  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.6653  m2_loss_mask_1: 0.1773  m2_loss_dice_1: 1.33  m2_loss_ce_2: 0.6234  m2_loss_mask_2: 0.1682  m2_loss_dice_2: 1.286  m2_loss_ce_3: 0.5869  m2_loss_mask_3: 0.1696  m2_loss_dice_3: 1.261  m2_loss_ce_4: 0.5459  m2_loss_mask_4: 0.1697  m2_loss_dice_4: 1.243  m2_loss_ce_5: 0.5295  m2_loss_mask_5: 0.1698  m2_loss_dice_5: 1.256  m2_loss_ce_6: 0.5378  m2_loss_mask_6: 0.1718  m2_loss_dice_6: 1.239  m2_loss_ce_7: 0.5238  m2_loss_mask_7: 0.1723  m2_loss_dice_7: 1.239  m2_loss_ce_8: 0.5119  m2_loss_mask_8: 0.1697  m2_loss_dice_8: 1.241  com_loss_ce: 1.785  com_loss_mask: 0.6924  com_loss_dice: 0.9706    time: 1.4323  last_time: 1.5942  data_time: 0.0569  last_data_time: 0.0420   lr: 0.0001  max_mem: 36328M
[09/08 18:34:15] d2.utils.events INFO:  eta: 0:08:05  iter: 659  total_loss: 43.93  m1_loss_ce: 0.4894  m1_loss_mask: 0.1659  m1_loss_dice: 1.191  m1_loss_ce_0: 0.5215  m1_loss_mask_0: 0.1891  m1_loss_dice_0: 1.448  m1_loss_ce_1: 0.6074  m1_loss_mask_1: 0.1806  m1_loss_dice_1: 1.354  m1_loss_ce_2: 0.557  m1_loss_mask_2: 0.1673  m1_loss_dice_2: 1.313  m1_loss_ce_3: 0.5221  m1_loss_mask_3: 0.1684  m1_loss_dice_3: 1.265  m1_loss_ce_4: 0.4554  m1_loss_mask_4: 0.1673  m1_loss_dice_4: 1.266  m1_loss_ce_5: 0.4569  m1_loss_mask_5: 0.1659  m1_loss_dice_5: 1.26  m1_loss_ce_6: 0.4696  m1_loss_mask_6: 0.1672  m1_loss_dice_6: 1.228  m1_loss_ce_7: 0.4566  m1_loss_mask_7: 0.1629  m1_loss_dice_7: 1.239  m1_loss_ce_8: 0.4723  m1_loss_mask_8: 0.1647  m1_loss_dice_8: 1.239  m2_loss_ce: 0.5299  m2_loss_mask: 0.1646  m2_loss_dice: 1.239  m2_loss_ce_0: 0.5454  m2_loss_mask_0: 0.1986  m2_loss_dice_0: 1.481  m2_loss_ce_1: 0.6561  m2_loss_mask_1: 0.1784  m2_loss_dice_1: 1.363  m2_loss_ce_2: 0.6047  m2_loss_mask_2: 0.1691  m2_loss_dice_2: 1.296  m2_loss_ce_3: 0.5405  m2_loss_mask_3: 0.1641  m2_loss_dice_3: 1.263  m2_loss_ce_4: 0.5458  m2_loss_mask_4: 0.167  m2_loss_dice_4: 1.238  m2_loss_ce_5: 0.5466  m2_loss_mask_5: 0.1603  m2_loss_dice_5: 1.24  m2_loss_ce_6: 0.5269  m2_loss_mask_6: 0.1663  m2_loss_dice_6: 1.238  m2_loss_ce_7: 0.5302  m2_loss_mask_7: 0.1624  m2_loss_dice_7: 1.242  m2_loss_ce_8: 0.5283  m2_loss_mask_8: 0.1646  m2_loss_dice_8: 1.222  com_loss_ce: 1.78  com_loss_mask: 0.6924  com_loss_dice: 0.971    time: 1.4320  last_time: 1.3945  data_time: 0.0508  last_data_time: 0.0396   lr: 0.0001  max_mem: 36328M
[09/08 18:34:44] d2.utils.events INFO:  eta: 0:07:36  iter: 679  total_loss: 41.64  m1_loss_ce: 0.49  m1_loss_mask: 0.1594  m1_loss_dice: 1.139  m1_loss_ce_0: 0.5769  m1_loss_mask_0: 0.1869  m1_loss_dice_0: 1.327  m1_loss_ce_1: 0.6239  m1_loss_mask_1: 0.1706  m1_loss_dice_1: 1.262  m1_loss_ce_2: 0.5766  m1_loss_mask_2: 0.1619  m1_loss_dice_2: 1.233  m1_loss_ce_3: 0.5043  m1_loss_mask_3: 0.1637  m1_loss_dice_3: 1.176  m1_loss_ce_4: 0.5161  m1_loss_mask_4: 0.1596  m1_loss_dice_4: 1.21  m1_loss_ce_5: 0.4953  m1_loss_mask_5: 0.1625  m1_loss_dice_5: 1.148  m1_loss_ce_6: 0.4488  m1_loss_mask_6: 0.1606  m1_loss_dice_6: 1.154  m1_loss_ce_7: 0.4771  m1_loss_mask_7: 0.1589  m1_loss_dice_7: 1.138  m1_loss_ce_8: 0.4792  m1_loss_mask_8: 0.1588  m1_loss_dice_8: 1.18  m2_loss_ce: 0.5454  m2_loss_mask: 0.1627  m2_loss_dice: 1.177  m2_loss_ce_0: 0.5767  m2_loss_mask_0: 0.1975  m2_loss_dice_0: 1.403  m2_loss_ce_1: 0.7011  m2_loss_mask_1: 0.174  m2_loss_dice_1: 1.268  m2_loss_ce_2: 0.6291  m2_loss_mask_2: 0.1632  m2_loss_dice_2: 1.211  m2_loss_ce_3: 0.5641  m2_loss_mask_3: 0.1665  m2_loss_dice_3: 1.163  m2_loss_ce_4: 0.5508  m2_loss_mask_4: 0.1624  m2_loss_dice_4: 1.179  m2_loss_ce_5: 0.5647  m2_loss_mask_5: 0.1632  m2_loss_dice_5: 1.16  m2_loss_ce_6: 0.5448  m2_loss_mask_6: 0.1634  m2_loss_dice_6: 1.181  m2_loss_ce_7: 0.5659  m2_loss_mask_7: 0.1625  m2_loss_dice_7: 1.148  m2_loss_ce_8: 0.536  m2_loss_mask_8: 0.1629  m2_loss_dice_8: 1.155  com_loss_ce: 1.787  com_loss_mask: 0.6924  com_loss_dice: 0.97    time: 1.4319  last_time: 1.3865  data_time: 0.0523  last_data_time: 0.0371   lr: 0.0001  max_mem: 36328M
[09/08 18:35:13] d2.utils.events INFO:  eta: 0:07:08  iter: 699  total_loss: 43.71  m1_loss_ce: 0.4931  m1_loss_mask: 0.1736  m1_loss_dice: 1.2  m1_loss_ce_0: 0.5671  m1_loss_mask_0: 0.1886  m1_loss_dice_0: 1.41  m1_loss_ce_1: 0.6271  m1_loss_mask_1: 0.1817  m1_loss_dice_1: 1.309  m1_loss_ce_2: 0.5554  m1_loss_mask_2: 0.1739  m1_loss_dice_2: 1.28  m1_loss_ce_3: 0.5092  m1_loss_mask_3: 0.1705  m1_loss_dice_3: 1.256  m1_loss_ce_4: 0.47  m1_loss_mask_4: 0.1703  m1_loss_dice_4: 1.223  m1_loss_ce_5: 0.4775  m1_loss_mask_5: 0.1726  m1_loss_dice_5: 1.246  m1_loss_ce_6: 0.4612  m1_loss_mask_6: 0.1727  m1_loss_dice_6: 1.213  m1_loss_ce_7: 0.4789  m1_loss_mask_7: 0.1692  m1_loss_dice_7: 1.206  m1_loss_ce_8: 0.4461  m1_loss_mask_8: 0.1726  m1_loss_dice_8: 1.219  m2_loss_ce: 0.5713  m2_loss_mask: 0.1665  m2_loss_dice: 1.255  m2_loss_ce_0: 0.6067  m2_loss_mask_0: 0.1981  m2_loss_dice_0: 1.514  m2_loss_ce_1: 0.7195  m2_loss_mask_1: 0.1742  m2_loss_dice_1: 1.34  m2_loss_ce_2: 0.6274  m2_loss_mask_2: 0.1676  m2_loss_dice_2: 1.303  m2_loss_ce_3: 0.5695  m2_loss_mask_3: 0.1694  m2_loss_dice_3: 1.246  m2_loss_ce_4: 0.5646  m2_loss_mask_4: 0.1694  m2_loss_dice_4: 1.243  m2_loss_ce_5: 0.5926  m2_loss_mask_5: 0.1649  m2_loss_dice_5: 1.237  m2_loss_ce_6: 0.547  m2_loss_mask_6: 0.1687  m2_loss_dice_6: 1.234  m2_loss_ce_7: 0.5744  m2_loss_mask_7: 0.1673  m2_loss_dice_7: 1.237  m2_loss_ce_8: 0.5319  m2_loss_mask_8: 0.1647  m2_loss_dice_8: 1.226  com_loss_ce: 1.784  com_loss_mask: 0.6924  com_loss_dice: 0.972    time: 1.4321  last_time: 1.3271  data_time: 0.0486  last_data_time: 0.0381   lr: 0.0001  max_mem: 36328M
[09/08 18:35:42] d2.utils.events INFO:  eta: 0:06:39  iter: 719  total_loss: 42.17  m1_loss_ce: 0.4507  m1_loss_mask: 0.151  m1_loss_dice: 1.223  m1_loss_ce_0: 0.5475  m1_loss_mask_0: 0.1789  m1_loss_dice_0: 1.418  m1_loss_ce_1: 0.5937  m1_loss_mask_1: 0.1639  m1_loss_dice_1: 1.334  m1_loss_ce_2: 0.5328  m1_loss_mask_2: 0.1571  m1_loss_dice_2: 1.282  m1_loss_ce_3: 0.4907  m1_loss_mask_3: 0.1546  m1_loss_dice_3: 1.247  m1_loss_ce_4: 0.4722  m1_loss_mask_4: 0.1551  m1_loss_dice_4: 1.229  m1_loss_ce_5: 0.4626  m1_loss_mask_5: 0.1531  m1_loss_dice_5: 1.216  m1_loss_ce_6: 0.4307  m1_loss_mask_6: 0.1523  m1_loss_dice_6: 1.212  m1_loss_ce_7: 0.4306  m1_loss_mask_7: 0.1526  m1_loss_dice_7: 1.208  m1_loss_ce_8: 0.4653  m1_loss_mask_8: 0.1541  m1_loss_dice_8: 1.22  m2_loss_ce: 0.5026  m2_loss_mask: 0.1551  m2_loss_dice: 1.196  m2_loss_ce_0: 0.537  m2_loss_mask_0: 0.1878  m2_loss_dice_0: 1.472  m2_loss_ce_1: 0.6522  m2_loss_mask_1: 0.1686  m2_loss_dice_1: 1.327  m2_loss_ce_2: 0.582  m2_loss_mask_2: 0.1618  m2_loss_dice_2: 1.309  m2_loss_ce_3: 0.5512  m2_loss_mask_3: 0.1605  m2_loss_dice_3: 1.247  m2_loss_ce_4: 0.51  m2_loss_mask_4: 0.1603  m2_loss_dice_4: 1.176  m2_loss_ce_5: 0.515  m2_loss_mask_5: 0.1576  m2_loss_dice_5: 1.208  m2_loss_ce_6: 0.5095  m2_loss_mask_6: 0.1571  m2_loss_dice_6: 1.219  m2_loss_ce_7: 0.5022  m2_loss_mask_7: 0.1549  m2_loss_dice_7: 1.201  m2_loss_ce_8: 0.5282  m2_loss_mask_8: 0.1562  m2_loss_dice_8: 1.165  com_loss_ce: 1.785  com_loss_mask: 0.6924  com_loss_dice: 0.9722    time: 1.4323  last_time: 1.5127  data_time: 0.0487  last_data_time: 0.0958   lr: 0.0001  max_mem: 36328M
[09/08 18:36:11] d2.utils.events INFO:  eta: 0:06:11  iter: 739  total_loss: 42.74  m1_loss_ce: 0.5213  m1_loss_mask: 0.1553  m1_loss_dice: 1.194  m1_loss_ce_0: 0.5419  m1_loss_mask_0: 0.1825  m1_loss_dice_0: 1.427  m1_loss_ce_1: 0.6134  m1_loss_mask_1: 0.1676  m1_loss_dice_1: 1.316  m1_loss_ce_2: 0.551  m1_loss_mask_2: 0.1612  m1_loss_dice_2: 1.244  m1_loss_ce_3: 0.5004  m1_loss_mask_3: 0.1533  m1_loss_dice_3: 1.187  m1_loss_ce_4: 0.5046  m1_loss_mask_4: 0.1583  m1_loss_dice_4: 1.229  m1_loss_ce_5: 0.433  m1_loss_mask_5: 0.1538  m1_loss_dice_5: 1.216  m1_loss_ce_6: 0.4769  m1_loss_mask_6: 0.1539  m1_loss_dice_6: 1.167  m1_loss_ce_7: 0.4705  m1_loss_mask_7: 0.153  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.4878  m1_loss_mask_8: 0.1566  m1_loss_dice_8: 1.195  m2_loss_ce: 0.5299  m2_loss_mask: 0.1504  m2_loss_dice: 1.204  m2_loss_ce_0: 0.5838  m2_loss_mask_0: 0.1794  m2_loss_dice_0: 1.473  m2_loss_ce_1: 0.7345  m2_loss_mask_1: 0.1692  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.5995  m2_loss_mask_2: 0.1611  m2_loss_dice_2: 1.265  m2_loss_ce_3: 0.5668  m2_loss_mask_3: 0.1597  m2_loss_dice_3: 1.229  m2_loss_ce_4: 0.5691  m2_loss_mask_4: 0.155  m2_loss_dice_4: 1.203  m2_loss_ce_5: 0.5469  m2_loss_mask_5: 0.1517  m2_loss_dice_5: 1.214  m2_loss_ce_6: 0.5201  m2_loss_mask_6: 0.152  m2_loss_dice_6: 1.203  m2_loss_ce_7: 0.5387  m2_loss_mask_7: 0.1528  m2_loss_dice_7: 1.191  m2_loss_ce_8: 0.5154  m2_loss_mask_8: 0.1514  m2_loss_dice_8: 1.235  com_loss_ce: 1.774  com_loss_mask: 0.6924  com_loss_dice: 0.9717    time: 1.4324  last_time: 1.4883  data_time: 0.0499  last_data_time: 0.0516   lr: 0.0001  max_mem: 36328M
[09/08 18:36:39] d2.utils.events INFO:  eta: 0:05:42  iter: 759  total_loss: 40.02  m1_loss_ce: 0.456  m1_loss_mask: 0.1581  m1_loss_dice: 1.108  m1_loss_ce_0: 0.5282  m1_loss_mask_0: 0.1854  m1_loss_dice_0: 1.28  m1_loss_ce_1: 0.5815  m1_loss_mask_1: 0.1704  m1_loss_dice_1: 1.187  m1_loss_ce_2: 0.5318  m1_loss_mask_2: 0.1673  m1_loss_dice_2: 1.144  m1_loss_ce_3: 0.4489  m1_loss_mask_3: 0.1628  m1_loss_dice_3: 1.086  m1_loss_ce_4: 0.4262  m1_loss_mask_4: 0.1618  m1_loss_dice_4: 1.108  m1_loss_ce_5: 0.4332  m1_loss_mask_5: 0.1583  m1_loss_dice_5: 1.102  m1_loss_ce_6: 0.424  m1_loss_mask_6: 0.1573  m1_loss_dice_6: 1.1  m1_loss_ce_7: 0.4131  m1_loss_mask_7: 0.1569  m1_loss_dice_7: 1.086  m1_loss_ce_8: 0.4187  m1_loss_mask_8: 0.1573  m1_loss_dice_8: 1.074  m2_loss_ce: 0.5182  m2_loss_mask: 0.1628  m2_loss_dice: 1.115  m2_loss_ce_0: 0.5607  m2_loss_mask_0: 0.2004  m2_loss_dice_0: 1.314  m2_loss_ce_1: 0.6483  m2_loss_mask_1: 0.177  m2_loss_dice_1: 1.224  m2_loss_ce_2: 0.5558  m2_loss_mask_2: 0.1665  m2_loss_dice_2: 1.206  m2_loss_ce_3: 0.5634  m2_loss_mask_3: 0.1664  m2_loss_dice_3: 1.145  m2_loss_ce_4: 0.5386  m2_loss_mask_4: 0.1684  m2_loss_dice_4: 1.18  m2_loss_ce_5: 0.5276  m2_loss_mask_5: 0.1642  m2_loss_dice_5: 1.128  m2_loss_ce_6: 0.5289  m2_loss_mask_6: 0.1671  m2_loss_dice_6: 1.147  m2_loss_ce_7: 0.5163  m2_loss_mask_7: 0.1643  m2_loss_dice_7: 1.132  m2_loss_ce_8: 0.532  m2_loss_mask_8: 0.1629  m2_loss_dice_8: 1.118  com_loss_ce: 1.773  com_loss_mask: 0.6924  com_loss_dice: 0.9697    time: 1.4324  last_time: 1.3316  data_time: 0.0536  last_data_time: 0.0435   lr: 0.0001  max_mem: 36328M
[09/08 18:37:08] d2.utils.events INFO:  eta: 0:05:14  iter: 779  total_loss: 43.31  m1_loss_ce: 0.4843  m1_loss_mask: 0.1739  m1_loss_dice: 1.206  m1_loss_ce_0: 0.5835  m1_loss_mask_0: 0.2073  m1_loss_dice_0: 1.437  m1_loss_ce_1: 0.6005  m1_loss_mask_1: 0.1925  m1_loss_dice_1: 1.337  m1_loss_ce_2: 0.5422  m1_loss_mask_2: 0.1804  m1_loss_dice_2: 1.267  m1_loss_ce_3: 0.5031  m1_loss_mask_3: 0.1793  m1_loss_dice_3: 1.191  m1_loss_ce_4: 0.5038  m1_loss_mask_4: 0.1803  m1_loss_dice_4: 1.23  m1_loss_ce_5: 0.4749  m1_loss_mask_5: 0.1766  m1_loss_dice_5: 1.196  m1_loss_ce_6: 0.4748  m1_loss_mask_6: 0.1782  m1_loss_dice_6: 1.209  m1_loss_ce_7: 0.4698  m1_loss_mask_7: 0.1777  m1_loss_dice_7: 1.202  m1_loss_ce_8: 0.4548  m1_loss_mask_8: 0.1785  m1_loss_dice_8: 1.196  m2_loss_ce: 0.5502  m2_loss_mask: 0.1757  m2_loss_dice: 1.225  m2_loss_ce_0: 0.5817  m2_loss_mask_0: 0.2135  m2_loss_dice_0: 1.506  m2_loss_ce_1: 0.6872  m2_loss_mask_1: 0.1902  m2_loss_dice_1: 1.372  m2_loss_ce_2: 0.6162  m2_loss_mask_2: 0.1819  m2_loss_dice_2: 1.307  m2_loss_ce_3: 0.5743  m2_loss_mask_3: 0.1786  m2_loss_dice_3: 1.237  m2_loss_ce_4: 0.6158  m2_loss_mask_4: 0.1787  m2_loss_dice_4: 1.248  m2_loss_ce_5: 0.5583  m2_loss_mask_5: 0.1759  m2_loss_dice_5: 1.247  m2_loss_ce_6: 0.537  m2_loss_mask_6: 0.1783  m2_loss_dice_6: 1.208  m2_loss_ce_7: 0.5805  m2_loss_mask_7: 0.176  m2_loss_dice_7: 1.216  m2_loss_ce_8: 0.5487  m2_loss_mask_8: 0.1757  m2_loss_dice_8: 1.234  com_loss_ce: 1.79  com_loss_mask: 0.6924  com_loss_dice: 0.972    time: 1.4327  last_time: 1.4894  data_time: 0.0579  last_data_time: 0.0916   lr: 0.0001  max_mem: 36328M
[09/08 18:37:37] d2.utils.events INFO:  eta: 0:04:45  iter: 799  total_loss: 45.98  m1_loss_ce: 0.5203  m1_loss_mask: 0.1579  m1_loss_dice: 1.281  m1_loss_ce_0: 0.5802  m1_loss_mask_0: 0.1836  m1_loss_dice_0: 1.467  m1_loss_ce_1: 0.6407  m1_loss_mask_1: 0.1678  m1_loss_dice_1: 1.384  m1_loss_ce_2: 0.583  m1_loss_mask_2: 0.1626  m1_loss_dice_2: 1.374  m1_loss_ce_3: 0.5166  m1_loss_mask_3: 0.161  m1_loss_dice_3: 1.304  m1_loss_ce_4: 0.551  m1_loss_mask_4: 0.1581  m1_loss_dice_4: 1.269  m1_loss_ce_5: 0.5286  m1_loss_mask_5: 0.1582  m1_loss_dice_5: 1.281  m1_loss_ce_6: 0.4904  m1_loss_mask_6: 0.1576  m1_loss_dice_6: 1.279  m1_loss_ce_7: 0.4926  m1_loss_mask_7: 0.1577  m1_loss_dice_7: 1.284  m1_loss_ce_8: 0.4739  m1_loss_mask_8: 0.1572  m1_loss_dice_8: 1.307  m2_loss_ce: 0.564  m2_loss_mask: 0.1679  m2_loss_dice: 1.279  m2_loss_ce_0: 0.6219  m2_loss_mask_0: 0.1976  m2_loss_dice_0: 1.581  m2_loss_ce_1: 0.72  m2_loss_mask_1: 0.1746  m2_loss_dice_1: 1.405  m2_loss_ce_2: 0.6532  m2_loss_mask_2: 0.1672  m2_loss_dice_2: 1.345  m2_loss_ce_3: 0.6166  m2_loss_mask_3: 0.1684  m2_loss_dice_3: 1.321  m2_loss_ce_4: 0.6088  m2_loss_mask_4: 0.1642  m2_loss_dice_4: 1.315  m2_loss_ce_5: 0.6001  m2_loss_mask_5: 0.1641  m2_loss_dice_5: 1.318  m2_loss_ce_6: 0.5993  m2_loss_mask_6: 0.1662  m2_loss_dice_6: 1.304  m2_loss_ce_7: 0.5866  m2_loss_mask_7: 0.166  m2_loss_dice_7: 1.314  m2_loss_ce_8: 0.5811  m2_loss_mask_8: 0.1678  m2_loss_dice_8: 1.302  com_loss_ce: 1.805  com_loss_mask: 0.6924  com_loss_dice: 0.9741    time: 1.4320  last_time: 1.3490  data_time: 0.0560  last_data_time: 0.0499   lr: 0.0001  max_mem: 36328M
[09/08 18:38:06] d2.utils.events INFO:  eta: 0:04:16  iter: 819  total_loss: 42.37  m1_loss_ce: 0.4324  m1_loss_mask: 0.1602  m1_loss_dice: 1.164  m1_loss_ce_0: 0.5296  m1_loss_mask_0: 0.1988  m1_loss_dice_0: 1.356  m1_loss_ce_1: 0.5882  m1_loss_mask_1: 0.1738  m1_loss_dice_1: 1.307  m1_loss_ce_2: 0.5068  m1_loss_mask_2: 0.1731  m1_loss_dice_2: 1.229  m1_loss_ce_3: 0.4654  m1_loss_mask_3: 0.169  m1_loss_dice_3: 1.194  m1_loss_ce_4: 0.4742  m1_loss_mask_4: 0.1692  m1_loss_dice_4: 1.177  m1_loss_ce_5: 0.463  m1_loss_mask_5: 0.1686  m1_loss_dice_5: 1.198  m1_loss_ce_6: 0.4501  m1_loss_mask_6: 0.1668  m1_loss_dice_6: 1.162  m1_loss_ce_7: 0.4316  m1_loss_mask_7: 0.1684  m1_loss_dice_7: 1.145  m1_loss_ce_8: 0.4149  m1_loss_mask_8: 0.1618  m1_loss_dice_8: 1.17  m2_loss_ce: 0.5294  m2_loss_mask: 0.1679  m2_loss_dice: 1.174  m2_loss_ce_0: 0.6  m2_loss_mask_0: 0.2047  m2_loss_dice_0: 1.4  m2_loss_ce_1: 0.65  m2_loss_mask_1: 0.1763  m2_loss_dice_1: 1.265  m2_loss_ce_2: 0.586  m2_loss_mask_2: 0.1735  m2_loss_dice_2: 1.214  m2_loss_ce_3: 0.5831  m2_loss_mask_3: 0.1735  m2_loss_dice_3: 1.165  m2_loss_ce_4: 0.5353  m2_loss_mask_4: 0.1742  m2_loss_dice_4: 1.185  m2_loss_ce_5: 0.5537  m2_loss_mask_5: 0.1682  m2_loss_dice_5: 1.213  m2_loss_ce_6: 0.5362  m2_loss_mask_6: 0.171  m2_loss_dice_6: 1.153  m2_loss_ce_7: 0.5182  m2_loss_mask_7: 0.1691  m2_loss_dice_7: 1.164  m2_loss_ce_8: 0.5199  m2_loss_mask_8: 0.1679  m2_loss_dice_8: 1.163  com_loss_ce: 1.782  com_loss_mask: 0.6924  com_loss_dice: 0.9719    time: 1.4325  last_time: 1.4985  data_time: 0.0525  last_data_time: 0.0466   lr: 0.0001  max_mem: 36328M
[09/08 18:38:35] d2.utils.events INFO:  eta: 0:03:48  iter: 839  total_loss: 43.74  m1_loss_ce: 0.4744  m1_loss_mask: 0.1537  m1_loss_dice: 1.193  m1_loss_ce_0: 0.5531  m1_loss_mask_0: 0.1799  m1_loss_dice_0: 1.394  m1_loss_ce_1: 0.5898  m1_loss_mask_1: 0.1665  m1_loss_dice_1: 1.345  m1_loss_ce_2: 0.531  m1_loss_mask_2: 0.1605  m1_loss_dice_2: 1.318  m1_loss_ce_3: 0.4815  m1_loss_mask_3: 0.1552  m1_loss_dice_3: 1.208  m1_loss_ce_4: 0.463  m1_loss_mask_4: 0.1524  m1_loss_dice_4: 1.211  m1_loss_ce_5: 0.4513  m1_loss_mask_5: 0.1519  m1_loss_dice_5: 1.178  m1_loss_ce_6: 0.436  m1_loss_mask_6: 0.1534  m1_loss_dice_6: 1.188  m1_loss_ce_7: 0.4451  m1_loss_mask_7: 0.1528  m1_loss_dice_7: 1.199  m1_loss_ce_8: 0.4506  m1_loss_mask_8: 0.1549  m1_loss_dice_8: 1.214  m2_loss_ce: 0.5437  m2_loss_mask: 0.1603  m2_loss_dice: 1.243  m2_loss_ce_0: 0.5901  m2_loss_mask_0: 0.191  m2_loss_dice_0: 1.51  m2_loss_ce_1: 0.7004  m2_loss_mask_1: 0.1686  m2_loss_dice_1: 1.396  m2_loss_ce_2: 0.6499  m2_loss_mask_2: 0.1612  m2_loss_dice_2: 1.323  m2_loss_ce_3: 0.5658  m2_loss_mask_3: 0.1625  m2_loss_dice_3: 1.291  m2_loss_ce_4: 0.5543  m2_loss_mask_4: 0.1632  m2_loss_dice_4: 1.268  m2_loss_ce_5: 0.5245  m2_loss_mask_5: 0.1617  m2_loss_dice_5: 1.271  m2_loss_ce_6: 0.5587  m2_loss_mask_6: 0.1641  m2_loss_dice_6: 1.241  m2_loss_ce_7: 0.5095  m2_loss_mask_7: 0.1632  m2_loss_dice_7: 1.256  m2_loss_ce_8: 0.5232  m2_loss_mask_8: 0.1589  m2_loss_dice_8: 1.255  com_loss_ce: 1.793  com_loss_mask: 0.6924  com_loss_dice: 0.9729    time: 1.4332  last_time: 1.4367  data_time: 0.0596  last_data_time: 0.0450   lr: 0.0001  max_mem: 36328M
[09/08 18:39:04] d2.utils.events INFO:  eta: 0:03:20  iter: 859  total_loss: 43.54  m1_loss_ce: 0.4772  m1_loss_mask: 0.1566  m1_loss_dice: 1.207  m1_loss_ce_0: 0.5309  m1_loss_mask_0: 0.1841  m1_loss_dice_0: 1.408  m1_loss_ce_1: 0.6038  m1_loss_mask_1: 0.1673  m1_loss_dice_1: 1.32  m1_loss_ce_2: 0.545  m1_loss_mask_2: 0.1584  m1_loss_dice_2: 1.282  m1_loss_ce_3: 0.4757  m1_loss_mask_3: 0.152  m1_loss_dice_3: 1.247  m1_loss_ce_4: 0.4741  m1_loss_mask_4: 0.1561  m1_loss_dice_4: 1.222  m1_loss_ce_5: 0.4634  m1_loss_mask_5: 0.1546  m1_loss_dice_5: 1.217  m1_loss_ce_6: 0.4406  m1_loss_mask_6: 0.1556  m1_loss_dice_6: 1.213  m1_loss_ce_7: 0.4657  m1_loss_mask_7: 0.1537  m1_loss_dice_7: 1.216  m1_loss_ce_8: 0.452  m1_loss_mask_8: 0.1535  m1_loss_dice_8: 1.22  m2_loss_ce: 0.536  m2_loss_mask: 0.1603  m2_loss_dice: 1.238  m2_loss_ce_0: 0.5562  m2_loss_mask_0: 0.1945  m2_loss_dice_0: 1.474  m2_loss_ce_1: 0.6905  m2_loss_mask_1: 0.1767  m2_loss_dice_1: 1.343  m2_loss_ce_2: 0.606  m2_loss_mask_2: 0.1656  m2_loss_dice_2: 1.323  m2_loss_ce_3: 0.5427  m2_loss_mask_3: 0.1641  m2_loss_dice_3: 1.274  m2_loss_ce_4: 0.5783  m2_loss_mask_4: 0.1654  m2_loss_dice_4: 1.247  m2_loss_ce_5: 0.5697  m2_loss_mask_5: 0.1621  m2_loss_dice_5: 1.254  m2_loss_ce_6: 0.5477  m2_loss_mask_6: 0.1638  m2_loss_dice_6: 1.241  m2_loss_ce_7: 0.5362  m2_loss_mask_7: 0.1636  m2_loss_dice_7: 1.267  m2_loss_ce_8: 0.5144  m2_loss_mask_8: 0.1589  m2_loss_dice_8: 1.228  com_loss_ce: 1.784  com_loss_mask: 0.6924  com_loss_dice: 0.9719    time: 1.4337  last_time: 1.3599  data_time: 0.0627  last_data_time: 0.0472   lr: 0.0001  max_mem: 36328M
[09/08 18:39:34] d2.utils.events INFO:  eta: 0:02:51  iter: 879  total_loss: 43.17  m1_loss_ce: 0.4712  m1_loss_mask: 0.1602  m1_loss_dice: 1.197  m1_loss_ce_0: 0.5415  m1_loss_mask_0: 0.1909  m1_loss_dice_0: 1.437  m1_loss_ce_1: 0.6013  m1_loss_mask_1: 0.1711  m1_loss_dice_1: 1.345  m1_loss_ce_2: 0.5275  m1_loss_mask_2: 0.1634  m1_loss_dice_2: 1.333  m1_loss_ce_3: 0.5382  m1_loss_mask_3: 0.1589  m1_loss_dice_3: 1.234  m1_loss_ce_4: 0.4702  m1_loss_mask_4: 0.1605  m1_loss_dice_4: 1.224  m1_loss_ce_5: 0.4639  m1_loss_mask_5: 0.1599  m1_loss_dice_5: 1.21  m1_loss_ce_6: 0.4577  m1_loss_mask_6: 0.1589  m1_loss_dice_6: 1.23  m1_loss_ce_7: 0.4433  m1_loss_mask_7: 0.1599  m1_loss_dice_7: 1.221  m1_loss_ce_8: 0.4474  m1_loss_mask_8: 0.1588  m1_loss_dice_8: 1.203  m2_loss_ce: 0.534  m2_loss_mask: 0.1632  m2_loss_dice: 1.239  m2_loss_ce_0: 0.5609  m2_loss_mask_0: 0.1908  m2_loss_dice_0: 1.468  m2_loss_ce_1: 0.694  m2_loss_mask_1: 0.1791  m2_loss_dice_1: 1.363  m2_loss_ce_2: 0.6304  m2_loss_mask_2: 0.1653  m2_loss_dice_2: 1.292  m2_loss_ce_3: 0.5771  m2_loss_mask_3: 0.1661  m2_loss_dice_3: 1.258  m2_loss_ce_4: 0.576  m2_loss_mask_4: 0.1674  m2_loss_dice_4: 1.29  m2_loss_ce_5: 0.5686  m2_loss_mask_5: 0.1639  m2_loss_dice_5: 1.278  m2_loss_ce_6: 0.5585  m2_loss_mask_6: 0.1672  m2_loss_dice_6: 1.235  m2_loss_ce_7: 0.5213  m2_loss_mask_7: 0.167  m2_loss_dice_7: 1.246  m2_loss_ce_8: 0.5468  m2_loss_mask_8: 0.1642  m2_loss_dice_8: 1.233  com_loss_ce: 1.786  com_loss_mask: 0.6924  com_loss_dice: 0.9719    time: 1.4345  last_time: 1.4667  data_time: 0.0610  last_data_time: 0.0698   lr: 0.0001  max_mem: 36328M
[09/08 18:40:03] d2.utils.events INFO:  eta: 0:02:23  iter: 899  total_loss: 41.47  m1_loss_ce: 0.4264  m1_loss_mask: 0.1566  m1_loss_dice: 1.191  m1_loss_ce_0: 0.5324  m1_loss_mask_0: 0.1903  m1_loss_dice_0: 1.37  m1_loss_ce_1: 0.5959  m1_loss_mask_1: 0.1762  m1_loss_dice_1: 1.311  m1_loss_ce_2: 0.5453  m1_loss_mask_2: 0.1678  m1_loss_dice_2: 1.284  m1_loss_ce_3: 0.4804  m1_loss_mask_3: 0.1681  m1_loss_dice_3: 1.193  m1_loss_ce_4: 0.4449  m1_loss_mask_4: 0.1621  m1_loss_dice_4: 1.187  m1_loss_ce_5: 0.4452  m1_loss_mask_5: 0.1583  m1_loss_dice_5: 1.228  m1_loss_ce_6: 0.4089  m1_loss_mask_6: 0.1588  m1_loss_dice_6: 1.188  m1_loss_ce_7: 0.4394  m1_loss_mask_7: 0.1598  m1_loss_dice_7: 1.175  m1_loss_ce_8: 0.3945  m1_loss_mask_8: 0.158  m1_loss_dice_8: 1.196  m2_loss_ce: 0.5053  m2_loss_mask: 0.1661  m2_loss_dice: 1.179  m2_loss_ce_0: 0.5866  m2_loss_mask_0: 0.2029  m2_loss_dice_0: 1.441  m2_loss_ce_1: 0.6857  m2_loss_mask_1: 0.1858  m2_loss_dice_1: 1.343  m2_loss_ce_2: 0.5836  m2_loss_mask_2: 0.1688  m2_loss_dice_2: 1.259  m2_loss_ce_3: 0.5528  m2_loss_mask_3: 0.169  m2_loss_dice_3: 1.216  m2_loss_ce_4: 0.5266  m2_loss_mask_4: 0.1717  m2_loss_dice_4: 1.225  m2_loss_ce_5: 0.5325  m2_loss_mask_5: 0.1688  m2_loss_dice_5: 1.183  m2_loss_ce_6: 0.5264  m2_loss_mask_6: 0.1681  m2_loss_dice_6: 1.167  m2_loss_ce_7: 0.5526  m2_loss_mask_7: 0.1662  m2_loss_dice_7: 1.189  m2_loss_ce_8: 0.5222  m2_loss_mask_8: 0.1667  m2_loss_dice_8: 1.188  com_loss_ce: 1.781  com_loss_mask: 0.6924  com_loss_dice: 0.9727    time: 1.4350  last_time: 1.5195  data_time: 0.0566  last_data_time: 0.0406   lr: 0.0001  max_mem: 36328M
[09/08 18:40:32] d2.utils.events INFO:  eta: 0:01:54  iter: 919  total_loss: 40.99  m1_loss_ce: 0.4356  m1_loss_mask: 0.1585  m1_loss_dice: 1.141  m1_loss_ce_0: 0.5201  m1_loss_mask_0: 0.1985  m1_loss_dice_0: 1.315  m1_loss_ce_1: 0.5496  m1_loss_mask_1: 0.1781  m1_loss_dice_1: 1.246  m1_loss_ce_2: 0.486  m1_loss_mask_2: 0.1649  m1_loss_dice_2: 1.196  m1_loss_ce_3: 0.4557  m1_loss_mask_3: 0.1675  m1_loss_dice_3: 1.162  m1_loss_ce_4: 0.4485  m1_loss_mask_4: 0.1633  m1_loss_dice_4: 1.141  m1_loss_ce_5: 0.4463  m1_loss_mask_5: 0.1619  m1_loss_dice_5: 1.144  m1_loss_ce_6: 0.4239  m1_loss_mask_6: 0.1622  m1_loss_dice_6: 1.132  m1_loss_ce_7: 0.4485  m1_loss_mask_7: 0.1614  m1_loss_dice_7: 1.139  m1_loss_ce_8: 0.4308  m1_loss_mask_8: 0.1607  m1_loss_dice_8: 1.143  m2_loss_ce: 0.5113  m2_loss_mask: 0.1653  m2_loss_dice: 1.185  m2_loss_ce_0: 0.554  m2_loss_mask_0: 0.2137  m2_loss_dice_0: 1.393  m2_loss_ce_1: 0.6674  m2_loss_mask_1: 0.1818  m2_loss_dice_1: 1.288  m2_loss_ce_2: 0.5735  m2_loss_mask_2: 0.1722  m2_loss_dice_2: 1.231  m2_loss_ce_3: 0.5365  m2_loss_mask_3: 0.1703  m2_loss_dice_3: 1.19  m2_loss_ce_4: 0.5261  m2_loss_mask_4: 0.1692  m2_loss_dice_4: 1.205  m2_loss_ce_5: 0.5004  m2_loss_mask_5: 0.1675  m2_loss_dice_5: 1.197  m2_loss_ce_6: 0.4722  m2_loss_mask_6: 0.1681  m2_loss_dice_6: 1.129  m2_loss_ce_7: 0.5074  m2_loss_mask_7: 0.1664  m2_loss_dice_7: 1.182  m2_loss_ce_8: 0.4854  m2_loss_mask_8: 0.1658  m2_loss_dice_8: 1.155  com_loss_ce: 1.77  com_loss_mask: 0.6924  com_loss_dice: 0.9714    time: 1.4351  last_time: 1.5176  data_time: 0.0546  last_data_time: 0.0516   lr: 0.0001  max_mem: 36328M
[09/08 18:41:01] d2.utils.events INFO:  eta: 0:01:25  iter: 939  total_loss: 42.7  m1_loss_ce: 0.5019  m1_loss_mask: 0.1607  m1_loss_dice: 1.209  m1_loss_ce_0: 0.5638  m1_loss_mask_0: 0.1888  m1_loss_dice_0: 1.352  m1_loss_ce_1: 0.5871  m1_loss_mask_1: 0.1756  m1_loss_dice_1: 1.332  m1_loss_ce_2: 0.5552  m1_loss_mask_2: 0.1721  m1_loss_dice_2: 1.272  m1_loss_ce_3: 0.5209  m1_loss_mask_3: 0.162  m1_loss_dice_3: 1.225  m1_loss_ce_4: 0.4866  m1_loss_mask_4: 0.16  m1_loss_dice_4: 1.212  m1_loss_ce_5: 0.4791  m1_loss_mask_5: 0.1614  m1_loss_dice_5: 1.194  m1_loss_ce_6: 0.4676  m1_loss_mask_6: 0.1624  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.4769  m1_loss_mask_7: 0.1651  m1_loss_dice_7: 1.181  m1_loss_ce_8: 0.4624  m1_loss_mask_8: 0.1664  m1_loss_dice_8: 1.188  m2_loss_ce: 0.5462  m2_loss_mask: 0.1619  m2_loss_dice: 1.185  m2_loss_ce_0: 0.5883  m2_loss_mask_0: 0.1975  m2_loss_dice_0: 1.477  m2_loss_ce_1: 0.6929  m2_loss_mask_1: 0.1808  m2_loss_dice_1: 1.302  m2_loss_ce_2: 0.6371  m2_loss_mask_2: 0.1702  m2_loss_dice_2: 1.274  m2_loss_ce_3: 0.5645  m2_loss_mask_3: 0.1659  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.5473  m2_loss_mask_4: 0.164  m2_loss_dice_4: 1.212  m2_loss_ce_5: 0.5427  m2_loss_mask_5: 0.1607  m2_loss_dice_5: 1.199  m2_loss_ce_6: 0.5632  m2_loss_mask_6: 0.1631  m2_loss_dice_6: 1.218  m2_loss_ce_7: 0.5609  m2_loss_mask_7: 0.1622  m2_loss_dice_7: 1.202  m2_loss_ce_8: 0.5233  m2_loss_mask_8: 0.1628  m2_loss_dice_8: 1.241  com_loss_ce: 1.791  com_loss_mask: 0.6925  com_loss_dice: 0.9723    time: 1.4352  last_time: 1.4907  data_time: 0.0569  last_data_time: 0.0585   lr: 0.0001  max_mem: 36328M
[09/08 18:41:29] d2.utils.events INFO:  eta: 0:00:57  iter: 959  total_loss: 43.98  m1_loss_ce: 0.4617  m1_loss_mask: 0.1487  m1_loss_dice: 1.286  m1_loss_ce_0: 0.5109  m1_loss_mask_0: 0.1785  m1_loss_dice_0: 1.491  m1_loss_ce_1: 0.5831  m1_loss_mask_1: 0.1623  m1_loss_dice_1: 1.417  m1_loss_ce_2: 0.5214  m1_loss_mask_2: 0.1566  m1_loss_dice_2: 1.359  m1_loss_ce_3: 0.4899  m1_loss_mask_3: 0.1551  m1_loss_dice_3: 1.318  m1_loss_ce_4: 0.436  m1_loss_mask_4: 0.1517  m1_loss_dice_4: 1.31  m1_loss_ce_5: 0.4927  m1_loss_mask_5: 0.1487  m1_loss_dice_5: 1.285  m1_loss_ce_6: 0.4289  m1_loss_mask_6: 0.1487  m1_loss_dice_6: 1.265  m1_loss_ce_7: 0.4336  m1_loss_mask_7: 0.148  m1_loss_dice_7: 1.284  m1_loss_ce_8: 0.4349  m1_loss_mask_8: 0.1495  m1_loss_dice_8: 1.306  m2_loss_ce: 0.5084  m2_loss_mask: 0.1534  m2_loss_dice: 1.287  m2_loss_ce_0: 0.6262  m2_loss_mask_0: 0.1897  m2_loss_dice_0: 1.526  m2_loss_ce_1: 0.636  m2_loss_mask_1: 0.166  m2_loss_dice_1: 1.397  m2_loss_ce_2: 0.6043  m2_loss_mask_2: 0.1593  m2_loss_dice_2: 1.375  m2_loss_ce_3: 0.5281  m2_loss_mask_3: 0.1596  m2_loss_dice_3: 1.329  m2_loss_ce_4: 0.5495  m2_loss_mask_4: 0.1562  m2_loss_dice_4: 1.298  m2_loss_ce_5: 0.5575  m2_loss_mask_5: 0.1539  m2_loss_dice_5: 1.292  m2_loss_ce_6: 0.506  m2_loss_mask_6: 0.1547  m2_loss_dice_6: 1.255  m2_loss_ce_7: 0.512  m2_loss_mask_7: 0.1547  m2_loss_dice_7: 1.3  m2_loss_ce_8: 0.5185  m2_loss_mask_8: 0.1526  m2_loss_dice_8: 1.3  com_loss_ce: 1.776  com_loss_mask: 0.6924  com_loss_dice: 0.9734    time: 1.4349  last_time: 1.3705  data_time: 0.0546  last_data_time: 0.0463   lr: 0.0001  max_mem: 36328M
[09/08 18:41:58] d2.utils.events INFO:  eta: 0:00:28  iter: 979  total_loss: 43.71  m1_loss_ce: 0.4442  m1_loss_mask: 0.1548  m1_loss_dice: 1.258  m1_loss_ce_0: 0.5304  m1_loss_mask_0: 0.1735  m1_loss_dice_0: 1.442  m1_loss_ce_1: 0.5931  m1_loss_mask_1: 0.1639  m1_loss_dice_1: 1.357  m1_loss_ce_2: 0.5264  m1_loss_mask_2: 0.1567  m1_loss_dice_2: 1.312  m1_loss_ce_3: 0.5152  m1_loss_mask_3: 0.1544  m1_loss_dice_3: 1.307  m1_loss_ce_4: 0.4866  m1_loss_mask_4: 0.1539  m1_loss_dice_4: 1.28  m1_loss_ce_5: 0.4688  m1_loss_mask_5: 0.1526  m1_loss_dice_5: 1.264  m1_loss_ce_6: 0.4205  m1_loss_mask_6: 0.1555  m1_loss_dice_6: 1.253  m1_loss_ce_7: 0.4851  m1_loss_mask_7: 0.1538  m1_loss_dice_7: 1.268  m1_loss_ce_8: 0.4433  m1_loss_mask_8: 0.1549  m1_loss_dice_8: 1.283  m2_loss_ce: 0.5373  m2_loss_mask: 0.1578  m2_loss_dice: 1.252  m2_loss_ce_0: 0.6093  m2_loss_mask_0: 0.1916  m2_loss_dice_0: 1.504  m2_loss_ce_1: 0.7114  m2_loss_mask_1: 0.1692  m2_loss_dice_1: 1.353  m2_loss_ce_2: 0.6211  m2_loss_mask_2: 0.1597  m2_loss_dice_2: 1.345  m2_loss_ce_3: 0.5543  m2_loss_mask_3: 0.1562  m2_loss_dice_3: 1.295  m2_loss_ce_4: 0.5662  m2_loss_mask_4: 0.1599  m2_loss_dice_4: 1.233  m2_loss_ce_5: 0.5597  m2_loss_mask_5: 0.1575  m2_loss_dice_5: 1.27  m2_loss_ce_6: 0.5537  m2_loss_mask_6: 0.1579  m2_loss_dice_6: 1.286  m2_loss_ce_7: 0.5296  m2_loss_mask_7: 0.1587  m2_loss_dice_7: 1.248  m2_loss_ce_8: 0.577  m2_loss_mask_8: 0.1577  m2_loss_dice_8: 1.275  com_loss_ce: 1.79  com_loss_mask: 0.6925  com_loss_dice: 0.9734    time: 1.4348  last_time: 1.4381  data_time: 0.0540  last_data_time: 0.0567   lr: 0.0001  max_mem: 36328M
[09/08 18:42:28] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy/model_final.pth
[09/08 18:42:31] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 42.01  m1_loss_ce: 0.4573  m1_loss_mask: 0.1641  m1_loss_dice: 1.187  m1_loss_ce_0: 0.5674  m1_loss_mask_0: 0.1858  m1_loss_dice_0: 1.372  m1_loss_ce_1: 0.6115  m1_loss_mask_1: 0.1748  m1_loss_dice_1: 1.285  m1_loss_ce_2: 0.5447  m1_loss_mask_2: 0.1634  m1_loss_dice_2: 1.242  m1_loss_ce_3: 0.5191  m1_loss_mask_3: 0.1628  m1_loss_dice_3: 1.173  m1_loss_ce_4: 0.4531  m1_loss_mask_4: 0.1588  m1_loss_dice_4: 1.199  m1_loss_ce_5: 0.45  m1_loss_mask_5: 0.1596  m1_loss_dice_5: 1.206  m1_loss_ce_6: 0.4403  m1_loss_mask_6: 0.1616  m1_loss_dice_6: 1.152  m1_loss_ce_7: 0.4458  m1_loss_mask_7: 0.1632  m1_loss_dice_7: 1.194  m1_loss_ce_8: 0.4366  m1_loss_mask_8: 0.1615  m1_loss_dice_8: 1.156  m2_loss_ce: 0.503  m2_loss_mask: 0.169  m2_loss_dice: 1.222  m2_loss_ce_0: 0.5865  m2_loss_mask_0: 0.1964  m2_loss_dice_0: 1.446  m2_loss_ce_1: 0.6962  m2_loss_mask_1: 0.1809  m2_loss_dice_1: 1.318  m2_loss_ce_2: 0.6295  m2_loss_mask_2: 0.1712  m2_loss_dice_2: 1.243  m2_loss_ce_3: 0.5781  m2_loss_mask_3: 0.1689  m2_loss_dice_3: 1.207  m2_loss_ce_4: 0.5557  m2_loss_mask_4: 0.1712  m2_loss_dice_4: 1.248  m2_loss_ce_5: 0.5627  m2_loss_mask_5: 0.1695  m2_loss_dice_5: 1.228  m2_loss_ce_6: 0.5577  m2_loss_mask_6: 0.1717  m2_loss_dice_6: 1.206  m2_loss_ce_7: 0.5356  m2_loss_mask_7: 0.1694  m2_loss_dice_7: 1.217  m2_loss_ce_8: 0.5182  m2_loss_mask_8: 0.1693  m2_loss_dice_8: 1.192  com_loss_ce: 1.775  com_loss_mask: 0.6925  com_loss_dice: 0.973    time: 1.4354  last_time: 1.4729  data_time: 0.0510  last_data_time: 0.0401   lr: 0.0001  max_mem: 36328M
[09/08 18:42:31] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:23:52 (1.4354 s / it)
[09/08 18:42:31] d2.engine.hooks INFO: Total training time: 0:24:01 (0:00:09 on hooks)
[09/08 18:42:31] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[09/08 18:42:31] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[09/08 18:42:31] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/08 18:42:31] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[09/08 18:42:31] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[09/08 18:43:58] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval61pbfvp4 ...
[09/08 18:44:59] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 59.183 | 80.882 | 72.139 |      19       |
| Things | 50.884 | 80.458 | 63.052 |       8       |
| Stuff  | 65.218 | 81.190 | 78.748 |      11       |
[09/08 18:44:59] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.393 | 97.696 | 99.690 |     Stuff     |
| class_8  | 75.368 | 84.535 | 89.157 |     Stuff     |
| class_11 | 87.256 | 89.451 | 97.546 |     Stuff     |
| class_12 | 43.343 | 77.841 | 55.682 |     Stuff     |
| class_13 | 37.460 | 75.701 | 49.485 |     Stuff     |
| class_17 | 47.079 | 64.157 | 73.381 |     Stuff     |
| class_19 | 50.119 | 68.527 | 73.137 |     Stuff     |
| class_20 | 67.834 | 77.513 | 87.513 |     Stuff     |
| class_21 | 88.947 | 89.778 | 99.075 |     Stuff     |
| class_22 | 35.563 | 76.141 | 46.707 |     Stuff     |
| class_23 | 87.036 | 91.755 | 94.857 |     Stuff     |
| class_24 | 53.021 | 77.162 | 68.714 |    Things     |
| class_25 | 45.913 | 73.183 | 62.737 |    Things     |
| class_26 | 64.582 | 83.307 | 77.523 |    Things     |
| class_27 | 51.421 | 87.804 | 58.564 |    Things     |
| class_28 | 63.743 | 90.459 | 70.466 |    Things     |
| class_31 | 46.788 | 85.778 | 54.545 |    Things     |
| class_32 | 39.967 | 74.056 | 53.968 |    Things     |
| class_33 | 41.639 | 71.916 | 57.900 |    Things     |
[09/08 18:44:59] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[09/08 18:44:59] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[09/08 18:44:59] d2.evaluation.testing INFO: copypaste: 59.1828,80.8820,72.1393,50.8843,80.4581,63.0522,65.2180,81.1903,78.7481,97.3929,97.6960,99.6898,75.3682,84.5346,89.1566,87.2558,89.4509,97.5460,43.3433,77.8410,55.6818,37.4601,75.7006,49.4845,47.0790,64.1567,73.3813,50.1187,68.5273,73.1369,67.8340,77.5128,87.5133,88.9474,89.7778,99.0750,35.5628,76.1408,46.7066,87.0360,91.7548,94.8571,53.0210,77.1622,68.7138,45.9127,73.1825,62.7373,64.5824,83.3070,77.5234,51.4212,87.8041,58.5635,63.7429,90.4587,70.4663,46.7880,85.7779,54.5455,39.9668,74.0561,53.9683,41.6392,71.9160,57.8997
