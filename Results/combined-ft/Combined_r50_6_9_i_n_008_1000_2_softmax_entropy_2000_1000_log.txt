[09/07 16:28:18] detectron2 INFO: Rank of current process: 0. World size: 2
[09/07 16:28:19] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[09/07 16:28:19] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy_2000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[09/07 16:28:19] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy_2000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_softmax_entropy_2000_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[09/07 16:28:19] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_softmax_entropy_2000_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[09/07 16:28:19] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_softmax_entropy_2000_1000/config.yaml
[09/07 16:28:19] d2.utils.env INFO: Using a generated random seed 20555274
[09/07 16:28:23] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[09/07 16:28:23] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[09/07 16:28:23] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[09/07 16:28:23] d2.data.build INFO: Using training sampler TrainingSampler
[09/07 16:28:24] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/07 16:28:24] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[09/07 16:28:24] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[09/07 16:28:24] d2.data.build INFO: Making batched data loader with batch_size=4
[09/07 16:28:24] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[09/07 16:28:27] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[09/07 16:28:27] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth ...
[09/07 16:28:27] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth ...
[09/07 16:28:47] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth ...
[09/07 16:28:47] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth ...
[09/07 16:29:23] d2.utils.events INFO:  eta: 0:24:16  iter: 19  total_loss: 42.18  m1_loss_ce: 0.4653  m1_loss_mask: 0.1612  m1_loss_dice: 1.129  m1_loss_ce_0: 0.6302  m1_loss_mask_0: 0.1937  m1_loss_dice_0: 1.34  m1_loss_ce_1: 0.6445  m1_loss_mask_1: 0.1727  m1_loss_dice_1: 1.272  m1_loss_ce_2: 0.5937  m1_loss_mask_2: 0.1673  m1_loss_dice_2: 1.237  m1_loss_ce_3: 0.5438  m1_loss_mask_3: 0.1688  m1_loss_dice_3: 1.177  m1_loss_ce_4: 0.4909  m1_loss_mask_4: 0.165  m1_loss_dice_4: 1.177  m1_loss_ce_5: 0.5175  m1_loss_mask_5: 0.1625  m1_loss_dice_5: 1.169  m1_loss_ce_6: 0.4925  m1_loss_mask_6: 0.165  m1_loss_dice_6: 1.155  m1_loss_ce_7: 0.4806  m1_loss_mask_7: 0.1634  m1_loss_dice_7: 1.156  m1_loss_ce_8: 0.481  m1_loss_mask_8: 0.1613  m1_loss_dice_8: 1.137  m2_loss_ce: 0.4635  m2_loss_mask: 0.1646  m2_loss_dice: 1.151  m2_loss_ce_0: 0.5997  m2_loss_mask_0: 0.195  m2_loss_dice_0: 1.352  m2_loss_ce_1: 0.6016  m2_loss_mask_1: 0.1789  m2_loss_dice_1: 1.279  m2_loss_ce_2: 0.5701  m2_loss_mask_2: 0.1708  m2_loss_dice_2: 1.249  m2_loss_ce_3: 0.4929  m2_loss_mask_3: 0.1722  m2_loss_dice_3: 1.177  m2_loss_ce_4: 0.4807  m2_loss_mask_4: 0.1721  m2_loss_dice_4: 1.185  m2_loss_ce_5: 0.4868  m2_loss_mask_5: 0.1681  m2_loss_dice_5: 1.169  m2_loss_ce_6: 0.4778  m2_loss_mask_6: 0.1692  m2_loss_dice_6: 1.151  m2_loss_ce_7: 0.479  m2_loss_mask_7: 0.1662  m2_loss_dice_7: 1.136  m2_loss_ce_8: 0.4591  m2_loss_mask_8: 0.1666  m2_loss_dice_8: 1.161  com_loss_ce: 1.733  com_loss_mask: 0.6925  com_loss_dice: 0.9698    time: 1.4615  last_time: 1.3227  data_time: 0.2544  last_data_time: 0.0444   lr: 0.0001  max_mem: 34574M
[09/07 16:29:42] d2.engine.hooks INFO: Overall training speed: 30 iterations in 0:00:44 (1.4860 s / it)
[09/07 16:29:42] d2.engine.hooks INFO: Total training time: 0:00:44 (0:00:00 on hooks)
[09/07 16:29:42] d2.utils.events INFO:  eta: 0:23:44  iter: 32  total_loss: 42.01  m1_loss_ce: 0.4885  m1_loss_mask: 0.1607  m1_loss_dice: 1.189  m1_loss_ce_0: 0.596  m1_loss_mask_0: 0.1937  m1_loss_dice_0: 1.392  m1_loss_ce_1: 0.644  m1_loss_mask_1: 0.1714  m1_loss_dice_1: 1.308  m1_loss_ce_2: 0.5899  m1_loss_mask_2: 0.1673  m1_loss_dice_2: 1.26  m1_loss_ce_3: 0.5353  m1_loss_mask_3: 0.1641  m1_loss_dice_3: 1.228  m1_loss_ce_4: 0.5138  m1_loss_mask_4: 0.1643  m1_loss_dice_4: 1.198  m1_loss_ce_5: 0.5175  m1_loss_mask_5: 0.1617  m1_loss_dice_5: 1.214  m1_loss_ce_6: 0.509  m1_loss_mask_6: 0.1605  m1_loss_dice_6: 1.184  m1_loss_ce_7: 0.4679  m1_loss_mask_7: 0.1625  m1_loss_dice_7: 1.176  m1_loss_ce_8: 0.4916  m1_loss_mask_8: 0.161  m1_loss_dice_8: 1.168  m2_loss_ce: 0.4544  m2_loss_mask: 0.1654  m2_loss_dice: 1.164  m2_loss_ce_0: 0.6023  m2_loss_mask_0: 0.1882  m2_loss_dice_0: 1.388  m2_loss_ce_1: 0.6124  m2_loss_mask_1: 0.1766  m2_loss_dice_1: 1.296  m2_loss_ce_2: 0.5672  m2_loss_mask_2: 0.1673  m2_loss_dice_2: 1.246  m2_loss_ce_3: 0.5018  m2_loss_mask_3: 0.1685  m2_loss_dice_3: 1.174  m2_loss_ce_4: 0.4736  m2_loss_mask_4: 0.1698  m2_loss_dice_4: 1.211  m2_loss_ce_5: 0.49  m2_loss_mask_5: 0.1676  m2_loss_dice_5: 1.2  m2_loss_ce_6: 0.483  m2_loss_mask_6: 0.1655  m2_loss_dice_6: 1.163  m2_loss_ce_7: 0.4793  m2_loss_mask_7: 0.1677  m2_loss_dice_7: 1.176  m2_loss_ce_8: 0.4543  m2_loss_mask_8: 0.1666  m2_loss_dice_8: 1.18  com_loss_ce: 1.731  com_loss_mask: 0.6925  com_loss_dice: 0.9703    time: 1.4614  last_time: 1.3593  data_time: 0.0436  last_data_time: 0.0441   lr: 0.0001  max_mem: 34739M
[09/07 16:30:10] detectron2 INFO: Rank of current process: 0. World size: 2
[09/07 16:30:11] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[09/07 16:30:11] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy_2000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[09/07 16:30:11] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy_2000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_softmax_entropy_2000_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[09/07 16:30:11] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_softmax_entropy_2000_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[09/07 16:30:11] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_softmax_entropy_2000_1000/config.yaml
[09/07 16:30:11] d2.utils.env INFO: Using a generated random seed 12625574
[09/07 16:30:15] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[09/07 16:30:15] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[09/07 16:30:15] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[09/07 16:30:16] d2.data.build INFO: Using training sampler TrainingSampler
[09/07 16:30:16] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/07 16:30:16] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[09/07 16:30:16] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[09/07 16:30:16] d2.data.build INFO: Making batched data loader with batch_size=4
[09/07 16:30:16] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[09/07 16:30:19] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[09/07 16:30:19] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth ...
[09/07 16:30:19] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth ...
[09/07 16:30:19] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth ...
[09/07 16:30:19] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_2000_19/model_final.pth ...
[09/07 16:30:54] d2.utils.events INFO:  eta: 0:23:23  iter: 19  total_loss: 43.95  m1_loss_ce: 0.5166  m1_loss_mask: 0.1604  m1_loss_dice: 1.227  m1_loss_ce_0: 0.6247  m1_loss_mask_0: 0.1774  m1_loss_dice_0: 1.396  m1_loss_ce_1: 0.7075  m1_loss_mask_1: 0.1651  m1_loss_dice_1: 1.368  m1_loss_ce_2: 0.6812  m1_loss_mask_2: 0.161  m1_loss_dice_2: 1.332  m1_loss_ce_3: 0.5805  m1_loss_mask_3: 0.1654  m1_loss_dice_3: 1.243  m1_loss_ce_4: 0.521  m1_loss_mask_4: 0.1617  m1_loss_dice_4: 1.242  m1_loss_ce_5: 0.519  m1_loss_mask_5: 0.1609  m1_loss_dice_5: 1.199  m1_loss_ce_6: 0.5198  m1_loss_mask_6: 0.1633  m1_loss_dice_6: 1.187  m1_loss_ce_7: 0.505  m1_loss_mask_7: 0.1581  m1_loss_dice_7: 1.187  m1_loss_ce_8: 0.5356  m1_loss_mask_8: 0.1569  m1_loss_dice_8: 1.199  m2_loss_ce: 0.4781  m2_loss_mask: 0.1576  m2_loss_dice: 1.213  m2_loss_ce_0: 0.6376  m2_loss_mask_0: 0.1857  m2_loss_dice_0: 1.432  m2_loss_ce_1: 0.6938  m2_loss_mask_1: 0.173  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.6206  m2_loss_mask_2: 0.1642  m2_loss_dice_2: 1.321  m2_loss_ce_3: 0.5609  m2_loss_mask_3: 0.1622  m2_loss_dice_3: 1.24  m2_loss_ce_4: 0.5189  m2_loss_mask_4: 0.1601  m2_loss_dice_4: 1.215  m2_loss_ce_5: 0.5248  m2_loss_mask_5: 0.1631  m2_loss_dice_5: 1.232  m2_loss_ce_6: 0.522  m2_loss_mask_6: 0.1614  m2_loss_dice_6: 1.231  m2_loss_ce_7: 0.4922  m2_loss_mask_7: 0.1594  m2_loss_dice_7: 1.25  m2_loss_ce_8: 0.4989  m2_loss_mask_8: 0.1586  m2_loss_dice_8: 1.22  com_loss_ce: 1.744  com_loss_mask: 0.6925  com_loss_dice: 0.9713    time: 1.4479  last_time: 1.3390  data_time: 0.2412  last_data_time: 0.0363   lr: 0.0001  max_mem: 34650M
[09/07 16:31:23] d2.utils.events INFO:  eta: 0:22:54  iter: 39  total_loss: 44.52  m1_loss_ce: 0.5373  m1_loss_mask: 0.1607  m1_loss_dice: 1.287  m1_loss_ce_0: 0.6376  m1_loss_mask_0: 0.1941  m1_loss_dice_0: 1.47  m1_loss_ce_1: 0.6801  m1_loss_mask_1: 0.1737  m1_loss_dice_1: 1.428  m1_loss_ce_2: 0.6296  m1_loss_mask_2: 0.1727  m1_loss_dice_2: 1.338  m1_loss_ce_3: 0.545  m1_loss_mask_3: 0.1671  m1_loss_dice_3: 1.301  m1_loss_ce_4: 0.5388  m1_loss_mask_4: 0.1647  m1_loss_dice_4: 1.314  m1_loss_ce_5: 0.5265  m1_loss_mask_5: 0.1642  m1_loss_dice_5: 1.262  m1_loss_ce_6: 0.5112  m1_loss_mask_6: 0.1626  m1_loss_dice_6: 1.248  m1_loss_ce_7: 0.5377  m1_loss_mask_7: 0.1649  m1_loss_dice_7: 1.284  m1_loss_ce_8: 0.5243  m1_loss_mask_8: 0.1606  m1_loss_dice_8: 1.268  m2_loss_ce: 0.5109  m2_loss_mask: 0.16  m2_loss_dice: 1.267  m2_loss_ce_0: 0.6544  m2_loss_mask_0: 0.1892  m2_loss_dice_0: 1.435  m2_loss_ce_1: 0.7181  m2_loss_mask_1: 0.1699  m2_loss_dice_1: 1.407  m2_loss_ce_2: 0.6666  m2_loss_mask_2: 0.1649  m2_loss_dice_2: 1.328  m2_loss_ce_3: 0.5866  m2_loss_mask_3: 0.1627  m2_loss_dice_3: 1.282  m2_loss_ce_4: 0.5558  m2_loss_mask_4: 0.1619  m2_loss_dice_4: 1.263  m2_loss_ce_5: 0.564  m2_loss_mask_5: 0.1605  m2_loss_dice_5: 1.276  m2_loss_ce_6: 0.4979  m2_loss_mask_6: 0.1599  m2_loss_dice_6: 1.26  m2_loss_ce_7: 0.4932  m2_loss_mask_7: 0.1607  m2_loss_dice_7: 1.236  m2_loss_ce_8: 0.4972  m2_loss_mask_8: 0.1607  m2_loss_dice_8: 1.276  com_loss_ce: 1.754  com_loss_mask: 0.6925  com_loss_dice: 0.9731    time: 1.4287  last_time: 1.5059  data_time: 0.0539  last_data_time: 0.0476   lr: 0.0001  max_mem: 34809M
[09/07 16:31:52] d2.utils.events INFO:  eta: 0:22:30  iter: 59  total_loss: 42.69  m1_loss_ce: 0.5438  m1_loss_mask: 0.1536  m1_loss_dice: 1.203  m1_loss_ce_0: 0.6044  m1_loss_mask_0: 0.167  m1_loss_dice_0: 1.374  m1_loss_ce_1: 0.6785  m1_loss_mask_1: 0.1583  m1_loss_dice_1: 1.35  m1_loss_ce_2: 0.6323  m1_loss_mask_2: 0.1537  m1_loss_dice_2: 1.251  m1_loss_ce_3: 0.5871  m1_loss_mask_3: 0.1588  m1_loss_dice_3: 1.214  m1_loss_ce_4: 0.5942  m1_loss_mask_4: 0.1564  m1_loss_dice_4: 1.167  m1_loss_ce_5: 0.5559  m1_loss_mask_5: 0.1582  m1_loss_dice_5: 1.268  m1_loss_ce_6: 0.5238  m1_loss_mask_6: 0.1552  m1_loss_dice_6: 1.195  m1_loss_ce_7: 0.5236  m1_loss_mask_7: 0.1568  m1_loss_dice_7: 1.191  m1_loss_ce_8: 0.506  m1_loss_mask_8: 0.1557  m1_loss_dice_8: 1.18  m2_loss_ce: 0.5028  m2_loss_mask: 0.1609  m2_loss_dice: 1.16  m2_loss_ce_0: 0.6243  m2_loss_mask_0: 0.1765  m2_loss_dice_0: 1.412  m2_loss_ce_1: 0.6917  m2_loss_mask_1: 0.1672  m2_loss_dice_1: 1.303  m2_loss_ce_2: 0.6336  m2_loss_mask_2: 0.158  m2_loss_dice_2: 1.276  m2_loss_ce_3: 0.5554  m2_loss_mask_3: 0.1647  m2_loss_dice_3: 1.21  m2_loss_ce_4: 0.5376  m2_loss_mask_4: 0.1623  m2_loss_dice_4: 1.219  m2_loss_ce_5: 0.5075  m2_loss_mask_5: 0.1609  m2_loss_dice_5: 1.227  m2_loss_ce_6: 0.5121  m2_loss_mask_6: 0.1607  m2_loss_dice_6: 1.145  m2_loss_ce_7: 0.5271  m2_loss_mask_7: 0.159  m2_loss_dice_7: 1.139  m2_loss_ce_8: 0.4945  m2_loss_mask_8: 0.1607  m2_loss_dice_8: 1.159  com_loss_ce: 1.755  com_loss_mask: 0.6925  com_loss_dice: 0.9713    time: 1.4326  last_time: 1.4053  data_time: 0.0466  last_data_time: 0.0465   lr: 0.0001  max_mem: 34837M
[09/07 16:32:21] d2.utils.events INFO:  eta: 0:22:02  iter: 79  total_loss: 42.15  m1_loss_ce: 0.5076  m1_loss_mask: 0.1576  m1_loss_dice: 1.184  m1_loss_ce_0: 0.594  m1_loss_mask_0: 0.1838  m1_loss_dice_0: 1.427  m1_loss_ce_1: 0.6704  m1_loss_mask_1: 0.1662  m1_loss_dice_1: 1.342  m1_loss_ce_2: 0.585  m1_loss_mask_2: 0.1641  m1_loss_dice_2: 1.301  m1_loss_ce_3: 0.5267  m1_loss_mask_3: 0.1613  m1_loss_dice_3: 1.229  m1_loss_ce_4: 0.4878  m1_loss_mask_4: 0.1615  m1_loss_dice_4: 1.219  m1_loss_ce_5: 0.474  m1_loss_mask_5: 0.1583  m1_loss_dice_5: 1.201  m1_loss_ce_6: 0.4892  m1_loss_mask_6: 0.1578  m1_loss_dice_6: 1.17  m1_loss_ce_7: 0.4418  m1_loss_mask_7: 0.1597  m1_loss_dice_7: 1.186  m1_loss_ce_8: 0.4749  m1_loss_mask_8: 0.1559  m1_loss_dice_8: 1.182  m2_loss_ce: 0.4655  m2_loss_mask: 0.1526  m2_loss_dice: 1.174  m2_loss_ce_0: 0.6085  m2_loss_mask_0: 0.1882  m2_loss_dice_0: 1.477  m2_loss_ce_1: 0.6614  m2_loss_mask_1: 0.1678  m2_loss_dice_1: 1.353  m2_loss_ce_2: 0.6112  m2_loss_mask_2: 0.1571  m2_loss_dice_2: 1.3  m2_loss_ce_3: 0.5383  m2_loss_mask_3: 0.1562  m2_loss_dice_3: 1.186  m2_loss_ce_4: 0.5112  m2_loss_mask_4: 0.1552  m2_loss_dice_4: 1.208  m2_loss_ce_5: 0.4852  m2_loss_mask_5: 0.1556  m2_loss_dice_5: 1.231  m2_loss_ce_6: 0.477  m2_loss_mask_6: 0.1528  m2_loss_dice_6: 1.195  m2_loss_ce_7: 0.4766  m2_loss_mask_7: 0.1542  m2_loss_dice_7: 1.192  m2_loss_ce_8: 0.4478  m2_loss_mask_8: 0.1538  m2_loss_dice_8: 1.189  com_loss_ce: 1.73  com_loss_mask: 0.6925  com_loss_dice: 0.9719    time: 1.4382  last_time: 1.3721  data_time: 0.0470  last_data_time: 0.0386   lr: 0.0001  max_mem: 35724M
[09/07 16:32:51] d2.utils.events INFO:  eta: 0:21:38  iter: 99  total_loss: 40.36  m1_loss_ce: 0.4895  m1_loss_mask: 0.1548  m1_loss_dice: 1.122  m1_loss_ce_0: 0.5644  m1_loss_mask_0: 0.1891  m1_loss_dice_0: 1.337  m1_loss_ce_1: 0.6674  m1_loss_mask_1: 0.1645  m1_loss_dice_1: 1.243  m1_loss_ce_2: 0.5931  m1_loss_mask_2: 0.162  m1_loss_dice_2: 1.211  m1_loss_ce_3: 0.5479  m1_loss_mask_3: 0.1605  m1_loss_dice_3: 1.149  m1_loss_ce_4: 0.5173  m1_loss_mask_4: 0.1599  m1_loss_dice_4: 1.157  m1_loss_ce_5: 0.5037  m1_loss_mask_5: 0.1582  m1_loss_dice_5: 1.173  m1_loss_ce_6: 0.5105  m1_loss_mask_6: 0.1634  m1_loss_dice_6: 1.113  m1_loss_ce_7: 0.4701  m1_loss_mask_7: 0.1583  m1_loss_dice_7: 1.154  m1_loss_ce_8: 0.4803  m1_loss_mask_8: 0.1584  m1_loss_dice_8: 1.118  m2_loss_ce: 0.4512  m2_loss_mask: 0.1585  m2_loss_dice: 1.106  m2_loss_ce_0: 0.5919  m2_loss_mask_0: 0.185  m2_loss_dice_0: 1.3  m2_loss_ce_1: 0.6649  m2_loss_mask_1: 0.1834  m2_loss_dice_1: 1.227  m2_loss_ce_2: 0.5785  m2_loss_mask_2: 0.1675  m2_loss_dice_2: 1.217  m2_loss_ce_3: 0.5162  m2_loss_mask_3: 0.1637  m2_loss_dice_3: 1.184  m2_loss_ce_4: 0.5104  m2_loss_mask_4: 0.161  m2_loss_dice_4: 1.148  m2_loss_ce_5: 0.4982  m2_loss_mask_5: 0.1625  m2_loss_dice_5: 1.142  m2_loss_ce_6: 0.5027  m2_loss_mask_6: 0.1607  m2_loss_dice_6: 1.129  m2_loss_ce_7: 0.4829  m2_loss_mask_7: 0.1603  m2_loss_dice_7: 1.118  m2_loss_ce_8: 0.4843  m2_loss_mask_8: 0.1602  m2_loss_dice_8: 1.109  com_loss_ce: 1.73  com_loss_mask: 0.6924  com_loss_dice: 0.9696    time: 1.4448  last_time: 1.4400  data_time: 0.0414  last_data_time: 0.0676   lr: 0.0001  max_mem: 35724M
[09/07 16:33:20] d2.utils.events INFO:  eta: 0:21:09  iter: 119  total_loss: 40.61  m1_loss_ce: 0.4857  m1_loss_mask: 0.1611  m1_loss_dice: 1.125  m1_loss_ce_0: 0.6005  m1_loss_mask_0: 0.1843  m1_loss_dice_0: 1.292  m1_loss_ce_1: 0.6508  m1_loss_mask_1: 0.1698  m1_loss_dice_1: 1.255  m1_loss_ce_2: 0.5829  m1_loss_mask_2: 0.1623  m1_loss_dice_2: 1.187  m1_loss_ce_3: 0.5232  m1_loss_mask_3: 0.1642  m1_loss_dice_3: 1.166  m1_loss_ce_4: 0.4907  m1_loss_mask_4: 0.1608  m1_loss_dice_4: 1.134  m1_loss_ce_5: 0.4816  m1_loss_mask_5: 0.1599  m1_loss_dice_5: 1.147  m1_loss_ce_6: 0.498  m1_loss_mask_6: 0.1607  m1_loss_dice_6: 1.134  m1_loss_ce_7: 0.4678  m1_loss_mask_7: 0.1622  m1_loss_dice_7: 1.125  m1_loss_ce_8: 0.4841  m1_loss_mask_8: 0.1611  m1_loss_dice_8: 1.141  m2_loss_ce: 0.4862  m2_loss_mask: 0.1615  m2_loss_dice: 1.119  m2_loss_ce_0: 0.6429  m2_loss_mask_0: 0.1893  m2_loss_dice_0: 1.29  m2_loss_ce_1: 0.669  m2_loss_mask_1: 0.1749  m2_loss_dice_1: 1.214  m2_loss_ce_2: 0.6043  m2_loss_mask_2: 0.1682  m2_loss_dice_2: 1.207  m2_loss_ce_3: 0.5287  m2_loss_mask_3: 0.1659  m2_loss_dice_3: 1.157  m2_loss_ce_4: 0.4663  m2_loss_mask_4: 0.1639  m2_loss_dice_4: 1.179  m2_loss_ce_5: 0.4706  m2_loss_mask_5: 0.1635  m2_loss_dice_5: 1.141  m2_loss_ce_6: 0.4782  m2_loss_mask_6: 0.1625  m2_loss_dice_6: 1.127  m2_loss_ce_7: 0.4509  m2_loss_mask_7: 0.1618  m2_loss_dice_7: 1.12  m2_loss_ce_8: 0.4668  m2_loss_mask_8: 0.1609  m2_loss_dice_8: 1.125  com_loss_ce: 1.718  com_loss_mask: 0.6925  com_loss_dice: 0.9683    time: 1.4440  last_time: 1.4299  data_time: 0.0395  last_data_time: 0.0350   lr: 0.0001  max_mem: 35724M
[09/07 16:33:48] d2.utils.events INFO:  eta: 0:20:38  iter: 139  total_loss: 43.34  m1_loss_ce: 0.5191  m1_loss_mask: 0.1614  m1_loss_dice: 1.249  m1_loss_ce_0: 0.6298  m1_loss_mask_0: 0.1871  m1_loss_dice_0: 1.424  m1_loss_ce_1: 0.6876  m1_loss_mask_1: 0.1739  m1_loss_dice_1: 1.342  m1_loss_ce_2: 0.6141  m1_loss_mask_2: 0.1667  m1_loss_dice_2: 1.292  m1_loss_ce_3: 0.5638  m1_loss_mask_3: 0.1635  m1_loss_dice_3: 1.254  m1_loss_ce_4: 0.5498  m1_loss_mask_4: 0.1595  m1_loss_dice_4: 1.251  m1_loss_ce_5: 0.5445  m1_loss_mask_5: 0.1586  m1_loss_dice_5: 1.235  m1_loss_ce_6: 0.5069  m1_loss_mask_6: 0.158  m1_loss_dice_6: 1.202  m1_loss_ce_7: 0.5229  m1_loss_mask_7: 0.1607  m1_loss_dice_7: 1.233  m1_loss_ce_8: 0.52  m1_loss_mask_8: 0.1578  m1_loss_dice_8: 1.212  m2_loss_ce: 0.4925  m2_loss_mask: 0.164  m2_loss_dice: 1.225  m2_loss_ce_0: 0.6832  m2_loss_mask_0: 0.1943  m2_loss_dice_0: 1.468  m2_loss_ce_1: 0.6434  m2_loss_mask_1: 0.1735  m2_loss_dice_1: 1.362  m2_loss_ce_2: 0.6152  m2_loss_mask_2: 0.1685  m2_loss_dice_2: 1.308  m2_loss_ce_3: 0.5627  m2_loss_mask_3: 0.1702  m2_loss_dice_3: 1.251  m2_loss_ce_4: 0.5073  m2_loss_mask_4: 0.1677  m2_loss_dice_4: 1.255  m2_loss_ce_5: 0.5202  m2_loss_mask_5: 0.1663  m2_loss_dice_5: 1.221  m2_loss_ce_6: 0.5495  m2_loss_mask_6: 0.1654  m2_loss_dice_6: 1.226  m2_loss_ce_7: 0.5119  m2_loss_mask_7: 0.1652  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.4843  m2_loss_mask_8: 0.1636  m2_loss_dice_8: 1.208  com_loss_ce: 1.75  com_loss_mask: 0.6925  com_loss_dice: 0.9716    time: 1.4406  last_time: 1.4280  data_time: 0.0439  last_data_time: 0.0341   lr: 0.0001  max_mem: 36082M
[09/07 16:34:16] d2.utils.events INFO:  eta: 0:20:07  iter: 159  total_loss: 41.72  m1_loss_ce: 0.4509  m1_loss_mask: 0.1561  m1_loss_dice: 1.171  m1_loss_ce_0: 0.5895  m1_loss_mask_0: 0.1845  m1_loss_dice_0: 1.374  m1_loss_ce_1: 0.6577  m1_loss_mask_1: 0.163  m1_loss_dice_1: 1.3  m1_loss_ce_2: 0.5954  m1_loss_mask_2: 0.1569  m1_loss_dice_2: 1.21  m1_loss_ce_3: 0.5349  m1_loss_mask_3: 0.1561  m1_loss_dice_3: 1.184  m1_loss_ce_4: 0.4919  m1_loss_mask_4: 0.1581  m1_loss_dice_4: 1.216  m1_loss_ce_5: 0.4858  m1_loss_mask_5: 0.1582  m1_loss_dice_5: 1.217  m1_loss_ce_6: 0.471  m1_loss_mask_6: 0.1572  m1_loss_dice_6: 1.181  m1_loss_ce_7: 0.4713  m1_loss_mask_7: 0.155  m1_loss_dice_7: 1.165  m1_loss_ce_8: 0.4694  m1_loss_mask_8: 0.1561  m1_loss_dice_8: 1.166  m2_loss_ce: 0.4522  m2_loss_mask: 0.1557  m2_loss_dice: 1.167  m2_loss_ce_0: 0.5924  m2_loss_mask_0: 0.1911  m2_loss_dice_0: 1.339  m2_loss_ce_1: 0.6035  m2_loss_mask_1: 0.1721  m2_loss_dice_1: 1.323  m2_loss_ce_2: 0.5814  m2_loss_mask_2: 0.168  m2_loss_dice_2: 1.262  m2_loss_ce_3: 0.5144  m2_loss_mask_3: 0.1627  m2_loss_dice_3: 1.193  m2_loss_ce_4: 0.5016  m2_loss_mask_4: 0.1626  m2_loss_dice_4: 1.175  m2_loss_ce_5: 0.4945  m2_loss_mask_5: 0.1629  m2_loss_dice_5: 1.164  m2_loss_ce_6: 0.4786  m2_loss_mask_6: 0.1596  m2_loss_dice_6: 1.169  m2_loss_ce_7: 0.4814  m2_loss_mask_7: 0.1545  m2_loss_dice_7: 1.164  m2_loss_ce_8: 0.4687  m2_loss_mask_8: 0.1568  m2_loss_dice_8: 1.164  com_loss_ce: 1.719  com_loss_mask: 0.6925  com_loss_dice: 0.9693    time: 1.4360  last_time: 1.5022  data_time: 0.0474  last_data_time: 0.0342   lr: 0.0001  max_mem: 36082M
[09/07 16:34:46] d2.utils.events INFO:  eta: 0:19:39  iter: 179  total_loss: 42.83  m1_loss_ce: 0.5212  m1_loss_mask: 0.1568  m1_loss_dice: 1.2  m1_loss_ce_0: 0.6201  m1_loss_mask_0: 0.1806  m1_loss_dice_0: 1.354  m1_loss_ce_1: 0.6613  m1_loss_mask_1: 0.1667  m1_loss_dice_1: 1.259  m1_loss_ce_2: 0.6122  m1_loss_mask_2: 0.1603  m1_loss_dice_2: 1.237  m1_loss_ce_3: 0.5364  m1_loss_mask_3: 0.1616  m1_loss_dice_3: 1.172  m1_loss_ce_4: 0.5066  m1_loss_mask_4: 0.16  m1_loss_dice_4: 1.174  m1_loss_ce_5: 0.5081  m1_loss_mask_5: 0.1606  m1_loss_dice_5: 1.184  m1_loss_ce_6: 0.4797  m1_loss_mask_6: 0.1587  m1_loss_dice_6: 1.158  m1_loss_ce_7: 0.4983  m1_loss_mask_7: 0.1588  m1_loss_dice_7: 1.144  m1_loss_ce_8: 0.5066  m1_loss_mask_8: 0.1576  m1_loss_dice_8: 1.144  m2_loss_ce: 0.4606  m2_loss_mask: 0.1556  m2_loss_dice: 1.194  m2_loss_ce_0: 0.628  m2_loss_mask_0: 0.1872  m2_loss_dice_0: 1.348  m2_loss_ce_1: 0.6836  m2_loss_mask_1: 0.1663  m2_loss_dice_1: 1.32  m2_loss_ce_2: 0.6166  m2_loss_mask_2: 0.1648  m2_loss_dice_2: 1.258  m2_loss_ce_3: 0.5277  m2_loss_mask_3: 0.1601  m2_loss_dice_3: 1.215  m2_loss_ce_4: 0.5139  m2_loss_mask_4: 0.1591  m2_loss_dice_4: 1.234  m2_loss_ce_5: 0.4934  m2_loss_mask_5: 0.1584  m2_loss_dice_5: 1.194  m2_loss_ce_6: 0.4914  m2_loss_mask_6: 0.1568  m2_loss_dice_6: 1.2  m2_loss_ce_7: 0.4741  m2_loss_mask_7: 0.1566  m2_loss_dice_7: 1.185  m2_loss_ce_8: 0.4768  m2_loss_mask_8: 0.1566  m2_loss_dice_8: 1.156  com_loss_ce: 1.756  com_loss_mask: 0.6925  com_loss_dice: 0.9687    time: 1.4375  last_time: 1.4201  data_time: 0.0427  last_data_time: 0.0751   lr: 0.0001  max_mem: 36082M
[09/07 16:35:15] d2.utils.events INFO:  eta: 0:19:11  iter: 199  total_loss: 42.59  m1_loss_ce: 0.4619  m1_loss_mask: 0.1621  m1_loss_dice: 1.215  m1_loss_ce_0: 0.6131  m1_loss_mask_0: 0.1932  m1_loss_dice_0: 1.394  m1_loss_ce_1: 0.6428  m1_loss_mask_1: 0.1807  m1_loss_dice_1: 1.333  m1_loss_ce_2: 0.6058  m1_loss_mask_2: 0.1685  m1_loss_dice_2: 1.222  m1_loss_ce_3: 0.532  m1_loss_mask_3: 0.1682  m1_loss_dice_3: 1.197  m1_loss_ce_4: 0.4946  m1_loss_mask_4: 0.1684  m1_loss_dice_4: 1.189  m1_loss_ce_5: 0.5261  m1_loss_mask_5: 0.1618  m1_loss_dice_5: 1.154  m1_loss_ce_6: 0.4797  m1_loss_mask_6: 0.1627  m1_loss_dice_6: 1.2  m1_loss_ce_7: 0.4878  m1_loss_mask_7: 0.164  m1_loss_dice_7: 1.186  m1_loss_ce_8: 0.4833  m1_loss_mask_8: 0.1612  m1_loss_dice_8: 1.192  m2_loss_ce: 0.4707  m2_loss_mask: 0.1633  m2_loss_dice: 1.166  m2_loss_ce_0: 0.6449  m2_loss_mask_0: 0.189  m2_loss_dice_0: 1.383  m2_loss_ce_1: 0.6741  m2_loss_mask_1: 0.17  m2_loss_dice_1: 1.307  m2_loss_ce_2: 0.6263  m2_loss_mask_2: 0.1646  m2_loss_dice_2: 1.274  m2_loss_ce_3: 0.5525  m2_loss_mask_3: 0.1689  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.5298  m2_loss_mask_4: 0.1601  m2_loss_dice_4: 1.208  m2_loss_ce_5: 0.545  m2_loss_mask_5: 0.1616  m2_loss_dice_5: 1.174  m2_loss_ce_6: 0.5223  m2_loss_mask_6: 0.1605  m2_loss_dice_6: 1.165  m2_loss_ce_7: 0.4898  m2_loss_mask_7: 0.1637  m2_loss_dice_7: 1.201  m2_loss_ce_8: 0.5314  m2_loss_mask_8: 0.1642  m2_loss_dice_8: 1.177  com_loss_ce: 1.758  com_loss_mask: 0.6925  com_loss_dice: 0.971    time: 1.4414  last_time: 1.4590  data_time: 0.0509  last_data_time: 0.0341   lr: 0.0001  max_mem: 36082M
[09/07 16:35:45] d2.utils.events INFO:  eta: 0:18:45  iter: 219  total_loss: 43.64  m1_loss_ce: 0.562  m1_loss_mask: 0.1599  m1_loss_dice: 1.201  m1_loss_ce_0: 0.664  m1_loss_mask_0: 0.1916  m1_loss_dice_0: 1.381  m1_loss_ce_1: 0.6953  m1_loss_mask_1: 0.1755  m1_loss_dice_1: 1.33  m1_loss_ce_2: 0.6483  m1_loss_mask_2: 0.1654  m1_loss_dice_2: 1.28  m1_loss_ce_3: 0.5823  m1_loss_mask_3: 0.1659  m1_loss_dice_3: 1.208  m1_loss_ce_4: 0.5656  m1_loss_mask_4: 0.1645  m1_loss_dice_4: 1.214  m1_loss_ce_5: 0.5571  m1_loss_mask_5: 0.1596  m1_loss_dice_5: 1.202  m1_loss_ce_6: 0.5511  m1_loss_mask_6: 0.161  m1_loss_dice_6: 1.184  m1_loss_ce_7: 0.5323  m1_loss_mask_7: 0.1609  m1_loss_dice_7: 1.194  m1_loss_ce_8: 0.5285  m1_loss_mask_8: 0.1611  m1_loss_dice_8: 1.16  m2_loss_ce: 0.5252  m2_loss_mask: 0.1677  m2_loss_dice: 1.171  m2_loss_ce_0: 0.6645  m2_loss_mask_0: 0.1952  m2_loss_dice_0: 1.382  m2_loss_ce_1: 0.6943  m2_loss_mask_1: 0.1759  m2_loss_dice_1: 1.306  m2_loss_ce_2: 0.6318  m2_loss_mask_2: 0.1723  m2_loss_dice_2: 1.245  m2_loss_ce_3: 0.6049  m2_loss_mask_3: 0.1724  m2_loss_dice_3: 1.186  m2_loss_ce_4: 0.571  m2_loss_mask_4: 0.1696  m2_loss_dice_4: 1.202  m2_loss_ce_5: 0.5731  m2_loss_mask_5: 0.1696  m2_loss_dice_5: 1.198  m2_loss_ce_6: 0.5714  m2_loss_mask_6: 0.1698  m2_loss_dice_6: 1.191  m2_loss_ce_7: 0.5573  m2_loss_mask_7: 0.1693  m2_loss_dice_7: 1.172  m2_loss_ce_8: 0.5357  m2_loss_mask_8: 0.1688  m2_loss_dice_8: 1.152  com_loss_ce: 1.732  com_loss_mask: 0.6924  com_loss_dice: 0.9683    time: 1.4438  last_time: 1.5436  data_time: 0.0501  last_data_time: 0.0329   lr: 0.0001  max_mem: 36082M
[09/07 16:36:14] d2.utils.events INFO:  eta: 0:18:16  iter: 239  total_loss: 41.33  m1_loss_ce: 0.4726  m1_loss_mask: 0.1692  m1_loss_dice: 1.168  m1_loss_ce_0: 0.5737  m1_loss_mask_0: 0.203  m1_loss_dice_0: 1.354  m1_loss_ce_1: 0.6252  m1_loss_mask_1: 0.1751  m1_loss_dice_1: 1.235  m1_loss_ce_2: 0.574  m1_loss_mask_2: 0.175  m1_loss_dice_2: 1.222  m1_loss_ce_3: 0.5153  m1_loss_mask_3: 0.1706  m1_loss_dice_3: 1.204  m1_loss_ce_4: 0.5124  m1_loss_mask_4: 0.1704  m1_loss_dice_4: 1.199  m1_loss_ce_5: 0.4912  m1_loss_mask_5: 0.171  m1_loss_dice_5: 1.22  m1_loss_ce_6: 0.4577  m1_loss_mask_6: 0.1703  m1_loss_dice_6: 1.134  m1_loss_ce_7: 0.4732  m1_loss_mask_7: 0.1706  m1_loss_dice_7: 1.136  m1_loss_ce_8: 0.4628  m1_loss_mask_8: 0.1693  m1_loss_dice_8: 1.137  m2_loss_ce: 0.4629  m2_loss_mask: 0.1811  m2_loss_dice: 1.125  m2_loss_ce_0: 0.6274  m2_loss_mask_0: 0.2008  m2_loss_dice_0: 1.36  m2_loss_ce_1: 0.6294  m2_loss_mask_1: 0.1899  m2_loss_dice_1: 1.28  m2_loss_ce_2: 0.5787  m2_loss_mask_2: 0.1768  m2_loss_dice_2: 1.211  m2_loss_ce_3: 0.5175  m2_loss_mask_3: 0.1746  m2_loss_dice_3: 1.225  m2_loss_ce_4: 0.4994  m2_loss_mask_4: 0.1779  m2_loss_dice_4: 1.186  m2_loss_ce_5: 0.4973  m2_loss_mask_5: 0.1823  m2_loss_dice_5: 1.155  m2_loss_ce_6: 0.4761  m2_loss_mask_6: 0.1811  m2_loss_dice_6: 1.153  m2_loss_ce_7: 0.4672  m2_loss_mask_7: 0.1818  m2_loss_dice_7: 1.167  m2_loss_ce_8: 0.4803  m2_loss_mask_8: 0.1797  m2_loss_dice_8: 1.134  com_loss_ce: 1.707  com_loss_mask: 0.6925  com_loss_dice: 0.9706    time: 1.4436  last_time: 1.4436  data_time: 0.0428  last_data_time: 0.0438   lr: 0.0001  max_mem: 36082M
[09/07 16:36:43] d2.utils.events INFO:  eta: 0:17:49  iter: 259  total_loss: 41.5  m1_loss_ce: 0.4599  m1_loss_mask: 0.1642  m1_loss_dice: 1.169  m1_loss_ce_0: 0.5639  m1_loss_mask_0: 0.1916  m1_loss_dice_0: 1.355  m1_loss_ce_1: 0.6309  m1_loss_mask_1: 0.1808  m1_loss_dice_1: 1.289  m1_loss_ce_2: 0.5736  m1_loss_mask_2: 0.1672  m1_loss_dice_2: 1.211  m1_loss_ce_3: 0.5057  m1_loss_mask_3: 0.1687  m1_loss_dice_3: 1.18  m1_loss_ce_4: 0.4871  m1_loss_mask_4: 0.1687  m1_loss_dice_4: 1.194  m1_loss_ce_5: 0.4827  m1_loss_mask_5: 0.1672  m1_loss_dice_5: 1.16  m1_loss_ce_6: 0.4669  m1_loss_mask_6: 0.1651  m1_loss_dice_6: 1.17  m1_loss_ce_7: 0.4428  m1_loss_mask_7: 0.1668  m1_loss_dice_7: 1.17  m1_loss_ce_8: 0.4379  m1_loss_mask_8: 0.1684  m1_loss_dice_8: 1.165  m2_loss_ce: 0.4581  m2_loss_mask: 0.1692  m2_loss_dice: 1.159  m2_loss_ce_0: 0.6176  m2_loss_mask_0: 0.194  m2_loss_dice_0: 1.375  m2_loss_ce_1: 0.5937  m2_loss_mask_1: 0.1805  m2_loss_dice_1: 1.307  m2_loss_ce_2: 0.5633  m2_loss_mask_2: 0.1768  m2_loss_dice_2: 1.25  m2_loss_ce_3: 0.5051  m2_loss_mask_3: 0.1677  m2_loss_dice_3: 1.21  m2_loss_ce_4: 0.4958  m2_loss_mask_4: 0.1655  m2_loss_dice_4: 1.189  m2_loss_ce_5: 0.4724  m2_loss_mask_5: 0.1672  m2_loss_dice_5: 1.17  m2_loss_ce_6: 0.4766  m2_loss_mask_6: 0.1706  m2_loss_dice_6: 1.16  m2_loss_ce_7: 0.448  m2_loss_mask_7: 0.1661  m2_loss_dice_7: 1.178  m2_loss_ce_8: 0.4384  m2_loss_mask_8: 0.1701  m2_loss_dice_8: 1.192  com_loss_ce: 1.71  com_loss_mask: 0.6925  com_loss_dice: 0.9695    time: 1.4449  last_time: 1.4586  data_time: 0.0438  last_data_time: 0.0414   lr: 0.0001  max_mem: 36082M
[09/07 16:37:12] d2.utils.events INFO:  eta: 0:17:20  iter: 279  total_loss: 42.4  m1_loss_ce: 0.5067  m1_loss_mask: 0.1568  m1_loss_dice: 1.187  m1_loss_ce_0: 0.5986  m1_loss_mask_0: 0.1719  m1_loss_dice_0: 1.369  m1_loss_ce_1: 0.701  m1_loss_mask_1: 0.164  m1_loss_dice_1: 1.286  m1_loss_ce_2: 0.6039  m1_loss_mask_2: 0.1617  m1_loss_dice_2: 1.235  m1_loss_ce_3: 0.5631  m1_loss_mask_3: 0.1624  m1_loss_dice_3: 1.214  m1_loss_ce_4: 0.5761  m1_loss_mask_4: 0.1604  m1_loss_dice_4: 1.207  m1_loss_ce_5: 0.5227  m1_loss_mask_5: 0.1604  m1_loss_dice_5: 1.171  m1_loss_ce_6: 0.5288  m1_loss_mask_6: 0.1602  m1_loss_dice_6: 1.152  m1_loss_ce_7: 0.499  m1_loss_mask_7: 0.1595  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.4959  m1_loss_mask_8: 0.1595  m1_loss_dice_8: 1.166  m2_loss_ce: 0.4885  m2_loss_mask: 0.161  m2_loss_dice: 1.206  m2_loss_ce_0: 0.6101  m2_loss_mask_0: 0.1973  m2_loss_dice_0: 1.377  m2_loss_ce_1: 0.6558  m2_loss_mask_1: 0.1765  m2_loss_dice_1: 1.301  m2_loss_ce_2: 0.6023  m2_loss_mask_2: 0.1688  m2_loss_dice_2: 1.25  m2_loss_ce_3: 0.5492  m2_loss_mask_3: 0.1685  m2_loss_dice_3: 1.182  m2_loss_ce_4: 0.5016  m2_loss_mask_4: 0.1642  m2_loss_dice_4: 1.167  m2_loss_ce_5: 0.4973  m2_loss_mask_5: 0.1628  m2_loss_dice_5: 1.162  m2_loss_ce_6: 0.497  m2_loss_mask_6: 0.1651  m2_loss_dice_6: 1.159  m2_loss_ce_7: 0.4963  m2_loss_mask_7: 0.1638  m2_loss_dice_7: 1.168  m2_loss_ce_8: 0.4715  m2_loss_mask_8: 0.1661  m2_loss_dice_8: 1.169  com_loss_ce: 1.728  com_loss_mask: 0.6925  com_loss_dice: 0.9686    time: 1.4444  last_time: 1.4962  data_time: 0.0479  last_data_time: 0.0708   lr: 0.0001  max_mem: 36082M
[09/07 16:37:40] d2.utils.events INFO:  eta: 0:16:50  iter: 299  total_loss: 44.08  m1_loss_ce: 0.5317  m1_loss_mask: 0.1527  m1_loss_dice: 1.282  m1_loss_ce_0: 0.6139  m1_loss_mask_0: 0.1769  m1_loss_dice_0: 1.483  m1_loss_ce_1: 0.6955  m1_loss_mask_1: 0.1655  m1_loss_dice_1: 1.371  m1_loss_ce_2: 0.6424  m1_loss_mask_2: 0.159  m1_loss_dice_2: 1.303  m1_loss_ce_3: 0.587  m1_loss_mask_3: 0.1602  m1_loss_dice_3: 1.243  m1_loss_ce_4: 0.5555  m1_loss_mask_4: 0.1577  m1_loss_dice_4: 1.264  m1_loss_ce_5: 0.5834  m1_loss_mask_5: 0.1565  m1_loss_dice_5: 1.246  m1_loss_ce_6: 0.5212  m1_loss_mask_6: 0.1554  m1_loss_dice_6: 1.254  m1_loss_ce_7: 0.534  m1_loss_mask_7: 0.1562  m1_loss_dice_7: 1.23  m1_loss_ce_8: 0.5303  m1_loss_mask_8: 0.1536  m1_loss_dice_8: 1.257  m2_loss_ce: 0.521  m2_loss_mask: 0.1577  m2_loss_dice: 1.236  m2_loss_ce_0: 0.6561  m2_loss_mask_0: 0.1823  m2_loss_dice_0: 1.444  m2_loss_ce_1: 0.7027  m2_loss_mask_1: 0.1727  m2_loss_dice_1: 1.397  m2_loss_ce_2: 0.6515  m2_loss_mask_2: 0.1627  m2_loss_dice_2: 1.299  m2_loss_ce_3: 0.5845  m2_loss_mask_3: 0.1621  m2_loss_dice_3: 1.294  m2_loss_ce_4: 0.5724  m2_loss_mask_4: 0.1615  m2_loss_dice_4: 1.244  m2_loss_ce_5: 0.5581  m2_loss_mask_5: 0.1582  m2_loss_dice_5: 1.254  m2_loss_ce_6: 0.5416  m2_loss_mask_6: 0.1613  m2_loss_dice_6: 1.226  m2_loss_ce_7: 0.5534  m2_loss_mask_7: 0.1602  m2_loss_dice_7: 1.204  m2_loss_ce_8: 0.5363  m2_loss_mask_8: 0.1598  m2_loss_dice_8: 1.262  com_loss_ce: 1.746  com_loss_mask: 0.6925  com_loss_dice: 0.9715    time: 1.4424  last_time: 1.3719  data_time: 0.0453  last_data_time: 0.0386   lr: 0.0001  max_mem: 36082M
[09/07 16:38:09] d2.utils.events INFO:  eta: 0:16:21  iter: 319  total_loss: 42.34  m1_loss_ce: 0.495  m1_loss_mask: 0.1638  m1_loss_dice: 1.226  m1_loss_ce_0: 0.603  m1_loss_mask_0: 0.1892  m1_loss_dice_0: 1.345  m1_loss_ce_1: 0.6628  m1_loss_mask_1: 0.1784  m1_loss_dice_1: 1.355  m1_loss_ce_2: 0.6028  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.265  m1_loss_ce_3: 0.5413  m1_loss_mask_3: 0.163  m1_loss_dice_3: 1.223  m1_loss_ce_4: 0.5249  m1_loss_mask_4: 0.1626  m1_loss_dice_4: 1.206  m1_loss_ce_5: 0.5115  m1_loss_mask_5: 0.1618  m1_loss_dice_5: 1.225  m1_loss_ce_6: 0.5306  m1_loss_mask_6: 0.1622  m1_loss_dice_6: 1.177  m1_loss_ce_7: 0.5077  m1_loss_mask_7: 0.1646  m1_loss_dice_7: 1.21  m1_loss_ce_8: 0.4855  m1_loss_mask_8: 0.164  m1_loss_dice_8: 1.195  m2_loss_ce: 0.4789  m2_loss_mask: 0.1671  m2_loss_dice: 1.158  m2_loss_ce_0: 0.5926  m2_loss_mask_0: 0.1933  m2_loss_dice_0: 1.367  m2_loss_ce_1: 0.6365  m2_loss_mask_1: 0.1749  m2_loss_dice_1: 1.31  m2_loss_ce_2: 0.6182  m2_loss_mask_2: 0.1737  m2_loss_dice_2: 1.282  m2_loss_ce_3: 0.5366  m2_loss_mask_3: 0.1718  m2_loss_dice_3: 1.221  m2_loss_ce_4: 0.539  m2_loss_mask_4: 0.1735  m2_loss_dice_4: 1.19  m2_loss_ce_5: 0.5006  m2_loss_mask_5: 0.1673  m2_loss_dice_5: 1.2  m2_loss_ce_6: 0.4998  m2_loss_mask_6: 0.1657  m2_loss_dice_6: 1.172  m2_loss_ce_7: 0.5041  m2_loss_mask_7: 0.1651  m2_loss_dice_7: 1.184  m2_loss_ce_8: 0.4858  m2_loss_mask_8: 0.1657  m2_loss_dice_8: 1.185  com_loss_ce: 1.742  com_loss_mask: 0.6925  com_loss_dice: 0.9687    time: 1.4428  last_time: 1.4023  data_time: 0.0446  last_data_time: 0.0390   lr: 0.0001  max_mem: 36082M
[09/07 16:38:38] d2.utils.events INFO:  eta: 0:15:52  iter: 339  total_loss: 42.48  m1_loss_ce: 0.513  m1_loss_mask: 0.1526  m1_loss_dice: 1.186  m1_loss_ce_0: 0.622  m1_loss_mask_0: 0.1756  m1_loss_dice_0: 1.362  m1_loss_ce_1: 0.6473  m1_loss_mask_1: 0.1724  m1_loss_dice_1: 1.284  m1_loss_ce_2: 0.6328  m1_loss_mask_2: 0.1556  m1_loss_dice_2: 1.234  m1_loss_ce_3: 0.5599  m1_loss_mask_3: 0.153  m1_loss_dice_3: 1.197  m1_loss_ce_4: 0.5493  m1_loss_mask_4: 0.1525  m1_loss_dice_4: 1.199  m1_loss_ce_5: 0.5434  m1_loss_mask_5: 0.149  m1_loss_dice_5: 1.192  m1_loss_ce_6: 0.527  m1_loss_mask_6: 0.151  m1_loss_dice_6: 1.208  m1_loss_ce_7: 0.5175  m1_loss_mask_7: 0.1507  m1_loss_dice_7: 1.175  m1_loss_ce_8: 0.511  m1_loss_mask_8: 0.1515  m1_loss_dice_8: 1.159  m2_loss_ce: 0.5156  m2_loss_mask: 0.152  m2_loss_dice: 1.164  m2_loss_ce_0: 0.6341  m2_loss_mask_0: 0.1742  m2_loss_dice_0: 1.343  m2_loss_ce_1: 0.6673  m2_loss_mask_1: 0.1702  m2_loss_dice_1: 1.324  m2_loss_ce_2: 0.6416  m2_loss_mask_2: 0.1581  m2_loss_dice_2: 1.272  m2_loss_ce_3: 0.5331  m2_loss_mask_3: 0.1533  m2_loss_dice_3: 1.213  m2_loss_ce_4: 0.5194  m2_loss_mask_4: 0.1523  m2_loss_dice_4: 1.187  m2_loss_ce_5: 0.4933  m2_loss_mask_5: 0.1497  m2_loss_dice_5: 1.18  m2_loss_ce_6: 0.5162  m2_loss_mask_6: 0.1503  m2_loss_dice_6: 1.173  m2_loss_ce_7: 0.4966  m2_loss_mask_7: 0.1511  m2_loss_dice_7: 1.185  m2_loss_ce_8: 0.5208  m2_loss_mask_8: 0.1509  m2_loss_dice_8: 1.156  com_loss_ce: 1.741  com_loss_mask: 0.6925  com_loss_dice: 0.9714    time: 1.4419  last_time: 1.3496  data_time: 0.0472  last_data_time: 0.0345   lr: 0.0001  max_mem: 36082M
[09/07 16:39:07] d2.utils.events INFO:  eta: 0:15:22  iter: 359  total_loss: 43.18  m1_loss_ce: 0.522  m1_loss_mask: 0.1525  m1_loss_dice: 1.255  m1_loss_ce_0: 0.6257  m1_loss_mask_0: 0.1821  m1_loss_dice_0: 1.444  m1_loss_ce_1: 0.6592  m1_loss_mask_1: 0.1738  m1_loss_dice_1: 1.328  m1_loss_ce_2: 0.6233  m1_loss_mask_2: 0.164  m1_loss_dice_2: 1.306  m1_loss_ce_3: 0.5596  m1_loss_mask_3: 0.1574  m1_loss_dice_3: 1.267  m1_loss_ce_4: 0.5232  m1_loss_mask_4: 0.1537  m1_loss_dice_4: 1.245  m1_loss_ce_5: 0.5229  m1_loss_mask_5: 0.1516  m1_loss_dice_5: 1.246  m1_loss_ce_6: 0.5169  m1_loss_mask_6: 0.1544  m1_loss_dice_6: 1.248  m1_loss_ce_7: 0.5107  m1_loss_mask_7: 0.1521  m1_loss_dice_7: 1.195  m1_loss_ce_8: 0.4786  m1_loss_mask_8: 0.1513  m1_loss_dice_8: 1.235  m2_loss_ce: 0.4866  m2_loss_mask: 0.1557  m2_loss_dice: 1.214  m2_loss_ce_0: 0.6349  m2_loss_mask_0: 0.1842  m2_loss_dice_0: 1.433  m2_loss_ce_1: 0.6747  m2_loss_mask_1: 0.1679  m2_loss_dice_1: 1.375  m2_loss_ce_2: 0.5951  m2_loss_mask_2: 0.1646  m2_loss_dice_2: 1.263  m2_loss_ce_3: 0.5399  m2_loss_mask_3: 0.1637  m2_loss_dice_3: 1.257  m2_loss_ce_4: 0.5234  m2_loss_mask_4: 0.1603  m2_loss_dice_4: 1.229  m2_loss_ce_5: 0.5357  m2_loss_mask_5: 0.1565  m2_loss_dice_5: 1.226  m2_loss_ce_6: 0.492  m2_loss_mask_6: 0.1547  m2_loss_dice_6: 1.209  m2_loss_ce_7: 0.5043  m2_loss_mask_7: 0.1528  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.4998  m2_loss_mask_8: 0.1549  m2_loss_dice_8: 1.229  com_loss_ce: 1.752  com_loss_mask: 0.6925  com_loss_dice: 0.9697    time: 1.4420  last_time: 1.4176  data_time: 0.0534  last_data_time: 0.0347   lr: 0.0001  max_mem: 36082M
[09/07 16:39:36] d2.utils.events INFO:  eta: 0:14:54  iter: 379  total_loss: 39.37  m1_loss_ce: 0.4635  m1_loss_mask: 0.1486  m1_loss_dice: 1.144  m1_loss_ce_0: 0.5811  m1_loss_mask_0: 0.1691  m1_loss_dice_0: 1.37  m1_loss_ce_1: 0.6149  m1_loss_mask_1: 0.1586  m1_loss_dice_1: 1.296  m1_loss_ce_2: 0.5787  m1_loss_mask_2: 0.152  m1_loss_dice_2: 1.184  m1_loss_ce_3: 0.5232  m1_loss_mask_3: 0.1583  m1_loss_dice_3: 1.162  m1_loss_ce_4: 0.5054  m1_loss_mask_4: 0.1548  m1_loss_dice_4: 1.153  m1_loss_ce_5: 0.4759  m1_loss_mask_5: 0.1501  m1_loss_dice_5: 1.111  m1_loss_ce_6: 0.4622  m1_loss_mask_6: 0.1522  m1_loss_dice_6: 1.115  m1_loss_ce_7: 0.4584  m1_loss_mask_7: 0.1527  m1_loss_dice_7: 1.108  m1_loss_ce_8: 0.4602  m1_loss_mask_8: 0.1499  m1_loss_dice_8: 1.087  m2_loss_ce: 0.4718  m2_loss_mask: 0.1503  m2_loss_dice: 1.138  m2_loss_ce_0: 0.6173  m2_loss_mask_0: 0.1665  m2_loss_dice_0: 1.345  m2_loss_ce_1: 0.6439  m2_loss_mask_1: 0.1608  m2_loss_dice_1: 1.283  m2_loss_ce_2: 0.5874  m2_loss_mask_2: 0.1575  m2_loss_dice_2: 1.217  m2_loss_ce_3: 0.5095  m2_loss_mask_3: 0.1547  m2_loss_dice_3: 1.154  m2_loss_ce_4: 0.4949  m2_loss_mask_4: 0.1527  m2_loss_dice_4: 1.146  m2_loss_ce_5: 0.481  m2_loss_mask_5: 0.1516  m2_loss_dice_5: 1.115  m2_loss_ce_6: 0.4748  m2_loss_mask_6: 0.1522  m2_loss_dice_6: 1.125  m2_loss_ce_7: 0.4873  m2_loss_mask_7: 0.1506  m2_loss_dice_7: 1.111  m2_loss_ce_8: 0.4555  m2_loss_mask_8: 0.1511  m2_loss_dice_8: 1.138  com_loss_ce: 1.735  com_loss_mask: 0.6925  com_loss_dice: 0.9683    time: 1.4418  last_time: 1.4969  data_time: 0.0462  last_data_time: 0.0656   lr: 0.0001  max_mem: 36082M
[09/07 16:40:05] d2.utils.events INFO:  eta: 0:14:26  iter: 399  total_loss: 42.56  m1_loss_ce: 0.4744  m1_loss_mask: 0.1485  m1_loss_dice: 1.194  m1_loss_ce_0: 0.5767  m1_loss_mask_0: 0.1749  m1_loss_dice_0: 1.379  m1_loss_ce_1: 0.6406  m1_loss_mask_1: 0.1567  m1_loss_dice_1: 1.288  m1_loss_ce_2: 0.5734  m1_loss_mask_2: 0.1485  m1_loss_dice_2: 1.242  m1_loss_ce_3: 0.5438  m1_loss_mask_3: 0.149  m1_loss_dice_3: 1.195  m1_loss_ce_4: 0.5148  m1_loss_mask_4: 0.1479  m1_loss_dice_4: 1.194  m1_loss_ce_5: 0.498  m1_loss_mask_5: 0.1477  m1_loss_dice_5: 1.179  m1_loss_ce_6: 0.5005  m1_loss_mask_6: 0.1478  m1_loss_dice_6: 1.147  m1_loss_ce_7: 0.5029  m1_loss_mask_7: 0.1477  m1_loss_dice_7: 1.171  m1_loss_ce_8: 0.4935  m1_loss_mask_8: 0.1477  m1_loss_dice_8: 1.187  m2_loss_ce: 0.4801  m2_loss_mask: 0.153  m2_loss_dice: 1.184  m2_loss_ce_0: 0.618  m2_loss_mask_0: 0.1844  m2_loss_dice_0: 1.423  m2_loss_ce_1: 0.6618  m2_loss_mask_1: 0.1676  m2_loss_dice_1: 1.343  m2_loss_ce_2: 0.6061  m2_loss_mask_2: 0.1581  m2_loss_dice_2: 1.267  m2_loss_ce_3: 0.5833  m2_loss_mask_3: 0.1571  m2_loss_dice_3: 1.204  m2_loss_ce_4: 0.5549  m2_loss_mask_4: 0.1558  m2_loss_dice_4: 1.196  m2_loss_ce_5: 0.5674  m2_loss_mask_5: 0.1549  m2_loss_dice_5: 1.204  m2_loss_ce_6: 0.532  m2_loss_mask_6: 0.1541  m2_loss_dice_6: 1.193  m2_loss_ce_7: 0.4908  m2_loss_mask_7: 0.1549  m2_loss_dice_7: 1.187  m2_loss_ce_8: 0.5054  m2_loss_mask_8: 0.1541  m2_loss_dice_8: 1.185  com_loss_ce: 1.755  com_loss_mask: 0.6925  com_loss_dice: 0.9708    time: 1.4428  last_time: 1.3547  data_time: 0.0475  last_data_time: 0.0376   lr: 0.0001  max_mem: 36082M
[09/07 16:40:34] d2.utils.events INFO:  eta: 0:13:57  iter: 419  total_loss: 42.49  m1_loss_ce: 0.455  m1_loss_mask: 0.1647  m1_loss_dice: 1.212  m1_loss_ce_0: 0.6368  m1_loss_mask_0: 0.1868  m1_loss_dice_0: 1.345  m1_loss_ce_1: 0.6204  m1_loss_mask_1: 0.1778  m1_loss_dice_1: 1.321  m1_loss_ce_2: 0.5623  m1_loss_mask_2: 0.1705  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.5166  m1_loss_mask_3: 0.1679  m1_loss_dice_3: 1.208  m1_loss_ce_4: 0.493  m1_loss_mask_4: 0.1684  m1_loss_dice_4: 1.23  m1_loss_ce_5: 0.4744  m1_loss_mask_5: 0.168  m1_loss_dice_5: 1.197  m1_loss_ce_6: 0.4717  m1_loss_mask_6: 0.1651  m1_loss_dice_6: 1.179  m1_loss_ce_7: 0.449  m1_loss_mask_7: 0.1637  m1_loss_dice_7: 1.195  m1_loss_ce_8: 0.4436  m1_loss_mask_8: 0.1639  m1_loss_dice_8: 1.184  m2_loss_ce: 0.4782  m2_loss_mask: 0.1636  m2_loss_dice: 1.185  m2_loss_ce_0: 0.656  m2_loss_mask_0: 0.1897  m2_loss_dice_0: 1.39  m2_loss_ce_1: 0.6154  m2_loss_mask_1: 0.1744  m2_loss_dice_1: 1.325  m2_loss_ce_2: 0.613  m2_loss_mask_2: 0.1692  m2_loss_dice_2: 1.278  m2_loss_ce_3: 0.5199  m2_loss_mask_3: 0.1687  m2_loss_dice_3: 1.214  m2_loss_ce_4: 0.4937  m2_loss_mask_4: 0.17  m2_loss_dice_4: 1.212  m2_loss_ce_5: 0.5175  m2_loss_mask_5: 0.1705  m2_loss_dice_5: 1.222  m2_loss_ce_6: 0.4895  m2_loss_mask_6: 0.1653  m2_loss_dice_6: 1.205  m2_loss_ce_7: 0.4803  m2_loss_mask_7: 0.1647  m2_loss_dice_7: 1.188  m2_loss_ce_8: 0.4483  m2_loss_mask_8: 0.1633  m2_loss_dice_8: 1.203  com_loss_ce: 1.733  com_loss_mask: 0.6924  com_loss_dice: 0.9715    time: 1.4416  last_time: 1.5173  data_time: 0.0549  last_data_time: 0.0659   lr: 0.0001  max_mem: 36082M
[09/07 16:41:03] d2.utils.events INFO:  eta: 0:13:28  iter: 439  total_loss: 45.3  m1_loss_ce: 0.4627  m1_loss_mask: 0.1515  m1_loss_dice: 1.272  m1_loss_ce_0: 0.645  m1_loss_mask_0: 0.172  m1_loss_dice_0: 1.492  m1_loss_ce_1: 0.6854  m1_loss_mask_1: 0.1618  m1_loss_dice_1: 1.383  m1_loss_ce_2: 0.6015  m1_loss_mask_2: 0.151  m1_loss_dice_2: 1.33  m1_loss_ce_3: 0.5372  m1_loss_mask_3: 0.1483  m1_loss_dice_3: 1.273  m1_loss_ce_4: 0.533  m1_loss_mask_4: 0.1494  m1_loss_dice_4: 1.246  m1_loss_ce_5: 0.5265  m1_loss_mask_5: 0.1532  m1_loss_dice_5: 1.259  m1_loss_ce_6: 0.5232  m1_loss_mask_6: 0.1503  m1_loss_dice_6: 1.22  m1_loss_ce_7: 0.5049  m1_loss_mask_7: 0.1513  m1_loss_dice_7: 1.224  m1_loss_ce_8: 0.48  m1_loss_mask_8: 0.1495  m1_loss_dice_8: 1.252  m2_loss_ce: 0.4931  m2_loss_mask: 0.1602  m2_loss_dice: 1.263  m2_loss_ce_0: 0.6813  m2_loss_mask_0: 0.1829  m2_loss_dice_0: 1.521  m2_loss_ce_1: 0.6661  m2_loss_mask_1: 0.1647  m2_loss_dice_1: 1.437  m2_loss_ce_2: 0.6126  m2_loss_mask_2: 0.161  m2_loss_dice_2: 1.368  m2_loss_ce_3: 0.5632  m2_loss_mask_3: 0.16  m2_loss_dice_3: 1.298  m2_loss_ce_4: 0.5175  m2_loss_mask_4: 0.159  m2_loss_dice_4: 1.27  m2_loss_ce_5: 0.5147  m2_loss_mask_5: 0.1602  m2_loss_dice_5: 1.291  m2_loss_ce_6: 0.5096  m2_loss_mask_6: 0.1598  m2_loss_dice_6: 1.262  m2_loss_ce_7: 0.4995  m2_loss_mask_7: 0.1583  m2_loss_dice_7: 1.243  m2_loss_ce_8: 0.4991  m2_loss_mask_8: 0.1583  m2_loss_dice_8: 1.259  com_loss_ce: 1.755  com_loss_mask: 0.6925  com_loss_dice: 0.9719    time: 1.4424  last_time: 1.4924  data_time: 0.0539  last_data_time: 0.0585   lr: 0.0001  max_mem: 36082M
[09/07 16:41:32] d2.utils.events INFO:  eta: 0:12:59  iter: 459  total_loss: 39.68  m1_loss_ce: 0.46  m1_loss_mask: 0.1609  m1_loss_dice: 1.093  m1_loss_ce_0: 0.6072  m1_loss_mask_0: 0.1825  m1_loss_dice_0: 1.295  m1_loss_ce_1: 0.5992  m1_loss_mask_1: 0.1711  m1_loss_dice_1: 1.249  m1_loss_ce_2: 0.5657  m1_loss_mask_2: 0.163  m1_loss_dice_2: 1.126  m1_loss_ce_3: 0.5176  m1_loss_mask_3: 0.1596  m1_loss_dice_3: 1.104  m1_loss_ce_4: 0.4591  m1_loss_mask_4: 0.1615  m1_loss_dice_4: 1.104  m1_loss_ce_5: 0.4625  m1_loss_mask_5: 0.1605  m1_loss_dice_5: 1.116  m1_loss_ce_6: 0.4647  m1_loss_mask_6: 0.1611  m1_loss_dice_6: 1.089  m1_loss_ce_7: 0.4812  m1_loss_mask_7: 0.1616  m1_loss_dice_7: 1.107  m1_loss_ce_8: 0.4512  m1_loss_mask_8: 0.1591  m1_loss_dice_8: 1.073  m2_loss_ce: 0.4653  m2_loss_mask: 0.1602  m2_loss_dice: 1.09  m2_loss_ce_0: 0.5824  m2_loss_mask_0: 0.1862  m2_loss_dice_0: 1.316  m2_loss_ce_1: 0.6411  m2_loss_mask_1: 0.1751  m2_loss_dice_1: 1.257  m2_loss_ce_2: 0.562  m2_loss_mask_2: 0.1689  m2_loss_dice_2: 1.187  m2_loss_ce_3: 0.5271  m2_loss_mask_3: 0.1673  m2_loss_dice_3: 1.133  m2_loss_ce_4: 0.4925  m2_loss_mask_4: 0.1609  m2_loss_dice_4: 1.107  m2_loss_ce_5: 0.4679  m2_loss_mask_5: 0.1615  m2_loss_dice_5: 1.124  m2_loss_ce_6: 0.4824  m2_loss_mask_6: 0.1583  m2_loss_dice_6: 1.101  m2_loss_ce_7: 0.4432  m2_loss_mask_7: 0.1595  m2_loss_dice_7: 1.091  m2_loss_ce_8: 0.4595  m2_loss_mask_8: 0.156  m2_loss_dice_8: 1.126  com_loss_ce: 1.75  com_loss_mask: 0.6925  com_loss_dice: 0.9711    time: 1.4429  last_time: 1.4234  data_time: 0.0505  last_data_time: 0.0849   lr: 0.0001  max_mem: 36082M
[09/07 16:42:01] d2.utils.events INFO:  eta: 0:12:30  iter: 479  total_loss: 42.84  m1_loss_ce: 0.48  m1_loss_mask: 0.1559  m1_loss_dice: 1.183  m1_loss_ce_0: 0.6241  m1_loss_mask_0: 0.1802  m1_loss_dice_0: 1.351  m1_loss_ce_1: 0.6513  m1_loss_mask_1: 0.1646  m1_loss_dice_1: 1.315  m1_loss_ce_2: 0.5763  m1_loss_mask_2: 0.1576  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.5221  m1_loss_mask_3: 0.1591  m1_loss_dice_3: 1.192  m1_loss_ce_4: 0.5108  m1_loss_mask_4: 0.1567  m1_loss_dice_4: 1.218  m1_loss_ce_5: 0.5097  m1_loss_mask_5: 0.156  m1_loss_dice_5: 1.186  m1_loss_ce_6: 0.4977  m1_loss_mask_6: 0.1547  m1_loss_dice_6: 1.214  m1_loss_ce_7: 0.476  m1_loss_mask_7: 0.1546  m1_loss_dice_7: 1.179  m1_loss_ce_8: 0.4631  m1_loss_mask_8: 0.1563  m1_loss_dice_8: 1.19  m2_loss_ce: 0.4557  m2_loss_mask: 0.1574  m2_loss_dice: 1.22  m2_loss_ce_0: 0.6412  m2_loss_mask_0: 0.1839  m2_loss_dice_0: 1.386  m2_loss_ce_1: 0.6756  m2_loss_mask_1: 0.1669  m2_loss_dice_1: 1.287  m2_loss_ce_2: 0.6069  m2_loss_mask_2: 0.1598  m2_loss_dice_2: 1.259  m2_loss_ce_3: 0.5433  m2_loss_mask_3: 0.1597  m2_loss_dice_3: 1.215  m2_loss_ce_4: 0.5122  m2_loss_mask_4: 0.1577  m2_loss_dice_4: 1.2  m2_loss_ce_5: 0.5159  m2_loss_mask_5: 0.1574  m2_loss_dice_5: 1.191  m2_loss_ce_6: 0.4766  m2_loss_mask_6: 0.1572  m2_loss_dice_6: 1.158  m2_loss_ce_7: 0.496  m2_loss_mask_7: 0.1563  m2_loss_dice_7: 1.191  m2_loss_ce_8: 0.4768  m2_loss_mask_8: 0.157  m2_loss_dice_8: 1.218  com_loss_ce: 1.728  com_loss_mask: 0.6924  com_loss_dice: 0.9709    time: 1.4426  last_time: 1.4300  data_time: 0.0563  last_data_time: 0.0398   lr: 0.0001  max_mem: 36082M
[09/07 16:42:30] d2.utils.events INFO:  eta: 0:12:01  iter: 499  total_loss: 41.03  m1_loss_ce: 0.5061  m1_loss_mask: 0.1533  m1_loss_dice: 1.116  m1_loss_ce_0: 0.6107  m1_loss_mask_0: 0.1847  m1_loss_dice_0: 1.323  m1_loss_ce_1: 0.6578  m1_loss_mask_1: 0.1705  m1_loss_dice_1: 1.256  m1_loss_ce_2: 0.6105  m1_loss_mask_2: 0.164  m1_loss_dice_2: 1.177  m1_loss_ce_3: 0.5456  m1_loss_mask_3: 0.1585  m1_loss_dice_3: 1.129  m1_loss_ce_4: 0.522  m1_loss_mask_4: 0.1563  m1_loss_dice_4: 1.138  m1_loss_ce_5: 0.5127  m1_loss_mask_5: 0.158  m1_loss_dice_5: 1.112  m1_loss_ce_6: 0.5131  m1_loss_mask_6: 0.1565  m1_loss_dice_6: 1.113  m1_loss_ce_7: 0.5048  m1_loss_mask_7: 0.1558  m1_loss_dice_7: 1.129  m1_loss_ce_8: 0.5116  m1_loss_mask_8: 0.1566  m1_loss_dice_8: 1.105  m2_loss_ce: 0.5019  m2_loss_mask: 0.1577  m2_loss_dice: 1.111  m2_loss_ce_0: 0.6428  m2_loss_mask_0: 0.1859  m2_loss_dice_0: 1.316  m2_loss_ce_1: 0.6785  m2_loss_mask_1: 0.1654  m2_loss_dice_1: 1.26  m2_loss_ce_2: 0.6515  m2_loss_mask_2: 0.1611  m2_loss_dice_2: 1.228  m2_loss_ce_3: 0.5621  m2_loss_mask_3: 0.1656  m2_loss_dice_3: 1.151  m2_loss_ce_4: 0.5326  m2_loss_mask_4: 0.1631  m2_loss_dice_4: 1.112  m2_loss_ce_5: 0.5134  m2_loss_mask_5: 0.1621  m2_loss_dice_5: 1.138  m2_loss_ce_6: 0.5049  m2_loss_mask_6: 0.1632  m2_loss_dice_6: 1.149  m2_loss_ce_7: 0.515  m2_loss_mask_7: 0.1592  m2_loss_dice_7: 1.13  m2_loss_ce_8: 0.5014  m2_loss_mask_8: 0.1604  m2_loss_dice_8: 1.115  com_loss_ce: 1.729  com_loss_mask: 0.6925  com_loss_dice: 0.9693    time: 1.4429  last_time: 1.4216  data_time: 0.0523  last_data_time: 0.0567   lr: 0.0001  max_mem: 36082M
[09/07 16:42:59] d2.utils.events INFO:  eta: 0:11:32  iter: 519  total_loss: 42.87  m1_loss_ce: 0.5205  m1_loss_mask: 0.152  m1_loss_dice: 1.218  m1_loss_ce_0: 0.6066  m1_loss_mask_0: 0.167  m1_loss_dice_0: 1.411  m1_loss_ce_1: 0.6907  m1_loss_mask_1: 0.1555  m1_loss_dice_1: 1.317  m1_loss_ce_2: 0.611  m1_loss_mask_2: 0.1561  m1_loss_dice_2: 1.294  m1_loss_ce_3: 0.5772  m1_loss_mask_3: 0.1533  m1_loss_dice_3: 1.262  m1_loss_ce_4: 0.5304  m1_loss_mask_4: 0.1552  m1_loss_dice_4: 1.233  m1_loss_ce_5: 0.4977  m1_loss_mask_5: 0.1542  m1_loss_dice_5: 1.214  m1_loss_ce_6: 0.5113  m1_loss_mask_6: 0.1518  m1_loss_dice_6: 1.21  m1_loss_ce_7: 0.4676  m1_loss_mask_7: 0.154  m1_loss_dice_7: 1.211  m1_loss_ce_8: 0.505  m1_loss_mask_8: 0.1524  m1_loss_dice_8: 1.226  m2_loss_ce: 0.5036  m2_loss_mask: 0.1647  m2_loss_dice: 1.209  m2_loss_ce_0: 0.6447  m2_loss_mask_0: 0.1896  m2_loss_dice_0: 1.43  m2_loss_ce_1: 0.6826  m2_loss_mask_1: 0.1751  m2_loss_dice_1: 1.37  m2_loss_ce_2: 0.6051  m2_loss_mask_2: 0.1665  m2_loss_dice_2: 1.303  m2_loss_ce_3: 0.546  m2_loss_mask_3: 0.1665  m2_loss_dice_3: 1.248  m2_loss_ce_4: 0.5239  m2_loss_mask_4: 0.1668  m2_loss_dice_4: 1.219  m2_loss_ce_5: 0.4901  m2_loss_mask_5: 0.1651  m2_loss_dice_5: 1.232  m2_loss_ce_6: 0.4969  m2_loss_mask_6: 0.1666  m2_loss_dice_6: 1.232  m2_loss_ce_7: 0.46  m2_loss_mask_7: 0.1652  m2_loss_dice_7: 1.202  m2_loss_ce_8: 0.4763  m2_loss_mask_8: 0.1631  m2_loss_dice_8: 1.172  com_loss_ce: 1.749  com_loss_mask: 0.6925  com_loss_dice: 0.9695    time: 1.4427  last_time: 1.4386  data_time: 0.0526  last_data_time: 0.0441   lr: 0.0001  max_mem: 36082M
[09/07 16:43:28] d2.utils.events INFO:  eta: 0:11:04  iter: 539  total_loss: 43.05  m1_loss_ce: 0.5211  m1_loss_mask: 0.1675  m1_loss_dice: 1.191  m1_loss_ce_0: 0.6141  m1_loss_mask_0: 0.1847  m1_loss_dice_0: 1.411  m1_loss_ce_1: 0.7155  m1_loss_mask_1: 0.176  m1_loss_dice_1: 1.35  m1_loss_ce_2: 0.643  m1_loss_mask_2: 0.168  m1_loss_dice_2: 1.276  m1_loss_ce_3: 0.5501  m1_loss_mask_3: 0.1681  m1_loss_dice_3: 1.212  m1_loss_ce_4: 0.5135  m1_loss_mask_4: 0.1668  m1_loss_dice_4: 1.239  m1_loss_ce_5: 0.5176  m1_loss_mask_5: 0.1658  m1_loss_dice_5: 1.243  m1_loss_ce_6: 0.5007  m1_loss_mask_6: 0.1661  m1_loss_dice_6: 1.204  m1_loss_ce_7: 0.4986  m1_loss_mask_7: 0.1686  m1_loss_dice_7: 1.231  m1_loss_ce_8: 0.5021  m1_loss_mask_8: 0.1685  m1_loss_dice_8: 1.214  m2_loss_ce: 0.4593  m2_loss_mask: 0.165  m2_loss_dice: 1.213  m2_loss_ce_0: 0.581  m2_loss_mask_0: 0.204  m2_loss_dice_0: 1.438  m2_loss_ce_1: 0.6784  m2_loss_mask_1: 0.184  m2_loss_dice_1: 1.342  m2_loss_ce_2: 0.6275  m2_loss_mask_2: 0.1708  m2_loss_dice_2: 1.264  m2_loss_ce_3: 0.5381  m2_loss_mask_3: 0.1682  m2_loss_dice_3: 1.235  m2_loss_ce_4: 0.5079  m2_loss_mask_4: 0.165  m2_loss_dice_4: 1.268  m2_loss_ce_5: 0.4923  m2_loss_mask_5: 0.1662  m2_loss_dice_5: 1.224  m2_loss_ce_6: 0.4978  m2_loss_mask_6: 0.1666  m2_loss_dice_6: 1.198  m2_loss_ce_7: 0.4512  m2_loss_mask_7: 0.1656  m2_loss_dice_7: 1.208  m2_loss_ce_8: 0.4765  m2_loss_mask_8: 0.163  m2_loss_dice_8: 1.21  com_loss_ce: 1.734  com_loss_mask: 0.6925  com_loss_dice: 0.9701    time: 1.4421  last_time: 1.3440  data_time: 0.0634  last_data_time: 0.0437   lr: 0.0001  max_mem: 36082M
[09/07 16:43:57] d2.utils.events INFO:  eta: 0:10:35  iter: 559  total_loss: 40.99  m1_loss_ce: 0.4828  m1_loss_mask: 0.1494  m1_loss_dice: 1.15  m1_loss_ce_0: 0.6096  m1_loss_mask_0: 0.1723  m1_loss_dice_0: 1.326  m1_loss_ce_1: 0.6331  m1_loss_mask_1: 0.1697  m1_loss_dice_1: 1.271  m1_loss_ce_2: 0.5809  m1_loss_mask_2: 0.1562  m1_loss_dice_2: 1.208  m1_loss_ce_3: 0.5413  m1_loss_mask_3: 0.1544  m1_loss_dice_3: 1.168  m1_loss_ce_4: 0.5004  m1_loss_mask_4: 0.1529  m1_loss_dice_4: 1.15  m1_loss_ce_5: 0.4869  m1_loss_mask_5: 0.1516  m1_loss_dice_5: 1.141  m1_loss_ce_6: 0.4985  m1_loss_mask_6: 0.1506  m1_loss_dice_6: 1.133  m1_loss_ce_7: 0.4946  m1_loss_mask_7: 0.1489  m1_loss_dice_7: 1.132  m1_loss_ce_8: 0.4864  m1_loss_mask_8: 0.1509  m1_loss_dice_8: 1.129  m2_loss_ce: 0.4614  m2_loss_mask: 0.1571  m2_loss_dice: 1.132  m2_loss_ce_0: 0.6334  m2_loss_mask_0: 0.1804  m2_loss_dice_0: 1.352  m2_loss_ce_1: 0.6338  m2_loss_mask_1: 0.1679  m2_loss_dice_1: 1.271  m2_loss_ce_2: 0.6091  m2_loss_mask_2: 0.1646  m2_loss_dice_2: 1.19  m2_loss_ce_3: 0.5292  m2_loss_mask_3: 0.166  m2_loss_dice_3: 1.175  m2_loss_ce_4: 0.4968  m2_loss_mask_4: 0.1624  m2_loss_dice_4: 1.157  m2_loss_ce_5: 0.4946  m2_loss_mask_5: 0.1595  m2_loss_dice_5: 1.159  m2_loss_ce_6: 0.5179  m2_loss_mask_6: 0.1531  m2_loss_dice_6: 1.098  m2_loss_ce_7: 0.4952  m2_loss_mask_7: 0.157  m2_loss_dice_7: 1.139  m2_loss_ce_8: 0.4793  m2_loss_mask_8: 0.1562  m2_loss_dice_8: 1.128  com_loss_ce: 1.721  com_loss_mask: 0.6925  com_loss_dice: 0.9699    time: 1.4428  last_time: 1.4491  data_time: 0.0465  last_data_time: 0.0357   lr: 0.0001  max_mem: 36082M
[09/07 16:44:26] d2.utils.events INFO:  eta: 0:10:06  iter: 579  total_loss: 42.14  m1_loss_ce: 0.4768  m1_loss_mask: 0.1441  m1_loss_dice: 1.229  m1_loss_ce_0: 0.5859  m1_loss_mask_0: 0.1707  m1_loss_dice_0: 1.363  m1_loss_ce_1: 0.6239  m1_loss_mask_1: 0.1556  m1_loss_dice_1: 1.31  m1_loss_ce_2: 0.579  m1_loss_mask_2: 0.1472  m1_loss_dice_2: 1.243  m1_loss_ce_3: 0.4989  m1_loss_mask_3: 0.1474  m1_loss_dice_3: 1.241  m1_loss_ce_4: 0.489  m1_loss_mask_4: 0.1461  m1_loss_dice_4: 1.201  m1_loss_ce_5: 0.4823  m1_loss_mask_5: 0.1461  m1_loss_dice_5: 1.165  m1_loss_ce_6: 0.4646  m1_loss_mask_6: 0.1459  m1_loss_dice_6: 1.213  m1_loss_ce_7: 0.4804  m1_loss_mask_7: 0.1454  m1_loss_dice_7: 1.208  m1_loss_ce_8: 0.4558  m1_loss_mask_8: 0.1455  m1_loss_dice_8: 1.177  m2_loss_ce: 0.4761  m2_loss_mask: 0.1516  m2_loss_dice: 1.193  m2_loss_ce_0: 0.6154  m2_loss_mask_0: 0.1746  m2_loss_dice_0: 1.442  m2_loss_ce_1: 0.6521  m2_loss_mask_1: 0.1602  m2_loss_dice_1: 1.365  m2_loss_ce_2: 0.5974  m2_loss_mask_2: 0.1552  m2_loss_dice_2: 1.237  m2_loss_ce_3: 0.5186  m2_loss_mask_3: 0.1558  m2_loss_dice_3: 1.253  m2_loss_ce_4: 0.4982  m2_loss_mask_4: 0.1571  m2_loss_dice_4: 1.247  m2_loss_ce_5: 0.5455  m2_loss_mask_5: 0.1572  m2_loss_dice_5: 1.213  m2_loss_ce_6: 0.467  m2_loss_mask_6: 0.1544  m2_loss_dice_6: 1.181  m2_loss_ce_7: 0.508  m2_loss_mask_7: 0.1557  m2_loss_dice_7: 1.233  m2_loss_ce_8: 0.4869  m2_loss_mask_8: 0.1563  m2_loss_dice_8: 1.26  com_loss_ce: 1.733  com_loss_mask: 0.6925  com_loss_dice: 0.9709    time: 1.4430  last_time: 1.5514  data_time: 0.0570  last_data_time: 0.1167   lr: 0.0001  max_mem: 36082M
[09/07 16:44:56] d2.utils.events INFO:  eta: 0:09:37  iter: 599  total_loss: 42.2  m1_loss_ce: 0.4418  m1_loss_mask: 0.148  m1_loss_dice: 1.261  m1_loss_ce_0: 0.581  m1_loss_mask_0: 0.1738  m1_loss_dice_0: 1.427  m1_loss_ce_1: 0.6143  m1_loss_mask_1: 0.1595  m1_loss_dice_1: 1.323  m1_loss_ce_2: 0.5206  m1_loss_mask_2: 0.1508  m1_loss_dice_2: 1.312  m1_loss_ce_3: 0.4985  m1_loss_mask_3: 0.1486  m1_loss_dice_3: 1.274  m1_loss_ce_4: 0.469  m1_loss_mask_4: 0.1448  m1_loss_dice_4: 1.207  m1_loss_ce_5: 0.4742  m1_loss_mask_5: 0.1455  m1_loss_dice_5: 1.243  m1_loss_ce_6: 0.4503  m1_loss_mask_6: 0.1448  m1_loss_dice_6: 1.225  m1_loss_ce_7: 0.4397  m1_loss_mask_7: 0.145  m1_loss_dice_7: 1.197  m1_loss_ce_8: 0.4536  m1_loss_mask_8: 0.1475  m1_loss_dice_8: 1.186  m2_loss_ce: 0.4586  m2_loss_mask: 0.1492  m2_loss_dice: 1.19  m2_loss_ce_0: 0.5863  m2_loss_mask_0: 0.1785  m2_loss_dice_0: 1.366  m2_loss_ce_1: 0.6168  m2_loss_mask_1: 0.165  m2_loss_dice_1: 1.341  m2_loss_ce_2: 0.5776  m2_loss_mask_2: 0.1546  m2_loss_dice_2: 1.271  m2_loss_ce_3: 0.5064  m2_loss_mask_3: 0.1531  m2_loss_dice_3: 1.194  m2_loss_ce_4: 0.4786  m2_loss_mask_4: 0.1515  m2_loss_dice_4: 1.214  m2_loss_ce_5: 0.4914  m2_loss_mask_5: 0.1488  m2_loss_dice_5: 1.201  m2_loss_ce_6: 0.4672  m2_loss_mask_6: 0.1509  m2_loss_dice_6: 1.145  m2_loss_ce_7: 0.48  m2_loss_mask_7: 0.1488  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.4561  m2_loss_mask_8: 0.1492  m2_loss_dice_8: 1.2  com_loss_ce: 1.716  com_loss_mask: 0.6925  com_loss_dice: 0.973    time: 1.4437  last_time: 1.3604  data_time: 0.0551  last_data_time: 0.0655   lr: 0.0001  max_mem: 36082M
[09/07 16:45:25] d2.utils.events INFO:  eta: 0:09:08  iter: 619  total_loss: 42.94  m1_loss_ce: 0.5065  m1_loss_mask: 0.1514  m1_loss_dice: 1.198  m1_loss_ce_0: 0.6408  m1_loss_mask_0: 0.1738  m1_loss_dice_0: 1.366  m1_loss_ce_1: 0.6795  m1_loss_mask_1: 0.1657  m1_loss_dice_1: 1.304  m1_loss_ce_2: 0.6179  m1_loss_mask_2: 0.1578  m1_loss_dice_2: 1.267  m1_loss_ce_3: 0.5552  m1_loss_mask_3: 0.1551  m1_loss_dice_3: 1.198  m1_loss_ce_4: 0.5114  m1_loss_mask_4: 0.1508  m1_loss_dice_4: 1.201  m1_loss_ce_5: 0.5428  m1_loss_mask_5: 0.1513  m1_loss_dice_5: 1.19  m1_loss_ce_6: 0.5008  m1_loss_mask_6: 0.1499  m1_loss_dice_6: 1.161  m1_loss_ce_7: 0.5218  m1_loss_mask_7: 0.1525  m1_loss_dice_7: 1.187  m1_loss_ce_8: 0.5089  m1_loss_mask_8: 0.1506  m1_loss_dice_8: 1.176  m2_loss_ce: 0.4625  m2_loss_mask: 0.1526  m2_loss_dice: 1.198  m2_loss_ce_0: 0.6392  m2_loss_mask_0: 0.1765  m2_loss_dice_0: 1.394  m2_loss_ce_1: 0.6706  m2_loss_mask_1: 0.1638  m2_loss_dice_1: 1.351  m2_loss_ce_2: 0.616  m2_loss_mask_2: 0.1576  m2_loss_dice_2: 1.248  m2_loss_ce_3: 0.5504  m2_loss_mask_3: 0.1598  m2_loss_dice_3: 1.225  m2_loss_ce_4: 0.5051  m2_loss_mask_4: 0.1549  m2_loss_dice_4: 1.203  m2_loss_ce_5: 0.5263  m2_loss_mask_5: 0.1533  m2_loss_dice_5: 1.218  m2_loss_ce_6: 0.5096  m2_loss_mask_6: 0.1542  m2_loss_dice_6: 1.187  m2_loss_ce_7: 0.5017  m2_loss_mask_7: 0.1523  m2_loss_dice_7: 1.184  m2_loss_ce_8: 0.4841  m2_loss_mask_8: 0.1535  m2_loss_dice_8: 1.181  com_loss_ce: 1.732  com_loss_mask: 0.6925  com_loss_dice: 0.97    time: 1.4441  last_time: 1.3958  data_time: 0.0525  last_data_time: 0.0504   lr: 0.0001  max_mem: 36082M
[09/07 16:45:55] d2.utils.events INFO:  eta: 0:08:40  iter: 639  total_loss: 42.67  m1_loss_ce: 0.4487  m1_loss_mask: 0.1568  m1_loss_dice: 1.179  m1_loss_ce_0: 0.6215  m1_loss_mask_0: 0.1775  m1_loss_dice_0: 1.34  m1_loss_ce_1: 0.672  m1_loss_mask_1: 0.1694  m1_loss_dice_1: 1.299  m1_loss_ce_2: 0.5922  m1_loss_mask_2: 0.163  m1_loss_dice_2: 1.247  m1_loss_ce_3: 0.5449  m1_loss_mask_3: 0.1621  m1_loss_dice_3: 1.193  m1_loss_ce_4: 0.4876  m1_loss_mask_4: 0.1614  m1_loss_dice_4: 1.206  m1_loss_ce_5: 0.4825  m1_loss_mask_5: 0.1602  m1_loss_dice_5: 1.197  m1_loss_ce_6: 0.4653  m1_loss_mask_6: 0.1593  m1_loss_dice_6: 1.176  m1_loss_ce_7: 0.4674  m1_loss_mask_7: 0.1587  m1_loss_dice_7: 1.188  m1_loss_ce_8: 0.4454  m1_loss_mask_8: 0.1575  m1_loss_dice_8: 1.175  m2_loss_ce: 0.4865  m2_loss_mask: 0.1631  m2_loss_dice: 1.191  m2_loss_ce_0: 0.6203  m2_loss_mask_0: 0.1907  m2_loss_dice_0: 1.365  m2_loss_ce_1: 0.6678  m2_loss_mask_1: 0.1741  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.6505  m2_loss_mask_2: 0.1671  m2_loss_dice_2: 1.266  m2_loss_ce_3: 0.5547  m2_loss_mask_3: 0.1653  m2_loss_dice_3: 1.184  m2_loss_ce_4: 0.5263  m2_loss_mask_4: 0.1657  m2_loss_dice_4: 1.212  m2_loss_ce_5: 0.5059  m2_loss_mask_5: 0.1642  m2_loss_dice_5: 1.171  m2_loss_ce_6: 0.5251  m2_loss_mask_6: 0.1624  m2_loss_dice_6: 1.167  m2_loss_ce_7: 0.5163  m2_loss_mask_7: 0.161  m2_loss_dice_7: 1.175  m2_loss_ce_8: 0.508  m2_loss_mask_8: 0.1619  m2_loss_dice_8: 1.168  com_loss_ce: 1.757  com_loss_mask: 0.6925  com_loss_dice: 0.9702    time: 1.4460  last_time: 1.4843  data_time: 0.0620  last_data_time: 0.0504   lr: 0.0001  max_mem: 36082M
[09/07 16:46:24] d2.utils.events INFO:  eta: 0:08:11  iter: 659  total_loss: 43.33  m1_loss_ce: 0.5168  m1_loss_mask: 0.1645  m1_loss_dice: 1.226  m1_loss_ce_0: 0.6048  m1_loss_mask_0: 0.1858  m1_loss_dice_0: 1.426  m1_loss_ce_1: 0.6425  m1_loss_mask_1: 0.1702  m1_loss_dice_1: 1.393  m1_loss_ce_2: 0.6241  m1_loss_mask_2: 0.1675  m1_loss_dice_2: 1.302  m1_loss_ce_3: 0.5668  m1_loss_mask_3: 0.1673  m1_loss_dice_3: 1.222  m1_loss_ce_4: 0.5316  m1_loss_mask_4: 0.1649  m1_loss_dice_4: 1.204  m1_loss_ce_5: 0.5542  m1_loss_mask_5: 0.1597  m1_loss_dice_5: 1.242  m1_loss_ce_6: 0.5126  m1_loss_mask_6: 0.162  m1_loss_dice_6: 1.235  m1_loss_ce_7: 0.4915  m1_loss_mask_7: 0.1622  m1_loss_dice_7: 1.206  m1_loss_ce_8: 0.5062  m1_loss_mask_8: 0.163  m1_loss_dice_8: 1.253  m2_loss_ce: 0.51  m2_loss_mask: 0.1538  m2_loss_dice: 1.26  m2_loss_ce_0: 0.6599  m2_loss_mask_0: 0.1848  m2_loss_dice_0: 1.413  m2_loss_ce_1: 0.6732  m2_loss_mask_1: 0.1711  m2_loss_dice_1: 1.355  m2_loss_ce_2: 0.6326  m2_loss_mask_2: 0.1631  m2_loss_dice_2: 1.333  m2_loss_ce_3: 0.5637  m2_loss_mask_3: 0.1626  m2_loss_dice_3: 1.304  m2_loss_ce_4: 0.5388  m2_loss_mask_4: 0.1578  m2_loss_dice_4: 1.265  m2_loss_ce_5: 0.5363  m2_loss_mask_5: 0.1559  m2_loss_dice_5: 1.24  m2_loss_ce_6: 0.5253  m2_loss_mask_6: 0.1562  m2_loss_dice_6: 1.237  m2_loss_ce_7: 0.5128  m2_loss_mask_7: 0.1595  m2_loss_dice_7: 1.201  m2_loss_ce_8: 0.5005  m2_loss_mask_8: 0.1538  m2_loss_dice_8: 1.225  com_loss_ce: 1.75  com_loss_mask: 0.6925  com_loss_dice: 0.9716    time: 1.4467  last_time: 1.4266  data_time: 0.0519  last_data_time: 0.0674   lr: 0.0001  max_mem: 36082M
[09/07 16:46:53] d2.utils.events INFO:  eta: 0:07:42  iter: 679  total_loss: 41.64  m1_loss_ce: 0.4683  m1_loss_mask: 0.1546  m1_loss_dice: 1.174  m1_loss_ce_0: 0.6297  m1_loss_mask_0: 0.1803  m1_loss_dice_0: 1.348  m1_loss_ce_1: 0.6459  m1_loss_mask_1: 0.1644  m1_loss_dice_1: 1.273  m1_loss_ce_2: 0.6349  m1_loss_mask_2: 0.1556  m1_loss_dice_2: 1.211  m1_loss_ce_3: 0.5807  m1_loss_mask_3: 0.1541  m1_loss_dice_3: 1.175  m1_loss_ce_4: 0.5451  m1_loss_mask_4: 0.1552  m1_loss_dice_4: 1.18  m1_loss_ce_5: 0.5037  m1_loss_mask_5: 0.1545  m1_loss_dice_5: 1.139  m1_loss_ce_6: 0.5245  m1_loss_mask_6: 0.1544  m1_loss_dice_6: 1.099  m1_loss_ce_7: 0.4789  m1_loss_mask_7: 0.1559  m1_loss_dice_7: 1.126  m1_loss_ce_8: 0.5048  m1_loss_mask_8: 0.1535  m1_loss_dice_8: 1.139  m2_loss_ce: 0.5154  m2_loss_mask: 0.1601  m2_loss_dice: 1.167  m2_loss_ce_0: 0.6606  m2_loss_mask_0: 0.1874  m2_loss_dice_0: 1.351  m2_loss_ce_1: 0.7012  m2_loss_mask_1: 0.1706  m2_loss_dice_1: 1.291  m2_loss_ce_2: 0.6456  m2_loss_mask_2: 0.1679  m2_loss_dice_2: 1.272  m2_loss_ce_3: 0.5627  m2_loss_mask_3: 0.1647  m2_loss_dice_3: 1.166  m2_loss_ce_4: 0.5391  m2_loss_mask_4: 0.164  m2_loss_dice_4: 1.167  m2_loss_ce_5: 0.5335  m2_loss_mask_5: 0.1626  m2_loss_dice_5: 1.163  m2_loss_ce_6: 0.5155  m2_loss_mask_6: 0.1616  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.5278  m2_loss_mask_7: 0.1611  m2_loss_dice_7: 1.127  m2_loss_ce_8: 0.5173  m2_loss_mask_8: 0.1576  m2_loss_dice_8: 1.161  com_loss_ce: 1.751  com_loss_mask: 0.6925  com_loss_dice: 0.9695    time: 1.4465  last_time: 1.4068  data_time: 0.0649  last_data_time: 0.0426   lr: 0.0001  max_mem: 36082M
[09/07 16:47:22] d2.utils.events INFO:  eta: 0:07:13  iter: 699  total_loss: 41.95  m1_loss_ce: 0.5911  m1_loss_mask: 0.1663  m1_loss_dice: 1.142  m1_loss_ce_0: 0.6387  m1_loss_mask_0: 0.1879  m1_loss_dice_0: 1.348  m1_loss_ce_1: 0.7013  m1_loss_mask_1: 0.1712  m1_loss_dice_1: 1.27  m1_loss_ce_2: 0.6427  m1_loss_mask_2: 0.1642  m1_loss_dice_2: 1.225  m1_loss_ce_3: 0.566  m1_loss_mask_3: 0.1699  m1_loss_dice_3: 1.144  m1_loss_ce_4: 0.5604  m1_loss_mask_4: 0.1664  m1_loss_dice_4: 1.14  m1_loss_ce_5: 0.5643  m1_loss_mask_5: 0.1678  m1_loss_dice_5: 1.17  m1_loss_ce_6: 0.5242  m1_loss_mask_6: 0.1676  m1_loss_dice_6: 1.144  m1_loss_ce_7: 0.4903  m1_loss_mask_7: 0.1668  m1_loss_dice_7: 1.184  m1_loss_ce_8: 0.5393  m1_loss_mask_8: 0.1663  m1_loss_dice_8: 1.156  m2_loss_ce: 0.4737  m2_loss_mask: 0.1703  m2_loss_dice: 1.138  m2_loss_ce_0: 0.6536  m2_loss_mask_0: 0.1915  m2_loss_dice_0: 1.366  m2_loss_ce_1: 0.6628  m2_loss_mask_1: 0.1815  m2_loss_dice_1: 1.275  m2_loss_ce_2: 0.627  m2_loss_mask_2: 0.1717  m2_loss_dice_2: 1.206  m2_loss_ce_3: 0.5547  m2_loss_mask_3: 0.1729  m2_loss_dice_3: 1.243  m2_loss_ce_4: 0.5363  m2_loss_mask_4: 0.1719  m2_loss_dice_4: 1.195  m2_loss_ce_5: 0.4997  m2_loss_mask_5: 0.1711  m2_loss_dice_5: 1.152  m2_loss_ce_6: 0.5226  m2_loss_mask_6: 0.1695  m2_loss_dice_6: 1.138  m2_loss_ce_7: 0.5173  m2_loss_mask_7: 0.171  m2_loss_dice_7: 1.111  m2_loss_ce_8: 0.4848  m2_loss_mask_8: 0.1694  m2_loss_dice_8: 1.173  com_loss_ce: 1.753  com_loss_mask: 0.6925  com_loss_dice: 0.9695    time: 1.4456  last_time: 1.5158  data_time: 0.0596  last_data_time: 0.0471   lr: 0.0001  max_mem: 36082M
[09/07 16:47:50] d2.utils.events INFO:  eta: 0:06:44  iter: 719  total_loss: 40.1  m1_loss_ce: 0.5068  m1_loss_mask: 0.1604  m1_loss_dice: 1.105  m1_loss_ce_0: 0.6368  m1_loss_mask_0: 0.1928  m1_loss_dice_0: 1.274  m1_loss_ce_1: 0.6709  m1_loss_mask_1: 0.1714  m1_loss_dice_1: 1.204  m1_loss_ce_2: 0.6239  m1_loss_mask_2: 0.1671  m1_loss_dice_2: 1.161  m1_loss_ce_3: 0.5771  m1_loss_mask_3: 0.169  m1_loss_dice_3: 1.148  m1_loss_ce_4: 0.5126  m1_loss_mask_4: 0.1653  m1_loss_dice_4: 1.092  m1_loss_ce_5: 0.5004  m1_loss_mask_5: 0.1635  m1_loss_dice_5: 1.093  m1_loss_ce_6: 0.4933  m1_loss_mask_6: 0.1642  m1_loss_dice_6: 1.073  m1_loss_ce_7: 0.5101  m1_loss_mask_7: 0.1633  m1_loss_dice_7: 1.064  m1_loss_ce_8: 0.5006  m1_loss_mask_8: 0.1605  m1_loss_dice_8: 1.082  m2_loss_ce: 0.4828  m2_loss_mask: 0.1681  m2_loss_dice: 1.103  m2_loss_ce_0: 0.6259  m2_loss_mask_0: 0.1806  m2_loss_dice_0: 1.305  m2_loss_ce_1: 0.6084  m2_loss_mask_1: 0.1692  m2_loss_dice_1: 1.243  m2_loss_ce_2: 0.5925  m2_loss_mask_2: 0.1737  m2_loss_dice_2: 1.183  m2_loss_ce_3: 0.5677  m2_loss_mask_3: 0.1733  m2_loss_dice_3: 1.136  m2_loss_ce_4: 0.4798  m2_loss_mask_4: 0.1691  m2_loss_dice_4: 1.15  m2_loss_ce_5: 0.4996  m2_loss_mask_5: 0.168  m2_loss_dice_5: 1.099  m2_loss_ce_6: 0.4761  m2_loss_mask_6: 0.1692  m2_loss_dice_6: 1.109  m2_loss_ce_7: 0.4816  m2_loss_mask_7: 0.1686  m2_loss_dice_7: 1.09  m2_loss_ce_8: 0.468  m2_loss_mask_8: 0.167  m2_loss_dice_8: 1.125  com_loss_ce: 1.732  com_loss_mask: 0.6925  com_loss_dice: 0.9688    time: 1.4443  last_time: 1.4880  data_time: 0.0557  last_data_time: 0.0632   lr: 0.0001  max_mem: 36082M
[09/07 16:48:19] d2.utils.events INFO:  eta: 0:06:15  iter: 739  total_loss: 41.26  m1_loss_ce: 0.4935  m1_loss_mask: 0.1586  m1_loss_dice: 1.165  m1_loss_ce_0: 0.6174  m1_loss_mask_0: 0.1769  m1_loss_dice_0: 1.343  m1_loss_ce_1: 0.6432  m1_loss_mask_1: 0.1638  m1_loss_dice_1: 1.267  m1_loss_ce_2: 0.5895  m1_loss_mask_2: 0.1596  m1_loss_dice_2: 1.201  m1_loss_ce_3: 0.5205  m1_loss_mask_3: 0.162  m1_loss_dice_3: 1.193  m1_loss_ce_4: 0.5074  m1_loss_mask_4: 0.1565  m1_loss_dice_4: 1.159  m1_loss_ce_5: 0.5193  m1_loss_mask_5: 0.1573  m1_loss_dice_5: 1.139  m1_loss_ce_6: 0.5036  m1_loss_mask_6: 0.1605  m1_loss_dice_6: 1.136  m1_loss_ce_7: 0.4808  m1_loss_mask_7: 0.1585  m1_loss_dice_7: 1.141  m1_loss_ce_8: 0.5071  m1_loss_mask_8: 0.1584  m1_loss_dice_8: 1.137  m2_loss_ce: 0.4436  m2_loss_mask: 0.1634  m2_loss_dice: 1.12  m2_loss_ce_0: 0.6073  m2_loss_mask_0: 0.179  m2_loss_dice_0: 1.347  m2_loss_ce_1: 0.6252  m2_loss_mask_1: 0.1681  m2_loss_dice_1: 1.278  m2_loss_ce_2: 0.5592  m2_loss_mask_2: 0.1701  m2_loss_dice_2: 1.239  m2_loss_ce_3: 0.5223  m2_loss_mask_3: 0.1692  m2_loss_dice_3: 1.198  m2_loss_ce_4: 0.4645  m2_loss_mask_4: 0.1638  m2_loss_dice_4: 1.185  m2_loss_ce_5: 0.4634  m2_loss_mask_5: 0.1694  m2_loss_dice_5: 1.187  m2_loss_ce_6: 0.454  m2_loss_mask_6: 0.1701  m2_loss_dice_6: 1.144  m2_loss_ce_7: 0.4865  m2_loss_mask_7: 0.1644  m2_loss_dice_7: 1.166  m2_loss_ce_8: 0.46  m2_loss_mask_8: 0.1644  m2_loss_dice_8: 1.151  com_loss_ce: 1.729  com_loss_mask: 0.6925  com_loss_dice: 0.9712    time: 1.4446  last_time: 1.4058  data_time: 0.0584  last_data_time: 0.0380   lr: 0.0001  max_mem: 36082M
[09/07 16:48:49] d2.utils.events INFO:  eta: 0:05:46  iter: 759  total_loss: 42.52  m1_loss_ce: 0.4841  m1_loss_mask: 0.1483  m1_loss_dice: 1.237  m1_loss_ce_0: 0.5925  m1_loss_mask_0: 0.1726  m1_loss_dice_0: 1.395  m1_loss_ce_1: 0.6302  m1_loss_mask_1: 0.1605  m1_loss_dice_1: 1.349  m1_loss_ce_2: 0.5871  m1_loss_mask_2: 0.1505  m1_loss_dice_2: 1.236  m1_loss_ce_3: 0.5508  m1_loss_mask_3: 0.1507  m1_loss_dice_3: 1.206  m1_loss_ce_4: 0.5138  m1_loss_mask_4: 0.1502  m1_loss_dice_4: 1.236  m1_loss_ce_5: 0.5023  m1_loss_mask_5: 0.1483  m1_loss_dice_5: 1.249  m1_loss_ce_6: 0.4829  m1_loss_mask_6: 0.1498  m1_loss_dice_6: 1.191  m1_loss_ce_7: 0.4627  m1_loss_mask_7: 0.1488  m1_loss_dice_7: 1.192  m1_loss_ce_8: 0.4697  m1_loss_mask_8: 0.1496  m1_loss_dice_8: 1.233  m2_loss_ce: 0.4861  m2_loss_mask: 0.155  m2_loss_dice: 1.225  m2_loss_ce_0: 0.6294  m2_loss_mask_0: 0.1832  m2_loss_dice_0: 1.403  m2_loss_ce_1: 0.6454  m2_loss_mask_1: 0.1646  m2_loss_dice_1: 1.369  m2_loss_ce_2: 0.6095  m2_loss_mask_2: 0.1601  m2_loss_dice_2: 1.291  m2_loss_ce_3: 0.5611  m2_loss_mask_3: 0.1607  m2_loss_dice_3: 1.238  m2_loss_ce_4: 0.5186  m2_loss_mask_4: 0.1571  m2_loss_dice_4: 1.237  m2_loss_ce_5: 0.5152  m2_loss_mask_5: 0.1573  m2_loss_dice_5: 1.224  m2_loss_ce_6: 0.4784  m2_loss_mask_6: 0.1552  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.4738  m2_loss_mask_7: 0.1567  m2_loss_dice_7: 1.209  m2_loss_ce_8: 0.4975  m2_loss_mask_8: 0.1561  m2_loss_dice_8: 1.169  com_loss_ce: 1.753  com_loss_mask: 0.6925  com_loss_dice: 0.9706    time: 1.4456  last_time: 1.4701  data_time: 0.0560  last_data_time: 0.0659   lr: 0.0001  max_mem: 36082M
[09/07 16:49:18] d2.utils.events INFO:  eta: 0:05:17  iter: 779  total_loss: 41.95  m1_loss_ce: 0.4498  m1_loss_mask: 0.151  m1_loss_dice: 1.187  m1_loss_ce_0: 0.5819  m1_loss_mask_0: 0.1691  m1_loss_dice_0: 1.378  m1_loss_ce_1: 0.601  m1_loss_mask_1: 0.1622  m1_loss_dice_1: 1.326  m1_loss_ce_2: 0.5697  m1_loss_mask_2: 0.1592  m1_loss_dice_2: 1.264  m1_loss_ce_3: 0.51  m1_loss_mask_3: 0.1585  m1_loss_dice_3: 1.238  m1_loss_ce_4: 0.458  m1_loss_mask_4: 0.1567  m1_loss_dice_4: 1.219  m1_loss_ce_5: 0.4678  m1_loss_mask_5: 0.1562  m1_loss_dice_5: 1.199  m1_loss_ce_6: 0.4373  m1_loss_mask_6: 0.1574  m1_loss_dice_6: 1.209  m1_loss_ce_7: 0.4465  m1_loss_mask_7: 0.1538  m1_loss_dice_7: 1.172  m1_loss_ce_8: 0.4267  m1_loss_mask_8: 0.1551  m1_loss_dice_8: 1.22  m2_loss_ce: 0.4901  m2_loss_mask: 0.1598  m2_loss_dice: 1.186  m2_loss_ce_0: 0.626  m2_loss_mask_0: 0.1796  m2_loss_dice_0: 1.441  m2_loss_ce_1: 0.6601  m2_loss_mask_1: 0.1681  m2_loss_dice_1: 1.328  m2_loss_ce_2: 0.5996  m2_loss_mask_2: 0.162  m2_loss_dice_2: 1.268  m2_loss_ce_3: 0.5427  m2_loss_mask_3: 0.166  m2_loss_dice_3: 1.249  m2_loss_ce_4: 0.5177  m2_loss_mask_4: 0.1646  m2_loss_dice_4: 1.177  m2_loss_ce_5: 0.496  m2_loss_mask_5: 0.1605  m2_loss_dice_5: 1.198  m2_loss_ce_6: 0.497  m2_loss_mask_6: 0.1619  m2_loss_dice_6: 1.19  m2_loss_ce_7: 0.5198  m2_loss_mask_7: 0.1608  m2_loss_dice_7: 1.217  m2_loss_ce_8: 0.4917  m2_loss_mask_8: 0.1607  m2_loss_dice_8: 1.176  com_loss_ce: 1.742  com_loss_mask: 0.6925  com_loss_dice: 0.9704    time: 1.4455  last_time: 1.3778  data_time: 0.0505  last_data_time: 0.0452   lr: 0.0001  max_mem: 36082M
[09/07 16:49:47] d2.utils.events INFO:  eta: 0:04:48  iter: 799  total_loss: 39.31  m1_loss_ce: 0.45  m1_loss_mask: 0.1699  m1_loss_dice: 1.07  m1_loss_ce_0: 0.5804  m1_loss_mask_0: 0.1867  m1_loss_dice_0: 1.269  m1_loss_ce_1: 0.5796  m1_loss_mask_1: 0.1772  m1_loss_dice_1: 1.182  m1_loss_ce_2: 0.5495  m1_loss_mask_2: 0.173  m1_loss_dice_2: 1.148  m1_loss_ce_3: 0.5227  m1_loss_mask_3: 0.1715  m1_loss_dice_3: 1.085  m1_loss_ce_4: 0.463  m1_loss_mask_4: 0.1707  m1_loss_dice_4: 1.085  m1_loss_ce_5: 0.4517  m1_loss_mask_5: 0.1706  m1_loss_dice_5: 1.067  m1_loss_ce_6: 0.4244  m1_loss_mask_6: 0.1692  m1_loss_dice_6: 1.081  m1_loss_ce_7: 0.4088  m1_loss_mask_7: 0.1711  m1_loss_dice_7: 1.066  m1_loss_ce_8: 0.4481  m1_loss_mask_8: 0.1694  m1_loss_dice_8: 1.095  m2_loss_ce: 0.4677  m2_loss_mask: 0.1755  m2_loss_dice: 1.107  m2_loss_ce_0: 0.6424  m2_loss_mask_0: 0.2076  m2_loss_dice_0: 1.255  m2_loss_ce_1: 0.6234  m2_loss_mask_1: 0.1924  m2_loss_dice_1: 1.206  m2_loss_ce_2: 0.5879  m2_loss_mask_2: 0.1834  m2_loss_dice_2: 1.127  m2_loss_ce_3: 0.5406  m2_loss_mask_3: 0.1854  m2_loss_dice_3: 1.099  m2_loss_ce_4: 0.5073  m2_loss_mask_4: 0.1803  m2_loss_dice_4: 1.091  m2_loss_ce_5: 0.518  m2_loss_mask_5: 0.1801  m2_loss_dice_5: 1.108  m2_loss_ce_6: 0.4848  m2_loss_mask_6: 0.176  m2_loss_dice_6: 1.083  m2_loss_ce_7: 0.4533  m2_loss_mask_7: 0.1771  m2_loss_dice_7: 1.102  m2_loss_ce_8: 0.4647  m2_loss_mask_8: 0.1766  m2_loss_dice_8: 1.1  com_loss_ce: 1.726  com_loss_mask: 0.6925  com_loss_dice: 0.9688    time: 1.4451  last_time: 1.3671  data_time: 0.0573  last_data_time: 0.0349   lr: 0.0001  max_mem: 36082M
[09/07 16:50:15] d2.utils.events INFO:  eta: 0:04:20  iter: 819  total_loss: 41.22  m1_loss_ce: 0.4689  m1_loss_mask: 0.155  m1_loss_dice: 1.168  m1_loss_ce_0: 0.5902  m1_loss_mask_0: 0.1821  m1_loss_dice_0: 1.41  m1_loss_ce_1: 0.6256  m1_loss_mask_1: 0.1645  m1_loss_dice_1: 1.293  m1_loss_ce_2: 0.5749  m1_loss_mask_2: 0.1569  m1_loss_dice_2: 1.215  m1_loss_ce_3: 0.5196  m1_loss_mask_3: 0.1563  m1_loss_dice_3: 1.177  m1_loss_ce_4: 0.48  m1_loss_mask_4: 0.1552  m1_loss_dice_4: 1.166  m1_loss_ce_5: 0.5018  m1_loss_mask_5: 0.1543  m1_loss_dice_5: 1.134  m1_loss_ce_6: 0.46  m1_loss_mask_6: 0.1541  m1_loss_dice_6: 1.135  m1_loss_ce_7: 0.4598  m1_loss_mask_7: 0.1542  m1_loss_dice_7: 1.166  m1_loss_ce_8: 0.447  m1_loss_mask_8: 0.1553  m1_loss_dice_8: 1.196  m2_loss_ce: 0.488  m2_loss_mask: 0.1592  m2_loss_dice: 1.159  m2_loss_ce_0: 0.6126  m2_loss_mask_0: 0.1896  m2_loss_dice_0: 1.387  m2_loss_ce_1: 0.6887  m2_loss_mask_1: 0.1699  m2_loss_dice_1: 1.318  m2_loss_ce_2: 0.5913  m2_loss_mask_2: 0.1661  m2_loss_dice_2: 1.231  m2_loss_ce_3: 0.5479  m2_loss_mask_3: 0.1664  m2_loss_dice_3: 1.219  m2_loss_ce_4: 0.488  m2_loss_mask_4: 0.1645  m2_loss_dice_4: 1.178  m2_loss_ce_5: 0.5146  m2_loss_mask_5: 0.1647  m2_loss_dice_5: 1.177  m2_loss_ce_6: 0.4762  m2_loss_mask_6: 0.1616  m2_loss_dice_6: 1.172  m2_loss_ce_7: 0.4966  m2_loss_mask_7: 0.1604  m2_loss_dice_7: 1.182  m2_loss_ce_8: 0.476  m2_loss_mask_8: 0.158  m2_loss_dice_8: 1.155  com_loss_ce: 1.732  com_loss_mask: 0.6925  com_loss_dice: 0.971    time: 1.4447  last_time: 1.3925  data_time: 0.0474  last_data_time: 0.0512   lr: 0.0001  max_mem: 36082M
[09/07 16:50:45] d2.utils.events INFO:  eta: 0:03:51  iter: 839  total_loss: 40.99  m1_loss_ce: 0.4733  m1_loss_mask: 0.1552  m1_loss_dice: 1.163  m1_loss_ce_0: 0.5715  m1_loss_mask_0: 0.1762  m1_loss_dice_0: 1.316  m1_loss_ce_1: 0.5884  m1_loss_mask_1: 0.1673  m1_loss_dice_1: 1.289  m1_loss_ce_2: 0.5591  m1_loss_mask_2: 0.1611  m1_loss_dice_2: 1.232  m1_loss_ce_3: 0.4783  m1_loss_mask_3: 0.1585  m1_loss_dice_3: 1.203  m1_loss_ce_4: 0.4687  m1_loss_mask_4: 0.1562  m1_loss_dice_4: 1.191  m1_loss_ce_5: 0.457  m1_loss_mask_5: 0.1566  m1_loss_dice_5: 1.18  m1_loss_ce_6: 0.4334  m1_loss_mask_6: 0.1552  m1_loss_dice_6: 1.179  m1_loss_ce_7: 0.4513  m1_loss_mask_7: 0.154  m1_loss_dice_7: 1.143  m1_loss_ce_8: 0.4221  m1_loss_mask_8: 0.1543  m1_loss_dice_8: 1.146  m2_loss_ce: 0.4752  m2_loss_mask: 0.1564  m2_loss_dice: 1.121  m2_loss_ce_0: 0.6023  m2_loss_mask_0: 0.1957  m2_loss_dice_0: 1.354  m2_loss_ce_1: 0.6189  m2_loss_mask_1: 0.1687  m2_loss_dice_1: 1.317  m2_loss_ce_2: 0.6033  m2_loss_mask_2: 0.1624  m2_loss_dice_2: 1.229  m2_loss_ce_3: 0.5137  m2_loss_mask_3: 0.161  m2_loss_dice_3: 1.18  m2_loss_ce_4: 0.5197  m2_loss_mask_4: 0.1609  m2_loss_dice_4: 1.194  m2_loss_ce_5: 0.4936  m2_loss_mask_5: 0.1582  m2_loss_dice_5: 1.173  m2_loss_ce_6: 0.4938  m2_loss_mask_6: 0.1561  m2_loss_dice_6: 1.174  m2_loss_ce_7: 0.4913  m2_loss_mask_7: 0.1574  m2_loss_dice_7: 1.134  m2_loss_ce_8: 0.4562  m2_loss_mask_8: 0.1557  m2_loss_dice_8: 1.158  com_loss_ce: 1.721  com_loss_mask: 0.6925  com_loss_dice: 0.9689    time: 1.4456  last_time: 1.4569  data_time: 0.0540  last_data_time: 0.0400   lr: 0.0001  max_mem: 36082M
[09/07 16:51:14] d2.utils.events INFO:  eta: 0:03:22  iter: 859  total_loss: 41.06  m1_loss_ce: 0.4991  m1_loss_mask: 0.1607  m1_loss_dice: 1.209  m1_loss_ce_0: 0.5929  m1_loss_mask_0: 0.191  m1_loss_dice_0: 1.395  m1_loss_ce_1: 0.6297  m1_loss_mask_1: 0.1691  m1_loss_dice_1: 1.304  m1_loss_ce_2: 0.5613  m1_loss_mask_2: 0.1655  m1_loss_dice_2: 1.262  m1_loss_ce_3: 0.5229  m1_loss_mask_3: 0.1639  m1_loss_dice_3: 1.2  m1_loss_ce_4: 0.4754  m1_loss_mask_4: 0.1611  m1_loss_dice_4: 1.229  m1_loss_ce_5: 0.4638  m1_loss_mask_5: 0.1609  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.4667  m1_loss_mask_6: 0.1609  m1_loss_dice_6: 1.153  m1_loss_ce_7: 0.4639  m1_loss_mask_7: 0.1608  m1_loss_dice_7: 1.183  m1_loss_ce_8: 0.4549  m1_loss_mask_8: 0.1601  m1_loss_dice_8: 1.189  m2_loss_ce: 0.4657  m2_loss_mask: 0.1707  m2_loss_dice: 1.218  m2_loss_ce_0: 0.6291  m2_loss_mask_0: 0.1949  m2_loss_dice_0: 1.362  m2_loss_ce_1: 0.6652  m2_loss_mask_1: 0.1779  m2_loss_dice_1: 1.324  m2_loss_ce_2: 0.6097  m2_loss_mask_2: 0.171  m2_loss_dice_2: 1.249  m2_loss_ce_3: 0.5533  m2_loss_mask_3: 0.1757  m2_loss_dice_3: 1.187  m2_loss_ce_4: 0.4978  m2_loss_mask_4: 0.1725  m2_loss_dice_4: 1.267  m2_loss_ce_5: 0.4953  m2_loss_mask_5: 0.1698  m2_loss_dice_5: 1.176  m2_loss_ce_6: 0.4801  m2_loss_mask_6: 0.1726  m2_loss_dice_6: 1.18  m2_loss_ce_7: 0.501  m2_loss_mask_7: 0.1728  m2_loss_dice_7: 1.178  m2_loss_ce_8: 0.4806  m2_loss_mask_8: 0.1722  m2_loss_dice_8: 1.156  com_loss_ce: 1.735  com_loss_mask: 0.6925  com_loss_dice: 0.9702    time: 1.4460  last_time: 1.3675  data_time: 0.0490  last_data_time: 0.0454   lr: 0.0001  max_mem: 36082M
[09/07 16:51:44] d2.utils.events INFO:  eta: 0:02:53  iter: 879  total_loss: 43.39  m1_loss_ce: 0.496  m1_loss_mask: 0.1525  m1_loss_dice: 1.217  m1_loss_ce_0: 0.639  m1_loss_mask_0: 0.1708  m1_loss_dice_0: 1.368  m1_loss_ce_1: 0.6529  m1_loss_mask_1: 0.1548  m1_loss_dice_1: 1.32  m1_loss_ce_2: 0.6132  m1_loss_mask_2: 0.1506  m1_loss_dice_2: 1.34  m1_loss_ce_3: 0.5277  m1_loss_mask_3: 0.1541  m1_loss_dice_3: 1.223  m1_loss_ce_4: 0.499  m1_loss_mask_4: 0.1518  m1_loss_dice_4: 1.248  m1_loss_ce_5: 0.4951  m1_loss_mask_5: 0.153  m1_loss_dice_5: 1.218  m1_loss_ce_6: 0.4922  m1_loss_mask_6: 0.1525  m1_loss_dice_6: 1.193  m1_loss_ce_7: 0.4868  m1_loss_mask_7: 0.1537  m1_loss_dice_7: 1.242  m1_loss_ce_8: 0.4874  m1_loss_mask_8: 0.154  m1_loss_dice_8: 1.243  m2_loss_ce: 0.4958  m2_loss_mask: 0.1566  m2_loss_dice: 1.243  m2_loss_ce_0: 0.6977  m2_loss_mask_0: 0.1798  m2_loss_dice_0: 1.432  m2_loss_ce_1: 0.6771  m2_loss_mask_1: 0.1646  m2_loss_dice_1: 1.361  m2_loss_ce_2: 0.613  m2_loss_mask_2: 0.162  m2_loss_dice_2: 1.306  m2_loss_ce_3: 0.5632  m2_loss_mask_3: 0.1635  m2_loss_dice_3: 1.291  m2_loss_ce_4: 0.5207  m2_loss_mask_4: 0.1603  m2_loss_dice_4: 1.284  m2_loss_ce_5: 0.528  m2_loss_mask_5: 0.1575  m2_loss_dice_5: 1.265  m2_loss_ce_6: 0.5408  m2_loss_mask_6: 0.1571  m2_loss_dice_6: 1.255  m2_loss_ce_7: 0.4916  m2_loss_mask_7: 0.1565  m2_loss_dice_7: 1.26  m2_loss_ce_8: 0.5428  m2_loss_mask_8: 0.1577  m2_loss_dice_8: 1.23  com_loss_ce: 1.745  com_loss_mask: 0.6925  com_loss_dice: 0.9724    time: 1.4470  last_time: 1.6322  data_time: 0.0623  last_data_time: 0.0826   lr: 0.0001  max_mem: 36082M
[09/07 16:52:13] d2.utils.events INFO:  eta: 0:02:24  iter: 899  total_loss: 43.52  m1_loss_ce: 0.531  m1_loss_mask: 0.145  m1_loss_dice: 1.266  m1_loss_ce_0: 0.6187  m1_loss_mask_0: 0.1729  m1_loss_dice_0: 1.42  m1_loss_ce_1: 0.65  m1_loss_mask_1: 0.1576  m1_loss_dice_1: 1.342  m1_loss_ce_2: 0.5975  m1_loss_mask_2: 0.1561  m1_loss_dice_2: 1.298  m1_loss_ce_3: 0.5433  m1_loss_mask_3: 0.148  m1_loss_dice_3: 1.274  m1_loss_ce_4: 0.4983  m1_loss_mask_4: 0.1474  m1_loss_dice_4: 1.272  m1_loss_ce_5: 0.4881  m1_loss_mask_5: 0.148  m1_loss_dice_5: 1.261  m1_loss_ce_6: 0.4929  m1_loss_mask_6: 0.1475  m1_loss_dice_6: 1.244  m1_loss_ce_7: 0.48  m1_loss_mask_7: 0.1465  m1_loss_dice_7: 1.216  m1_loss_ce_8: 0.4871  m1_loss_mask_8: 0.1464  m1_loss_dice_8: 1.23  m2_loss_ce: 0.4961  m2_loss_mask: 0.1603  m2_loss_dice: 1.273  m2_loss_ce_0: 0.6116  m2_loss_mask_0: 0.1785  m2_loss_dice_0: 1.483  m2_loss_ce_1: 0.6887  m2_loss_mask_1: 0.1699  m2_loss_dice_1: 1.395  m2_loss_ce_2: 0.6117  m2_loss_mask_2: 0.1627  m2_loss_dice_2: 1.319  m2_loss_ce_3: 0.5519  m2_loss_mask_3: 0.1639  m2_loss_dice_3: 1.258  m2_loss_ce_4: 0.5149  m2_loss_mask_4: 0.1589  m2_loss_dice_4: 1.263  m2_loss_ce_5: 0.5032  m2_loss_mask_5: 0.1577  m2_loss_dice_5: 1.249  m2_loss_ce_6: 0.5401  m2_loss_mask_6: 0.1585  m2_loss_dice_6: 1.253  m2_loss_ce_7: 0.49  m2_loss_mask_7: 0.1601  m2_loss_dice_7: 1.232  m2_loss_ce_8: 0.4922  m2_loss_mask_8: 0.161  m2_loss_dice_8: 1.222  com_loss_ce: 1.754  com_loss_mask: 0.6924  com_loss_dice: 0.9711    time: 1.4471  last_time: 1.3605  data_time: 0.0593  last_data_time: 0.0375   lr: 0.0001  max_mem: 36082M
[09/07 16:52:43] d2.utils.events INFO:  eta: 0:01:55  iter: 919  total_loss: 40.93  m1_loss_ce: 0.47  m1_loss_mask: 0.1589  m1_loss_dice: 1.115  m1_loss_ce_0: 0.6153  m1_loss_mask_0: 0.1874  m1_loss_dice_0: 1.306  m1_loss_ce_1: 0.6551  m1_loss_mask_1: 0.1686  m1_loss_dice_1: 1.235  m1_loss_ce_2: 0.5939  m1_loss_mask_2: 0.1631  m1_loss_dice_2: 1.203  m1_loss_ce_3: 0.5456  m1_loss_mask_3: 0.1641  m1_loss_dice_3: 1.1  m1_loss_ce_4: 0.4976  m1_loss_mask_4: 0.1599  m1_loss_dice_4: 1.149  m1_loss_ce_5: 0.5011  m1_loss_mask_5: 0.159  m1_loss_dice_5: 1.098  m1_loss_ce_6: 0.5147  m1_loss_mask_6: 0.158  m1_loss_dice_6: 1.072  m1_loss_ce_7: 0.4854  m1_loss_mask_7: 0.16  m1_loss_dice_7: 1.094  m1_loss_ce_8: 0.4867  m1_loss_mask_8: 0.1584  m1_loss_dice_8: 1.081  m2_loss_ce: 0.4768  m2_loss_mask: 0.1664  m2_loss_dice: 1.122  m2_loss_ce_0: 0.6333  m2_loss_mask_0: 0.1953  m2_loss_dice_0: 1.349  m2_loss_ce_1: 0.666  m2_loss_mask_1: 0.176  m2_loss_dice_1: 1.282  m2_loss_ce_2: 0.6085  m2_loss_mask_2: 0.1718  m2_loss_dice_2: 1.175  m2_loss_ce_3: 0.5489  m2_loss_mask_3: 0.1703  m2_loss_dice_3: 1.132  m2_loss_ce_4: 0.5114  m2_loss_mask_4: 0.1704  m2_loss_dice_4: 1.137  m2_loss_ce_5: 0.5243  m2_loss_mask_5: 0.1664  m2_loss_dice_5: 1.096  m2_loss_ce_6: 0.4899  m2_loss_mask_6: 0.1662  m2_loss_dice_6: 1.114  m2_loss_ce_7: 0.4971  m2_loss_mask_7: 0.1674  m2_loss_dice_7: 1.107  m2_loss_ce_8: 0.5008  m2_loss_mask_8: 0.1671  m2_loss_dice_8: 1.107  com_loss_ce: 1.739  com_loss_mask: 0.6925  com_loss_dice: 0.9696    time: 1.4472  last_time: 1.5175  data_time: 0.0493  last_data_time: 0.0396   lr: 0.0001  max_mem: 36082M
[09/07 16:53:12] d2.utils.events INFO:  eta: 0:01:26  iter: 939  total_loss: 42.3  m1_loss_ce: 0.5002  m1_loss_mask: 0.1512  m1_loss_dice: 1.183  m1_loss_ce_0: 0.6375  m1_loss_mask_0: 0.1736  m1_loss_dice_0: 1.379  m1_loss_ce_1: 0.6869  m1_loss_mask_1: 0.1655  m1_loss_dice_1: 1.315  m1_loss_ce_2: 0.593  m1_loss_mask_2: 0.1527  m1_loss_dice_2: 1.256  m1_loss_ce_3: 0.5637  m1_loss_mask_3: 0.1558  m1_loss_dice_3: 1.202  m1_loss_ce_4: 0.507  m1_loss_mask_4: 0.1561  m1_loss_dice_4: 1.209  m1_loss_ce_5: 0.4875  m1_loss_mask_5: 0.1539  m1_loss_dice_5: 1.223  m1_loss_ce_6: 0.4995  m1_loss_mask_6: 0.156  m1_loss_dice_6: 1.188  m1_loss_ce_7: 0.4858  m1_loss_mask_7: 0.1543  m1_loss_dice_7: 1.177  m1_loss_ce_8: 0.5032  m1_loss_mask_8: 0.1549  m1_loss_dice_8: 1.202  m2_loss_ce: 0.5094  m2_loss_mask: 0.1574  m2_loss_dice: 1.193  m2_loss_ce_0: 0.6523  m2_loss_mask_0: 0.1869  m2_loss_dice_0: 1.418  m2_loss_ce_1: 0.6724  m2_loss_mask_1: 0.1707  m2_loss_dice_1: 1.37  m2_loss_ce_2: 0.6224  m2_loss_mask_2: 0.1614  m2_loss_dice_2: 1.241  m2_loss_ce_3: 0.5342  m2_loss_mask_3: 0.1615  m2_loss_dice_3: 1.25  m2_loss_ce_4: 0.5357  m2_loss_mask_4: 0.1596  m2_loss_dice_4: 1.255  m2_loss_ce_5: 0.5191  m2_loss_mask_5: 0.1587  m2_loss_dice_5: 1.208  m2_loss_ce_6: 0.5126  m2_loss_mask_6: 0.1585  m2_loss_dice_6: 1.142  m2_loss_ce_7: 0.5122  m2_loss_mask_7: 0.1559  m2_loss_dice_7: 1.195  m2_loss_ce_8: 0.5008  m2_loss_mask_8: 0.1558  m2_loss_dice_8: 1.2  com_loss_ce: 1.745  com_loss_mask: 0.6925  com_loss_dice: 0.9724    time: 1.4473  last_time: 1.3648  data_time: 0.0515  last_data_time: 0.0503   lr: 0.0001  max_mem: 36082M
[09/07 16:53:40] d2.utils.events INFO:  eta: 0:00:57  iter: 959  total_loss: 40.18  m1_loss_ce: 0.4768  m1_loss_mask: 0.1538  m1_loss_dice: 1.108  m1_loss_ce_0: 0.5742  m1_loss_mask_0: 0.1842  m1_loss_dice_0: 1.311  m1_loss_ce_1: 0.6323  m1_loss_mask_1: 0.166  m1_loss_dice_1: 1.25  m1_loss_ce_2: 0.5874  m1_loss_mask_2: 0.1555  m1_loss_dice_2: 1.198  m1_loss_ce_3: 0.5268  m1_loss_mask_3: 0.1559  m1_loss_dice_3: 1.138  m1_loss_ce_4: 0.5089  m1_loss_mask_4: 0.155  m1_loss_dice_4: 1.144  m1_loss_ce_5: 0.4634  m1_loss_mask_5: 0.1554  m1_loss_dice_5: 1.117  m1_loss_ce_6: 0.48  m1_loss_mask_6: 0.1556  m1_loss_dice_6: 1.11  m1_loss_ce_7: 0.4434  m1_loss_mask_7: 0.1557  m1_loss_dice_7: 1.13  m1_loss_ce_8: 0.4821  m1_loss_mask_8: 0.1521  m1_loss_dice_8: 1.102  m2_loss_ce: 0.4775  m2_loss_mask: 0.1578  m2_loss_dice: 1.108  m2_loss_ce_0: 0.6143  m2_loss_mask_0: 0.1994  m2_loss_dice_0: 1.341  m2_loss_ce_1: 0.6366  m2_loss_mask_1: 0.1685  m2_loss_dice_1: 1.308  m2_loss_ce_2: 0.561  m2_loss_mask_2: 0.1618  m2_loss_dice_2: 1.241  m2_loss_ce_3: 0.4947  m2_loss_mask_3: 0.1644  m2_loss_dice_3: 1.176  m2_loss_ce_4: 0.5007  m2_loss_mask_4: 0.1612  m2_loss_dice_4: 1.19  m2_loss_ce_5: 0.4728  m2_loss_mask_5: 0.1606  m2_loss_dice_5: 1.172  m2_loss_ce_6: 0.4541  m2_loss_mask_6: 0.1624  m2_loss_dice_6: 1.139  m2_loss_ce_7: 0.4702  m2_loss_mask_7: 0.1591  m2_loss_dice_7: 1.145  m2_loss_ce_8: 0.4682  m2_loss_mask_8: 0.1589  m2_loss_dice_8: 1.123  com_loss_ce: 1.711  com_loss_mask: 0.6925  com_loss_dice: 0.9696    time: 1.4465  last_time: 1.3664  data_time: 0.0583  last_data_time: 0.0690   lr: 0.0001  max_mem: 36082M
[09/07 16:54:09] d2.utils.events INFO:  eta: 0:00:28  iter: 979  total_loss: 41.54  m1_loss_ce: 0.4678  m1_loss_mask: 0.1489  m1_loss_dice: 1.159  m1_loss_ce_0: 0.6046  m1_loss_mask_0: 0.1782  m1_loss_dice_0: 1.369  m1_loss_ce_1: 0.6572  m1_loss_mask_1: 0.1574  m1_loss_dice_1: 1.26  m1_loss_ce_2: 0.5701  m1_loss_mask_2: 0.1546  m1_loss_dice_2: 1.208  m1_loss_ce_3: 0.546  m1_loss_mask_3: 0.151  m1_loss_dice_3: 1.165  m1_loss_ce_4: 0.4901  m1_loss_mask_4: 0.151  m1_loss_dice_4: 1.171  m1_loss_ce_5: 0.5081  m1_loss_mask_5: 0.1508  m1_loss_dice_5: 1.154  m1_loss_ce_6: 0.4726  m1_loss_mask_6: 0.1493  m1_loss_dice_6: 1.161  m1_loss_ce_7: 0.4818  m1_loss_mask_7: 0.1494  m1_loss_dice_7: 1.118  m1_loss_ce_8: 0.4777  m1_loss_mask_8: 0.1497  m1_loss_dice_8: 1.171  m2_loss_ce: 0.4827  m2_loss_mask: 0.1588  m2_loss_dice: 1.153  m2_loss_ce_0: 0.6418  m2_loss_mask_0: 0.1912  m2_loss_dice_0: 1.392  m2_loss_ce_1: 0.6277  m2_loss_mask_1: 0.1745  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.6135  m2_loss_mask_2: 0.1661  m2_loss_dice_2: 1.272  m2_loss_ce_3: 0.5225  m2_loss_mask_3: 0.1655  m2_loss_dice_3: 1.198  m2_loss_ce_4: 0.5031  m2_loss_mask_4: 0.1635  m2_loss_dice_4: 1.197  m2_loss_ce_5: 0.5374  m2_loss_mask_5: 0.1589  m2_loss_dice_5: 1.151  m2_loss_ce_6: 0.4786  m2_loss_mask_6: 0.1605  m2_loss_dice_6: 1.206  m2_loss_ce_7: 0.4703  m2_loss_mask_7: 0.1589  m2_loss_dice_7: 1.186  m2_loss_ce_8: 0.4762  m2_loss_mask_8: 0.1552  m2_loss_dice_8: 1.174  com_loss_ce: 1.723  com_loss_mask: 0.6925  com_loss_dice: 0.9717    time: 1.4466  last_time: 1.5333  data_time: 0.0547  last_data_time: 0.0510   lr: 0.0001  max_mem: 36082M
[09/07 16:54:38] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_softmax_entropy_2000_1000/model_final.pth
[09/07 16:54:41] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 42.37  m1_loss_ce: 0.4781  m1_loss_mask: 0.154  m1_loss_dice: 1.197  m1_loss_ce_0: 0.5585  m1_loss_mask_0: 0.1749  m1_loss_dice_0: 1.362  m1_loss_ce_1: 0.6682  m1_loss_mask_1: 0.1655  m1_loss_dice_1: 1.271  m1_loss_ce_2: 0.604  m1_loss_mask_2: 0.1541  m1_loss_dice_2: 1.207  m1_loss_ce_3: 0.5335  m1_loss_mask_3: 0.1559  m1_loss_dice_3: 1.178  m1_loss_ce_4: 0.4975  m1_loss_mask_4: 0.1564  m1_loss_dice_4: 1.185  m1_loss_ce_5: 0.4892  m1_loss_mask_5: 0.156  m1_loss_dice_5: 1.171  m1_loss_ce_6: 0.4838  m1_loss_mask_6: 0.1555  m1_loss_dice_6: 1.179  m1_loss_ce_7: 0.493  m1_loss_mask_7: 0.1555  m1_loss_dice_7: 1.163  m1_loss_ce_8: 0.4873  m1_loss_mask_8: 0.1532  m1_loss_dice_8: 1.133  m2_loss_ce: 0.4711  m2_loss_mask: 0.1602  m2_loss_dice: 1.152  m2_loss_ce_0: 0.6207  m2_loss_mask_0: 0.1852  m2_loss_dice_0: 1.336  m2_loss_ce_1: 0.6731  m2_loss_mask_1: 0.1669  m2_loss_dice_1: 1.335  m2_loss_ce_2: 0.6465  m2_loss_mask_2: 0.1598  m2_loss_dice_2: 1.277  m2_loss_ce_3: 0.5663  m2_loss_mask_3: 0.1611  m2_loss_dice_3: 1.17  m2_loss_ce_4: 0.5015  m2_loss_mask_4: 0.1615  m2_loss_dice_4: 1.203  m2_loss_ce_5: 0.5135  m2_loss_mask_5: 0.1604  m2_loss_dice_5: 1.21  m2_loss_ce_6: 0.5125  m2_loss_mask_6: 0.1591  m2_loss_dice_6: 1.191  m2_loss_ce_7: 0.4938  m2_loss_mask_7: 0.1594  m2_loss_dice_7: 1.135  m2_loss_ce_8: 0.4791  m2_loss_mask_8: 0.1589  m2_loss_dice_8: 1.162  com_loss_ce: 1.737  com_loss_mask: 0.6925  com_loss_dice: 0.9687    time: 1.4469  last_time: 1.4553  data_time: 0.0558  last_data_time: 0.1266   lr: 0.0001  max_mem: 36082M
[09/07 16:54:41] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:24:03 (1.4469 s / it)
[09/07 16:54:41] d2.engine.hooks INFO: Total training time: 0:24:12 (0:00:08 on hooks)
[09/07 16:54:41] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[09/07 16:54:41] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[09/07 16:54:41] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/07 16:54:41] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[09/07 16:54:41] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[09/07 16:56:09] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval29pls7y6 ...
[09/07 16:57:10] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 58.104 | 80.927 | 70.726 |      19       |
| Things | 50.442 | 80.211 | 62.716 |       8       |
| Stuff  | 63.676 | 81.448 | 76.551 |      11       |
[09/07 16:57:10] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.232 | 97.534 | 99.690 |     Stuff     |
| class_8  | 69.624 | 81.849 | 85.065 |     Stuff     |
| class_11 | 86.791 | 89.344 | 97.143 |     Stuff     |
| class_12 | 40.195 | 79.901 | 50.307 |     Stuff     |
| class_13 | 37.122 | 76.385 | 48.598 |     Stuff     |
| class_17 | 43.818 | 64.539 | 67.894 |     Stuff     |
| class_19 | 48.818 | 70.015 | 69.725 |     Stuff     |
| class_20 | 66.870 | 77.656 | 86.111 |     Stuff     |
| class_21 | 88.923 | 90.123 | 98.669 |     Stuff     |
| class_22 | 33.135 | 76.680 | 43.212 |     Stuff     |
| class_23 | 87.908 | 91.904 | 95.652 |     Stuff     |
| class_24 | 53.058 | 77.120 | 68.800 |    Things     |
| class_25 | 49.726 | 73.738 | 67.437 |    Things     |
| class_26 | 65.294 | 82.842 | 78.818 |    Things     |
| class_27 | 53.701 | 88.224 | 60.870 |    Things     |
| class_28 | 61.791 | 88.942 | 69.474 |    Things     |
| class_31 | 42.393 | 84.786 | 50.000 |    Things     |
| class_32 | 37.532 | 74.303 | 50.512 |    Things     |
| class_33 | 40.041 | 71.735 | 55.818 |    Things     |
[09/07 16:57:10] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[09/07 16:57:10] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[09/07 16:57:10] d2.evaluation.testing INFO: copypaste: 58.1039,80.9273,70.7260,50.4422,80.2112,62.7160,63.6761,81.4480,76.5514,97.2317,97.5343,99.6898,69.6245,81.8486,85.0649,86.7909,89.3435,97.1429,40.1955,79.9007,50.3067,37.1216,76.3849,48.5981,43.8177,64.5387,67.8937,48.8180,70.0153,69.7248,66.8704,77.6560,86.1111,88.9235,90.1226,98.6694,33.1350,76.6797,43.2122,87.9083,91.9042,95.6522,53.0584,77.1198,68.8000,49.7265,73.7377,67.4370,65.2944,82.8424,78.8176,53.7014,88.2237,60.8696,61.7912,88.9418,69.4737,42.3929,84.7858,50.0000,37.5321,74.3034,50.5119,40.0411,71.7350,55.8180
