[10/07 11:39:43] detectron2 INFO: Rank of current process: 0. World size: 2
[10/07 11:39:44] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/07 11:39:44] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/cl_Comb_2_L1_L2_0_6_0_4_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/07 11:39:44] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/cl_Comb_2_L1_L2_0_6_0_4_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/07 11:39:44] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: convnext_large_d_320
    CLIP_PRETRAINED_WEIGHTS: laion2b_s29b_b131k_ft_soup
    EMBED_DIM: 768
    ENSEMBLE_ON_VALID_MASK: false
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/07 11:39:44] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4/config.yaml
[10/07 11:39:44] d2.utils.env INFO: Using a generated random seed 46706736
[10/07 11:39:55] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): TimmModel(
        (trunk): ConvNeXt(
          (stem): Sequential(
            (0): Conv2d(3, 192, kernel_size=(4, 4), stride=(4, 4))
            (1): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          )
          (stages): Sequential(
            (0): ConvNeXtStage(
              (downsample): Identity()
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): Identity()
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.003)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.006)
                )
              )
            )
            (1): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.009)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.011)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.014)
                )
              )
            )
            (2): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.017)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.020)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.023)
                )
                (3): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.026)
                )
                (4): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.029)
                )
                (5): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.031)
                )
                (6): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.034)
                )
                (7): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.037)
                )
                (8): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.040)
                )
                (9): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.043)
                )
                (10): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.046)
                )
                (11): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.049)
                )
                (12): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.051)
                )
                (13): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.054)
                )
                (14): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.057)
                )
                (15): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.060)
                )
                (16): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.063)
                )
                (17): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.066)
                )
                (18): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.069)
                )
                (19): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.071)
                )
                (20): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.074)
                )
                (21): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.077)
                )
                (22): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.080)
                )
                (23): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.083)
                )
                (24): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.086)
                )
                (25): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.089)
                )
                (26): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.091)
                )
              )
            )
            (3): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(768, 1536, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.094)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.097)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.100)
                )
              )
            )
          )
          (norm_pre): Identity()
          (head): NormMlpClassifierHead(
            (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Identity())
            (norm): LayerNorm2d((1536,), eps=1e-06, elementwise_affine=True)
            (flatten): Flatten(start_dim=1, end_dim=-1)
            (pre_logits): Identity()
            (drop): Dropout(p=0.0, inplace=False)
            (fc): Identity()
          )
        )
        (head): Sequential(
          (mlp): Mlp(
            (fc1): Linear(in_features=1536, out_features=1536, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (norm): Identity()
            (fc2): Linear(in_features=1536, out_features=768, bias=False)
            (drop2): Dropout(p=0, inplace=False)
          )
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-15): 16 x ResidualAttentionBlock(
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): GELU(approximate='none')
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 768)
      (ln_final): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(1536, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=768, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 768)
)
[10/07 11:39:55] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/07 11:39:55] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/07 11:39:55] d2.data.build INFO: Using training sampler TrainingSampler
[10/07 11:39:55] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/07 11:39:55] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/07 11:39:55] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/07 11:39:55] d2.data.build INFO: Making batched data loader with batch_size=4
[10/07 11:39:55] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/07 11:40:05] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): TimmModel(
        (trunk): ConvNeXt(
          (stem): Sequential(
            (0): Conv2d(3, 192, kernel_size=(4, 4), stride=(4, 4))
            (1): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          )
          (stages): Sequential(
            (0): ConvNeXtStage(
              (downsample): Identity()
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): Identity()
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.003)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.006)
                )
              )
            )
            (1): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.009)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.011)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.014)
                )
              )
            )
            (2): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.017)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.020)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.023)
                )
                (3): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.026)
                )
                (4): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.029)
                )
                (5): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.031)
                )
                (6): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.034)
                )
                (7): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.037)
                )
                (8): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.040)
                )
                (9): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.043)
                )
                (10): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.046)
                )
                (11): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.049)
                )
                (12): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.051)
                )
                (13): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.054)
                )
                (14): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.057)
                )
                (15): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.060)
                )
                (16): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.063)
                )
                (17): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.066)
                )
                (18): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.069)
                )
                (19): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.071)
                )
                (20): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.074)
                )
                (21): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.077)
                )
                (22): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.080)
                )
                (23): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.083)
                )
                (24): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.086)
                )
                (25): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.089)
                )
                (26): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.091)
                )
              )
            )
            (3): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(768, 1536, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.094)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.097)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.100)
                )
              )
            )
          )
          (norm_pre): Identity()
          (head): NormMlpClassifierHead(
            (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Identity())
            (norm): LayerNorm2d((1536,), eps=1e-06, elementwise_affine=True)
            (flatten): Flatten(start_dim=1, end_dim=-1)
            (pre_logits): Identity()
            (drop): Dropout(p=0.0, inplace=False)
            (fc): Identity()
          )
        )
        (head): Sequential(
          (mlp): Mlp(
            (fc1): Linear(in_features=1536, out_features=1536, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (norm): Identity()
            (fc2): Linear(in_features=1536, out_features=768, bias=False)
            (drop2): Dropout(p=0, inplace=False)
          )
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-15): 16 x ResidualAttentionBlock(
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): GELU(approximate='none')
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 768)
      (ln_final): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(1536, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=768, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 768)
)
[10/07 11:40:05] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[10/07 11:40:05] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[10/07 11:40:51] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[10/07 11:40:51] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[10/07 11:42:24] d2.utils.events INFO:  eta: 0:26:16  iter: 19  total_loss: 36.15  m1_loss_ce: 0.4121  m1_loss_mask: 0.1624  m1_loss_dice: 1.08  m1_loss_ce_0: 0.6014  m1_loss_mask_0: 0.1953  m1_loss_dice_0: 1.299  m1_loss_ce_1: 0.6709  m1_loss_mask_1: 0.1819  m1_loss_dice_1: 1.237  m1_loss_ce_2: 0.592  m1_loss_mask_2: 0.1756  m1_loss_dice_2: 1.178  m1_loss_ce_3: 0.5003  m1_loss_mask_3: 0.1776  m1_loss_dice_3: 1.081  m1_loss_ce_4: 0.456  m1_loss_mask_4: 0.1783  m1_loss_dice_4: 1.102  m1_loss_ce_5: 0.4765  m1_loss_mask_5: 0.1731  m1_loss_dice_5: 1.122  m1_loss_ce_6: 0.454  m1_loss_mask_6: 0.1662  m1_loss_dice_6: 1.091  m1_loss_ce_7: 0.4595  m1_loss_mask_7: 0.1625  m1_loss_dice_7: 1.093  m1_loss_ce_8: 0.4483  m1_loss_mask_8: 0.1629  m1_loss_dice_8: 1.115  m2_loss_ce: 0.4698  m2_loss_mask: 0.1539  m2_loss_dice: 1.087  m2_loss_ce_0: 0.5544  m2_loss_mask_0: 0.1938  m2_loss_dice_0: 1.312  m2_loss_ce_1: 0.6385  m2_loss_mask_1: 0.1687  m2_loss_dice_1: 1.193  m2_loss_ce_2: 0.5655  m2_loss_mask_2: 0.1616  m2_loss_dice_2: 1.157  m2_loss_ce_3: 0.5075  m2_loss_mask_3: 0.1647  m2_loss_dice_3: 1.11  m2_loss_ce_4: 0.486  m2_loss_mask_4: 0.1564  m2_loss_dice_4: 1.098  m2_loss_ce_5: 0.4907  m2_loss_mask_5: 0.1576  m2_loss_dice_5: 1.083  m2_loss_ce_6: 0.4571  m2_loss_mask_6: 0.1569  m2_loss_dice_6: 1.066  m2_loss_ce_7: 0.4588  m2_loss_mask_7: 0.1559  m2_loss_dice_7: 1.07  m2_loss_ce_8: 0.4432  m2_loss_mask_8: 0.1558  m2_loss_dice_8: 1.106    time: 1.6177  last_time: 1.5863  data_time: 0.2956  last_data_time: 0.0411   lr: 0.0001  max_mem: 35424M
[10/07 11:42:57] d2.utils.events INFO:  eta: 0:25:54  iter: 39  total_loss: 38.06  m1_loss_ce: 0.4248  m1_loss_mask: 0.1515  m1_loss_dice: 1.188  m1_loss_ce_0: 0.5454  m1_loss_mask_0: 0.1736  m1_loss_dice_0: 1.465  m1_loss_ce_1: 0.6219  m1_loss_mask_1: 0.1631  m1_loss_dice_1: 1.323  m1_loss_ce_2: 0.5213  m1_loss_mask_2: 0.1547  m1_loss_dice_2: 1.278  m1_loss_ce_3: 0.4744  m1_loss_mask_3: 0.1528  m1_loss_dice_3: 1.212  m1_loss_ce_4: 0.4317  m1_loss_mask_4: 0.154  m1_loss_dice_4: 1.238  m1_loss_ce_5: 0.4292  m1_loss_mask_5: 0.1511  m1_loss_dice_5: 1.227  m1_loss_ce_6: 0.4126  m1_loss_mask_6: 0.1533  m1_loss_dice_6: 1.185  m1_loss_ce_7: 0.4327  m1_loss_mask_7: 0.1519  m1_loss_dice_7: 1.232  m1_loss_ce_8: 0.4236  m1_loss_mask_8: 0.1511  m1_loss_dice_8: 1.23  m2_loss_ce: 0.4451  m2_loss_mask: 0.1444  m2_loss_dice: 1.204  m2_loss_ce_0: 0.561  m2_loss_mask_0: 0.1745  m2_loss_dice_0: 1.41  m2_loss_ce_1: 0.6293  m2_loss_mask_1: 0.1609  m2_loss_dice_1: 1.348  m2_loss_ce_2: 0.5499  m2_loss_mask_2: 0.153  m2_loss_dice_2: 1.275  m2_loss_ce_3: 0.5127  m2_loss_mask_3: 0.1528  m2_loss_dice_3: 1.243  m2_loss_ce_4: 0.4678  m2_loss_mask_4: 0.149  m2_loss_dice_4: 1.201  m2_loss_ce_5: 0.4628  m2_loss_mask_5: 0.1476  m2_loss_dice_5: 1.248  m2_loss_ce_6: 0.439  m2_loss_mask_6: 0.1483  m2_loss_dice_6: 1.229  m2_loss_ce_7: 0.4268  m2_loss_mask_7: 0.1464  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.4352  m2_loss_mask_8: 0.1465  m2_loss_dice_8: 1.2    time: 1.6285  last_time: 1.6162  data_time: 0.0588  last_data_time: 0.0474   lr: 0.0001  max_mem: 35752M
[10/07 11:43:30] d2.utils.events INFO:  eta: 0:25:29  iter: 59  total_loss: 36.85  m1_loss_ce: 0.4203  m1_loss_mask: 0.1504  m1_loss_dice: 1.147  m1_loss_ce_0: 0.5658  m1_loss_mask_0: 0.1772  m1_loss_dice_0: 1.306  m1_loss_ce_1: 0.5897  m1_loss_mask_1: 0.1626  m1_loss_dice_1: 1.238  m1_loss_ce_2: 0.5244  m1_loss_mask_2: 0.151  m1_loss_dice_2: 1.221  m1_loss_ce_3: 0.4989  m1_loss_mask_3: 0.154  m1_loss_dice_3: 1.178  m1_loss_ce_4: 0.4493  m1_loss_mask_4: 0.151  m1_loss_dice_4: 1.153  m1_loss_ce_5: 0.4162  m1_loss_mask_5: 0.1534  m1_loss_dice_5: 1.139  m1_loss_ce_6: 0.4344  m1_loss_mask_6: 0.1506  m1_loss_dice_6: 1.123  m1_loss_ce_7: 0.4296  m1_loss_mask_7: 0.1521  m1_loss_dice_7: 1.19  m1_loss_ce_8: 0.4329  m1_loss_mask_8: 0.1506  m1_loss_dice_8: 1.108  m2_loss_ce: 0.4587  m2_loss_mask: 0.1464  m2_loss_dice: 1.173  m2_loss_ce_0: 0.5657  m2_loss_mask_0: 0.1792  m2_loss_dice_0: 1.334  m2_loss_ce_1: 0.6326  m2_loss_mask_1: 0.1634  m2_loss_dice_1: 1.281  m2_loss_ce_2: 0.5514  m2_loss_mask_2: 0.1537  m2_loss_dice_2: 1.212  m2_loss_ce_3: 0.5263  m2_loss_mask_3: 0.1521  m2_loss_dice_3: 1.202  m2_loss_ce_4: 0.4881  m2_loss_mask_4: 0.1475  m2_loss_dice_4: 1.154  m2_loss_ce_5: 0.4783  m2_loss_mask_5: 0.1462  m2_loss_dice_5: 1.125  m2_loss_ce_6: 0.4391  m2_loss_mask_6: 0.1469  m2_loss_dice_6: 1.176  m2_loss_ce_7: 0.464  m2_loss_mask_7: 0.1477  m2_loss_dice_7: 1.141  m2_loss_ce_8: 0.4884  m2_loss_mask_8: 0.1485  m2_loss_dice_8: 1.121    time: 1.6341  last_time: 1.6244  data_time: 0.0492  last_data_time: 0.0499   lr: 0.0001  max_mem: 35752M
[10/07 11:44:02] d2.utils.events INFO:  eta: 0:24:56  iter: 79  total_loss: 36.81  m1_loss_ce: 0.4318  m1_loss_mask: 0.1637  m1_loss_dice: 1.141  m1_loss_ce_0: 0.5446  m1_loss_mask_0: 0.1888  m1_loss_dice_0: 1.348  m1_loss_ce_1: 0.6032  m1_loss_mask_1: 0.1774  m1_loss_dice_1: 1.242  m1_loss_ce_2: 0.5256  m1_loss_mask_2: 0.1693  m1_loss_dice_2: 1.212  m1_loss_ce_3: 0.486  m1_loss_mask_3: 0.168  m1_loss_dice_3: 1.156  m1_loss_ce_4: 0.4446  m1_loss_mask_4: 0.1655  m1_loss_dice_4: 1.152  m1_loss_ce_5: 0.4265  m1_loss_mask_5: 0.1656  m1_loss_dice_5: 1.151  m1_loss_ce_6: 0.4088  m1_loss_mask_6: 0.1621  m1_loss_dice_6: 1.131  m1_loss_ce_7: 0.4102  m1_loss_mask_7: 0.1638  m1_loss_dice_7: 1.112  m1_loss_ce_8: 0.4212  m1_loss_mask_8: 0.1622  m1_loss_dice_8: 1.116  m2_loss_ce: 0.4366  m2_loss_mask: 0.1568  m2_loss_dice: 1.151  m2_loss_ce_0: 0.543  m2_loss_mask_0: 0.188  m2_loss_dice_0: 1.33  m2_loss_ce_1: 0.5972  m2_loss_mask_1: 0.1774  m2_loss_dice_1: 1.271  m2_loss_ce_2: 0.5391  m2_loss_mask_2: 0.1681  m2_loss_dice_2: 1.242  m2_loss_ce_3: 0.4749  m2_loss_mask_3: 0.1711  m2_loss_dice_3: 1.144  m2_loss_ce_4: 0.4444  m2_loss_mask_4: 0.1677  m2_loss_dice_4: 1.152  m2_loss_ce_5: 0.4703  m2_loss_mask_5: 0.1575  m2_loss_dice_5: 1.15  m2_loss_ce_6: 0.448  m2_loss_mask_6: 0.1553  m2_loss_dice_6: 1.118  m2_loss_ce_7: 0.4471  m2_loss_mask_7: 0.1585  m2_loss_dice_7: 1.138  m2_loss_ce_8: 0.4622  m2_loss_mask_8: 0.1567  m2_loss_dice_8: 1.145    time: 1.6343  last_time: 1.6261  data_time: 0.0454  last_data_time: 0.0405   lr: 0.0001  max_mem: 35752M
[10/07 11:44:36] d2.utils.events INFO:  eta: 0:24:27  iter: 99  total_loss: 37.68  m1_loss_ce: 0.4334  m1_loss_mask: 0.161  m1_loss_dice: 1.135  m1_loss_ce_0: 0.5401  m1_loss_mask_0: 0.1888  m1_loss_dice_0: 1.299  m1_loss_ce_1: 0.5864  m1_loss_mask_1: 0.1757  m1_loss_dice_1: 1.295  m1_loss_ce_2: 0.5288  m1_loss_mask_2: 0.1691  m1_loss_dice_2: 1.211  m1_loss_ce_3: 0.4894  m1_loss_mask_3: 0.1684  m1_loss_dice_3: 1.178  m1_loss_ce_4: 0.4613  m1_loss_mask_4: 0.1675  m1_loss_dice_4: 1.175  m1_loss_ce_5: 0.4267  m1_loss_mask_5: 0.1645  m1_loss_dice_5: 1.178  m1_loss_ce_6: 0.4106  m1_loss_mask_6: 0.1605  m1_loss_dice_6: 1.137  m1_loss_ce_7: 0.4456  m1_loss_mask_7: 0.1584  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.4337  m1_loss_mask_8: 0.1622  m1_loss_dice_8: 1.168  m2_loss_ce: 0.4597  m2_loss_mask: 0.1627  m2_loss_dice: 1.127  m2_loss_ce_0: 0.5719  m2_loss_mask_0: 0.1876  m2_loss_dice_0: 1.329  m2_loss_ce_1: 0.6293  m2_loss_mask_1: 0.1745  m2_loss_dice_1: 1.301  m2_loss_ce_2: 0.5562  m2_loss_mask_2: 0.1668  m2_loss_dice_2: 1.209  m2_loss_ce_3: 0.5106  m2_loss_mask_3: 0.1659  m2_loss_dice_3: 1.175  m2_loss_ce_4: 0.4752  m2_loss_mask_4: 0.1584  m2_loss_dice_4: 1.156  m2_loss_ce_5: 0.4801  m2_loss_mask_5: 0.162  m2_loss_dice_5: 1.175  m2_loss_ce_6: 0.4661  m2_loss_mask_6: 0.1623  m2_loss_dice_6: 1.172  m2_loss_ce_7: 0.4629  m2_loss_mask_7: 0.1593  m2_loss_dice_7: 1.144  m2_loss_ce_8: 0.4667  m2_loss_mask_8: 0.1613  m2_loss_dice_8: 1.165    time: 1.6369  last_time: 1.6178  data_time: 0.0489  last_data_time: 0.0398   lr: 0.0001  max_mem: 35752M
[10/07 11:45:09] d2.utils.events INFO:  eta: 0:23:55  iter: 119  total_loss: 37.26  m1_loss_ce: 0.4146  m1_loss_mask: 0.1562  m1_loss_dice: 1.131  m1_loss_ce_0: 0.5332  m1_loss_mask_0: 0.1908  m1_loss_dice_0: 1.322  m1_loss_ce_1: 0.5786  m1_loss_mask_1: 0.1768  m1_loss_dice_1: 1.237  m1_loss_ce_2: 0.5278  m1_loss_mask_2: 0.1631  m1_loss_dice_2: 1.197  m1_loss_ce_3: 0.4645  m1_loss_mask_3: 0.159  m1_loss_dice_3: 1.191  m1_loss_ce_4: 0.4194  m1_loss_mask_4: 0.1593  m1_loss_dice_4: 1.166  m1_loss_ce_5: 0.4194  m1_loss_mask_5: 0.1568  m1_loss_dice_5: 1.137  m1_loss_ce_6: 0.4181  m1_loss_mask_6: 0.1567  m1_loss_dice_6: 1.142  m1_loss_ce_7: 0.4106  m1_loss_mask_7: 0.1575  m1_loss_dice_7: 1.107  m1_loss_ce_8: 0.4081  m1_loss_mask_8: 0.1569  m1_loss_dice_8: 1.159  m2_loss_ce: 0.454  m2_loss_mask: 0.1556  m2_loss_dice: 1.146  m2_loss_ce_0: 0.5474  m2_loss_mask_0: 0.1907  m2_loss_dice_0: 1.337  m2_loss_ce_1: 0.5993  m2_loss_mask_1: 0.1709  m2_loss_dice_1: 1.265  m2_loss_ce_2: 0.532  m2_loss_mask_2: 0.1597  m2_loss_dice_2: 1.237  m2_loss_ce_3: 0.4973  m2_loss_mask_3: 0.1668  m2_loss_dice_3: 1.201  m2_loss_ce_4: 0.4445  m2_loss_mask_4: 0.1586  m2_loss_dice_4: 1.201  m2_loss_ce_5: 0.421  m2_loss_mask_5: 0.1554  m2_loss_dice_5: 1.162  m2_loss_ce_6: 0.4307  m2_loss_mask_6: 0.1585  m2_loss_dice_6: 1.169  m2_loss_ce_7: 0.3963  m2_loss_mask_7: 0.1538  m2_loss_dice_7: 1.166  m2_loss_ce_8: 0.4451  m2_loss_mask_8: 0.1536  m2_loss_dice_8: 1.181    time: 1.6398  last_time: 1.6366  data_time: 0.0544  last_data_time: 0.0466   lr: 0.0001  max_mem: 36747M
[10/07 11:45:42] d2.utils.events INFO:  eta: 0:23:23  iter: 139  total_loss: 36.8  m1_loss_ce: 0.4234  m1_loss_mask: 0.1451  m1_loss_dice: 1.125  m1_loss_ce_0: 0.5408  m1_loss_mask_0: 0.1657  m1_loss_dice_0: 1.323  m1_loss_ce_1: 0.5874  m1_loss_mask_1: 0.1551  m1_loss_dice_1: 1.274  m1_loss_ce_2: 0.5246  m1_loss_mask_2: 0.1506  m1_loss_dice_2: 1.234  m1_loss_ce_3: 0.464  m1_loss_mask_3: 0.1486  m1_loss_dice_3: 1.152  m1_loss_ce_4: 0.4236  m1_loss_mask_4: 0.1455  m1_loss_dice_4: 1.134  m1_loss_ce_5: 0.428  m1_loss_mask_5: 0.1474  m1_loss_dice_5: 1.145  m1_loss_ce_6: 0.4161  m1_loss_mask_6: 0.1466  m1_loss_dice_6: 1.169  m1_loss_ce_7: 0.434  m1_loss_mask_7: 0.1483  m1_loss_dice_7: 1.173  m1_loss_ce_8: 0.4098  m1_loss_mask_8: 0.1475  m1_loss_dice_8: 1.135  m2_loss_ce: 0.4305  m2_loss_mask: 0.1479  m2_loss_dice: 1.146  m2_loss_ce_0: 0.563  m2_loss_mask_0: 0.1713  m2_loss_dice_0: 1.387  m2_loss_ce_1: 0.6136  m2_loss_mask_1: 0.1512  m2_loss_dice_1: 1.26  m2_loss_ce_2: 0.5185  m2_loss_mask_2: 0.1558  m2_loss_dice_2: 1.239  m2_loss_ce_3: 0.481  m2_loss_mask_3: 0.152  m2_loss_dice_3: 1.198  m2_loss_ce_4: 0.4725  m2_loss_mask_4: 0.147  m2_loss_dice_4: 1.179  m2_loss_ce_5: 0.4617  m2_loss_mask_5: 0.1484  m2_loss_dice_5: 1.176  m2_loss_ce_6: 0.4326  m2_loss_mask_6: 0.1482  m2_loss_dice_6: 1.165  m2_loss_ce_7: 0.4582  m2_loss_mask_7: 0.1478  m2_loss_dice_7: 1.157  m2_loss_ce_8: 0.4326  m2_loss_mask_8: 0.1472  m2_loss_dice_8: 1.185    time: 1.6421  last_time: 1.6542  data_time: 0.0510  last_data_time: 0.0562   lr: 0.0001  max_mem: 36747M
[10/07 11:46:15] d2.utils.events INFO:  eta: 0:22:54  iter: 159  total_loss: 38.22  m1_loss_ce: 0.4006  m1_loss_mask: 0.1474  m1_loss_dice: 1.166  m1_loss_ce_0: 0.5581  m1_loss_mask_0: 0.175  m1_loss_dice_0: 1.364  m1_loss_ce_1: 0.5807  m1_loss_mask_1: 0.1658  m1_loss_dice_1: 1.327  m1_loss_ce_2: 0.5288  m1_loss_mask_2: 0.1584  m1_loss_dice_2: 1.235  m1_loss_ce_3: 0.4766  m1_loss_mask_3: 0.1538  m1_loss_dice_3: 1.168  m1_loss_ce_4: 0.4468  m1_loss_mask_4: 0.15  m1_loss_dice_4: 1.172  m1_loss_ce_5: 0.4532  m1_loss_mask_5: 0.1479  m1_loss_dice_5: 1.149  m1_loss_ce_6: 0.4316  m1_loss_mask_6: 0.1477  m1_loss_dice_6: 1.135  m1_loss_ce_7: 0.4139  m1_loss_mask_7: 0.1499  m1_loss_dice_7: 1.155  m1_loss_ce_8: 0.428  m1_loss_mask_8: 0.1486  m1_loss_dice_8: 1.127  m2_loss_ce: 0.4556  m2_loss_mask: 0.1435  m2_loss_dice: 1.145  m2_loss_ce_0: 0.5538  m2_loss_mask_0: 0.1815  m2_loss_dice_0: 1.414  m2_loss_ce_1: 0.6312  m2_loss_mask_1: 0.1602  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.5464  m2_loss_mask_2: 0.1557  m2_loss_dice_2: 1.238  m2_loss_ce_3: 0.4982  m2_loss_mask_3: 0.1492  m2_loss_dice_3: 1.217  m2_loss_ce_4: 0.4709  m2_loss_mask_4: 0.1485  m2_loss_dice_4: 1.189  m2_loss_ce_5: 0.4735  m2_loss_mask_5: 0.1452  m2_loss_dice_5: 1.197  m2_loss_ce_6: 0.4594  m2_loss_mask_6: 0.1451  m2_loss_dice_6: 1.174  m2_loss_ce_7: 0.4628  m2_loss_mask_7: 0.1422  m2_loss_dice_7: 1.13  m2_loss_ce_8: 0.4736  m2_loss_mask_8: 0.1437  m2_loss_dice_8: 1.181    time: 1.6450  last_time: 1.6454  data_time: 0.0497  last_data_time: 0.0438   lr: 0.0001  max_mem: 36747M
[10/07 11:46:49] d2.utils.events INFO:  eta: 0:22:25  iter: 179  total_loss: 36.81  m1_loss_ce: 0.4058  m1_loss_mask: 0.1614  m1_loss_dice: 1.188  m1_loss_ce_0: 0.5228  m1_loss_mask_0: 0.1906  m1_loss_dice_0: 1.36  m1_loss_ce_1: 0.5713  m1_loss_mask_1: 0.178  m1_loss_dice_1: 1.322  m1_loss_ce_2: 0.5044  m1_loss_mask_2: 0.1642  m1_loss_dice_2: 1.28  m1_loss_ce_3: 0.4614  m1_loss_mask_3: 0.1668  m1_loss_dice_3: 1.217  m1_loss_ce_4: 0.4434  m1_loss_mask_4: 0.1648  m1_loss_dice_4: 1.183  m1_loss_ce_5: 0.4306  m1_loss_mask_5: 0.1652  m1_loss_dice_5: 1.188  m1_loss_ce_6: 0.431  m1_loss_mask_6: 0.1632  m1_loss_dice_6: 1.194  m1_loss_ce_7: 0.4214  m1_loss_mask_7: 0.1619  m1_loss_dice_7: 1.164  m1_loss_ce_8: 0.4255  m1_loss_mask_8: 0.162  m1_loss_dice_8: 1.179  m2_loss_ce: 0.4726  m2_loss_mask: 0.1536  m2_loss_dice: 1.199  m2_loss_ce_0: 0.5809  m2_loss_mask_0: 0.1883  m2_loss_dice_0: 1.391  m2_loss_ce_1: 0.62  m2_loss_mask_1: 0.1746  m2_loss_dice_1: 1.31  m2_loss_ce_2: 0.5624  m2_loss_mask_2: 0.1636  m2_loss_dice_2: 1.28  m2_loss_ce_3: 0.5048  m2_loss_mask_3: 0.1593  m2_loss_dice_3: 1.237  m2_loss_ce_4: 0.4694  m2_loss_mask_4: 0.155  m2_loss_dice_4: 1.209  m2_loss_ce_5: 0.4472  m2_loss_mask_5: 0.1553  m2_loss_dice_5: 1.197  m2_loss_ce_6: 0.4491  m2_loss_mask_6: 0.1559  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.4523  m2_loss_mask_7: 0.1539  m2_loss_dice_7: 1.194  m2_loss_ce_8: 0.4732  m2_loss_mask_8: 0.1549  m2_loss_dice_8: 1.191    time: 1.6481  last_time: 1.6532  data_time: 0.0527  last_data_time: 0.0465   lr: 0.0001  max_mem: 36847M
[10/07 11:47:23] d2.utils.events INFO:  eta: 0:21:56  iter: 199  total_loss: 37.12  m1_loss_ce: 0.4093  m1_loss_mask: 0.1638  m1_loss_dice: 1.162  m1_loss_ce_0: 0.5178  m1_loss_mask_0: 0.1877  m1_loss_dice_0: 1.355  m1_loss_ce_1: 0.5785  m1_loss_mask_1: 0.1782  m1_loss_dice_1: 1.269  m1_loss_ce_2: 0.5299  m1_loss_mask_2: 0.1689  m1_loss_dice_2: 1.235  m1_loss_ce_3: 0.468  m1_loss_mask_3: 0.1677  m1_loss_dice_3: 1.218  m1_loss_ce_4: 0.467  m1_loss_mask_4: 0.1671  m1_loss_dice_4: 1.207  m1_loss_ce_5: 0.4265  m1_loss_mask_5: 0.1636  m1_loss_dice_5: 1.154  m1_loss_ce_6: 0.4549  m1_loss_mask_6: 0.1659  m1_loss_dice_6: 1.118  m1_loss_ce_7: 0.4467  m1_loss_mask_7: 0.1644  m1_loss_dice_7: 1.141  m1_loss_ce_8: 0.426  m1_loss_mask_8: 0.1639  m1_loss_dice_8: 1.173  m2_loss_ce: 0.4302  m2_loss_mask: 0.1608  m2_loss_dice: 1.154  m2_loss_ce_0: 0.5002  m2_loss_mask_0: 0.1844  m2_loss_dice_0: 1.396  m2_loss_ce_1: 0.6188  m2_loss_mask_1: 0.1725  m2_loss_dice_1: 1.288  m2_loss_ce_2: 0.5035  m2_loss_mask_2: 0.1671  m2_loss_dice_2: 1.235  m2_loss_ce_3: 0.508  m2_loss_mask_3: 0.1636  m2_loss_dice_3: 1.214  m2_loss_ce_4: 0.4526  m2_loss_mask_4: 0.1595  m2_loss_dice_4: 1.206  m2_loss_ce_5: 0.461  m2_loss_mask_5: 0.1605  m2_loss_dice_5: 1.167  m2_loss_ce_6: 0.4258  m2_loss_mask_6: 0.161  m2_loss_dice_6: 1.152  m2_loss_ce_7: 0.4504  m2_loss_mask_7: 0.1599  m2_loss_dice_7: 1.153  m2_loss_ce_8: 0.4673  m2_loss_mask_8: 0.1593  m2_loss_dice_8: 1.2    time: 1.6503  last_time: 1.6723  data_time: 0.0489  last_data_time: 0.0418   lr: 0.0001  max_mem: 36847M
[10/07 11:47:56] d2.utils.events INFO:  eta: 0:21:24  iter: 219  total_loss: 36.31  m1_loss_ce: 0.4363  m1_loss_mask: 0.1596  m1_loss_dice: 1.108  m1_loss_ce_0: 0.5316  m1_loss_mask_0: 0.1785  m1_loss_dice_0: 1.323  m1_loss_ce_1: 0.5902  m1_loss_mask_1: 0.1644  m1_loss_dice_1: 1.246  m1_loss_ce_2: 0.5159  m1_loss_mask_2: 0.1623  m1_loss_dice_2: 1.186  m1_loss_ce_3: 0.4669  m1_loss_mask_3: 0.1607  m1_loss_dice_3: 1.167  m1_loss_ce_4: 0.4426  m1_loss_mask_4: 0.1594  m1_loss_dice_4: 1.146  m1_loss_ce_5: 0.4667  m1_loss_mask_5: 0.157  m1_loss_dice_5: 1.135  m1_loss_ce_6: 0.435  m1_loss_mask_6: 0.1576  m1_loss_dice_6: 1.131  m1_loss_ce_7: 0.4408  m1_loss_mask_7: 0.1578  m1_loss_dice_7: 1.122  m1_loss_ce_8: 0.4044  m1_loss_mask_8: 0.1568  m1_loss_dice_8: 1.132  m2_loss_ce: 0.4455  m2_loss_mask: 0.1494  m2_loss_dice: 1.122  m2_loss_ce_0: 0.5424  m2_loss_mask_0: 0.1848  m2_loss_dice_0: 1.359  m2_loss_ce_1: 0.5967  m2_loss_mask_1: 0.1684  m2_loss_dice_1: 1.289  m2_loss_ce_2: 0.5396  m2_loss_mask_2: 0.1605  m2_loss_dice_2: 1.208  m2_loss_ce_3: 0.471  m2_loss_mask_3: 0.154  m2_loss_dice_3: 1.174  m2_loss_ce_4: 0.4515  m2_loss_mask_4: 0.1501  m2_loss_dice_4: 1.156  m2_loss_ce_5: 0.4824  m2_loss_mask_5: 0.15  m2_loss_dice_5: 1.126  m2_loss_ce_6: 0.4426  m2_loss_mask_6: 0.1499  m2_loss_dice_6: 1.13  m2_loss_ce_7: 0.4459  m2_loss_mask_7: 0.15  m2_loss_dice_7: 1.144  m2_loss_ce_8: 0.4538  m2_loss_mask_8: 0.1513  m2_loss_dice_8: 1.135    time: 1.6522  last_time: 1.6525  data_time: 0.0467  last_data_time: 0.0709   lr: 0.0001  max_mem: 36847M
[10/07 11:48:29] d2.utils.events INFO:  eta: 0:20:51  iter: 239  total_loss: 35.76  m1_loss_ce: 0.4086  m1_loss_mask: 0.1652  m1_loss_dice: 1.112  m1_loss_ce_0: 0.5149  m1_loss_mask_0: 0.1889  m1_loss_dice_0: 1.32  m1_loss_ce_1: 0.5887  m1_loss_mask_1: 0.1792  m1_loss_dice_1: 1.242  m1_loss_ce_2: 0.5167  m1_loss_mask_2: 0.1762  m1_loss_dice_2: 1.197  m1_loss_ce_3: 0.4466  m1_loss_mask_3: 0.1711  m1_loss_dice_3: 1.161  m1_loss_ce_4: 0.4225  m1_loss_mask_4: 0.1699  m1_loss_dice_4: 1.107  m1_loss_ce_5: 0.4293  m1_loss_mask_5: 0.166  m1_loss_dice_5: 1.136  m1_loss_ce_6: 0.4018  m1_loss_mask_6: 0.1679  m1_loss_dice_6: 1.128  m1_loss_ce_7: 0.3916  m1_loss_mask_7: 0.1671  m1_loss_dice_7: 1.167  m1_loss_ce_8: 0.4101  m1_loss_mask_8: 0.164  m1_loss_dice_8: 1.128  m2_loss_ce: 0.3931  m2_loss_mask: 0.1586  m2_loss_dice: 1.108  m2_loss_ce_0: 0.5242  m2_loss_mask_0: 0.1865  m2_loss_dice_0: 1.296  m2_loss_ce_1: 0.5822  m2_loss_mask_1: 0.1724  m2_loss_dice_1: 1.254  m2_loss_ce_2: 0.5176  m2_loss_mask_2: 0.1635  m2_loss_dice_2: 1.193  m2_loss_ce_3: 0.4632  m2_loss_mask_3: 0.1651  m2_loss_dice_3: 1.152  m2_loss_ce_4: 0.4194  m2_loss_mask_4: 0.1656  m2_loss_dice_4: 1.153  m2_loss_ce_5: 0.4363  m2_loss_mask_5: 0.1634  m2_loss_dice_5: 1.196  m2_loss_ce_6: 0.4104  m2_loss_mask_6: 0.1584  m2_loss_dice_6: 1.112  m2_loss_ce_7: 0.4088  m2_loss_mask_7: 0.1578  m2_loss_dice_7: 1.137  m2_loss_ce_8: 0.4235  m2_loss_mask_8: 0.1565  m2_loss_dice_8: 1.118    time: 1.6530  last_time: 1.6077  data_time: 0.0501  last_data_time: 0.0356   lr: 0.0001  max_mem: 36847M
[10/07 11:49:03] d2.utils.events INFO:  eta: 0:20:21  iter: 259  total_loss: 38.6  m1_loss_ce: 0.4766  m1_loss_mask: 0.1498  m1_loss_dice: 1.223  m1_loss_ce_0: 0.5496  m1_loss_mask_0: 0.1681  m1_loss_dice_0: 1.374  m1_loss_ce_1: 0.6181  m1_loss_mask_1: 0.1591  m1_loss_dice_1: 1.317  m1_loss_ce_2: 0.573  m1_loss_mask_2: 0.1546  m1_loss_dice_2: 1.263  m1_loss_ce_3: 0.5098  m1_loss_mask_3: 0.1499  m1_loss_dice_3: 1.221  m1_loss_ce_4: 0.4803  m1_loss_mask_4: 0.1501  m1_loss_dice_4: 1.213  m1_loss_ce_5: 0.4742  m1_loss_mask_5: 0.1494  m1_loss_dice_5: 1.244  m1_loss_ce_6: 0.4707  m1_loss_mask_6: 0.154  m1_loss_dice_6: 1.227  m1_loss_ce_7: 0.4662  m1_loss_mask_7: 0.1492  m1_loss_dice_7: 1.179  m1_loss_ce_8: 0.4808  m1_loss_mask_8: 0.1504  m1_loss_dice_8: 1.212  m2_loss_ce: 0.5003  m2_loss_mask: 0.1412  m2_loss_dice: 1.192  m2_loss_ce_0: 0.5968  m2_loss_mask_0: 0.1719  m2_loss_dice_0: 1.38  m2_loss_ce_1: 0.6597  m2_loss_mask_1: 0.1569  m2_loss_dice_1: 1.296  m2_loss_ce_2: 0.6146  m2_loss_mask_2: 0.1522  m2_loss_dice_2: 1.306  m2_loss_ce_3: 0.5637  m2_loss_mask_3: 0.1527  m2_loss_dice_3: 1.233  m2_loss_ce_4: 0.5079  m2_loss_mask_4: 0.1461  m2_loss_dice_4: 1.228  m2_loss_ce_5: 0.525  m2_loss_mask_5: 0.143  m2_loss_dice_5: 1.221  m2_loss_ce_6: 0.4992  m2_loss_mask_6: 0.1416  m2_loss_dice_6: 1.216  m2_loss_ce_7: 0.52  m2_loss_mask_7: 0.1426  m2_loss_dice_7: 1.208  m2_loss_ce_8: 0.5057  m2_loss_mask_8: 0.1398  m2_loss_dice_8: 1.214    time: 1.6545  last_time: 1.6263  data_time: 0.0480  last_data_time: 0.0539   lr: 0.0001  max_mem: 36847M
[10/07 11:49:36] d2.utils.events INFO:  eta: 0:19:48  iter: 279  total_loss: 36.82  m1_loss_ce: 0.4431  m1_loss_mask: 0.1643  m1_loss_dice: 1.074  m1_loss_ce_0: 0.5202  m1_loss_mask_0: 0.1897  m1_loss_dice_0: 1.337  m1_loss_ce_1: 0.6025  m1_loss_mask_1: 0.1791  m1_loss_dice_1: 1.261  m1_loss_ce_2: 0.5161  m1_loss_mask_2: 0.1694  m1_loss_dice_2: 1.211  m1_loss_ce_3: 0.467  m1_loss_mask_3: 0.172  m1_loss_dice_3: 1.148  m1_loss_ce_4: 0.4274  m1_loss_mask_4: 0.1702  m1_loss_dice_4: 1.11  m1_loss_ce_5: 0.4244  m1_loss_mask_5: 0.1693  m1_loss_dice_5: 1.158  m1_loss_ce_6: 0.4288  m1_loss_mask_6: 0.1704  m1_loss_dice_6: 1.115  m1_loss_ce_7: 0.4161  m1_loss_mask_7: 0.167  m1_loss_dice_7: 1.123  m1_loss_ce_8: 0.4488  m1_loss_mask_8: 0.1674  m1_loss_dice_8: 1.097  m2_loss_ce: 0.4401  m2_loss_mask: 0.1622  m2_loss_dice: 1.117  m2_loss_ce_0: 0.5739  m2_loss_mask_0: 0.193  m2_loss_dice_0: 1.345  m2_loss_ce_1: 0.6122  m2_loss_mask_1: 0.177  m2_loss_dice_1: 1.265  m2_loss_ce_2: 0.536  m2_loss_mask_2: 0.1728  m2_loss_dice_2: 1.209  m2_loss_ce_3: 0.4641  m2_loss_mask_3: 0.1669  m2_loss_dice_3: 1.162  m2_loss_ce_4: 0.4758  m2_loss_mask_4: 0.1657  m2_loss_dice_4: 1.136  m2_loss_ce_5: 0.4677  m2_loss_mask_5: 0.163  m2_loss_dice_5: 1.126  m2_loss_ce_6: 0.4364  m2_loss_mask_6: 0.1626  m2_loss_dice_6: 1.125  m2_loss_ce_7: 0.4562  m2_loss_mask_7: 0.1632  m2_loss_dice_7: 1.147  m2_loss_ce_8: 0.4455  m2_loss_mask_8: 0.162  m2_loss_dice_8: 1.141    time: 1.6547  last_time: 1.6549  data_time: 0.0445  last_data_time: 0.0434   lr: 0.0001  max_mem: 36847M
[10/07 11:50:10] d2.utils.events INFO:  eta: 0:19:16  iter: 299  total_loss: 38.02  m1_loss_ce: 0.4336  m1_loss_mask: 0.149  m1_loss_dice: 1.218  m1_loss_ce_0: 0.5581  m1_loss_mask_0: 0.1705  m1_loss_dice_0: 1.384  m1_loss_ce_1: 0.5729  m1_loss_mask_1: 0.1579  m1_loss_dice_1: 1.309  m1_loss_ce_2: 0.5487  m1_loss_mask_2: 0.1535  m1_loss_dice_2: 1.24  m1_loss_ce_3: 0.4833  m1_loss_mask_3: 0.1511  m1_loss_dice_3: 1.228  m1_loss_ce_4: 0.4633  m1_loss_mask_4: 0.1519  m1_loss_dice_4: 1.198  m1_loss_ce_5: 0.456  m1_loss_mask_5: 0.1498  m1_loss_dice_5: 1.214  m1_loss_ce_6: 0.4527  m1_loss_mask_6: 0.1501  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.4389  m1_loss_mask_7: 0.1496  m1_loss_dice_7: 1.198  m1_loss_ce_8: 0.4178  m1_loss_mask_8: 0.1485  m1_loss_dice_8: 1.218  m2_loss_ce: 0.4677  m2_loss_mask: 0.1511  m2_loss_dice: 1.184  m2_loss_ce_0: 0.5769  m2_loss_mask_0: 0.1855  m2_loss_dice_0: 1.398  m2_loss_ce_1: 0.6302  m2_loss_mask_1: 0.1657  m2_loss_dice_1: 1.337  m2_loss_ce_2: 0.5494  m2_loss_mask_2: 0.1578  m2_loss_dice_2: 1.288  m2_loss_ce_3: 0.4883  m2_loss_mask_3: 0.1577  m2_loss_dice_3: 1.239  m2_loss_ce_4: 0.4878  m2_loss_mask_4: 0.1535  m2_loss_dice_4: 1.22  m2_loss_ce_5: 0.4795  m2_loss_mask_5: 0.1505  m2_loss_dice_5: 1.247  m2_loss_ce_6: 0.4454  m2_loss_mask_6: 0.1512  m2_loss_dice_6: 1.241  m2_loss_ce_7: 0.4571  m2_loss_mask_7: 0.1517  m2_loss_dice_7: 1.215  m2_loss_ce_8: 0.468  m2_loss_mask_8: 0.1518  m2_loss_dice_8: 1.198    time: 1.6562  last_time: 1.6577  data_time: 0.0503  last_data_time: 0.0384   lr: 0.0001  max_mem: 36847M
[10/07 11:50:43] d2.utils.events INFO:  eta: 0:18:43  iter: 319  total_loss: 36.56  m1_loss_ce: 0.4025  m1_loss_mask: 0.1642  m1_loss_dice: 1.157  m1_loss_ce_0: 0.5531  m1_loss_mask_0: 0.1886  m1_loss_dice_0: 1.3  m1_loss_ce_1: 0.5907  m1_loss_mask_1: 0.1812  m1_loss_dice_1: 1.282  m1_loss_ce_2: 0.5202  m1_loss_mask_2: 0.1677  m1_loss_dice_2: 1.231  m1_loss_ce_3: 0.4555  m1_loss_mask_3: 0.169  m1_loss_dice_3: 1.15  m1_loss_ce_4: 0.4162  m1_loss_mask_4: 0.1656  m1_loss_dice_4: 1.133  m1_loss_ce_5: 0.4135  m1_loss_mask_5: 0.1648  m1_loss_dice_5: 1.132  m1_loss_ce_6: 0.4097  m1_loss_mask_6: 0.1628  m1_loss_dice_6: 1.128  m1_loss_ce_7: 0.4318  m1_loss_mask_7: 0.1612  m1_loss_dice_7: 1.148  m1_loss_ce_8: 0.397  m1_loss_mask_8: 0.1631  m1_loss_dice_8: 1.172  m2_loss_ce: 0.4576  m2_loss_mask: 0.1573  m2_loss_dice: 1.128  m2_loss_ce_0: 0.5423  m2_loss_mask_0: 0.1895  m2_loss_dice_0: 1.317  m2_loss_ce_1: 0.6335  m2_loss_mask_1: 0.1768  m2_loss_dice_1: 1.257  m2_loss_ce_2: 0.584  m2_loss_mask_2: 0.1655  m2_loss_dice_2: 1.215  m2_loss_ce_3: 0.4908  m2_loss_mask_3: 0.1668  m2_loss_dice_3: 1.194  m2_loss_ce_4: 0.4801  m2_loss_mask_4: 0.1644  m2_loss_dice_4: 1.181  m2_loss_ce_5: 0.4527  m2_loss_mask_5: 0.1596  m2_loss_dice_5: 1.17  m2_loss_ce_6: 0.4466  m2_loss_mask_6: 0.1602  m2_loss_dice_6: 1.15  m2_loss_ce_7: 0.4555  m2_loss_mask_7: 0.1586  m2_loss_dice_7: 1.158  m2_loss_ce_8: 0.4283  m2_loss_mask_8: 0.1584  m2_loss_dice_8: 1.154    time: 1.6567  last_time: 1.6950  data_time: 0.0466  last_data_time: 0.0365   lr: 0.0001  max_mem: 36847M
[10/07 11:51:17] d2.utils.events INFO:  eta: 0:18:12  iter: 339  total_loss: 36.55  m1_loss_ce: 0.416  m1_loss_mask: 0.1559  m1_loss_dice: 1.113  m1_loss_ce_0: 0.5336  m1_loss_mask_0: 0.1792  m1_loss_dice_0: 1.327  m1_loss_ce_1: 0.5498  m1_loss_mask_1: 0.168  m1_loss_dice_1: 1.269  m1_loss_ce_2: 0.5285  m1_loss_mask_2: 0.1629  m1_loss_dice_2: 1.205  m1_loss_ce_3: 0.4583  m1_loss_mask_3: 0.1618  m1_loss_dice_3: 1.157  m1_loss_ce_4: 0.4361  m1_loss_mask_4: 0.1576  m1_loss_dice_4: 1.151  m1_loss_ce_5: 0.4024  m1_loss_mask_5: 0.1597  m1_loss_dice_5: 1.136  m1_loss_ce_6: 0.4121  m1_loss_mask_6: 0.1577  m1_loss_dice_6: 1.136  m1_loss_ce_7: 0.4093  m1_loss_mask_7: 0.1584  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.4215  m1_loss_mask_8: 0.1579  m1_loss_dice_8: 1.158  m2_loss_ce: 0.4602  m2_loss_mask: 0.158  m2_loss_dice: 1.14  m2_loss_ce_0: 0.5499  m2_loss_mask_0: 0.1821  m2_loss_dice_0: 1.396  m2_loss_ce_1: 0.6021  m2_loss_mask_1: 0.1716  m2_loss_dice_1: 1.258  m2_loss_ce_2: 0.5948  m2_loss_mask_2: 0.1663  m2_loss_dice_2: 1.206  m2_loss_ce_3: 0.4864  m2_loss_mask_3: 0.1624  m2_loss_dice_3: 1.145  m2_loss_ce_4: 0.4859  m2_loss_mask_4: 0.1602  m2_loss_dice_4: 1.175  m2_loss_ce_5: 0.4695  m2_loss_mask_5: 0.1603  m2_loss_dice_5: 1.141  m2_loss_ce_6: 0.4539  m2_loss_mask_6: 0.1594  m2_loss_dice_6: 1.115  m2_loss_ce_7: 0.4306  m2_loss_mask_7: 0.1575  m2_loss_dice_7: 1.14  m2_loss_ce_8: 0.4683  m2_loss_mask_8: 0.1586  m2_loss_dice_8: 1.141    time: 1.6588  last_time: 1.7402  data_time: 0.0520  last_data_time: 0.0433   lr: 0.0001  max_mem: 36847M
[10/07 11:51:51] d2.utils.events INFO:  eta: 0:17:39  iter: 359  total_loss: 37.54  m1_loss_ce: 0.4093  m1_loss_mask: 0.1526  m1_loss_dice: 1.145  m1_loss_ce_0: 0.5618  m1_loss_mask_0: 0.1744  m1_loss_dice_0: 1.347  m1_loss_ce_1: 0.6108  m1_loss_mask_1: 0.1638  m1_loss_dice_1: 1.284  m1_loss_ce_2: 0.5662  m1_loss_mask_2: 0.157  m1_loss_dice_2: 1.211  m1_loss_ce_3: 0.5126  m1_loss_mask_3: 0.1535  m1_loss_dice_3: 1.13  m1_loss_ce_4: 0.4767  m1_loss_mask_4: 0.1547  m1_loss_dice_4: 1.163  m1_loss_ce_5: 0.4729  m1_loss_mask_5: 0.1535  m1_loss_dice_5: 1.173  m1_loss_ce_6: 0.432  m1_loss_mask_6: 0.1537  m1_loss_dice_6: 1.168  m1_loss_ce_7: 0.4255  m1_loss_mask_7: 0.1529  m1_loss_dice_7: 1.151  m1_loss_ce_8: 0.4358  m1_loss_mask_8: 0.1536  m1_loss_dice_8: 1.135  m2_loss_ce: 0.4487  m2_loss_mask: 0.1546  m2_loss_dice: 1.153  m2_loss_ce_0: 0.5647  m2_loss_mask_0: 0.1761  m2_loss_dice_0: 1.376  m2_loss_ce_1: 0.6266  m2_loss_mask_1: 0.1697  m2_loss_dice_1: 1.293  m2_loss_ce_2: 0.5737  m2_loss_mask_2: 0.1581  m2_loss_dice_2: 1.256  m2_loss_ce_3: 0.4592  m2_loss_mask_3: 0.1578  m2_loss_dice_3: 1.204  m2_loss_ce_4: 0.443  m2_loss_mask_4: 0.156  m2_loss_dice_4: 1.162  m2_loss_ce_5: 0.4671  m2_loss_mask_5: 0.1545  m2_loss_dice_5: 1.177  m2_loss_ce_6: 0.4435  m2_loss_mask_6: 0.152  m2_loss_dice_6: 1.161  m2_loss_ce_7: 0.447  m2_loss_mask_7: 0.1527  m2_loss_dice_7: 1.201  m2_loss_ce_8: 0.4319  m2_loss_mask_8: 0.1533  m2_loss_dice_8: 1.163    time: 1.6596  last_time: 1.7054  data_time: 0.0504  last_data_time: 0.0931   lr: 0.0001  max_mem: 36847M
[10/07 11:52:25] d2.utils.events INFO:  eta: 0:17:06  iter: 379  total_loss: 36.79  m1_loss_ce: 0.4642  m1_loss_mask: 0.1502  m1_loss_dice: 1.163  m1_loss_ce_0: 0.5569  m1_loss_mask_0: 0.1649  m1_loss_dice_0: 1.325  m1_loss_ce_1: 0.6209  m1_loss_mask_1: 0.165  m1_loss_dice_1: 1.253  m1_loss_ce_2: 0.5473  m1_loss_mask_2: 0.1577  m1_loss_dice_2: 1.23  m1_loss_ce_3: 0.5089  m1_loss_mask_3: 0.1566  m1_loss_dice_3: 1.17  m1_loss_ce_4: 0.5069  m1_loss_mask_4: 0.1549  m1_loss_dice_4: 1.185  m1_loss_ce_5: 0.4556  m1_loss_mask_5: 0.1506  m1_loss_dice_5: 1.184  m1_loss_ce_6: 0.4512  m1_loss_mask_6: 0.1481  m1_loss_dice_6: 1.161  m1_loss_ce_7: 0.4541  m1_loss_mask_7: 0.1487  m1_loss_dice_7: 1.172  m1_loss_ce_8: 0.4214  m1_loss_mask_8: 0.15  m1_loss_dice_8: 1.161  m2_loss_ce: 0.4424  m2_loss_mask: 0.1506  m2_loss_dice: 1.158  m2_loss_ce_0: 0.5859  m2_loss_mask_0: 0.1724  m2_loss_dice_0: 1.381  m2_loss_ce_1: 0.629  m2_loss_mask_1: 0.1657  m2_loss_dice_1: 1.296  m2_loss_ce_2: 0.5502  m2_loss_mask_2: 0.156  m2_loss_dice_2: 1.236  m2_loss_ce_3: 0.5063  m2_loss_mask_3: 0.1546  m2_loss_dice_3: 1.241  m2_loss_ce_4: 0.4725  m2_loss_mask_4: 0.1541  m2_loss_dice_4: 1.212  m2_loss_ce_5: 0.4672  m2_loss_mask_5: 0.1505  m2_loss_dice_5: 1.154  m2_loss_ce_6: 0.4787  m2_loss_mask_6: 0.1515  m2_loss_dice_6: 1.167  m2_loss_ce_7: 0.4823  m2_loss_mask_7: 0.1504  m2_loss_dice_7: 1.174  m2_loss_ce_8: 0.461  m2_loss_mask_8: 0.1513  m2_loss_dice_8: 1.214    time: 1.6608  last_time: 1.7876  data_time: 0.0545  last_data_time: 0.0825   lr: 0.0001  max_mem: 36847M
[10/07 11:52:58] d2.utils.events INFO:  eta: 0:16:33  iter: 399  total_loss: 36.22  m1_loss_ce: 0.3853  m1_loss_mask: 0.1582  m1_loss_dice: 1.154  m1_loss_ce_0: 0.4847  m1_loss_mask_0: 0.1778  m1_loss_dice_0: 1.299  m1_loss_ce_1: 0.5631  m1_loss_mask_1: 0.1621  m1_loss_dice_1: 1.255  m1_loss_ce_2: 0.4674  m1_loss_mask_2: 0.1619  m1_loss_dice_2: 1.223  m1_loss_ce_3: 0.442  m1_loss_mask_3: 0.162  m1_loss_dice_3: 1.146  m1_loss_ce_4: 0.4123  m1_loss_mask_4: 0.1598  m1_loss_dice_4: 1.169  m1_loss_ce_5: 0.3941  m1_loss_mask_5: 0.1595  m1_loss_dice_5: 1.116  m1_loss_ce_6: 0.3984  m1_loss_mask_6: 0.1585  m1_loss_dice_6: 1.099  m1_loss_ce_7: 0.3892  m1_loss_mask_7: 0.1574  m1_loss_dice_7: 1.115  m1_loss_ce_8: 0.3895  m1_loss_mask_8: 0.1577  m1_loss_dice_8: 1.117  m2_loss_ce: 0.4252  m2_loss_mask: 0.1557  m2_loss_dice: 1.19  m2_loss_ce_0: 0.5257  m2_loss_mask_0: 0.183  m2_loss_dice_0: 1.324  m2_loss_ce_1: 0.6225  m2_loss_mask_1: 0.1685  m2_loss_dice_1: 1.293  m2_loss_ce_2: 0.5168  m2_loss_mask_2: 0.1627  m2_loss_dice_2: 1.287  m2_loss_ce_3: 0.4483  m2_loss_mask_3: 0.1623  m2_loss_dice_3: 1.213  m2_loss_ce_4: 0.4397  m2_loss_mask_4: 0.1541  m2_loss_dice_4: 1.179  m2_loss_ce_5: 0.424  m2_loss_mask_5: 0.1545  m2_loss_dice_5: 1.157  m2_loss_ce_6: 0.4271  m2_loss_mask_6: 0.1549  m2_loss_dice_6: 1.156  m2_loss_ce_7: 0.414  m2_loss_mask_7: 0.1521  m2_loss_dice_7: 1.171  m2_loss_ce_8: 0.3997  m2_loss_mask_8: 0.1522  m2_loss_dice_8: 1.189    time: 1.6610  last_time: 1.6310  data_time: 0.0552  last_data_time: 0.0420   lr: 0.0001  max_mem: 36847M
[10/07 11:53:32] d2.utils.events INFO:  eta: 0:16:00  iter: 419  total_loss: 37.47  m1_loss_ce: 0.3769  m1_loss_mask: 0.143  m1_loss_dice: 1.18  m1_loss_ce_0: 0.5353  m1_loss_mask_0: 0.1594  m1_loss_dice_0: 1.361  m1_loss_ce_1: 0.5488  m1_loss_mask_1: 0.1498  m1_loss_dice_1: 1.31  m1_loss_ce_2: 0.5418  m1_loss_mask_2: 0.1442  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.472  m1_loss_mask_3: 0.1449  m1_loss_dice_3: 1.189  m1_loss_ce_4: 0.4371  m1_loss_mask_4: 0.1437  m1_loss_dice_4: 1.196  m1_loss_ce_5: 0.4068  m1_loss_mask_5: 0.143  m1_loss_dice_5: 1.205  m1_loss_ce_6: 0.3854  m1_loss_mask_6: 0.1422  m1_loss_dice_6: 1.177  m1_loss_ce_7: 0.3791  m1_loss_mask_7: 0.1426  m1_loss_dice_7: 1.197  m1_loss_ce_8: 0.3888  m1_loss_mask_8: 0.1415  m1_loss_dice_8: 1.172  m2_loss_ce: 0.4326  m2_loss_mask: 0.1413  m2_loss_dice: 1.196  m2_loss_ce_0: 0.5564  m2_loss_mask_0: 0.1686  m2_loss_dice_0: 1.432  m2_loss_ce_1: 0.6207  m2_loss_mask_1: 0.154  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.5528  m2_loss_mask_2: 0.151  m2_loss_dice_2: 1.291  m2_loss_ce_3: 0.4923  m2_loss_mask_3: 0.1498  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.4437  m2_loss_mask_4: 0.1449  m2_loss_dice_4: 1.229  m2_loss_ce_5: 0.4477  m2_loss_mask_5: 0.1426  m2_loss_dice_5: 1.229  m2_loss_ce_6: 0.4404  m2_loss_mask_6: 0.143  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.4246  m2_loss_mask_7: 0.1396  m2_loss_dice_7: 1.189  m2_loss_ce_8: 0.4339  m2_loss_mask_8: 0.1404  m2_loss_dice_8: 1.218    time: 1.6626  last_time: 1.7245  data_time: 0.0534  last_data_time: 0.0514   lr: 0.0001  max_mem: 36847M
[10/07 11:54:06] d2.utils.events INFO:  eta: 0:15:28  iter: 439  total_loss: 38.77  m1_loss_ce: 0.4634  m1_loss_mask: 0.1592  m1_loss_dice: 1.175  m1_loss_ce_0: 0.557  m1_loss_mask_0: 0.1813  m1_loss_dice_0: 1.383  m1_loss_ce_1: 0.6468  m1_loss_mask_1: 0.1718  m1_loss_dice_1: 1.3  m1_loss_ce_2: 0.5596  m1_loss_mask_2: 0.1656  m1_loss_dice_2: 1.235  m1_loss_ce_3: 0.4822  m1_loss_mask_3: 0.1605  m1_loss_dice_3: 1.215  m1_loss_ce_4: 0.4669  m1_loss_mask_4: 0.163  m1_loss_dice_4: 1.203  m1_loss_ce_5: 0.4545  m1_loss_mask_5: 0.161  m1_loss_dice_5: 1.194  m1_loss_ce_6: 0.4451  m1_loss_mask_6: 0.1617  m1_loss_dice_6: 1.158  m1_loss_ce_7: 0.4278  m1_loss_mask_7: 0.1603  m1_loss_dice_7: 1.147  m1_loss_ce_8: 0.4292  m1_loss_mask_8: 0.1578  m1_loss_dice_8: 1.17  m2_loss_ce: 0.515  m2_loss_mask: 0.1549  m2_loss_dice: 1.168  m2_loss_ce_0: 0.613  m2_loss_mask_0: 0.184  m2_loss_dice_0: 1.412  m2_loss_ce_1: 0.6591  m2_loss_mask_1: 0.1693  m2_loss_dice_1: 1.296  m2_loss_ce_2: 0.6049  m2_loss_mask_2: 0.1687  m2_loss_dice_2: 1.27  m2_loss_ce_3: 0.5299  m2_loss_mask_3: 0.1606  m2_loss_dice_3: 1.209  m2_loss_ce_4: 0.5245  m2_loss_mask_4: 0.1596  m2_loss_dice_4: 1.205  m2_loss_ce_5: 0.512  m2_loss_mask_5: 0.158  m2_loss_dice_5: 1.219  m2_loss_ce_6: 0.5174  m2_loss_mask_6: 0.1557  m2_loss_dice_6: 1.213  m2_loss_ce_7: 0.5202  m2_loss_mask_7: 0.1564  m2_loss_dice_7: 1.167  m2_loss_ce_8: 0.5426  m2_loss_mask_8: 0.1545  m2_loss_dice_8: 1.205    time: 1.6635  last_time: 1.6455  data_time: 0.0512  last_data_time: 0.0487   lr: 0.0001  max_mem: 36847M
[10/07 11:54:40] d2.utils.events INFO:  eta: 0:14:55  iter: 459  total_loss: 38.83  m1_loss_ce: 0.4368  m1_loss_mask: 0.1473  m1_loss_dice: 1.217  m1_loss_ce_0: 0.5673  m1_loss_mask_0: 0.1707  m1_loss_dice_0: 1.397  m1_loss_ce_1: 0.6394  m1_loss_mask_1: 0.1688  m1_loss_dice_1: 1.365  m1_loss_ce_2: 0.5836  m1_loss_mask_2: 0.1579  m1_loss_dice_2: 1.29  m1_loss_ce_3: 0.497  m1_loss_mask_3: 0.1502  m1_loss_dice_3: 1.26  m1_loss_ce_4: 0.4743  m1_loss_mask_4: 0.1492  m1_loss_dice_4: 1.258  m1_loss_ce_5: 0.4825  m1_loss_mask_5: 0.1504  m1_loss_dice_5: 1.225  m1_loss_ce_6: 0.4626  m1_loss_mask_6: 0.1504  m1_loss_dice_6: 1.234  m1_loss_ce_7: 0.4622  m1_loss_mask_7: 0.15  m1_loss_dice_7: 1.23  m1_loss_ce_8: 0.4464  m1_loss_mask_8: 0.1464  m1_loss_dice_8: 1.238  m2_loss_ce: 0.4748  m2_loss_mask: 0.1499  m2_loss_dice: 1.25  m2_loss_ce_0: 0.561  m2_loss_mask_0: 0.1921  m2_loss_dice_0: 1.461  m2_loss_ce_1: 0.6304  m2_loss_mask_1: 0.1706  m2_loss_dice_1: 1.375  m2_loss_ce_2: 0.5756  m2_loss_mask_2: 0.1629  m2_loss_dice_2: 1.328  m2_loss_ce_3: 0.5033  m2_loss_mask_3: 0.1597  m2_loss_dice_3: 1.299  m2_loss_ce_4: 0.4652  m2_loss_mask_4: 0.159  m2_loss_dice_4: 1.311  m2_loss_ce_5: 0.4696  m2_loss_mask_5: 0.1546  m2_loss_dice_5: 1.337  m2_loss_ce_6: 0.4526  m2_loss_mask_6: 0.1537  m2_loss_dice_6: 1.287  m2_loss_ce_7: 0.4377  m2_loss_mask_7: 0.1522  m2_loss_dice_7: 1.247  m2_loss_ce_8: 0.4531  m2_loss_mask_8: 0.15  m2_loss_dice_8: 1.247    time: 1.6646  last_time: 1.6875  data_time: 0.0501  last_data_time: 0.0422   lr: 0.0001  max_mem: 36847M
[10/07 11:55:13] d2.utils.events INFO:  eta: 0:14:22  iter: 479  total_loss: 37.3  m1_loss_ce: 0.4198  m1_loss_mask: 0.155  m1_loss_dice: 1.112  m1_loss_ce_0: 0.5194  m1_loss_mask_0: 0.1701  m1_loss_dice_0: 1.28  m1_loss_ce_1: 0.5441  m1_loss_mask_1: 0.1647  m1_loss_dice_1: 1.242  m1_loss_ce_2: 0.4916  m1_loss_mask_2: 0.161  m1_loss_dice_2: 1.202  m1_loss_ce_3: 0.4687  m1_loss_mask_3: 0.154  m1_loss_dice_3: 1.149  m1_loss_ce_4: 0.4243  m1_loss_mask_4: 0.1548  m1_loss_dice_4: 1.165  m1_loss_ce_5: 0.44  m1_loss_mask_5: 0.1557  m1_loss_dice_5: 1.138  m1_loss_ce_6: 0.439  m1_loss_mask_6: 0.1541  m1_loss_dice_6: 1.122  m1_loss_ce_7: 0.4338  m1_loss_mask_7: 0.1545  m1_loss_dice_7: 1.13  m1_loss_ce_8: 0.4438  m1_loss_mask_8: 0.1544  m1_loss_dice_8: 1.149  m2_loss_ce: 0.4316  m2_loss_mask: 0.1549  m2_loss_dice: 1.157  m2_loss_ce_0: 0.5461  m2_loss_mask_0: 0.1758  m2_loss_dice_0: 1.305  m2_loss_ce_1: 0.6044  m2_loss_mask_1: 0.1638  m2_loss_dice_1: 1.24  m2_loss_ce_2: 0.5428  m2_loss_mask_2: 0.1668  m2_loss_dice_2: 1.185  m2_loss_ce_3: 0.4679  m2_loss_mask_3: 0.161  m2_loss_dice_3: 1.192  m2_loss_ce_4: 0.4744  m2_loss_mask_4: 0.1599  m2_loss_dice_4: 1.18  m2_loss_ce_5: 0.4877  m2_loss_mask_5: 0.1577  m2_loss_dice_5: 1.171  m2_loss_ce_6: 0.4439  m2_loss_mask_6: 0.1581  m2_loss_dice_6: 1.155  m2_loss_ce_7: 0.437  m2_loss_mask_7: 0.1572  m2_loss_dice_7: 1.147  m2_loss_ce_8: 0.4167  m2_loss_mask_8: 0.1565  m2_loss_dice_8: 1.133    time: 1.6650  last_time: 1.6649  data_time: 0.0533  last_data_time: 0.0444   lr: 0.0001  max_mem: 36847M
[10/07 11:56:00] d2.utils.events INFO:  eta: 0:13:49  iter: 499  total_loss: 35.67  m1_loss_ce: 0.4178  m1_loss_mask: 0.1572  m1_loss_dice: 1.067  m1_loss_ce_0: 0.4921  m1_loss_mask_0: 0.1746  m1_loss_dice_0: 1.247  m1_loss_ce_1: 0.5484  m1_loss_mask_1: 0.1673  m1_loss_dice_1: 1.212  m1_loss_ce_2: 0.4911  m1_loss_mask_2: 0.1617  m1_loss_dice_2: 1.155  m1_loss_ce_3: 0.4342  m1_loss_mask_3: 0.1554  m1_loss_dice_3: 1.106  m1_loss_ce_4: 0.4393  m1_loss_mask_4: 0.1584  m1_loss_dice_4: 1.101  m1_loss_ce_5: 0.4174  m1_loss_mask_5: 0.156  m1_loss_dice_5: 1.093  m1_loss_ce_6: 0.4209  m1_loss_mask_6: 0.1574  m1_loss_dice_6: 1.107  m1_loss_ce_7: 0.4048  m1_loss_mask_7: 0.1579  m1_loss_dice_7: 1.076  m1_loss_ce_8: 0.4172  m1_loss_mask_8: 0.1587  m1_loss_dice_8: 1.098  m2_loss_ce: 0.4125  m2_loss_mask: 0.1593  m2_loss_dice: 1.137  m2_loss_ce_0: 0.5443  m2_loss_mask_0: 0.1954  m2_loss_dice_0: 1.275  m2_loss_ce_1: 0.5839  m2_loss_mask_1: 0.1731  m2_loss_dice_1: 1.264  m2_loss_ce_2: 0.5511  m2_loss_mask_2: 0.166  m2_loss_dice_2: 1.198  m2_loss_ce_3: 0.4891  m2_loss_mask_3: 0.1636  m2_loss_dice_3: 1.137  m2_loss_ce_4: 0.4642  m2_loss_mask_4: 0.1581  m2_loss_dice_4: 1.103  m2_loss_ce_5: 0.4508  m2_loss_mask_5: 0.1585  m2_loss_dice_5: 1.114  m2_loss_ce_6: 0.4325  m2_loss_mask_6: 0.1596  m2_loss_dice_6: 1.127  m2_loss_ce_7: 0.4538  m2_loss_mask_7: 0.1579  m2_loss_dice_7: 1.113  m2_loss_ce_8: 0.4479  m2_loss_mask_8: 0.1596  m2_loss_dice_8: 1.135    time: 1.6914  last_time: 1.6474  data_time: 0.7017  last_data_time: 0.0409   lr: 0.0001  max_mem: 36847M
[10/07 11:56:33] d2.utils.events INFO:  eta: 0:13:16  iter: 519  total_loss: 36.05  m1_loss_ce: 0.3943  m1_loss_mask: 0.1502  m1_loss_dice: 1.106  m1_loss_ce_0: 0.491  m1_loss_mask_0: 0.1745  m1_loss_dice_0: 1.32  m1_loss_ce_1: 0.5306  m1_loss_mask_1: 0.1599  m1_loss_dice_1: 1.204  m1_loss_ce_2: 0.5012  m1_loss_mask_2: 0.1494  m1_loss_dice_2: 1.168  m1_loss_ce_3: 0.4656  m1_loss_mask_3: 0.1507  m1_loss_dice_3: 1.125  m1_loss_ce_4: 0.4261  m1_loss_mask_4: 0.1491  m1_loss_dice_4: 1.131  m1_loss_ce_5: 0.408  m1_loss_mask_5: 0.149  m1_loss_dice_5: 1.121  m1_loss_ce_6: 0.4331  m1_loss_mask_6: 0.1494  m1_loss_dice_6: 1.123  m1_loss_ce_7: 0.4039  m1_loss_mask_7: 0.1491  m1_loss_dice_7: 1.089  m1_loss_ce_8: 0.4179  m1_loss_mask_8: 0.1501  m1_loss_dice_8: 1.097  m2_loss_ce: 0.4402  m2_loss_mask: 0.1496  m2_loss_dice: 1.13  m2_loss_ce_0: 0.5482  m2_loss_mask_0: 0.1813  m2_loss_dice_0: 1.353  m2_loss_ce_1: 0.5682  m2_loss_mask_1: 0.1631  m2_loss_dice_1: 1.279  m2_loss_ce_2: 0.5424  m2_loss_mask_2: 0.1568  m2_loss_dice_2: 1.208  m2_loss_ce_3: 0.4631  m2_loss_mask_3: 0.1597  m2_loss_dice_3: 1.164  m2_loss_ce_4: 0.4632  m2_loss_mask_4: 0.1531  m2_loss_dice_4: 1.134  m2_loss_ce_5: 0.4507  m2_loss_mask_5: 0.1503  m2_loss_dice_5: 1.15  m2_loss_ce_6: 0.4678  m2_loss_mask_6: 0.1476  m2_loss_dice_6: 1.125  m2_loss_ce_7: 0.4503  m2_loss_mask_7: 0.1494  m2_loss_dice_7: 1.129  m2_loss_ce_8: 0.4459  m2_loss_mask_8: 0.1469  m2_loss_dice_8: 1.106    time: 1.6904  last_time: 1.6734  data_time: 0.0519  last_data_time: 0.0469   lr: 0.0001  max_mem: 36847M
[10/07 11:57:07] d2.utils.events INFO:  eta: 0:12:43  iter: 539  total_loss: 35.62  m1_loss_ce: 0.4202  m1_loss_mask: 0.145  m1_loss_dice: 1.133  m1_loss_ce_0: 0.5058  m1_loss_mask_0: 0.1726  m1_loss_dice_0: 1.329  m1_loss_ce_1: 0.5915  m1_loss_mask_1: 0.1596  m1_loss_dice_1: 1.237  m1_loss_ce_2: 0.5331  m1_loss_mask_2: 0.1516  m1_loss_dice_2: 1.205  m1_loss_ce_3: 0.4566  m1_loss_mask_3: 0.1493  m1_loss_dice_3: 1.161  m1_loss_ce_4: 0.4335  m1_loss_mask_4: 0.1497  m1_loss_dice_4: 1.137  m1_loss_ce_5: 0.4105  m1_loss_mask_5: 0.1481  m1_loss_dice_5: 1.118  m1_loss_ce_6: 0.4128  m1_loss_mask_6: 0.1473  m1_loss_dice_6: 1.114  m1_loss_ce_7: 0.4006  m1_loss_mask_7: 0.1465  m1_loss_dice_7: 1.125  m1_loss_ce_8: 0.4261  m1_loss_mask_8: 0.1468  m1_loss_dice_8: 1.154  m2_loss_ce: 0.4348  m2_loss_mask: 0.1417  m2_loss_dice: 1.163  m2_loss_ce_0: 0.5588  m2_loss_mask_0: 0.1755  m2_loss_dice_0: 1.365  m2_loss_ce_1: 0.6207  m2_loss_mask_1: 0.1636  m2_loss_dice_1: 1.243  m2_loss_ce_2: 0.5294  m2_loss_mask_2: 0.1539  m2_loss_dice_2: 1.211  m2_loss_ce_3: 0.4834  m2_loss_mask_3: 0.153  m2_loss_dice_3: 1.174  m2_loss_ce_4: 0.464  m2_loss_mask_4: 0.1458  m2_loss_dice_4: 1.152  m2_loss_ce_5: 0.4379  m2_loss_mask_5: 0.1459  m2_loss_dice_5: 1.183  m2_loss_ce_6: 0.4384  m2_loss_mask_6: 0.1406  m2_loss_dice_6: 1.163  m2_loss_ce_7: 0.459  m2_loss_mask_7: 0.144  m2_loss_dice_7: 1.151  m2_loss_ce_8: 0.4505  m2_loss_mask_8: 0.1449  m2_loss_dice_8: 1.114    time: 1.6895  last_time: 1.6467  data_time: 0.0472  last_data_time: 0.0415   lr: 0.0001  max_mem: 36847M
[10/07 11:57:40] d2.utils.events INFO:  eta: 0:12:09  iter: 559  total_loss: 34.3  m1_loss_ce: 0.4225  m1_loss_mask: 0.1538  m1_loss_dice: 1.037  m1_loss_ce_0: 0.5178  m1_loss_mask_0: 0.1779  m1_loss_dice_0: 1.24  m1_loss_ce_1: 0.5308  m1_loss_mask_1: 0.169  m1_loss_dice_1: 1.163  m1_loss_ce_2: 0.4758  m1_loss_mask_2: 0.1556  m1_loss_dice_2: 1.143  m1_loss_ce_3: 0.4217  m1_loss_mask_3: 0.1539  m1_loss_dice_3: 1.06  m1_loss_ce_4: 0.4106  m1_loss_mask_4: 0.1527  m1_loss_dice_4: 1.056  m1_loss_ce_5: 0.4195  m1_loss_mask_5: 0.1534  m1_loss_dice_5: 1.05  m1_loss_ce_6: 0.4047  m1_loss_mask_6: 0.1518  m1_loss_dice_6: 1.038  m1_loss_ce_7: 0.3994  m1_loss_mask_7: 0.1522  m1_loss_dice_7: 1.057  m1_loss_ce_8: 0.3873  m1_loss_mask_8: 0.1522  m1_loss_dice_8: 1.081  m2_loss_ce: 0.4109  m2_loss_mask: 0.1528  m2_loss_dice: 1.097  m2_loss_ce_0: 0.535  m2_loss_mask_0: 0.188  m2_loss_dice_0: 1.28  m2_loss_ce_1: 0.5666  m2_loss_mask_1: 0.1711  m2_loss_dice_1: 1.199  m2_loss_ce_2: 0.5238  m2_loss_mask_2: 0.1632  m2_loss_dice_2: 1.148  m2_loss_ce_3: 0.4607  m2_loss_mask_3: 0.1582  m2_loss_dice_3: 1.1  m2_loss_ce_4: 0.4319  m2_loss_mask_4: 0.1561  m2_loss_dice_4: 1.107  m2_loss_ce_5: 0.4233  m2_loss_mask_5: 0.1512  m2_loss_dice_5: 1.105  m2_loss_ce_6: 0.4229  m2_loss_mask_6: 0.1531  m2_loss_dice_6: 1.057  m2_loss_ce_7: 0.4095  m2_loss_mask_7: 0.1526  m2_loss_dice_7: 1.078  m2_loss_ce_8: 0.4124  m2_loss_mask_8: 0.1514  m2_loss_dice_8: 1.081    time: 1.6889  last_time: 1.6483  data_time: 0.0437  last_data_time: 0.0366   lr: 0.0001  max_mem: 36847M
[10/07 11:58:14] d2.utils.events INFO:  eta: 0:11:36  iter: 579  total_loss: 34.71  m1_loss_ce: 0.4124  m1_loss_mask: 0.151  m1_loss_dice: 1.045  m1_loss_ce_0: 0.4923  m1_loss_mask_0: 0.1839  m1_loss_dice_0: 1.265  m1_loss_ce_1: 0.5434  m1_loss_mask_1: 0.1713  m1_loss_dice_1: 1.163  m1_loss_ce_2: 0.5126  m1_loss_mask_2: 0.1605  m1_loss_dice_2: 1.12  m1_loss_ce_3: 0.436  m1_loss_mask_3: 0.1582  m1_loss_dice_3: 1.106  m1_loss_ce_4: 0.4374  m1_loss_mask_4: 0.1543  m1_loss_dice_4: 1.1  m1_loss_ce_5: 0.4226  m1_loss_mask_5: 0.1564  m1_loss_dice_5: 1.056  m1_loss_ce_6: 0.39  m1_loss_mask_6: 0.1522  m1_loss_dice_6: 1.076  m1_loss_ce_7: 0.3917  m1_loss_mask_7: 0.1511  m1_loss_dice_7: 1.062  m1_loss_ce_8: 0.4209  m1_loss_mask_8: 0.1535  m1_loss_dice_8: 1.04  m2_loss_ce: 0.4681  m2_loss_mask: 0.1611  m2_loss_dice: 1.11  m2_loss_ce_0: 0.554  m2_loss_mask_0: 0.1943  m2_loss_dice_0: 1.307  m2_loss_ce_1: 0.5956  m2_loss_mask_1: 0.1798  m2_loss_dice_1: 1.23  m2_loss_ce_2: 0.5577  m2_loss_mask_2: 0.1732  m2_loss_dice_2: 1.187  m2_loss_ce_3: 0.4962  m2_loss_mask_3: 0.1711  m2_loss_dice_3: 1.106  m2_loss_ce_4: 0.4673  m2_loss_mask_4: 0.1633  m2_loss_dice_4: 1.108  m2_loss_ce_5: 0.4699  m2_loss_mask_5: 0.1649  m2_loss_dice_5: 1.111  m2_loss_ce_6: 0.4514  m2_loss_mask_6: 0.1626  m2_loss_dice_6: 1.1  m2_loss_ce_7: 0.4305  m2_loss_mask_7: 0.1607  m2_loss_dice_7: 1.118  m2_loss_ce_8: 0.4466  m2_loss_mask_8: 0.1626  m2_loss_dice_8: 1.118    time: 1.6880  last_time: 1.6747  data_time: 0.0524  last_data_time: 0.0582   lr: 0.0001  max_mem: 36847M
[10/07 11:58:47] d2.utils.events INFO:  eta: 0:11:03  iter: 599  total_loss: 35.35  m1_loss_ce: 0.4231  m1_loss_mask: 0.156  m1_loss_dice: 1.117  m1_loss_ce_0: 0.4792  m1_loss_mask_0: 0.1793  m1_loss_dice_0: 1.332  m1_loss_ce_1: 0.5649  m1_loss_mask_1: 0.1632  m1_loss_dice_1: 1.176  m1_loss_ce_2: 0.4983  m1_loss_mask_2: 0.1564  m1_loss_dice_2: 1.153  m1_loss_ce_3: 0.4729  m1_loss_mask_3: 0.156  m1_loss_dice_3: 1.124  m1_loss_ce_4: 0.4181  m1_loss_mask_4: 0.1568  m1_loss_dice_4: 1.086  m1_loss_ce_5: 0.4322  m1_loss_mask_5: 0.1546  m1_loss_dice_5: 1.102  m1_loss_ce_6: 0.4268  m1_loss_mask_6: 0.1543  m1_loss_dice_6: 1.072  m1_loss_ce_7: 0.4255  m1_loss_mask_7: 0.1552  m1_loss_dice_7: 1.108  m1_loss_ce_8: 0.4252  m1_loss_mask_8: 0.1562  m1_loss_dice_8: 1.114  m2_loss_ce: 0.4403  m2_loss_mask: 0.1518  m2_loss_dice: 1.083  m2_loss_ce_0: 0.5539  m2_loss_mask_0: 0.1751  m2_loss_dice_0: 1.34  m2_loss_ce_1: 0.5911  m2_loss_mask_1: 0.1614  m2_loss_dice_1: 1.224  m2_loss_ce_2: 0.5134  m2_loss_mask_2: 0.16  m2_loss_dice_2: 1.226  m2_loss_ce_3: 0.4693  m2_loss_mask_3: 0.1567  m2_loss_dice_3: 1.139  m2_loss_ce_4: 0.4401  m2_loss_mask_4: 0.1545  m2_loss_dice_4: 1.149  m2_loss_ce_5: 0.4589  m2_loss_mask_5: 0.1528  m2_loss_dice_5: 1.106  m2_loss_ce_6: 0.4356  m2_loss_mask_6: 0.1528  m2_loss_dice_6: 1.105  m2_loss_ce_7: 0.444  m2_loss_mask_7: 0.1508  m2_loss_dice_7: 1.116  m2_loss_ce_8: 0.4341  m2_loss_mask_8: 0.1508  m2_loss_dice_8: 1.12    time: 1.6871  last_time: 1.7160  data_time: 0.0475  last_data_time: 0.0539   lr: 0.0001  max_mem: 36847M
[10/07 11:59:20] d2.utils.events INFO:  eta: 0:10:30  iter: 619  total_loss: 36.48  m1_loss_ce: 0.4192  m1_loss_mask: 0.1504  m1_loss_dice: 1.126  m1_loss_ce_0: 0.515  m1_loss_mask_0: 0.1798  m1_loss_dice_0: 1.357  m1_loss_ce_1: 0.5545  m1_loss_mask_1: 0.1603  m1_loss_dice_1: 1.244  m1_loss_ce_2: 0.493  m1_loss_mask_2: 0.1599  m1_loss_dice_2: 1.224  m1_loss_ce_3: 0.4374  m1_loss_mask_3: 0.1535  m1_loss_dice_3: 1.118  m1_loss_ce_4: 0.4086  m1_loss_mask_4: 0.1501  m1_loss_dice_4: 1.151  m1_loss_ce_5: 0.4145  m1_loss_mask_5: 0.1531  m1_loss_dice_5: 1.143  m1_loss_ce_6: 0.4078  m1_loss_mask_6: 0.1492  m1_loss_dice_6: 1.126  m1_loss_ce_7: 0.3893  m1_loss_mask_7: 0.1492  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.4022  m1_loss_mask_8: 0.1498  m1_loss_dice_8: 1.162  m2_loss_ce: 0.4215  m2_loss_mask: 0.1501  m2_loss_dice: 1.159  m2_loss_ce_0: 0.5358  m2_loss_mask_0: 0.1822  m2_loss_dice_0: 1.385  m2_loss_ce_1: 0.6202  m2_loss_mask_1: 0.1655  m2_loss_dice_1: 1.311  m2_loss_ce_2: 0.5527  m2_loss_mask_2: 0.1588  m2_loss_dice_2: 1.235  m2_loss_ce_3: 0.4746  m2_loss_mask_3: 0.1555  m2_loss_dice_3: 1.161  m2_loss_ce_4: 0.4448  m2_loss_mask_4: 0.1498  m2_loss_dice_4: 1.169  m2_loss_ce_5: 0.4321  m2_loss_mask_5: 0.1507  m2_loss_dice_5: 1.17  m2_loss_ce_6: 0.4187  m2_loss_mask_6: 0.1523  m2_loss_dice_6: 1.187  m2_loss_ce_7: 0.4549  m2_loss_mask_7: 0.1512  m2_loss_dice_7: 1.17  m2_loss_ce_8: 0.4247  m2_loss_mask_8: 0.15  m2_loss_dice_8: 1.175    time: 1.6868  last_time: 1.6527  data_time: 0.0525  last_data_time: 0.0770   lr: 0.0001  max_mem: 36847M
[10/07 11:59:54] d2.utils.events INFO:  eta: 0:09:57  iter: 639  total_loss: 36.79  m1_loss_ce: 0.4308  m1_loss_mask: 0.1449  m1_loss_dice: 1.155  m1_loss_ce_0: 0.5496  m1_loss_mask_0: 0.1636  m1_loss_dice_0: 1.365  m1_loss_ce_1: 0.5995  m1_loss_mask_1: 0.1493  m1_loss_dice_1: 1.277  m1_loss_ce_2: 0.5274  m1_loss_mask_2: 0.1441  m1_loss_dice_2: 1.217  m1_loss_ce_3: 0.4609  m1_loss_mask_3: 0.1475  m1_loss_dice_3: 1.154  m1_loss_ce_4: 0.4371  m1_loss_mask_4: 0.1429  m1_loss_dice_4: 1.16  m1_loss_ce_5: 0.4368  m1_loss_mask_5: 0.142  m1_loss_dice_5: 1.163  m1_loss_ce_6: 0.4002  m1_loss_mask_6: 0.1437  m1_loss_dice_6: 1.134  m1_loss_ce_7: 0.4082  m1_loss_mask_7: 0.1417  m1_loss_dice_7: 1.141  m1_loss_ce_8: 0.4075  m1_loss_mask_8: 0.1413  m1_loss_dice_8: 1.135  m2_loss_ce: 0.4369  m2_loss_mask: 0.1395  m2_loss_dice: 1.212  m2_loss_ce_0: 0.5484  m2_loss_mask_0: 0.1763  m2_loss_dice_0: 1.366  m2_loss_ce_1: 0.6707  m2_loss_mask_1: 0.1543  m2_loss_dice_1: 1.306  m2_loss_ce_2: 0.5561  m2_loss_mask_2: 0.1509  m2_loss_dice_2: 1.237  m2_loss_ce_3: 0.4862  m2_loss_mask_3: 0.1451  m2_loss_dice_3: 1.185  m2_loss_ce_4: 0.4505  m2_loss_mask_4: 0.1431  m2_loss_dice_4: 1.199  m2_loss_ce_5: 0.4678  m2_loss_mask_5: 0.142  m2_loss_dice_5: 1.183  m2_loss_ce_6: 0.4319  m2_loss_mask_6: 0.1408  m2_loss_dice_6: 1.169  m2_loss_ce_7: 0.4486  m2_loss_mask_7: 0.1417  m2_loss_dice_7: 1.155  m2_loss_ce_8: 0.458  m2_loss_mask_8: 0.1427  m2_loss_dice_8: 1.163    time: 1.6867  last_time: 1.7201  data_time: 0.0527  last_data_time: 0.0618   lr: 0.0001  max_mem: 36847M
[10/07 12:00:28] d2.utils.events INFO:  eta: 0:09:24  iter: 659  total_loss: 37.88  m1_loss_ce: 0.4189  m1_loss_mask: 0.1531  m1_loss_dice: 1.157  m1_loss_ce_0: 0.5448  m1_loss_mask_0: 0.1746  m1_loss_dice_0: 1.375  m1_loss_ce_1: 0.559  m1_loss_mask_1: 0.1571  m1_loss_dice_1: 1.296  m1_loss_ce_2: 0.5093  m1_loss_mask_2: 0.1552  m1_loss_dice_2: 1.231  m1_loss_ce_3: 0.4498  m1_loss_mask_3: 0.1523  m1_loss_dice_3: 1.242  m1_loss_ce_4: 0.4567  m1_loss_mask_4: 0.1527  m1_loss_dice_4: 1.201  m1_loss_ce_5: 0.4245  m1_loss_mask_5: 0.1504  m1_loss_dice_5: 1.18  m1_loss_ce_6: 0.412  m1_loss_mask_6: 0.1514  m1_loss_dice_6: 1.188  m1_loss_ce_7: 0.4  m1_loss_mask_7: 0.1506  m1_loss_dice_7: 1.173  m1_loss_ce_8: 0.4167  m1_loss_mask_8: 0.1512  m1_loss_dice_8: 1.207  m2_loss_ce: 0.4452  m2_loss_mask: 0.153  m2_loss_dice: 1.202  m2_loss_ce_0: 0.5777  m2_loss_mask_0: 0.1777  m2_loss_dice_0: 1.421  m2_loss_ce_1: 0.6442  m2_loss_mask_1: 0.1662  m2_loss_dice_1: 1.311  m2_loss_ce_2: 0.5752  m2_loss_mask_2: 0.1634  m2_loss_dice_2: 1.266  m2_loss_ce_3: 0.522  m2_loss_mask_3: 0.1601  m2_loss_dice_3: 1.21  m2_loss_ce_4: 0.5004  m2_loss_mask_4: 0.1585  m2_loss_dice_4: 1.212  m2_loss_ce_5: 0.4859  m2_loss_mask_5: 0.1585  m2_loss_dice_5: 1.222  m2_loss_ce_6: 0.4825  m2_loss_mask_6: 0.1554  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.4955  m2_loss_mask_7: 0.154  m2_loss_dice_7: 1.186  m2_loss_ce_8: 0.4896  m2_loss_mask_8: 0.1529  m2_loss_dice_8: 1.204    time: 1.6865  last_time: 1.6601  data_time: 0.0493  last_data_time: 0.0530   lr: 0.0001  max_mem: 36847M
[10/07 12:01:02] d2.utils.events INFO:  eta: 0:08:51  iter: 679  total_loss: 35.69  m1_loss_ce: 0.3761  m1_loss_mask: 0.1546  m1_loss_dice: 1.084  m1_loss_ce_0: 0.513  m1_loss_mask_0: 0.1788  m1_loss_dice_0: 1.266  m1_loss_ce_1: 0.5552  m1_loss_mask_1: 0.165  m1_loss_dice_1: 1.191  m1_loss_ce_2: 0.5045  m1_loss_mask_2: 0.158  m1_loss_dice_2: 1.162  m1_loss_ce_3: 0.4673  m1_loss_mask_3: 0.1573  m1_loss_dice_3: 1.106  m1_loss_ce_4: 0.4418  m1_loss_mask_4: 0.1568  m1_loss_dice_4: 1.122  m1_loss_ce_5: 0.4335  m1_loss_mask_5: 0.155  m1_loss_dice_5: 1.097  m1_loss_ce_6: 0.4219  m1_loss_mask_6: 0.1551  m1_loss_dice_6: 1.082  m1_loss_ce_7: 0.3943  m1_loss_mask_7: 0.1526  m1_loss_dice_7: 1.113  m1_loss_ce_8: 0.4151  m1_loss_mask_8: 0.1555  m1_loss_dice_8: 1.075  m2_loss_ce: 0.4767  m2_loss_mask: 0.1573  m2_loss_dice: 1.141  m2_loss_ce_0: 0.529  m2_loss_mask_0: 0.1839  m2_loss_dice_0: 1.327  m2_loss_ce_1: 0.6092  m2_loss_mask_1: 0.1664  m2_loss_dice_1: 1.269  m2_loss_ce_2: 0.544  m2_loss_mask_2: 0.1575  m2_loss_dice_2: 1.19  m2_loss_ce_3: 0.5024  m2_loss_mask_3: 0.1591  m2_loss_dice_3: 1.182  m2_loss_ce_4: 0.4618  m2_loss_mask_4: 0.1527  m2_loss_dice_4: 1.158  m2_loss_ce_5: 0.4507  m2_loss_mask_5: 0.1548  m2_loss_dice_5: 1.153  m2_loss_ce_6: 0.4604  m2_loss_mask_6: 0.1525  m2_loss_dice_6: 1.146  m2_loss_ce_7: 0.4678  m2_loss_mask_7: 0.1545  m2_loss_dice_7: 1.109  m2_loss_ce_8: 0.4695  m2_loss_mask_8: 0.1564  m2_loss_dice_8: 1.142    time: 1.6866  last_time: 1.7305  data_time: 0.0563  last_data_time: 0.0477   lr: 0.0001  max_mem: 36847M
[10/07 12:01:36] d2.utils.events INFO:  eta: 0:08:18  iter: 699  total_loss: 37.76  m1_loss_ce: 0.4092  m1_loss_mask: 0.1568  m1_loss_dice: 1.124  m1_loss_ce_0: 0.5465  m1_loss_mask_0: 0.1764  m1_loss_dice_0: 1.328  m1_loss_ce_1: 0.5896  m1_loss_mask_1: 0.1637  m1_loss_dice_1: 1.304  m1_loss_ce_2: 0.5075  m1_loss_mask_2: 0.1586  m1_loss_dice_2: 1.227  m1_loss_ce_3: 0.4571  m1_loss_mask_3: 0.1551  m1_loss_dice_3: 1.184  m1_loss_ce_4: 0.4521  m1_loss_mask_4: 0.1577  m1_loss_dice_4: 1.187  m1_loss_ce_5: 0.4472  m1_loss_mask_5: 0.156  m1_loss_dice_5: 1.181  m1_loss_ce_6: 0.4215  m1_loss_mask_6: 0.1565  m1_loss_dice_6: 1.151  m1_loss_ce_7: 0.4272  m1_loss_mask_7: 0.1555  m1_loss_dice_7: 1.142  m1_loss_ce_8: 0.4248  m1_loss_mask_8: 0.1599  m1_loss_dice_8: 1.123  m2_loss_ce: 0.4506  m2_loss_mask: 0.1543  m2_loss_dice: 1.199  m2_loss_ce_0: 0.5667  m2_loss_mask_0: 0.1843  m2_loss_dice_0: 1.415  m2_loss_ce_1: 0.6342  m2_loss_mask_1: 0.1714  m2_loss_dice_1: 1.321  m2_loss_ce_2: 0.5601  m2_loss_mask_2: 0.1651  m2_loss_dice_2: 1.261  m2_loss_ce_3: 0.4872  m2_loss_mask_3: 0.1629  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.4676  m2_loss_mask_4: 0.1567  m2_loss_dice_4: 1.209  m2_loss_ce_5: 0.4654  m2_loss_mask_5: 0.1574  m2_loss_dice_5: 1.2  m2_loss_ce_6: 0.4825  m2_loss_mask_6: 0.1551  m2_loss_dice_6: 1.202  m2_loss_ce_7: 0.4442  m2_loss_mask_7: 0.1538  m2_loss_dice_7: 1.217  m2_loss_ce_8: 0.4504  m2_loss_mask_8: 0.1548  m2_loss_dice_8: 1.214    time: 1.6861  last_time: 1.6609  data_time: 0.0476  last_data_time: 0.0514   lr: 0.0001  max_mem: 36847M
[10/07 12:02:09] d2.utils.events INFO:  eta: 0:07:45  iter: 719  total_loss: 36.38  m1_loss_ce: 0.3839  m1_loss_mask: 0.14  m1_loss_dice: 1.116  m1_loss_ce_0: 0.5274  m1_loss_mask_0: 0.1662  m1_loss_dice_0: 1.329  m1_loss_ce_1: 0.5451  m1_loss_mask_1: 0.1565  m1_loss_dice_1: 1.244  m1_loss_ce_2: 0.5155  m1_loss_mask_2: 0.145  m1_loss_dice_2: 1.168  m1_loss_ce_3: 0.4576  m1_loss_mask_3: 0.1452  m1_loss_dice_3: 1.157  m1_loss_ce_4: 0.4172  m1_loss_mask_4: 0.144  m1_loss_dice_4: 1.135  m1_loss_ce_5: 0.3822  m1_loss_mask_5: 0.1418  m1_loss_dice_5: 1.166  m1_loss_ce_6: 0.3901  m1_loss_mask_6: 0.1411  m1_loss_dice_6: 1.119  m1_loss_ce_7: 0.4106  m1_loss_mask_7: 0.1405  m1_loss_dice_7: 1.158  m1_loss_ce_8: 0.4112  m1_loss_mask_8: 0.1395  m1_loss_dice_8: 1.161  m2_loss_ce: 0.4194  m2_loss_mask: 0.1466  m2_loss_dice: 1.156  m2_loss_ce_0: 0.5674  m2_loss_mask_0: 0.1763  m2_loss_dice_0: 1.364  m2_loss_ce_1: 0.5972  m2_loss_mask_1: 0.1588  m2_loss_dice_1: 1.328  m2_loss_ce_2: 0.5315  m2_loss_mask_2: 0.154  m2_loss_dice_2: 1.241  m2_loss_ce_3: 0.4936  m2_loss_mask_3: 0.1516  m2_loss_dice_3: 1.207  m2_loss_ce_4: 0.4424  m2_loss_mask_4: 0.1484  m2_loss_dice_4: 1.179  m2_loss_ce_5: 0.4706  m2_loss_mask_5: 0.1463  m2_loss_dice_5: 1.154  m2_loss_ce_6: 0.4337  m2_loss_mask_6: 0.1438  m2_loss_dice_6: 1.151  m2_loss_ce_7: 0.4358  m2_loss_mask_7: 0.1473  m2_loss_dice_7: 1.186  m2_loss_ce_8: 0.4462  m2_loss_mask_8: 0.1455  m2_loss_dice_8: 1.179    time: 1.6859  last_time: 1.7779  data_time: 0.0514  last_data_time: 0.0679   lr: 0.0001  max_mem: 36847M
[10/07 12:02:43] d2.utils.events INFO:  eta: 0:07:11  iter: 739  total_loss: 39.1  m1_loss_ce: 0.4265  m1_loss_mask: 0.1561  m1_loss_dice: 1.223  m1_loss_ce_0: 0.5199  m1_loss_mask_0: 0.1709  m1_loss_dice_0: 1.371  m1_loss_ce_1: 0.6056  m1_loss_mask_1: 0.1657  m1_loss_dice_1: 1.317  m1_loss_ce_2: 0.5439  m1_loss_mask_2: 0.1605  m1_loss_dice_2: 1.3  m1_loss_ce_3: 0.498  m1_loss_mask_3: 0.1583  m1_loss_dice_3: 1.246  m1_loss_ce_4: 0.4574  m1_loss_mask_4: 0.1582  m1_loss_dice_4: 1.221  m1_loss_ce_5: 0.4834  m1_loss_mask_5: 0.1551  m1_loss_dice_5: 1.226  m1_loss_ce_6: 0.4579  m1_loss_mask_6: 0.1575  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.4598  m1_loss_mask_7: 0.1567  m1_loss_dice_7: 1.229  m1_loss_ce_8: 0.4411  m1_loss_mask_8: 0.1555  m1_loss_dice_8: 1.244  m2_loss_ce: 0.4936  m2_loss_mask: 0.1588  m2_loss_dice: 1.196  m2_loss_ce_0: 0.5785  m2_loss_mask_0: 0.1827  m2_loss_dice_0: 1.437  m2_loss_ce_1: 0.6392  m2_loss_mask_1: 0.1691  m2_loss_dice_1: 1.342  m2_loss_ce_2: 0.5999  m2_loss_mask_2: 0.1667  m2_loss_dice_2: 1.299  m2_loss_ce_3: 0.5469  m2_loss_mask_3: 0.1626  m2_loss_dice_3: 1.264  m2_loss_ce_4: 0.5065  m2_loss_mask_4: 0.1592  m2_loss_dice_4: 1.252  m2_loss_ce_5: 0.5008  m2_loss_mask_5: 0.1592  m2_loss_dice_5: 1.255  m2_loss_ce_6: 0.5131  m2_loss_mask_6: 0.159  m2_loss_dice_6: 1.244  m2_loss_ce_7: 0.5113  m2_loss_mask_7: 0.158  m2_loss_dice_7: 1.265  m2_loss_ce_8: 0.494  m2_loss_mask_8: 0.1613  m2_loss_dice_8: 1.275    time: 1.6861  last_time: 1.6730  data_time: 0.0540  last_data_time: 0.0485   lr: 0.0001  max_mem: 36847M
[10/07 12:03:17] d2.utils.events INFO:  eta: 0:06:38  iter: 759  total_loss: 35.15  m1_loss_ce: 0.3352  m1_loss_mask: 0.1469  m1_loss_dice: 1.106  m1_loss_ce_0: 0.4956  m1_loss_mask_0: 0.1745  m1_loss_dice_0: 1.282  m1_loss_ce_1: 0.5582  m1_loss_mask_1: 0.1628  m1_loss_dice_1: 1.24  m1_loss_ce_2: 0.4886  m1_loss_mask_2: 0.1557  m1_loss_dice_2: 1.192  m1_loss_ce_3: 0.4298  m1_loss_mask_3: 0.1528  m1_loss_dice_3: 1.116  m1_loss_ce_4: 0.4382  m1_loss_mask_4: 0.1483  m1_loss_dice_4: 1.116  m1_loss_ce_5: 0.386  m1_loss_mask_5: 0.148  m1_loss_dice_5: 1.142  m1_loss_ce_6: 0.3621  m1_loss_mask_6: 0.1485  m1_loss_dice_6: 1.14  m1_loss_ce_7: 0.3623  m1_loss_mask_7: 0.1479  m1_loss_dice_7: 1.121  m1_loss_ce_8: 0.3627  m1_loss_mask_8: 0.1464  m1_loss_dice_8: 1.111  m2_loss_ce: 0.4257  m2_loss_mask: 0.1526  m2_loss_dice: 1.139  m2_loss_ce_0: 0.5091  m2_loss_mask_0: 0.1889  m2_loss_dice_0: 1.339  m2_loss_ce_1: 0.6422  m2_loss_mask_1: 0.1694  m2_loss_dice_1: 1.297  m2_loss_ce_2: 0.5236  m2_loss_mask_2: 0.1613  m2_loss_dice_2: 1.235  m2_loss_ce_3: 0.483  m2_loss_mask_3: 0.1601  m2_loss_dice_3: 1.178  m2_loss_ce_4: 0.4454  m2_loss_mask_4: 0.1575  m2_loss_dice_4: 1.18  m2_loss_ce_5: 0.4191  m2_loss_mask_5: 0.1565  m2_loss_dice_5: 1.162  m2_loss_ce_6: 0.4344  m2_loss_mask_6: 0.1552  m2_loss_dice_6: 1.177  m2_loss_ce_7: 0.4221  m2_loss_mask_7: 0.1547  m2_loss_dice_7: 1.143  m2_loss_ce_8: 0.4082  m2_loss_mask_8: 0.1552  m2_loss_dice_8: 1.131    time: 1.6859  last_time: 1.6875  data_time: 0.0486  last_data_time: 0.0497   lr: 0.0001  max_mem: 36847M
[10/07 12:03:51] d2.utils.events INFO:  eta: 0:06:05  iter: 779  total_loss: 37.56  m1_loss_ce: 0.3823  m1_loss_mask: 0.1452  m1_loss_dice: 1.191  m1_loss_ce_0: 0.5552  m1_loss_mask_0: 0.1674  m1_loss_dice_0: 1.364  m1_loss_ce_1: 0.5672  m1_loss_mask_1: 0.158  m1_loss_dice_1: 1.259  m1_loss_ce_2: 0.5103  m1_loss_mask_2: 0.1482  m1_loss_dice_2: 1.255  m1_loss_ce_3: 0.4198  m1_loss_mask_3: 0.1469  m1_loss_dice_3: 1.165  m1_loss_ce_4: 0.4064  m1_loss_mask_4: 0.1449  m1_loss_dice_4: 1.181  m1_loss_ce_5: 0.4085  m1_loss_mask_5: 0.1415  m1_loss_dice_5: 1.182  m1_loss_ce_6: 0.3772  m1_loss_mask_6: 0.1446  m1_loss_dice_6: 1.166  m1_loss_ce_7: 0.3911  m1_loss_mask_7: 0.1432  m1_loss_dice_7: 1.145  m1_loss_ce_8: 0.416  m1_loss_mask_8: 0.1439  m1_loss_dice_8: 1.185  m2_loss_ce: 0.4306  m2_loss_mask: 0.1524  m2_loss_dice: 1.217  m2_loss_ce_0: 0.5531  m2_loss_mask_0: 0.1829  m2_loss_dice_0: 1.424  m2_loss_ce_1: 0.6002  m2_loss_mask_1: 0.1702  m2_loss_dice_1: 1.374  m2_loss_ce_2: 0.5417  m2_loss_mask_2: 0.1668  m2_loss_dice_2: 1.336  m2_loss_ce_3: 0.4957  m2_loss_mask_3: 0.1604  m2_loss_dice_3: 1.284  m2_loss_ce_4: 0.4585  m2_loss_mask_4: 0.1574  m2_loss_dice_4: 1.241  m2_loss_ce_5: 0.4264  m2_loss_mask_5: 0.1541  m2_loss_dice_5: 1.237  m2_loss_ce_6: 0.4399  m2_loss_mask_6: 0.1499  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.4409  m2_loss_mask_7: 0.1524  m2_loss_dice_7: 1.226  m2_loss_ce_8: 0.4445  m2_loss_mask_8: 0.1481  m2_loss_dice_8: 1.247    time: 1.6859  last_time: 1.7637  data_time: 0.0487  last_data_time: 0.0444   lr: 0.0001  max_mem: 36847M
[10/07 12:04:25] d2.utils.events INFO:  eta: 0:05:32  iter: 799  total_loss: 36.65  m1_loss_ce: 0.3836  m1_loss_mask: 0.139  m1_loss_dice: 1.157  m1_loss_ce_0: 0.4859  m1_loss_mask_0: 0.157  m1_loss_dice_0: 1.309  m1_loss_ce_1: 0.5462  m1_loss_mask_1: 0.1464  m1_loss_dice_1: 1.299  m1_loss_ce_2: 0.4914  m1_loss_mask_2: 0.1448  m1_loss_dice_2: 1.223  m1_loss_ce_3: 0.4566  m1_loss_mask_3: 0.1425  m1_loss_dice_3: 1.16  m1_loss_ce_4: 0.388  m1_loss_mask_4: 0.1405  m1_loss_dice_4: 1.181  m1_loss_ce_5: 0.385  m1_loss_mask_5: 0.1413  m1_loss_dice_5: 1.196  m1_loss_ce_6: 0.3824  m1_loss_mask_6: 0.1411  m1_loss_dice_6: 1.167  m1_loss_ce_7: 0.3762  m1_loss_mask_7: 0.141  m1_loss_dice_7: 1.195  m1_loss_ce_8: 0.3904  m1_loss_mask_8: 0.1387  m1_loss_dice_8: 1.152  m2_loss_ce: 0.4197  m2_loss_mask: 0.1468  m2_loss_dice: 1.2  m2_loss_ce_0: 0.5418  m2_loss_mask_0: 0.1681  m2_loss_dice_0: 1.41  m2_loss_ce_1: 0.6098  m2_loss_mask_1: 0.1603  m2_loss_dice_1: 1.292  m2_loss_ce_2: 0.5258  m2_loss_mask_2: 0.1548  m2_loss_dice_2: 1.262  m2_loss_ce_3: 0.4622  m2_loss_mask_3: 0.152  m2_loss_dice_3: 1.232  m2_loss_ce_4: 0.4636  m2_loss_mask_4: 0.1498  m2_loss_dice_4: 1.225  m2_loss_ce_5: 0.4749  m2_loss_mask_5: 0.1458  m2_loss_dice_5: 1.237  m2_loss_ce_6: 0.4383  m2_loss_mask_6: 0.1465  m2_loss_dice_6: 1.206  m2_loss_ce_7: 0.4468  m2_loss_mask_7: 0.1479  m2_loss_dice_7: 1.226  m2_loss_ce_8: 0.4284  m2_loss_mask_8: 0.1459  m2_loss_dice_8: 1.181    time: 1.6859  last_time: 1.6871  data_time: 0.0529  last_data_time: 0.0408   lr: 0.0001  max_mem: 36847M
[10/07 12:04:58] d2.utils.events INFO:  eta: 0:04:59  iter: 819  total_loss: 37.04  m1_loss_ce: 0.4015  m1_loss_mask: 0.1536  m1_loss_dice: 1.135  m1_loss_ce_0: 0.4746  m1_loss_mask_0: 0.1692  m1_loss_dice_0: 1.309  m1_loss_ce_1: 0.5686  m1_loss_mask_1: 0.162  m1_loss_dice_1: 1.236  m1_loss_ce_2: 0.481  m1_loss_mask_2: 0.1558  m1_loss_dice_2: 1.206  m1_loss_ce_3: 0.4528  m1_loss_mask_3: 0.1555  m1_loss_dice_3: 1.147  m1_loss_ce_4: 0.4255  m1_loss_mask_4: 0.1505  m1_loss_dice_4: 1.134  m1_loss_ce_5: 0.4275  m1_loss_mask_5: 0.1461  m1_loss_dice_5: 1.12  m1_loss_ce_6: 0.4222  m1_loss_mask_6: 0.1439  m1_loss_dice_6: 1.138  m1_loss_ce_7: 0.4282  m1_loss_mask_7: 0.1459  m1_loss_dice_7: 1.133  m1_loss_ce_8: 0.411  m1_loss_mask_8: 0.1483  m1_loss_dice_8: 1.118  m2_loss_ce: 0.4511  m2_loss_mask: 0.151  m2_loss_dice: 1.155  m2_loss_ce_0: 0.5411  m2_loss_mask_0: 0.1764  m2_loss_dice_0: 1.362  m2_loss_ce_1: 0.6027  m2_loss_mask_1: 0.1616  m2_loss_dice_1: 1.285  m2_loss_ce_2: 0.5545  m2_loss_mask_2: 0.1602  m2_loss_dice_2: 1.229  m2_loss_ce_3: 0.4833  m2_loss_mask_3: 0.1589  m2_loss_dice_3: 1.139  m2_loss_ce_4: 0.4615  m2_loss_mask_4: 0.1527  m2_loss_dice_4: 1.169  m2_loss_ce_5: 0.4512  m2_loss_mask_5: 0.1531  m2_loss_dice_5: 1.175  m2_loss_ce_6: 0.4439  m2_loss_mask_6: 0.1499  m2_loss_dice_6: 1.167  m2_loss_ce_7: 0.4267  m2_loss_mask_7: 0.1512  m2_loss_dice_7: 1.155  m2_loss_ce_8: 0.425  m2_loss_mask_8: 0.1527  m2_loss_dice_8: 1.179    time: 1.6860  last_time: 1.6502  data_time: 0.0556  last_data_time: 0.0451   lr: 0.0001  max_mem: 36847M
[10/07 12:05:32] d2.utils.events INFO:  eta: 0:04:26  iter: 839  total_loss: 35.51  m1_loss_ce: 0.3852  m1_loss_mask: 0.1538  m1_loss_dice: 1.081  m1_loss_ce_0: 0.5227  m1_loss_mask_0: 0.1753  m1_loss_dice_0: 1.267  m1_loss_ce_1: 0.5475  m1_loss_mask_1: 0.1652  m1_loss_dice_1: 1.233  m1_loss_ce_2: 0.4699  m1_loss_mask_2: 0.1557  m1_loss_dice_2: 1.158  m1_loss_ce_3: 0.4306  m1_loss_mask_3: 0.1565  m1_loss_dice_3: 1.096  m1_loss_ce_4: 0.4199  m1_loss_mask_4: 0.1552  m1_loss_dice_4: 1.089  m1_loss_ce_5: 0.3987  m1_loss_mask_5: 0.1554  m1_loss_dice_5: 1.138  m1_loss_ce_6: 0.3851  m1_loss_mask_6: 0.1541  m1_loss_dice_6: 1.08  m1_loss_ce_7: 0.3886  m1_loss_mask_7: 0.1546  m1_loss_dice_7: 1.086  m1_loss_ce_8: 0.3897  m1_loss_mask_8: 0.1534  m1_loss_dice_8: 1.073  m2_loss_ce: 0.4451  m2_loss_mask: 0.1584  m2_loss_dice: 1.137  m2_loss_ce_0: 0.557  m2_loss_mask_0: 0.1789  m2_loss_dice_0: 1.318  m2_loss_ce_1: 0.6479  m2_loss_mask_1: 0.1702  m2_loss_dice_1: 1.293  m2_loss_ce_2: 0.5453  m2_loss_mask_2: 0.1648  m2_loss_dice_2: 1.202  m2_loss_ce_3: 0.4775  m2_loss_mask_3: 0.1637  m2_loss_dice_3: 1.179  m2_loss_ce_4: 0.4676  m2_loss_mask_4: 0.1655  m2_loss_dice_4: 1.12  m2_loss_ce_5: 0.5035  m2_loss_mask_5: 0.16  m2_loss_dice_5: 1.136  m2_loss_ce_6: 0.4664  m2_loss_mask_6: 0.1622  m2_loss_dice_6: 1.153  m2_loss_ce_7: 0.4569  m2_loss_mask_7: 0.1577  m2_loss_dice_7: 1.121  m2_loss_ce_8: 0.4614  m2_loss_mask_8: 0.1567  m2_loss_dice_8: 1.144    time: 1.6858  last_time: 1.6800  data_time: 0.0499  last_data_time: 0.0412   lr: 0.0001  max_mem: 36847M
[10/07 12:06:06] d2.utils.events INFO:  eta: 0:03:52  iter: 859  total_loss: 36.83  m1_loss_ce: 0.3922  m1_loss_mask: 0.1483  m1_loss_dice: 1.13  m1_loss_ce_0: 0.5031  m1_loss_mask_0: 0.1687  m1_loss_dice_0: 1.269  m1_loss_ce_1: 0.5875  m1_loss_mask_1: 0.1653  m1_loss_dice_1: 1.232  m1_loss_ce_2: 0.5032  m1_loss_mask_2: 0.1542  m1_loss_dice_2: 1.157  m1_loss_ce_3: 0.4534  m1_loss_mask_3: 0.1526  m1_loss_dice_3: 1.133  m1_loss_ce_4: 0.4029  m1_loss_mask_4: 0.1543  m1_loss_dice_4: 1.137  m1_loss_ce_5: 0.4166  m1_loss_mask_5: 0.1529  m1_loss_dice_5: 1.161  m1_loss_ce_6: 0.391  m1_loss_mask_6: 0.1511  m1_loss_dice_6: 1.11  m1_loss_ce_7: 0.3885  m1_loss_mask_7: 0.1496  m1_loss_dice_7: 1.094  m1_loss_ce_8: 0.3773  m1_loss_mask_8: 0.1474  m1_loss_dice_8: 1.122  m2_loss_ce: 0.4583  m2_loss_mask: 0.1536  m2_loss_dice: 1.166  m2_loss_ce_0: 0.5557  m2_loss_mask_0: 0.184  m2_loss_dice_0: 1.353  m2_loss_ce_1: 0.6508  m2_loss_mask_1: 0.1659  m2_loss_dice_1: 1.295  m2_loss_ce_2: 0.5858  m2_loss_mask_2: 0.1624  m2_loss_dice_2: 1.23  m2_loss_ce_3: 0.5393  m2_loss_mask_3: 0.1601  m2_loss_dice_3: 1.195  m2_loss_ce_4: 0.5024  m2_loss_mask_4: 0.1587  m2_loss_dice_4: 1.166  m2_loss_ce_5: 0.5063  m2_loss_mask_5: 0.1575  m2_loss_dice_5: 1.166  m2_loss_ce_6: 0.4831  m2_loss_mask_6: 0.1532  m2_loss_dice_6: 1.142  m2_loss_ce_7: 0.4606  m2_loss_mask_7: 0.1544  m2_loss_dice_7: 1.131  m2_loss_ce_8: 0.4672  m2_loss_mask_8: 0.1527  m2_loss_dice_8: 1.143    time: 1.6857  last_time: 1.6830  data_time: 0.0485  last_data_time: 0.0485   lr: 0.0001  max_mem: 36847M
[10/07 12:06:40] d2.utils.events INFO:  eta: 0:03:19  iter: 879  total_loss: 38.21  m1_loss_ce: 0.4073  m1_loss_mask: 0.1399  m1_loss_dice: 1.188  m1_loss_ce_0: 0.5023  m1_loss_mask_0: 0.1572  m1_loss_dice_0: 1.393  m1_loss_ce_1: 0.5718  m1_loss_mask_1: 0.1468  m1_loss_dice_1: 1.336  m1_loss_ce_2: 0.5045  m1_loss_mask_2: 0.142  m1_loss_dice_2: 1.277  m1_loss_ce_3: 0.4612  m1_loss_mask_3: 0.1408  m1_loss_dice_3: 1.223  m1_loss_ce_4: 0.4484  m1_loss_mask_4: 0.1432  m1_loss_dice_4: 1.226  m1_loss_ce_5: 0.4198  m1_loss_mask_5: 0.1384  m1_loss_dice_5: 1.221  m1_loss_ce_6: 0.4092  m1_loss_mask_6: 0.1399  m1_loss_dice_6: 1.196  m1_loss_ce_7: 0.4254  m1_loss_mask_7: 0.1399  m1_loss_dice_7: 1.178  m1_loss_ce_8: 0.3978  m1_loss_mask_8: 0.1384  m1_loss_dice_8: 1.181  m2_loss_ce: 0.4752  m2_loss_mask: 0.1345  m2_loss_dice: 1.232  m2_loss_ce_0: 0.5833  m2_loss_mask_0: 0.1647  m2_loss_dice_0: 1.445  m2_loss_ce_1: 0.626  m2_loss_mask_1: 0.1535  m2_loss_dice_1: 1.349  m2_loss_ce_2: 0.5799  m2_loss_mask_2: 0.1444  m2_loss_dice_2: 1.303  m2_loss_ce_3: 0.5267  m2_loss_mask_3: 0.1432  m2_loss_dice_3: 1.262  m2_loss_ce_4: 0.5223  m2_loss_mask_4: 0.1413  m2_loss_dice_4: 1.287  m2_loss_ce_5: 0.5017  m2_loss_mask_5: 0.1372  m2_loss_dice_5: 1.258  m2_loss_ce_6: 0.4813  m2_loss_mask_6: 0.136  m2_loss_dice_6: 1.229  m2_loss_ce_7: 0.4771  m2_loss_mask_7: 0.1344  m2_loss_dice_7: 1.233  m2_loss_ce_8: 0.4751  m2_loss_mask_8: 0.1331  m2_loss_dice_8: 1.25    time: 1.6862  last_time: 1.6667  data_time: 0.0538  last_data_time: 0.0458   lr: 0.0001  max_mem: 36904M
[10/07 12:07:14] d2.utils.events INFO:  eta: 0:02:46  iter: 899  total_loss: 35.25  m1_loss_ce: 0.3597  m1_loss_mask: 0.1533  m1_loss_dice: 1.123  m1_loss_ce_0: 0.499  m1_loss_mask_0: 0.1791  m1_loss_dice_0: 1.283  m1_loss_ce_1: 0.561  m1_loss_mask_1: 0.1642  m1_loss_dice_1: 1.231  m1_loss_ce_2: 0.4666  m1_loss_mask_2: 0.1576  m1_loss_dice_2: 1.166  m1_loss_ce_3: 0.417  m1_loss_mask_3: 0.1556  m1_loss_dice_3: 1.139  m1_loss_ce_4: 0.4075  m1_loss_mask_4: 0.154  m1_loss_dice_4: 1.106  m1_loss_ce_5: 0.3734  m1_loss_mask_5: 0.154  m1_loss_dice_5: 1.11  m1_loss_ce_6: 0.3481  m1_loss_mask_6: 0.1563  m1_loss_dice_6: 1.117  m1_loss_ce_7: 0.3741  m1_loss_mask_7: 0.1552  m1_loss_dice_7: 1.103  m1_loss_ce_8: 0.3631  m1_loss_mask_8: 0.1539  m1_loss_dice_8: 1.096  m2_loss_ce: 0.4525  m2_loss_mask: 0.1547  m2_loss_dice: 1.147  m2_loss_ce_0: 0.5604  m2_loss_mask_0: 0.189  m2_loss_dice_0: 1.348  m2_loss_ce_1: 0.6046  m2_loss_mask_1: 0.1662  m2_loss_dice_1: 1.278  m2_loss_ce_2: 0.5459  m2_loss_mask_2: 0.1695  m2_loss_dice_2: 1.235  m2_loss_ce_3: 0.4852  m2_loss_mask_3: 0.1601  m2_loss_dice_3: 1.151  m2_loss_ce_4: 0.447  m2_loss_mask_4: 0.1589  m2_loss_dice_4: 1.194  m2_loss_ce_5: 0.4503  m2_loss_mask_5: 0.1552  m2_loss_dice_5: 1.171  m2_loss_ce_6: 0.4429  m2_loss_mask_6: 0.1573  m2_loss_dice_6: 1.144  m2_loss_ce_7: 0.4441  m2_loss_mask_7: 0.1574  m2_loss_dice_7: 1.179  m2_loss_ce_8: 0.4497  m2_loss_mask_8: 0.155  m2_loss_dice_8: 1.142    time: 1.6861  last_time: 1.6503  data_time: 0.0464  last_data_time: 0.0377   lr: 0.0001  max_mem: 36904M
[10/07 13:14:26] detectron2 INFO: Rank of current process: 0. World size: 2
[10/07 13:14:28] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/07 13:14:28] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/cl_Comb_2_L1_L2_0_6_0_4_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/07 13:14:28] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/cl_Comb_2_L1_L2_0_6_0_4_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/07 13:14:28] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: convnext_large_d_320
    CLIP_PRETRAINED_WEIGHTS: laion2b_s29b_b131k_ft_soup
    EMBED_DIM: 768
    ENSEMBLE_ON_VALID_MASK: false
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/07 13:14:28] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4/config.yaml
[10/07 13:14:28] d2.utils.env INFO: Using a generated random seed 29147555
[10/07 13:14:43] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): TimmModel(
        (trunk): ConvNeXt(
          (stem): Sequential(
            (0): Conv2d(3, 192, kernel_size=(4, 4), stride=(4, 4))
            (1): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          )
          (stages): Sequential(
            (0): ConvNeXtStage(
              (downsample): Identity()
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): Identity()
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.003)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.006)
                )
              )
            )
            (1): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.009)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.011)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.014)
                )
              )
            )
            (2): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.017)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.020)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.023)
                )
                (3): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.026)
                )
                (4): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.029)
                )
                (5): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.031)
                )
                (6): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.034)
                )
                (7): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.037)
                )
                (8): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.040)
                )
                (9): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.043)
                )
                (10): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.046)
                )
                (11): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.049)
                )
                (12): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.051)
                )
                (13): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.054)
                )
                (14): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.057)
                )
                (15): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.060)
                )
                (16): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.063)
                )
                (17): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.066)
                )
                (18): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.069)
                )
                (19): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.071)
                )
                (20): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.074)
                )
                (21): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.077)
                )
                (22): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.080)
                )
                (23): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.083)
                )
                (24): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.086)
                )
                (25): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.089)
                )
                (26): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.091)
                )
              )
            )
            (3): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(768, 1536, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.094)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.097)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.100)
                )
              )
            )
          )
          (norm_pre): Identity()
          (head): NormMlpClassifierHead(
            (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Identity())
            (norm): LayerNorm2d((1536,), eps=1e-06, elementwise_affine=True)
            (flatten): Flatten(start_dim=1, end_dim=-1)
            (pre_logits): Identity()
            (drop): Dropout(p=0.0, inplace=False)
            (fc): Identity()
          )
        )
        (head): Sequential(
          (mlp): Mlp(
            (fc1): Linear(in_features=1536, out_features=1536, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (norm): Identity()
            (fc2): Linear(in_features=1536, out_features=768, bias=False)
            (drop2): Dropout(p=0, inplace=False)
          )
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-15): 16 x ResidualAttentionBlock(
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): GELU(approximate='none')
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 768)
      (ln_final): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(1536, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=768, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 768)
)
[10/07 13:14:43] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/07 13:14:43] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/07 13:14:43] d2.data.build INFO: Using training sampler TrainingSampler
[10/07 13:14:43] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/07 13:14:43] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/07 13:14:43] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/07 13:14:43] d2.data.build INFO: Making batched data loader with batch_size=4
[10/07 13:14:43] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/07 13:14:58] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): TimmModel(
        (trunk): ConvNeXt(
          (stem): Sequential(
            (0): Conv2d(3, 192, kernel_size=(4, 4), stride=(4, 4))
            (1): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          )
          (stages): Sequential(
            (0): ConvNeXtStage(
              (downsample): Identity()
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): Identity()
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.003)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.006)
                )
              )
            )
            (1): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.009)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.011)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.014)
                )
              )
            )
            (2): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.017)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.020)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.023)
                )
                (3): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.026)
                )
                (4): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.029)
                )
                (5): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.031)
                )
                (6): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.034)
                )
                (7): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.037)
                )
                (8): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.040)
                )
                (9): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.043)
                )
                (10): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.046)
                )
                (11): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.049)
                )
                (12): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.051)
                )
                (13): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.054)
                )
                (14): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.057)
                )
                (15): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.060)
                )
                (16): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.063)
                )
                (17): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.066)
                )
                (18): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.069)
                )
                (19): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.071)
                )
                (20): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.074)
                )
                (21): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.077)
                )
                (22): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.080)
                )
                (23): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.083)
                )
                (24): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.086)
                )
                (25): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.089)
                )
                (26): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.091)
                )
              )
            )
            (3): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(768, 1536, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.094)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.097)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.100)
                )
              )
            )
          )
          (norm_pre): Identity()
          (head): NormMlpClassifierHead(
            (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Identity())
            (norm): LayerNorm2d((1536,), eps=1e-06, elementwise_affine=True)
            (flatten): Flatten(start_dim=1, end_dim=-1)
            (pre_logits): Identity()
            (drop): Dropout(p=0.0, inplace=False)
            (fc): Identity()
          )
        )
        (head): Sequential(
          (mlp): Mlp(
            (fc1): Linear(in_features=1536, out_features=1536, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (norm): Identity()
            (fc2): Linear(in_features=1536, out_features=768, bias=False)
            (drop2): Dropout(p=0, inplace=False)
          )
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-15): 16 x ResidualAttentionBlock(
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): GELU(approximate='none')
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 768)
      (ln_final): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(1536, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=768, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 768)
)
[10/07 13:14:58] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[10/07 13:14:58] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[10/07 13:15:17] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[10/07 13:15:17] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[10/07 13:16:00] d2.utils.events INFO:  eta: 0:27:26  iter: 19  total_loss: 38.91  m1_loss_ce: 0.3968  m1_loss_mask: 0.1546  m1_loss_dice: 1.152  m1_loss_ce_0: 0.5598  m1_loss_mask_0: 0.1827  m1_loss_dice_0: 1.391  m1_loss_ce_1: 0.6246  m1_loss_mask_1: 0.1746  m1_loss_dice_1: 1.325  m1_loss_ce_2: 0.519  m1_loss_mask_2: 0.1739  m1_loss_dice_2: 1.264  m1_loss_ce_3: 0.4803  m1_loss_mask_3: 0.1707  m1_loss_dice_3: 1.197  m1_loss_ce_4: 0.478  m1_loss_mask_4: 0.1719  m1_loss_dice_4: 1.204  m1_loss_ce_5: 0.4488  m1_loss_mask_5: 0.1608  m1_loss_dice_5: 1.185  m1_loss_ce_6: 0.4193  m1_loss_mask_6: 0.1571  m1_loss_dice_6: 1.163  m1_loss_ce_7: 0.4214  m1_loss_mask_7: 0.1576  m1_loss_dice_7: 1.206  m1_loss_ce_8: 0.4337  m1_loss_mask_8: 0.1582  m1_loss_dice_8: 1.154  m2_loss_ce: 0.4667  m2_loss_mask: 0.1461  m2_loss_dice: 1.219  m2_loss_ce_0: 0.5651  m2_loss_mask_0: 0.1802  m2_loss_dice_0: 1.363  m2_loss_ce_1: 0.6085  m2_loss_mask_1: 0.1623  m2_loss_dice_1: 1.348  m2_loss_ce_2: 0.5266  m2_loss_mask_2: 0.1583  m2_loss_dice_2: 1.248  m2_loss_ce_3: 0.4746  m2_loss_mask_3: 0.1547  m2_loss_dice_3: 1.198  m2_loss_ce_4: 0.4782  m2_loss_mask_4: 0.1507  m2_loss_dice_4: 1.232  m2_loss_ce_5: 0.4531  m2_loss_mask_5: 0.148  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.4553  m2_loss_mask_6: 0.1488  m2_loss_dice_6: 1.226  m2_loss_ce_7: 0.4485  m2_loss_mask_7: 0.1468  m2_loss_dice_7: 1.169  m2_loss_ce_8: 0.451  m2_loss_mask_8: 0.1467  m2_loss_dice_8: 1.173    time: 1.6919  last_time: 1.7581  data_time: 0.3377  last_data_time: 0.0513   lr: 0.0001  max_mem: 35649M
[10/07 13:16:34] d2.utils.events INFO:  eta: 0:26:52  iter: 39  total_loss: 36.05  m1_loss_ce: 0.4428  m1_loss_mask: 0.151  m1_loss_dice: 1.105  m1_loss_ce_0: 0.5506  m1_loss_mask_0: 0.1824  m1_loss_dice_0: 1.353  m1_loss_ce_1: 0.6194  m1_loss_mask_1: 0.1658  m1_loss_dice_1: 1.252  m1_loss_ce_2: 0.5442  m1_loss_mask_2: 0.1578  m1_loss_dice_2: 1.233  m1_loss_ce_3: 0.4944  m1_loss_mask_3: 0.153  m1_loss_dice_3: 1.15  m1_loss_ce_4: 0.452  m1_loss_mask_4: 0.1525  m1_loss_dice_4: 1.128  m1_loss_ce_5: 0.4309  m1_loss_mask_5: 0.1525  m1_loss_dice_5: 1.13  m1_loss_ce_6: 0.4511  m1_loss_mask_6: 0.1502  m1_loss_dice_6: 1.094  m1_loss_ce_7: 0.4196  m1_loss_mask_7: 0.1531  m1_loss_dice_7: 1.109  m1_loss_ce_8: 0.4437  m1_loss_mask_8: 0.149  m1_loss_dice_8: 1.084  m2_loss_ce: 0.4549  m2_loss_mask: 0.1408  m2_loss_dice: 1.088  m2_loss_ce_0: 0.5605  m2_loss_mask_0: 0.1815  m2_loss_dice_0: 1.33  m2_loss_ce_1: 0.6406  m2_loss_mask_1: 0.1671  m2_loss_dice_1: 1.211  m2_loss_ce_2: 0.5719  m2_loss_mask_2: 0.1516  m2_loss_dice_2: 1.186  m2_loss_ce_3: 0.493  m2_loss_mask_3: 0.1474  m2_loss_dice_3: 1.129  m2_loss_ce_4: 0.4794  m2_loss_mask_4: 0.148  m2_loss_dice_4: 1.145  m2_loss_ce_5: 0.4678  m2_loss_mask_5: 0.1453  m2_loss_dice_5: 1.125  m2_loss_ce_6: 0.4336  m2_loss_mask_6: 0.1404  m2_loss_dice_6: 1.096  m2_loss_ce_7: 0.4406  m2_loss_mask_7: 0.1416  m2_loss_dice_7: 1.128  m2_loss_ce_8: 0.4465  m2_loss_mask_8: 0.1411  m2_loss_dice_8: 1.116    time: 1.6840  last_time: 1.6318  data_time: 0.0620  last_data_time: 0.0423   lr: 0.0001  max_mem: 35649M
[10/07 13:17:09] d2.utils.events INFO:  eta: 0:26:34  iter: 59  total_loss: 36.4  m1_loss_ce: 0.391  m1_loss_mask: 0.1592  m1_loss_dice: 1.13  m1_loss_ce_0: 0.5528  m1_loss_mask_0: 0.1862  m1_loss_dice_0: 1.352  m1_loss_ce_1: 0.5766  m1_loss_mask_1: 0.168  m1_loss_dice_1: 1.253  m1_loss_ce_2: 0.4955  m1_loss_mask_2: 0.1654  m1_loss_dice_2: 1.206  m1_loss_ce_3: 0.4526  m1_loss_mask_3: 0.1628  m1_loss_dice_3: 1.173  m1_loss_ce_4: 0.4125  m1_loss_mask_4: 0.1624  m1_loss_dice_4: 1.147  m1_loss_ce_5: 0.4131  m1_loss_mask_5: 0.1597  m1_loss_dice_5: 1.14  m1_loss_ce_6: 0.3992  m1_loss_mask_6: 0.1607  m1_loss_dice_6: 1.153  m1_loss_ce_7: 0.4  m1_loss_mask_7: 0.1612  m1_loss_dice_7: 1.13  m1_loss_ce_8: 0.411  m1_loss_mask_8: 0.1597  m1_loss_dice_8: 1.152  m2_loss_ce: 0.4097  m2_loss_mask: 0.1582  m2_loss_dice: 1.151  m2_loss_ce_0: 0.5465  m2_loss_mask_0: 0.1787  m2_loss_dice_0: 1.323  m2_loss_ce_1: 0.6214  m2_loss_mask_1: 0.1718  m2_loss_dice_1: 1.251  m2_loss_ce_2: 0.5169  m2_loss_mask_2: 0.1627  m2_loss_dice_2: 1.188  m2_loss_ce_3: 0.4902  m2_loss_mask_3: 0.1614  m2_loss_dice_3: 1.14  m2_loss_ce_4: 0.4637  m2_loss_mask_4: 0.1616  m2_loss_dice_4: 1.174  m2_loss_ce_5: 0.4139  m2_loss_mask_5: 0.1562  m2_loss_dice_5: 1.191  m2_loss_ce_6: 0.4228  m2_loss_mask_6: 0.1564  m2_loss_dice_6: 1.172  m2_loss_ce_7: 0.41  m2_loss_mask_7: 0.156  m2_loss_dice_7: 1.196  m2_loss_ce_8: 0.4073  m2_loss_mask_8: 0.1533  m2_loss_dice_8: 1.175    time: 1.7003  last_time: 1.7138  data_time: 0.0522  last_data_time: 0.0502   lr: 0.0001  max_mem: 36942M
[10/07 13:17:43] d2.utils.events INFO:  eta: 0:26:06  iter: 79  total_loss: 36.63  m1_loss_ce: 0.4551  m1_loss_mask: 0.1542  m1_loss_dice: 1.125  m1_loss_ce_0: 0.5798  m1_loss_mask_0: 0.1804  m1_loss_dice_0: 1.334  m1_loss_ce_1: 0.5832  m1_loss_mask_1: 0.1596  m1_loss_dice_1: 1.274  m1_loss_ce_2: 0.5277  m1_loss_mask_2: 0.156  m1_loss_dice_2: 1.221  m1_loss_ce_3: 0.5035  m1_loss_mask_3: 0.1549  m1_loss_dice_3: 1.177  m1_loss_ce_4: 0.4549  m1_loss_mask_4: 0.1535  m1_loss_dice_4: 1.173  m1_loss_ce_5: 0.4529  m1_loss_mask_5: 0.1557  m1_loss_dice_5: 1.166  m1_loss_ce_6: 0.4338  m1_loss_mask_6: 0.1573  m1_loss_dice_6: 1.136  m1_loss_ce_7: 0.4545  m1_loss_mask_7: 0.158  m1_loss_dice_7: 1.165  m1_loss_ce_8: 0.4444  m1_loss_mask_8: 0.1564  m1_loss_dice_8: 1.12  m2_loss_ce: 0.4375  m2_loss_mask: 0.1484  m2_loss_dice: 1.128  m2_loss_ce_0: 0.5556  m2_loss_mask_0: 0.1717  m2_loss_dice_0: 1.323  m2_loss_ce_1: 0.6051  m2_loss_mask_1: 0.1614  m2_loss_dice_1: 1.262  m2_loss_ce_2: 0.5452  m2_loss_mask_2: 0.156  m2_loss_dice_2: 1.244  m2_loss_ce_3: 0.5043  m2_loss_mask_3: 0.1559  m2_loss_dice_3: 1.201  m2_loss_ce_4: 0.4749  m2_loss_mask_4: 0.1495  m2_loss_dice_4: 1.16  m2_loss_ce_5: 0.4539  m2_loss_mask_5: 0.1515  m2_loss_dice_5: 1.177  m2_loss_ce_6: 0.4345  m2_loss_mask_6: 0.1491  m2_loss_dice_6: 1.172  m2_loss_ce_7: 0.4553  m2_loss_mask_7: 0.1484  m2_loss_dice_7: 1.147  m2_loss_ce_8: 0.4492  m2_loss_mask_8: 0.1514  m2_loss_dice_8: 1.197    time: 1.7027  last_time: 1.7195  data_time: 0.0462  last_data_time: 0.0466   lr: 0.0001  max_mem: 36942M
[10/07 13:18:18] d2.utils.events INFO:  eta: 0:25:36  iter: 99  total_loss: 39.2  m1_loss_ce: 0.4851  m1_loss_mask: 0.1477  m1_loss_dice: 1.163  m1_loss_ce_0: 0.589  m1_loss_mask_0: 0.1715  m1_loss_dice_0: 1.397  m1_loss_ce_1: 0.6395  m1_loss_mask_1: 0.1613  m1_loss_dice_1: 1.312  m1_loss_ce_2: 0.5964  m1_loss_mask_2: 0.1509  m1_loss_dice_2: 1.237  m1_loss_ce_3: 0.5124  m1_loss_mask_3: 0.151  m1_loss_dice_3: 1.174  m1_loss_ce_4: 0.4752  m1_loss_mask_4: 0.1502  m1_loss_dice_4: 1.191  m1_loss_ce_5: 0.5266  m1_loss_mask_5: 0.1505  m1_loss_dice_5: 1.163  m1_loss_ce_6: 0.478  m1_loss_mask_6: 0.1491  m1_loss_dice_6: 1.178  m1_loss_ce_7: 0.4668  m1_loss_mask_7: 0.1485  m1_loss_dice_7: 1.205  m1_loss_ce_8: 0.47  m1_loss_mask_8: 0.1479  m1_loss_dice_8: 1.171  m2_loss_ce: 0.4846  m2_loss_mask: 0.1457  m2_loss_dice: 1.197  m2_loss_ce_0: 0.6151  m2_loss_mask_0: 0.1731  m2_loss_dice_0: 1.396  m2_loss_ce_1: 0.6789  m2_loss_mask_1: 0.1632  m2_loss_dice_1: 1.357  m2_loss_ce_2: 0.5858  m2_loss_mask_2: 0.1526  m2_loss_dice_2: 1.255  m2_loss_ce_3: 0.5466  m2_loss_mask_3: 0.1542  m2_loss_dice_3: 1.229  m2_loss_ce_4: 0.4814  m2_loss_mask_4: 0.1493  m2_loss_dice_4: 1.236  m2_loss_ce_5: 0.4932  m2_loss_mask_5: 0.1464  m2_loss_dice_5: 1.219  m2_loss_ce_6: 0.4913  m2_loss_mask_6: 0.1473  m2_loss_dice_6: 1.194  m2_loss_ce_7: 0.4774  m2_loss_mask_7: 0.1465  m2_loss_dice_7: 1.205  m2_loss_ce_8: 0.4772  m2_loss_mask_8: 0.1453  m2_loss_dice_8: 1.193    time: 1.7114  last_time: 1.7592  data_time: 0.0570  last_data_time: 0.0490   lr: 0.0001  max_mem: 36942M
[10/07 13:18:54] d2.utils.events INFO:  eta: 0:25:05  iter: 119  total_loss: 37.24  m1_loss_ce: 0.3986  m1_loss_mask: 0.1624  m1_loss_dice: 1.162  m1_loss_ce_0: 0.4943  m1_loss_mask_0: 0.1868  m1_loss_dice_0: 1.376  m1_loss_ce_1: 0.5752  m1_loss_mask_1: 0.1718  m1_loss_dice_1: 1.303  m1_loss_ce_2: 0.5319  m1_loss_mask_2: 0.1651  m1_loss_dice_2: 1.232  m1_loss_ce_3: 0.4424  m1_loss_mask_3: 0.1672  m1_loss_dice_3: 1.18  m1_loss_ce_4: 0.4407  m1_loss_mask_4: 0.1638  m1_loss_dice_4: 1.2  m1_loss_ce_5: 0.4324  m1_loss_mask_5: 0.1642  m1_loss_dice_5: 1.191  m1_loss_ce_6: 0.4038  m1_loss_mask_6: 0.1622  m1_loss_dice_6: 1.22  m1_loss_ce_7: 0.3817  m1_loss_mask_7: 0.1631  m1_loss_dice_7: 1.178  m1_loss_ce_8: 0.407  m1_loss_mask_8: 0.1636  m1_loss_dice_8: 1.181  m2_loss_ce: 0.4518  m2_loss_mask: 0.1579  m2_loss_dice: 1.183  m2_loss_ce_0: 0.547  m2_loss_mask_0: 0.1945  m2_loss_dice_0: 1.375  m2_loss_ce_1: 0.5863  m2_loss_mask_1: 0.1796  m2_loss_dice_1: 1.305  m2_loss_ce_2: 0.5624  m2_loss_mask_2: 0.1657  m2_loss_dice_2: 1.28  m2_loss_ce_3: 0.4834  m2_loss_mask_3: 0.1644  m2_loss_dice_3: 1.203  m2_loss_ce_4: 0.4545  m2_loss_mask_4: 0.1618  m2_loss_dice_4: 1.184  m2_loss_ce_5: 0.4674  m2_loss_mask_5: 0.1597  m2_loss_dice_5: 1.19  m2_loss_ce_6: 0.4289  m2_loss_mask_6: 0.1585  m2_loss_dice_6: 1.214  m2_loss_ce_7: 0.4446  m2_loss_mask_7: 0.1551  m2_loss_dice_7: 1.183  m2_loss_ce_8: 0.4476  m2_loss_mask_8: 0.1567  m2_loss_dice_8: 1.162    time: 1.7201  last_time: 1.6900  data_time: 0.0679  last_data_time: 0.0466   lr: 0.0001  max_mem: 36942M
[10/07 13:19:30] d2.utils.events INFO:  eta: 0:24:36  iter: 139  total_loss: 38.05  m1_loss_ce: 0.4237  m1_loss_mask: 0.1564  m1_loss_dice: 1.212  m1_loss_ce_0: 0.5274  m1_loss_mask_0: 0.1707  m1_loss_dice_0: 1.389  m1_loss_ce_1: 0.5819  m1_loss_mask_1: 0.1634  m1_loss_dice_1: 1.341  m1_loss_ce_2: 0.5232  m1_loss_mask_2: 0.1595  m1_loss_dice_2: 1.255  m1_loss_ce_3: 0.4594  m1_loss_mask_3: 0.1575  m1_loss_dice_3: 1.209  m1_loss_ce_4: 0.4241  m1_loss_mask_4: 0.1575  m1_loss_dice_4: 1.232  m1_loss_ce_5: 0.4621  m1_loss_mask_5: 0.1565  m1_loss_dice_5: 1.205  m1_loss_ce_6: 0.4153  m1_loss_mask_6: 0.1557  m1_loss_dice_6: 1.222  m1_loss_ce_7: 0.4134  m1_loss_mask_7: 0.1566  m1_loss_dice_7: 1.216  m1_loss_ce_8: 0.4207  m1_loss_mask_8: 0.1562  m1_loss_dice_8: 1.203  m2_loss_ce: 0.4603  m2_loss_mask: 0.1505  m2_loss_dice: 1.222  m2_loss_ce_0: 0.5986  m2_loss_mask_0: 0.1759  m2_loss_dice_0: 1.419  m2_loss_ce_1: 0.6465  m2_loss_mask_1: 0.1604  m2_loss_dice_1: 1.361  m2_loss_ce_2: 0.5605  m2_loss_mask_2: 0.1545  m2_loss_dice_2: 1.247  m2_loss_ce_3: 0.525  m2_loss_mask_3: 0.1563  m2_loss_dice_3: 1.254  m2_loss_ce_4: 0.504  m2_loss_mask_4: 0.1509  m2_loss_dice_4: 1.249  m2_loss_ce_5: 0.4654  m2_loss_mask_5: 0.1494  m2_loss_dice_5: 1.222  m2_loss_ce_6: 0.4491  m2_loss_mask_6: 0.1468  m2_loss_dice_6: 1.23  m2_loss_ce_7: 0.427  m2_loss_mask_7: 0.1485  m2_loss_dice_7: 1.249  m2_loss_ce_8: 0.4604  m2_loss_mask_8: 0.1479  m2_loss_dice_8: 1.223    time: 1.7298  last_time: 1.7434  data_time: 0.0717  last_data_time: 0.0654   lr: 0.0001  max_mem: 36942M
[10/07 13:20:06] d2.utils.events INFO:  eta: 0:24:06  iter: 159  total_loss: 36.8  m1_loss_ce: 0.4166  m1_loss_mask: 0.1451  m1_loss_dice: 1.156  m1_loss_ce_0: 0.5525  m1_loss_mask_0: 0.1704  m1_loss_dice_0: 1.364  m1_loss_ce_1: 0.5921  m1_loss_mask_1: 0.1579  m1_loss_dice_1: 1.302  m1_loss_ce_2: 0.5361  m1_loss_mask_2: 0.1507  m1_loss_dice_2: 1.243  m1_loss_ce_3: 0.4712  m1_loss_mask_3: 0.148  m1_loss_dice_3: 1.164  m1_loss_ce_4: 0.4444  m1_loss_mask_4: 0.1481  m1_loss_dice_4: 1.228  m1_loss_ce_5: 0.4355  m1_loss_mask_5: 0.1478  m1_loss_dice_5: 1.17  m1_loss_ce_6: 0.4206  m1_loss_mask_6: 0.1435  m1_loss_dice_6: 1.149  m1_loss_ce_7: 0.4344  m1_loss_mask_7: 0.1466  m1_loss_dice_7: 1.161  m1_loss_ce_8: 0.4087  m1_loss_mask_8: 0.1453  m1_loss_dice_8: 1.154  m2_loss_ce: 0.4811  m2_loss_mask: 0.1435  m2_loss_dice: 1.177  m2_loss_ce_0: 0.5626  m2_loss_mask_0: 0.1714  m2_loss_dice_0: 1.365  m2_loss_ce_1: 0.6293  m2_loss_mask_1: 0.1567  m2_loss_dice_1: 1.292  m2_loss_ce_2: 0.5621  m2_loss_mask_2: 0.1512  m2_loss_dice_2: 1.271  m2_loss_ce_3: 0.5042  m2_loss_mask_3: 0.1494  m2_loss_dice_3: 1.193  m2_loss_ce_4: 0.4681  m2_loss_mask_4: 0.1456  m2_loss_dice_4: 1.201  m2_loss_ce_5: 0.4788  m2_loss_mask_5: 0.1436  m2_loss_dice_5: 1.197  m2_loss_ce_6: 0.4371  m2_loss_mask_6: 0.1432  m2_loss_dice_6: 1.155  m2_loss_ce_7: 0.4618  m2_loss_mask_7: 0.143  m2_loss_dice_7: 1.164  m2_loss_ce_8: 0.4857  m2_loss_mask_8: 0.1438  m2_loss_dice_8: 1.169    time: 1.7399  last_time: 1.8244  data_time: 0.1005  last_data_time: 0.1589   lr: 0.0001  max_mem: 36942M
[10/07 13:20:41] d2.utils.events INFO:  eta: 0:23:32  iter: 179  total_loss: 35.28  m1_loss_ce: 0.3812  m1_loss_mask: 0.1591  m1_loss_dice: 1.14  m1_loss_ce_0: 0.4905  m1_loss_mask_0: 0.1909  m1_loss_dice_0: 1.356  m1_loss_ce_1: 0.5359  m1_loss_mask_1: 0.1723  m1_loss_dice_1: 1.246  m1_loss_ce_2: 0.4834  m1_loss_mask_2: 0.1645  m1_loss_dice_2: 1.2  m1_loss_ce_3: 0.4542  m1_loss_mask_3: 0.1655  m1_loss_dice_3: 1.155  m1_loss_ce_4: 0.4006  m1_loss_mask_4: 0.1663  m1_loss_dice_4: 1.167  m1_loss_ce_5: 0.4329  m1_loss_mask_5: 0.1641  m1_loss_dice_5: 1.172  m1_loss_ce_6: 0.3834  m1_loss_mask_6: 0.1599  m1_loss_dice_6: 1.137  m1_loss_ce_7: 0.3684  m1_loss_mask_7: 0.1574  m1_loss_dice_7: 1.126  m1_loss_ce_8: 0.3791  m1_loss_mask_8: 0.1588  m1_loss_dice_8: 1.131  m2_loss_ce: 0.4079  m2_loss_mask: 0.1622  m2_loss_dice: 1.17  m2_loss_ce_0: 0.5104  m2_loss_mask_0: 0.1989  m2_loss_dice_0: 1.349  m2_loss_ce_1: 0.5777  m2_loss_mask_1: 0.1784  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.5039  m2_loss_mask_2: 0.1738  m2_loss_dice_2: 1.245  m2_loss_ce_3: 0.4483  m2_loss_mask_3: 0.1684  m2_loss_dice_3: 1.167  m2_loss_ce_4: 0.4456  m2_loss_mask_4: 0.1634  m2_loss_dice_4: 1.146  m2_loss_ce_5: 0.4292  m2_loss_mask_5: 0.1632  m2_loss_dice_5: 1.206  m2_loss_ce_6: 0.4138  m2_loss_mask_6: 0.1636  m2_loss_dice_6: 1.145  m2_loss_ce_7: 0.4042  m2_loss_mask_7: 0.164  m2_loss_dice_7: 1.175  m2_loss_ce_8: 0.4155  m2_loss_mask_8: 0.164  m2_loss_dice_8: 1.159    time: 1.7404  last_time: 1.6872  data_time: 0.0684  last_data_time: 0.0436   lr: 0.0001  max_mem: 36942M
[10/07 13:21:16] d2.utils.events INFO:  eta: 0:22:59  iter: 199  total_loss: 37.3  m1_loss_ce: 0.4264  m1_loss_mask: 0.1674  m1_loss_dice: 1.128  m1_loss_ce_0: 0.5556  m1_loss_mask_0: 0.1889  m1_loss_dice_0: 1.311  m1_loss_ce_1: 0.6191  m1_loss_mask_1: 0.1736  m1_loss_dice_1: 1.239  m1_loss_ce_2: 0.5787  m1_loss_mask_2: 0.1672  m1_loss_dice_2: 1.192  m1_loss_ce_3: 0.486  m1_loss_mask_3: 0.1649  m1_loss_dice_3: 1.172  m1_loss_ce_4: 0.4415  m1_loss_mask_4: 0.1667  m1_loss_dice_4: 1.141  m1_loss_ce_5: 0.4583  m1_loss_mask_5: 0.1636  m1_loss_dice_5: 1.127  m1_loss_ce_6: 0.4492  m1_loss_mask_6: 0.1677  m1_loss_dice_6: 1.124  m1_loss_ce_7: 0.4384  m1_loss_mask_7: 0.1651  m1_loss_dice_7: 1.109  m1_loss_ce_8: 0.4321  m1_loss_mask_8: 0.1707  m1_loss_dice_8: 1.142  m2_loss_ce: 0.4626  m2_loss_mask: 0.165  m2_loss_dice: 1.16  m2_loss_ce_0: 0.5842  m2_loss_mask_0: 0.1895  m2_loss_dice_0: 1.353  m2_loss_ce_1: 0.6353  m2_loss_mask_1: 0.175  m2_loss_dice_1: 1.242  m2_loss_ce_2: 0.5765  m2_loss_mask_2: 0.1709  m2_loss_dice_2: 1.227  m2_loss_ce_3: 0.4857  m2_loss_mask_3: 0.1691  m2_loss_dice_3: 1.171  m2_loss_ce_4: 0.4575  m2_loss_mask_4: 0.1679  m2_loss_dice_4: 1.177  m2_loss_ce_5: 0.4644  m2_loss_mask_5: 0.1679  m2_loss_dice_5: 1.156  m2_loss_ce_6: 0.4618  m2_loss_mask_6: 0.1643  m2_loss_dice_6: 1.156  m2_loss_ce_7: 0.4433  m2_loss_mask_7: 0.1646  m2_loss_dice_7: 1.145  m2_loss_ce_8: 0.4662  m2_loss_mask_8: 0.1643  m2_loss_dice_8: 1.138    time: 1.7394  last_time: 1.7932  data_time: 0.0780  last_data_time: 0.1030   lr: 0.0001  max_mem: 36942M
[10/07 13:21:51] d2.utils.events INFO:  eta: 0:22:26  iter: 219  total_loss: 35.97  m1_loss_ce: 0.4122  m1_loss_mask: 0.1522  m1_loss_dice: 1.176  m1_loss_ce_0: 0.5252  m1_loss_mask_0: 0.1792  m1_loss_dice_0: 1.353  m1_loss_ce_1: 0.5822  m1_loss_mask_1: 0.1608  m1_loss_dice_1: 1.288  m1_loss_ce_2: 0.5279  m1_loss_mask_2: 0.1536  m1_loss_dice_2: 1.246  m1_loss_ce_3: 0.4462  m1_loss_mask_3: 0.152  m1_loss_dice_3: 1.179  m1_loss_ce_4: 0.4348  m1_loss_mask_4: 0.1518  m1_loss_dice_4: 1.204  m1_loss_ce_5: 0.415  m1_loss_mask_5: 0.156  m1_loss_dice_5: 1.208  m1_loss_ce_6: 0.436  m1_loss_mask_6: 0.1554  m1_loss_dice_6: 1.1  m1_loss_ce_7: 0.3838  m1_loss_mask_7: 0.1551  m1_loss_dice_7: 1.163  m1_loss_ce_8: 0.416  m1_loss_mask_8: 0.1526  m1_loss_dice_8: 1.191  m2_loss_ce: 0.428  m2_loss_mask: 0.1468  m2_loss_dice: 1.136  m2_loss_ce_0: 0.5341  m2_loss_mask_0: 0.1806  m2_loss_dice_0: 1.369  m2_loss_ce_1: 0.6068  m2_loss_mask_1: 0.1564  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.5247  m2_loss_mask_2: 0.1554  m2_loss_dice_2: 1.25  m2_loss_ce_3: 0.4875  m2_loss_mask_3: 0.1494  m2_loss_dice_3: 1.177  m2_loss_ce_4: 0.443  m2_loss_mask_4: 0.1467  m2_loss_dice_4: 1.222  m2_loss_ce_5: 0.4323  m2_loss_mask_5: 0.1476  m2_loss_dice_5: 1.145  m2_loss_ce_6: 0.3958  m2_loss_mask_6: 0.1476  m2_loss_dice_6: 1.169  m2_loss_ce_7: 0.4264  m2_loss_mask_7: 0.1459  m2_loss_dice_7: 1.169  m2_loss_ce_8: 0.4032  m2_loss_mask_8: 0.1457  m2_loss_dice_8: 1.165    time: 1.7391  last_time: 1.8143  data_time: 0.0665  last_data_time: 0.1018   lr: 0.0001  max_mem: 36942M
[10/07 13:22:26] d2.utils.events INFO:  eta: 0:21:53  iter: 239  total_loss: 37.47  m1_loss_ce: 0.4361  m1_loss_mask: 0.1618  m1_loss_dice: 1.112  m1_loss_ce_0: 0.5564  m1_loss_mask_0: 0.1771  m1_loss_dice_0: 1.34  m1_loss_ce_1: 0.5979  m1_loss_mask_1: 0.1661  m1_loss_dice_1: 1.276  m1_loss_ce_2: 0.5505  m1_loss_mask_2: 0.1633  m1_loss_dice_2: 1.182  m1_loss_ce_3: 0.4527  m1_loss_mask_3: 0.164  m1_loss_dice_3: 1.169  m1_loss_ce_4: 0.4479  m1_loss_mask_4: 0.164  m1_loss_dice_4: 1.097  m1_loss_ce_5: 0.4431  m1_loss_mask_5: 0.1605  m1_loss_dice_5: 1.119  m1_loss_ce_6: 0.4418  m1_loss_mask_6: 0.1618  m1_loss_dice_6: 1.143  m1_loss_ce_7: 0.3946  m1_loss_mask_7: 0.1615  m1_loss_dice_7: 1.089  m1_loss_ce_8: 0.4365  m1_loss_mask_8: 0.1598  m1_loss_dice_8: 1.108  m2_loss_ce: 0.4493  m2_loss_mask: 0.1613  m2_loss_dice: 1.136  m2_loss_ce_0: 0.5607  m2_loss_mask_0: 0.1827  m2_loss_dice_0: 1.34  m2_loss_ce_1: 0.596  m2_loss_mask_1: 0.1705  m2_loss_dice_1: 1.258  m2_loss_ce_2: 0.5191  m2_loss_mask_2: 0.1667  m2_loss_dice_2: 1.183  m2_loss_ce_3: 0.4694  m2_loss_mask_3: 0.1633  m2_loss_dice_3: 1.205  m2_loss_ce_4: 0.4627  m2_loss_mask_4: 0.1602  m2_loss_dice_4: 1.177  m2_loss_ce_5: 0.4711  m2_loss_mask_5: 0.158  m2_loss_dice_5: 1.171  m2_loss_ce_6: 0.4618  m2_loss_mask_6: 0.1588  m2_loss_dice_6: 1.165  m2_loss_ce_7: 0.4398  m2_loss_mask_7: 0.1595  m2_loss_dice_7: 1.142  m2_loss_ce_8: 0.4294  m2_loss_mask_8: 0.1598  m2_loss_dice_8: 1.146    time: 1.7404  last_time: 1.8091  data_time: 0.0738  last_data_time: 0.0467   lr: 0.0001  max_mem: 36942M
[10/07 13:23:01] d2.utils.events INFO:  eta: 0:21:19  iter: 259  total_loss: 36.64  m1_loss_ce: 0.4451  m1_loss_mask: 0.1488  m1_loss_dice: 1.13  m1_loss_ce_0: 0.521  m1_loss_mask_0: 0.1666  m1_loss_dice_0: 1.36  m1_loss_ce_1: 0.5723  m1_loss_mask_1: 0.16  m1_loss_dice_1: 1.286  m1_loss_ce_2: 0.522  m1_loss_mask_2: 0.1535  m1_loss_dice_2: 1.215  m1_loss_ce_3: 0.4918  m1_loss_mask_3: 0.1476  m1_loss_dice_3: 1.174  m1_loss_ce_4: 0.4072  m1_loss_mask_4: 0.1501  m1_loss_dice_4: 1.195  m1_loss_ce_5: 0.4264  m1_loss_mask_5: 0.1493  m1_loss_dice_5: 1.161  m1_loss_ce_6: 0.4329  m1_loss_mask_6: 0.1468  m1_loss_dice_6: 1.146  m1_loss_ce_7: 0.4233  m1_loss_mask_7: 0.1491  m1_loss_dice_7: 1.174  m1_loss_ce_8: 0.4226  m1_loss_mask_8: 0.1493  m1_loss_dice_8: 1.13  m2_loss_ce: 0.4633  m2_loss_mask: 0.1447  m2_loss_dice: 1.151  m2_loss_ce_0: 0.576  m2_loss_mask_0: 0.1729  m2_loss_dice_0: 1.342  m2_loss_ce_1: 0.6389  m2_loss_mask_1: 0.16  m2_loss_dice_1: 1.301  m2_loss_ce_2: 0.564  m2_loss_mask_2: 0.1519  m2_loss_dice_2: 1.251  m2_loss_ce_3: 0.5231  m2_loss_mask_3: 0.15  m2_loss_dice_3: 1.216  m2_loss_ce_4: 0.4884  m2_loss_mask_4: 0.1458  m2_loss_dice_4: 1.164  m2_loss_ce_5: 0.4525  m2_loss_mask_5: 0.1468  m2_loss_dice_5: 1.19  m2_loss_ce_6: 0.4594  m2_loss_mask_6: 0.1458  m2_loss_dice_6: 1.157  m2_loss_ce_7: 0.4662  m2_loss_mask_7: 0.1442  m2_loss_dice_7: 1.123  m2_loss_ce_8: 0.4679  m2_loss_mask_8: 0.1451  m2_loss_dice_8: 1.145    time: 1.7404  last_time: 1.7099  data_time: 0.0665  last_data_time: 0.0512   lr: 0.0001  max_mem: 36942M
[10/07 13:23:36] d2.utils.events INFO:  eta: 0:20:44  iter: 279  total_loss: 36.69  m1_loss_ce: 0.4414  m1_loss_mask: 0.1541  m1_loss_dice: 1.082  m1_loss_ce_0: 0.5089  m1_loss_mask_0: 0.184  m1_loss_dice_0: 1.313  m1_loss_ce_1: 0.5726  m1_loss_mask_1: 0.1687  m1_loss_dice_1: 1.21  m1_loss_ce_2: 0.5471  m1_loss_mask_2: 0.1599  m1_loss_dice_2: 1.186  m1_loss_ce_3: 0.4747  m1_loss_mask_3: 0.1579  m1_loss_dice_3: 1.163  m1_loss_ce_4: 0.4573  m1_loss_mask_4: 0.1585  m1_loss_dice_4: 1.128  m1_loss_ce_5: 0.4315  m1_loss_mask_5: 0.1569  m1_loss_dice_5: 1.113  m1_loss_ce_6: 0.4578  m1_loss_mask_6: 0.1567  m1_loss_dice_6: 1.091  m1_loss_ce_7: 0.4235  m1_loss_mask_7: 0.1566  m1_loss_dice_7: 1.12  m1_loss_ce_8: 0.4153  m1_loss_mask_8: 0.1542  m1_loss_dice_8: 1.107  m2_loss_ce: 0.4691  m2_loss_mask: 0.1536  m2_loss_dice: 1.129  m2_loss_ce_0: 0.5537  m2_loss_mask_0: 0.1851  m2_loss_dice_0: 1.324  m2_loss_ce_1: 0.6157  m2_loss_mask_1: 0.174  m2_loss_dice_1: 1.269  m2_loss_ce_2: 0.5515  m2_loss_mask_2: 0.1595  m2_loss_dice_2: 1.204  m2_loss_ce_3: 0.5047  m2_loss_mask_3: 0.1626  m2_loss_dice_3: 1.168  m2_loss_ce_4: 0.4789  m2_loss_mask_4: 0.1581  m2_loss_dice_4: 1.141  m2_loss_ce_5: 0.4871  m2_loss_mask_5: 0.1565  m2_loss_dice_5: 1.137  m2_loss_ce_6: 0.4713  m2_loss_mask_6: 0.1538  m2_loss_dice_6: 1.139  m2_loss_ce_7: 0.4518  m2_loss_mask_7: 0.1545  m2_loss_dice_7: 1.131  m2_loss_ce_8: 0.4617  m2_loss_mask_8: 0.1538  m2_loss_dice_8: 1.104    time: 1.7399  last_time: 1.7616  data_time: 0.0752  last_data_time: 0.0773   lr: 0.0001  max_mem: 36942M
[10/07 13:24:10] d2.utils.events INFO:  eta: 0:20:10  iter: 299  total_loss: 36.11  m1_loss_ce: 0.4044  m1_loss_mask: 0.1534  m1_loss_dice: 1.132  m1_loss_ce_0: 0.532  m1_loss_mask_0: 0.1749  m1_loss_dice_0: 1.308  m1_loss_ce_1: 0.58  m1_loss_mask_1: 0.1646  m1_loss_dice_1: 1.217  m1_loss_ce_2: 0.5257  m1_loss_mask_2: 0.158  m1_loss_dice_2: 1.165  m1_loss_ce_3: 0.4707  m1_loss_mask_3: 0.1558  m1_loss_dice_3: 1.131  m1_loss_ce_4: 0.4265  m1_loss_mask_4: 0.1554  m1_loss_dice_4: 1.136  m1_loss_ce_5: 0.4465  m1_loss_mask_5: 0.1533  m1_loss_dice_5: 1.114  m1_loss_ce_6: 0.4249  m1_loss_mask_6: 0.1537  m1_loss_dice_6: 1.122  m1_loss_ce_7: 0.3988  m1_loss_mask_7: 0.1517  m1_loss_dice_7: 1.102  m1_loss_ce_8: 0.4101  m1_loss_mask_8: 0.1529  m1_loss_dice_8: 1.14  m2_loss_ce: 0.4534  m2_loss_mask: 0.1463  m2_loss_dice: 1.117  m2_loss_ce_0: 0.5628  m2_loss_mask_0: 0.1816  m2_loss_dice_0: 1.313  m2_loss_ce_1: 0.6415  m2_loss_mask_1: 0.1622  m2_loss_dice_1: 1.251  m2_loss_ce_2: 0.5506  m2_loss_mask_2: 0.1519  m2_loss_dice_2: 1.179  m2_loss_ce_3: 0.4732  m2_loss_mask_3: 0.153  m2_loss_dice_3: 1.149  m2_loss_ce_4: 0.4743  m2_loss_mask_4: 0.1507  m2_loss_dice_4: 1.139  m2_loss_ce_5: 0.4647  m2_loss_mask_5: 0.1461  m2_loss_dice_5: 1.131  m2_loss_ce_6: 0.4294  m2_loss_mask_6: 0.1472  m2_loss_dice_6: 1.106  m2_loss_ce_7: 0.4423  m2_loss_mask_7: 0.148  m2_loss_dice_7: 1.105  m2_loss_ce_8: 0.442  m2_loss_mask_8: 0.146  m2_loss_dice_8: 1.122    time: 1.7396  last_time: 1.7619  data_time: 0.0750  last_data_time: 0.0429   lr: 0.0001  max_mem: 36942M
[10/07 13:24:46] d2.utils.events INFO:  eta: 0:19:38  iter: 319  total_loss: 39.2  m1_loss_ce: 0.4564  m1_loss_mask: 0.1598  m1_loss_dice: 1.22  m1_loss_ce_0: 0.5182  m1_loss_mask_0: 0.1937  m1_loss_dice_0: 1.452  m1_loss_ce_1: 0.5886  m1_loss_mask_1: 0.1757  m1_loss_dice_1: 1.371  m1_loss_ce_2: 0.5497  m1_loss_mask_2: 0.168  m1_loss_dice_2: 1.297  m1_loss_ce_3: 0.4983  m1_loss_mask_3: 0.1606  m1_loss_dice_3: 1.233  m1_loss_ce_4: 0.4699  m1_loss_mask_4: 0.1607  m1_loss_dice_4: 1.265  m1_loss_ce_5: 0.485  m1_loss_mask_5: 0.1587  m1_loss_dice_5: 1.256  m1_loss_ce_6: 0.4427  m1_loss_mask_6: 0.1554  m1_loss_dice_6: 1.271  m1_loss_ce_7: 0.4408  m1_loss_mask_7: 0.1593  m1_loss_dice_7: 1.243  m1_loss_ce_8: 0.4182  m1_loss_mask_8: 0.1575  m1_loss_dice_8: 1.257  m2_loss_ce: 0.4721  m2_loss_mask: 0.1532  m2_loss_dice: 1.23  m2_loss_ce_0: 0.5361  m2_loss_mask_0: 0.1961  m2_loss_dice_0: 1.46  m2_loss_ce_1: 0.6434  m2_loss_mask_1: 0.1679  m2_loss_dice_1: 1.351  m2_loss_ce_2: 0.5807  m2_loss_mask_2: 0.1628  m2_loss_dice_2: 1.332  m2_loss_ce_3: 0.5088  m2_loss_mask_3: 0.1614  m2_loss_dice_3: 1.282  m2_loss_ce_4: 0.4737  m2_loss_mask_4: 0.1542  m2_loss_dice_4: 1.27  m2_loss_ce_5: 0.4919  m2_loss_mask_5: 0.1505  m2_loss_dice_5: 1.213  m2_loss_ce_6: 0.4794  m2_loss_mask_6: 0.1509  m2_loss_dice_6: 1.252  m2_loss_ce_7: 0.4859  m2_loss_mask_7: 0.1497  m2_loss_dice_7: 1.224  m2_loss_ce_8: 0.4897  m2_loss_mask_8: 0.1523  m2_loss_dice_8: 1.244    time: 1.7413  last_time: 1.7012  data_time: 0.0829  last_data_time: 0.0604   lr: 0.0001  max_mem: 36942M
[10/07 13:25:21] d2.utils.events INFO:  eta: 0:19:05  iter: 339  total_loss: 39.51  m1_loss_ce: 0.4499  m1_loss_mask: 0.1541  m1_loss_dice: 1.199  m1_loss_ce_0: 0.5452  m1_loss_mask_0: 0.1799  m1_loss_dice_0: 1.394  m1_loss_ce_1: 0.5964  m1_loss_mask_1: 0.165  m1_loss_dice_1: 1.326  m1_loss_ce_2: 0.5044  m1_loss_mask_2: 0.163  m1_loss_dice_2: 1.314  m1_loss_ce_3: 0.4774  m1_loss_mask_3: 0.1593  m1_loss_dice_3: 1.262  m1_loss_ce_4: 0.4632  m1_loss_mask_4: 0.16  m1_loss_dice_4: 1.229  m1_loss_ce_5: 0.4591  m1_loss_mask_5: 0.1571  m1_loss_dice_5: 1.212  m1_loss_ce_6: 0.4459  m1_loss_mask_6: 0.154  m1_loss_dice_6: 1.182  m1_loss_ce_7: 0.4478  m1_loss_mask_7: 0.1558  m1_loss_dice_7: 1.227  m1_loss_ce_8: 0.4313  m1_loss_mask_8: 0.1559  m1_loss_dice_8: 1.195  m2_loss_ce: 0.469  m2_loss_mask: 0.1513  m2_loss_dice: 1.188  m2_loss_ce_0: 0.5694  m2_loss_mask_0: 0.18  m2_loss_dice_0: 1.455  m2_loss_ce_1: 0.6296  m2_loss_mask_1: 0.1708  m2_loss_dice_1: 1.34  m2_loss_ce_2: 0.5582  m2_loss_mask_2: 0.1609  m2_loss_dice_2: 1.288  m2_loss_ce_3: 0.4881  m2_loss_mask_3: 0.1581  m2_loss_dice_3: 1.268  m2_loss_ce_4: 0.4463  m2_loss_mask_4: 0.1528  m2_loss_dice_4: 1.251  m2_loss_ce_5: 0.4531  m2_loss_mask_5: 0.1528  m2_loss_dice_5: 1.238  m2_loss_ce_6: 0.4693  m2_loss_mask_6: 0.1515  m2_loss_dice_6: 1.223  m2_loss_ce_7: 0.4591  m2_loss_mask_7: 0.1505  m2_loss_dice_7: 1.191  m2_loss_ce_8: 0.4803  m2_loss_mask_8: 0.1532  m2_loss_dice_8: 1.2    time: 1.7423  last_time: 1.7624  data_time: 0.0669  last_data_time: 0.0985   lr: 0.0001  max_mem: 36942M
[10/07 13:25:56] d2.utils.events INFO:  eta: 0:18:31  iter: 359  total_loss: 34.01  m1_loss_ce: 0.4144  m1_loss_mask: 0.1512  m1_loss_dice: 1.086  m1_loss_ce_0: 0.4997  m1_loss_mask_0: 0.1715  m1_loss_dice_0: 1.269  m1_loss_ce_1: 0.5591  m1_loss_mask_1: 0.1583  m1_loss_dice_1: 1.205  m1_loss_ce_2: 0.4717  m1_loss_mask_2: 0.1571  m1_loss_dice_2: 1.129  m1_loss_ce_3: 0.4452  m1_loss_mask_3: 0.1556  m1_loss_dice_3: 1.081  m1_loss_ce_4: 0.4534  m1_loss_mask_4: 0.1533  m1_loss_dice_4: 1.086  m1_loss_ce_5: 0.3861  m1_loss_mask_5: 0.1549  m1_loss_dice_5: 1.11  m1_loss_ce_6: 0.42  m1_loss_mask_6: 0.1514  m1_loss_dice_6: 1.082  m1_loss_ce_7: 0.4213  m1_loss_mask_7: 0.1554  m1_loss_dice_7: 1.07  m1_loss_ce_8: 0.4061  m1_loss_mask_8: 0.1533  m1_loss_dice_8: 1.102  m2_loss_ce: 0.4313  m2_loss_mask: 0.1526  m2_loss_dice: 1.077  m2_loss_ce_0: 0.5303  m2_loss_mask_0: 0.1834  m2_loss_dice_0: 1.273  m2_loss_ce_1: 0.5982  m2_loss_mask_1: 0.1635  m2_loss_dice_1: 1.189  m2_loss_ce_2: 0.5439  m2_loss_mask_2: 0.159  m2_loss_dice_2: 1.137  m2_loss_ce_3: 0.4626  m2_loss_mask_3: 0.1561  m2_loss_dice_3: 1.089  m2_loss_ce_4: 0.4216  m2_loss_mask_4: 0.1552  m2_loss_dice_4: 1.151  m2_loss_ce_5: 0.4353  m2_loss_mask_5: 0.1538  m2_loss_dice_5: 1.106  m2_loss_ce_6: 0.4104  m2_loss_mask_6: 0.1545  m2_loss_dice_6: 1.073  m2_loss_ce_7: 0.3984  m2_loss_mask_7: 0.1536  m2_loss_dice_7: 1.092  m2_loss_ce_8: 0.3993  m2_loss_mask_8: 0.1537  m2_loss_dice_8: 1.067    time: 1.7425  last_time: 1.7032  data_time: 0.0744  last_data_time: 0.0504   lr: 0.0001  max_mem: 36942M
[10/07 13:26:31] d2.utils.events INFO:  eta: 0:17:56  iter: 379  total_loss: 38.23  m1_loss_ce: 0.3908  m1_loss_mask: 0.1505  m1_loss_dice: 1.213  m1_loss_ce_0: 0.5385  m1_loss_mask_0: 0.1702  m1_loss_dice_0: 1.404  m1_loss_ce_1: 0.5449  m1_loss_mask_1: 0.1584  m1_loss_dice_1: 1.306  m1_loss_ce_2: 0.5625  m1_loss_mask_2: 0.1553  m1_loss_dice_2: 1.282  m1_loss_ce_3: 0.4682  m1_loss_mask_3: 0.1516  m1_loss_dice_3: 1.212  m1_loss_ce_4: 0.4773  m1_loss_mask_4: 0.152  m1_loss_dice_4: 1.208  m1_loss_ce_5: 0.4471  m1_loss_mask_5: 0.153  m1_loss_dice_5: 1.183  m1_loss_ce_6: 0.4362  m1_loss_mask_6: 0.1506  m1_loss_dice_6: 1.175  m1_loss_ce_7: 0.4133  m1_loss_mask_7: 0.15  m1_loss_dice_7: 1.17  m1_loss_ce_8: 0.4182  m1_loss_mask_8: 0.152  m1_loss_dice_8: 1.154  m2_loss_ce: 0.443  m2_loss_mask: 0.1498  m2_loss_dice: 1.187  m2_loss_ce_0: 0.5703  m2_loss_mask_0: 0.1721  m2_loss_dice_0: 1.437  m2_loss_ce_1: 0.6198  m2_loss_mask_1: 0.1592  m2_loss_dice_1: 1.361  m2_loss_ce_2: 0.5563  m2_loss_mask_2: 0.1557  m2_loss_dice_2: 1.277  m2_loss_ce_3: 0.4994  m2_loss_mask_3: 0.1546  m2_loss_dice_3: 1.251  m2_loss_ce_4: 0.4861  m2_loss_mask_4: 0.1539  m2_loss_dice_4: 1.232  m2_loss_ce_5: 0.4763  m2_loss_mask_5: 0.1509  m2_loss_dice_5: 1.239  m2_loss_ce_6: 0.4587  m2_loss_mask_6: 0.1503  m2_loss_dice_6: 1.229  m2_loss_ce_7: 0.4517  m2_loss_mask_7: 0.1493  m2_loss_dice_7: 1.217  m2_loss_ce_8: 0.4683  m2_loss_mask_8: 0.1511  m2_loss_dice_8: 1.18    time: 1.7423  last_time: 1.7047  data_time: 0.0730  last_data_time: 0.0584   lr: 0.0001  max_mem: 36942M
[10/07 13:27:06] d2.utils.events INFO:  eta: 0:17:21  iter: 399  total_loss: 36.68  m1_loss_ce: 0.417  m1_loss_mask: 0.1416  m1_loss_dice: 1.16  m1_loss_ce_0: 0.5077  m1_loss_mask_0: 0.1602  m1_loss_dice_0: 1.351  m1_loss_ce_1: 0.573  m1_loss_mask_1: 0.1534  m1_loss_dice_1: 1.291  m1_loss_ce_2: 0.5244  m1_loss_mask_2: 0.1461  m1_loss_dice_2: 1.218  m1_loss_ce_3: 0.4434  m1_loss_mask_3: 0.1441  m1_loss_dice_3: 1.2  m1_loss_ce_4: 0.4378  m1_loss_mask_4: 0.1437  m1_loss_dice_4: 1.183  m1_loss_ce_5: 0.4431  m1_loss_mask_5: 0.1413  m1_loss_dice_5: 1.173  m1_loss_ce_6: 0.409  m1_loss_mask_6: 0.1414  m1_loss_dice_6: 1.165  m1_loss_ce_7: 0.4254  m1_loss_mask_7: 0.1419  m1_loss_dice_7: 1.135  m1_loss_ce_8: 0.415  m1_loss_mask_8: 0.1415  m1_loss_dice_8: 1.172  m2_loss_ce: 0.4652  m2_loss_mask: 0.1378  m2_loss_dice: 1.184  m2_loss_ce_0: 0.5892  m2_loss_mask_0: 0.1694  m2_loss_dice_0: 1.414  m2_loss_ce_1: 0.6361  m2_loss_mask_1: 0.1528  m2_loss_dice_1: 1.288  m2_loss_ce_2: 0.5421  m2_loss_mask_2: 0.1443  m2_loss_dice_2: 1.253  m2_loss_ce_3: 0.488  m2_loss_mask_3: 0.1419  m2_loss_dice_3: 1.21  m2_loss_ce_4: 0.4805  m2_loss_mask_4: 0.1412  m2_loss_dice_4: 1.199  m2_loss_ce_5: 0.4866  m2_loss_mask_5: 0.1403  m2_loss_dice_5: 1.196  m2_loss_ce_6: 0.4571  m2_loss_mask_6: 0.1392  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.465  m2_loss_mask_7: 0.1383  m2_loss_dice_7: 1.19  m2_loss_ce_8: 0.473  m2_loss_mask_8: 0.137  m2_loss_dice_8: 1.181    time: 1.7420  last_time: 1.7255  data_time: 0.0672  last_data_time: 0.0682   lr: 0.0001  max_mem: 36942M
[10/07 13:27:42] d2.utils.events INFO:  eta: 0:16:47  iter: 419  total_loss: 36.56  m1_loss_ce: 0.4007  m1_loss_mask: 0.1569  m1_loss_dice: 1.15  m1_loss_ce_0: 0.5153  m1_loss_mask_0: 0.1829  m1_loss_dice_0: 1.348  m1_loss_ce_1: 0.5823  m1_loss_mask_1: 0.1665  m1_loss_dice_1: 1.294  m1_loss_ce_2: 0.5018  m1_loss_mask_2: 0.1631  m1_loss_dice_2: 1.228  m1_loss_ce_3: 0.4524  m1_loss_mask_3: 0.1611  m1_loss_dice_3: 1.184  m1_loss_ce_4: 0.4247  m1_loss_mask_4: 0.1602  m1_loss_dice_4: 1.186  m1_loss_ce_5: 0.4465  m1_loss_mask_5: 0.1578  m1_loss_dice_5: 1.166  m1_loss_ce_6: 0.4085  m1_loss_mask_6: 0.1595  m1_loss_dice_6: 1.139  m1_loss_ce_7: 0.4106  m1_loss_mask_7: 0.1558  m1_loss_dice_7: 1.141  m1_loss_ce_8: 0.4125  m1_loss_mask_8: 0.1567  m1_loss_dice_8: 1.175  m2_loss_ce: 0.4485  m2_loss_mask: 0.1593  m2_loss_dice: 1.217  m2_loss_ce_0: 0.5229  m2_loss_mask_0: 0.1843  m2_loss_dice_0: 1.401  m2_loss_ce_1: 0.6125  m2_loss_mask_1: 0.168  m2_loss_dice_1: 1.294  m2_loss_ce_2: 0.5447  m2_loss_mask_2: 0.1642  m2_loss_dice_2: 1.27  m2_loss_ce_3: 0.4763  m2_loss_mask_3: 0.1637  m2_loss_dice_3: 1.266  m2_loss_ce_4: 0.4475  m2_loss_mask_4: 0.1608  m2_loss_dice_4: 1.22  m2_loss_ce_5: 0.4503  m2_loss_mask_5: 0.1591  m2_loss_dice_5: 1.212  m2_loss_ce_6: 0.4388  m2_loss_mask_6: 0.1572  m2_loss_dice_6: 1.199  m2_loss_ce_7: 0.4356  m2_loss_mask_7: 0.158  m2_loss_dice_7: 1.196  m2_loss_ce_8: 0.4475  m2_loss_mask_8: 0.1569  m2_loss_dice_8: 1.195    time: 1.7436  last_time: 1.7643  data_time: 0.0734  last_data_time: 0.0686   lr: 0.0001  max_mem: 36942M
[10/07 13:28:17] d2.utils.events INFO:  eta: 0:16:12  iter: 439  total_loss: 35.15  m1_loss_ce: 0.3743  m1_loss_mask: 0.1466  m1_loss_dice: 1.05  m1_loss_ce_0: 0.4995  m1_loss_mask_0: 0.1716  m1_loss_dice_0: 1.265  m1_loss_ce_1: 0.5686  m1_loss_mask_1: 0.1592  m1_loss_dice_1: 1.226  m1_loss_ce_2: 0.4738  m1_loss_mask_2: 0.1504  m1_loss_dice_2: 1.15  m1_loss_ce_3: 0.4329  m1_loss_mask_3: 0.1487  m1_loss_dice_3: 1.137  m1_loss_ce_4: 0.4045  m1_loss_mask_4: 0.151  m1_loss_dice_4: 1.115  m1_loss_ce_5: 0.3932  m1_loss_mask_5: 0.1495  m1_loss_dice_5: 1.105  m1_loss_ce_6: 0.4259  m1_loss_mask_6: 0.147  m1_loss_dice_6: 1.053  m1_loss_ce_7: 0.4093  m1_loss_mask_7: 0.1452  m1_loss_dice_7: 1.07  m1_loss_ce_8: 0.4329  m1_loss_mask_8: 0.1512  m1_loss_dice_8: 1.09  m2_loss_ce: 0.3943  m2_loss_mask: 0.1455  m2_loss_dice: 1.072  m2_loss_ce_0: 0.5436  m2_loss_mask_0: 0.1722  m2_loss_dice_0: 1.275  m2_loss_ce_1: 0.5877  m2_loss_mask_1: 0.1599  m2_loss_dice_1: 1.222  m2_loss_ce_2: 0.563  m2_loss_mask_2: 0.1566  m2_loss_dice_2: 1.188  m2_loss_ce_3: 0.4944  m2_loss_mask_3: 0.1526  m2_loss_dice_3: 1.142  m2_loss_ce_4: 0.4629  m2_loss_mask_4: 0.1476  m2_loss_dice_4: 1.147  m2_loss_ce_5: 0.4668  m2_loss_mask_5: 0.1481  m2_loss_dice_5: 1.137  m2_loss_ce_6: 0.4387  m2_loss_mask_6: 0.1473  m2_loss_dice_6: 1.113  m2_loss_ce_7: 0.4196  m2_loss_mask_7: 0.145  m2_loss_dice_7: 1.124  m2_loss_ce_8: 0.4423  m2_loss_mask_8: 0.1457  m2_loss_dice_8: 1.119    time: 1.7439  last_time: 1.7283  data_time: 0.0698  last_data_time: 0.0904   lr: 0.0001  max_mem: 36942M
[10/07 13:28:52] d2.utils.events INFO:  eta: 0:15:38  iter: 459  total_loss: 37.34  m1_loss_ce: 0.4377  m1_loss_mask: 0.1587  m1_loss_dice: 1.113  m1_loss_ce_0: 0.5242  m1_loss_mask_0: 0.1903  m1_loss_dice_0: 1.338  m1_loss_ce_1: 0.554  m1_loss_mask_1: 0.1716  m1_loss_dice_1: 1.256  m1_loss_ce_2: 0.478  m1_loss_mask_2: 0.1721  m1_loss_dice_2: 1.201  m1_loss_ce_3: 0.4259  m1_loss_mask_3: 0.1663  m1_loss_dice_3: 1.186  m1_loss_ce_4: 0.4188  m1_loss_mask_4: 0.1639  m1_loss_dice_4: 1.158  m1_loss_ce_5: 0.4379  m1_loss_mask_5: 0.1592  m1_loss_dice_5: 1.166  m1_loss_ce_6: 0.39  m1_loss_mask_6: 0.1592  m1_loss_dice_6: 1.13  m1_loss_ce_7: 0.4092  m1_loss_mask_7: 0.1594  m1_loss_dice_7: 1.146  m1_loss_ce_8: 0.4077  m1_loss_mask_8: 0.1611  m1_loss_dice_8: 1.137  m2_loss_ce: 0.4246  m2_loss_mask: 0.1639  m2_loss_dice: 1.163  m2_loss_ce_0: 0.5611  m2_loss_mask_0: 0.1932  m2_loss_dice_0: 1.398  m2_loss_ce_1: 0.596  m2_loss_mask_1: 0.1782  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.5149  m2_loss_mask_2: 0.1764  m2_loss_dice_2: 1.251  m2_loss_ce_3: 0.4507  m2_loss_mask_3: 0.1745  m2_loss_dice_3: 1.242  m2_loss_ce_4: 0.4541  m2_loss_mask_4: 0.169  m2_loss_dice_4: 1.23  m2_loss_ce_5: 0.4463  m2_loss_mask_5: 0.1714  m2_loss_dice_5: 1.226  m2_loss_ce_6: 0.4395  m2_loss_mask_6: 0.1671  m2_loss_dice_6: 1.176  m2_loss_ce_7: 0.4392  m2_loss_mask_7: 0.1644  m2_loss_dice_7: 1.169  m2_loss_ce_8: 0.4345  m2_loss_mask_8: 0.164  m2_loss_dice_8: 1.164    time: 1.7445  last_time: 1.7597  data_time: 0.0713  last_data_time: 0.0783   lr: 0.0001  max_mem: 36942M
[10/07 13:29:28] d2.utils.events INFO:  eta: 0:15:04  iter: 479  total_loss: 38.85  m1_loss_ce: 0.432  m1_loss_mask: 0.1492  m1_loss_dice: 1.182  m1_loss_ce_0: 0.5301  m1_loss_mask_0: 0.1677  m1_loss_dice_0: 1.342  m1_loss_ce_1: 0.573  m1_loss_mask_1: 0.1565  m1_loss_dice_1: 1.298  m1_loss_ce_2: 0.5148  m1_loss_mask_2: 0.1511  m1_loss_dice_2: 1.242  m1_loss_ce_3: 0.4766  m1_loss_mask_3: 0.1499  m1_loss_dice_3: 1.202  m1_loss_ce_4: 0.4306  m1_loss_mask_4: 0.1491  m1_loss_dice_4: 1.2  m1_loss_ce_5: 0.425  m1_loss_mask_5: 0.1473  m1_loss_dice_5: 1.173  m1_loss_ce_6: 0.4223  m1_loss_mask_6: 0.1484  m1_loss_dice_6: 1.187  m1_loss_ce_7: 0.4188  m1_loss_mask_7: 0.1484  m1_loss_dice_7: 1.146  m1_loss_ce_8: 0.4189  m1_loss_mask_8: 0.1469  m1_loss_dice_8: 1.167  m2_loss_ce: 0.4649  m2_loss_mask: 0.1476  m2_loss_dice: 1.187  m2_loss_ce_0: 0.5788  m2_loss_mask_0: 0.1754  m2_loss_dice_0: 1.39  m2_loss_ce_1: 0.6166  m2_loss_mask_1: 0.1609  m2_loss_dice_1: 1.373  m2_loss_ce_2: 0.5877  m2_loss_mask_2: 0.1549  m2_loss_dice_2: 1.274  m2_loss_ce_3: 0.5143  m2_loss_mask_3: 0.1519  m2_loss_dice_3: 1.239  m2_loss_ce_4: 0.4932  m2_loss_mask_4: 0.149  m2_loss_dice_4: 1.246  m2_loss_ce_5: 0.4831  m2_loss_mask_5: 0.1458  m2_loss_dice_5: 1.227  m2_loss_ce_6: 0.4547  m2_loss_mask_6: 0.1458  m2_loss_dice_6: 1.218  m2_loss_ce_7: 0.4605  m2_loss_mask_7: 0.1444  m2_loss_dice_7: 1.196  m2_loss_ce_8: 0.47  m2_loss_mask_8: 0.1434  m2_loss_dice_8: 1.206    time: 1.7457  last_time: 1.7247  data_time: 0.0797  last_data_time: 0.0617   lr: 0.0001  max_mem: 36942M
[10/07 13:30:03] d2.utils.events INFO:  eta: 0:14:29  iter: 499  total_loss: 34.43  m1_loss_ce: 0.3805  m1_loss_mask: 0.1564  m1_loss_dice: 1.062  m1_loss_ce_0: 0.4747  m1_loss_mask_0: 0.1715  m1_loss_dice_0: 1.258  m1_loss_ce_1: 0.536  m1_loss_mask_1: 0.1592  m1_loss_dice_1: 1.199  m1_loss_ce_2: 0.479  m1_loss_mask_2: 0.1595  m1_loss_dice_2: 1.132  m1_loss_ce_3: 0.4244  m1_loss_mask_3: 0.1571  m1_loss_dice_3: 1.095  m1_loss_ce_4: 0.3974  m1_loss_mask_4: 0.1538  m1_loss_dice_4: 1.071  m1_loss_ce_5: 0.3922  m1_loss_mask_5: 0.1582  m1_loss_dice_5: 1.065  m1_loss_ce_6: 0.3928  m1_loss_mask_6: 0.1587  m1_loss_dice_6: 1.101  m1_loss_ce_7: 0.3862  m1_loss_mask_7: 0.1572  m1_loss_dice_7: 1.066  m1_loss_ce_8: 0.3684  m1_loss_mask_8: 0.1567  m1_loss_dice_8: 1.102  m2_loss_ce: 0.4016  m2_loss_mask: 0.1515  m2_loss_dice: 1.12  m2_loss_ce_0: 0.5047  m2_loss_mask_0: 0.1805  m2_loss_dice_0: 1.257  m2_loss_ce_1: 0.5832  m2_loss_mask_1: 0.1655  m2_loss_dice_1: 1.228  m2_loss_ce_2: 0.5146  m2_loss_mask_2: 0.1571  m2_loss_dice_2: 1.166  m2_loss_ce_3: 0.4459  m2_loss_mask_3: 0.1572  m2_loss_dice_3: 1.128  m2_loss_ce_4: 0.4389  m2_loss_mask_4: 0.1548  m2_loss_dice_4: 1.136  m2_loss_ce_5: 0.4123  m2_loss_mask_5: 0.1544  m2_loss_dice_5: 1.17  m2_loss_ce_6: 0.4192  m2_loss_mask_6: 0.1516  m2_loss_dice_6: 1.116  m2_loss_ce_7: 0.4379  m2_loss_mask_7: 0.1498  m2_loss_dice_7: 1.096  m2_loss_ce_8: 0.446  m2_loss_mask_8: 0.1497  m2_loss_dice_8: 1.111    time: 1.7459  last_time: 1.7217  data_time: 0.0726  last_data_time: 0.0521   lr: 0.0001  max_mem: 36942M
[10/07 13:30:38] d2.utils.events INFO:  eta: 0:13:54  iter: 519  total_loss: 35.35  m1_loss_ce: 0.3979  m1_loss_mask: 0.1482  m1_loss_dice: 1.071  m1_loss_ce_0: 0.5042  m1_loss_mask_0: 0.1699  m1_loss_dice_0: 1.259  m1_loss_ce_1: 0.5551  m1_loss_mask_1: 0.1497  m1_loss_dice_1: 1.196  m1_loss_ce_2: 0.5071  m1_loss_mask_2: 0.1508  m1_loss_dice_2: 1.156  m1_loss_ce_3: 0.435  m1_loss_mask_3: 0.1491  m1_loss_dice_3: 1.1  m1_loss_ce_4: 0.438  m1_loss_mask_4: 0.1478  m1_loss_dice_4: 1.098  m1_loss_ce_5: 0.4202  m1_loss_mask_5: 0.149  m1_loss_dice_5: 1.1  m1_loss_ce_6: 0.4101  m1_loss_mask_6: 0.1477  m1_loss_dice_6: 1.061  m1_loss_ce_7: 0.411  m1_loss_mask_7: 0.1472  m1_loss_dice_7: 1.08  m1_loss_ce_8: 0.3985  m1_loss_mask_8: 0.1465  m1_loss_dice_8: 1.08  m2_loss_ce: 0.4657  m2_loss_mask: 0.1438  m2_loss_dice: 1.091  m2_loss_ce_0: 0.5594  m2_loss_mask_0: 0.1805  m2_loss_dice_0: 1.265  m2_loss_ce_1: 0.5955  m2_loss_mask_1: 0.1581  m2_loss_dice_1: 1.155  m2_loss_ce_2: 0.5291  m2_loss_mask_2: 0.1525  m2_loss_dice_2: 1.123  m2_loss_ce_3: 0.5011  m2_loss_mask_3: 0.1526  m2_loss_dice_3: 1.124  m2_loss_ce_4: 0.4349  m2_loss_mask_4: 0.1483  m2_loss_dice_4: 1.11  m2_loss_ce_5: 0.4358  m2_loss_mask_5: 0.1459  m2_loss_dice_5: 1.131  m2_loss_ce_6: 0.4534  m2_loss_mask_6: 0.1467  m2_loss_dice_6: 1.134  m2_loss_ce_7: 0.4765  m2_loss_mask_7: 0.1447  m2_loss_dice_7: 1.079  m2_loss_ce_8: 0.4383  m2_loss_mask_8: 0.1427  m2_loss_dice_8: 1.09    time: 1.7457  last_time: 1.7749  data_time: 0.0613  last_data_time: 0.0682   lr: 0.0001  max_mem: 36942M
[10/07 13:31:12] d2.utils.events INFO:  eta: 0:13:19  iter: 539  total_loss: 37.03  m1_loss_ce: 0.4301  m1_loss_mask: 0.1627  m1_loss_dice: 1.139  m1_loss_ce_0: 0.5292  m1_loss_mask_0: 0.1833  m1_loss_dice_0: 1.339  m1_loss_ce_1: 0.5853  m1_loss_mask_1: 0.1749  m1_loss_dice_1: 1.292  m1_loss_ce_2: 0.5075  m1_loss_mask_2: 0.1663  m1_loss_dice_2: 1.228  m1_loss_ce_3: 0.4605  m1_loss_mask_3: 0.1688  m1_loss_dice_3: 1.164  m1_loss_ce_4: 0.4404  m1_loss_mask_4: 0.1648  m1_loss_dice_4: 1.148  m1_loss_ce_5: 0.4466  m1_loss_mask_5: 0.1595  m1_loss_dice_5: 1.142  m1_loss_ce_6: 0.4249  m1_loss_mask_6: 0.1639  m1_loss_dice_6: 1.134  m1_loss_ce_7: 0.412  m1_loss_mask_7: 0.1619  m1_loss_dice_7: 1.12  m1_loss_ce_8: 0.4054  m1_loss_mask_8: 0.1628  m1_loss_dice_8: 1.147  m2_loss_ce: 0.454  m2_loss_mask: 0.1734  m2_loss_dice: 1.146  m2_loss_ce_0: 0.5351  m2_loss_mask_0: 0.2019  m2_loss_dice_0: 1.398  m2_loss_ce_1: 0.6028  m2_loss_mask_1: 0.184  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.5374  m2_loss_mask_2: 0.1782  m2_loss_dice_2: 1.236  m2_loss_ce_3: 0.5063  m2_loss_mask_3: 0.1774  m2_loss_dice_3: 1.183  m2_loss_ce_4: 0.4693  m2_loss_mask_4: 0.1752  m2_loss_dice_4: 1.195  m2_loss_ce_5: 0.47  m2_loss_mask_5: 0.1743  m2_loss_dice_5: 1.187  m2_loss_ce_6: 0.4247  m2_loss_mask_6: 0.1747  m2_loss_dice_6: 1.174  m2_loss_ce_7: 0.4519  m2_loss_mask_7: 0.1735  m2_loss_dice_7: 1.158  m2_loss_ce_8: 0.4349  m2_loss_mask_8: 0.1729  m2_loss_dice_8: 1.157    time: 1.7448  last_time: 1.7691  data_time: 0.0614  last_data_time: 0.0545   lr: 0.0001  max_mem: 36942M
[10/07 13:31:48] d2.utils.events INFO:  eta: 0:12:44  iter: 559  total_loss: 37.86  m1_loss_ce: 0.4365  m1_loss_mask: 0.1454  m1_loss_dice: 1.134  m1_loss_ce_0: 0.558  m1_loss_mask_0: 0.1628  m1_loss_dice_0: 1.357  m1_loss_ce_1: 0.5937  m1_loss_mask_1: 0.1554  m1_loss_dice_1: 1.283  m1_loss_ce_2: 0.5492  m1_loss_mask_2: 0.1503  m1_loss_dice_2: 1.205  m1_loss_ce_3: 0.468  m1_loss_mask_3: 0.1493  m1_loss_dice_3: 1.169  m1_loss_ce_4: 0.4328  m1_loss_mask_4: 0.1473  m1_loss_dice_4: 1.155  m1_loss_ce_5: 0.4501  m1_loss_mask_5: 0.1465  m1_loss_dice_5: 1.175  m1_loss_ce_6: 0.4603  m1_loss_mask_6: 0.1467  m1_loss_dice_6: 1.189  m1_loss_ce_7: 0.4502  m1_loss_mask_7: 0.1467  m1_loss_dice_7: 1.156  m1_loss_ce_8: 0.4294  m1_loss_mask_8: 0.1464  m1_loss_dice_8: 1.156  m2_loss_ce: 0.4991  m2_loss_mask: 0.1463  m2_loss_dice: 1.191  m2_loss_ce_0: 0.6041  m2_loss_mask_0: 0.1713  m2_loss_dice_0: 1.399  m2_loss_ce_1: 0.6846  m2_loss_mask_1: 0.1563  m2_loss_dice_1: 1.313  m2_loss_ce_2: 0.5795  m2_loss_mask_2: 0.1559  m2_loss_dice_2: 1.233  m2_loss_ce_3: 0.5386  m2_loss_mask_3: 0.1513  m2_loss_dice_3: 1.189  m2_loss_ce_4: 0.4963  m2_loss_mask_4: 0.1497  m2_loss_dice_4: 1.194  m2_loss_ce_5: 0.5037  m2_loss_mask_5: 0.1481  m2_loss_dice_5: 1.215  m2_loss_ce_6: 0.4716  m2_loss_mask_6: 0.146  m2_loss_dice_6: 1.169  m2_loss_ce_7: 0.4504  m2_loss_mask_7: 0.1457  m2_loss_dice_7: 1.184  m2_loss_ce_8: 0.4678  m2_loss_mask_8: 0.1463  m2_loss_dice_8: 1.194    time: 1.7457  last_time: 1.7331  data_time: 0.0650  last_data_time: 0.0531   lr: 0.0001  max_mem: 36942M
[10/07 13:32:23] d2.utils.events INFO:  eta: 0:12:10  iter: 579  total_loss: 38.65  m1_loss_ce: 0.3948  m1_loss_mask: 0.1509  m1_loss_dice: 1.157  m1_loss_ce_0: 0.5276  m1_loss_mask_0: 0.1732  m1_loss_dice_0: 1.355  m1_loss_ce_1: 0.5954  m1_loss_mask_1: 0.159  m1_loss_dice_1: 1.323  m1_loss_ce_2: 0.5648  m1_loss_mask_2: 0.1507  m1_loss_dice_2: 1.255  m1_loss_ce_3: 0.4995  m1_loss_mask_3: 0.1512  m1_loss_dice_3: 1.201  m1_loss_ce_4: 0.4302  m1_loss_mask_4: 0.1533  m1_loss_dice_4: 1.188  m1_loss_ce_5: 0.4645  m1_loss_mask_5: 0.1492  m1_loss_dice_5: 1.166  m1_loss_ce_6: 0.4377  m1_loss_mask_6: 0.1504  m1_loss_dice_6: 1.14  m1_loss_ce_7: 0.4349  m1_loss_mask_7: 0.1529  m1_loss_dice_7: 1.166  m1_loss_ce_8: 0.4192  m1_loss_mask_8: 0.1513  m1_loss_dice_8: 1.183  m2_loss_ce: 0.4791  m2_loss_mask: 0.1553  m2_loss_dice: 1.214  m2_loss_ce_0: 0.6108  m2_loss_mask_0: 0.1789  m2_loss_dice_0: 1.4  m2_loss_ce_1: 0.6445  m2_loss_mask_1: 0.1657  m2_loss_dice_1: 1.324  m2_loss_ce_2: 0.5886  m2_loss_mask_2: 0.1617  m2_loss_dice_2: 1.25  m2_loss_ce_3: 0.5436  m2_loss_mask_3: 0.159  m2_loss_dice_3: 1.238  m2_loss_ce_4: 0.4987  m2_loss_mask_4: 0.1577  m2_loss_dice_4: 1.192  m2_loss_ce_5: 0.5157  m2_loss_mask_5: 0.1567  m2_loss_dice_5: 1.197  m2_loss_ce_6: 0.4858  m2_loss_mask_6: 0.1566  m2_loss_dice_6: 1.204  m2_loss_ce_7: 0.474  m2_loss_mask_7: 0.1582  m2_loss_dice_7: 1.208  m2_loss_ce_8: 0.4723  m2_loss_mask_8: 0.1552  m2_loss_dice_8: 1.184    time: 1.7455  last_time: 1.7434  data_time: 0.0632  last_data_time: 0.0459   lr: 0.0001  max_mem: 36942M
[10/07 13:32:58] d2.utils.events INFO:  eta: 0:11:35  iter: 599  total_loss: 36.72  m1_loss_ce: 0.4032  m1_loss_mask: 0.1612  m1_loss_dice: 1.17  m1_loss_ce_0: 0.5323  m1_loss_mask_0: 0.1864  m1_loss_dice_0: 1.391  m1_loss_ce_1: 0.5707  m1_loss_mask_1: 0.1718  m1_loss_dice_1: 1.273  m1_loss_ce_2: 0.5445  m1_loss_mask_2: 0.1574  m1_loss_dice_2: 1.256  m1_loss_ce_3: 0.486  m1_loss_mask_3: 0.1588  m1_loss_dice_3: 1.182  m1_loss_ce_4: 0.4456  m1_loss_mask_4: 0.1562  m1_loss_dice_4: 1.188  m1_loss_ce_5: 0.4296  m1_loss_mask_5: 0.1547  m1_loss_dice_5: 1.176  m1_loss_ce_6: 0.409  m1_loss_mask_6: 0.1569  m1_loss_dice_6: 1.168  m1_loss_ce_7: 0.4196  m1_loss_mask_7: 0.1608  m1_loss_dice_7: 1.185  m1_loss_ce_8: 0.429  m1_loss_mask_8: 0.1617  m1_loss_dice_8: 1.154  m2_loss_ce: 0.4357  m2_loss_mask: 0.1581  m2_loss_dice: 1.178  m2_loss_ce_0: 0.5534  m2_loss_mask_0: 0.1848  m2_loss_dice_0: 1.396  m2_loss_ce_1: 0.6142  m2_loss_mask_1: 0.1706  m2_loss_dice_1: 1.309  m2_loss_ce_2: 0.5518  m2_loss_mask_2: 0.1628  m2_loss_dice_2: 1.268  m2_loss_ce_3: 0.4901  m2_loss_mask_3: 0.1624  m2_loss_dice_3: 1.24  m2_loss_ce_4: 0.4505  m2_loss_mask_4: 0.1559  m2_loss_dice_4: 1.213  m2_loss_ce_5: 0.4728  m2_loss_mask_5: 0.1557  m2_loss_dice_5: 1.254  m2_loss_ce_6: 0.4443  m2_loss_mask_6: 0.1555  m2_loss_dice_6: 1.222  m2_loss_ce_7: 0.4477  m2_loss_mask_7: 0.1541  m2_loss_dice_7: 1.196  m2_loss_ce_8: 0.4539  m2_loss_mask_8: 0.1547  m2_loss_dice_8: 1.238    time: 1.7461  last_time: 1.7838  data_time: 0.0760  last_data_time: 0.0782   lr: 0.0001  max_mem: 36942M
[10/07 13:33:33] d2.utils.events INFO:  eta: 0:11:00  iter: 619  total_loss: 37.56  m1_loss_ce: 0.4095  m1_loss_mask: 0.1391  m1_loss_dice: 1.158  m1_loss_ce_0: 0.5156  m1_loss_mask_0: 0.1613  m1_loss_dice_0: 1.347  m1_loss_ce_1: 0.5787  m1_loss_mask_1: 0.1474  m1_loss_dice_1: 1.306  m1_loss_ce_2: 0.527  m1_loss_mask_2: 0.1413  m1_loss_dice_2: 1.232  m1_loss_ce_3: 0.4703  m1_loss_mask_3: 0.1422  m1_loss_dice_3: 1.181  m1_loss_ce_4: 0.4441  m1_loss_mask_4: 0.1414  m1_loss_dice_4: 1.185  m1_loss_ce_5: 0.4263  m1_loss_mask_5: 0.1388  m1_loss_dice_5: 1.177  m1_loss_ce_6: 0.4066  m1_loss_mask_6: 0.1391  m1_loss_dice_6: 1.158  m1_loss_ce_7: 0.4009  m1_loss_mask_7: 0.1387  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.4005  m1_loss_mask_8: 0.138  m1_loss_dice_8: 1.179  m2_loss_ce: 0.4702  m2_loss_mask: 0.1438  m2_loss_dice: 1.195  m2_loss_ce_0: 0.5894  m2_loss_mask_0: 0.1772  m2_loss_dice_0: 1.398  m2_loss_ce_1: 0.6207  m2_loss_mask_1: 0.1593  m2_loss_dice_1: 1.355  m2_loss_ce_2: 0.5656  m2_loss_mask_2: 0.1497  m2_loss_dice_2: 1.253  m2_loss_ce_3: 0.4852  m2_loss_mask_3: 0.1493  m2_loss_dice_3: 1.244  m2_loss_ce_4: 0.4586  m2_loss_mask_4: 0.1453  m2_loss_dice_4: 1.212  m2_loss_ce_5: 0.449  m2_loss_mask_5: 0.1446  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.4435  m2_loss_mask_6: 0.1441  m2_loss_dice_6: 1.19  m2_loss_ce_7: 0.4668  m2_loss_mask_7: 0.1429  m2_loss_dice_7: 1.198  m2_loss_ce_8: 0.4761  m2_loss_mask_8: 0.1426  m2_loss_dice_8: 1.201    time: 1.7454  last_time: 1.8314  data_time: 0.0658  last_data_time: 0.1277   lr: 0.0001  max_mem: 36942M
[10/07 13:34:07] d2.utils.events INFO:  eta: 0:10:25  iter: 639  total_loss: 37.08  m1_loss_ce: 0.4213  m1_loss_mask: 0.1476  m1_loss_dice: 1.147  m1_loss_ce_0: 0.5384  m1_loss_mask_0: 0.1714  m1_loss_dice_0: 1.314  m1_loss_ce_1: 0.5732  m1_loss_mask_1: 0.1582  m1_loss_dice_1: 1.288  m1_loss_ce_2: 0.5118  m1_loss_mask_2: 0.1502  m1_loss_dice_2: 1.194  m1_loss_ce_3: 0.4705  m1_loss_mask_3: 0.1481  m1_loss_dice_3: 1.195  m1_loss_ce_4: 0.4051  m1_loss_mask_4: 0.1469  m1_loss_dice_4: 1.156  m1_loss_ce_5: 0.4363  m1_loss_mask_5: 0.145  m1_loss_dice_5: 1.188  m1_loss_ce_6: 0.4154  m1_loss_mask_6: 0.1477  m1_loss_dice_6: 1.154  m1_loss_ce_7: 0.3931  m1_loss_mask_7: 0.1457  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.4025  m1_loss_mask_8: 0.1459  m1_loss_dice_8: 1.143  m2_loss_ce: 0.4688  m2_loss_mask: 0.1512  m2_loss_dice: 1.134  m2_loss_ce_0: 0.5533  m2_loss_mask_0: 0.1709  m2_loss_dice_0: 1.378  m2_loss_ce_1: 0.6287  m2_loss_mask_1: 0.1612  m2_loss_dice_1: 1.287  m2_loss_ce_2: 0.5541  m2_loss_mask_2: 0.1532  m2_loss_dice_2: 1.293  m2_loss_ce_3: 0.4511  m2_loss_mask_3: 0.1525  m2_loss_dice_3: 1.207  m2_loss_ce_4: 0.4692  m2_loss_mask_4: 0.1501  m2_loss_dice_4: 1.218  m2_loss_ce_5: 0.4491  m2_loss_mask_5: 0.1502  m2_loss_dice_5: 1.195  m2_loss_ce_6: 0.4302  m2_loss_mask_6: 0.1496  m2_loss_dice_6: 1.2  m2_loss_ce_7: 0.478  m2_loss_mask_7: 0.1506  m2_loss_dice_7: 1.195  m2_loss_ce_8: 0.4429  m2_loss_mask_8: 0.1508  m2_loss_dice_8: 1.194    time: 1.7443  last_time: 1.8030  data_time: 0.0552  last_data_time: 0.0505   lr: 0.0001  max_mem: 36942M
[10/07 13:34:41] d2.utils.events INFO:  eta: 0:09:50  iter: 659  total_loss: 34.71  m1_loss_ce: 0.3959  m1_loss_mask: 0.1602  m1_loss_dice: 1.072  m1_loss_ce_0: 0.4827  m1_loss_mask_0: 0.1837  m1_loss_dice_0: 1.223  m1_loss_ce_1: 0.5251  m1_loss_mask_1: 0.1713  m1_loss_dice_1: 1.198  m1_loss_ce_2: 0.4749  m1_loss_mask_2: 0.1652  m1_loss_dice_2: 1.125  m1_loss_ce_3: 0.4356  m1_loss_mask_3: 0.1683  m1_loss_dice_3: 1.097  m1_loss_ce_4: 0.4315  m1_loss_mask_4: 0.1643  m1_loss_dice_4: 1.07  m1_loss_ce_5: 0.4252  m1_loss_mask_5: 0.1615  m1_loss_dice_5: 1.063  m1_loss_ce_6: 0.4127  m1_loss_mask_6: 0.1611  m1_loss_dice_6: 1.055  m1_loss_ce_7: 0.4191  m1_loss_mask_7: 0.1591  m1_loss_dice_7: 1.05  m1_loss_ce_8: 0.3962  m1_loss_mask_8: 0.1578  m1_loss_dice_8: 1.014  m2_loss_ce: 0.4299  m2_loss_mask: 0.1575  m2_loss_dice: 1.093  m2_loss_ce_0: 0.5346  m2_loss_mask_0: 0.1932  m2_loss_dice_0: 1.262  m2_loss_ce_1: 0.6109  m2_loss_mask_1: 0.1808  m2_loss_dice_1: 1.22  m2_loss_ce_2: 0.5198  m2_loss_mask_2: 0.1709  m2_loss_dice_2: 1.134  m2_loss_ce_3: 0.4458  m2_loss_mask_3: 0.1704  m2_loss_dice_3: 1.123  m2_loss_ce_4: 0.4381  m2_loss_mask_4: 0.1654  m2_loss_dice_4: 1.084  m2_loss_ce_5: 0.425  m2_loss_mask_5: 0.1632  m2_loss_dice_5: 1.078  m2_loss_ce_6: 0.4533  m2_loss_mask_6: 0.1601  m2_loss_dice_6: 1.091  m2_loss_ce_7: 0.4454  m2_loss_mask_7: 0.1588  m2_loss_dice_7: 1.085  m2_loss_ce_8: 0.4146  m2_loss_mask_8: 0.1592  m2_loss_dice_8: 1.085    time: 1.7426  last_time: 1.7332  data_time: 0.0525  last_data_time: 0.0446   lr: 0.0001  max_mem: 36942M
[10/07 13:35:16] d2.utils.events INFO:  eta: 0:09:15  iter: 679  total_loss: 37.24  m1_loss_ce: 0.4162  m1_loss_mask: 0.1487  m1_loss_dice: 1.209  m1_loss_ce_0: 0.4688  m1_loss_mask_0: 0.1736  m1_loss_dice_0: 1.383  m1_loss_ce_1: 0.5764  m1_loss_mask_1: 0.1483  m1_loss_dice_1: 1.283  m1_loss_ce_2: 0.5189  m1_loss_mask_2: 0.1456  m1_loss_dice_2: 1.219  m1_loss_ce_3: 0.4643  m1_loss_mask_3: 0.1503  m1_loss_dice_3: 1.159  m1_loss_ce_4: 0.4341  m1_loss_mask_4: 0.1499  m1_loss_dice_4: 1.168  m1_loss_ce_5: 0.419  m1_loss_mask_5: 0.1483  m1_loss_dice_5: 1.182  m1_loss_ce_6: 0.3976  m1_loss_mask_6: 0.1504  m1_loss_dice_6: 1.149  m1_loss_ce_7: 0.4472  m1_loss_mask_7: 0.1471  m1_loss_dice_7: 1.137  m1_loss_ce_8: 0.4131  m1_loss_mask_8: 0.1497  m1_loss_dice_8: 1.159  m2_loss_ce: 0.4872  m2_loss_mask: 0.1456  m2_loss_dice: 1.169  m2_loss_ce_0: 0.5612  m2_loss_mask_0: 0.1708  m2_loss_dice_0: 1.365  m2_loss_ce_1: 0.6196  m2_loss_mask_1: 0.1547  m2_loss_dice_1: 1.3  m2_loss_ce_2: 0.5759  m2_loss_mask_2: 0.1534  m2_loss_dice_2: 1.251  m2_loss_ce_3: 0.5177  m2_loss_mask_3: 0.1477  m2_loss_dice_3: 1.155  m2_loss_ce_4: 0.4794  m2_loss_mask_4: 0.1447  m2_loss_dice_4: 1.209  m2_loss_ce_5: 0.5046  m2_loss_mask_5: 0.1463  m2_loss_dice_5: 1.178  m2_loss_ce_6: 0.4893  m2_loss_mask_6: 0.1477  m2_loss_dice_6: 1.181  m2_loss_ce_7: 0.4864  m2_loss_mask_7: 0.1452  m2_loss_dice_7: 1.184  m2_loss_ce_8: 0.4972  m2_loss_mask_8: 0.1466  m2_loss_dice_8: 1.157    time: 1.7422  last_time: 1.8457  data_time: 0.0611  last_data_time: 0.0421   lr: 0.0001  max_mem: 36942M
[10/07 13:35:50] d2.utils.events INFO:  eta: 0:08:40  iter: 699  total_loss: 36.7  m1_loss_ce: 0.4159  m1_loss_mask: 0.1509  m1_loss_dice: 1.131  m1_loss_ce_0: 0.5377  m1_loss_mask_0: 0.1703  m1_loss_dice_0: 1.345  m1_loss_ce_1: 0.5755  m1_loss_mask_1: 0.1604  m1_loss_dice_1: 1.199  m1_loss_ce_2: 0.5471  m1_loss_mask_2: 0.1536  m1_loss_dice_2: 1.177  m1_loss_ce_3: 0.4813  m1_loss_mask_3: 0.1521  m1_loss_dice_3: 1.13  m1_loss_ce_4: 0.4655  m1_loss_mask_4: 0.1545  m1_loss_dice_4: 1.14  m1_loss_ce_5: 0.4392  m1_loss_mask_5: 0.1538  m1_loss_dice_5: 1.163  m1_loss_ce_6: 0.4355  m1_loss_mask_6: 0.1535  m1_loss_dice_6: 1.14  m1_loss_ce_7: 0.4319  m1_loss_mask_7: 0.1572  m1_loss_dice_7: 1.128  m1_loss_ce_8: 0.4429  m1_loss_mask_8: 0.1527  m1_loss_dice_8: 1.124  m2_loss_ce: 0.4777  m2_loss_mask: 0.1525  m2_loss_dice: 1.163  m2_loss_ce_0: 0.5499  m2_loss_mask_0: 0.1785  m2_loss_dice_0: 1.37  m2_loss_ce_1: 0.6037  m2_loss_mask_1: 0.167  m2_loss_dice_1: 1.262  m2_loss_ce_2: 0.5665  m2_loss_mask_2: 0.1649  m2_loss_dice_2: 1.237  m2_loss_ce_3: 0.4986  m2_loss_mask_3: 0.1566  m2_loss_dice_3: 1.197  m2_loss_ce_4: 0.4752  m2_loss_mask_4: 0.1548  m2_loss_dice_4: 1.203  m2_loss_ce_5: 0.4886  m2_loss_mask_5: 0.152  m2_loss_dice_5: 1.187  m2_loss_ce_6: 0.4538  m2_loss_mask_6: 0.1539  m2_loss_dice_6: 1.181  m2_loss_ce_7: 0.5043  m2_loss_mask_7: 0.1535  m2_loss_dice_7: 1.172  m2_loss_ce_8: 0.4774  m2_loss_mask_8: 0.1526  m2_loss_dice_8: 1.202    time: 1.7413  last_time: 1.6898  data_time: 0.0559  last_data_time: 0.0487   lr: 0.0001  max_mem: 36942M
[10/07 13:36:24] d2.utils.events INFO:  eta: 0:08:05  iter: 719  total_loss: 35.28  m1_loss_ce: 0.3861  m1_loss_mask: 0.1686  m1_loss_dice: 1.084  m1_loss_ce_0: 0.5079  m1_loss_mask_0: 0.1851  m1_loss_dice_0: 1.25  m1_loss_ce_1: 0.5306  m1_loss_mask_1: 0.1724  m1_loss_dice_1: 1.187  m1_loss_ce_2: 0.4711  m1_loss_mask_2: 0.1669  m1_loss_dice_2: 1.134  m1_loss_ce_3: 0.4378  m1_loss_mask_3: 0.1686  m1_loss_dice_3: 1.108  m1_loss_ce_4: 0.4303  m1_loss_mask_4: 0.1684  m1_loss_dice_4: 1.096  m1_loss_ce_5: 0.3871  m1_loss_mask_5: 0.1673  m1_loss_dice_5: 1.07  m1_loss_ce_6: 0.3974  m1_loss_mask_6: 0.1685  m1_loss_dice_6: 1.068  m1_loss_ce_7: 0.3614  m1_loss_mask_7: 0.1665  m1_loss_dice_7: 1.097  m1_loss_ce_8: 0.3913  m1_loss_mask_8: 0.1685  m1_loss_dice_8: 1.081  m2_loss_ce: 0.4056  m2_loss_mask: 0.1647  m2_loss_dice: 1.067  m2_loss_ce_0: 0.5741  m2_loss_mask_0: 0.1927  m2_loss_dice_0: 1.277  m2_loss_ce_1: 0.63  m2_loss_mask_1: 0.1727  m2_loss_dice_1: 1.228  m2_loss_ce_2: 0.5454  m2_loss_mask_2: 0.1699  m2_loss_dice_2: 1.164  m2_loss_ce_3: 0.478  m2_loss_mask_3: 0.1643  m2_loss_dice_3: 1.114  m2_loss_ce_4: 0.4652  m2_loss_mask_4: 0.1643  m2_loss_dice_4: 1.132  m2_loss_ce_5: 0.4509  m2_loss_mask_5: 0.165  m2_loss_dice_5: 1.114  m2_loss_ce_6: 0.4004  m2_loss_mask_6: 0.1601  m2_loss_dice_6: 1.095  m2_loss_ce_7: 0.4173  m2_loss_mask_7: 0.1583  m2_loss_dice_7: 1.077  m2_loss_ce_8: 0.4174  m2_loss_mask_8: 0.1648  m2_loss_dice_8: 1.116    time: 1.7399  last_time: 1.7481  data_time: 0.0569  last_data_time: 0.0652   lr: 0.0001  max_mem: 36942M
[10/07 13:36:59] d2.utils.events INFO:  eta: 0:07:30  iter: 739  total_loss: 36.97  m1_loss_ce: 0.3801  m1_loss_mask: 0.1609  m1_loss_dice: 1.132  m1_loss_ce_0: 0.494  m1_loss_mask_0: 0.1795  m1_loss_dice_0: 1.335  m1_loss_ce_1: 0.5253  m1_loss_mask_1: 0.1691  m1_loss_dice_1: 1.286  m1_loss_ce_2: 0.5154  m1_loss_mask_2: 0.1639  m1_loss_dice_2: 1.193  m1_loss_ce_3: 0.4326  m1_loss_mask_3: 0.1645  m1_loss_dice_3: 1.157  m1_loss_ce_4: 0.412  m1_loss_mask_4: 0.162  m1_loss_dice_4: 1.174  m1_loss_ce_5: 0.4243  m1_loss_mask_5: 0.1611  m1_loss_dice_5: 1.143  m1_loss_ce_6: 0.3784  m1_loss_mask_6: 0.1618  m1_loss_dice_6: 1.135  m1_loss_ce_7: 0.3871  m1_loss_mask_7: 0.1613  m1_loss_dice_7: 1.117  m1_loss_ce_8: 0.3973  m1_loss_mask_8: 0.1616  m1_loss_dice_8: 1.102  m2_loss_ce: 0.4603  m2_loss_mask: 0.1604  m2_loss_dice: 1.165  m2_loss_ce_0: 0.5101  m2_loss_mask_0: 0.1899  m2_loss_dice_0: 1.387  m2_loss_ce_1: 0.6148  m2_loss_mask_1: 0.1754  m2_loss_dice_1: 1.296  m2_loss_ce_2: 0.5094  m2_loss_mask_2: 0.1703  m2_loss_dice_2: 1.234  m2_loss_ce_3: 0.4509  m2_loss_mask_3: 0.1666  m2_loss_dice_3: 1.2  m2_loss_ce_4: 0.4468  m2_loss_mask_4: 0.165  m2_loss_dice_4: 1.188  m2_loss_ce_5: 0.4542  m2_loss_mask_5: 0.1589  m2_loss_dice_5: 1.166  m2_loss_ce_6: 0.4519  m2_loss_mask_6: 0.164  m2_loss_dice_6: 1.144  m2_loss_ce_7: 0.4386  m2_loss_mask_7: 0.1584  m2_loss_dice_7: 1.146  m2_loss_ce_8: 0.4344  m2_loss_mask_8: 0.1568  m2_loss_dice_8: 1.173    time: 1.7394  last_time: 1.7488  data_time: 0.0566  last_data_time: 0.0473   lr: 0.0001  max_mem: 36942M
[10/07 13:37:34] d2.utils.events INFO:  eta: 0:06:55  iter: 759  total_loss: 39.31  m1_loss_ce: 0.4361  m1_loss_mask: 0.1541  m1_loss_dice: 1.216  m1_loss_ce_0: 0.5287  m1_loss_mask_0: 0.1801  m1_loss_dice_0: 1.364  m1_loss_ce_1: 0.5739  m1_loss_mask_1: 0.165  m1_loss_dice_1: 1.335  m1_loss_ce_2: 0.5154  m1_loss_mask_2: 0.1618  m1_loss_dice_2: 1.296  m1_loss_ce_3: 0.462  m1_loss_mask_3: 0.1593  m1_loss_dice_3: 1.27  m1_loss_ce_4: 0.4183  m1_loss_mask_4: 0.1587  m1_loss_dice_4: 1.231  m1_loss_ce_5: 0.4422  m1_loss_mask_5: 0.1557  m1_loss_dice_5: 1.232  m1_loss_ce_6: 0.4366  m1_loss_mask_6: 0.1553  m1_loss_dice_6: 1.214  m1_loss_ce_7: 0.4132  m1_loss_mask_7: 0.1542  m1_loss_dice_7: 1.195  m1_loss_ce_8: 0.419  m1_loss_mask_8: 0.1536  m1_loss_dice_8: 1.226  m2_loss_ce: 0.4816  m2_loss_mask: 0.1592  m2_loss_dice: 1.22  m2_loss_ce_0: 0.5748  m2_loss_mask_0: 0.1843  m2_loss_dice_0: 1.446  m2_loss_ce_1: 0.6194  m2_loss_mask_1: 0.1695  m2_loss_dice_1: 1.355  m2_loss_ce_2: 0.5777  m2_loss_mask_2: 0.1654  m2_loss_dice_2: 1.336  m2_loss_ce_3: 0.5019  m2_loss_mask_3: 0.1637  m2_loss_dice_3: 1.265  m2_loss_ce_4: 0.4962  m2_loss_mask_4: 0.1573  m2_loss_dice_4: 1.254  m2_loss_ce_5: 0.5033  m2_loss_mask_5: 0.1613  m2_loss_dice_5: 1.236  m2_loss_ce_6: 0.4406  m2_loss_mask_6: 0.1581  m2_loss_dice_6: 1.245  m2_loss_ce_7: 0.4871  m2_loss_mask_7: 0.1568  m2_loss_dice_7: 1.247  m2_loss_ce_8: 0.485  m2_loss_mask_8: 0.1578  m2_loss_dice_8: 1.255    time: 1.7395  last_time: 1.7460  data_time: 0.0525  last_data_time: 0.0597   lr: 0.0001  max_mem: 36942M
[10/07 13:38:09] d2.utils.events INFO:  eta: 0:06:21  iter: 779  total_loss: 36.37  m1_loss_ce: 0.3621  m1_loss_mask: 0.1537  m1_loss_dice: 1.069  m1_loss_ce_0: 0.512  m1_loss_mask_0: 0.1755  m1_loss_dice_0: 1.37  m1_loss_ce_1: 0.5334  m1_loss_mask_1: 0.1589  m1_loss_dice_1: 1.244  m1_loss_ce_2: 0.484  m1_loss_mask_2: 0.1641  m1_loss_dice_2: 1.199  m1_loss_ce_3: 0.4216  m1_loss_mask_3: 0.1548  m1_loss_dice_3: 1.126  m1_loss_ce_4: 0.4081  m1_loss_mask_4: 0.1549  m1_loss_dice_4: 1.133  m1_loss_ce_5: 0.3818  m1_loss_mask_5: 0.1559  m1_loss_dice_5: 1.149  m1_loss_ce_6: 0.3533  m1_loss_mask_6: 0.1554  m1_loss_dice_6: 1.115  m1_loss_ce_7: 0.3829  m1_loss_mask_7: 0.155  m1_loss_dice_7: 1.112  m1_loss_ce_8: 0.3857  m1_loss_mask_8: 0.1525  m1_loss_dice_8: 1.12  m2_loss_ce: 0.4056  m2_loss_mask: 0.1547  m2_loss_dice: 1.185  m2_loss_ce_0: 0.5472  m2_loss_mask_0: 0.1822  m2_loss_dice_0: 1.411  m2_loss_ce_1: 0.6388  m2_loss_mask_1: 0.1684  m2_loss_dice_1: 1.297  m2_loss_ce_2: 0.5394  m2_loss_mask_2: 0.1609  m2_loss_dice_2: 1.227  m2_loss_ce_3: 0.4789  m2_loss_mask_3: 0.161  m2_loss_dice_3: 1.227  m2_loss_ce_4: 0.4457  m2_loss_mask_4: 0.1572  m2_loss_dice_4: 1.216  m2_loss_ce_5: 0.4268  m2_loss_mask_5: 0.1568  m2_loss_dice_5: 1.188  m2_loss_ce_6: 0.4225  m2_loss_mask_6: 0.1557  m2_loss_dice_6: 1.187  m2_loss_ce_7: 0.4266  m2_loss_mask_7: 0.1536  m2_loss_dice_7: 1.179  m2_loss_ce_8: 0.41  m2_loss_mask_8: 0.1547  m2_loss_dice_8: 1.171    time: 1.7404  last_time: 1.8012  data_time: 0.0627  last_data_time: 0.0550   lr: 0.0001  max_mem: 36942M
[10/07 13:38:45] d2.utils.events INFO:  eta: 0:05:46  iter: 799  total_loss: 35.95  m1_loss_ce: 0.3692  m1_loss_mask: 0.156  m1_loss_dice: 1.062  m1_loss_ce_0: 0.4916  m1_loss_mask_0: 0.1816  m1_loss_dice_0: 1.247  m1_loss_ce_1: 0.539  m1_loss_mask_1: 0.1655  m1_loss_dice_1: 1.187  m1_loss_ce_2: 0.4763  m1_loss_mask_2: 0.1587  m1_loss_dice_2: 1.109  m1_loss_ce_3: 0.4092  m1_loss_mask_3: 0.1549  m1_loss_dice_3: 1.1  m1_loss_ce_4: 0.3917  m1_loss_mask_4: 0.1594  m1_loss_dice_4: 1.086  m1_loss_ce_5: 0.3862  m1_loss_mask_5: 0.1557  m1_loss_dice_5: 1.072  m1_loss_ce_6: 0.3604  m1_loss_mask_6: 0.1568  m1_loss_dice_6: 1.072  m1_loss_ce_7: 0.3821  m1_loss_mask_7: 0.1562  m1_loss_dice_7: 1.059  m1_loss_ce_8: 0.379  m1_loss_mask_8: 0.1558  m1_loss_dice_8: 1.054  m2_loss_ce: 0.4481  m2_loss_mask: 0.1585  m2_loss_dice: 1.124  m2_loss_ce_0: 0.5662  m2_loss_mask_0: 0.1879  m2_loss_dice_0: 1.294  m2_loss_ce_1: 0.6056  m2_loss_mask_1: 0.1759  m2_loss_dice_1: 1.229  m2_loss_ce_2: 0.5138  m2_loss_mask_2: 0.1679  m2_loss_dice_2: 1.21  m2_loss_ce_3: 0.4982  m2_loss_mask_3: 0.1639  m2_loss_dice_3: 1.153  m2_loss_ce_4: 0.4639  m2_loss_mask_4: 0.1606  m2_loss_dice_4: 1.136  m2_loss_ce_5: 0.4723  m2_loss_mask_5: 0.1602  m2_loss_dice_5: 1.157  m2_loss_ce_6: 0.4316  m2_loss_mask_6: 0.1593  m2_loss_dice_6: 1.125  m2_loss_ce_7: 0.4637  m2_loss_mask_7: 0.1581  m2_loss_dice_7: 1.132  m2_loss_ce_8: 0.4654  m2_loss_mask_8: 0.1576  m2_loss_dice_8: 1.109    time: 1.7416  last_time: 1.7492  data_time: 0.0668  last_data_time: 0.0463   lr: 0.0001  max_mem: 36942M
[10/07 13:39:20] d2.utils.events INFO:  eta: 0:05:12  iter: 819  total_loss: 36  m1_loss_ce: 0.3835  m1_loss_mask: 0.1468  m1_loss_dice: 1.112  m1_loss_ce_0: 0.5131  m1_loss_mask_0: 0.1678  m1_loss_dice_0: 1.249  m1_loss_ce_1: 0.5344  m1_loss_mask_1: 0.1597  m1_loss_dice_1: 1.197  m1_loss_ce_2: 0.4874  m1_loss_mask_2: 0.1507  m1_loss_dice_2: 1.163  m1_loss_ce_3: 0.4354  m1_loss_mask_3: 0.147  m1_loss_dice_3: 1.094  m1_loss_ce_4: 0.4005  m1_loss_mask_4: 0.1468  m1_loss_dice_4: 1.129  m1_loss_ce_5: 0.3989  m1_loss_mask_5: 0.1454  m1_loss_dice_5: 1.122  m1_loss_ce_6: 0.3872  m1_loss_mask_6: 0.1452  m1_loss_dice_6: 1.08  m1_loss_ce_7: 0.377  m1_loss_mask_7: 0.1465  m1_loss_dice_7: 1.12  m1_loss_ce_8: 0.4032  m1_loss_mask_8: 0.1462  m1_loss_dice_8: 1.08  m2_loss_ce: 0.4405  m2_loss_mask: 0.1486  m2_loss_dice: 1.139  m2_loss_ce_0: 0.561  m2_loss_mask_0: 0.1845  m2_loss_dice_0: 1.347  m2_loss_ce_1: 0.6116  m2_loss_mask_1: 0.1618  m2_loss_dice_1: 1.274  m2_loss_ce_2: 0.5301  m2_loss_mask_2: 0.1574  m2_loss_dice_2: 1.189  m2_loss_ce_3: 0.4875  m2_loss_mask_3: 0.1569  m2_loss_dice_3: 1.179  m2_loss_ce_4: 0.4449  m2_loss_mask_4: 0.1517  m2_loss_dice_4: 1.156  m2_loss_ce_5: 0.4401  m2_loss_mask_5: 0.1514  m2_loss_dice_5: 1.153  m2_loss_ce_6: 0.4367  m2_loss_mask_6: 0.1503  m2_loss_dice_6: 1.155  m2_loss_ce_7: 0.43  m2_loss_mask_7: 0.1503  m2_loss_dice_7: 1.134  m2_loss_ce_8: 0.4239  m2_loss_mask_8: 0.1478  m2_loss_dice_8: 1.137    time: 1.7419  last_time: 1.7540  data_time: 0.0525  last_data_time: 0.0552   lr: 0.0001  max_mem: 36942M
[10/07 13:39:56] d2.utils.events INFO:  eta: 0:04:37  iter: 839  total_loss: 36.22  m1_loss_ce: 0.3875  m1_loss_mask: 0.1481  m1_loss_dice: 1.103  m1_loss_ce_0: 0.4674  m1_loss_mask_0: 0.1643  m1_loss_dice_0: 1.277  m1_loss_ce_1: 0.5521  m1_loss_mask_1: 0.1574  m1_loss_dice_1: 1.224  m1_loss_ce_2: 0.4905  m1_loss_mask_2: 0.155  m1_loss_dice_2: 1.183  m1_loss_ce_3: 0.4177  m1_loss_mask_3: 0.15  m1_loss_dice_3: 1.124  m1_loss_ce_4: 0.4064  m1_loss_mask_4: 0.1495  m1_loss_dice_4: 1.147  m1_loss_ce_5: 0.4083  m1_loss_mask_5: 0.1492  m1_loss_dice_5: 1.165  m1_loss_ce_6: 0.3796  m1_loss_mask_6: 0.1479  m1_loss_dice_6: 1.134  m1_loss_ce_7: 0.4005  m1_loss_mask_7: 0.1485  m1_loss_dice_7: 1.116  m1_loss_ce_8: 0.3857  m1_loss_mask_8: 0.1476  m1_loss_dice_8: 1.094  m2_loss_ce: 0.4059  m2_loss_mask: 0.1525  m2_loss_dice: 1.197  m2_loss_ce_0: 0.5454  m2_loss_mask_0: 0.1774  m2_loss_dice_0: 1.348  m2_loss_ce_1: 0.5812  m2_loss_mask_1: 0.1641  m2_loss_dice_1: 1.294  m2_loss_ce_2: 0.4947  m2_loss_mask_2: 0.1602  m2_loss_dice_2: 1.246  m2_loss_ce_3: 0.4592  m2_loss_mask_3: 0.1582  m2_loss_dice_3: 1.17  m2_loss_ce_4: 0.4281  m2_loss_mask_4: 0.1532  m2_loss_dice_4: 1.172  m2_loss_ce_5: 0.4644  m2_loss_mask_5: 0.1544  m2_loss_dice_5: 1.196  m2_loss_ce_6: 0.4221  m2_loss_mask_6: 0.151  m2_loss_dice_6: 1.155  m2_loss_ce_7: 0.4211  m2_loss_mask_7: 0.1512  m2_loss_dice_7: 1.143  m2_loss_ce_8: 0.444  m2_loss_mask_8: 0.1509  m2_loss_dice_8: 1.152    time: 1.7426  last_time: 1.8095  data_time: 0.0550  last_data_time: 0.0546   lr: 0.0001  max_mem: 36942M
[10/07 13:40:31] d2.utils.events INFO:  eta: 0:04:02  iter: 859  total_loss: 34.05  m1_loss_ce: 0.3829  m1_loss_mask: 0.1539  m1_loss_dice: 1.047  m1_loss_ce_0: 0.4862  m1_loss_mask_0: 0.1733  m1_loss_dice_0: 1.218  m1_loss_ce_1: 0.5482  m1_loss_mask_1: 0.1728  m1_loss_dice_1: 1.153  m1_loss_ce_2: 0.477  m1_loss_mask_2: 0.1595  m1_loss_dice_2: 1.09  m1_loss_ce_3: 0.4294  m1_loss_mask_3: 0.1557  m1_loss_dice_3: 1.06  m1_loss_ce_4: 0.4493  m1_loss_mask_4: 0.1575  m1_loss_dice_4: 1.047  m1_loss_ce_5: 0.3914  m1_loss_mask_5: 0.1545  m1_loss_dice_5: 1.074  m1_loss_ce_6: 0.3706  m1_loss_mask_6: 0.1565  m1_loss_dice_6: 1.029  m1_loss_ce_7: 0.3776  m1_loss_mask_7: 0.1552  m1_loss_dice_7: 1.064  m1_loss_ce_8: 0.3983  m1_loss_mask_8: 0.1554  m1_loss_dice_8: 1.055  m2_loss_ce: 0.4366  m2_loss_mask: 0.1595  m2_loss_dice: 1.07  m2_loss_ce_0: 0.5188  m2_loss_mask_0: 0.1897  m2_loss_dice_0: 1.283  m2_loss_ce_1: 0.6088  m2_loss_mask_1: 0.1728  m2_loss_dice_1: 1.174  m2_loss_ce_2: 0.499  m2_loss_mask_2: 0.1672  m2_loss_dice_2: 1.162  m2_loss_ce_3: 0.4774  m2_loss_mask_3: 0.1678  m2_loss_dice_3: 1.119  m2_loss_ce_4: 0.4512  m2_loss_mask_4: 0.1638  m2_loss_dice_4: 1.116  m2_loss_ce_5: 0.4455  m2_loss_mask_5: 0.1619  m2_loss_dice_5: 1.107  m2_loss_ce_6: 0.4194  m2_loss_mask_6: 0.1603  m2_loss_dice_6: 1.076  m2_loss_ce_7: 0.4182  m2_loss_mask_7: 0.1596  m2_loss_dice_7: 1.091  m2_loss_ce_8: 0.4373  m2_loss_mask_8: 0.1607  m2_loss_dice_8: 1.073    time: 1.7424  last_time: 1.8185  data_time: 0.0518  last_data_time: 0.0538   lr: 0.0001  max_mem: 36942M
[10/07 13:41:06] d2.utils.events INFO:  eta: 0:03:28  iter: 879  total_loss: 35.87  m1_loss_ce: 0.3795  m1_loss_mask: 0.1482  m1_loss_dice: 1.128  m1_loss_ce_0: 0.485  m1_loss_mask_0: 0.1695  m1_loss_dice_0: 1.334  m1_loss_ce_1: 0.5432  m1_loss_mask_1: 0.1551  m1_loss_dice_1: 1.246  m1_loss_ce_2: 0.4722  m1_loss_mask_2: 0.1514  m1_loss_dice_2: 1.177  m1_loss_ce_3: 0.4251  m1_loss_mask_3: 0.1505  m1_loss_dice_3: 1.16  m1_loss_ce_4: 0.3903  m1_loss_mask_4: 0.1478  m1_loss_dice_4: 1.17  m1_loss_ce_5: 0.3997  m1_loss_mask_5: 0.1463  m1_loss_dice_5: 1.162  m1_loss_ce_6: 0.3708  m1_loss_mask_6: 0.1473  m1_loss_dice_6: 1.138  m1_loss_ce_7: 0.3805  m1_loss_mask_7: 0.1466  m1_loss_dice_7: 1.126  m1_loss_ce_8: 0.3768  m1_loss_mask_8: 0.1474  m1_loss_dice_8: 1.135  m2_loss_ce: 0.4456  m2_loss_mask: 0.1517  m2_loss_dice: 1.109  m2_loss_ce_0: 0.5382  m2_loss_mask_0: 0.1848  m2_loss_dice_0: 1.33  m2_loss_ce_1: 0.5883  m2_loss_mask_1: 0.164  m2_loss_dice_1: 1.262  m2_loss_ce_2: 0.5412  m2_loss_mask_2: 0.16  m2_loss_dice_2: 1.246  m2_loss_ce_3: 0.4984  m2_loss_mask_3: 0.1595  m2_loss_dice_3: 1.192  m2_loss_ce_4: 0.4588  m2_loss_mask_4: 0.1561  m2_loss_dice_4: 1.182  m2_loss_ce_5: 0.4334  m2_loss_mask_5: 0.1537  m2_loss_dice_5: 1.18  m2_loss_ce_6: 0.4429  m2_loss_mask_6: 0.1524  m2_loss_dice_6: 1.165  m2_loss_ce_7: 0.4262  m2_loss_mask_7: 0.152  m2_loss_dice_7: 1.182  m2_loss_ce_8: 0.4634  m2_loss_mask_8: 0.1531  m2_loss_dice_8: 1.136    time: 1.7425  last_time: 1.6866  data_time: 0.0518  last_data_time: 0.0528   lr: 0.0001  max_mem: 36942M
[10/07 13:41:40] d2.utils.events INFO:  eta: 0:02:53  iter: 899  total_loss: 35.39  m1_loss_ce: 0.3589  m1_loss_mask: 0.144  m1_loss_dice: 1.103  m1_loss_ce_0: 0.4808  m1_loss_mask_0: 0.1565  m1_loss_dice_0: 1.309  m1_loss_ce_1: 0.5346  m1_loss_mask_1: 0.1539  m1_loss_dice_1: 1.24  m1_loss_ce_2: 0.4915  m1_loss_mask_2: 0.1487  m1_loss_dice_2: 1.179  m1_loss_ce_3: 0.4098  m1_loss_mask_3: 0.1442  m1_loss_dice_3: 1.132  m1_loss_ce_4: 0.4132  m1_loss_mask_4: 0.1466  m1_loss_dice_4: 1.141  m1_loss_ce_5: 0.3785  m1_loss_mask_5: 0.1435  m1_loss_dice_5: 1.133  m1_loss_ce_6: 0.3347  m1_loss_mask_6: 0.1427  m1_loss_dice_6: 1.115  m1_loss_ce_7: 0.3553  m1_loss_mask_7: 0.144  m1_loss_dice_7: 1.101  m1_loss_ce_8: 0.3641  m1_loss_mask_8: 0.1439  m1_loss_dice_8: 1.09  m2_loss_ce: 0.4219  m2_loss_mask: 0.1396  m2_loss_dice: 1.136  m2_loss_ce_0: 0.5611  m2_loss_mask_0: 0.1699  m2_loss_dice_0: 1.386  m2_loss_ce_1: 0.5677  m2_loss_mask_1: 0.1575  m2_loss_dice_1: 1.277  m2_loss_ce_2: 0.5203  m2_loss_mask_2: 0.151  m2_loss_dice_2: 1.233  m2_loss_ce_3: 0.477  m2_loss_mask_3: 0.1457  m2_loss_dice_3: 1.189  m2_loss_ce_4: 0.4349  m2_loss_mask_4: 0.1425  m2_loss_dice_4: 1.185  m2_loss_ce_5: 0.4193  m2_loss_mask_5: 0.1431  m2_loss_dice_5: 1.167  m2_loss_ce_6: 0.407  m2_loss_mask_6: 0.1427  m2_loss_dice_6: 1.15  m2_loss_ce_7: 0.4023  m2_loss_mask_7: 0.1412  m2_loss_dice_7: 1.178  m2_loss_ce_8: 0.4351  m2_loss_mask_8: 0.1387  m2_loss_dice_8: 1.124    time: 1.7424  last_time: 1.6964  data_time: 0.0491  last_data_time: 0.0392   lr: 0.0001  max_mem: 36942M
[10/07 13:42:16] d2.utils.events INFO:  eta: 0:02:18  iter: 919  total_loss: 36.43  m1_loss_ce: 0.3722  m1_loss_mask: 0.1528  m1_loss_dice: 1.135  m1_loss_ce_0: 0.4698  m1_loss_mask_0: 0.1725  m1_loss_dice_0: 1.276  m1_loss_ce_1: 0.5165  m1_loss_mask_1: 0.1589  m1_loss_dice_1: 1.248  m1_loss_ce_2: 0.4502  m1_loss_mask_2: 0.1563  m1_loss_dice_2: 1.197  m1_loss_ce_3: 0.3966  m1_loss_mask_3: 0.1588  m1_loss_dice_3: 1.136  m1_loss_ce_4: 0.3752  m1_loss_mask_4: 0.157  m1_loss_dice_4: 1.125  m1_loss_ce_5: 0.369  m1_loss_mask_5: 0.1533  m1_loss_dice_5: 1.116  m1_loss_ce_6: 0.3802  m1_loss_mask_6: 0.1556  m1_loss_dice_6: 1.13  m1_loss_ce_7: 0.3593  m1_loss_mask_7: 0.1524  m1_loss_dice_7: 1.125  m1_loss_ce_8: 0.3562  m1_loss_mask_8: 0.151  m1_loss_dice_8: 1.133  m2_loss_ce: 0.4272  m2_loss_mask: 0.1508  m2_loss_dice: 1.166  m2_loss_ce_0: 0.5277  m2_loss_mask_0: 0.1815  m2_loss_dice_0: 1.38  m2_loss_ce_1: 0.5877  m2_loss_mask_1: 0.1675  m2_loss_dice_1: 1.285  m2_loss_ce_2: 0.5074  m2_loss_mask_2: 0.1628  m2_loss_dice_2: 1.223  m2_loss_ce_3: 0.4646  m2_loss_mask_3: 0.1582  m2_loss_dice_3: 1.201  m2_loss_ce_4: 0.4338  m2_loss_mask_4: 0.1512  m2_loss_dice_4: 1.18  m2_loss_ce_5: 0.418  m2_loss_mask_5: 0.1526  m2_loss_dice_5: 1.198  m2_loss_ce_6: 0.4176  m2_loss_mask_6: 0.1519  m2_loss_dice_6: 1.186  m2_loss_ce_7: 0.4187  m2_loss_mask_7: 0.1517  m2_loss_dice_7: 1.162  m2_loss_ce_8: 0.4337  m2_loss_mask_8: 0.1501  m2_loss_dice_8: 1.167    time: 1.7427  last_time: 1.7902  data_time: 0.0521  last_data_time: 0.0492   lr: 0.0001  max_mem: 36942M
[10/07 13:42:51] d2.utils.events INFO:  eta: 0:01:44  iter: 939  total_loss: 36.73  m1_loss_ce: 0.4274  m1_loss_mask: 0.1502  m1_loss_dice: 1.116  m1_loss_ce_0: 0.5623  m1_loss_mask_0: 0.1645  m1_loss_dice_0: 1.3  m1_loss_ce_1: 0.5945  m1_loss_mask_1: 0.1595  m1_loss_dice_1: 1.251  m1_loss_ce_2: 0.545  m1_loss_mask_2: 0.1588  m1_loss_dice_2: 1.21  m1_loss_ce_3: 0.5038  m1_loss_mask_3: 0.1536  m1_loss_dice_3: 1.159  m1_loss_ce_4: 0.4459  m1_loss_mask_4: 0.1519  m1_loss_dice_4: 1.126  m1_loss_ce_5: 0.4389  m1_loss_mask_5: 0.1534  m1_loss_dice_5: 1.153  m1_loss_ce_6: 0.4477  m1_loss_mask_6: 0.151  m1_loss_dice_6: 1.127  m1_loss_ce_7: 0.4161  m1_loss_mask_7: 0.1504  m1_loss_dice_7: 1.132  m1_loss_ce_8: 0.4152  m1_loss_mask_8: 0.1506  m1_loss_dice_8: 1.113  m2_loss_ce: 0.4733  m2_loss_mask: 0.1464  m2_loss_dice: 1.123  m2_loss_ce_0: 0.5722  m2_loss_mask_0: 0.1826  m2_loss_dice_0: 1.389  m2_loss_ce_1: 0.604  m2_loss_mask_1: 0.1606  m2_loss_dice_1: 1.291  m2_loss_ce_2: 0.5699  m2_loss_mask_2: 0.1578  m2_loss_dice_2: 1.226  m2_loss_ce_3: 0.5064  m2_loss_mask_3: 0.1554  m2_loss_dice_3: 1.137  m2_loss_ce_4: 0.4825  m2_loss_mask_4: 0.1535  m2_loss_dice_4: 1.178  m2_loss_ce_5: 0.4888  m2_loss_mask_5: 0.1484  m2_loss_dice_5: 1.166  m2_loss_ce_6: 0.4782  m2_loss_mask_6: 0.149  m2_loss_dice_6: 1.153  m2_loss_ce_7: 0.4527  m2_loss_mask_7: 0.1476  m2_loss_dice_7: 1.144  m2_loss_ce_8: 0.445  m2_loss_mask_8: 0.1467  m2_loss_dice_8: 1.124    time: 1.7427  last_time: 1.7680  data_time: 0.0518  last_data_time: 0.0469   lr: 0.0001  max_mem: 36942M
[10/07 13:43:26] d2.utils.events INFO:  eta: 0:01:09  iter: 959  total_loss: 37.61  m1_loss_ce: 0.3861  m1_loss_mask: 0.1527  m1_loss_dice: 1.135  m1_loss_ce_0: 0.4733  m1_loss_mask_0: 0.1656  m1_loss_dice_0: 1.379  m1_loss_ce_1: 0.5695  m1_loss_mask_1: 0.157  m1_loss_dice_1: 1.285  m1_loss_ce_2: 0.4779  m1_loss_mask_2: 0.1607  m1_loss_dice_2: 1.236  m1_loss_ce_3: 0.4507  m1_loss_mask_3: 0.1518  m1_loss_dice_3: 1.189  m1_loss_ce_4: 0.3802  m1_loss_mask_4: 0.1521  m1_loss_dice_4: 1.154  m1_loss_ce_5: 0.4142  m1_loss_mask_5: 0.1483  m1_loss_dice_5: 1.169  m1_loss_ce_6: 0.3899  m1_loss_mask_6: 0.1503  m1_loss_dice_6: 1.14  m1_loss_ce_7: 0.3626  m1_loss_mask_7: 0.1524  m1_loss_dice_7: 1.172  m1_loss_ce_8: 0.3894  m1_loss_mask_8: 0.1579  m1_loss_dice_8: 1.187  m2_loss_ce: 0.4432  m2_loss_mask: 0.1535  m2_loss_dice: 1.164  m2_loss_ce_0: 0.5606  m2_loss_mask_0: 0.1809  m2_loss_dice_0: 1.361  m2_loss_ce_1: 0.6197  m2_loss_mask_1: 0.1707  m2_loss_dice_1: 1.283  m2_loss_ce_2: 0.5491  m2_loss_mask_2: 0.1602  m2_loss_dice_2: 1.246  m2_loss_ce_3: 0.4749  m2_loss_mask_3: 0.1588  m2_loss_dice_3: 1.192  m2_loss_ce_4: 0.4613  m2_loss_mask_4: 0.1529  m2_loss_dice_4: 1.197  m2_loss_ce_5: 0.4691  m2_loss_mask_5: 0.1529  m2_loss_dice_5: 1.191  m2_loss_ce_6: 0.4461  m2_loss_mask_6: 0.1537  m2_loss_dice_6: 1.166  m2_loss_ce_7: 0.4504  m2_loss_mask_7: 0.1529  m2_loss_dice_7: 1.154  m2_loss_ce_8: 0.4385  m2_loss_mask_8: 0.1529  m2_loss_dice_8: 1.181    time: 1.7430  last_time: 1.7239  data_time: 0.0511  last_data_time: 0.0461   lr: 0.0001  max_mem: 36942M
[10/07 13:44:01] d2.utils.events INFO:  eta: 0:00:34  iter: 979  total_loss: 38.56  m1_loss_ce: 0.4207  m1_loss_mask: 0.1566  m1_loss_dice: 1.204  m1_loss_ce_0: 0.5186  m1_loss_mask_0: 0.1799  m1_loss_dice_0: 1.412  m1_loss_ce_1: 0.5607  m1_loss_mask_1: 0.1596  m1_loss_dice_1: 1.306  m1_loss_ce_2: 0.5365  m1_loss_mask_2: 0.165  m1_loss_dice_2: 1.266  m1_loss_ce_3: 0.4597  m1_loss_mask_3: 0.1579  m1_loss_dice_3: 1.22  m1_loss_ce_4: 0.4335  m1_loss_mask_4: 0.1562  m1_loss_dice_4: 1.196  m1_loss_ce_5: 0.4265  m1_loss_mask_5: 0.1578  m1_loss_dice_5: 1.236  m1_loss_ce_6: 0.4332  m1_loss_mask_6: 0.1547  m1_loss_dice_6: 1.189  m1_loss_ce_7: 0.4109  m1_loss_mask_7: 0.156  m1_loss_dice_7: 1.184  m1_loss_ce_8: 0.4296  m1_loss_mask_8: 0.1552  m1_loss_dice_8: 1.153  m2_loss_ce: 0.4816  m2_loss_mask: 0.1541  m2_loss_dice: 1.167  m2_loss_ce_0: 0.5596  m2_loss_mask_0: 0.1844  m2_loss_dice_0: 1.439  m2_loss_ce_1: 0.587  m2_loss_mask_1: 0.1714  m2_loss_dice_1: 1.344  m2_loss_ce_2: 0.562  m2_loss_mask_2: 0.1651  m2_loss_dice_2: 1.294  m2_loss_ce_3: 0.4953  m2_loss_mask_3: 0.1628  m2_loss_dice_3: 1.242  m2_loss_ce_4: 0.4541  m2_loss_mask_4: 0.157  m2_loss_dice_4: 1.253  m2_loss_ce_5: 0.4706  m2_loss_mask_5: 0.1544  m2_loss_dice_5: 1.233  m2_loss_ce_6: 0.432  m2_loss_mask_6: 0.1532  m2_loss_dice_6: 1.226  m2_loss_ce_7: 0.4845  m2_loss_mask_7: 0.1542  m2_loss_dice_7: 1.231  m2_loss_ce_8: 0.4865  m2_loss_mask_8: 0.1554  m2_loss_dice_8: 1.221    time: 1.7431  last_time: 1.7979  data_time: 0.0514  last_data_time: 0.0499   lr: 0.0001  max_mem: 36942M
[10/07 13:44:37] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4/model_final.pth
[10/07 13:44:43] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 37.4  m1_loss_ce: 0.4225  m1_loss_mask: 0.1441  m1_loss_dice: 1.171  m1_loss_ce_0: 0.547  m1_loss_mask_0: 0.1586  m1_loss_dice_0: 1.36  m1_loss_ce_1: 0.5828  m1_loss_mask_1: 0.1507  m1_loss_dice_1: 1.306  m1_loss_ce_2: 0.5332  m1_loss_mask_2: 0.151  m1_loss_dice_2: 1.226  m1_loss_ce_3: 0.4404  m1_loss_mask_3: 0.1513  m1_loss_dice_3: 1.194  m1_loss_ce_4: 0.4621  m1_loss_mask_4: 0.1463  m1_loss_dice_4: 1.188  m1_loss_ce_5: 0.4341  m1_loss_mask_5: 0.1437  m1_loss_dice_5: 1.151  m1_loss_ce_6: 0.3975  m1_loss_mask_6: 0.1435  m1_loss_dice_6: 1.162  m1_loss_ce_7: 0.4086  m1_loss_mask_7: 0.1447  m1_loss_dice_7: 1.138  m1_loss_ce_8: 0.3995  m1_loss_mask_8: 0.1427  m1_loss_dice_8: 1.138  m2_loss_ce: 0.4664  m2_loss_mask: 0.1434  m2_loss_dice: 1.167  m2_loss_ce_0: 0.6166  m2_loss_mask_0: 0.1754  m2_loss_dice_0: 1.46  m2_loss_ce_1: 0.6719  m2_loss_mask_1: 0.163  m2_loss_dice_1: 1.351  m2_loss_ce_2: 0.5971  m2_loss_mask_2: 0.1531  m2_loss_dice_2: 1.259  m2_loss_ce_3: 0.5151  m2_loss_mask_3: 0.152  m2_loss_dice_3: 1.21  m2_loss_ce_4: 0.5011  m2_loss_mask_4: 0.1507  m2_loss_dice_4: 1.22  m2_loss_ce_5: 0.5  m2_loss_mask_5: 0.1488  m2_loss_dice_5: 1.221  m2_loss_ce_6: 0.4556  m2_loss_mask_6: 0.1456  m2_loss_dice_6: 1.214  m2_loss_ce_7: 0.4671  m2_loss_mask_7: 0.147  m2_loss_dice_7: 1.198  m2_loss_ce_8: 0.4693  m2_loss_mask_8: 0.1449  m2_loss_dice_8: 1.185    time: 1.7441  last_time: 1.7756  data_time: 0.0547  last_data_time: 0.0440   lr: 0.0001  max_mem: 36942M
[10/07 13:44:43] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:29:00 (1.7441 s / it)
[10/07 13:44:43] d2.engine.hooks INFO: Total training time: 0:29:13 (0:00:12 on hooks)
[10/07 13:44:43] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[10/07 13:44:43] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[10/07 13:44:43] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/07 13:44:43] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/07 13:44:43] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[10/07 13:46:30] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evalfbcfspm3 ...
[10/07 13:47:22] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 63.003 | 81.273 | 76.562 |      19       |
| Things | 56.044 | 80.373 | 69.335 |       8       |
| Stuff  | 68.064 | 81.927 | 81.818 |      11       |
[10/07 13:47:22] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.432 | 97.940 | 99.482 |     Stuff     |
| class_8  | 76.761 | 84.993 | 90.316 |     Stuff     |
| class_11 | 88.405 | 89.968 | 98.264 |     Stuff     |
| class_12 | 47.636 | 78.766 | 60.477 |     Stuff     |
| class_13 | 45.003 | 75.070 | 59.948 |     Stuff     |
| class_17 | 53.841 | 65.369 | 82.365 |     Stuff     |
| class_19 | 51.475 | 70.128 | 73.401 |     Stuff     |
| class_20 | 69.583 | 78.681 | 88.437 |     Stuff     |
| class_21 | 89.649 | 90.858 | 98.669 |     Stuff     |
| class_22 | 41.000 | 77.758 | 52.727 |     Stuff     |
| class_23 | 87.916 | 91.666 | 95.909 |     Stuff     |
| class_24 | 54.232 | 77.429 | 70.040 |    Things     |
| class_25 | 49.163 | 73.392 | 66.987 |    Things     |
| class_26 | 67.418 | 83.298 | 80.936 |    Things     |
| class_27 | 58.171 | 86.727 | 67.073 |    Things     |
| class_28 | 71.951 | 88.739 | 81.081 |    Things     |
| class_31 | 59.995 | 85.378 | 70.270 |    Things     |
| class_32 | 42.486 | 75.943 | 55.944 |    Things     |
| class_33 | 44.939 | 72.076 | 62.349 |    Things     |
[10/07 13:47:22] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/07 13:47:22] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[10/07 13:47:22] d2.evaluation.testing INFO: copypaste: 63.0029,81.2726,76.5619,56.0443,80.3729,69.3352,68.0637,81.9269,81.8177,97.4321,97.9395,99.4819,76.7615,84.9926,90.3156,88.4054,89.9677,98.2635,47.6358,78.7662,60.4775,45.0032,75.0701,59.9483,53.8411,65.3690,82.3649,51.4746,70.1282,73.4007,69.5834,78.6814,88.4368,89.6486,90.8576,98.6694,40.9996,77.7578,52.7273,87.9159,91.6659,95.9091,54.2315,77.4293,70.0401,49.1632,73.3915,66.9875,67.4182,83.2980,80.9361,58.1706,86.7271,67.0732,71.9508,88.7393,81.0811,59.9954,85.3780,70.2703,42.4858,75.9434,55.9441,44.9392,72.0765,62.3493
