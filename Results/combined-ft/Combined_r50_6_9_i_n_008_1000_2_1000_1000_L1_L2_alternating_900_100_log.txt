[10/06 10:42:29] detectron2 INFO: Rank of current process: 0. World size: 2
[10/06 10:42:30] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/06 10:42:30] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_L1_L2_alternating_900_100_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/06 10:42:30] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_L1_L2_alternating_900_100_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_alternating_900_100
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/06 10:42:30] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_alternating_900_100
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/06 10:42:30] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_alternating_900_100/config.yaml
[10/06 10:42:30] d2.utils.env INFO: Using a generated random seed 32839313
[10/06 10:42:34] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/06 10:42:34] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/06 10:42:34] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/06 10:42:34] d2.data.build INFO: Using training sampler TrainingSampler
[10/06 10:42:34] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/06 10:42:34] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/06 10:42:34] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/06 10:42:34] d2.data.build INFO: Making batched data loader with batch_size=4
[10/06 10:42:34] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/06 10:42:37] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/06 10:42:37] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/06 10:42:37] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/06 10:42:38] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/06 10:42:38] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/06 10:43:01] d2.utils.events INFO:  eta: 0:13:09  iter: 19  total_loss: 20.66  m1_loss_ce: 0.5831  m1_loss_mask: 0.162  m1_loss_dice: 1.237  m1_loss_ce_0: 0.698  m1_loss_mask_0: 0.1957  m1_loss_dice_0: 1.554  m1_loss_ce_1: 0.7338  m1_loss_mask_1: 0.1828  m1_loss_dice_1: 1.424  m1_loss_ce_2: 0.6772  m1_loss_mask_2: 0.1687  m1_loss_dice_2: 1.349  m1_loss_ce_3: 0.6182  m1_loss_mask_3: 0.163  m1_loss_dice_3: 1.293  m1_loss_ce_4: 0.5732  m1_loss_mask_4: 0.1627  m1_loss_dice_4: 1.244  m1_loss_ce_5: 0.602  m1_loss_mask_5: 0.1639  m1_loss_dice_5: 1.304  m1_loss_ce_6: 0.5486  m1_loss_mask_6: 0.1626  m1_loss_dice_6: 1.281  m1_loss_ce_7: 0.555  m1_loss_mask_7: 0.1634  m1_loss_dice_7: 1.253  m1_loss_ce_8: 0.5919  m1_loss_mask_8: 0.163  m1_loss_dice_8: 1.285    time: 0.8256  last_time: 0.8048  data_time: 0.2492  last_data_time: 0.0402   lr: 0.0001  max_mem: 19342M
[10/06 10:43:18] d2.utils.events INFO:  eta: 0:13:01  iter: 39  total_loss: 21.54  m1_loss_ce: 0.5281  m1_loss_mask: 0.1775  m1_loss_dice: 1.28  m1_loss_ce_0: 0.6225  m1_loss_mask_0: 0.2056  m1_loss_dice_0: 1.498  m1_loss_ce_1: 0.7297  m1_loss_mask_1: 0.1879  m1_loss_dice_1: 1.429  m1_loss_ce_2: 0.6564  m1_loss_mask_2: 0.183  m1_loss_dice_2: 1.415  m1_loss_ce_3: 0.5733  m1_loss_mask_3: 0.1804  m1_loss_dice_3: 1.368  m1_loss_ce_4: 0.5661  m1_loss_mask_4: 0.1779  m1_loss_dice_4: 1.338  m1_loss_ce_5: 0.5502  m1_loss_mask_5: 0.1781  m1_loss_dice_5: 1.341  m1_loss_ce_6: 0.523  m1_loss_mask_6: 0.1796  m1_loss_dice_6: 1.314  m1_loss_ce_7: 0.5216  m1_loss_mask_7: 0.1773  m1_loss_dice_7: 1.333  m1_loss_ce_8: 0.4984  m1_loss_mask_8: 0.178  m1_loss_dice_8: 1.317    time: 0.8254  last_time: 0.7957  data_time: 0.0507  last_data_time: 0.0899   lr: 0.0001  max_mem: 19342M
[10/06 10:43:34] d2.utils.events INFO:  eta: 0:12:42  iter: 59  total_loss: 21.84  m1_loss_ce: 0.5319  m1_loss_mask: 0.1831  m1_loss_dice: 1.349  m1_loss_ce_0: 0.6032  m1_loss_mask_0: 0.2059  m1_loss_dice_0: 1.563  m1_loss_ce_1: 0.7101  m1_loss_mask_1: 0.1935  m1_loss_dice_1: 1.472  m1_loss_ce_2: 0.6423  m1_loss_mask_2: 0.1862  m1_loss_dice_2: 1.425  m1_loss_ce_3: 0.5826  m1_loss_mask_3: 0.1784  m1_loss_dice_3: 1.37  m1_loss_ce_4: 0.5548  m1_loss_mask_4: 0.1776  m1_loss_dice_4: 1.379  m1_loss_ce_5: 0.5672  m1_loss_mask_5: 0.1812  m1_loss_dice_5: 1.369  m1_loss_ce_6: 0.5152  m1_loss_mask_6: 0.1806  m1_loss_dice_6: 1.329  m1_loss_ce_7: 0.5379  m1_loss_mask_7: 0.1799  m1_loss_dice_7: 1.335  m1_loss_ce_8: 0.5495  m1_loss_mask_8: 0.1799  m1_loss_dice_8: 1.324    time: 0.8217  last_time: 0.8217  data_time: 0.0574  last_data_time: 0.0400   lr: 0.0001  max_mem: 19342M
[10/06 10:43:50] d2.utils.events INFO:  eta: 0:12:26  iter: 79  total_loss: 21.8  m1_loss_ce: 0.5251  m1_loss_mask: 0.1894  m1_loss_dice: 1.373  m1_loss_ce_0: 0.6084  m1_loss_mask_0: 0.2167  m1_loss_dice_0: 1.552  m1_loss_ce_1: 0.6921  m1_loss_mask_1: 0.198  m1_loss_dice_1: 1.512  m1_loss_ce_2: 0.659  m1_loss_mask_2: 0.1868  m1_loss_dice_2: 1.414  m1_loss_ce_3: 0.5769  m1_loss_mask_3: 0.1827  m1_loss_dice_3: 1.352  m1_loss_ce_4: 0.5804  m1_loss_mask_4: 0.1839  m1_loss_dice_4: 1.352  m1_loss_ce_5: 0.558  m1_loss_mask_5: 0.187  m1_loss_dice_5: 1.367  m1_loss_ce_6: 0.5574  m1_loss_mask_6: 0.1882  m1_loss_dice_6: 1.357  m1_loss_ce_7: 0.554  m1_loss_mask_7: 0.1873  m1_loss_dice_7: 1.362  m1_loss_ce_8: 0.5245  m1_loss_mask_8: 0.1898  m1_loss_dice_8: 1.329    time: 0.8184  last_time: 0.8368  data_time: 0.0506  last_data_time: 0.0438   lr: 0.0001  max_mem: 19342M
[10/06 10:44:06] d2.utils.events INFO:  eta: 0:12:09  iter: 99  total_loss: 21.2  m1_loss_ce: 0.5335  m1_loss_mask: 0.185  m1_loss_dice: 1.268  m1_loss_ce_0: 0.6315  m1_loss_mask_0: 0.2249  m1_loss_dice_0: 1.538  m1_loss_ce_1: 0.6724  m1_loss_mask_1: 0.2022  m1_loss_dice_1: 1.4  m1_loss_ce_2: 0.6506  m1_loss_mask_2: 0.1932  m1_loss_dice_2: 1.352  m1_loss_ce_3: 0.5576  m1_loss_mask_3: 0.1907  m1_loss_dice_3: 1.284  m1_loss_ce_4: 0.5554  m1_loss_mask_4: 0.182  m1_loss_dice_4: 1.296  m1_loss_ce_5: 0.5542  m1_loss_mask_5: 0.1794  m1_loss_dice_5: 1.3  m1_loss_ce_6: 0.5591  m1_loss_mask_6: 0.1871  m1_loss_dice_6: 1.282  m1_loss_ce_7: 0.5133  m1_loss_mask_7: 0.1816  m1_loss_dice_7: 1.261  m1_loss_ce_8: 0.5377  m1_loss_mask_8: 0.1802  m1_loss_dice_8: 1.272    time: 0.8156  last_time: 0.8176  data_time: 0.0473  last_data_time: 0.0402   lr: 0.0001  max_mem: 19342M
[10/06 10:44:23] d2.utils.events INFO:  eta: 0:11:59  iter: 119  total_loss: 21.24  m1_loss_ce: 0.5292  m1_loss_mask: 0.1834  m1_loss_dice: 1.282  m1_loss_ce_0: 0.6331  m1_loss_mask_0: 0.2089  m1_loss_dice_0: 1.544  m1_loss_ce_1: 0.6959  m1_loss_mask_1: 0.1984  m1_loss_dice_1: 1.412  m1_loss_ce_2: 0.6162  m1_loss_mask_2: 0.192  m1_loss_dice_2: 1.367  m1_loss_ce_3: 0.5839  m1_loss_mask_3: 0.1871  m1_loss_dice_3: 1.357  m1_loss_ce_4: 0.5658  m1_loss_mask_4: 0.1849  m1_loss_dice_4: 1.302  m1_loss_ce_5: 0.5504  m1_loss_mask_5: 0.1841  m1_loss_dice_5: 1.332  m1_loss_ce_6: 0.5708  m1_loss_mask_6: 0.1818  m1_loss_dice_6: 1.34  m1_loss_ce_7: 0.5368  m1_loss_mask_7: 0.1879  m1_loss_dice_7: 1.314  m1_loss_ce_8: 0.5358  m1_loss_mask_8: 0.1874  m1_loss_dice_8: 1.307    time: 0.8178  last_time: 0.8257  data_time: 0.0518  last_data_time: 0.0527   lr: 0.0001  max_mem: 19342M
[10/06 10:44:39] d2.utils.events INFO:  eta: 0:11:43  iter: 139  total_loss: 21.32  m1_loss_ce: 0.5478  m1_loss_mask: 0.195  m1_loss_dice: 1.243  m1_loss_ce_0: 0.6671  m1_loss_mask_0: 0.2215  m1_loss_dice_0: 1.47  m1_loss_ce_1: 0.7191  m1_loss_mask_1: 0.2053  m1_loss_dice_1: 1.419  m1_loss_ce_2: 0.6625  m1_loss_mask_2: 0.1977  m1_loss_dice_2: 1.288  m1_loss_ce_3: 0.5717  m1_loss_mask_3: 0.1954  m1_loss_dice_3: 1.294  m1_loss_ce_4: 0.5522  m1_loss_mask_4: 0.1943  m1_loss_dice_4: 1.284  m1_loss_ce_5: 0.5537  m1_loss_mask_5: 0.194  m1_loss_dice_5: 1.258  m1_loss_ce_6: 0.5461  m1_loss_mask_6: 0.1957  m1_loss_dice_6: 1.259  m1_loss_ce_7: 0.5569  m1_loss_mask_7: 0.1952  m1_loss_dice_7: 1.248  m1_loss_ce_8: 0.5733  m1_loss_mask_8: 0.1934  m1_loss_dice_8: 1.247    time: 0.8175  last_time: 0.8234  data_time: 0.0487  last_data_time: 0.0445   lr: 0.0001  max_mem: 19342M
[10/06 10:44:56] d2.utils.events INFO:  eta: 0:11:26  iter: 159  total_loss: 21.02  m1_loss_ce: 0.5368  m1_loss_mask: 0.1977  m1_loss_dice: 1.271  m1_loss_ce_0: 0.606  m1_loss_mask_0: 0.2232  m1_loss_dice_0: 1.56  m1_loss_ce_1: 0.6991  m1_loss_mask_1: 0.2054  m1_loss_dice_1: 1.452  m1_loss_ce_2: 0.6334  m1_loss_mask_2: 0.2015  m1_loss_dice_2: 1.358  m1_loss_ce_3: 0.6198  m1_loss_mask_3: 0.1965  m1_loss_dice_3: 1.33  m1_loss_ce_4: 0.5751  m1_loss_mask_4: 0.2019  m1_loss_dice_4: 1.32  m1_loss_ce_5: 0.5311  m1_loss_mask_5: 0.2003  m1_loss_dice_5: 1.306  m1_loss_ce_6: 0.5601  m1_loss_mask_6: 0.1958  m1_loss_dice_6: 1.297  m1_loss_ce_7: 0.5391  m1_loss_mask_7: 0.1963  m1_loss_dice_7: 1.266  m1_loss_ce_8: 0.5746  m1_loss_mask_8: 0.1963  m1_loss_dice_8: 1.276    time: 0.8164  last_time: 0.8250  data_time: 0.0477  last_data_time: 0.0410   lr: 0.0001  max_mem: 19342M
[10/06 10:45:12] d2.utils.events INFO:  eta: 0:11:08  iter: 179  total_loss: 21.29  m1_loss_ce: 0.5312  m1_loss_mask: 0.1974  m1_loss_dice: 1.308  m1_loss_ce_0: 0.6487  m1_loss_mask_0: 0.2236  m1_loss_dice_0: 1.509  m1_loss_ce_1: 0.6842  m1_loss_mask_1: 0.2104  m1_loss_dice_1: 1.429  m1_loss_ce_2: 0.626  m1_loss_mask_2: 0.2022  m1_loss_dice_2: 1.372  m1_loss_ce_3: 0.5705  m1_loss_mask_3: 0.2012  m1_loss_dice_3: 1.347  m1_loss_ce_4: 0.5461  m1_loss_mask_4: 0.2025  m1_loss_dice_4: 1.347  m1_loss_ce_5: 0.53  m1_loss_mask_5: 0.1962  m1_loss_dice_5: 1.322  m1_loss_ce_6: 0.5315  m1_loss_mask_6: 0.1989  m1_loss_dice_6: 1.314  m1_loss_ce_7: 0.5393  m1_loss_mask_7: 0.1973  m1_loss_dice_7: 1.292  m1_loss_ce_8: 0.5428  m1_loss_mask_8: 0.2006  m1_loss_dice_8: 1.322    time: 0.8165  last_time: 0.8610  data_time: 0.0536  last_data_time: 0.0837   lr: 0.0001  max_mem: 19342M
[10/06 10:45:29] d2.utils.events INFO:  eta: 0:10:53  iter: 199  total_loss: 21.34  m1_loss_ce: 0.5471  m1_loss_mask: 0.19  m1_loss_dice: 1.252  m1_loss_ce_0: 0.6526  m1_loss_mask_0: 0.2086  m1_loss_dice_0: 1.507  m1_loss_ce_1: 0.7271  m1_loss_mask_1: 0.1999  m1_loss_dice_1: 1.387  m1_loss_ce_2: 0.6664  m1_loss_mask_2: 0.1897  m1_loss_dice_2: 1.355  m1_loss_ce_3: 0.5996  m1_loss_mask_3: 0.1883  m1_loss_dice_3: 1.307  m1_loss_ce_4: 0.5368  m1_loss_mask_4: 0.1897  m1_loss_dice_4: 1.274  m1_loss_ce_5: 0.5822  m1_loss_mask_5: 0.1881  m1_loss_dice_5: 1.281  m1_loss_ce_6: 0.5223  m1_loss_mask_6: 0.1925  m1_loss_dice_6: 1.293  m1_loss_ce_7: 0.5384  m1_loss_mask_7: 0.1919  m1_loss_dice_7: 1.285  m1_loss_ce_8: 0.5584  m1_loss_mask_8: 0.1893  m1_loss_dice_8: 1.292    time: 0.8175  last_time: 0.8668  data_time: 0.0751  last_data_time: 0.0912   lr: 0.0001  max_mem: 19342M
[10/06 10:45:40] d2.engine.hooks INFO: Overall training speed: 211 iterations in 0:02:53 (0.8204 s / it)
[10/06 10:45:40] d2.engine.hooks INFO: Total training time: 0:02:53 (0:00:00 on hooks)
[10/06 10:45:40] d2.utils.events INFO:  eta: 0:10:40  iter: 213  total_loss: 19.93  m1_loss_ce: 0.4986  m1_loss_mask: 0.1922  m1_loss_dice: 1.186  m1_loss_ce_0: 0.6383  m1_loss_mask_0: 0.2224  m1_loss_dice_0: 1.406  m1_loss_ce_1: 0.6894  m1_loss_mask_1: 0.201  m1_loss_dice_1: 1.355  m1_loss_ce_2: 0.6001  m1_loss_mask_2: 0.2005  m1_loss_dice_2: 1.269  m1_loss_ce_3: 0.5554  m1_loss_mask_3: 0.2012  m1_loss_dice_3: 1.249  m1_loss_ce_4: 0.5411  m1_loss_mask_4: 0.1939  m1_loss_dice_4: 1.235  m1_loss_ce_5: 0.5057  m1_loss_mask_5: 0.1914  m1_loss_dice_5: 1.243  m1_loss_ce_6: 0.4996  m1_loss_mask_6: 0.1928  m1_loss_dice_6: 1.224  m1_loss_ce_7: 0.4875  m1_loss_mask_7: 0.1926  m1_loss_dice_7: 1.227  m1_loss_ce_8: 0.4881  m1_loss_mask_8: 0.1913  m1_loss_dice_8: 1.209    time: 0.8164  last_time: 0.8317  data_time: 0.0526  last_data_time: 0.0550   lr: 0.0001  max_mem: 19342M
[10/06 10:46:58] detectron2 INFO: Rank of current process: 0. World size: 2
[10/06 10:46:59] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/06 10:46:59] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_L1_L2_alternating_900_100_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/06 10:46:59] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_L1_L2_alternating_900_100_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_alternating_900_100
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/06 10:46:59] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_alternating_900_100
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/06 10:46:59] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_alternating_900_100/config.yaml
[10/06 10:46:59] d2.utils.env INFO: Using a generated random seed 61902889
[10/06 10:47:03] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/06 10:47:03] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/06 10:47:03] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/06 10:47:03] d2.data.build INFO: Using training sampler TrainingSampler
[10/06 10:49:00] detectron2 INFO: Rank of current process: 0. World size: 2
[10/06 10:49:01] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/06 10:49:01] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_L1_L2_alternating_900_100_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/06 10:49:01] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_L1_L2_alternating_900_100_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_alternating_900_100
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/06 10:49:01] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_alternating_900_100
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/06 10:49:01] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_alternating_900_100/config.yaml
[10/06 10:49:01] d2.utils.env INFO: Using a generated random seed 4027539
[10/06 10:49:05] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/06 10:49:05] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/06 10:49:05] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/06 10:49:05] d2.data.build INFO: Using training sampler TrainingSampler
[10/06 10:49:06] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/06 10:49:06] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/06 10:49:06] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/06 10:49:06] d2.data.build INFO: Making batched data loader with batch_size=4
[10/06 10:49:06] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/06 10:49:09] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/06 10:49:09] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/06 10:49:09] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/06 10:49:09] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/06 10:49:09] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/06 10:49:32] d2.utils.events INFO:  eta: 0:13:02  iter: 19  total_loss: 20.92  m1_loss_ce: 0.4569  m1_loss_mask: 0.1634  m1_loss_dice: 1.3  m1_loss_ce_0: 0.5793  m1_loss_mask_0: 0.1903  m1_loss_dice_0: 1.571  m1_loss_ce_1: 0.6806  m1_loss_mask_1: 0.1734  m1_loss_dice_1: 1.457  m1_loss_ce_2: 0.5924  m1_loss_mask_2: 0.1669  m1_loss_dice_2: 1.375  m1_loss_ce_3: 0.5222  m1_loss_mask_3: 0.1656  m1_loss_dice_3: 1.299  m1_loss_ce_4: 0.5299  m1_loss_mask_4: 0.1659  m1_loss_dice_4: 1.334  m1_loss_ce_5: 0.509  m1_loss_mask_5: 0.1665  m1_loss_dice_5: 1.323  m1_loss_ce_6: 0.4713  m1_loss_mask_6: 0.1665  m1_loss_dice_6: 1.316  m1_loss_ce_7: 0.5007  m1_loss_mask_7: 0.1649  m1_loss_dice_7: 1.329  m1_loss_ce_8: 0.5013  m1_loss_mask_8: 0.1643  m1_loss_dice_8: 1.329    time: 0.7985  last_time: 0.7908  data_time: 0.2696  last_data_time: 0.0453   lr: 0.0001  max_mem: 18826M
[10/06 10:49:48] d2.utils.events INFO:  eta: 0:12:39  iter: 39  total_loss: 20.08  m1_loss_ce: 0.4615  m1_loss_mask: 0.184  m1_loss_dice: 1.228  m1_loss_ce_0: 0.5716  m1_loss_mask_0: 0.2089  m1_loss_dice_0: 1.448  m1_loss_ce_1: 0.6478  m1_loss_mask_1: 0.1991  m1_loss_dice_1: 1.381  m1_loss_ce_2: 0.5785  m1_loss_mask_2: 0.194  m1_loss_dice_2: 1.324  m1_loss_ce_3: 0.5191  m1_loss_mask_3: 0.1896  m1_loss_dice_3: 1.242  m1_loss_ce_4: 0.4847  m1_loss_mask_4: 0.1906  m1_loss_dice_4: 1.263  m1_loss_ce_5: 0.4979  m1_loss_mask_5: 0.1856  m1_loss_dice_5: 1.238  m1_loss_ce_6: 0.4539  m1_loss_mask_6: 0.184  m1_loss_dice_6: 1.253  m1_loss_ce_7: 0.4673  m1_loss_mask_7: 0.1835  m1_loss_dice_7: 1.221  m1_loss_ce_8: 0.463  m1_loss_mask_8: 0.1835  m1_loss_dice_8: 1.229    time: 0.7904  last_time: 0.7129  data_time: 0.0589  last_data_time: 0.0410   lr: 0.0001  max_mem: 18826M
[10/06 10:50:04] d2.utils.events INFO:  eta: 0:12:23  iter: 59  total_loss: 19.67  m1_loss_ce: 0.5147  m1_loss_mask: 0.171  m1_loss_dice: 1.204  m1_loss_ce_0: 0.5631  m1_loss_mask_0: 0.2006  m1_loss_dice_0: 1.443  m1_loss_ce_1: 0.6645  m1_loss_mask_1: 0.1831  m1_loss_dice_1: 1.354  m1_loss_ce_2: 0.6022  m1_loss_mask_2: 0.1747  m1_loss_dice_2: 1.272  m1_loss_ce_3: 0.556  m1_loss_mask_3: 0.177  m1_loss_dice_3: 1.217  m1_loss_ce_4: 0.5194  m1_loss_mask_4: 0.1714  m1_loss_dice_4: 1.214  m1_loss_ce_5: 0.5122  m1_loss_mask_5: 0.1714  m1_loss_dice_5: 1.209  m1_loss_ce_6: 0.5206  m1_loss_mask_6: 0.1736  m1_loss_dice_6: 1.218  m1_loss_ce_7: 0.508  m1_loss_mask_7: 0.1735  m1_loss_dice_7: 1.174  m1_loss_ce_8: 0.5078  m1_loss_mask_8: 0.1708  m1_loss_dice_8: 1.178    time: 0.7887  last_time: 0.7913  data_time: 0.0514  last_data_time: 0.0875   lr: 0.0001  max_mem: 18834M
[10/06 10:50:20] d2.utils.events INFO:  eta: 0:12:08  iter: 79  total_loss: 20.93  m1_loss_ce: 0.4748  m1_loss_mask: 0.171  m1_loss_dice: 1.267  m1_loss_ce_0: 0.5925  m1_loss_mask_0: 0.1878  m1_loss_dice_0: 1.478  m1_loss_ce_1: 0.6883  m1_loss_mask_1: 0.18  m1_loss_dice_1: 1.42  m1_loss_ce_2: 0.6326  m1_loss_mask_2: 0.1735  m1_loss_dice_2: 1.363  m1_loss_ce_3: 0.5503  m1_loss_mask_3: 0.1687  m1_loss_dice_3: 1.316  m1_loss_ce_4: 0.5176  m1_loss_mask_4: 0.1699  m1_loss_dice_4: 1.369  m1_loss_ce_5: 0.5416  m1_loss_mask_5: 0.1702  m1_loss_dice_5: 1.326  m1_loss_ce_6: 0.5238  m1_loss_mask_6: 0.172  m1_loss_dice_6: 1.321  m1_loss_ce_7: 0.5076  m1_loss_mask_7: 0.1712  m1_loss_dice_7: 1.279  m1_loss_ce_8: 0.4896  m1_loss_mask_8: 0.1686  m1_loss_dice_8: 1.325    time: 0.7933  last_time: 0.8409  data_time: 0.0616  last_data_time: 0.0484   lr: 0.0001  max_mem: 19393M
[10/06 10:50:36] d2.utils.events INFO:  eta: 0:11:54  iter: 99  total_loss: 19.91  m1_loss_ce: 0.4663  m1_loss_mask: 0.1818  m1_loss_dice: 1.192  m1_loss_ce_0: 0.5444  m1_loss_mask_0: 0.2139  m1_loss_dice_0: 1.425  m1_loss_ce_1: 0.6539  m1_loss_mask_1: 0.1978  m1_loss_dice_1: 1.343  m1_loss_ce_2: 0.5622  m1_loss_mask_2: 0.1864  m1_loss_dice_2: 1.282  m1_loss_ce_3: 0.5201  m1_loss_mask_3: 0.185  m1_loss_dice_3: 1.202  m1_loss_ce_4: 0.4997  m1_loss_mask_4: 0.1858  m1_loss_dice_4: 1.223  m1_loss_ce_5: 0.5027  m1_loss_mask_5: 0.1835  m1_loss_dice_5: 1.215  m1_loss_ce_6: 0.5179  m1_loss_mask_6: 0.1807  m1_loss_dice_6: 1.208  m1_loss_ce_7: 0.4828  m1_loss_mask_7: 0.1812  m1_loss_dice_7: 1.212  m1_loss_ce_8: 0.4801  m1_loss_mask_8: 0.177  m1_loss_dice_8: 1.187    time: 0.7971  last_time: 0.8026  data_time: 0.0569  last_data_time: 0.0517   lr: 0.0001  max_mem: 19393M
[10/06 10:50:52] d2.utils.events INFO:  eta: 0:11:39  iter: 119  total_loss: 19.22  m1_loss_ce: 0.4513  m1_loss_mask: 0.1697  m1_loss_dice: 1.213  m1_loss_ce_0: 0.544  m1_loss_mask_0: 0.2007  m1_loss_dice_0: 1.385  m1_loss_ce_1: 0.6207  m1_loss_mask_1: 0.1832  m1_loss_dice_1: 1.317  m1_loss_ce_2: 0.5799  m1_loss_mask_2: 0.1755  m1_loss_dice_2: 1.264  m1_loss_ce_3: 0.5159  m1_loss_mask_3: 0.1727  m1_loss_dice_3: 1.205  m1_loss_ce_4: 0.5042  m1_loss_mask_4: 0.1724  m1_loss_dice_4: 1.188  m1_loss_ce_5: 0.476  m1_loss_mask_5: 0.1694  m1_loss_dice_5: 1.221  m1_loss_ce_6: 0.5016  m1_loss_mask_6: 0.1696  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.4927  m1_loss_mask_7: 0.1674  m1_loss_dice_7: 1.193  m1_loss_ce_8: 0.4704  m1_loss_mask_8: 0.169  m1_loss_dice_8: 1.172    time: 0.7977  last_time: 0.8005  data_time: 0.0523  last_data_time: 0.0465   lr: 0.0001  max_mem: 19393M
[10/06 10:51:08] d2.utils.events INFO:  eta: 0:11:23  iter: 139  total_loss: 19.78  m1_loss_ce: 0.5023  m1_loss_mask: 0.17  m1_loss_dice: 1.204  m1_loss_ce_0: 0.5532  m1_loss_mask_0: 0.2009  m1_loss_dice_0: 1.416  m1_loss_ce_1: 0.6785  m1_loss_mask_1: 0.1827  m1_loss_dice_1: 1.34  m1_loss_ce_2: 0.5746  m1_loss_mask_2: 0.1752  m1_loss_dice_2: 1.298  m1_loss_ce_3: 0.529  m1_loss_mask_3: 0.1748  m1_loss_dice_3: 1.222  m1_loss_ce_4: 0.5083  m1_loss_mask_4: 0.171  m1_loss_dice_4: 1.232  m1_loss_ce_5: 0.4998  m1_loss_mask_5: 0.1727  m1_loss_dice_5: 1.238  m1_loss_ce_6: 0.5071  m1_loss_mask_6: 0.1693  m1_loss_dice_6: 1.223  m1_loss_ce_7: 0.5078  m1_loss_mask_7: 0.1704  m1_loss_dice_7: 1.227  m1_loss_ce_8: 0.5192  m1_loss_mask_8: 0.1692  m1_loss_dice_8: 1.217    time: 0.7963  last_time: 0.7856  data_time: 0.0581  last_data_time: 0.1115   lr: 0.0001  max_mem: 19393M
[10/06 10:51:24] d2.utils.events INFO:  eta: 0:11:07  iter: 159  total_loss: 20.2  m1_loss_ce: 0.4845  m1_loss_mask: 0.1638  m1_loss_dice: 1.243  m1_loss_ce_0: 0.5588  m1_loss_mask_0: 0.192  m1_loss_dice_0: 1.465  m1_loss_ce_1: 0.6219  m1_loss_mask_1: 0.1819  m1_loss_dice_1: 1.367  m1_loss_ce_2: 0.5704  m1_loss_mask_2: 0.1704  m1_loss_dice_2: 1.335  m1_loss_ce_3: 0.5143  m1_loss_mask_3: 0.1688  m1_loss_dice_3: 1.299  m1_loss_ce_4: 0.4555  m1_loss_mask_4: 0.1671  m1_loss_dice_4: 1.27  m1_loss_ce_5: 0.474  m1_loss_mask_5: 0.1654  m1_loss_dice_5: 1.268  m1_loss_ce_6: 0.4842  m1_loss_mask_6: 0.165  m1_loss_dice_6: 1.235  m1_loss_ce_7: 0.458  m1_loss_mask_7: 0.1667  m1_loss_dice_7: 1.24  m1_loss_ce_8: 0.4417  m1_loss_mask_8: 0.1634  m1_loss_dice_8: 1.242    time: 0.7961  last_time: 0.8341  data_time: 0.0475  last_data_time: 0.0447   lr: 0.0001  max_mem: 19393M
[10/06 10:51:40] d2.utils.events INFO:  eta: 0:10:51  iter: 179  total_loss: 19.57  m1_loss_ce: 0.4582  m1_loss_mask: 0.1739  m1_loss_dice: 1.21  m1_loss_ce_0: 0.5724  m1_loss_mask_0: 0.199  m1_loss_dice_0: 1.415  m1_loss_ce_1: 0.6404  m1_loss_mask_1: 0.1838  m1_loss_dice_1: 1.338  m1_loss_ce_2: 0.5651  m1_loss_mask_2: 0.1775  m1_loss_dice_2: 1.295  m1_loss_ce_3: 0.5067  m1_loss_mask_3: 0.1729  m1_loss_dice_3: 1.207  m1_loss_ce_4: 0.5115  m1_loss_mask_4: 0.1737  m1_loss_dice_4: 1.198  m1_loss_ce_5: 0.4855  m1_loss_mask_5: 0.1727  m1_loss_dice_5: 1.223  m1_loss_ce_6: 0.4533  m1_loss_mask_6: 0.1718  m1_loss_dice_6: 1.197  m1_loss_ce_7: 0.4811  m1_loss_mask_7: 0.1712  m1_loss_dice_7: 1.217  m1_loss_ce_8: 0.5046  m1_loss_mask_8: 0.1716  m1_loss_dice_8: 1.2    time: 0.7959  last_time: 0.7661  data_time: 0.0542  last_data_time: 0.0457   lr: 0.0001  max_mem: 19393M
[10/06 10:51:56] d2.utils.events INFO:  eta: 0:10:35  iter: 199  total_loss: 20.41  m1_loss_ce: 0.4976  m1_loss_mask: 0.1652  m1_loss_dice: 1.228  m1_loss_ce_0: 0.5679  m1_loss_mask_0: 0.186  m1_loss_dice_0: 1.438  m1_loss_ce_1: 0.6609  m1_loss_mask_1: 0.1766  m1_loss_dice_1: 1.361  m1_loss_ce_2: 0.563  m1_loss_mask_2: 0.1705  m1_loss_dice_2: 1.308  m1_loss_ce_3: 0.5637  m1_loss_mask_3: 0.1654  m1_loss_dice_3: 1.24  m1_loss_ce_4: 0.5235  m1_loss_mask_4: 0.165  m1_loss_dice_4: 1.221  m1_loss_ce_5: 0.5011  m1_loss_mask_5: 0.163  m1_loss_dice_5: 1.237  m1_loss_ce_6: 0.5055  m1_loss_mask_6: 0.1657  m1_loss_dice_6: 1.235  m1_loss_ce_7: 0.5293  m1_loss_mask_7: 0.1627  m1_loss_dice_7: 1.213  m1_loss_ce_8: 0.5226  m1_loss_mask_8: 0.1611  m1_loss_dice_8: 1.215    time: 0.7949  last_time: 0.7061  data_time: 0.0450  last_data_time: 0.0601   lr: 0.0001  max_mem: 19393M
[10/06 10:52:12] d2.utils.events INFO:  eta: 0:10:19  iter: 219  total_loss: 19.82  m1_loss_ce: 0.4292  m1_loss_mask: 0.1628  m1_loss_dice: 1.272  m1_loss_ce_0: 0.5832  m1_loss_mask_0: 0.191  m1_loss_dice_0: 1.477  m1_loss_ce_1: 0.6145  m1_loss_mask_1: 0.1682  m1_loss_dice_1: 1.385  m1_loss_ce_2: 0.5799  m1_loss_mask_2: 0.1641  m1_loss_dice_2: 1.369  m1_loss_ce_3: 0.5621  m1_loss_mask_3: 0.1652  m1_loss_dice_3: 1.287  m1_loss_ce_4: 0.5002  m1_loss_mask_4: 0.1639  m1_loss_dice_4: 1.247  m1_loss_ce_5: 0.4954  m1_loss_mask_5: 0.1626  m1_loss_dice_5: 1.246  m1_loss_ce_6: 0.4913  m1_loss_mask_6: 0.1625  m1_loss_dice_6: 1.235  m1_loss_ce_7: 0.4707  m1_loss_mask_7: 0.1616  m1_loss_dice_7: 1.267  m1_loss_ce_8: 0.4595  m1_loss_mask_8: 0.1593  m1_loss_dice_8: 1.265    time: 0.7955  last_time: 0.7903  data_time: 0.0602  last_data_time: 0.0457   lr: 0.0001  max_mem: 19393M
[10/06 10:52:28] d2.utils.events INFO:  eta: 0:10:03  iter: 239  total_loss: 18.94  m1_loss_ce: 0.4189  m1_loss_mask: 0.1629  m1_loss_dice: 1.195  m1_loss_ce_0: 0.5515  m1_loss_mask_0: 0.1877  m1_loss_dice_0: 1.393  m1_loss_ce_1: 0.5695  m1_loss_mask_1: 0.1751  m1_loss_dice_1: 1.287  m1_loss_ce_2: 0.5633  m1_loss_mask_2: 0.1692  m1_loss_dice_2: 1.229  m1_loss_ce_3: 0.5121  m1_loss_mask_3: 0.1681  m1_loss_dice_3: 1.232  m1_loss_ce_4: 0.4513  m1_loss_mask_4: 0.1663  m1_loss_dice_4: 1.208  m1_loss_ce_5: 0.4636  m1_loss_mask_5: 0.1645  m1_loss_dice_5: 1.21  m1_loss_ce_6: 0.421  m1_loss_mask_6: 0.1623  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.4374  m1_loss_mask_7: 0.1628  m1_loss_dice_7: 1.204  m1_loss_ce_8: 0.4321  m1_loss_mask_8: 0.162  m1_loss_dice_8: 1.182    time: 0.7952  last_time: 0.8345  data_time: 0.0496  last_data_time: 0.0444   lr: 0.0001  max_mem: 19393M
[10/06 10:52:44] d2.utils.events INFO:  eta: 0:09:48  iter: 259  total_loss: 20.07  m1_loss_ce: 0.4399  m1_loss_mask: 0.1697  m1_loss_dice: 1.27  m1_loss_ce_0: 0.5597  m1_loss_mask_0: 0.1864  m1_loss_dice_0: 1.45  m1_loss_ce_1: 0.6044  m1_loss_mask_1: 0.1781  m1_loss_dice_1: 1.371  m1_loss_ce_2: 0.5708  m1_loss_mask_2: 0.1715  m1_loss_dice_2: 1.294  m1_loss_ce_3: 0.5069  m1_loss_mask_3: 0.1706  m1_loss_dice_3: 1.292  m1_loss_ce_4: 0.4925  m1_loss_mask_4: 0.1713  m1_loss_dice_4: 1.26  m1_loss_ce_5: 0.4586  m1_loss_mask_5: 0.1686  m1_loss_dice_5: 1.313  m1_loss_ce_6: 0.4334  m1_loss_mask_6: 0.1696  m1_loss_dice_6: 1.302  m1_loss_ce_7: 0.4538  m1_loss_mask_7: 0.1685  m1_loss_dice_7: 1.285  m1_loss_ce_8: 0.4385  m1_loss_mask_8: 0.1681  m1_loss_dice_8: 1.258    time: 0.7949  last_time: 0.8267  data_time: 0.0538  last_data_time: 0.0403   lr: 0.0001  max_mem: 19393M
[10/06 10:53:00] d2.utils.events INFO:  eta: 0:09:32  iter: 279  total_loss: 20.96  m1_loss_ce: 0.4654  m1_loss_mask: 0.1756  m1_loss_dice: 1.308  m1_loss_ce_0: 0.615  m1_loss_mask_0: 0.2034  m1_loss_dice_0: 1.495  m1_loss_ce_1: 0.673  m1_loss_mask_1: 0.1891  m1_loss_dice_1: 1.402  m1_loss_ce_2: 0.6234  m1_loss_mask_2: 0.1803  m1_loss_dice_2: 1.354  m1_loss_ce_3: 0.5659  m1_loss_mask_3: 0.1761  m1_loss_dice_3: 1.289  m1_loss_ce_4: 0.5495  m1_loss_mask_4: 0.1755  m1_loss_dice_4: 1.294  m1_loss_ce_5: 0.5139  m1_loss_mask_5: 0.1754  m1_loss_dice_5: 1.28  m1_loss_ce_6: 0.5019  m1_loss_mask_6: 0.1771  m1_loss_dice_6: 1.284  m1_loss_ce_7: 0.49  m1_loss_mask_7: 0.1725  m1_loss_dice_7: 1.279  m1_loss_ce_8: 0.4623  m1_loss_mask_8: 0.1748  m1_loss_dice_8: 1.247    time: 0.7962  last_time: 0.7867  data_time: 0.0518  last_data_time: 0.0587   lr: 0.0001  max_mem: 19690M
[10/06 10:53:16] d2.utils.events INFO:  eta: 0:09:17  iter: 299  total_loss: 19.41  m1_loss_ce: 0.4969  m1_loss_mask: 0.1639  m1_loss_dice: 1.212  m1_loss_ce_0: 0.62  m1_loss_mask_0: 0.1842  m1_loss_dice_0: 1.393  m1_loss_ce_1: 0.6557  m1_loss_mask_1: 0.1712  m1_loss_dice_1: 1.275  m1_loss_ce_2: 0.6059  m1_loss_mask_2: 0.1743  m1_loss_dice_2: 1.278  m1_loss_ce_3: 0.5663  m1_loss_mask_3: 0.169  m1_loss_dice_3: 1.217  m1_loss_ce_4: 0.5607  m1_loss_mask_4: 0.1659  m1_loss_dice_4: 1.217  m1_loss_ce_5: 0.5471  m1_loss_mask_5: 0.1648  m1_loss_dice_5: 1.224  m1_loss_ce_6: 0.5506  m1_loss_mask_6: 0.1655  m1_loss_dice_6: 1.222  m1_loss_ce_7: 0.505  m1_loss_mask_7: 0.1624  m1_loss_dice_7: 1.174  m1_loss_ce_8: 0.4781  m1_loss_mask_8: 0.1639  m1_loss_dice_8: 1.157    time: 0.7968  last_time: 0.8019  data_time: 0.0462  last_data_time: 0.0437   lr: 0.0001  max_mem: 19690M
[10/06 10:53:32] d2.utils.events INFO:  eta: 0:09:01  iter: 319  total_loss: 19.93  m1_loss_ce: 0.4435  m1_loss_mask: 0.1634  m1_loss_dice: 1.237  m1_loss_ce_0: 0.598  m1_loss_mask_0: 0.1964  m1_loss_dice_0: 1.465  m1_loss_ce_1: 0.6435  m1_loss_mask_1: 0.1883  m1_loss_dice_1: 1.357  m1_loss_ce_2: 0.5801  m1_loss_mask_2: 0.1787  m1_loss_dice_2: 1.289  m1_loss_ce_3: 0.5496  m1_loss_mask_3: 0.1686  m1_loss_dice_3: 1.303  m1_loss_ce_4: 0.5339  m1_loss_mask_4: 0.1696  m1_loss_dice_4: 1.27  m1_loss_ce_5: 0.5137  m1_loss_mask_5: 0.1685  m1_loss_dice_5: 1.219  m1_loss_ce_6: 0.5053  m1_loss_mask_6: 0.1672  m1_loss_dice_6: 1.229  m1_loss_ce_7: 0.4906  m1_loss_mask_7: 0.168  m1_loss_dice_7: 1.218  m1_loss_ce_8: 0.5053  m1_loss_mask_8: 0.1686  m1_loss_dice_8: 1.236    time: 0.7974  last_time: 0.8090  data_time: 0.0497  last_data_time: 0.0380   lr: 0.0001  max_mem: 19690M
[10/06 10:53:49] d2.utils.events INFO:  eta: 0:08:46  iter: 339  total_loss: 20.1  m1_loss_ce: 0.4605  m1_loss_mask: 0.1635  m1_loss_dice: 1.24  m1_loss_ce_0: 0.5435  m1_loss_mask_0: 0.1934  m1_loss_dice_0: 1.456  m1_loss_ce_1: 0.5965  m1_loss_mask_1: 0.1779  m1_loss_dice_1: 1.39  m1_loss_ce_2: 0.5775  m1_loss_mask_2: 0.171  m1_loss_dice_2: 1.348  m1_loss_ce_3: 0.5306  m1_loss_mask_3: 0.1684  m1_loss_dice_3: 1.293  m1_loss_ce_4: 0.4999  m1_loss_mask_4: 0.1678  m1_loss_dice_4: 1.258  m1_loss_ce_5: 0.5078  m1_loss_mask_5: 0.1648  m1_loss_dice_5: 1.267  m1_loss_ce_6: 0.4792  m1_loss_mask_6: 0.1668  m1_loss_dice_6: 1.262  m1_loss_ce_7: 0.4561  m1_loss_mask_7: 0.1653  m1_loss_dice_7: 1.256  m1_loss_ce_8: 0.4565  m1_loss_mask_8: 0.1641  m1_loss_dice_8: 1.261    time: 0.7987  last_time: 0.8127  data_time: 0.0560  last_data_time: 0.0447   lr: 0.0001  max_mem: 19690M
[10/06 10:54:05] d2.utils.events INFO:  eta: 0:08:30  iter: 359  total_loss: 20.52  m1_loss_ce: 0.4763  m1_loss_mask: 0.1749  m1_loss_dice: 1.28  m1_loss_ce_0: 0.5733  m1_loss_mask_0: 0.2098  m1_loss_dice_0: 1.49  m1_loss_ce_1: 0.6266  m1_loss_mask_1: 0.1939  m1_loss_dice_1: 1.406  m1_loss_ce_2: 0.5933  m1_loss_mask_2: 0.1857  m1_loss_dice_2: 1.367  m1_loss_ce_3: 0.5487  m1_loss_mask_3: 0.1821  m1_loss_dice_3: 1.309  m1_loss_ce_4: 0.4837  m1_loss_mask_4: 0.1787  m1_loss_dice_4: 1.3  m1_loss_ce_5: 0.5114  m1_loss_mask_5: 0.1751  m1_loss_dice_5: 1.271  m1_loss_ce_6: 0.4609  m1_loss_mask_6: 0.1748  m1_loss_dice_6: 1.267  m1_loss_ce_7: 0.4724  m1_loss_mask_7: 0.1729  m1_loss_dice_7: 1.27  m1_loss_ce_8: 0.4921  m1_loss_mask_8: 0.1728  m1_loss_dice_8: 1.261    time: 0.7982  last_time: 0.8147  data_time: 0.0504  last_data_time: 0.0443   lr: 0.0001  max_mem: 19690M
[10/06 10:54:20] d2.utils.events INFO:  eta: 0:08:15  iter: 379  total_loss: 19.89  m1_loss_ce: 0.451  m1_loss_mask: 0.1679  m1_loss_dice: 1.272  m1_loss_ce_0: 0.5486  m1_loss_mask_0: 0.1911  m1_loss_dice_0: 1.455  m1_loss_ce_1: 0.641  m1_loss_mask_1: 0.1777  m1_loss_dice_1: 1.379  m1_loss_ce_2: 0.5605  m1_loss_mask_2: 0.1735  m1_loss_dice_2: 1.314  m1_loss_ce_3: 0.5261  m1_loss_mask_3: 0.1665  m1_loss_dice_3: 1.294  m1_loss_ce_4: 0.4939  m1_loss_mask_4: 0.1651  m1_loss_dice_4: 1.289  m1_loss_ce_5: 0.4822  m1_loss_mask_5: 0.163  m1_loss_dice_5: 1.279  m1_loss_ce_6: 0.4744  m1_loss_mask_6: 0.1665  m1_loss_dice_6: 1.273  m1_loss_ce_7: 0.4888  m1_loss_mask_7: 0.1691  m1_loss_dice_7: 1.263  m1_loss_ce_8: 0.4762  m1_loss_mask_8: 0.1651  m1_loss_dice_8: 1.244    time: 0.7977  last_time: 0.8567  data_time: 0.0479  last_data_time: 0.0444   lr: 0.0001  max_mem: 19690M
[10/06 10:54:37] d2.utils.events INFO:  eta: 0:07:59  iter: 399  total_loss: 19.18  m1_loss_ce: 0.4423  m1_loss_mask: 0.1627  m1_loss_dice: 1.215  m1_loss_ce_0: 0.5418  m1_loss_mask_0: 0.1848  m1_loss_dice_0: 1.406  m1_loss_ce_1: 0.6338  m1_loss_mask_1: 0.1677  m1_loss_dice_1: 1.309  m1_loss_ce_2: 0.5448  m1_loss_mask_2: 0.1679  m1_loss_dice_2: 1.248  m1_loss_ce_3: 0.4678  m1_loss_mask_3: 0.1621  m1_loss_dice_3: 1.211  m1_loss_ce_4: 0.471  m1_loss_mask_4: 0.1631  m1_loss_dice_4: 1.228  m1_loss_ce_5: 0.4364  m1_loss_mask_5: 0.1602  m1_loss_dice_5: 1.212  m1_loss_ce_6: 0.4171  m1_loss_mask_6: 0.1634  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.4328  m1_loss_mask_7: 0.161  m1_loss_dice_7: 1.189  m1_loss_ce_8: 0.4501  m1_loss_mask_8: 0.1614  m1_loss_dice_8: 1.188    time: 0.7979  last_time: 0.7986  data_time: 0.0488  last_data_time: 0.0446   lr: 0.0001  max_mem: 19690M
[10/06 10:54:53] d2.utils.events INFO:  eta: 0:07:43  iter: 419  total_loss: 20.04  m1_loss_ce: 0.4329  m1_loss_mask: 0.1615  m1_loss_dice: 1.293  m1_loss_ce_0: 0.524  m1_loss_mask_0: 0.188  m1_loss_dice_0: 1.482  m1_loss_ce_1: 0.5714  m1_loss_mask_1: 0.1774  m1_loss_dice_1: 1.376  m1_loss_ce_2: 0.5499  m1_loss_mask_2: 0.1685  m1_loss_dice_2: 1.309  m1_loss_ce_3: 0.5121  m1_loss_mask_3: 0.1712  m1_loss_dice_3: 1.29  m1_loss_ce_4: 0.4712  m1_loss_mask_4: 0.1723  m1_loss_dice_4: 1.288  m1_loss_ce_5: 0.4774  m1_loss_mask_5: 0.1684  m1_loss_dice_5: 1.277  m1_loss_ce_6: 0.5102  m1_loss_mask_6: 0.1622  m1_loss_dice_6: 1.266  m1_loss_ce_7: 0.4525  m1_loss_mask_7: 0.1616  m1_loss_dice_7: 1.256  m1_loss_ce_8: 0.46  m1_loss_mask_8: 0.1633  m1_loss_dice_8: 1.282    time: 0.7988  last_time: 0.8084  data_time: 0.0535  last_data_time: 0.0661   lr: 0.0001  max_mem: 19690M
[10/06 10:55:09] d2.utils.events INFO:  eta: 0:07:28  iter: 439  total_loss: 19.85  m1_loss_ce: 0.4766  m1_loss_mask: 0.1606  m1_loss_dice: 1.27  m1_loss_ce_0: 0.5645  m1_loss_mask_0: 0.1909  m1_loss_dice_0: 1.487  m1_loss_ce_1: 0.6139  m1_loss_mask_1: 0.1756  m1_loss_dice_1: 1.385  m1_loss_ce_2: 0.5608  m1_loss_mask_2: 0.169  m1_loss_dice_2: 1.375  m1_loss_ce_3: 0.5427  m1_loss_mask_3: 0.1624  m1_loss_dice_3: 1.258  m1_loss_ce_4: 0.5301  m1_loss_mask_4: 0.1644  m1_loss_dice_4: 1.257  m1_loss_ce_5: 0.4758  m1_loss_mask_5: 0.1598  m1_loss_dice_5: 1.283  m1_loss_ce_6: 0.5109  m1_loss_mask_6: 0.1624  m1_loss_dice_6: 1.277  m1_loss_ce_7: 0.4984  m1_loss_mask_7: 0.1607  m1_loss_dice_7: 1.242  m1_loss_ce_8: 0.489  m1_loss_mask_8: 0.1611  m1_loss_dice_8: 1.27    time: 0.7992  last_time: 0.7992  data_time: 0.0534  last_data_time: 0.0441   lr: 0.0001  max_mem: 19690M
[10/06 10:55:26] d2.utils.events INFO:  eta: 0:07:12  iter: 459  total_loss: 20.08  m1_loss_ce: 0.4447  m1_loss_mask: 0.1491  m1_loss_dice: 1.257  m1_loss_ce_0: 0.5403  m1_loss_mask_0: 0.1769  m1_loss_dice_0: 1.453  m1_loss_ce_1: 0.6081  m1_loss_mask_1: 0.1627  m1_loss_dice_1: 1.383  m1_loss_ce_2: 0.5812  m1_loss_mask_2: 0.1559  m1_loss_dice_2: 1.348  m1_loss_ce_3: 0.5119  m1_loss_mask_3: 0.1532  m1_loss_dice_3: 1.243  m1_loss_ce_4: 0.5159  m1_loss_mask_4: 0.1517  m1_loss_dice_4: 1.253  m1_loss_ce_5: 0.4733  m1_loss_mask_5: 0.1522  m1_loss_dice_5: 1.242  m1_loss_ce_6: 0.482  m1_loss_mask_6: 0.1503  m1_loss_dice_6: 1.243  m1_loss_ce_7: 0.4554  m1_loss_mask_7: 0.1493  m1_loss_dice_7: 1.24  m1_loss_ce_8: 0.4585  m1_loss_mask_8: 0.1492  m1_loss_dice_8: 1.255    time: 0.8004  last_time: 0.8152  data_time: 0.0639  last_data_time: 0.0443   lr: 0.0001  max_mem: 19690M
[10/06 10:55:42] d2.utils.events INFO:  eta: 0:06:56  iter: 479  total_loss: 18.73  m1_loss_ce: 0.4653  m1_loss_mask: 0.165  m1_loss_dice: 1.188  m1_loss_ce_0: 0.5406  m1_loss_mask_0: 0.1894  m1_loss_dice_0: 1.385  m1_loss_ce_1: 0.6001  m1_loss_mask_1: 0.1779  m1_loss_dice_1: 1.316  m1_loss_ce_2: 0.5547  m1_loss_mask_2: 0.1722  m1_loss_dice_2: 1.23  m1_loss_ce_3: 0.5131  m1_loss_mask_3: 0.1686  m1_loss_dice_3: 1.181  m1_loss_ce_4: 0.4935  m1_loss_mask_4: 0.1655  m1_loss_dice_4: 1.166  m1_loss_ce_5: 0.465  m1_loss_mask_5: 0.1648  m1_loss_dice_5: 1.161  m1_loss_ce_6: 0.4293  m1_loss_mask_6: 0.164  m1_loss_dice_6: 1.137  m1_loss_ce_7: 0.4576  m1_loss_mask_7: 0.1643  m1_loss_dice_7: 1.151  m1_loss_ce_8: 0.4309  m1_loss_mask_8: 0.1649  m1_loss_dice_8: 1.153    time: 0.8003  last_time: 0.8032  data_time: 0.0472  last_data_time: 0.0423   lr: 0.0001  max_mem: 19690M
[10/06 10:55:58] d2.utils.events INFO:  eta: 0:06:40  iter: 499  total_loss: 18.77  m1_loss_ce: 0.4494  m1_loss_mask: 0.157  m1_loss_dice: 1.147  m1_loss_ce_0: 0.5675  m1_loss_mask_0: 0.1857  m1_loss_dice_0: 1.368  m1_loss_ce_1: 0.6205  m1_loss_mask_1: 0.1706  m1_loss_dice_1: 1.289  m1_loss_ce_2: 0.5387  m1_loss_mask_2: 0.1642  m1_loss_dice_2: 1.221  m1_loss_ce_3: 0.5121  m1_loss_mask_3: 0.1598  m1_loss_dice_3: 1.191  m1_loss_ce_4: 0.4743  m1_loss_mask_4: 0.1567  m1_loss_dice_4: 1.167  m1_loss_ce_5: 0.457  m1_loss_mask_5: 0.1559  m1_loss_dice_5: 1.154  m1_loss_ce_6: 0.4619  m1_loss_mask_6: 0.1587  m1_loss_dice_6: 1.172  m1_loss_ce_7: 0.4791  m1_loss_mask_7: 0.1568  m1_loss_dice_7: 1.165  m1_loss_ce_8: 0.4531  m1_loss_mask_8: 0.1581  m1_loss_dice_8: 1.161    time: 0.8003  last_time: 0.7882  data_time: 0.0507  last_data_time: 0.0410   lr: 0.0001  max_mem: 19690M
[10/06 10:56:14] d2.utils.events INFO:  eta: 0:06:24  iter: 519  total_loss: 19.37  m1_loss_ce: 0.4382  m1_loss_mask: 0.1479  m1_loss_dice: 1.213  m1_loss_ce_0: 0.5358  m1_loss_mask_0: 0.1731  m1_loss_dice_0: 1.44  m1_loss_ce_1: 0.6008  m1_loss_mask_1: 0.1639  m1_loss_dice_1: 1.338  m1_loss_ce_2: 0.5336  m1_loss_mask_2: 0.1551  m1_loss_dice_2: 1.33  m1_loss_ce_3: 0.4813  m1_loss_mask_3: 0.1517  m1_loss_dice_3: 1.265  m1_loss_ce_4: 0.4606  m1_loss_mask_4: 0.1515  m1_loss_dice_4: 1.281  m1_loss_ce_5: 0.4521  m1_loss_mask_5: 0.1484  m1_loss_dice_5: 1.241  m1_loss_ce_6: 0.4573  m1_loss_mask_6: 0.1482  m1_loss_dice_6: 1.228  m1_loss_ce_7: 0.4385  m1_loss_mask_7: 0.1481  m1_loss_dice_7: 1.25  m1_loss_ce_8: 0.4375  m1_loss_mask_8: 0.1485  m1_loss_dice_8: 1.215    time: 0.8012  last_time: 0.8651  data_time: 0.0641  last_data_time: 0.1765   lr: 0.0001  max_mem: 19690M
[10/06 10:56:31] d2.utils.events INFO:  eta: 0:06:08  iter: 539  total_loss: 19.07  m1_loss_ce: 0.4648  m1_loss_mask: 0.1677  m1_loss_dice: 1.174  m1_loss_ce_0: 0.5454  m1_loss_mask_0: 0.2059  m1_loss_dice_0: 1.399  m1_loss_ce_1: 0.598  m1_loss_mask_1: 0.195  m1_loss_dice_1: 1.288  m1_loss_ce_2: 0.5322  m1_loss_mask_2: 0.1797  m1_loss_dice_2: 1.237  m1_loss_ce_3: 0.4809  m1_loss_mask_3: 0.177  m1_loss_dice_3: 1.186  m1_loss_ce_4: 0.48  m1_loss_mask_4: 0.1732  m1_loss_dice_4: 1.191  m1_loss_ce_5: 0.4469  m1_loss_mask_5: 0.1714  m1_loss_dice_5: 1.22  m1_loss_ce_6: 0.4616  m1_loss_mask_6: 0.1715  m1_loss_dice_6: 1.206  m1_loss_ce_7: 0.45  m1_loss_mask_7: 0.1686  m1_loss_dice_7: 1.201  m1_loss_ce_8: 0.4564  m1_loss_mask_8: 0.1698  m1_loss_dice_8: 1.187    time: 0.8017  last_time: 0.8406  data_time: 0.0667  last_data_time: 0.0456   lr: 0.0001  max_mem: 19690M
[10/06 10:56:47] d2.utils.events INFO:  eta: 0:05:52  iter: 559  total_loss: 19.38  m1_loss_ce: 0.4739  m1_loss_mask: 0.1703  m1_loss_dice: 1.22  m1_loss_ce_0: 0.5661  m1_loss_mask_0: 0.2113  m1_loss_dice_0: 1.376  m1_loss_ce_1: 0.6375  m1_loss_mask_1: 0.1884  m1_loss_dice_1: 1.348  m1_loss_ce_2: 0.5657  m1_loss_mask_2: 0.1778  m1_loss_dice_2: 1.247  m1_loss_ce_3: 0.5121  m1_loss_mask_3: 0.1733  m1_loss_dice_3: 1.235  m1_loss_ce_4: 0.5273  m1_loss_mask_4: 0.1739  m1_loss_dice_4: 1.218  m1_loss_ce_5: 0.4791  m1_loss_mask_5: 0.1709  m1_loss_dice_5: 1.207  m1_loss_ce_6: 0.4761  m1_loss_mask_6: 0.172  m1_loss_dice_6: 1.181  m1_loss_ce_7: 0.4571  m1_loss_mask_7: 0.1696  m1_loss_dice_7: 1.217  m1_loss_ce_8: 0.4937  m1_loss_mask_8: 0.1725  m1_loss_dice_8: 1.223    time: 0.8017  last_time: 0.8043  data_time: 0.0556  last_data_time: 0.0429   lr: 0.0001  max_mem: 19690M
[10/06 10:57:03] d2.utils.events INFO:  eta: 0:05:36  iter: 579  total_loss: 19.79  m1_loss_ce: 0.4674  m1_loss_mask: 0.1563  m1_loss_dice: 1.229  m1_loss_ce_0: 0.5876  m1_loss_mask_0: 0.1839  m1_loss_dice_0: 1.437  m1_loss_ce_1: 0.6512  m1_loss_mask_1: 0.1701  m1_loss_dice_1: 1.385  m1_loss_ce_2: 0.5847  m1_loss_mask_2: 0.162  m1_loss_dice_2: 1.317  m1_loss_ce_3: 0.5027  m1_loss_mask_3: 0.1597  m1_loss_dice_3: 1.257  m1_loss_ce_4: 0.5187  m1_loss_mask_4: 0.1583  m1_loss_dice_4: 1.242  m1_loss_ce_5: 0.4884  m1_loss_mask_5: 0.159  m1_loss_dice_5: 1.242  m1_loss_ce_6: 0.4757  m1_loss_mask_6: 0.1549  m1_loss_dice_6: 1.208  m1_loss_ce_7: 0.4969  m1_loss_mask_7: 0.1551  m1_loss_dice_7: 1.189  m1_loss_ce_8: 0.4552  m1_loss_mask_8: 0.1567  m1_loss_dice_8: 1.241    time: 0.8014  last_time: 0.7843  data_time: 0.0471  last_data_time: 0.0439   lr: 0.0001  max_mem: 19690M
[10/06 10:57:19] d2.utils.events INFO:  eta: 0:05:20  iter: 599  total_loss: 19.17  m1_loss_ce: 0.4347  m1_loss_mask: 0.16  m1_loss_dice: 1.191  m1_loss_ce_0: 0.5316  m1_loss_mask_0: 0.1832  m1_loss_dice_0: 1.42  m1_loss_ce_1: 0.6158  m1_loss_mask_1: 0.1716  m1_loss_dice_1: 1.33  m1_loss_ce_2: 0.5523  m1_loss_mask_2: 0.1662  m1_loss_dice_2: 1.275  m1_loss_ce_3: 0.5044  m1_loss_mask_3: 0.1671  m1_loss_dice_3: 1.239  m1_loss_ce_4: 0.4753  m1_loss_mask_4: 0.1641  m1_loss_dice_4: 1.209  m1_loss_ce_5: 0.454  m1_loss_mask_5: 0.1647  m1_loss_dice_5: 1.207  m1_loss_ce_6: 0.4487  m1_loss_mask_6: 0.1612  m1_loss_dice_6: 1.217  m1_loss_ce_7: 0.4384  m1_loss_mask_7: 0.1609  m1_loss_dice_7: 1.175  m1_loss_ce_8: 0.4534  m1_loss_mask_8: 0.1594  m1_loss_dice_8: 1.186    time: 0.8017  last_time: 0.8351  data_time: 0.0694  last_data_time: 0.1014   lr: 0.0001  max_mem: 19690M
[10/06 10:57:35] d2.utils.events INFO:  eta: 0:05:04  iter: 619  total_loss: 18.73  m1_loss_ce: 0.4433  m1_loss_mask: 0.1624  m1_loss_dice: 1.166  m1_loss_ce_0: 0.5051  m1_loss_mask_0: 0.1923  m1_loss_dice_0: 1.361  m1_loss_ce_1: 0.6415  m1_loss_mask_1: 0.1749  m1_loss_dice_1: 1.258  m1_loss_ce_2: 0.548  m1_loss_mask_2: 0.1713  m1_loss_dice_2: 1.207  m1_loss_ce_3: 0.5065  m1_loss_mask_3: 0.1669  m1_loss_dice_3: 1.18  m1_loss_ce_4: 0.4756  m1_loss_mask_4: 0.1663  m1_loss_dice_4: 1.177  m1_loss_ce_5: 0.464  m1_loss_mask_5: 0.1658  m1_loss_dice_5: 1.227  m1_loss_ce_6: 0.4476  m1_loss_mask_6: 0.1621  m1_loss_dice_6: 1.18  m1_loss_ce_7: 0.4632  m1_loss_mask_7: 0.161  m1_loss_dice_7: 1.167  m1_loss_ce_8: 0.4529  m1_loss_mask_8: 0.1626  m1_loss_dice_8: 1.179    time: 0.8019  last_time: 0.8436  data_time: 0.0457  last_data_time: 0.0426   lr: 0.0001  max_mem: 19690M
[10/06 10:57:52] d2.utils.events INFO:  eta: 0:04:48  iter: 639  total_loss: 19.78  m1_loss_ce: 0.4691  m1_loss_mask: 0.1621  m1_loss_dice: 1.241  m1_loss_ce_0: 0.5642  m1_loss_mask_0: 0.188  m1_loss_dice_0: 1.459  m1_loss_ce_1: 0.6278  m1_loss_mask_1: 0.1781  m1_loss_dice_1: 1.422  m1_loss_ce_2: 0.5813  m1_loss_mask_2: 0.1697  m1_loss_dice_2: 1.314  m1_loss_ce_3: 0.5248  m1_loss_mask_3: 0.1672  m1_loss_dice_3: 1.292  m1_loss_ce_4: 0.4832  m1_loss_mask_4: 0.1734  m1_loss_dice_4: 1.254  m1_loss_ce_5: 0.4662  m1_loss_mask_5: 0.1646  m1_loss_dice_5: 1.276  m1_loss_ce_6: 0.4689  m1_loss_mask_6: 0.1621  m1_loss_dice_6: 1.263  m1_loss_ce_7: 0.4512  m1_loss_mask_7: 0.1625  m1_loss_dice_7: 1.245  m1_loss_ce_8: 0.4758  m1_loss_mask_8: 0.1636  m1_loss_dice_8: 1.263    time: 0.8025  last_time: 0.8084  data_time: 0.0535  last_data_time: 0.0435   lr: 0.0001  max_mem: 19690M
[10/06 10:58:08] d2.utils.events INFO:  eta: 0:04:32  iter: 659  total_loss: 19.46  m1_loss_ce: 0.4775  m1_loss_mask: 0.1605  m1_loss_dice: 1.206  m1_loss_ce_0: 0.5684  m1_loss_mask_0: 0.1812  m1_loss_dice_0: 1.44  m1_loss_ce_1: 0.6472  m1_loss_mask_1: 0.1749  m1_loss_dice_1: 1.349  m1_loss_ce_2: 0.5691  m1_loss_mask_2: 0.1621  m1_loss_dice_2: 1.257  m1_loss_ce_3: 0.5259  m1_loss_mask_3: 0.1612  m1_loss_dice_3: 1.222  m1_loss_ce_4: 0.4756  m1_loss_mask_4: 0.1604  m1_loss_dice_4: 1.232  m1_loss_ce_5: 0.4705  m1_loss_mask_5: 0.1589  m1_loss_dice_5: 1.214  m1_loss_ce_6: 0.4637  m1_loss_mask_6: 0.1609  m1_loss_dice_6: 1.174  m1_loss_ce_7: 0.4524  m1_loss_mask_7: 0.1612  m1_loss_dice_7: 1.193  m1_loss_ce_8: 0.4937  m1_loss_mask_8: 0.1593  m1_loss_dice_8: 1.178    time: 0.8023  last_time: 0.8206  data_time: 0.0532  last_data_time: 0.0382   lr: 0.0001  max_mem: 19690M
[10/06 10:58:24] d2.utils.events INFO:  eta: 0:04:16  iter: 679  total_loss: 20.48  m1_loss_ce: 0.5196  m1_loss_mask: 0.16  m1_loss_dice: 1.224  m1_loss_ce_0: 0.6215  m1_loss_mask_0: 0.1812  m1_loss_dice_0: 1.47  m1_loss_ce_1: 0.6978  m1_loss_mask_1: 0.1736  m1_loss_dice_1: 1.43  m1_loss_ce_2: 0.6426  m1_loss_mask_2: 0.1642  m1_loss_dice_2: 1.317  m1_loss_ce_3: 0.5548  m1_loss_mask_3: 0.1623  m1_loss_dice_3: 1.288  m1_loss_ce_4: 0.5367  m1_loss_mask_4: 0.1612  m1_loss_dice_4: 1.281  m1_loss_ce_5: 0.5167  m1_loss_mask_5: 0.1617  m1_loss_dice_5: 1.298  m1_loss_ce_6: 0.5313  m1_loss_mask_6: 0.1615  m1_loss_dice_6: 1.244  m1_loss_ce_7: 0.4893  m1_loss_mask_7: 0.1623  m1_loss_dice_7: 1.248  m1_loss_ce_8: 0.485  m1_loss_mask_8: 0.1625  m1_loss_dice_8: 1.26    time: 0.8023  last_time: 0.7903  data_time: 0.0473  last_data_time: 0.0451   lr: 0.0001  max_mem: 19690M
[10/06 10:58:40] d2.utils.events INFO:  eta: 0:04:00  iter: 699  total_loss: 20  m1_loss_ce: 0.4355  m1_loss_mask: 0.172  m1_loss_dice: 1.224  m1_loss_ce_0: 0.4998  m1_loss_mask_0: 0.2092  m1_loss_dice_0: 1.372  m1_loss_ce_1: 0.6101  m1_loss_mask_1: 0.1931  m1_loss_dice_1: 1.346  m1_loss_ce_2: 0.5252  m1_loss_mask_2: 0.1809  m1_loss_dice_2: 1.258  m1_loss_ce_3: 0.4693  m1_loss_mask_3: 0.1783  m1_loss_dice_3: 1.2  m1_loss_ce_4: 0.4528  m1_loss_mask_4: 0.1798  m1_loss_dice_4: 1.244  m1_loss_ce_5: 0.4436  m1_loss_mask_5: 0.1785  m1_loss_dice_5: 1.199  m1_loss_ce_6: 0.4504  m1_loss_mask_6: 0.1769  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.4217  m1_loss_mask_7: 0.1775  m1_loss_dice_7: 1.23  m1_loss_ce_8: 0.4721  m1_loss_mask_8: 0.1733  m1_loss_dice_8: 1.215    time: 0.8022  last_time: 0.8042  data_time: 0.0642  last_data_time: 0.0427   lr: 0.0001  max_mem: 19690M
[10/06 10:58:56] d2.utils.events INFO:  eta: 0:03:44  iter: 719  total_loss: 19.29  m1_loss_ce: 0.4162  m1_loss_mask: 0.1671  m1_loss_dice: 1.212  m1_loss_ce_0: 0.515  m1_loss_mask_0: 0.1871  m1_loss_dice_0: 1.416  m1_loss_ce_1: 0.5937  m1_loss_mask_1: 0.1798  m1_loss_dice_1: 1.285  m1_loss_ce_2: 0.5371  m1_loss_mask_2: 0.1702  m1_loss_dice_2: 1.268  m1_loss_ce_3: 0.4761  m1_loss_mask_3: 0.1676  m1_loss_dice_3: 1.212  m1_loss_ce_4: 0.4663  m1_loss_mask_4: 0.1671  m1_loss_dice_4: 1.229  m1_loss_ce_5: 0.4971  m1_loss_mask_5: 0.1666  m1_loss_dice_5: 1.217  m1_loss_ce_6: 0.4344  m1_loss_mask_6: 0.1668  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.4281  m1_loss_mask_7: 0.1659  m1_loss_dice_7: 1.182  m1_loss_ce_8: 0.4381  m1_loss_mask_8: 0.1669  m1_loss_dice_8: 1.195    time: 0.8022  last_time: 0.7117  data_time: 0.0519  last_data_time: 0.0404   lr: 0.0001  max_mem: 19690M
[10/06 10:59:12] d2.utils.events INFO:  eta: 0:03:28  iter: 739  total_loss: 20.44  m1_loss_ce: 0.4552  m1_loss_mask: 0.165  m1_loss_dice: 1.249  m1_loss_ce_0: 0.5468  m1_loss_mask_0: 0.1819  m1_loss_dice_0: 1.48  m1_loss_ce_1: 0.5977  m1_loss_mask_1: 0.1837  m1_loss_dice_1: 1.396  m1_loss_ce_2: 0.5577  m1_loss_mask_2: 0.1702  m1_loss_dice_2: 1.314  m1_loss_ce_3: 0.4866  m1_loss_mask_3: 0.17  m1_loss_dice_3: 1.293  m1_loss_ce_4: 0.4503  m1_loss_mask_4: 0.1682  m1_loss_dice_4: 1.265  m1_loss_ce_5: 0.4584  m1_loss_mask_5: 0.1694  m1_loss_dice_5: 1.274  m1_loss_ce_6: 0.5096  m1_loss_mask_6: 0.1645  m1_loss_dice_6: 1.26  m1_loss_ce_7: 0.453  m1_loss_mask_7: 0.1633  m1_loss_dice_7: 1.243  m1_loss_ce_8: 0.4758  m1_loss_mask_8: 0.1634  m1_loss_dice_8: 1.263    time: 0.8025  last_time: 0.8372  data_time: 0.0570  last_data_time: 0.0594   lr: 0.0001  max_mem: 19690M
[10/06 10:59:28] d2.utils.events INFO:  eta: 0:03:12  iter: 759  total_loss: 19.32  m1_loss_ce: 0.4449  m1_loss_mask: 0.1602  m1_loss_dice: 1.199  m1_loss_ce_0: 0.5415  m1_loss_mask_0: 0.1921  m1_loss_dice_0: 1.4  m1_loss_ce_1: 0.6377  m1_loss_mask_1: 0.1723  m1_loss_dice_1: 1.33  m1_loss_ce_2: 0.5729  m1_loss_mask_2: 0.1626  m1_loss_dice_2: 1.289  m1_loss_ce_3: 0.5286  m1_loss_mask_3: 0.1623  m1_loss_dice_3: 1.219  m1_loss_ce_4: 0.4896  m1_loss_mask_4: 0.1627  m1_loss_dice_4: 1.221  m1_loss_ce_5: 0.4752  m1_loss_mask_5: 0.1601  m1_loss_dice_5: 1.22  m1_loss_ce_6: 0.4781  m1_loss_mask_6: 0.1599  m1_loss_dice_6: 1.167  m1_loss_ce_7: 0.4393  m1_loss_mask_7: 0.1603  m1_loss_dice_7: 1.19  m1_loss_ce_8: 0.4665  m1_loss_mask_8: 0.1591  m1_loss_dice_8: 1.198    time: 0.8028  last_time: 0.7880  data_time: 0.0491  last_data_time: 0.0425   lr: 0.0001  max_mem: 19690M
[10/06 10:59:44] d2.utils.events INFO:  eta: 0:02:56  iter: 779  total_loss: 18.79  m1_loss_ce: 0.4147  m1_loss_mask: 0.17  m1_loss_dice: 1.149  m1_loss_ce_0: 0.513  m1_loss_mask_0: 0.2015  m1_loss_dice_0: 1.356  m1_loss_ce_1: 0.5373  m1_loss_mask_1: 0.1935  m1_loss_dice_1: 1.28  m1_loss_ce_2: 0.5293  m1_loss_mask_2: 0.1758  m1_loss_dice_2: 1.278  m1_loss_ce_3: 0.5006  m1_loss_mask_3: 0.1754  m1_loss_dice_3: 1.179  m1_loss_ce_4: 0.4421  m1_loss_mask_4: 0.1732  m1_loss_dice_4: 1.194  m1_loss_ce_5: 0.4315  m1_loss_mask_5: 0.1711  m1_loss_dice_5: 1.152  m1_loss_ce_6: 0.4265  m1_loss_mask_6: 0.1709  m1_loss_dice_6: 1.151  m1_loss_ce_7: 0.4327  m1_loss_mask_7: 0.1697  m1_loss_dice_7: 1.134  m1_loss_ce_8: 0.4305  m1_loss_mask_8: 0.17  m1_loss_dice_8: 1.141    time: 0.8026  last_time: 0.8454  data_time: 0.0470  last_data_time: 0.0443   lr: 0.0001  max_mem: 19690M
[10/06 11:00:00] d2.utils.events INFO:  eta: 0:02:40  iter: 799  total_loss: 18.9  m1_loss_ce: 0.4179  m1_loss_mask: 0.1638  m1_loss_dice: 1.176  m1_loss_ce_0: 0.531  m1_loss_mask_0: 0.188  m1_loss_dice_0: 1.415  m1_loss_ce_1: 0.5755  m1_loss_mask_1: 0.1758  m1_loss_dice_1: 1.314  m1_loss_ce_2: 0.5167  m1_loss_mask_2: 0.1736  m1_loss_dice_2: 1.257  m1_loss_ce_3: 0.503  m1_loss_mask_3: 0.1677  m1_loss_dice_3: 1.194  m1_loss_ce_4: 0.4469  m1_loss_mask_4: 0.1668  m1_loss_dice_4: 1.186  m1_loss_ce_5: 0.4256  m1_loss_mask_5: 0.1623  m1_loss_dice_5: 1.168  m1_loss_ce_6: 0.4382  m1_loss_mask_6: 0.1611  m1_loss_dice_6: 1.147  m1_loss_ce_7: 0.442  m1_loss_mask_7: 0.1624  m1_loss_dice_7: 1.164  m1_loss_ce_8: 0.4298  m1_loss_mask_8: 0.1632  m1_loss_dice_8: 1.186    time: 0.8025  last_time: 0.7333  data_time: 0.0551  last_data_time: 0.0859   lr: 0.0001  max_mem: 19690M
[10/06 11:00:17] d2.utils.events INFO:  eta: 0:02:24  iter: 819  total_loss: 18.84  m1_loss_ce: 0.4091  m1_loss_mask: 0.1526  m1_loss_dice: 1.175  m1_loss_ce_0: 0.5077  m1_loss_mask_0: 0.1852  m1_loss_dice_0: 1.384  m1_loss_ce_1: 0.5583  m1_loss_mask_1: 0.1715  m1_loss_dice_1: 1.32  m1_loss_ce_2: 0.5031  m1_loss_mask_2: 0.1593  m1_loss_dice_2: 1.252  m1_loss_ce_3: 0.4769  m1_loss_mask_3: 0.159  m1_loss_dice_3: 1.221  m1_loss_ce_4: 0.448  m1_loss_mask_4: 0.156  m1_loss_dice_4: 1.21  m1_loss_ce_5: 0.4386  m1_loss_mask_5: 0.1545  m1_loss_dice_5: 1.221  m1_loss_ce_6: 0.4291  m1_loss_mask_6: 0.1548  m1_loss_dice_6: 1.157  m1_loss_ce_7: 0.4163  m1_loss_mask_7: 0.1534  m1_loss_dice_7: 1.17  m1_loss_ce_8: 0.434  m1_loss_mask_8: 0.1531  m1_loss_dice_8: 1.178    time: 0.8029  last_time: 0.8187  data_time: 0.0622  last_data_time: 0.0552   lr: 0.0001  max_mem: 19690M
[10/06 11:00:33] d2.utils.events INFO:  eta: 0:02:08  iter: 839  total_loss: 19.71  m1_loss_ce: 0.4204  m1_loss_mask: 0.1656  m1_loss_dice: 1.237  m1_loss_ce_0: 0.5505  m1_loss_mask_0: 0.1932  m1_loss_dice_0: 1.466  m1_loss_ce_1: 0.6096  m1_loss_mask_1: 0.1822  m1_loss_dice_1: 1.329  m1_loss_ce_2: 0.5674  m1_loss_mask_2: 0.1728  m1_loss_dice_2: 1.311  m1_loss_ce_3: 0.5128  m1_loss_mask_3: 0.1683  m1_loss_dice_3: 1.257  m1_loss_ce_4: 0.5008  m1_loss_mask_4: 0.1682  m1_loss_dice_4: 1.252  m1_loss_ce_5: 0.478  m1_loss_mask_5: 0.165  m1_loss_dice_5: 1.256  m1_loss_ce_6: 0.4574  m1_loss_mask_6: 0.1622  m1_loss_dice_6: 1.237  m1_loss_ce_7: 0.4664  m1_loss_mask_7: 0.1632  m1_loss_dice_7: 1.196  m1_loss_ce_8: 0.4653  m1_loss_mask_8: 0.1645  m1_loss_dice_8: 1.232    time: 0.8030  last_time: 0.8676  data_time: 0.0535  last_data_time: 0.0423   lr: 0.0001  max_mem: 19690M
[10/06 11:00:49] d2.utils.events INFO:  eta: 0:01:52  iter: 859  total_loss: 18.7  m1_loss_ce: 0.4365  m1_loss_mask: 0.1634  m1_loss_dice: 1.173  m1_loss_ce_0: 0.555  m1_loss_mask_0: 0.1904  m1_loss_dice_0: 1.38  m1_loss_ce_1: 0.593  m1_loss_mask_1: 0.1785  m1_loss_dice_1: 1.275  m1_loss_ce_2: 0.5194  m1_loss_mask_2: 0.1712  m1_loss_dice_2: 1.27  m1_loss_ce_3: 0.4837  m1_loss_mask_3: 0.1704  m1_loss_dice_3: 1.189  m1_loss_ce_4: 0.4619  m1_loss_mask_4: 0.1719  m1_loss_dice_4: 1.164  m1_loss_ce_5: 0.4457  m1_loss_mask_5: 0.1662  m1_loss_dice_5: 1.181  m1_loss_ce_6: 0.4255  m1_loss_mask_6: 0.1662  m1_loss_dice_6: 1.165  m1_loss_ce_7: 0.4278  m1_loss_mask_7: 0.1659  m1_loss_dice_7: 1.156  m1_loss_ce_8: 0.4234  m1_loss_mask_8: 0.1634  m1_loss_dice_8: 1.166    time: 0.8031  last_time: 0.8374  data_time: 0.0651  last_data_time: 0.0468   lr: 0.0001  max_mem: 19690M
[10/06 11:01:05] d2.utils.events INFO:  eta: 0:01:36  iter: 879  total_loss: 19.16  m1_loss_ce: 0.4711  m1_loss_mask: 0.1649  m1_loss_dice: 1.206  m1_loss_ce_0: 0.557  m1_loss_mask_0: 0.1881  m1_loss_dice_0: 1.418  m1_loss_ce_1: 0.5919  m1_loss_mask_1: 0.1774  m1_loss_dice_1: 1.326  m1_loss_ce_2: 0.5544  m1_loss_mask_2: 0.1704  m1_loss_dice_2: 1.285  m1_loss_ce_3: 0.5231  m1_loss_mask_3: 0.1723  m1_loss_dice_3: 1.209  m1_loss_ce_4: 0.4737  m1_loss_mask_4: 0.1674  m1_loss_dice_4: 1.205  m1_loss_ce_5: 0.4667  m1_loss_mask_5: 0.1625  m1_loss_dice_5: 1.224  m1_loss_ce_6: 0.4676  m1_loss_mask_6: 0.1657  m1_loss_dice_6: 1.213  m1_loss_ce_7: 0.4483  m1_loss_mask_7: 0.1636  m1_loss_dice_7: 1.213  m1_loss_ce_8: 0.4692  m1_loss_mask_8: 0.1633  m1_loss_dice_8: 1.17    time: 0.8031  last_time: 0.8171  data_time: 0.0542  last_data_time: 0.0390   lr: 0.0001  max_mem: 19690M
[10/06 11:01:22] d2.utils.events INFO:  eta: 0:01:20  iter: 899  total_loss: 20.5  m1_loss_ce: 0.454  m1_loss_mask: 0.1658  m1_loss_dice: 1.278  m1_loss_ce_0: 0.5899  m1_loss_mask_0: 0.1895  m1_loss_dice_0: 1.492  m1_loss_ce_1: 0.6342  m1_loss_mask_1: 0.1754  m1_loss_dice_1: 1.389  m1_loss_ce_2: 0.5985  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.394  m1_loss_ce_3: 0.5116  m1_loss_mask_3: 0.1712  m1_loss_dice_3: 1.301  m1_loss_ce_4: 0.5148  m1_loss_mask_4: 0.1685  m1_loss_dice_4: 1.281  m1_loss_ce_5: 0.4982  m1_loss_mask_5: 0.1647  m1_loss_dice_5: 1.341  m1_loss_ce_6: 0.4558  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.285  m1_loss_ce_7: 0.4752  m1_loss_mask_7: 0.1664  m1_loss_dice_7: 1.304  m1_loss_ce_8: 0.4492  m1_loss_mask_8: 0.1653  m1_loss_dice_8: 1.281    time: 0.8032  last_time: 0.8175  data_time: 0.0609  last_data_time: 0.0359   lr: 0.0001  max_mem: 19690M
[10/06 11:01:38] d2.utils.events INFO:  eta: 0:01:04  iter: 919  total_loss: 21.62  m1_loss_ce: 0.454  m1_loss_mask: 0.1658  m1_loss_dice: 1.278  m1_loss_ce_0: 0.5899  m1_loss_mask_0: 0.1895  m1_loss_dice_0: 1.492  m1_loss_ce_1: 0.6342  m1_loss_mask_1: 0.1754  m1_loss_dice_1: 1.389  m1_loss_ce_2: 0.5985  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.394  m1_loss_ce_3: 0.5116  m1_loss_mask_3: 0.1712  m1_loss_dice_3: 1.301  m1_loss_ce_4: 0.5148  m1_loss_mask_4: 0.1685  m1_loss_dice_4: 1.281  m1_loss_ce_5: 0.4982  m1_loss_mask_5: 0.1647  m1_loss_dice_5: 1.341  m1_loss_ce_6: 0.4558  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.285  m1_loss_ce_7: 0.4752  m1_loss_mask_7: 0.1664  m1_loss_dice_7: 1.304  m1_loss_ce_8: 0.4492  m1_loss_mask_8: 0.1653  m1_loss_dice_8: 1.281  m2_loss_ce: 0.5132  m2_loss_mask: 0.1668  m2_loss_dice: 1.323  m2_loss_ce_0: 0.6961  m2_loss_mask_0: 0.1923  m2_loss_dice_0: 1.561  m2_loss_ce_1: 0.7039  m2_loss_mask_1: 0.1832  m2_loss_dice_1: 1.486  m2_loss_ce_2: 0.6325  m2_loss_mask_2: 0.1719  m2_loss_dice_2: 1.41  m2_loss_ce_3: 0.5791  m2_loss_mask_3: 0.1737  m2_loss_dice_3: 1.365  m2_loss_ce_4: 0.5605  m2_loss_mask_4: 0.1662  m2_loss_dice_4: 1.359  m2_loss_ce_5: 0.5795  m2_loss_mask_5: 0.1645  m2_loss_dice_5: 1.328  m2_loss_ce_6: 0.5447  m2_loss_mask_6: 0.1686  m2_loss_dice_6: 1.309  m2_loss_ce_7: 0.5184  m2_loss_mask_7: 0.1722  m2_loss_dice_7: 1.324  m2_loss_ce_8: 0.5225  m2_loss_mask_8: 0.1684  m2_loss_dice_8: 1.308    time: 0.8032  last_time: 0.7844  data_time: 0.0614  last_data_time: 0.0692   lr: 0.0001  max_mem: 19690M
[10/06 11:01:53] d2.utils.events INFO:  eta: 0:00:48  iter: 939  total_loss: 20.35  m1_loss_ce: 0.454  m1_loss_mask: 0.1658  m1_loss_dice: 1.278  m1_loss_ce_0: 0.5899  m1_loss_mask_0: 0.1895  m1_loss_dice_0: 1.492  m1_loss_ce_1: 0.6342  m1_loss_mask_1: 0.1754  m1_loss_dice_1: 1.389  m1_loss_ce_2: 0.5985  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.394  m1_loss_ce_3: 0.5116  m1_loss_mask_3: 0.1712  m1_loss_dice_3: 1.301  m1_loss_ce_4: 0.5148  m1_loss_mask_4: 0.1685  m1_loss_dice_4: 1.281  m1_loss_ce_5: 0.4982  m1_loss_mask_5: 0.1647  m1_loss_dice_5: 1.341  m1_loss_ce_6: 0.4558  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.285  m1_loss_ce_7: 0.4752  m1_loss_mask_7: 0.1664  m1_loss_dice_7: 1.304  m1_loss_ce_8: 0.4492  m1_loss_mask_8: 0.1653  m1_loss_dice_8: 1.281  m2_loss_ce: 0.473  m2_loss_mask: 0.1642  m2_loss_dice: 1.195  m2_loss_ce_0: 0.6417  m2_loss_mask_0: 0.1995  m2_loss_dice_0: 1.426  m2_loss_ce_1: 0.66  m2_loss_mask_1: 0.1787  m2_loss_dice_1: 1.307  m2_loss_ce_2: 0.5678  m2_loss_mask_2: 0.1662  m2_loss_dice_2: 1.238  m2_loss_ce_3: 0.5416  m2_loss_mask_3: 0.1666  m2_loss_dice_3: 1.213  m2_loss_ce_4: 0.5229  m2_loss_mask_4: 0.164  m2_loss_dice_4: 1.227  m2_loss_ce_5: 0.5191  m2_loss_mask_5: 0.1626  m2_loss_dice_5: 1.194  m2_loss_ce_6: 0.5142  m2_loss_mask_6: 0.1629  m2_loss_dice_6: 1.182  m2_loss_ce_7: 0.5038  m2_loss_mask_7: 0.1639  m2_loss_dice_7: 1.21  m2_loss_ce_8: 0.4841  m2_loss_mask_8: 0.1624  m2_loss_dice_8: 1.206    time: 0.8026  last_time: 0.7580  data_time: 0.0563  last_data_time: 0.0494   lr: 0.0001  max_mem: 19690M
[10/06 11:02:09] d2.utils.events INFO:  eta: 0:00:32  iter: 959  total_loss: 20.79  m1_loss_ce: 0.454  m1_loss_mask: 0.1658  m1_loss_dice: 1.278  m1_loss_ce_0: 0.5899  m1_loss_mask_0: 0.1895  m1_loss_dice_0: 1.492  m1_loss_ce_1: 0.6342  m1_loss_mask_1: 0.1754  m1_loss_dice_1: 1.389  m1_loss_ce_2: 0.5985  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.394  m1_loss_ce_3: 0.5116  m1_loss_mask_3: 0.1712  m1_loss_dice_3: 1.301  m1_loss_ce_4: 0.5148  m1_loss_mask_4: 0.1685  m1_loss_dice_4: 1.281  m1_loss_ce_5: 0.4982  m1_loss_mask_5: 0.1647  m1_loss_dice_5: 1.341  m1_loss_ce_6: 0.4558  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.285  m1_loss_ce_7: 0.4752  m1_loss_mask_7: 0.1664  m1_loss_dice_7: 1.304  m1_loss_ce_8: 0.4492  m1_loss_mask_8: 0.1653  m1_loss_dice_8: 1.281  m2_loss_ce: 0.4866  m2_loss_mask: 0.1513  m2_loss_dice: 1.326  m2_loss_ce_0: 0.6486  m2_loss_mask_0: 0.1755  m2_loss_dice_0: 1.556  m2_loss_ce_1: 0.6788  m2_loss_mask_1: 0.1698  m2_loss_dice_1: 1.49  m2_loss_ce_2: 0.6091  m2_loss_mask_2: 0.1625  m2_loss_dice_2: 1.392  m2_loss_ce_3: 0.5484  m2_loss_mask_3: 0.1569  m2_loss_dice_3: 1.339  m2_loss_ce_4: 0.4973  m2_loss_mask_4: 0.1559  m2_loss_dice_4: 1.329  m2_loss_ce_5: 0.5422  m2_loss_mask_5: 0.1523  m2_loss_dice_5: 1.324  m2_loss_ce_6: 0.4976  m2_loss_mask_6: 0.1503  m2_loss_dice_6: 1.317  m2_loss_ce_7: 0.4994  m2_loss_mask_7: 0.149  m2_loss_dice_7: 1.3  m2_loss_ce_8: 0.4865  m2_loss_mask_8: 0.1485  m2_loss_dice_8: 1.342    time: 0.8027  last_time: 0.8190  data_time: 0.0499  last_data_time: 0.0530   lr: 0.0001  max_mem: 19690M
[10/06 11:02:25] d2.utils.events INFO:  eta: 0:00:16  iter: 979  total_loss: 19.84  m1_loss_ce: 0.454  m1_loss_mask: 0.1658  m1_loss_dice: 1.278  m1_loss_ce_0: 0.5899  m1_loss_mask_0: 0.1895  m1_loss_dice_0: 1.492  m1_loss_ce_1: 0.6342  m1_loss_mask_1: 0.1754  m1_loss_dice_1: 1.389  m1_loss_ce_2: 0.5985  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.394  m1_loss_ce_3: 0.5116  m1_loss_mask_3: 0.1712  m1_loss_dice_3: 1.301  m1_loss_ce_4: 0.5148  m1_loss_mask_4: 0.1685  m1_loss_dice_4: 1.281  m1_loss_ce_5: 0.4982  m1_loss_mask_5: 0.1647  m1_loss_dice_5: 1.341  m1_loss_ce_6: 0.4558  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.285  m1_loss_ce_7: 0.4752  m1_loss_mask_7: 0.1664  m1_loss_dice_7: 1.304  m1_loss_ce_8: 0.4492  m1_loss_mask_8: 0.1653  m1_loss_dice_8: 1.281  m2_loss_ce: 0.4516  m2_loss_mask: 0.1688  m2_loss_dice: 1.224  m2_loss_ce_0: 0.5911  m2_loss_mask_0: 0.199  m2_loss_dice_0: 1.45  m2_loss_ce_1: 0.6586  m2_loss_mask_1: 0.1834  m2_loss_dice_1: 1.336  m2_loss_ce_2: 0.5788  m2_loss_mask_2: 0.169  m2_loss_dice_2: 1.279  m2_loss_ce_3: 0.5351  m2_loss_mask_3: 0.1713  m2_loss_dice_3: 1.22  m2_loss_ce_4: 0.4917  m2_loss_mask_4: 0.1676  m2_loss_dice_4: 1.233  m2_loss_ce_5: 0.4887  m2_loss_mask_5: 0.169  m2_loss_dice_5: 1.218  m2_loss_ce_6: 0.4977  m2_loss_mask_6: 0.1693  m2_loss_dice_6: 1.193  m2_loss_ce_7: 0.4993  m2_loss_mask_7: 0.1699  m2_loss_dice_7: 1.22  m2_loss_ce_8: 0.492  m2_loss_mask_8: 0.1701  m2_loss_dice_8: 1.211    time: 0.8024  last_time: 0.7777  data_time: 0.0551  last_data_time: 0.0905   lr: 0.0001  max_mem: 19690M
[10/06 11:02:41] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_alternating_900_100/model_final.pth
[10/06 11:02:43] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 20.32  m1_loss_ce: 0.454  m1_loss_mask: 0.1658  m1_loss_dice: 1.278  m1_loss_ce_0: 0.5899  m1_loss_mask_0: 0.1895  m1_loss_dice_0: 1.492  m1_loss_ce_1: 0.6342  m1_loss_mask_1: 0.1754  m1_loss_dice_1: 1.389  m1_loss_ce_2: 0.5985  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.394  m1_loss_ce_3: 0.5116  m1_loss_mask_3: 0.1712  m1_loss_dice_3: 1.301  m1_loss_ce_4: 0.5148  m1_loss_mask_4: 0.1685  m1_loss_dice_4: 1.281  m1_loss_ce_5: 0.4982  m1_loss_mask_5: 0.1647  m1_loss_dice_5: 1.341  m1_loss_ce_6: 0.4558  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.285  m1_loss_ce_7: 0.4752  m1_loss_mask_7: 0.1664  m1_loss_dice_7: 1.304  m1_loss_ce_8: 0.4492  m1_loss_mask_8: 0.1653  m1_loss_dice_8: 1.281  m2_loss_ce: 0.4756  m2_loss_mask: 0.1629  m2_loss_dice: 1.216  m2_loss_ce_0: 0.6197  m2_loss_mask_0: 0.1988  m2_loss_dice_0: 1.403  m2_loss_ce_1: 0.6962  m2_loss_mask_1: 0.1885  m2_loss_dice_1: 1.345  m2_loss_ce_2: 0.6064  m2_loss_mask_2: 0.1713  m2_loss_dice_2: 1.308  m2_loss_ce_3: 0.571  m2_loss_mask_3: 0.1701  m2_loss_dice_3: 1.265  m2_loss_ce_4: 0.5305  m2_loss_mask_4: 0.165  m2_loss_dice_4: 1.244  m2_loss_ce_5: 0.4893  m2_loss_mask_5: 0.1664  m2_loss_dice_5: 1.238  m2_loss_ce_6: 0.4572  m2_loss_mask_6: 0.1636  m2_loss_dice_6: 1.225  m2_loss_ce_7: 0.5057  m2_loss_mask_7: 0.1641  m2_loss_dice_7: 1.224  m2_loss_ce_8: 0.4989  m2_loss_mask_8: 0.1661  m2_loss_dice_8: 1.231    time: 0.8021  last_time: 0.8386  data_time: 0.0554  last_data_time: 0.1155   lr: 0.0001  max_mem: 19690M
[10/06 11:02:43] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:13:20 (0.8022 s / it)
[10/06 11:02:43] d2.engine.hooks INFO: Total training time: 0:13:25 (0:00:05 on hooks)
[10/06 11:02:44] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[10/06 11:02:44] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[10/06 11:02:44] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/06 11:02:44] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/06 11:02:44] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[10/06 11:04:17] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evalhbip1iwc ...
[10/06 11:05:04] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |  PQ   |  SQ   |  RQ   |  #categories  |
|:------:|:-----:|:-----:|:-----:|:-------------:|
|  All   | 0.000 | 0.000 | 0.000 |      19       |
| Things | 0.000 | 0.000 | 0.000 |       8       |
| Stuff  | 0.000 | 0.000 | 0.000 |      11       |
[10/06 11:05:04] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |  PQ   |  SQ  |  RQ   |  #categories  |
|:--------:|:-----:|:----:|:-----:|:-------------:|
| class_7  | 0.000 |  0   | 0.000 |     Stuff     |
| class_8  | 0.000 |  0   | 0.000 |     Stuff     |
| class_11 | 0.000 |  0   | 0.000 |     Stuff     |
| class_12 | 0.000 |  0   | 0.000 |     Stuff     |
| class_13 | 0.000 |  0   | 0.000 |     Stuff     |
| class_17 | 0.000 |  0   | 0.000 |     Stuff     |
| class_19 | 0.000 |  0   | 0.000 |     Stuff     |
| class_20 | 0.000 |  0   | 0.000 |     Stuff     |
| class_21 | 0.000 |  0   | 0.000 |     Stuff     |
| class_22 | 0.000 |  0   | 0.000 |     Stuff     |
| class_23 | 0.000 |  0   | 0.000 |     Stuff     |
| class_24 | 0.000 |  0   | 0.000 |    Things     |
| class_25 | 0.000 |  0   | 0.000 |    Things     |
| class_26 | 0.000 |  0   | 0.000 |    Things     |
| class_27 | 0.000 |  0   | 0.000 |    Things     |
| class_28 | 0.000 |  0   | 0.000 |    Things     |
| class_31 | 0.000 |  0   | 0.000 |    Things     |
| class_32 | 0.000 |  0   | 0.000 |    Things     |
| class_33 | 0.000 |  0   | 0.000 |    Things     |
[10/06 11:05:04] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/06 11:05:04] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[10/06 11:05:04] d2.evaluation.testing INFO: copypaste: 0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000
