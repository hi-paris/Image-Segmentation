[08/15 22:14:08] detectron2 INFO: Rank of current process: 0. World size: 2
[08/15 22:14:09] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2                        NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/15 22:14:09] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/15 22:14:09] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/15 22:14:09] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/15 22:14:09] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000/config.yaml
[08/15 22:14:09] d2.utils.env INFO: Using a generated random seed 10908518
[08/15 22:14:13] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/15 22:14:13] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/15 22:14:14] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/15 22:14:14] d2.data.build INFO: Using training sampler TrainingSampler
[08/15 22:14:14] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/15 22:14:14] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/15 22:14:14] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/15 22:14:14] d2.data.build INFO: Making batched data loader with batch_size=4
[08/15 22:14:14] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/15 22:14:18] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/15 22:14:18] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:14:18] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:17:18] detectron2 INFO: Rank of current process: 0. World size: 2
[08/15 22:17:19] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2                        NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/15 22:17:19] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/15 22:17:19] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/15 22:17:19] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/15 22:17:19] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000/config.yaml
[08/15 22:17:19] d2.utils.env INFO: Using a generated random seed 20783575
[08/15 22:17:23] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/15 22:17:23] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/15 22:17:24] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/15 22:17:24] d2.data.build INFO: Using training sampler TrainingSampler
[08/15 22:17:24] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/15 22:17:24] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/15 22:17:24] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/15 22:17:24] d2.data.build INFO: Making batched data loader with batch_size=4
[08/15 22:17:24] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/15 22:17:28] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/15 22:17:28] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:17:28] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:29:32] detectron2 INFO: Rank of current process: 0. World size: 2
[08/15 22:29:34] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2                        NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/15 22:29:34] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/15 22:29:34] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/15 22:29:34] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/15 22:29:34] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000/config.yaml
[08/15 22:29:34] d2.utils.env INFO: Using a generated random seed 35834312
[08/15 22:29:39] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/15 22:29:39] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/15 22:29:39] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/15 22:29:39] d2.data.build INFO: Using training sampler TrainingSampler
[08/15 22:29:39] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/15 22:29:39] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/15 22:29:39] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/15 22:29:39] d2.data.build INFO: Making batched data loader with batch_size=4
[08/15 22:29:39] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/15 22:29:43] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/15 22:29:43] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:29:43] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:29:56] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:29:56] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:30:29] d2.utils.events INFO:  eta: 0:21:24  iter: 19  total_loss: 40.55  m1_loss_ce: 0.5679  m1_loss_mask: 0.1695  m1_loss_dice: 1.226  m1_loss_ce_0: 0.636  m1_loss_mask_0: 0.2025  m1_loss_dice_0: 1.448  m1_loss_ce_1: 0.6863  m1_loss_mask_1: 0.1825  m1_loss_dice_1: 1.38  m1_loss_ce_2: 0.6342  m1_loss_mask_2: 0.1804  m1_loss_dice_2: 1.336  m1_loss_ce_3: 0.5745  m1_loss_mask_3: 0.1774  m1_loss_dice_3: 1.222  m1_loss_ce_4: 0.5785  m1_loss_mask_4: 0.1738  m1_loss_dice_4: 1.234  m1_loss_ce_5: 0.5331  m1_loss_mask_5: 0.175  m1_loss_dice_5: 1.263  m1_loss_ce_6: 0.5402  m1_loss_mask_6: 0.1738  m1_loss_dice_6: 1.232  m1_loss_ce_7: 0.555  m1_loss_mask_7: 0.1708  m1_loss_dice_7: 1.194  m1_loss_ce_8: 0.5627  m1_loss_mask_8: 0.172  m1_loss_dice_8: 1.211  m2_loss_ce: 0.5306  m2_loss_mask: 0.1657  m2_loss_dice: 1.176  m2_loss_ce_0: 0.6539  m2_loss_mask_0: 0.1994  m2_loss_dice_0: 1.424  m2_loss_ce_1: 0.6791  m2_loss_mask_1: 0.1768  m2_loss_dice_1: 1.371  m2_loss_ce_2: 0.605  m2_loss_mask_2: 0.173  m2_loss_dice_2: 1.3  m2_loss_ce_3: 0.5742  m2_loss_mask_3: 0.1714  m2_loss_dice_3: 1.249  m2_loss_ce_4: 0.5283  m2_loss_mask_4: 0.1731  m2_loss_dice_4: 1.255  m2_loss_ce_5: 0.5294  m2_loss_mask_5: 0.167  m2_loss_dice_5: 1.217  m2_loss_ce_6: 0.5239  m2_loss_mask_6: 0.1652  m2_loss_dice_6: 1.227  m2_loss_ce_7: 0.505  m2_loss_mask_7: 0.1656  m2_loss_dice_7: 1.219  m2_loss_ce_8: 0.5199  m2_loss_mask_8: 0.1672  m2_loss_dice_8: 1.241  com_loss_ce: 0.4087  com_loss_mask: 0.05033  com_loss_dice: 0.3097    time: 1.3343  last_time: 1.3046  data_time: 0.2056  last_data_time: 0.0419   lr: 0.0001  max_mem: 34323M
[08/15 22:30:56] d2.utils.events INFO:  eta: 0:21:15  iter: 39  total_loss: 40.77  m1_loss_ce: 0.5513  m1_loss_mask: 0.1768  m1_loss_dice: 1.221  m1_loss_ce_0: 0.6357  m1_loss_mask_0: 0.2018  m1_loss_dice_0: 1.451  m1_loss_ce_1: 0.6736  m1_loss_mask_1: 0.184  m1_loss_dice_1: 1.333  m1_loss_ce_2: 0.6465  m1_loss_mask_2: 0.1834  m1_loss_dice_2: 1.279  m1_loss_ce_3: 0.6115  m1_loss_mask_3: 0.1786  m1_loss_dice_3: 1.238  m1_loss_ce_4: 0.5756  m1_loss_mask_4: 0.1784  m1_loss_dice_4: 1.213  m1_loss_ce_5: 0.5917  m1_loss_mask_5: 0.1774  m1_loss_dice_5: 1.199  m1_loss_ce_6: 0.5332  m1_loss_mask_6: 0.1784  m1_loss_dice_6: 1.198  m1_loss_ce_7: 0.5616  m1_loss_mask_7: 0.1763  m1_loss_dice_7: 1.215  m1_loss_ce_8: 0.5635  m1_loss_mask_8: 0.1747  m1_loss_dice_8: 1.201  m2_loss_ce: 0.513  m2_loss_mask: 0.165  m2_loss_dice: 1.212  m2_loss_ce_0: 0.6312  m2_loss_mask_0: 0.1971  m2_loss_dice_0: 1.438  m2_loss_ce_1: 0.6965  m2_loss_mask_1: 0.18  m2_loss_dice_1: 1.345  m2_loss_ce_2: 0.6377  m2_loss_mask_2: 0.1685  m2_loss_dice_2: 1.271  m2_loss_ce_3: 0.5737  m2_loss_mask_3: 0.1658  m2_loss_dice_3: 1.226  m2_loss_ce_4: 0.5688  m2_loss_mask_4: 0.1713  m2_loss_dice_4: 1.22  m2_loss_ce_5: 0.5277  m2_loss_mask_5: 0.1686  m2_loss_dice_5: 1.221  m2_loss_ce_6: 0.5409  m2_loss_mask_6: 0.1661  m2_loss_dice_6: 1.197  m2_loss_ce_7: 0.5187  m2_loss_mask_7: 0.1666  m2_loss_dice_7: 1.198  m2_loss_ce_8: 0.5062  m2_loss_mask_8: 0.1666  m2_loss_dice_8: 1.211  com_loss_ce: 0.4191  com_loss_mask: 0.05122  com_loss_dice: 0.3173    time: 1.3444  last_time: 1.4189  data_time: 0.0417  last_data_time: 0.0397   lr: 0.0001  max_mem: 34341M
[08/15 22:31:04] d2.engine.hooks INFO: Overall training speed: 43 iterations in 0:00:58 (1.3508 s / it)
[08/15 22:31:04] d2.engine.hooks INFO: Total training time: 0:00:58 (0:00:00 on hooks)
[08/15 22:31:04] d2.utils.events INFO:  eta: 0:21:06  iter: 45  total_loss: 40.68  m1_loss_ce: 0.54  m1_loss_mask: 0.1646  m1_loss_dice: 1.21  m1_loss_ce_0: 0.6118  m1_loss_mask_0: 0.1978  m1_loss_dice_0: 1.415  m1_loss_ce_1: 0.6678  m1_loss_mask_1: 0.1816  m1_loss_dice_1: 1.323  m1_loss_ce_2: 0.6198  m1_loss_mask_2: 0.1763  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.6115  m1_loss_mask_3: 0.1704  m1_loss_dice_3: 1.238  m1_loss_ce_4: 0.5756  m1_loss_mask_4: 0.1675  m1_loss_dice_4: 1.192  m1_loss_ce_5: 0.5699  m1_loss_mask_5: 0.1704  m1_loss_dice_5: 1.199  m1_loss_ce_6: 0.5381  m1_loss_mask_6: 0.1717  m1_loss_dice_6: 1.194  m1_loss_ce_7: 0.5484  m1_loss_mask_7: 0.1648  m1_loss_dice_7: 1.187  m1_loss_ce_8: 0.5576  m1_loss_mask_8: 0.165  m1_loss_dice_8: 1.19  m2_loss_ce: 0.513  m2_loss_mask: 0.1607  m2_loss_dice: 1.205  m2_loss_ce_0: 0.6312  m2_loss_mask_0: 0.184  m2_loss_dice_0: 1.415  m2_loss_ce_1: 0.662  m2_loss_mask_1: 0.1749  m2_loss_dice_1: 1.318  m2_loss_ce_2: 0.6177  m2_loss_mask_2: 0.1646  m2_loss_dice_2: 1.256  m2_loss_ce_3: 0.557  m2_loss_mask_3: 0.1611  m2_loss_dice_3: 1.208  m2_loss_ce_4: 0.5571  m2_loss_mask_4: 0.1653  m2_loss_dice_4: 1.206  m2_loss_ce_5: 0.5412  m2_loss_mask_5: 0.1627  m2_loss_dice_5: 1.201  m2_loss_ce_6: 0.5269  m2_loss_mask_6: 0.1637  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.5187  m2_loss_mask_7: 0.1627  m2_loss_dice_7: 1.191  m2_loss_ce_8: 0.5043  m2_loss_mask_8: 0.1625  m2_loss_dice_8: 1.169  com_loss_ce: 0.4318  com_loss_mask: 0.05219  com_loss_dice: 0.3097    time: 1.3428  last_time: 1.3497  data_time: 0.0425  last_data_time: 0.0350   lr: 0.0001  max_mem: 34341M
[08/15 22:32:22] detectron2 INFO: Rank of current process: 0. World size: 2
[08/15 22:32:24] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2                        NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/15 22:32:24] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/15 22:32:24] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/15 22:32:24] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/15 22:32:24] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000/config.yaml
[08/15 22:32:24] d2.utils.env INFO: Using a generated random seed 25254311
[08/15 22:32:28] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/15 22:32:28] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/15 22:32:28] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/15 22:32:28] d2.data.build INFO: Using training sampler TrainingSampler
[08/15 22:32:28] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/15 22:32:28] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/15 22:32:28] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/15 22:32:28] d2.data.build INFO: Making batched data loader with batch_size=4
[08/15 22:32:28] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/15 22:32:32] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/15 22:32:32] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:32:32] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:32:32] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:32:32] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/15 22:33:07] d2.utils.events INFO:  eta: 0:22:04  iter: 19  total_loss: 41.94  m1_loss_ce: 0.5294  m1_loss_mask: 0.1616  m1_loss_dice: 1.283  m1_loss_ce_0: 0.665  m1_loss_mask_0: 0.1865  m1_loss_dice_0: 1.49  m1_loss_ce_1: 0.6823  m1_loss_mask_1: 0.1731  m1_loss_dice_1: 1.44  m1_loss_ce_2: 0.6681  m1_loss_mask_2: 0.1662  m1_loss_dice_2: 1.38  m1_loss_ce_3: 0.6353  m1_loss_mask_3: 0.1639  m1_loss_dice_3: 1.291  m1_loss_ce_4: 0.5837  m1_loss_mask_4: 0.1635  m1_loss_dice_4: 1.285  m1_loss_ce_5: 0.5694  m1_loss_mask_5: 0.1652  m1_loss_dice_5: 1.33  m1_loss_ce_6: 0.536  m1_loss_mask_6: 0.1625  m1_loss_dice_6: 1.306  m1_loss_ce_7: 0.5606  m1_loss_mask_7: 0.1628  m1_loss_dice_7: 1.281  m1_loss_ce_8: 0.5305  m1_loss_mask_8: 0.1624  m1_loss_dice_8: 1.287  m2_loss_ce: 0.5555  m2_loss_mask: 0.1612  m2_loss_dice: 1.235  m2_loss_ce_0: 0.6326  m2_loss_mask_0: 0.1765  m2_loss_dice_0: 1.482  m2_loss_ce_1: 0.6921  m2_loss_mask_1: 0.1679  m2_loss_dice_1: 1.407  m2_loss_ce_2: 0.6542  m2_loss_mask_2: 0.161  m2_loss_dice_2: 1.308  m2_loss_ce_3: 0.568  m2_loss_mask_3: 0.1591  m2_loss_dice_3: 1.278  m2_loss_ce_4: 0.5829  m2_loss_mask_4: 0.1618  m2_loss_dice_4: 1.3  m2_loss_ce_5: 0.5915  m2_loss_mask_5: 0.1583  m2_loss_dice_5: 1.267  m2_loss_ce_6: 0.572  m2_loss_mask_6: 0.1607  m2_loss_dice_6: 1.249  m2_loss_ce_7: 0.5549  m2_loss_mask_7: 0.16  m2_loss_dice_7: 1.256  m2_loss_ce_8: 0.5703  m2_loss_mask_8: 0.1601  m2_loss_dice_8: 1.268  com_loss_ce: 0.4251  com_loss_mask: 0.04675  com_loss_dice: 0.3136    time: 1.3628  last_time: 1.2778  data_time: 0.2137  last_data_time: 0.0527   lr: 0.0001  max_mem: 34653M
[08/15 22:33:34] d2.utils.events INFO:  eta: 0:21:17  iter: 39  total_loss: 40.91  m1_loss_ce: 0.5102  m1_loss_mask: 0.1637  m1_loss_dice: 1.213  m1_loss_ce_0: 0.6474  m1_loss_mask_0: 0.2016  m1_loss_dice_0: 1.454  m1_loss_ce_1: 0.6938  m1_loss_mask_1: 0.1785  m1_loss_dice_1: 1.335  m1_loss_ce_2: 0.6928  m1_loss_mask_2: 0.1727  m1_loss_dice_2: 1.275  m1_loss_ce_3: 0.5727  m1_loss_mask_3: 0.1719  m1_loss_dice_3: 1.234  m1_loss_ce_4: 0.5431  m1_loss_mask_4: 0.1686  m1_loss_dice_4: 1.231  m1_loss_ce_5: 0.5348  m1_loss_mask_5: 0.1668  m1_loss_dice_5: 1.22  m1_loss_ce_6: 0.4963  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.211  m1_loss_ce_7: 0.4908  m1_loss_mask_7: 0.1654  m1_loss_dice_7: 1.221  m1_loss_ce_8: 0.5166  m1_loss_mask_8: 0.165  m1_loss_dice_8: 1.206  m2_loss_ce: 0.5011  m2_loss_mask: 0.161  m2_loss_dice: 1.183  m2_loss_ce_0: 0.61  m2_loss_mask_0: 0.1937  m2_loss_dice_0: 1.43  m2_loss_ce_1: 0.6635  m2_loss_mask_1: 0.1698  m2_loss_dice_1: 1.342  m2_loss_ce_2: 0.6143  m2_loss_mask_2: 0.1632  m2_loss_dice_2: 1.251  m2_loss_ce_3: 0.5513  m2_loss_mask_3: 0.1613  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.5212  m2_loss_mask_4: 0.1627  m2_loss_dice_4: 1.181  m2_loss_ce_5: 0.5093  m2_loss_mask_5: 0.1615  m2_loss_dice_5: 1.191  m2_loss_ce_6: 0.5042  m2_loss_mask_6: 0.1578  m2_loss_dice_6: 1.2  m2_loss_ce_7: 0.5086  m2_loss_mask_7: 0.16  m2_loss_dice_7: 1.206  m2_loss_ce_8: 0.5121  m2_loss_mask_8: 0.1586  m2_loss_dice_8: 1.195  com_loss_ce: 0.4695  com_loss_mask: 0.05466  com_loss_dice: 0.3523    time: 1.3448  last_time: 1.3160  data_time: 0.0398  last_data_time: 0.0508   lr: 0.0001  max_mem: 34653M
[08/15 22:34:01] d2.utils.events INFO:  eta: 0:20:53  iter: 59  total_loss: 42.12  m1_loss_ce: 0.5222  m1_loss_mask: 0.1673  m1_loss_dice: 1.305  m1_loss_ce_0: 0.6299  m1_loss_mask_0: 0.1976  m1_loss_dice_0: 1.49  m1_loss_ce_1: 0.6676  m1_loss_mask_1: 0.1881  m1_loss_dice_1: 1.385  m1_loss_ce_2: 0.6286  m1_loss_mask_2: 0.1701  m1_loss_dice_2: 1.309  m1_loss_ce_3: 0.5614  m1_loss_mask_3: 0.1712  m1_loss_dice_3: 1.322  m1_loss_ce_4: 0.546  m1_loss_mask_4: 0.1694  m1_loss_dice_4: 1.311  m1_loss_ce_5: 0.5475  m1_loss_mask_5: 0.1688  m1_loss_dice_5: 1.287  m1_loss_ce_6: 0.4862  m1_loss_mask_6: 0.1698  m1_loss_dice_6: 1.307  m1_loss_ce_7: 0.4858  m1_loss_mask_7: 0.1655  m1_loss_dice_7: 1.299  m1_loss_ce_8: 0.4792  m1_loss_mask_8: 0.1699  m1_loss_dice_8: 1.309  m2_loss_ce: 0.5275  m2_loss_mask: 0.1642  m2_loss_dice: 1.24  m2_loss_ce_0: 0.6203  m2_loss_mask_0: 0.1928  m2_loss_dice_0: 1.523  m2_loss_ce_1: 0.6631  m2_loss_mask_1: 0.1821  m2_loss_dice_1: 1.418  m2_loss_ce_2: 0.6312  m2_loss_mask_2: 0.1693  m2_loss_dice_2: 1.339  m2_loss_ce_3: 0.5687  m2_loss_mask_3: 0.1667  m2_loss_dice_3: 1.255  m2_loss_ce_4: 0.5619  m2_loss_mask_4: 0.1683  m2_loss_dice_4: 1.291  m2_loss_ce_5: 0.5381  m2_loss_mask_5: 0.166  m2_loss_dice_5: 1.273  m2_loss_ce_6: 0.5182  m2_loss_mask_6: 0.1643  m2_loss_dice_6: 1.237  m2_loss_ce_7: 0.5063  m2_loss_mask_7: 0.1627  m2_loss_dice_7: 1.215  m2_loss_ce_8: 0.5222  m2_loss_mask_8: 0.165  m2_loss_dice_8: 1.275  com_loss_ce: 0.3907  com_loss_mask: 0.04517  com_loss_dice: 0.3356    time: 1.3443  last_time: 1.3347  data_time: 0.0400  last_data_time: 0.0443   lr: 0.0001  max_mem: 34653M
[08/15 22:34:27] d2.utils.events INFO:  eta: 0:20:22  iter: 79  total_loss: 41.78  m1_loss_ce: 0.5135  m1_loss_mask: 0.187  m1_loss_dice: 1.299  m1_loss_ce_0: 0.6518  m1_loss_mask_0: 0.208  m1_loss_dice_0: 1.473  m1_loss_ce_1: 0.6815  m1_loss_mask_1: 0.1945  m1_loss_dice_1: 1.391  m1_loss_ce_2: 0.6479  m1_loss_mask_2: 0.1941  m1_loss_dice_2: 1.307  m1_loss_ce_3: 0.6098  m1_loss_mask_3: 0.1896  m1_loss_dice_3: 1.27  m1_loss_ce_4: 0.5467  m1_loss_mask_4: 0.1909  m1_loss_dice_4: 1.279  m1_loss_ce_5: 0.5542  m1_loss_mask_5: 0.1886  m1_loss_dice_5: 1.29  m1_loss_ce_6: 0.5253  m1_loss_mask_6: 0.1909  m1_loss_dice_6: 1.265  m1_loss_ce_7: 0.5111  m1_loss_mask_7: 0.1913  m1_loss_dice_7: 1.248  m1_loss_ce_8: 0.51  m1_loss_mask_8: 0.189  m1_loss_dice_8: 1.266  m2_loss_ce: 0.4781  m2_loss_mask: 0.176  m2_loss_dice: 1.229  m2_loss_ce_0: 0.6105  m2_loss_mask_0: 0.2066  m2_loss_dice_0: 1.447  m2_loss_ce_1: 0.64  m2_loss_mask_1: 0.1927  m2_loss_dice_1: 1.394  m2_loss_ce_2: 0.5964  m2_loss_mask_2: 0.1747  m2_loss_dice_2: 1.282  m2_loss_ce_3: 0.5586  m2_loss_mask_3: 0.1749  m2_loss_dice_3: 1.244  m2_loss_ce_4: 0.5424  m2_loss_mask_4: 0.1765  m2_loss_dice_4: 1.242  m2_loss_ce_5: 0.5202  m2_loss_mask_5: 0.1745  m2_loss_dice_5: 1.259  m2_loss_ce_6: 0.5101  m2_loss_mask_6: 0.1737  m2_loss_dice_6: 1.24  m2_loss_ce_7: 0.5046  m2_loss_mask_7: 0.1763  m2_loss_dice_7: 1.202  m2_loss_ce_8: 0.4797  m2_loss_mask_8: 0.1767  m2_loss_dice_8: 1.23  com_loss_ce: 0.4486  com_loss_mask: 0.04982  com_loss_dice: 0.3451    time: 1.3391  last_time: 1.3693  data_time: 0.0403  last_data_time: 0.0397   lr: 0.0001  max_mem: 34653M
[08/15 22:34:54] d2.utils.events INFO:  eta: 0:20:01  iter: 99  total_loss: 43.57  m1_loss_ce: 0.6082  m1_loss_mask: 0.1672  m1_loss_dice: 1.252  m1_loss_ce_0: 0.6511  m1_loss_mask_0: 0.1986  m1_loss_dice_0: 1.493  m1_loss_ce_1: 0.7584  m1_loss_mask_1: 0.1761  m1_loss_dice_1: 1.407  m1_loss_ce_2: 0.6974  m1_loss_mask_2: 0.1719  m1_loss_dice_2: 1.349  m1_loss_ce_3: 0.6342  m1_loss_mask_3: 0.1754  m1_loss_dice_3: 1.317  m1_loss_ce_4: 0.6374  m1_loss_mask_4: 0.1739  m1_loss_dice_4: 1.317  m1_loss_ce_5: 0.6232  m1_loss_mask_5: 0.1727  m1_loss_dice_5: 1.29  m1_loss_ce_6: 0.5783  m1_loss_mask_6: 0.1733  m1_loss_dice_6: 1.283  m1_loss_ce_7: 0.5546  m1_loss_mask_7: 0.1736  m1_loss_dice_7: 1.326  m1_loss_ce_8: 0.5631  m1_loss_mask_8: 0.1738  m1_loss_dice_8: 1.277  m2_loss_ce: 0.5162  m2_loss_mask: 0.1701  m2_loss_dice: 1.279  m2_loss_ce_0: 0.6846  m2_loss_mask_0: 0.188  m2_loss_dice_0: 1.536  m2_loss_ce_1: 0.7061  m2_loss_mask_1: 0.1808  m2_loss_dice_1: 1.416  m2_loss_ce_2: 0.661  m2_loss_mask_2: 0.1745  m2_loss_dice_2: 1.361  m2_loss_ce_3: 0.6474  m2_loss_mask_3: 0.1736  m2_loss_dice_3: 1.331  m2_loss_ce_4: 0.5991  m2_loss_mask_4: 0.1741  m2_loss_dice_4: 1.306  m2_loss_ce_5: 0.5847  m2_loss_mask_5: 0.1788  m2_loss_dice_5: 1.304  m2_loss_ce_6: 0.5685  m2_loss_mask_6: 0.1756  m2_loss_dice_6: 1.307  m2_loss_ce_7: 0.5702  m2_loss_mask_7: 0.1742  m2_loss_dice_7: 1.274  m2_loss_ce_8: 0.5563  m2_loss_mask_8: 0.1733  m2_loss_dice_8: 1.278  com_loss_ce: 0.4873  com_loss_mask: 0.058  com_loss_dice: 0.3721    time: 1.3438  last_time: 1.3307  data_time: 0.0428  last_data_time: 0.0353   lr: 0.0001  max_mem: 34653M
[08/15 22:35:21] d2.utils.events INFO:  eta: 0:19:34  iter: 119  total_loss: 41.7  m1_loss_ce: 0.5993  m1_loss_mask: 0.1737  m1_loss_dice: 1.278  m1_loss_ce_0: 0.6688  m1_loss_mask_0: 0.206  m1_loss_dice_0: 1.441  m1_loss_ce_1: 0.7278  m1_loss_mask_1: 0.1866  m1_loss_dice_1: 1.36  m1_loss_ce_2: 0.6886  m1_loss_mask_2: 0.1813  m1_loss_dice_2: 1.308  m1_loss_ce_3: 0.6283  m1_loss_mask_3: 0.1792  m1_loss_dice_3: 1.256  m1_loss_ce_4: 0.5735  m1_loss_mask_4: 0.1789  m1_loss_dice_4: 1.314  m1_loss_ce_5: 0.6127  m1_loss_mask_5: 0.1746  m1_loss_dice_5: 1.248  m1_loss_ce_6: 0.5762  m1_loss_mask_6: 0.1779  m1_loss_dice_6: 1.264  m1_loss_ce_7: 0.575  m1_loss_mask_7: 0.1773  m1_loss_dice_7: 1.248  m1_loss_ce_8: 0.5766  m1_loss_mask_8: 0.1774  m1_loss_dice_8: 1.228  m2_loss_ce: 0.5511  m2_loss_mask: 0.1741  m2_loss_dice: 1.226  m2_loss_ce_0: 0.6309  m2_loss_mask_0: 0.2049  m2_loss_dice_0: 1.465  m2_loss_ce_1: 0.6943  m2_loss_mask_1: 0.185  m2_loss_dice_1: 1.399  m2_loss_ce_2: 0.622  m2_loss_mask_2: 0.1806  m2_loss_dice_2: 1.302  m2_loss_ce_3: 0.5894  m2_loss_mask_3: 0.1792  m2_loss_dice_3: 1.233  m2_loss_ce_4: 0.5622  m2_loss_mask_4: 0.1797  m2_loss_dice_4: 1.248  m2_loss_ce_5: 0.5334  m2_loss_mask_5: 0.1768  m2_loss_dice_5: 1.256  m2_loss_ce_6: 0.5343  m2_loss_mask_6: 0.1742  m2_loss_dice_6: 1.213  m2_loss_ce_7: 0.5453  m2_loss_mask_7: 0.1759  m2_loss_dice_7: 1.261  m2_loss_ce_8: 0.5324  m2_loss_mask_8: 0.1749  m2_loss_dice_8: 1.265  com_loss_ce: 0.5414  com_loss_mask: 0.06127  com_loss_dice: 0.4095    time: 1.3413  last_time: 1.4319  data_time: 0.0405  last_data_time: 0.0464   lr: 0.0001  max_mem: 34653M
[08/15 22:35:49] d2.utils.events INFO:  eta: 0:19:13  iter: 139  total_loss: 41.8  m1_loss_ce: 0.5538  m1_loss_mask: 0.1538  m1_loss_dice: 1.272  m1_loss_ce_0: 0.6501  m1_loss_mask_0: 0.1829  m1_loss_dice_0: 1.441  m1_loss_ce_1: 0.7192  m1_loss_mask_1: 0.1676  m1_loss_dice_1: 1.353  m1_loss_ce_2: 0.6724  m1_loss_mask_2: 0.1628  m1_loss_dice_2: 1.269  m1_loss_ce_3: 0.5811  m1_loss_mask_3: 0.1607  m1_loss_dice_3: 1.215  m1_loss_ce_4: 0.5727  m1_loss_mask_4: 0.1585  m1_loss_dice_4: 1.252  m1_loss_ce_5: 0.5757  m1_loss_mask_5: 0.1577  m1_loss_dice_5: 1.219  m1_loss_ce_6: 0.5557  m1_loss_mask_6: 0.1577  m1_loss_dice_6: 1.215  m1_loss_ce_7: 0.5791  m1_loss_mask_7: 0.1579  m1_loss_dice_7: 1.201  m1_loss_ce_8: 0.5724  m1_loss_mask_8: 0.1581  m1_loss_dice_8: 1.219  m2_loss_ce: 0.5276  m2_loss_mask: 0.1525  m2_loss_dice: 1.178  m2_loss_ce_0: 0.6461  m2_loss_mask_0: 0.1892  m2_loss_dice_0: 1.423  m2_loss_ce_1: 0.6947  m2_loss_mask_1: 0.1634  m2_loss_dice_1: 1.37  m2_loss_ce_2: 0.6648  m2_loss_mask_2: 0.154  m2_loss_dice_2: 1.303  m2_loss_ce_3: 0.5862  m2_loss_mask_3: 0.1572  m2_loss_dice_3: 1.258  m2_loss_ce_4: 0.5566  m2_loss_mask_4: 0.1547  m2_loss_dice_4: 1.269  m2_loss_ce_5: 0.5412  m2_loss_mask_5: 0.1535  m2_loss_dice_5: 1.246  m2_loss_ce_6: 0.5435  m2_loss_mask_6: 0.1547  m2_loss_dice_6: 1.214  m2_loss_ce_7: 0.5341  m2_loss_mask_7: 0.1522  m2_loss_dice_7: 1.237  m2_loss_ce_8: 0.5322  m2_loss_mask_8: 0.152  m2_loss_dice_8: 1.208  com_loss_ce: 0.5271  com_loss_mask: 0.05495  com_loss_dice: 0.408    time: 1.3466  last_time: 1.3634  data_time: 0.0407  last_data_time: 0.0339   lr: 0.0001  max_mem: 34653M
[08/15 22:36:16] d2.utils.events INFO:  eta: 0:18:44  iter: 159  total_loss: 41.29  m1_loss_ce: 0.509  m1_loss_mask: 0.1646  m1_loss_dice: 1.292  m1_loss_ce_0: 0.6542  m1_loss_mask_0: 0.1942  m1_loss_dice_0: 1.397  m1_loss_ce_1: 0.6954  m1_loss_mask_1: 0.1818  m1_loss_dice_1: 1.352  m1_loss_ce_2: 0.6202  m1_loss_mask_2: 0.1746  m1_loss_dice_2: 1.295  m1_loss_ce_3: 0.5759  m1_loss_mask_3: 0.1752  m1_loss_dice_3: 1.212  m1_loss_ce_4: 0.5492  m1_loss_mask_4: 0.1738  m1_loss_dice_4: 1.217  m1_loss_ce_5: 0.5391  m1_loss_mask_5: 0.1734  m1_loss_dice_5: 1.216  m1_loss_ce_6: 0.4993  m1_loss_mask_6: 0.1723  m1_loss_dice_6: 1.243  m1_loss_ce_7: 0.5184  m1_loss_mask_7: 0.1736  m1_loss_dice_7: 1.235  m1_loss_ce_8: 0.5277  m1_loss_mask_8: 0.1729  m1_loss_dice_8: 1.225  m2_loss_ce: 0.5085  m2_loss_mask: 0.1586  m2_loss_dice: 1.189  m2_loss_ce_0: 0.6289  m2_loss_mask_0: 0.1889  m2_loss_dice_0: 1.426  m2_loss_ce_1: 0.6289  m2_loss_mask_1: 0.1701  m2_loss_dice_1: 1.331  m2_loss_ce_2: 0.5765  m2_loss_mask_2: 0.1655  m2_loss_dice_2: 1.253  m2_loss_ce_3: 0.5277  m2_loss_mask_3: 0.1669  m2_loss_dice_3: 1.215  m2_loss_ce_4: 0.5353  m2_loss_mask_4: 0.1676  m2_loss_dice_4: 1.224  m2_loss_ce_5: 0.5197  m2_loss_mask_5: 0.1676  m2_loss_dice_5: 1.229  m2_loss_ce_6: 0.5097  m2_loss_mask_6: 0.1589  m2_loss_dice_6: 1.161  m2_loss_ce_7: 0.5259  m2_loss_mask_7: 0.1621  m2_loss_dice_7: 1.226  m2_loss_ce_8: 0.5262  m2_loss_mask_8: 0.162  m2_loss_dice_8: 1.181  com_loss_ce: 0.5513  com_loss_mask: 0.04721  com_loss_dice: 0.3501    time: 1.3459  last_time: 1.3079  data_time: 0.0399  last_data_time: 0.0419   lr: 0.0001  max_mem: 34653M
[08/15 22:36:43] d2.utils.events INFO:  eta: 0:18:18  iter: 179  total_loss: 40.85  m1_loss_ce: 0.5051  m1_loss_mask: 0.1765  m1_loss_dice: 1.27  m1_loss_ce_0: 0.6051  m1_loss_mask_0: 0.2063  m1_loss_dice_0: 1.415  m1_loss_ce_1: 0.6754  m1_loss_mask_1: 0.1885  m1_loss_dice_1: 1.337  m1_loss_ce_2: 0.6161  m1_loss_mask_2: 0.1848  m1_loss_dice_2: 1.295  m1_loss_ce_3: 0.5442  m1_loss_mask_3: 0.1829  m1_loss_dice_3: 1.234  m1_loss_ce_4: 0.5489  m1_loss_mask_4: 0.1789  m1_loss_dice_4: 1.242  m1_loss_ce_5: 0.5488  m1_loss_mask_5: 0.1781  m1_loss_dice_5: 1.223  m1_loss_ce_6: 0.5363  m1_loss_mask_6: 0.18  m1_loss_dice_6: 1.245  m1_loss_ce_7: 0.5226  m1_loss_mask_7: 0.1799  m1_loss_dice_7: 1.22  m1_loss_ce_8: 0.5123  m1_loss_mask_8: 0.1817  m1_loss_dice_8: 1.19  m2_loss_ce: 0.5322  m2_loss_mask: 0.1761  m2_loss_dice: 1.188  m2_loss_ce_0: 0.6194  m2_loss_mask_0: 0.2058  m2_loss_dice_0: 1.44  m2_loss_ce_1: 0.6899  m2_loss_mask_1: 0.1923  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.609  m2_loss_mask_2: 0.1834  m2_loss_dice_2: 1.27  m2_loss_ce_3: 0.5746  m2_loss_mask_3: 0.1823  m2_loss_dice_3: 1.222  m2_loss_ce_4: 0.5617  m2_loss_mask_4: 0.1836  m2_loss_dice_4: 1.18  m2_loss_ce_5: 0.5374  m2_loss_mask_5: 0.1793  m2_loss_dice_5: 1.19  m2_loss_ce_6: 0.5475  m2_loss_mask_6: 0.179  m2_loss_dice_6: 1.137  m2_loss_ce_7: 0.5234  m2_loss_mask_7: 0.1781  m2_loss_dice_7: 1.169  m2_loss_ce_8: 0.5298  m2_loss_mask_8: 0.1762  m2_loss_dice_8: 1.18  com_loss_ce: 0.4737  com_loss_mask: 0.03767  com_loss_dice: 0.2878    time: 1.3459  last_time: 1.3267  data_time: 0.0403  last_data_time: 0.0460   lr: 0.0001  max_mem: 34653M
[08/15 22:37:10] d2.utils.events INFO:  eta: 0:17:54  iter: 199  total_loss: 41.5  m1_loss_ce: 0.5165  m1_loss_mask: 0.1689  m1_loss_dice: 1.233  m1_loss_ce_0: 0.6596  m1_loss_mask_0: 0.2008  m1_loss_dice_0: 1.446  m1_loss_ce_1: 0.7374  m1_loss_mask_1: 0.1854  m1_loss_dice_1: 1.36  m1_loss_ce_2: 0.6593  m1_loss_mask_2: 0.1691  m1_loss_dice_2: 1.297  m1_loss_ce_3: 0.6298  m1_loss_mask_3: 0.1693  m1_loss_dice_3: 1.242  m1_loss_ce_4: 0.5948  m1_loss_mask_4: 0.1692  m1_loss_dice_4: 1.231  m1_loss_ce_5: 0.5809  m1_loss_mask_5: 0.1676  m1_loss_dice_5: 1.24  m1_loss_ce_6: 0.5899  m1_loss_mask_6: 0.1723  m1_loss_dice_6: 1.264  m1_loss_ce_7: 0.5438  m1_loss_mask_7: 0.1718  m1_loss_dice_7: 1.212  m1_loss_ce_8: 0.5084  m1_loss_mask_8: 0.1733  m1_loss_dice_8: 1.205  m2_loss_ce: 0.5536  m2_loss_mask: 0.1683  m2_loss_dice: 1.195  m2_loss_ce_0: 0.6731  m2_loss_mask_0: 0.2017  m2_loss_dice_0: 1.429  m2_loss_ce_1: 0.6964  m2_loss_mask_1: 0.1816  m2_loss_dice_1: 1.389  m2_loss_ce_2: 0.646  m2_loss_mask_2: 0.1698  m2_loss_dice_2: 1.307  m2_loss_ce_3: 0.5903  m2_loss_mask_3: 0.1698  m2_loss_dice_3: 1.268  m2_loss_ce_4: 0.5534  m2_loss_mask_4: 0.1727  m2_loss_dice_4: 1.26  m2_loss_ce_5: 0.5674  m2_loss_mask_5: 0.1715  m2_loss_dice_5: 1.265  m2_loss_ce_6: 0.5553  m2_loss_mask_6: 0.1714  m2_loss_dice_6: 1.254  m2_loss_ce_7: 0.5615  m2_loss_mask_7: 0.1688  m2_loss_dice_7: 1.218  m2_loss_ce_8: 0.5332  m2_loss_mask_8: 0.1722  m2_loss_dice_8: 1.236  com_loss_ce: 0.445  com_loss_mask: 0.03817  com_loss_dice: 0.2856    time: 1.3475  last_time: 1.2858  data_time: 0.0423  last_data_time: 0.0423   lr: 0.0001  max_mem: 34653M
[08/15 22:37:38] d2.utils.events INFO:  eta: 0:17:30  iter: 219  total_loss: 44.28  m1_loss_ce: 0.5479  m1_loss_mask: 0.1558  m1_loss_dice: 1.317  m1_loss_ce_0: 0.6824  m1_loss_mask_0: 0.1871  m1_loss_dice_0: 1.513  m1_loss_ce_1: 0.7798  m1_loss_mask_1: 0.1705  m1_loss_dice_1: 1.436  m1_loss_ce_2: 0.6836  m1_loss_mask_2: 0.1646  m1_loss_dice_2: 1.35  m1_loss_ce_3: 0.6779  m1_loss_mask_3: 0.165  m1_loss_dice_3: 1.305  m1_loss_ce_4: 0.593  m1_loss_mask_4: 0.1612  m1_loss_dice_4: 1.324  m1_loss_ce_5: 0.5993  m1_loss_mask_5: 0.1599  m1_loss_dice_5: 1.302  m1_loss_ce_6: 0.5725  m1_loss_mask_6: 0.1616  m1_loss_dice_6: 1.291  m1_loss_ce_7: 0.6163  m1_loss_mask_7: 0.1609  m1_loss_dice_7: 1.296  m1_loss_ce_8: 0.5651  m1_loss_mask_8: 0.1608  m1_loss_dice_8: 1.291  m2_loss_ce: 0.5758  m2_loss_mask: 0.1541  m2_loss_dice: 1.307  m2_loss_ce_0: 0.6738  m2_loss_mask_0: 0.1796  m2_loss_dice_0: 1.523  m2_loss_ce_1: 0.6963  m2_loss_mask_1: 0.1686  m2_loss_dice_1: 1.43  m2_loss_ce_2: 0.6526  m2_loss_mask_2: 0.1576  m2_loss_dice_2: 1.387  m2_loss_ce_3: 0.6425  m2_loss_mask_3: 0.1581  m2_loss_dice_3: 1.32  m2_loss_ce_4: 0.5747  m2_loss_mask_4: 0.1578  m2_loss_dice_4: 1.298  m2_loss_ce_5: 0.5624  m2_loss_mask_5: 0.1561  m2_loss_dice_5: 1.313  m2_loss_ce_6: 0.5749  m2_loss_mask_6: 0.1562  m2_loss_dice_6: 1.336  m2_loss_ce_7: 0.5741  m2_loss_mask_7: 0.155  m2_loss_dice_7: 1.308  m2_loss_ce_8: 0.5364  m2_loss_mask_8: 0.1553  m2_loss_dice_8: 1.298  com_loss_ce: 0.4692  com_loss_mask: 0.03284  com_loss_dice: 0.2946    time: 1.3498  last_time: 1.3195  data_time: 0.0419  last_data_time: 0.0423   lr: 0.0001  max_mem: 34653M
[08/15 22:38:06] d2.utils.events INFO:  eta: 0:17:05  iter: 239  total_loss: 41.94  m1_loss_ce: 0.5186  m1_loss_mask: 0.1588  m1_loss_dice: 1.277  m1_loss_ce_0: 0.6475  m1_loss_mask_0: 0.1861  m1_loss_dice_0: 1.466  m1_loss_ce_1: 0.7016  m1_loss_mask_1: 0.1692  m1_loss_dice_1: 1.404  m1_loss_ce_2: 0.653  m1_loss_mask_2: 0.1662  m1_loss_dice_2: 1.347  m1_loss_ce_3: 0.5692  m1_loss_mask_3: 0.1677  m1_loss_dice_3: 1.295  m1_loss_ce_4: 0.5603  m1_loss_mask_4: 0.1651  m1_loss_dice_4: 1.266  m1_loss_ce_5: 0.5671  m1_loss_mask_5: 0.1596  m1_loss_dice_5: 1.298  m1_loss_ce_6: 0.5667  m1_loss_mask_6: 0.163  m1_loss_dice_6: 1.252  m1_loss_ce_7: 0.5416  m1_loss_mask_7: 0.1606  m1_loss_dice_7: 1.281  m1_loss_ce_8: 0.5215  m1_loss_mask_8: 0.1582  m1_loss_dice_8: 1.281  m2_loss_ce: 0.5344  m2_loss_mask: 0.1609  m2_loss_dice: 1.263  m2_loss_ce_0: 0.6363  m2_loss_mask_0: 0.1887  m2_loss_dice_0: 1.486  m2_loss_ce_1: 0.7057  m2_loss_mask_1: 0.1696  m2_loss_dice_1: 1.416  m2_loss_ce_2: 0.6363  m2_loss_mask_2: 0.1649  m2_loss_dice_2: 1.349  m2_loss_ce_3: 0.5995  m2_loss_mask_3: 0.161  m2_loss_dice_3: 1.271  m2_loss_ce_4: 0.564  m2_loss_mask_4: 0.1631  m2_loss_dice_4: 1.312  m2_loss_ce_5: 0.5288  m2_loss_mask_5: 0.1635  m2_loss_dice_5: 1.308  m2_loss_ce_6: 0.5332  m2_loss_mask_6: 0.1617  m2_loss_dice_6: 1.253  m2_loss_ce_7: 0.5319  m2_loss_mask_7: 0.1608  m2_loss_dice_7: 1.23  m2_loss_ce_8: 0.535  m2_loss_mask_8: 0.1617  m2_loss_dice_8: 1.271  com_loss_ce: 0.4876  com_loss_mask: 0.03418  com_loss_dice: 0.291    time: 1.3525  last_time: 1.3336  data_time: 0.0414  last_data_time: 0.0406   lr: 0.0001  max_mem: 34653M
[08/15 22:38:33] d2.utils.events INFO:  eta: 0:16:37  iter: 259  total_loss: 41.74  m1_loss_ce: 0.5141  m1_loss_mask: 0.1701  m1_loss_dice: 1.241  m1_loss_ce_0: 0.6315  m1_loss_mask_0: 0.2076  m1_loss_dice_0: 1.423  m1_loss_ce_1: 0.6723  m1_loss_mask_1: 0.1849  m1_loss_dice_1: 1.387  m1_loss_ce_2: 0.6756  m1_loss_mask_2: 0.1773  m1_loss_dice_2: 1.286  m1_loss_ce_3: 0.5902  m1_loss_mask_3: 0.1732  m1_loss_dice_3: 1.255  m1_loss_ce_4: 0.5827  m1_loss_mask_4: 0.1716  m1_loss_dice_4: 1.229  m1_loss_ce_5: 0.5698  m1_loss_mask_5: 0.1715  m1_loss_dice_5: 1.238  m1_loss_ce_6: 0.5626  m1_loss_mask_6: 0.1733  m1_loss_dice_6: 1.24  m1_loss_ce_7: 0.5374  m1_loss_mask_7: 0.174  m1_loss_dice_7: 1.198  m1_loss_ce_8: 0.5217  m1_loss_mask_8: 0.1723  m1_loss_dice_8: 1.213  m2_loss_ce: 0.5725  m2_loss_mask: 0.1718  m2_loss_dice: 1.21  m2_loss_ce_0: 0.6592  m2_loss_mask_0: 0.2026  m2_loss_dice_0: 1.458  m2_loss_ce_1: 0.6668  m2_loss_mask_1: 0.1825  m2_loss_dice_1: 1.369  m2_loss_ce_2: 0.6456  m2_loss_mask_2: 0.1768  m2_loss_dice_2: 1.279  m2_loss_ce_3: 0.6351  m2_loss_mask_3: 0.1731  m2_loss_dice_3: 1.264  m2_loss_ce_4: 0.5766  m2_loss_mask_4: 0.1748  m2_loss_dice_4: 1.254  m2_loss_ce_5: 0.5598  m2_loss_mask_5: 0.1744  m2_loss_dice_5: 1.248  m2_loss_ce_6: 0.5464  m2_loss_mask_6: 0.1718  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.531  m2_loss_mask_7: 0.1719  m2_loss_dice_7: 1.248  m2_loss_ce_8: 0.5636  m2_loss_mask_8: 0.1712  m2_loss_dice_8: 1.227  com_loss_ce: 0.4666  com_loss_mask: 0.03548  com_loss_dice: 0.2816    time: 1.3519  last_time: 1.3138  data_time: 0.0423  last_data_time: 0.0386   lr: 0.0001  max_mem: 34653M
[08/15 22:38:59] d2.utils.events INFO:  eta: 0:16:10  iter: 279  total_loss: 41.87  m1_loss_ce: 0.5218  m1_loss_mask: 0.1664  m1_loss_dice: 1.248  m1_loss_ce_0: 0.6458  m1_loss_mask_0: 0.189  m1_loss_dice_0: 1.448  m1_loss_ce_1: 0.7204  m1_loss_mask_1: 0.1786  m1_loss_dice_1: 1.34  m1_loss_ce_2: 0.6179  m1_loss_mask_2: 0.1713  m1_loss_dice_2: 1.317  m1_loss_ce_3: 0.5769  m1_loss_mask_3: 0.1654  m1_loss_dice_3: 1.227  m1_loss_ce_4: 0.5795  m1_loss_mask_4: 0.1668  m1_loss_dice_4: 1.223  m1_loss_ce_5: 0.5625  m1_loss_mask_5: 0.1628  m1_loss_dice_5: 1.233  m1_loss_ce_6: 0.5591  m1_loss_mask_6: 0.1661  m1_loss_dice_6: 1.216  m1_loss_ce_7: 0.551  m1_loss_mask_7: 0.1642  m1_loss_dice_7: 1.226  m1_loss_ce_8: 0.5485  m1_loss_mask_8: 0.1658  m1_loss_dice_8: 1.195  m2_loss_ce: 0.537  m2_loss_mask: 0.1691  m2_loss_dice: 1.194  m2_loss_ce_0: 0.6295  m2_loss_mask_0: 0.1978  m2_loss_dice_0: 1.437  m2_loss_ce_1: 0.6912  m2_loss_mask_1: 0.1786  m2_loss_dice_1: 1.368  m2_loss_ce_2: 0.6507  m2_loss_mask_2: 0.1691  m2_loss_dice_2: 1.285  m2_loss_ce_3: 0.5996  m2_loss_mask_3: 0.1718  m2_loss_dice_3: 1.256  m2_loss_ce_4: 0.5384  m2_loss_mask_4: 0.172  m2_loss_dice_4: 1.234  m2_loss_ce_5: 0.5642  m2_loss_mask_5: 0.1701  m2_loss_dice_5: 1.228  m2_loss_ce_6: 0.5293  m2_loss_mask_6: 0.169  m2_loss_dice_6: 1.208  m2_loss_ce_7: 0.5212  m2_loss_mask_7: 0.1701  m2_loss_dice_7: 1.243  m2_loss_ce_8: 0.5219  m2_loss_mask_8: 0.1667  m2_loss_dice_8: 1.216  com_loss_ce: 0.4596  com_loss_mask: 0.03737  com_loss_dice: 0.2778    time: 1.3510  last_time: 1.3514  data_time: 0.0386  last_data_time: 0.0335   lr: 0.0001  max_mem: 34653M
[08/15 22:39:26] d2.utils.events INFO:  eta: 0:15:42  iter: 299  total_loss: 41.61  m1_loss_ce: 0.5032  m1_loss_mask: 0.1632  m1_loss_dice: 1.269  m1_loss_ce_0: 0.6569  m1_loss_mask_0: 0.1887  m1_loss_dice_0: 1.418  m1_loss_ce_1: 0.7641  m1_loss_mask_1: 0.1762  m1_loss_dice_1: 1.367  m1_loss_ce_2: 0.664  m1_loss_mask_2: 0.1685  m1_loss_dice_2: 1.312  m1_loss_ce_3: 0.6354  m1_loss_mask_3: 0.1678  m1_loss_dice_3: 1.252  m1_loss_ce_4: 0.6012  m1_loss_mask_4: 0.1645  m1_loss_dice_4: 1.257  m1_loss_ce_5: 0.5704  m1_loss_mask_5: 0.1622  m1_loss_dice_5: 1.26  m1_loss_ce_6: 0.551  m1_loss_mask_6: 0.1622  m1_loss_dice_6: 1.22  m1_loss_ce_7: 0.565  m1_loss_mask_7: 0.1633  m1_loss_dice_7: 1.209  m1_loss_ce_8: 0.5443  m1_loss_mask_8: 0.1611  m1_loss_dice_8: 1.215  m2_loss_ce: 0.5673  m2_loss_mask: 0.1517  m2_loss_dice: 1.262  m2_loss_ce_0: 0.6577  m2_loss_mask_0: 0.1834  m2_loss_dice_0: 1.424  m2_loss_ce_1: 0.7349  m2_loss_mask_1: 0.1705  m2_loss_dice_1: 1.354  m2_loss_ce_2: 0.6734  m2_loss_mask_2: 0.1659  m2_loss_dice_2: 1.329  m2_loss_ce_3: 0.6259  m2_loss_mask_3: 0.1659  m2_loss_dice_3: 1.253  m2_loss_ce_4: 0.594  m2_loss_mask_4: 0.1562  m2_loss_dice_4: 1.226  m2_loss_ce_5: 0.5891  m2_loss_mask_5: 0.1622  m2_loss_dice_5: 1.274  m2_loss_ce_6: 0.5773  m2_loss_mask_6: 0.1595  m2_loss_dice_6: 1.228  m2_loss_ce_7: 0.562  m2_loss_mask_7: 0.1554  m2_loss_dice_7: 1.217  m2_loss_ce_8: 0.5867  m2_loss_mask_8: 0.1506  m2_loss_dice_8: 1.234  com_loss_ce: 0.4488  com_loss_mask: 0.03454  com_loss_dice: 0.2717    time: 1.3501  last_time: 1.3718  data_time: 0.0401  last_data_time: 0.0351   lr: 0.0001  max_mem: 34653M
[08/15 22:39:54] d2.utils.events INFO:  eta: 0:15:16  iter: 319  total_loss: 42.39  m1_loss_ce: 0.5166  m1_loss_mask: 0.1612  m1_loss_dice: 1.298  m1_loss_ce_0: 0.6415  m1_loss_mask_0: 0.187  m1_loss_dice_0: 1.446  m1_loss_ce_1: 0.6972  m1_loss_mask_1: 0.1829  m1_loss_dice_1: 1.432  m1_loss_ce_2: 0.6455  m1_loss_mask_2: 0.1689  m1_loss_dice_2: 1.356  m1_loss_ce_3: 0.5849  m1_loss_mask_3: 0.1683  m1_loss_dice_3: 1.309  m1_loss_ce_4: 0.5675  m1_loss_mask_4: 0.1649  m1_loss_dice_4: 1.283  m1_loss_ce_5: 0.5322  m1_loss_mask_5: 0.1655  m1_loss_dice_5: 1.327  m1_loss_ce_6: 0.5094  m1_loss_mask_6: 0.1665  m1_loss_dice_6: 1.321  m1_loss_ce_7: 0.5141  m1_loss_mask_7: 0.1658  m1_loss_dice_7: 1.301  m1_loss_ce_8: 0.5223  m1_loss_mask_8: 0.1649  m1_loss_dice_8: 1.285  m2_loss_ce: 0.5112  m2_loss_mask: 0.1637  m2_loss_dice: 1.263  m2_loss_ce_0: 0.6061  m2_loss_mask_0: 0.1944  m2_loss_dice_0: 1.489  m2_loss_ce_1: 0.6788  m2_loss_mask_1: 0.1767  m2_loss_dice_1: 1.426  m2_loss_ce_2: 0.6434  m2_loss_mask_2: 0.1677  m2_loss_dice_2: 1.371  m2_loss_ce_3: 0.5767  m2_loss_mask_3: 0.1682  m2_loss_dice_3: 1.27  m2_loss_ce_4: 0.5442  m2_loss_mask_4: 0.1667  m2_loss_dice_4: 1.296  m2_loss_ce_5: 0.5383  m2_loss_mask_5: 0.1704  m2_loss_dice_5: 1.309  m2_loss_ce_6: 0.5028  m2_loss_mask_6: 0.164  m2_loss_dice_6: 1.243  m2_loss_ce_7: 0.5271  m2_loss_mask_7: 0.1614  m2_loss_dice_7: 1.252  m2_loss_ce_8: 0.5077  m2_loss_mask_8: 0.1644  m2_loss_dice_8: 1.259  com_loss_ce: 0.4344  com_loss_mask: 0.0355  com_loss_dice: 0.2787    time: 1.3513  last_time: 1.2899  data_time: 0.0400  last_data_time: 0.0337   lr: 0.0001  max_mem: 34653M
[08/15 22:40:21] d2.utils.events INFO:  eta: 0:14:49  iter: 339  total_loss: 41.25  m1_loss_ce: 0.5134  m1_loss_mask: 0.154  m1_loss_dice: 1.191  m1_loss_ce_0: 0.6674  m1_loss_mask_0: 0.1831  m1_loss_dice_0: 1.417  m1_loss_ce_1: 0.725  m1_loss_mask_1: 0.1751  m1_loss_dice_1: 1.326  m1_loss_ce_2: 0.6187  m1_loss_mask_2: 0.1592  m1_loss_dice_2: 1.273  m1_loss_ce_3: 0.5973  m1_loss_mask_3: 0.1567  m1_loss_dice_3: 1.21  m1_loss_ce_4: 0.5985  m1_loss_mask_4: 0.1532  m1_loss_dice_4: 1.209  m1_loss_ce_5: 0.5671  m1_loss_mask_5: 0.152  m1_loss_dice_5: 1.205  m1_loss_ce_6: 0.5672  m1_loss_mask_6: 0.1536  m1_loss_dice_6: 1.17  m1_loss_ce_7: 0.5701  m1_loss_mask_7: 0.1522  m1_loss_dice_7: 1.161  m1_loss_ce_8: 0.529  m1_loss_mask_8: 0.1541  m1_loss_dice_8: 1.161  m2_loss_ce: 0.5375  m2_loss_mask: 0.1548  m2_loss_dice: 1.179  m2_loss_ce_0: 0.6601  m2_loss_mask_0: 0.1882  m2_loss_dice_0: 1.417  m2_loss_ce_1: 0.663  m2_loss_mask_1: 0.1693  m2_loss_dice_1: 1.338  m2_loss_ce_2: 0.6816  m2_loss_mask_2: 0.1571  m2_loss_dice_2: 1.251  m2_loss_ce_3: 0.6008  m2_loss_mask_3: 0.1567  m2_loss_dice_3: 1.197  m2_loss_ce_4: 0.5673  m2_loss_mask_4: 0.156  m2_loss_dice_4: 1.201  m2_loss_ce_5: 0.5563  m2_loss_mask_5: 0.1545  m2_loss_dice_5: 1.237  m2_loss_ce_6: 0.5533  m2_loss_mask_6: 0.1545  m2_loss_dice_6: 1.204  m2_loss_ce_7: 0.567  m2_loss_mask_7: 0.154  m2_loss_dice_7: 1.162  m2_loss_ce_8: 0.5302  m2_loss_mask_8: 0.1535  m2_loss_dice_8: 1.178  com_loss_ce: 0.4012  com_loss_mask: 0.03365  com_loss_dice: 0.2585    time: 1.3518  last_time: 1.3298  data_time: 0.0398  last_data_time: 0.0342   lr: 0.0001  max_mem: 34653M
[08/15 22:40:48] d2.utils.events INFO:  eta: 0:14:22  iter: 359  total_loss: 40.06  m1_loss_ce: 0.473  m1_loss_mask: 0.1632  m1_loss_dice: 1.22  m1_loss_ce_0: 0.6459  m1_loss_mask_0: 0.2037  m1_loss_dice_0: 1.371  m1_loss_ce_1: 0.6697  m1_loss_mask_1: 0.1847  m1_loss_dice_1: 1.315  m1_loss_ce_2: 0.5946  m1_loss_mask_2: 0.1694  m1_loss_dice_2: 1.252  m1_loss_ce_3: 0.5794  m1_loss_mask_3: 0.1654  m1_loss_dice_3: 1.21  m1_loss_ce_4: 0.5184  m1_loss_mask_4: 0.1672  m1_loss_dice_4: 1.216  m1_loss_ce_5: 0.5368  m1_loss_mask_5: 0.1659  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.516  m1_loss_mask_6: 0.1655  m1_loss_dice_6: 1.167  m1_loss_ce_7: 0.5182  m1_loss_mask_7: 0.1648  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.4995  m1_loss_mask_8: 0.1632  m1_loss_dice_8: 1.159  m2_loss_ce: 0.5071  m2_loss_mask: 0.1601  m2_loss_dice: 1.189  m2_loss_ce_0: 0.617  m2_loss_mask_0: 0.1924  m2_loss_dice_0: 1.375  m2_loss_ce_1: 0.6566  m2_loss_mask_1: 0.1795  m2_loss_dice_1: 1.272  m2_loss_ce_2: 0.627  m2_loss_mask_2: 0.1658  m2_loss_dice_2: 1.235  m2_loss_ce_3: 0.5583  m2_loss_mask_3: 0.1662  m2_loss_dice_3: 1.168  m2_loss_ce_4: 0.5256  m2_loss_mask_4: 0.1649  m2_loss_dice_4: 1.18  m2_loss_ce_5: 0.5623  m2_loss_mask_5: 0.1627  m2_loss_dice_5: 1.171  m2_loss_ce_6: 0.531  m2_loss_mask_6: 0.1616  m2_loss_dice_6: 1.162  m2_loss_ce_7: 0.5153  m2_loss_mask_7: 0.1617  m2_loss_dice_7: 1.172  m2_loss_ce_8: 0.5223  m2_loss_mask_8: 0.1602  m2_loss_dice_8: 1.185  com_loss_ce: 0.4142  com_loss_mask: 0.03623  com_loss_dice: 0.2512    time: 1.3517  last_time: 1.2624  data_time: 0.0388  last_data_time: 0.0412   lr: 0.0001  max_mem: 34653M
[08/15 22:41:16] d2.utils.events INFO:  eta: 0:13:55  iter: 379  total_loss: 40.59  m1_loss_ce: 0.4757  m1_loss_mask: 0.1638  m1_loss_dice: 1.201  m1_loss_ce_0: 0.6075  m1_loss_mask_0: 0.1931  m1_loss_dice_0: 1.382  m1_loss_ce_1: 0.6534  m1_loss_mask_1: 0.1772  m1_loss_dice_1: 1.346  m1_loss_ce_2: 0.6266  m1_loss_mask_2: 0.167  m1_loss_dice_2: 1.274  m1_loss_ce_3: 0.555  m1_loss_mask_3: 0.1669  m1_loss_dice_3: 1.222  m1_loss_ce_4: 0.5479  m1_loss_mask_4: 0.1693  m1_loss_dice_4: 1.225  m1_loss_ce_5: 0.5331  m1_loss_mask_5: 0.1685  m1_loss_dice_5: 1.192  m1_loss_ce_6: 0.5344  m1_loss_mask_6: 0.1631  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.5114  m1_loss_mask_7: 0.167  m1_loss_dice_7: 1.166  m1_loss_ce_8: 0.5077  m1_loss_mask_8: 0.1625  m1_loss_dice_8: 1.186  m2_loss_ce: 0.5399  m2_loss_mask: 0.1618  m2_loss_dice: 1.18  m2_loss_ce_0: 0.6418  m2_loss_mask_0: 0.1949  m2_loss_dice_0: 1.449  m2_loss_ce_1: 0.67  m2_loss_mask_1: 0.1744  m2_loss_dice_1: 1.353  m2_loss_ce_2: 0.6392  m2_loss_mask_2: 0.1655  m2_loss_dice_2: 1.281  m2_loss_ce_3: 0.5719  m2_loss_mask_3: 0.1628  m2_loss_dice_3: 1.234  m2_loss_ce_4: 0.5663  m2_loss_mask_4: 0.1612  m2_loss_dice_4: 1.202  m2_loss_ce_5: 0.5442  m2_loss_mask_5: 0.1633  m2_loss_dice_5: 1.252  m2_loss_ce_6: 0.5271  m2_loss_mask_6: 0.1598  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.5162  m2_loss_mask_7: 0.161  m2_loss_dice_7: 1.216  m2_loss_ce_8: 0.5053  m2_loss_mask_8: 0.1624  m2_loss_dice_8: 1.24  com_loss_ce: 0.4467  com_loss_mask: 0.03531  com_loss_dice: 0.2715    time: 1.3523  last_time: 1.4899  data_time: 0.0390  last_data_time: 0.0395   lr: 0.0001  max_mem: 34653M
[08/15 22:41:43] d2.utils.events INFO:  eta: 0:13:29  iter: 399  total_loss: 42.93  m1_loss_ce: 0.4993  m1_loss_mask: 0.1747  m1_loss_dice: 1.283  m1_loss_ce_0: 0.6459  m1_loss_mask_0: 0.2032  m1_loss_dice_0: 1.488  m1_loss_ce_1: 0.6771  m1_loss_mask_1: 0.1896  m1_loss_dice_1: 1.409  m1_loss_ce_2: 0.6336  m1_loss_mask_2: 0.1804  m1_loss_dice_2: 1.309  m1_loss_ce_3: 0.5618  m1_loss_mask_3: 0.1781  m1_loss_dice_3: 1.28  m1_loss_ce_4: 0.5575  m1_loss_mask_4: 0.1785  m1_loss_dice_4: 1.291  m1_loss_ce_5: 0.5651  m1_loss_mask_5: 0.1769  m1_loss_dice_5: 1.261  m1_loss_ce_6: 0.5178  m1_loss_mask_6: 0.1756  m1_loss_dice_6: 1.26  m1_loss_ce_7: 0.5275  m1_loss_mask_7: 0.1754  m1_loss_dice_7: 1.264  m1_loss_ce_8: 0.519  m1_loss_mask_8: 0.1734  m1_loss_dice_8: 1.267  m2_loss_ce: 0.6003  m2_loss_mask: 0.1703  m2_loss_dice: 1.319  m2_loss_ce_0: 0.659  m2_loss_mask_0: 0.2002  m2_loss_dice_0: 1.495  m2_loss_ce_1: 0.6974  m2_loss_mask_1: 0.1872  m2_loss_dice_1: 1.448  m2_loss_ce_2: 0.6559  m2_loss_mask_2: 0.1755  m2_loss_dice_2: 1.381  m2_loss_ce_3: 0.591  m2_loss_mask_3: 0.1771  m2_loss_dice_3: 1.314  m2_loss_ce_4: 0.5566  m2_loss_mask_4: 0.1764  m2_loss_dice_4: 1.292  m2_loss_ce_5: 0.5529  m2_loss_mask_5: 0.1737  m2_loss_dice_5: 1.332  m2_loss_ce_6: 0.5912  m2_loss_mask_6: 0.1716  m2_loss_dice_6: 1.312  m2_loss_ce_7: 0.5907  m2_loss_mask_7: 0.1692  m2_loss_dice_7: 1.284  m2_loss_ce_8: 0.5454  m2_loss_mask_8: 0.1681  m2_loss_dice_8: 1.306  com_loss_ce: 0.4423  com_loss_mask: 0.03549  com_loss_dice: 0.2802    time: 1.3532  last_time: 1.3112  data_time: 0.0390  last_data_time: 0.0422   lr: 0.0001  max_mem: 34653M
[08/15 22:42:10] d2.utils.events INFO:  eta: 0:13:02  iter: 419  total_loss: 40.32  m1_loss_ce: 0.4499  m1_loss_mask: 0.1633  m1_loss_dice: 1.211  m1_loss_ce_0: 0.5952  m1_loss_mask_0: 0.1923  m1_loss_dice_0: 1.388  m1_loss_ce_1: 0.6866  m1_loss_mask_1: 0.1789  m1_loss_dice_1: 1.297  m1_loss_ce_2: 0.6167  m1_loss_mask_2: 0.1692  m1_loss_dice_2: 1.22  m1_loss_ce_3: 0.5532  m1_loss_mask_3: 0.1697  m1_loss_dice_3: 1.195  m1_loss_ce_4: 0.4977  m1_loss_mask_4: 0.1646  m1_loss_dice_4: 1.239  m1_loss_ce_5: 0.4959  m1_loss_mask_5: 0.164  m1_loss_dice_5: 1.171  m1_loss_ce_6: 0.4578  m1_loss_mask_6: 0.1642  m1_loss_dice_6: 1.193  m1_loss_ce_7: 0.4757  m1_loss_mask_7: 0.1642  m1_loss_dice_7: 1.2  m1_loss_ce_8: 0.4596  m1_loss_mask_8: 0.1636  m1_loss_dice_8: 1.204  m2_loss_ce: 0.507  m2_loss_mask: 0.1702  m2_loss_dice: 1.203  m2_loss_ce_0: 0.6038  m2_loss_mask_0: 0.1946  m2_loss_dice_0: 1.388  m2_loss_ce_1: 0.6601  m2_loss_mask_1: 0.1827  m2_loss_dice_1: 1.346  m2_loss_ce_2: 0.6077  m2_loss_mask_2: 0.1755  m2_loss_dice_2: 1.256  m2_loss_ce_3: 0.5524  m2_loss_mask_3: 0.1711  m2_loss_dice_3: 1.23  m2_loss_ce_4: 0.5501  m2_loss_mask_4: 0.1711  m2_loss_dice_4: 1.218  m2_loss_ce_5: 0.573  m2_loss_mask_5: 0.1693  m2_loss_dice_5: 1.227  m2_loss_ce_6: 0.5526  m2_loss_mask_6: 0.1695  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.5338  m2_loss_mask_7: 0.1693  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.5119  m2_loss_mask_8: 0.1698  m2_loss_dice_8: 1.174  com_loss_ce: 0.4364  com_loss_mask: 0.03489  com_loss_dice: 0.2608    time: 1.3521  last_time: 1.3251  data_time: 0.0384  last_data_time: 0.0300   lr: 0.0001  max_mem: 34653M
[08/15 22:42:37] d2.utils.events INFO:  eta: 0:12:34  iter: 439  total_loss: 41.83  m1_loss_ce: 0.5079  m1_loss_mask: 0.1599  m1_loss_dice: 1.212  m1_loss_ce_0: 0.6591  m1_loss_mask_0: 0.1865  m1_loss_dice_0: 1.451  m1_loss_ce_1: 0.7187  m1_loss_mask_1: 0.1761  m1_loss_dice_1: 1.379  m1_loss_ce_2: 0.6455  m1_loss_mask_2: 0.1647  m1_loss_dice_2: 1.281  m1_loss_ce_3: 0.5672  m1_loss_mask_3: 0.1673  m1_loss_dice_3: 1.263  m1_loss_ce_4: 0.5337  m1_loss_mask_4: 0.1647  m1_loss_dice_4: 1.206  m1_loss_ce_5: 0.5248  m1_loss_mask_5: 0.1626  m1_loss_dice_5: 1.213  m1_loss_ce_6: 0.5074  m1_loss_mask_6: 0.1636  m1_loss_dice_6: 1.182  m1_loss_ce_7: 0.5335  m1_loss_mask_7: 0.1637  m1_loss_dice_7: 1.197  m1_loss_ce_8: 0.545  m1_loss_mask_8: 0.1601  m1_loss_dice_8: 1.197  m2_loss_ce: 0.5165  m2_loss_mask: 0.1638  m2_loss_dice: 1.195  m2_loss_ce_0: 0.6326  m2_loss_mask_0: 0.192  m2_loss_dice_0: 1.494  m2_loss_ce_1: 0.672  m2_loss_mask_1: 0.1734  m2_loss_dice_1: 1.38  m2_loss_ce_2: 0.6287  m2_loss_mask_2: 0.1661  m2_loss_dice_2: 1.264  m2_loss_ce_3: 0.5475  m2_loss_mask_3: 0.1701  m2_loss_dice_3: 1.26  m2_loss_ce_4: 0.5318  m2_loss_mask_4: 0.1683  m2_loss_dice_4: 1.257  m2_loss_ce_5: 0.5357  m2_loss_mask_5: 0.1666  m2_loss_dice_5: 1.218  m2_loss_ce_6: 0.5379  m2_loss_mask_6: 0.1651  m2_loss_dice_6: 1.194  m2_loss_ce_7: 0.5268  m2_loss_mask_7: 0.1646  m2_loss_dice_7: 1.23  m2_loss_ce_8: 0.5142  m2_loss_mask_8: 0.1646  m2_loss_dice_8: 1.206  com_loss_ce: 0.497  com_loss_mask: 0.03475  com_loss_dice: 0.2817    time: 1.3507  last_time: 1.3760  data_time: 0.0390  last_data_time: 0.0405   lr: 0.0001  max_mem: 34653M
[08/15 22:43:04] d2.utils.events INFO:  eta: 0:12:07  iter: 459  total_loss: 41.83  m1_loss_ce: 0.5152  m1_loss_mask: 0.1599  m1_loss_dice: 1.273  m1_loss_ce_0: 0.689  m1_loss_mask_0: 0.1821  m1_loss_dice_0: 1.424  m1_loss_ce_1: 0.6954  m1_loss_mask_1: 0.1674  m1_loss_dice_1: 1.356  m1_loss_ce_2: 0.6687  m1_loss_mask_2: 0.164  m1_loss_dice_2: 1.289  m1_loss_ce_3: 0.6336  m1_loss_mask_3: 0.1651  m1_loss_dice_3: 1.252  m1_loss_ce_4: 0.564  m1_loss_mask_4: 0.1661  m1_loss_dice_4: 1.255  m1_loss_ce_5: 0.5639  m1_loss_mask_5: 0.1664  m1_loss_dice_5: 1.283  m1_loss_ce_6: 0.5726  m1_loss_mask_6: 0.1657  m1_loss_dice_6: 1.245  m1_loss_ce_7: 0.5719  m1_loss_mask_7: 0.1669  m1_loss_dice_7: 1.222  m1_loss_ce_8: 0.5572  m1_loss_mask_8: 0.1648  m1_loss_dice_8: 1.243  m2_loss_ce: 0.564  m2_loss_mask: 0.1646  m2_loss_dice: 1.255  m2_loss_ce_0: 0.7011  m2_loss_mask_0: 0.1889  m2_loss_dice_0: 1.438  m2_loss_ce_1: 0.7142  m2_loss_mask_1: 0.1753  m2_loss_dice_1: 1.359  m2_loss_ce_2: 0.6846  m2_loss_mask_2: 0.1672  m2_loss_dice_2: 1.304  m2_loss_ce_3: 0.6159  m2_loss_mask_3: 0.1657  m2_loss_dice_3: 1.282  m2_loss_ce_4: 0.6003  m2_loss_mask_4: 0.1664  m2_loss_dice_4: 1.276  m2_loss_ce_5: 0.571  m2_loss_mask_5: 0.1662  m2_loss_dice_5: 1.296  m2_loss_ce_6: 0.583  m2_loss_mask_6: 0.1669  m2_loss_dice_6: 1.278  m2_loss_ce_7: 0.5571  m2_loss_mask_7: 0.1642  m2_loss_dice_7: 1.246  m2_loss_ce_8: 0.5592  m2_loss_mask_8: 0.165  m2_loss_dice_8: 1.236  com_loss_ce: 0.4569  com_loss_mask: 0.03502  com_loss_dice: 0.2739    time: 1.3506  last_time: 1.3218  data_time: 0.0423  last_data_time: 0.0413   lr: 0.0001  max_mem: 34653M
[08/15 22:43:31] d2.utils.events INFO:  eta: 0:11:40  iter: 479  total_loss: 41  m1_loss_ce: 0.5339  m1_loss_mask: 0.1743  m1_loss_dice: 1.204  m1_loss_ce_0: 0.669  m1_loss_mask_0: 0.1993  m1_loss_dice_0: 1.394  m1_loss_ce_1: 0.7292  m1_loss_mask_1: 0.1822  m1_loss_dice_1: 1.303  m1_loss_ce_2: 0.643  m1_loss_mask_2: 0.1742  m1_loss_dice_2: 1.249  m1_loss_ce_3: 0.6172  m1_loss_mask_3: 0.1763  m1_loss_dice_3: 1.218  m1_loss_ce_4: 0.584  m1_loss_mask_4: 0.1773  m1_loss_dice_4: 1.172  m1_loss_ce_5: 0.5723  m1_loss_mask_5: 0.173  m1_loss_dice_5: 1.197  m1_loss_ce_6: 0.5666  m1_loss_mask_6: 0.1756  m1_loss_dice_6: 1.15  m1_loss_ce_7: 0.569  m1_loss_mask_7: 0.1714  m1_loss_dice_7: 1.176  m1_loss_ce_8: 0.5363  m1_loss_mask_8: 0.1721  m1_loss_dice_8: 1.186  m2_loss_ce: 0.5721  m2_loss_mask: 0.1769  m2_loss_dice: 1.191  m2_loss_ce_0: 0.6446  m2_loss_mask_0: 0.1994  m2_loss_dice_0: 1.431  m2_loss_ce_1: 0.697  m2_loss_mask_1: 0.1842  m2_loss_dice_1: 1.378  m2_loss_ce_2: 0.6346  m2_loss_mask_2: 0.1781  m2_loss_dice_2: 1.281  m2_loss_ce_3: 0.595  m2_loss_mask_3: 0.1765  m2_loss_dice_3: 1.223  m2_loss_ce_4: 0.5808  m2_loss_mask_4: 0.1778  m2_loss_dice_4: 1.215  m2_loss_ce_5: 0.5593  m2_loss_mask_5: 0.1787  m2_loss_dice_5: 1.235  m2_loss_ce_6: 0.5721  m2_loss_mask_6: 0.1767  m2_loss_dice_6: 1.191  m2_loss_ce_7: 0.536  m2_loss_mask_7: 0.1768  m2_loss_dice_7: 1.214  m2_loss_ce_8: 0.565  m2_loss_mask_8: 0.1783  m2_loss_dice_8: 1.205  com_loss_ce: 0.4523  com_loss_mask: 0.03555  com_loss_dice: 0.2664    time: 1.3502  last_time: 1.3130  data_time: 0.0409  last_data_time: 0.0397   lr: 0.0001  max_mem: 34653M
[08/15 22:43:57] d2.utils.events INFO:  eta: 0:11:13  iter: 499  total_loss: 41.14  m1_loss_ce: 0.5212  m1_loss_mask: 0.1739  m1_loss_dice: 1.219  m1_loss_ce_0: 0.6494  m1_loss_mask_0: 0.1981  m1_loss_dice_0: 1.38  m1_loss_ce_1: 0.7058  m1_loss_mask_1: 0.1886  m1_loss_dice_1: 1.325  m1_loss_ce_2: 0.6174  m1_loss_mask_2: 0.1802  m1_loss_dice_2: 1.281  m1_loss_ce_3: 0.6071  m1_loss_mask_3: 0.1795  m1_loss_dice_3: 1.224  m1_loss_ce_4: 0.5876  m1_loss_mask_4: 0.1739  m1_loss_dice_4: 1.203  m1_loss_ce_5: 0.5608  m1_loss_mask_5: 0.1792  m1_loss_dice_5: 1.202  m1_loss_ce_6: 0.5452  m1_loss_mask_6: 0.1758  m1_loss_dice_6: 1.194  m1_loss_ce_7: 0.5589  m1_loss_mask_7: 0.1751  m1_loss_dice_7: 1.186  m1_loss_ce_8: 0.5451  m1_loss_mask_8: 0.174  m1_loss_dice_8: 1.192  m2_loss_ce: 0.5658  m2_loss_mask: 0.1729  m2_loss_dice: 1.213  m2_loss_ce_0: 0.6306  m2_loss_mask_0: 0.1995  m2_loss_dice_0: 1.427  m2_loss_ce_1: 0.684  m2_loss_mask_1: 0.1846  m2_loss_dice_1: 1.34  m2_loss_ce_2: 0.6639  m2_loss_mask_2: 0.1794  m2_loss_dice_2: 1.258  m2_loss_ce_3: 0.5736  m2_loss_mask_3: 0.1752  m2_loss_dice_3: 1.231  m2_loss_ce_4: 0.5492  m2_loss_mask_4: 0.1768  m2_loss_dice_4: 1.243  m2_loss_ce_5: 0.5731  m2_loss_mask_5: 0.173  m2_loss_dice_5: 1.227  m2_loss_ce_6: 0.5621  m2_loss_mask_6: 0.1746  m2_loss_dice_6: 1.217  m2_loss_ce_7: 0.5356  m2_loss_mask_7: 0.1726  m2_loss_dice_7: 1.226  m2_loss_ce_8: 0.5335  m2_loss_mask_8: 0.1743  m2_loss_dice_8: 1.206  com_loss_ce: 0.4016  com_loss_mask: 0.03769  com_loss_dice: 0.2656    time: 1.3494  last_time: 1.3848  data_time: 0.0388  last_data_time: 0.0403   lr: 0.0001  max_mem: 34653M
[08/15 22:44:24] d2.utils.events INFO:  eta: 0:10:46  iter: 519  total_loss: 39.46  m1_loss_ce: 0.4723  m1_loss_mask: 0.1684  m1_loss_dice: 1.202  m1_loss_ce_0: 0.589  m1_loss_mask_0: 0.1981  m1_loss_dice_0: 1.416  m1_loss_ce_1: 0.6579  m1_loss_mask_1: 0.1832  m1_loss_dice_1: 1.337  m1_loss_ce_2: 0.585  m1_loss_mask_2: 0.1782  m1_loss_dice_2: 1.257  m1_loss_ce_3: 0.5421  m1_loss_mask_3: 0.1748  m1_loss_dice_3: 1.177  m1_loss_ce_4: 0.523  m1_loss_mask_4: 0.1749  m1_loss_dice_4: 1.169  m1_loss_ce_5: 0.5334  m1_loss_mask_5: 0.1729  m1_loss_dice_5: 1.185  m1_loss_ce_6: 0.5033  m1_loss_mask_6: 0.1711  m1_loss_dice_6: 1.178  m1_loss_ce_7: 0.5005  m1_loss_mask_7: 0.1727  m1_loss_dice_7: 1.183  m1_loss_ce_8: 0.4888  m1_loss_mask_8: 0.1705  m1_loss_dice_8: 1.149  m2_loss_ce: 0.5237  m2_loss_mask: 0.1721  m2_loss_dice: 1.143  m2_loss_ce_0: 0.6097  m2_loss_mask_0: 0.2012  m2_loss_dice_0: 1.414  m2_loss_ce_1: 0.6834  m2_loss_mask_1: 0.1842  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.6066  m2_loss_mask_2: 0.1787  m2_loss_dice_2: 1.236  m2_loss_ce_3: 0.5332  m2_loss_mask_3: 0.1766  m2_loss_dice_3: 1.192  m2_loss_ce_4: 0.5179  m2_loss_mask_4: 0.1739  m2_loss_dice_4: 1.217  m2_loss_ce_5: 0.5223  m2_loss_mask_5: 0.1767  m2_loss_dice_5: 1.202  m2_loss_ce_6: 0.5176  m2_loss_mask_6: 0.1746  m2_loss_dice_6: 1.177  m2_loss_ce_7: 0.5122  m2_loss_mask_7: 0.1725  m2_loss_dice_7: 1.197  m2_loss_ce_8: 0.5114  m2_loss_mask_8: 0.1719  m2_loss_dice_8: 1.183  com_loss_ce: 0.4061  com_loss_mask: 0.03516  com_loss_dice: 0.2609    time: 1.3495  last_time: 1.3951  data_time: 0.0404  last_data_time: 0.0459   lr: 0.0001  max_mem: 34653M
[08/15 22:44:52] d2.utils.events INFO:  eta: 0:10:19  iter: 539  total_loss: 42.74  m1_loss_ce: 0.5109  m1_loss_mask: 0.1667  m1_loss_dice: 1.301  m1_loss_ce_0: 0.6761  m1_loss_mask_0: 0.2075  m1_loss_dice_0: 1.508  m1_loss_ce_1: 0.7531  m1_loss_mask_1: 0.1846  m1_loss_dice_1: 1.391  m1_loss_ce_2: 0.6805  m1_loss_mask_2: 0.1755  m1_loss_dice_2: 1.329  m1_loss_ce_3: 0.647  m1_loss_mask_3: 0.1711  m1_loss_dice_3: 1.298  m1_loss_ce_4: 0.6098  m1_loss_mask_4: 0.1743  m1_loss_dice_4: 1.268  m1_loss_ce_5: 0.5849  m1_loss_mask_5: 0.1718  m1_loss_dice_5: 1.262  m1_loss_ce_6: 0.5777  m1_loss_mask_6: 0.1709  m1_loss_dice_6: 1.25  m1_loss_ce_7: 0.5529  m1_loss_mask_7: 0.1672  m1_loss_dice_7: 1.229  m1_loss_ce_8: 0.5908  m1_loss_mask_8: 0.1657  m1_loss_dice_8: 1.244  m2_loss_ce: 0.5496  m2_loss_mask: 0.1665  m2_loss_dice: 1.276  m2_loss_ce_0: 0.6584  m2_loss_mask_0: 0.2085  m2_loss_dice_0: 1.485  m2_loss_ce_1: 0.7135  m2_loss_mask_1: 0.1796  m2_loss_dice_1: 1.431  m2_loss_ce_2: 0.7079  m2_loss_mask_2: 0.1698  m2_loss_dice_2: 1.353  m2_loss_ce_3: 0.6268  m2_loss_mask_3: 0.172  m2_loss_dice_3: 1.268  m2_loss_ce_4: 0.6025  m2_loss_mask_4: 0.1754  m2_loss_dice_4: 1.269  m2_loss_ce_5: 0.5674  m2_loss_mask_5: 0.1744  m2_loss_dice_5: 1.29  m2_loss_ce_6: 0.5616  m2_loss_mask_6: 0.1721  m2_loss_dice_6: 1.294  m2_loss_ce_7: 0.5622  m2_loss_mask_7: 0.1723  m2_loss_dice_7: 1.284  m2_loss_ce_8: 0.5433  m2_loss_mask_8: 0.1726  m2_loss_dice_8: 1.252  com_loss_ce: 0.4568  com_loss_mask: 0.03555  com_loss_dice: 0.2713    time: 1.3498  last_time: 1.4390  data_time: 0.0417  last_data_time: 0.0419   lr: 0.0001  max_mem: 34653M
[08/15 22:45:19] d2.utils.events INFO:  eta: 0:09:52  iter: 559  total_loss: 40.78  m1_loss_ce: 0.4917  m1_loss_mask: 0.1619  m1_loss_dice: 1.211  m1_loss_ce_0: 0.6213  m1_loss_mask_0: 0.1904  m1_loss_dice_0: 1.4  m1_loss_ce_1: 0.6718  m1_loss_mask_1: 0.1811  m1_loss_dice_1: 1.307  m1_loss_ce_2: 0.6235  m1_loss_mask_2: 0.1679  m1_loss_dice_2: 1.26  m1_loss_ce_3: 0.5764  m1_loss_mask_3: 0.17  m1_loss_dice_3: 1.157  m1_loss_ce_4: 0.5426  m1_loss_mask_4: 0.165  m1_loss_dice_4: 1.206  m1_loss_ce_5: 0.5375  m1_loss_mask_5: 0.1611  m1_loss_dice_5: 1.226  m1_loss_ce_6: 0.5339  m1_loss_mask_6: 0.163  m1_loss_dice_6: 1.189  m1_loss_ce_7: 0.5059  m1_loss_mask_7: 0.1619  m1_loss_dice_7: 1.18  m1_loss_ce_8: 0.5265  m1_loss_mask_8: 0.1608  m1_loss_dice_8: 1.155  m2_loss_ce: 0.5228  m2_loss_mask: 0.1617  m2_loss_dice: 1.222  m2_loss_ce_0: 0.5926  m2_loss_mask_0: 0.1934  m2_loss_dice_0: 1.424  m2_loss_ce_1: 0.6758  m2_loss_mask_1: 0.1744  m2_loss_dice_1: 1.331  m2_loss_ce_2: 0.614  m2_loss_mask_2: 0.164  m2_loss_dice_2: 1.251  m2_loss_ce_3: 0.5831  m2_loss_mask_3: 0.1655  m2_loss_dice_3: 1.233  m2_loss_ce_4: 0.5622  m2_loss_mask_4: 0.1654  m2_loss_dice_4: 1.226  m2_loss_ce_5: 0.531  m2_loss_mask_5: 0.165  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.5166  m2_loss_mask_6: 0.1627  m2_loss_dice_6: 1.201  m2_loss_ce_7: 0.5192  m2_loss_mask_7: 0.1629  m2_loss_dice_7: 1.224  m2_loss_ce_8: 0.5099  m2_loss_mask_8: 0.164  m2_loss_dice_8: 1.195  com_loss_ce: 0.4465  com_loss_mask: 0.03562  com_loss_dice: 0.2804    time: 1.3503  last_time: 1.4209  data_time: 0.0403  last_data_time: 0.0331   lr: 0.0001  max_mem: 34653M
[08/15 22:45:47] d2.utils.events INFO:  eta: 0:09:25  iter: 579  total_loss: 42.22  m1_loss_ce: 0.4982  m1_loss_mask: 0.1592  m1_loss_dice: 1.297  m1_loss_ce_0: 0.6328  m1_loss_mask_0: 0.198  m1_loss_dice_0: 1.52  m1_loss_ce_1: 0.6896  m1_loss_mask_1: 0.1706  m1_loss_dice_1: 1.408  m1_loss_ce_2: 0.6126  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.343  m1_loss_ce_3: 0.5709  m1_loss_mask_3: 0.167  m1_loss_dice_3: 1.319  m1_loss_ce_4: 0.549  m1_loss_mask_4: 0.1652  m1_loss_dice_4: 1.277  m1_loss_ce_5: 0.5388  m1_loss_mask_5: 0.1612  m1_loss_dice_5: 1.262  m1_loss_ce_6: 0.5251  m1_loss_mask_6: 0.1635  m1_loss_dice_6: 1.263  m1_loss_ce_7: 0.5188  m1_loss_mask_7: 0.1616  m1_loss_dice_7: 1.254  m1_loss_ce_8: 0.5075  m1_loss_mask_8: 0.1619  m1_loss_dice_8: 1.288  m2_loss_ce: 0.542  m2_loss_mask: 0.1654  m2_loss_dice: 1.28  m2_loss_ce_0: 0.6218  m2_loss_mask_0: 0.199  m2_loss_dice_0: 1.526  m2_loss_ce_1: 0.6722  m2_loss_mask_1: 0.1786  m2_loss_dice_1: 1.466  m2_loss_ce_2: 0.6478  m2_loss_mask_2: 0.1658  m2_loss_dice_2: 1.365  m2_loss_ce_3: 0.6041  m2_loss_mask_3: 0.1661  m2_loss_dice_3: 1.278  m2_loss_ce_4: 0.5407  m2_loss_mask_4: 0.1665  m2_loss_dice_4: 1.322  m2_loss_ce_5: 0.5559  m2_loss_mask_5: 0.1661  m2_loss_dice_5: 1.271  m2_loss_ce_6: 0.5581  m2_loss_mask_6: 0.1643  m2_loss_dice_6: 1.301  m2_loss_ce_7: 0.5317  m2_loss_mask_7: 0.1649  m2_loss_dice_7: 1.3  m2_loss_ce_8: 0.5271  m2_loss_mask_8: 0.1637  m2_loss_dice_8: 1.274  com_loss_ce: 0.4465  com_loss_mask: 0.03454  com_loss_dice: 0.2866    time: 1.3511  last_time: 1.4237  data_time: 0.0427  last_data_time: 0.0403   lr: 0.0001  max_mem: 34830M
[08/15 22:46:14] d2.utils.events INFO:  eta: 0:08:58  iter: 599  total_loss: 43.63  m1_loss_ce: 0.5141  m1_loss_mask: 0.1569  m1_loss_dice: 1.312  m1_loss_ce_0: 0.6366  m1_loss_mask_0: 0.1788  m1_loss_dice_0: 1.477  m1_loss_ce_1: 0.7356  m1_loss_mask_1: 0.166  m1_loss_dice_1: 1.442  m1_loss_ce_2: 0.662  m1_loss_mask_2: 0.1573  m1_loss_dice_2: 1.377  m1_loss_ce_3: 0.6489  m1_loss_mask_3: 0.159  m1_loss_dice_3: 1.302  m1_loss_ce_4: 0.6015  m1_loss_mask_4: 0.1632  m1_loss_dice_4: 1.308  m1_loss_ce_5: 0.5837  m1_loss_mask_5: 0.1558  m1_loss_dice_5: 1.294  m1_loss_ce_6: 0.5472  m1_loss_mask_6: 0.1574  m1_loss_dice_6: 1.317  m1_loss_ce_7: 0.5442  m1_loss_mask_7: 0.1552  m1_loss_dice_7: 1.275  m1_loss_ce_8: 0.5265  m1_loss_mask_8: 0.1555  m1_loss_dice_8: 1.267  m2_loss_ce: 0.5678  m2_loss_mask: 0.1609  m2_loss_dice: 1.298  m2_loss_ce_0: 0.6451  m2_loss_mask_0: 0.1888  m2_loss_dice_0: 1.538  m2_loss_ce_1: 0.7156  m2_loss_mask_1: 0.1728  m2_loss_dice_1: 1.461  m2_loss_ce_2: 0.6609  m2_loss_mask_2: 0.1623  m2_loss_dice_2: 1.348  m2_loss_ce_3: 0.6185  m2_loss_mask_3: 0.1604  m2_loss_dice_3: 1.306  m2_loss_ce_4: 0.6148  m2_loss_mask_4: 0.1638  m2_loss_dice_4: 1.391  m2_loss_ce_5: 0.5717  m2_loss_mask_5: 0.1619  m2_loss_dice_5: 1.321  m2_loss_ce_6: 0.5433  m2_loss_mask_6: 0.1627  m2_loss_dice_6: 1.304  m2_loss_ce_7: 0.5537  m2_loss_mask_7: 0.1626  m2_loss_dice_7: 1.318  m2_loss_ce_8: 0.5435  m2_loss_mask_8: 0.1618  m2_loss_dice_8: 1.299  com_loss_ce: 0.419  com_loss_mask: 0.03214  com_loss_dice: 0.2871    time: 1.3516  last_time: 1.3928  data_time: 0.0418  last_data_time: 0.0412   lr: 0.0001  max_mem: 34830M
[08/15 22:46:41] d2.utils.events INFO:  eta: 0:08:32  iter: 619  total_loss: 40.77  m1_loss_ce: 0.489  m1_loss_mask: 0.1618  m1_loss_dice: 1.249  m1_loss_ce_0: 0.6269  m1_loss_mask_0: 0.1854  m1_loss_dice_0: 1.435  m1_loss_ce_1: 0.7056  m1_loss_mask_1: 0.1801  m1_loss_dice_1: 1.336  m1_loss_ce_2: 0.624  m1_loss_mask_2: 0.17  m1_loss_dice_2: 1.287  m1_loss_ce_3: 0.5672  m1_loss_mask_3: 0.1737  m1_loss_dice_3: 1.244  m1_loss_ce_4: 0.5341  m1_loss_mask_4: 0.172  m1_loss_dice_4: 1.243  m1_loss_ce_5: 0.5418  m1_loss_mask_5: 0.1665  m1_loss_dice_5: 1.235  m1_loss_ce_6: 0.5097  m1_loss_mask_6: 0.1645  m1_loss_dice_6: 1.214  m1_loss_ce_7: 0.5141  m1_loss_mask_7: 0.165  m1_loss_dice_7: 1.212  m1_loss_ce_8: 0.4795  m1_loss_mask_8: 0.1629  m1_loss_dice_8: 1.237  m2_loss_ce: 0.5219  m2_loss_mask: 0.1637  m2_loss_dice: 1.248  m2_loss_ce_0: 0.6221  m2_loss_mask_0: 0.1945  m2_loss_dice_0: 1.501  m2_loss_ce_1: 0.6474  m2_loss_mask_1: 0.1731  m2_loss_dice_1: 1.402  m2_loss_ce_2: 0.6339  m2_loss_mask_2: 0.1674  m2_loss_dice_2: 1.347  m2_loss_ce_3: 0.5814  m2_loss_mask_3: 0.166  m2_loss_dice_3: 1.248  m2_loss_ce_4: 0.5327  m2_loss_mask_4: 0.1651  m2_loss_dice_4: 1.257  m2_loss_ce_5: 0.5221  m2_loss_mask_5: 0.1626  m2_loss_dice_5: 1.241  m2_loss_ce_6: 0.5469  m2_loss_mask_6: 0.1641  m2_loss_dice_6: 1.243  m2_loss_ce_7: 0.5107  m2_loss_mask_7: 0.1634  m2_loss_dice_7: 1.231  m2_loss_ce_8: 0.5271  m2_loss_mask_8: 0.163  m2_loss_dice_8: 1.233  com_loss_ce: 0.4078  com_loss_mask: 0.03433  com_loss_dice: 0.2679    time: 1.3517  last_time: 1.3091  data_time: 0.0423  last_data_time: 0.0422   lr: 0.0001  max_mem: 34830M
[08/15 22:47:09] d2.utils.events INFO:  eta: 0:08:05  iter: 639  total_loss: 39.99  m1_loss_ce: 0.4374  m1_loss_mask: 0.1556  m1_loss_dice: 1.211  m1_loss_ce_0: 0.6188  m1_loss_mask_0: 0.1858  m1_loss_dice_0: 1.446  m1_loss_ce_1: 0.6516  m1_loss_mask_1: 0.1657  m1_loss_dice_1: 1.368  m1_loss_ce_2: 0.5967  m1_loss_mask_2: 0.1576  m1_loss_dice_2: 1.3  m1_loss_ce_3: 0.555  m1_loss_mask_3: 0.1598  m1_loss_dice_3: 1.217  m1_loss_ce_4: 0.5574  m1_loss_mask_4: 0.1555  m1_loss_dice_4: 1.253  m1_loss_ce_5: 0.5082  m1_loss_mask_5: 0.1561  m1_loss_dice_5: 1.249  m1_loss_ce_6: 0.4708  m1_loss_mask_6: 0.1523  m1_loss_dice_6: 1.204  m1_loss_ce_7: 0.4629  m1_loss_mask_7: 0.1537  m1_loss_dice_7: 1.174  m1_loss_ce_8: 0.4433  m1_loss_mask_8: 0.1514  m1_loss_dice_8: 1.189  m2_loss_ce: 0.513  m2_loss_mask: 0.1526  m2_loss_dice: 1.192  m2_loss_ce_0: 0.644  m2_loss_mask_0: 0.1801  m2_loss_dice_0: 1.406  m2_loss_ce_1: 0.6514  m2_loss_mask_1: 0.1607  m2_loss_dice_1: 1.317  m2_loss_ce_2: 0.5894  m2_loss_mask_2: 0.1558  m2_loss_dice_2: 1.29  m2_loss_ce_3: 0.5411  m2_loss_mask_3: 0.1554  m2_loss_dice_3: 1.231  m2_loss_ce_4: 0.5072  m2_loss_mask_4: 0.1541  m2_loss_dice_4: 1.211  m2_loss_ce_5: 0.5275  m2_loss_mask_5: 0.1556  m2_loss_dice_5: 1.218  m2_loss_ce_6: 0.4889  m2_loss_mask_6: 0.1552  m2_loss_dice_6: 1.215  m2_loss_ce_7: 0.4854  m2_loss_mask_7: 0.1572  m2_loss_dice_7: 1.209  m2_loss_ce_8: 0.4946  m2_loss_mask_8: 0.1548  m2_loss_dice_8: 1.18  com_loss_ce: 0.5051  com_loss_mask: 0.03369  com_loss_dice: 0.2775    time: 1.3520  last_time: 1.3072  data_time: 0.0424  last_data_time: 0.0376   lr: 0.0001  max_mem: 34830M
[08/15 22:47:36] d2.utils.events INFO:  eta: 0:07:38  iter: 659  total_loss: 39.96  m1_loss_ce: 0.4632  m1_loss_mask: 0.1634  m1_loss_dice: 1.221  m1_loss_ce_0: 0.622  m1_loss_mask_0: 0.1919  m1_loss_dice_0: 1.414  m1_loss_ce_1: 0.6641  m1_loss_mask_1: 0.174  m1_loss_dice_1: 1.356  m1_loss_ce_2: 0.5872  m1_loss_mask_2: 0.165  m1_loss_dice_2: 1.259  m1_loss_ce_3: 0.5408  m1_loss_mask_3: 0.1683  m1_loss_dice_3: 1.222  m1_loss_ce_4: 0.5202  m1_loss_mask_4: 0.1676  m1_loss_dice_4: 1.219  m1_loss_ce_5: 0.5174  m1_loss_mask_5: 0.1655  m1_loss_dice_5: 1.212  m1_loss_ce_6: 0.4918  m1_loss_mask_6: 0.165  m1_loss_dice_6: 1.182  m1_loss_ce_7: 0.5124  m1_loss_mask_7: 0.1649  m1_loss_dice_7: 1.215  m1_loss_ce_8: 0.4885  m1_loss_mask_8: 0.1654  m1_loss_dice_8: 1.241  m2_loss_ce: 0.4948  m2_loss_mask: 0.1652  m2_loss_dice: 1.176  m2_loss_ce_0: 0.581  m2_loss_mask_0: 0.1967  m2_loss_dice_0: 1.356  m2_loss_ce_1: 0.6524  m2_loss_mask_1: 0.1758  m2_loss_dice_1: 1.298  m2_loss_ce_2: 0.6346  m2_loss_mask_2: 0.1724  m2_loss_dice_2: 1.288  m2_loss_ce_3: 0.5802  m2_loss_mask_3: 0.1665  m2_loss_dice_3: 1.214  m2_loss_ce_4: 0.5225  m2_loss_mask_4: 0.168  m2_loss_dice_4: 1.219  m2_loss_ce_5: 0.4966  m2_loss_mask_5: 0.1672  m2_loss_dice_5: 1.211  m2_loss_ce_6: 0.5217  m2_loss_mask_6: 0.1654  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.5084  m2_loss_mask_7: 0.166  m2_loss_dice_7: 1.198  m2_loss_ce_8: 0.5031  m2_loss_mask_8: 0.1642  m2_loss_dice_8: 1.193  com_loss_ce: 0.3986  com_loss_mask: 0.03223  com_loss_dice: 0.2562    time: 1.3523  last_time: 1.3088  data_time: 0.0420  last_data_time: 0.0453   lr: 0.0001  max_mem: 34830M
[08/15 22:48:03] d2.utils.events INFO:  eta: 0:07:11  iter: 679  total_loss: 40.7  m1_loss_ce: 0.4659  m1_loss_mask: 0.1551  m1_loss_dice: 1.262  m1_loss_ce_0: 0.5754  m1_loss_mask_0: 0.1843  m1_loss_dice_0: 1.463  m1_loss_ce_1: 0.6413  m1_loss_mask_1: 0.1733  m1_loss_dice_1: 1.38  m1_loss_ce_2: 0.5818  m1_loss_mask_2: 0.1652  m1_loss_dice_2: 1.313  m1_loss_ce_3: 0.53  m1_loss_mask_3: 0.1582  m1_loss_dice_3: 1.267  m1_loss_ce_4: 0.5296  m1_loss_mask_4: 0.1584  m1_loss_dice_4: 1.303  m1_loss_ce_5: 0.5244  m1_loss_mask_5: 0.1544  m1_loss_dice_5: 1.266  m1_loss_ce_6: 0.5147  m1_loss_mask_6: 0.1566  m1_loss_dice_6: 1.242  m1_loss_ce_7: 0.4982  m1_loss_mask_7: 0.1558  m1_loss_dice_7: 1.233  m1_loss_ce_8: 0.4974  m1_loss_mask_8: 0.157  m1_loss_dice_8: 1.264  m2_loss_ce: 0.5076  m2_loss_mask: 0.1622  m2_loss_dice: 1.211  m2_loss_ce_0: 0.6316  m2_loss_mask_0: 0.1937  m2_loss_dice_0: 1.482  m2_loss_ce_1: 0.6379  m2_loss_mask_1: 0.1739  m2_loss_dice_1: 1.396  m2_loss_ce_2: 0.5739  m2_loss_mask_2: 0.1634  m2_loss_dice_2: 1.314  m2_loss_ce_3: 0.5611  m2_loss_mask_3: 0.1636  m2_loss_dice_3: 1.282  m2_loss_ce_4: 0.565  m2_loss_mask_4: 0.1628  m2_loss_dice_4: 1.284  m2_loss_ce_5: 0.5398  m2_loss_mask_5: 0.1633  m2_loss_dice_5: 1.259  m2_loss_ce_6: 0.5263  m2_loss_mask_6: 0.1622  m2_loss_dice_6: 1.251  m2_loss_ce_7: 0.5245  m2_loss_mask_7: 0.1621  m2_loss_dice_7: 1.247  m2_loss_ce_8: 0.5145  m2_loss_mask_8: 0.1632  m2_loss_dice_8: 1.252  com_loss_ce: 0.4481  com_loss_mask: 0.038  com_loss_dice: 0.2791    time: 1.3524  last_time: 1.3782  data_time: 0.0420  last_data_time: 0.0401   lr: 0.0001  max_mem: 34830M
[08/15 22:48:30] d2.utils.events INFO:  eta: 0:06:44  iter: 699  total_loss: 41.07  m1_loss_ce: 0.4901  m1_loss_mask: 0.1784  m1_loss_dice: 1.177  m1_loss_ce_0: 0.6247  m1_loss_mask_0: 0.2078  m1_loss_dice_0: 1.386  m1_loss_ce_1: 0.6697  m1_loss_mask_1: 0.1928  m1_loss_dice_1: 1.318  m1_loss_ce_2: 0.65  m1_loss_mask_2: 0.189  m1_loss_dice_2: 1.275  m1_loss_ce_3: 0.5677  m1_loss_mask_3: 0.1794  m1_loss_dice_3: 1.216  m1_loss_ce_4: 0.5697  m1_loss_mask_4: 0.1785  m1_loss_dice_4: 1.25  m1_loss_ce_5: 0.5443  m1_loss_mask_5: 0.1802  m1_loss_dice_5: 1.185  m1_loss_ce_6: 0.5477  m1_loss_mask_6: 0.179  m1_loss_dice_6: 1.212  m1_loss_ce_7: 0.5141  m1_loss_mask_7: 0.1761  m1_loss_dice_7: 1.173  m1_loss_ce_8: 0.5192  m1_loss_mask_8: 0.1741  m1_loss_dice_8: 1.151  m2_loss_ce: 0.5742  m2_loss_mask: 0.177  m2_loss_dice: 1.171  m2_loss_ce_0: 0.6536  m2_loss_mask_0: 0.2106  m2_loss_dice_0: 1.441  m2_loss_ce_1: 0.6711  m2_loss_mask_1: 0.1911  m2_loss_dice_1: 1.309  m2_loss_ce_2: 0.6439  m2_loss_mask_2: 0.1868  m2_loss_dice_2: 1.277  m2_loss_ce_3: 0.5763  m2_loss_mask_3: 0.1835  m2_loss_dice_3: 1.198  m2_loss_ce_4: 0.5681  m2_loss_mask_4: 0.1835  m2_loss_dice_4: 1.199  m2_loss_ce_5: 0.6059  m2_loss_mask_5: 0.1841  m2_loss_dice_5: 1.218  m2_loss_ce_6: 0.5392  m2_loss_mask_6: 0.1827  m2_loss_dice_6: 1.175  m2_loss_ce_7: 0.5393  m2_loss_mask_7: 0.1813  m2_loss_dice_7: 1.171  m2_loss_ce_8: 0.5548  m2_loss_mask_8: 0.1798  m2_loss_dice_8: 1.184  com_loss_ce: 0.4496  com_loss_mask: 0.03647  com_loss_dice: 0.2629    time: 1.3520  last_time: 1.3766  data_time: 0.0420  last_data_time: 0.0428   lr: 0.0001  max_mem: 34830M
[08/15 22:48:58] d2.utils.events INFO:  eta: 0:06:17  iter: 719  total_loss: 43  m1_loss_ce: 0.542  m1_loss_mask: 0.1547  m1_loss_dice: 1.304  m1_loss_ce_0: 0.6817  m1_loss_mask_0: 0.1832  m1_loss_dice_0: 1.504  m1_loss_ce_1: 0.7433  m1_loss_mask_1: 0.1753  m1_loss_dice_1: 1.445  m1_loss_ce_2: 0.6919  m1_loss_mask_2: 0.1621  m1_loss_dice_2: 1.377  m1_loss_ce_3: 0.6099  m1_loss_mask_3: 0.156  m1_loss_dice_3: 1.345  m1_loss_ce_4: 0.5604  m1_loss_mask_4: 0.1562  m1_loss_dice_4: 1.341  m1_loss_ce_5: 0.5634  m1_loss_mask_5: 0.1536  m1_loss_dice_5: 1.304  m1_loss_ce_6: 0.5526  m1_loss_mask_6: 0.1565  m1_loss_dice_6: 1.312  m1_loss_ce_7: 0.5529  m1_loss_mask_7: 0.1539  m1_loss_dice_7: 1.294  m1_loss_ce_8: 0.5572  m1_loss_mask_8: 0.1531  m1_loss_dice_8: 1.281  m2_loss_ce: 0.5417  m2_loss_mask: 0.1561  m2_loss_dice: 1.326  m2_loss_ce_0: 0.6648  m2_loss_mask_0: 0.1895  m2_loss_dice_0: 1.543  m2_loss_ce_1: 0.7119  m2_loss_mask_1: 0.1696  m2_loss_dice_1: 1.462  m2_loss_ce_2: 0.6782  m2_loss_mask_2: 0.1589  m2_loss_dice_2: 1.389  m2_loss_ce_3: 0.6189  m2_loss_mask_3: 0.1593  m2_loss_dice_3: 1.34  m2_loss_ce_4: 0.5793  m2_loss_mask_4: 0.1593  m2_loss_dice_4: 1.308  m2_loss_ce_5: 0.5842  m2_loss_mask_5: 0.158  m2_loss_dice_5: 1.319  m2_loss_ce_6: 0.5654  m2_loss_mask_6: 0.1583  m2_loss_dice_6: 1.327  m2_loss_ce_7: 0.571  m2_loss_mask_7: 0.1565  m2_loss_dice_7: 1.295  m2_loss_ce_8: 0.552  m2_loss_mask_8: 0.1583  m2_loss_dice_8: 1.305  com_loss_ce: 0.4719  com_loss_mask: 0.03228  com_loss_dice: 0.2991    time: 1.3524  last_time: 1.3555  data_time: 0.0440  last_data_time: 0.0385   lr: 0.0001  max_mem: 34830M
[08/15 22:49:25] d2.utils.events INFO:  eta: 0:05:50  iter: 739  total_loss: 41.63  m1_loss_ce: 0.4899  m1_loss_mask: 0.1559  m1_loss_dice: 1.27  m1_loss_ce_0: 0.6377  m1_loss_mask_0: 0.1799  m1_loss_dice_0: 1.462  m1_loss_ce_1: 0.709  m1_loss_mask_1: 0.1661  m1_loss_dice_1: 1.386  m1_loss_ce_2: 0.6252  m1_loss_mask_2: 0.1564  m1_loss_dice_2: 1.306  m1_loss_ce_3: 0.5869  m1_loss_mask_3: 0.1596  m1_loss_dice_3: 1.308  m1_loss_ce_4: 0.561  m1_loss_mask_4: 0.1594  m1_loss_dice_4: 1.288  m1_loss_ce_5: 0.5647  m1_loss_mask_5: 0.1555  m1_loss_dice_5: 1.262  m1_loss_ce_6: 0.5429  m1_loss_mask_6: 0.1578  m1_loss_dice_6: 1.255  m1_loss_ce_7: 0.531  m1_loss_mask_7: 0.1554  m1_loss_dice_7: 1.255  m1_loss_ce_8: 0.5053  m1_loss_mask_8: 0.1586  m1_loss_dice_8: 1.249  m2_loss_ce: 0.5193  m2_loss_mask: 0.1575  m2_loss_dice: 1.263  m2_loss_ce_0: 0.6376  m2_loss_mask_0: 0.1855  m2_loss_dice_0: 1.48  m2_loss_ce_1: 0.6734  m2_loss_mask_1: 0.1647  m2_loss_dice_1: 1.398  m2_loss_ce_2: 0.6306  m2_loss_mask_2: 0.1599  m2_loss_dice_2: 1.33  m2_loss_ce_3: 0.5615  m2_loss_mask_3: 0.1568  m2_loss_dice_3: 1.277  m2_loss_ce_4: 0.5579  m2_loss_mask_4: 0.158  m2_loss_dice_4: 1.289  m2_loss_ce_5: 0.539  m2_loss_mask_5: 0.1594  m2_loss_dice_5: 1.303  m2_loss_ce_6: 0.5426  m2_loss_mask_6: 0.1571  m2_loss_dice_6: 1.274  m2_loss_ce_7: 0.5188  m2_loss_mask_7: 0.1597  m2_loss_dice_7: 1.263  m2_loss_ce_8: 0.4892  m2_loss_mask_8: 0.1584  m2_loss_dice_8: 1.277  com_loss_ce: 0.4462  com_loss_mask: 0.03233  com_loss_dice: 0.2758    time: 1.3526  last_time: 1.3016  data_time: 0.0444  last_data_time: 0.0371   lr: 0.0001  max_mem: 34830M
[08/15 22:49:52] d2.utils.events INFO:  eta: 0:05:23  iter: 759  total_loss: 41.01  m1_loss_ce: 0.5048  m1_loss_mask: 0.1506  m1_loss_dice: 1.23  m1_loss_ce_0: 0.5969  m1_loss_mask_0: 0.179  m1_loss_dice_0: 1.395  m1_loss_ce_1: 0.7001  m1_loss_mask_1: 0.1642  m1_loss_dice_1: 1.323  m1_loss_ce_2: 0.6196  m1_loss_mask_2: 0.1576  m1_loss_dice_2: 1.264  m1_loss_ce_3: 0.5741  m1_loss_mask_3: 0.1586  m1_loss_dice_3: 1.222  m1_loss_ce_4: 0.5426  m1_loss_mask_4: 0.1576  m1_loss_dice_4: 1.264  m1_loss_ce_5: 0.5285  m1_loss_mask_5: 0.1576  m1_loss_dice_5: 1.208  m1_loss_ce_6: 0.5224  m1_loss_mask_6: 0.1572  m1_loss_dice_6: 1.193  m1_loss_ce_7: 0.5054  m1_loss_mask_7: 0.154  m1_loss_dice_7: 1.177  m1_loss_ce_8: 0.5497  m1_loss_mask_8: 0.1551  m1_loss_dice_8: 1.188  m2_loss_ce: 0.5331  m2_loss_mask: 0.1558  m2_loss_dice: 1.207  m2_loss_ce_0: 0.6581  m2_loss_mask_0: 0.184  m2_loss_dice_0: 1.46  m2_loss_ce_1: 0.6793  m2_loss_mask_1: 0.1686  m2_loss_dice_1: 1.374  m2_loss_ce_2: 0.6528  m2_loss_mask_2: 0.1607  m2_loss_dice_2: 1.306  m2_loss_ce_3: 0.5661  m2_loss_mask_3: 0.1573  m2_loss_dice_3: 1.265  m2_loss_ce_4: 0.5721  m2_loss_mask_4: 0.1578  m2_loss_dice_4: 1.261  m2_loss_ce_5: 0.5632  m2_loss_mask_5: 0.1576  m2_loss_dice_5: 1.263  m2_loss_ce_6: 0.5542  m2_loss_mask_6: 0.1569  m2_loss_dice_6: 1.269  m2_loss_ce_7: 0.5448  m2_loss_mask_7: 0.1572  m2_loss_dice_7: 1.231  m2_loss_ce_8: 0.5568  m2_loss_mask_8: 0.1574  m2_loss_dice_8: 1.254  com_loss_ce: 0.4152  com_loss_mask: 0.03163  com_loss_dice: 0.2645    time: 1.3531  last_time: 1.3364  data_time: 0.0416  last_data_time: 0.0458   lr: 0.0001  max_mem: 34830M
[08/15 22:50:19] d2.utils.events INFO:  eta: 0:04:56  iter: 779  total_loss: 39.8  m1_loss_ce: 0.4921  m1_loss_mask: 0.1722  m1_loss_dice: 1.154  m1_loss_ce_0: 0.6058  m1_loss_mask_0: 0.1991  m1_loss_dice_0: 1.344  m1_loss_ce_1: 0.6397  m1_loss_mask_1: 0.1893  m1_loss_dice_1: 1.266  m1_loss_ce_2: 0.587  m1_loss_mask_2: 0.1792  m1_loss_dice_2: 1.215  m1_loss_ce_3: 0.5527  m1_loss_mask_3: 0.1763  m1_loss_dice_3: 1.151  m1_loss_ce_4: 0.5013  m1_loss_mask_4: 0.1795  m1_loss_dice_4: 1.166  m1_loss_ce_5: 0.5011  m1_loss_mask_5: 0.1763  m1_loss_dice_5: 1.141  m1_loss_ce_6: 0.5182  m1_loss_mask_6: 0.1734  m1_loss_dice_6: 1.15  m1_loss_ce_7: 0.4809  m1_loss_mask_7: 0.175  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.4809  m1_loss_mask_8: 0.1762  m1_loss_dice_8: 1.123  m2_loss_ce: 0.5417  m2_loss_mask: 0.1781  m2_loss_dice: 1.139  m2_loss_ce_0: 0.6175  m2_loss_mask_0: 0.2042  m2_loss_dice_0: 1.382  m2_loss_ce_1: 0.6519  m2_loss_mask_1: 0.1845  m2_loss_dice_1: 1.269  m2_loss_ce_2: 0.6201  m2_loss_mask_2: 0.1816  m2_loss_dice_2: 1.232  m2_loss_ce_3: 0.564  m2_loss_mask_3: 0.1817  m2_loss_dice_3: 1.188  m2_loss_ce_4: 0.5534  m2_loss_mask_4: 0.183  m2_loss_dice_4: 1.171  m2_loss_ce_5: 0.5291  m2_loss_mask_5: 0.1785  m2_loss_dice_5: 1.196  m2_loss_ce_6: 0.502  m2_loss_mask_6: 0.1783  m2_loss_dice_6: 1.169  m2_loss_ce_7: 0.4985  m2_loss_mask_7: 0.1803  m2_loss_dice_7: 1.159  m2_loss_ce_8: 0.4886  m2_loss_mask_8: 0.1779  m2_loss_dice_8: 1.167  com_loss_ce: 0.4385  com_loss_mask: 0.03548  com_loss_dice: 0.2535    time: 1.3528  last_time: 1.4516  data_time: 0.0395  last_data_time: 0.0368   lr: 0.0001  max_mem: 34830M
[08/15 22:50:47] d2.utils.events INFO:  eta: 0:04:29  iter: 799  total_loss: 39.99  m1_loss_ce: 0.4867  m1_loss_mask: 0.1642  m1_loss_dice: 1.234  m1_loss_ce_0: 0.6065  m1_loss_mask_0: 0.1873  m1_loss_dice_0: 1.379  m1_loss_ce_1: 0.6541  m1_loss_mask_1: 0.18  m1_loss_dice_1: 1.345  m1_loss_ce_2: 0.6539  m1_loss_mask_2: 0.1676  m1_loss_dice_2: 1.315  m1_loss_ce_3: 0.5494  m1_loss_mask_3: 0.1661  m1_loss_dice_3: 1.234  m1_loss_ce_4: 0.5139  m1_loss_mask_4: 0.1683  m1_loss_dice_4: 1.254  m1_loss_ce_5: 0.5426  m1_loss_mask_5: 0.1654  m1_loss_dice_5: 1.236  m1_loss_ce_6: 0.5115  m1_loss_mask_6: 0.165  m1_loss_dice_6: 1.223  m1_loss_ce_7: 0.4925  m1_loss_mask_7: 0.1661  m1_loss_dice_7: 1.257  m1_loss_ce_8: 0.5052  m1_loss_mask_8: 0.1656  m1_loss_dice_8: 1.242  m2_loss_ce: 0.5203  m2_loss_mask: 0.1713  m2_loss_dice: 1.239  m2_loss_ce_0: 0.6147  m2_loss_mask_0: 0.1962  m2_loss_dice_0: 1.449  m2_loss_ce_1: 0.6635  m2_loss_mask_1: 0.1717  m2_loss_dice_1: 1.351  m2_loss_ce_2: 0.6196  m2_loss_mask_2: 0.1721  m2_loss_dice_2: 1.329  m2_loss_ce_3: 0.534  m2_loss_mask_3: 0.1709  m2_loss_dice_3: 1.261  m2_loss_ce_4: 0.5521  m2_loss_mask_4: 0.1706  m2_loss_dice_4: 1.254  m2_loss_ce_5: 0.5469  m2_loss_mask_5: 0.1721  m2_loss_dice_5: 1.255  m2_loss_ce_6: 0.511  m2_loss_mask_6: 0.1736  m2_loss_dice_6: 1.23  m2_loss_ce_7: 0.5288  m2_loss_mask_7: 0.1711  m2_loss_dice_7: 1.271  m2_loss_ce_8: 0.5107  m2_loss_mask_8: 0.1712  m2_loss_dice_8: 1.242  com_loss_ce: 0.4175  com_loss_mask: 0.03335  com_loss_dice: 0.2665    time: 1.3537  last_time: 1.4656  data_time: 0.0435  last_data_time: 0.0370   lr: 0.0001  max_mem: 34830M
[08/15 22:51:15] d2.utils.events INFO:  eta: 0:04:02  iter: 819  total_loss: 42.94  m1_loss_ce: 0.4874  m1_loss_mask: 0.1523  m1_loss_dice: 1.234  m1_loss_ce_0: 0.6478  m1_loss_mask_0: 0.1774  m1_loss_dice_0: 1.448  m1_loss_ce_1: 0.6715  m1_loss_mask_1: 0.1621  m1_loss_dice_1: 1.368  m1_loss_ce_2: 0.6311  m1_loss_mask_2: 0.1548  m1_loss_dice_2: 1.335  m1_loss_ce_3: 0.6087  m1_loss_mask_3: 0.1567  m1_loss_dice_3: 1.25  m1_loss_ce_4: 0.5467  m1_loss_mask_4: 0.1546  m1_loss_dice_4: 1.212  m1_loss_ce_5: 0.5475  m1_loss_mask_5: 0.1538  m1_loss_dice_5: 1.267  m1_loss_ce_6: 0.5282  m1_loss_mask_6: 0.1517  m1_loss_dice_6: 1.272  m1_loss_ce_7: 0.5469  m1_loss_mask_7: 0.1517  m1_loss_dice_7: 1.237  m1_loss_ce_8: 0.5084  m1_loss_mask_8: 0.1517  m1_loss_dice_8: 1.235  m2_loss_ce: 0.571  m2_loss_mask: 0.1614  m2_loss_dice: 1.246  m2_loss_ce_0: 0.6769  m2_loss_mask_0: 0.1879  m2_loss_dice_0: 1.501  m2_loss_ce_1: 0.7137  m2_loss_mask_1: 0.1679  m2_loss_dice_1: 1.436  m2_loss_ce_2: 0.6427  m2_loss_mask_2: 0.1648  m2_loss_dice_2: 1.372  m2_loss_ce_3: 0.6161  m2_loss_mask_3: 0.164  m2_loss_dice_3: 1.276  m2_loss_ce_4: 0.5924  m2_loss_mask_4: 0.164  m2_loss_dice_4: 1.305  m2_loss_ce_5: 0.5826  m2_loss_mask_5: 0.1629  m2_loss_dice_5: 1.255  m2_loss_ce_6: 0.5616  m2_loss_mask_6: 0.1636  m2_loss_dice_6: 1.352  m2_loss_ce_7: 0.5529  m2_loss_mask_7: 0.1616  m2_loss_dice_7: 1.26  m2_loss_ce_8: 0.5765  m2_loss_mask_8: 0.1608  m2_loss_dice_8: 1.282  com_loss_ce: 0.4384  com_loss_mask: 0.03138  com_loss_dice: 0.2725    time: 1.3543  last_time: 1.3691  data_time: 0.0427  last_data_time: 0.0476   lr: 0.0001  max_mem: 34830M
[08/15 22:51:42] d2.utils.events INFO:  eta: 0:03:35  iter: 839  total_loss: 40.26  m1_loss_ce: 0.4771  m1_loss_mask: 0.1559  m1_loss_dice: 1.221  m1_loss_ce_0: 0.6387  m1_loss_mask_0: 0.1845  m1_loss_dice_0: 1.354  m1_loss_ce_1: 0.6855  m1_loss_mask_1: 0.1654  m1_loss_dice_1: 1.327  m1_loss_ce_2: 0.6252  m1_loss_mask_2: 0.1602  m1_loss_dice_2: 1.278  m1_loss_ce_3: 0.6118  m1_loss_mask_3: 0.1607  m1_loss_dice_3: 1.22  m1_loss_ce_4: 0.5161  m1_loss_mask_4: 0.1562  m1_loss_dice_4: 1.204  m1_loss_ce_5: 0.5457  m1_loss_mask_5: 0.1566  m1_loss_dice_5: 1.211  m1_loss_ce_6: 0.5123  m1_loss_mask_6: 0.1553  m1_loss_dice_6: 1.196  m1_loss_ce_7: 0.4979  m1_loss_mask_7: 0.1556  m1_loss_dice_7: 1.174  m1_loss_ce_8: 0.5064  m1_loss_mask_8: 0.1571  m1_loss_dice_8: 1.227  m2_loss_ce: 0.5214  m2_loss_mask: 0.157  m2_loss_dice: 1.242  m2_loss_ce_0: 0.6177  m2_loss_mask_0: 0.1909  m2_loss_dice_0: 1.454  m2_loss_ce_1: 0.6667  m2_loss_mask_1: 0.1693  m2_loss_dice_1: 1.4  m2_loss_ce_2: 0.6354  m2_loss_mask_2: 0.1592  m2_loss_dice_2: 1.316  m2_loss_ce_3: 0.5845  m2_loss_mask_3: 0.1567  m2_loss_dice_3: 1.237  m2_loss_ce_4: 0.5294  m2_loss_mask_4: 0.1615  m2_loss_dice_4: 1.261  m2_loss_ce_5: 0.54  m2_loss_mask_5: 0.1587  m2_loss_dice_5: 1.244  m2_loss_ce_6: 0.511  m2_loss_mask_6: 0.1605  m2_loss_dice_6: 1.228  m2_loss_ce_7: 0.513  m2_loss_mask_7: 0.1576  m2_loss_dice_7: 1.227  m2_loss_ce_8: 0.5057  m2_loss_mask_8: 0.1597  m2_loss_dice_8: 1.249  com_loss_ce: 0.4268  com_loss_mask: 0.03262  com_loss_dice: 0.2655    time: 1.3545  last_time: 1.2817  data_time: 0.0436  last_data_time: 0.0452   lr: 0.0001  max_mem: 34830M
[08/15 22:52:10] d2.utils.events INFO:  eta: 0:03:08  iter: 859  total_loss: 40.28  m1_loss_ce: 0.4749  m1_loss_mask: 0.1662  m1_loss_dice: 1.188  m1_loss_ce_0: 0.6184  m1_loss_mask_0: 0.1817  m1_loss_dice_0: 1.403  m1_loss_ce_1: 0.6395  m1_loss_mask_1: 0.1712  m1_loss_dice_1: 1.331  m1_loss_ce_2: 0.5816  m1_loss_mask_2: 0.1664  m1_loss_dice_2: 1.255  m1_loss_ce_3: 0.5679  m1_loss_mask_3: 0.1659  m1_loss_dice_3: 1.22  m1_loss_ce_4: 0.4865  m1_loss_mask_4: 0.1661  m1_loss_dice_4: 1.234  m1_loss_ce_5: 0.5082  m1_loss_mask_5: 0.1667  m1_loss_dice_5: 1.227  m1_loss_ce_6: 0.5106  m1_loss_mask_6: 0.1655  m1_loss_dice_6: 1.209  m1_loss_ce_7: 0.4662  m1_loss_mask_7: 0.1648  m1_loss_dice_7: 1.229  m1_loss_ce_8: 0.4988  m1_loss_mask_8: 0.1662  m1_loss_dice_8: 1.204  m2_loss_ce: 0.508  m2_loss_mask: 0.1661  m2_loss_dice: 1.208  m2_loss_ce_0: 0.6649  m2_loss_mask_0: 0.1883  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.6927  m2_loss_mask_1: 0.1761  m2_loss_dice_1: 1.38  m2_loss_ce_2: 0.6095  m2_loss_mask_2: 0.1674  m2_loss_dice_2: 1.328  m2_loss_ce_3: 0.547  m2_loss_mask_3: 0.165  m2_loss_dice_3: 1.22  m2_loss_ce_4: 0.5407  m2_loss_mask_4: 0.1653  m2_loss_dice_4: 1.254  m2_loss_ce_5: 0.5128  m2_loss_mask_5: 0.1668  m2_loss_dice_5: 1.205  m2_loss_ce_6: 0.5139  m2_loss_mask_6: 0.1653  m2_loss_dice_6: 1.217  m2_loss_ce_7: 0.508  m2_loss_mask_7: 0.1635  m2_loss_dice_7: 1.227  m2_loss_ce_8: 0.5138  m2_loss_mask_8: 0.1639  m2_loss_dice_8: 1.188  com_loss_ce: 0.4049  com_loss_mask: 0.03383  com_loss_dice: 0.2763    time: 1.3547  last_time: 1.2804  data_time: 0.0436  last_data_time: 0.0501   lr: 0.0001  max_mem: 34830M
[08/15 22:52:37] d2.utils.events INFO:  eta: 0:02:41  iter: 879  total_loss: 42.23  m1_loss_ce: 0.5089  m1_loss_mask: 0.1514  m1_loss_dice: 1.243  m1_loss_ce_0: 0.6043  m1_loss_mask_0: 0.1817  m1_loss_dice_0: 1.477  m1_loss_ce_1: 0.6846  m1_loss_mask_1: 0.167  m1_loss_dice_1: 1.383  m1_loss_ce_2: 0.6383  m1_loss_mask_2: 0.1611  m1_loss_dice_2: 1.332  m1_loss_ce_3: 0.5939  m1_loss_mask_3: 0.1581  m1_loss_dice_3: 1.268  m1_loss_ce_4: 0.5517  m1_loss_mask_4: 0.1572  m1_loss_dice_4: 1.302  m1_loss_ce_5: 0.5565  m1_loss_mask_5: 0.1556  m1_loss_dice_5: 1.269  m1_loss_ce_6: 0.5063  m1_loss_mask_6: 0.1535  m1_loss_dice_6: 1.281  m1_loss_ce_7: 0.511  m1_loss_mask_7: 0.1528  m1_loss_dice_7: 1.269  m1_loss_ce_8: 0.522  m1_loss_mask_8: 0.1521  m1_loss_dice_8: 1.229  m2_loss_ce: 0.5699  m2_loss_mask: 0.1634  m2_loss_dice: 1.258  m2_loss_ce_0: 0.6578  m2_loss_mask_0: 0.195  m2_loss_dice_0: 1.511  m2_loss_ce_1: 0.7183  m2_loss_mask_1: 0.1765  m2_loss_dice_1: 1.404  m2_loss_ce_2: 0.6837  m2_loss_mask_2: 0.1686  m2_loss_dice_2: 1.353  m2_loss_ce_3: 0.6132  m2_loss_mask_3: 0.17  m2_loss_dice_3: 1.289  m2_loss_ce_4: 0.6015  m2_loss_mask_4: 0.1639  m2_loss_dice_4: 1.274  m2_loss_ce_5: 0.58  m2_loss_mask_5: 0.1634  m2_loss_dice_5: 1.293  m2_loss_ce_6: 0.5847  m2_loss_mask_6: 0.1631  m2_loss_dice_6: 1.262  m2_loss_ce_7: 0.5967  m2_loss_mask_7: 0.162  m2_loss_dice_7: 1.272  m2_loss_ce_8: 0.5432  m2_loss_mask_8: 0.1615  m2_loss_dice_8: 1.285  com_loss_ce: 0.4314  com_loss_mask: 0.03189  com_loss_dice: 0.2628    time: 1.3547  last_time: 1.3208  data_time: 0.0425  last_data_time: 0.0464   lr: 0.0001  max_mem: 34830M
[08/15 22:53:04] d2.utils.events INFO:  eta: 0:02:14  iter: 899  total_loss: 42.81  m1_loss_ce: 0.434  m1_loss_mask: 0.1702  m1_loss_dice: 1.329  m1_loss_ce_0: 0.6236  m1_loss_mask_0: 0.1905  m1_loss_dice_0: 1.459  m1_loss_ce_1: 0.6445  m1_loss_mask_1: 0.1779  m1_loss_dice_1: 1.382  m1_loss_ce_2: 0.625  m1_loss_mask_2: 0.1719  m1_loss_dice_2: 1.352  m1_loss_ce_3: 0.5617  m1_loss_mask_3: 0.1696  m1_loss_dice_3: 1.363  m1_loss_ce_4: 0.5305  m1_loss_mask_4: 0.1731  m1_loss_dice_4: 1.355  m1_loss_ce_5: 0.5064  m1_loss_mask_5: 0.1692  m1_loss_dice_5: 1.326  m1_loss_ce_6: 0.4881  m1_loss_mask_6: 0.1712  m1_loss_dice_6: 1.316  m1_loss_ce_7: 0.4768  m1_loss_mask_7: 0.1669  m1_loss_dice_7: 1.34  m1_loss_ce_8: 0.4732  m1_loss_mask_8: 0.1708  m1_loss_dice_8: 1.318  m2_loss_ce: 0.5375  m2_loss_mask: 0.1712  m2_loss_dice: 1.267  m2_loss_ce_0: 0.659  m2_loss_mask_0: 0.2018  m2_loss_dice_0: 1.587  m2_loss_ce_1: 0.6646  m2_loss_mask_1: 0.1872  m2_loss_dice_1: 1.488  m2_loss_ce_2: 0.6534  m2_loss_mask_2: 0.1735  m2_loss_dice_2: 1.356  m2_loss_ce_3: 0.573  m2_loss_mask_3: 0.1709  m2_loss_dice_3: 1.338  m2_loss_ce_4: 0.578  m2_loss_mask_4: 0.1728  m2_loss_dice_4: 1.325  m2_loss_ce_5: 0.5562  m2_loss_mask_5: 0.1731  m2_loss_dice_5: 1.313  m2_loss_ce_6: 0.5415  m2_loss_mask_6: 0.1734  m2_loss_dice_6: 1.305  m2_loss_ce_7: 0.5191  m2_loss_mask_7: 0.1722  m2_loss_dice_7: 1.314  m2_loss_ce_8: 0.5263  m2_loss_mask_8: 0.1697  m2_loss_dice_8: 1.306  com_loss_ce: 0.4217  com_loss_mask: 0.03469  com_loss_dice: 0.2884    time: 1.3549  last_time: 1.3392  data_time: 0.0441  last_data_time: 0.0437   lr: 0.0001  max_mem: 34830M
[08/15 22:53:31] d2.utils.events INFO:  eta: 0:01:47  iter: 919  total_loss: 39.86  m1_loss_ce: 0.4388  m1_loss_mask: 0.1661  m1_loss_dice: 1.233  m1_loss_ce_0: 0.5879  m1_loss_mask_0: 0.1968  m1_loss_dice_0: 1.337  m1_loss_ce_1: 0.6414  m1_loss_mask_1: 0.1789  m1_loss_dice_1: 1.268  m1_loss_ce_2: 0.5915  m1_loss_mask_2: 0.1699  m1_loss_dice_2: 1.248  m1_loss_ce_3: 0.5183  m1_loss_mask_3: 0.1718  m1_loss_dice_3: 1.167  m1_loss_ce_4: 0.5037  m1_loss_mask_4: 0.1701  m1_loss_dice_4: 1.207  m1_loss_ce_5: 0.5074  m1_loss_mask_5: 0.1672  m1_loss_dice_5: 1.197  m1_loss_ce_6: 0.4873  m1_loss_mask_6: 0.165  m1_loss_dice_6: 1.178  m1_loss_ce_7: 0.4843  m1_loss_mask_7: 0.1656  m1_loss_dice_7: 1.18  m1_loss_ce_8: 0.4787  m1_loss_mask_8: 0.166  m1_loss_dice_8: 1.165  m2_loss_ce: 0.5077  m2_loss_mask: 0.1711  m2_loss_dice: 1.168  m2_loss_ce_0: 0.5957  m2_loss_mask_0: 0.2023  m2_loss_dice_0: 1.392  m2_loss_ce_1: 0.6213  m2_loss_mask_1: 0.1845  m2_loss_dice_1: 1.307  m2_loss_ce_2: 0.6052  m2_loss_mask_2: 0.1747  m2_loss_dice_2: 1.275  m2_loss_ce_3: 0.5709  m2_loss_mask_3: 0.1738  m2_loss_dice_3: 1.24  m2_loss_ce_4: 0.5366  m2_loss_mask_4: 0.1738  m2_loss_dice_4: 1.214  m2_loss_ce_5: 0.4936  m2_loss_mask_5: 0.1714  m2_loss_dice_5: 1.231  m2_loss_ce_6: 0.5418  m2_loss_mask_6: 0.1731  m2_loss_dice_6: 1.191  m2_loss_ce_7: 0.5148  m2_loss_mask_7: 0.1729  m2_loss_dice_7: 1.184  m2_loss_ce_8: 0.5166  m2_loss_mask_8: 0.1703  m2_loss_dice_8: 1.163  com_loss_ce: 0.3909  com_loss_mask: 0.03425  com_loss_dice: 0.2579    time: 1.3548  last_time: 1.3397  data_time: 0.0425  last_data_time: 0.0427   lr: 0.0001  max_mem: 34830M
[08/15 22:53:59] d2.utils.events INFO:  eta: 0:01:21  iter: 939  total_loss: 40.49  m1_loss_ce: 0.4826  m1_loss_mask: 0.1602  m1_loss_dice: 1.194  m1_loss_ce_0: 0.6135  m1_loss_mask_0: 0.1914  m1_loss_dice_0: 1.355  m1_loss_ce_1: 0.679  m1_loss_mask_1: 0.1735  m1_loss_dice_1: 1.289  m1_loss_ce_2: 0.6538  m1_loss_mask_2: 0.1651  m1_loss_dice_2: 1.209  m1_loss_ce_3: 0.5889  m1_loss_mask_3: 0.1635  m1_loss_dice_3: 1.194  m1_loss_ce_4: 0.5641  m1_loss_mask_4: 0.1615  m1_loss_dice_4: 1.166  m1_loss_ce_5: 0.5363  m1_loss_mask_5: 0.1622  m1_loss_dice_5: 1.201  m1_loss_ce_6: 0.5221  m1_loss_mask_6: 0.1604  m1_loss_dice_6: 1.142  m1_loss_ce_7: 0.5356  m1_loss_mask_7: 0.1634  m1_loss_dice_7: 1.19  m1_loss_ce_8: 0.5263  m1_loss_mask_8: 0.1633  m1_loss_dice_8: 1.186  m2_loss_ce: 0.5512  m2_loss_mask: 0.1647  m2_loss_dice: 1.198  m2_loss_ce_0: 0.641  m2_loss_mask_0: 0.205  m2_loss_dice_0: 1.428  m2_loss_ce_1: 0.6837  m2_loss_mask_1: 0.1793  m2_loss_dice_1: 1.337  m2_loss_ce_2: 0.6448  m2_loss_mask_2: 0.1648  m2_loss_dice_2: 1.268  m2_loss_ce_3: 0.6092  m2_loss_mask_3: 0.1632  m2_loss_dice_3: 1.25  m2_loss_ce_4: 0.5845  m2_loss_mask_4: 0.1654  m2_loss_dice_4: 1.244  m2_loss_ce_5: 0.586  m2_loss_mask_5: 0.166  m2_loss_dice_5: 1.211  m2_loss_ce_6: 0.558  m2_loss_mask_6: 0.1643  m2_loss_dice_6: 1.244  m2_loss_ce_7: 0.5636  m2_loss_mask_7: 0.1651  m2_loss_dice_7: 1.222  m2_loss_ce_8: 0.5515  m2_loss_mask_8: 0.1672  m2_loss_dice_8: 1.224  com_loss_ce: 0.4342  com_loss_mask: 0.03578  com_loss_dice: 0.2633    time: 1.3553  last_time: 1.3548  data_time: 0.0421  last_data_time: 0.0692   lr: 0.0001  max_mem: 34830M
[08/15 22:54:27] d2.utils.events INFO:  eta: 0:00:54  iter: 959  total_loss: 43.59  m1_loss_ce: 0.5355  m1_loss_mask: 0.1498  m1_loss_dice: 1.244  m1_loss_ce_0: 0.6405  m1_loss_mask_0: 0.1818  m1_loss_dice_0: 1.449  m1_loss_ce_1: 0.7359  m1_loss_mask_1: 0.1608  m1_loss_dice_1: 1.392  m1_loss_ce_2: 0.6582  m1_loss_mask_2: 0.1558  m1_loss_dice_2: 1.331  m1_loss_ce_3: 0.625  m1_loss_mask_3: 0.1549  m1_loss_dice_3: 1.281  m1_loss_ce_4: 0.5887  m1_loss_mask_4: 0.1553  m1_loss_dice_4: 1.29  m1_loss_ce_5: 0.5446  m1_loss_mask_5: 0.1535  m1_loss_dice_5: 1.276  m1_loss_ce_6: 0.5648  m1_loss_mask_6: 0.1531  m1_loss_dice_6: 1.243  m1_loss_ce_7: 0.5144  m1_loss_mask_7: 0.1524  m1_loss_dice_7: 1.256  m1_loss_ce_8: 0.5313  m1_loss_mask_8: 0.1513  m1_loss_dice_8: 1.276  m2_loss_ce: 0.5766  m2_loss_mask: 0.15  m2_loss_dice: 1.253  m2_loss_ce_0: 0.662  m2_loss_mask_0: 0.178  m2_loss_dice_0: 1.514  m2_loss_ce_1: 0.678  m2_loss_mask_1: 0.1654  m2_loss_dice_1: 1.453  m2_loss_ce_2: 0.6538  m2_loss_mask_2: 0.1572  m2_loss_dice_2: 1.37  m2_loss_ce_3: 0.5994  m2_loss_mask_3: 0.1535  m2_loss_dice_3: 1.314  m2_loss_ce_4: 0.601  m2_loss_mask_4: 0.1548  m2_loss_dice_4: 1.304  m2_loss_ce_5: 0.5938  m2_loss_mask_5: 0.1538  m2_loss_dice_5: 1.305  m2_loss_ce_6: 0.5561  m2_loss_mask_6: 0.1536  m2_loss_dice_6: 1.273  m2_loss_ce_7: 0.5434  m2_loss_mask_7: 0.1503  m2_loss_dice_7: 1.303  m2_loss_ce_8: 0.5431  m2_loss_mask_8: 0.1507  m2_loss_dice_8: 1.294  com_loss_ce: 0.428  com_loss_mask: 0.03328  com_loss_dice: 0.2743    time: 1.3560  last_time: 1.3447  data_time: 0.0424  last_data_time: 0.0431   lr: 0.0001  max_mem: 34830M
[08/15 22:54:54] d2.utils.events INFO:  eta: 0:00:26  iter: 979  total_loss: 40.83  m1_loss_ce: 0.4371  m1_loss_mask: 0.1544  m1_loss_dice: 1.225  m1_loss_ce_0: 0.5484  m1_loss_mask_0: 0.183  m1_loss_dice_0: 1.428  m1_loss_ce_1: 0.6262  m1_loss_mask_1: 0.1627  m1_loss_dice_1: 1.355  m1_loss_ce_2: 0.5944  m1_loss_mask_2: 0.1583  m1_loss_dice_2: 1.285  m1_loss_ce_3: 0.5267  m1_loss_mask_3: 0.16  m1_loss_dice_3: 1.261  m1_loss_ce_4: 0.5253  m1_loss_mask_4: 0.1577  m1_loss_dice_4: 1.236  m1_loss_ce_5: 0.5133  m1_loss_mask_5: 0.1552  m1_loss_dice_5: 1.257  m1_loss_ce_6: 0.4919  m1_loss_mask_6: 0.1579  m1_loss_dice_6: 1.234  m1_loss_ce_7: 0.4825  m1_loss_mask_7: 0.1554  m1_loss_dice_7: 1.26  m1_loss_ce_8: 0.4845  m1_loss_mask_8: 0.1547  m1_loss_dice_8: 1.236  m2_loss_ce: 0.5183  m2_loss_mask: 0.1604  m2_loss_dice: 1.256  m2_loss_ce_0: 0.6151  m2_loss_mask_0: 0.1859  m2_loss_dice_0: 1.483  m2_loss_ce_1: 0.6473  m2_loss_mask_1: 0.1719  m2_loss_dice_1: 1.393  m2_loss_ce_2: 0.6447  m2_loss_mask_2: 0.1611  m2_loss_dice_2: 1.311  m2_loss_ce_3: 0.5605  m2_loss_mask_3: 0.1587  m2_loss_dice_3: 1.279  m2_loss_ce_4: 0.5253  m2_loss_mask_4: 0.1601  m2_loss_dice_4: 1.282  m2_loss_ce_5: 0.5445  m2_loss_mask_5: 0.1612  m2_loss_dice_5: 1.266  m2_loss_ce_6: 0.529  m2_loss_mask_6: 0.1604  m2_loss_dice_6: 1.22  m2_loss_ce_7: 0.5046  m2_loss_mask_7: 0.1601  m2_loss_dice_7: 1.251  m2_loss_ce_8: 0.5073  m2_loss_mask_8: 0.1604  m2_loss_dice_8: 1.243  com_loss_ce: 0.4266  com_loss_mask: 0.03406  com_loss_dice: 0.2719    time: 1.3558  last_time: 1.4805  data_time: 0.0415  last_data_time: 0.0457   lr: 0.0001  max_mem: 34830M
[08/15 22:55:21] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000/model_final.pth
[08/15 22:55:24] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 41.43  m1_loss_ce: 0.4681  m1_loss_mask: 0.1606  m1_loss_dice: 1.204  m1_loss_ce_0: 0.6306  m1_loss_mask_0: 0.1857  m1_loss_dice_0: 1.409  m1_loss_ce_1: 0.6732  m1_loss_mask_1: 0.1681  m1_loss_dice_1: 1.325  m1_loss_ce_2: 0.6028  m1_loss_mask_2: 0.1647  m1_loss_dice_2: 1.274  m1_loss_ce_3: 0.5591  m1_loss_mask_3: 0.1609  m1_loss_dice_3: 1.2  m1_loss_ce_4: 0.5514  m1_loss_mask_4: 0.1615  m1_loss_dice_4: 1.221  m1_loss_ce_5: 0.5287  m1_loss_mask_5: 0.1595  m1_loss_dice_5: 1.204  m1_loss_ce_6: 0.4996  m1_loss_mask_6: 0.159  m1_loss_dice_6: 1.195  m1_loss_ce_7: 0.4959  m1_loss_mask_7: 0.1614  m1_loss_dice_7: 1.188  m1_loss_ce_8: 0.4801  m1_loss_mask_8: 0.1605  m1_loss_dice_8: 1.199  m2_loss_ce: 0.5345  m2_loss_mask: 0.1665  m2_loss_dice: 1.204  m2_loss_ce_0: 0.6501  m2_loss_mask_0: 0.1938  m2_loss_dice_0: 1.441  m2_loss_ce_1: 0.6967  m2_loss_mask_1: 0.174  m2_loss_dice_1: 1.373  m2_loss_ce_2: 0.6487  m2_loss_mask_2: 0.1664  m2_loss_dice_2: 1.313  m2_loss_ce_3: 0.5943  m2_loss_mask_3: 0.1638  m2_loss_dice_3: 1.223  m2_loss_ce_4: 0.5635  m2_loss_mask_4: 0.167  m2_loss_dice_4: 1.229  m2_loss_ce_5: 0.5684  m2_loss_mask_5: 0.1669  m2_loss_dice_5: 1.247  m2_loss_ce_6: 0.5436  m2_loss_mask_6: 0.162  m2_loss_dice_6: 1.19  m2_loss_ce_7: 0.5569  m2_loss_mask_7: 0.1661  m2_loss_dice_7: 1.211  m2_loss_ce_8: 0.5292  m2_loss_mask_8: 0.1648  m2_loss_dice_8: 1.16  com_loss_ce: 0.4091  com_loss_mask: 0.03372  com_loss_dice: 0.2531    time: 1.3560  last_time: 1.2916  data_time: 0.0427  last_data_time: 0.0405   lr: 0.0001  max_mem: 34830M
[08/15 22:55:24] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:22:33 (1.3560 s / it)
[08/15 22:55:24] d2.engine.hooks INFO: Total training time: 0:22:42 (0:00:09 on hooks)
[08/15 22:55:24] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/15 22:55:24] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/15 22:55:24] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/15 22:55:24] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/15 22:55:24] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/15 22:56:43] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval_7ow6f0i ...
[08/15 22:56:57] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 56.902 | 80.285 | 69.773 |      19       |
| Things | 47.889 | 79.502 | 60.127 |       8       |
| Stuff  | 63.457 | 80.855 | 76.788 |      11       |
[08/15 22:56:57] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.151 | 97.453 | 99.690 |     Stuff     |
| class_8  | 65.266 | 82.351 | 79.254 |     Stuff     |
| class_11 | 87.572 | 89.302 | 98.063 |     Stuff     |
| class_12 | 41.897 | 79.166 | 52.923 |     Stuff     |
| class_13 | 37.896 | 75.791 | 50.000 |     Stuff     |
| class_17 | 44.287 | 63.509 | 69.734 |     Stuff     |
| class_19 | 45.601 | 67.906 | 67.153 |     Stuff     |
| class_20 | 65.248 | 76.917 | 84.829 |     Stuff     |
| class_21 | 88.487 | 89.958 | 98.364 |     Stuff     |
| class_22 | 37.210 | 75.243 | 49.453 |     Stuff     |
| class_23 | 87.411 | 91.813 | 95.205 |     Stuff     |
| class_24 | 48.552 | 75.900 | 63.968 |    Things     |
| class_25 | 46.928 | 72.700 | 64.550 |    Things     |
| class_26 | 63.898 | 82.790 | 77.182 |    Things     |
| class_27 | 45.143 | 87.983 | 51.309 |    Things     |
| class_28 | 61.491 | 88.925 | 69.149 |    Things     |
| class_31 | 41.188 | 84.664 | 48.649 |    Things     |
| class_32 | 34.011 | 71.998 | 47.239 |    Things     |
| class_33 | 41.898 | 71.053 | 58.967 |    Things     |
[08/15 22:56:57] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/15 22:56:57] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/15 22:56:57] d2.evaluation.testing INFO: copypaste: 56.9018,80.2854,69.7727,47.8887,79.5017,60.1266,63.4568,80.8553,76.7880,97.1505,97.4529,99.6898,65.2658,82.3506,79.2536,87.5721,89.3017,98.0632,41.8970,79.1658,52.9231,37.8957,75.7913,50.0000,44.2874,63.5090,69.7342,45.6011,67.9060,67.1533,65.2476,76.9166,84.8291,88.4867,89.9584,98.3640,37.2099,75.2431,49.4530,87.4109,91.8128,95.2055,48.5521,75.9001,63.9684,46.9280,72.6999,64.5503,63.8982,82.7895,77.1815,45.1432,87.9832,51.3089,61.4910,88.9255,69.1489,41.1880,84.6641,48.6486,34.0114,71.9983,47.2393,41.8979,71.0532,58.9669
