[10/06 21:21:19] detectron2 INFO: Rank of current process: 0. World size: 2
[10/06 21:21:20] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/06 21:21:20] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_L1_L2_0_6_0_4_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/06 21:21:20] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_L1_L2_0_6_0_4_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/06 21:21:20] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/06 21:21:20] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4/config.yaml
[10/06 21:21:20] d2.utils.env INFO: Using a generated random seed 22851800
[10/06 21:21:23] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/06 21:21:23] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/06 21:21:23] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/06 21:21:23] d2.data.build INFO: Using training sampler TrainingSampler
[10/06 21:21:24] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/06 21:21:24] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/06 21:21:24] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/06 21:21:24] d2.data.build INFO: Making batched data loader with batch_size=4
[10/06 21:21:24] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/06 21:21:28] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/06 21:21:28] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 21:21:28] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.text_projection' to the model due to incompatible shapes: (512, 512) in the checkpoint but (512, 1024) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.visual.attnpool.c_proj.weight' to the model due to incompatible shapes: (512, 2048) in the checkpoint but (1024, 2048) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.visual.attnpool.c_proj.bias' to the model due to incompatible shapes: (512,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.predictor.class_embed.layers.2.weight' to the model due to incompatible shapes: (512, 256) in the checkpoint but (1024, 256) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.predictor.class_embed.layers.2.bias' to the model due to incompatible shapes: (512,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'void_embedding.weight' to the model due to incompatible shapes: (1, 512) in the checkpoint but (1, 1024) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.text_projection[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34msem_seg_head.predictor.class_embed.layers.2.{bias, weight}[0m
[34mvoid_embedding.weight[0m
[10/06 21:21:41] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mbackbone.clip_model.visual.layer3.6.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.6.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.6.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[10/06 21:21:41] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 21:21:41] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.text_projection' to the model due to incompatible shapes: (512, 512) in the checkpoint but (512, 1024) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.visual.attnpool.c_proj.weight' to the model due to incompatible shapes: (512, 2048) in the checkpoint but (1024, 2048) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.visual.attnpool.c_proj.bias' to the model due to incompatible shapes: (512,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.predictor.class_embed.layers.2.weight' to the model due to incompatible shapes: (512, 256) in the checkpoint but (1024, 256) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.predictor.class_embed.layers.2.bias' to the model due to incompatible shapes: (512,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Skip loading parameter 'void_embedding.weight' to the model due to incompatible shapes: (1, 512) in the checkpoint but (1, 1024) in the model! You might want to double check if this is expected.
[10/06 21:21:41] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.text_projection[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34msem_seg_head.predictor.class_embed.layers.2.{bias, weight}[0m
[34mvoid_embedding.weight[0m
[10/06 21:21:41] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mbackbone.clip_model.visual.layer3.6.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.6.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.6.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[10/06 21:22:14] d2.utils.events INFO:  eta: 0:21:45  iter: 19  total_loss: 161.9  m1_loss_ce: 3.413  m1_loss_mask: 0.2923  m1_loss_dice: 1.586  m1_loss_ce_0: 4.103  m1_loss_mask_0: 0.3599  m1_loss_dice_0: 2.072  m1_loss_ce_1: 3.656  m1_loss_mask_1: 0.3331  m1_loss_dice_1: 1.844  m1_loss_ce_2: 3.58  m1_loss_mask_2: 0.306  m1_loss_dice_2: 1.76  m1_loss_ce_3: 3.542  m1_loss_mask_3: 0.2943  m1_loss_dice_3: 1.663  m1_loss_ce_4: 3.509  m1_loss_mask_4: 0.287  m1_loss_dice_4: 1.671  m1_loss_ce_5: 3.446  m1_loss_mask_5: 0.283  m1_loss_dice_5: 1.624  m1_loss_ce_6: 3.403  m1_loss_mask_6: 0.2864  m1_loss_dice_6: 1.603  m1_loss_ce_7: 3.42  m1_loss_mask_7: 0.2853  m1_loss_dice_7: 1.568  m1_loss_ce_8: 3.399  m1_loss_mask_8: 0.2898  m1_loss_dice_8: 1.568  m2_loss_ce: 7.289  m2_loss_mask: 0.5431  m2_loss_dice: 2.491  m2_loss_ce_0: 7.495  m2_loss_mask_0: 0.7547  m2_loss_dice_0: 3.473  m2_loss_ce_1: 7.302  m2_loss_mask_1: 0.6226  m2_loss_dice_1: 2.932  m2_loss_ce_2: 7.296  m2_loss_mask_2: 0.5651  m2_loss_dice_2: 2.823  m2_loss_ce_3: 7.388  m2_loss_mask_3: 0.5516  m2_loss_dice_3: 2.606  m2_loss_ce_4: 7.466  m2_loss_mask_4: 0.5452  m2_loss_dice_4: 2.622  m2_loss_ce_5: 7.461  m2_loss_mask_5: 0.5494  m2_loss_dice_5: 2.602  m2_loss_ce_6: 7.394  m2_loss_mask_6: 0.5414  m2_loss_dice_6: 2.586  m2_loss_ce_7: 7.371  m2_loss_mask_7: 0.5414  m2_loss_dice_7: 2.553  m2_loss_ce_8: 7.3  m2_loss_mask_8: 0.546  m2_loss_dice_8: 2.547    time: 1.3486  last_time: 1.3329  data_time: 0.2447  last_data_time: 0.0442   lr: 0.0001  max_mem: 33936M
[10/06 21:22:42] d2.utils.events INFO:  eta: 0:21:29  iter: 39  total_loss: 140.3  m1_loss_ce: 1.601  m1_loss_mask: 0.2304  m1_loss_dice: 1.445  m1_loss_ce_0: 1.913  m1_loss_mask_0: 0.282  m1_loss_dice_0: 1.749  m1_loss_ce_1: 1.844  m1_loss_mask_1: 0.2525  m1_loss_dice_1: 1.644  m1_loss_ce_2: 1.718  m1_loss_mask_2: 0.2467  m1_loss_dice_2: 1.541  m1_loss_ce_3: 1.653  m1_loss_mask_3: 0.238  m1_loss_dice_3: 1.51  m1_loss_ce_4: 1.621  m1_loss_mask_4: 0.2443  m1_loss_dice_4: 1.437  m1_loss_ce_5: 1.565  m1_loss_mask_5: 0.2379  m1_loss_dice_5: 1.429  m1_loss_ce_6: 1.608  m1_loss_mask_6: 0.2416  m1_loss_dice_6: 1.376  m1_loss_ce_7: 1.596  m1_loss_mask_7: 0.2373  m1_loss_dice_7: 1.413  m1_loss_ce_8: 1.581  m1_loss_mask_8: 0.2348  m1_loss_dice_8: 1.422  m2_loss_ce: 7.223  m2_loss_mask: 0.4985  m2_loss_dice: 2.557  m2_loss_ce_0: 7.477  m2_loss_mask_0: 0.6839  m2_loss_dice_0: 3.517  m2_loss_ce_1: 7.26  m2_loss_mask_1: 0.5884  m2_loss_dice_1: 2.958  m2_loss_ce_2: 7.223  m2_loss_mask_2: 0.5361  m2_loss_dice_2: 2.897  m2_loss_ce_3: 7.324  m2_loss_mask_3: 0.5373  m2_loss_dice_3: 2.668  m2_loss_ce_4: 7.416  m2_loss_mask_4: 0.5167  m2_loss_dice_4: 2.663  m2_loss_ce_5: 7.408  m2_loss_mask_5: 0.5214  m2_loss_dice_5: 2.686  m2_loss_ce_6: 7.343  m2_loss_mask_6: 0.4956  m2_loss_dice_6: 2.624  m2_loss_ce_7: 7.324  m2_loss_mask_7: 0.498  m2_loss_dice_7: 2.638  m2_loss_ce_8: 7.24  m2_loss_mask_8: 0.5032  m2_loss_dice_8: 2.58    time: 1.3642  last_time: 1.4994  data_time: 0.0501  last_data_time: 0.0395   lr: 0.0001  max_mem: 34350M
[10/06 21:23:10] d2.utils.events INFO:  eta: 0:21:19  iter: 59  total_loss: 134.7  m1_loss_ce: 1.045  m1_loss_mask: 0.2488  m1_loss_dice: 1.403  m1_loss_ce_0: 1.304  m1_loss_mask_0: 0.2782  m1_loss_dice_0: 1.743  m1_loss_ce_1: 1.299  m1_loss_mask_1: 0.27  m1_loss_dice_1: 1.587  m1_loss_ce_2: 1.211  m1_loss_mask_2: 0.2671  m1_loss_dice_2: 1.51  m1_loss_ce_3: 1.139  m1_loss_mask_3: 0.2631  m1_loss_dice_3: 1.434  m1_loss_ce_4: 1.043  m1_loss_mask_4: 0.2538  m1_loss_dice_4: 1.494  m1_loss_ce_5: 1.097  m1_loss_mask_5: 0.2547  m1_loss_dice_5: 1.445  m1_loss_ce_6: 1.057  m1_loss_mask_6: 0.259  m1_loss_dice_6: 1.44  m1_loss_ce_7: 1.028  m1_loss_mask_7: 0.2496  m1_loss_dice_7: 1.445  m1_loss_ce_8: 1.05  m1_loss_mask_8: 0.2446  m1_loss_dice_8: 1.385  m2_loss_ce: 7.252  m2_loss_mask: 0.5227  m2_loss_dice: 2.503  m2_loss_ce_0: 7.487  m2_loss_mask_0: 0.7393  m2_loss_dice_0: 3.495  m2_loss_ce_1: 7.304  m2_loss_mask_1: 0.6139  m2_loss_dice_1: 2.932  m2_loss_ce_2: 7.292  m2_loss_mask_2: 0.5615  m2_loss_dice_2: 2.843  m2_loss_ce_3: 7.386  m2_loss_mask_3: 0.5521  m2_loss_dice_3: 2.647  m2_loss_ce_4: 7.473  m2_loss_mask_4: 0.552  m2_loss_dice_4: 2.664  m2_loss_ce_5: 7.479  m2_loss_mask_5: 0.5513  m2_loss_dice_5: 2.604  m2_loss_ce_6: 7.388  m2_loss_mask_6: 0.5301  m2_loss_dice_6: 2.6  m2_loss_ce_7: 7.325  m2_loss_mask_7: 0.5291  m2_loss_dice_7: 2.57  m2_loss_ce_8: 7.301  m2_loss_mask_8: 0.5383  m2_loss_dice_8: 2.576    time: 1.3809  last_time: 1.4750  data_time: 0.0583  last_data_time: 0.0407   lr: 0.0001  max_mem: 34350M
[10/06 21:23:38] d2.utils.events INFO:  eta: 0:21:10  iter: 79  total_loss: 131.6  m1_loss_ce: 0.8293  m1_loss_mask: 0.2305  m1_loss_dice: 1.366  m1_loss_ce_0: 0.9591  m1_loss_mask_0: 0.2567  m1_loss_dice_0: 1.719  m1_loss_ce_1: 0.969  m1_loss_mask_1: 0.2375  m1_loss_dice_1: 1.512  m1_loss_ce_2: 0.9411  m1_loss_mask_2: 0.2332  m1_loss_dice_2: 1.463  m1_loss_ce_3: 0.8621  m1_loss_mask_3: 0.2342  m1_loss_dice_3: 1.393  m1_loss_ce_4: 0.8412  m1_loss_mask_4: 0.236  m1_loss_dice_4: 1.388  m1_loss_ce_5: 0.8031  m1_loss_mask_5: 0.2308  m1_loss_dice_5: 1.378  m1_loss_ce_6: 0.8408  m1_loss_mask_6: 0.2276  m1_loss_dice_6: 1.383  m1_loss_ce_7: 0.851  m1_loss_mask_7: 0.2261  m1_loss_dice_7: 1.33  m1_loss_ce_8: 0.8161  m1_loss_mask_8: 0.227  m1_loss_dice_8: 1.387  m2_loss_ce: 7.263  m2_loss_mask: 0.5484  m2_loss_dice: 2.468  m2_loss_ce_0: 7.465  m2_loss_mask_0: 0.7412  m2_loss_dice_0: 3.531  m2_loss_ce_1: 7.273  m2_loss_mask_1: 0.6187  m2_loss_dice_1: 2.916  m2_loss_ce_2: 7.246  m2_loss_mask_2: 0.5689  m2_loss_dice_2: 2.824  m2_loss_ce_3: 7.368  m2_loss_mask_3: 0.5673  m2_loss_dice_3: 2.625  m2_loss_ce_4: 7.448  m2_loss_mask_4: 0.5686  m2_loss_dice_4: 2.59  m2_loss_ce_5: 7.443  m2_loss_mask_5: 0.5582  m2_loss_dice_5: 2.609  m2_loss_ce_6: 7.362  m2_loss_mask_6: 0.542  m2_loss_dice_6: 2.563  m2_loss_ce_7: 7.348  m2_loss_mask_7: 0.5414  m2_loss_dice_7: 2.557  m2_loss_ce_8: 7.28  m2_loss_mask_8: 0.559  m2_loss_dice_8: 2.524    time: 1.3851  last_time: 1.3501  data_time: 0.0510  last_data_time: 0.0702   lr: 0.0001  max_mem: 34350M
[10/06 21:24:06] d2.utils.events INFO:  eta: 0:20:47  iter: 99  total_loss: 131.5  m1_loss_ce: 0.7987  m1_loss_mask: 0.2115  m1_loss_dice: 1.409  m1_loss_ce_0: 0.8776  m1_loss_mask_0: 0.2437  m1_loss_dice_0: 1.729  m1_loss_ce_1: 0.9692  m1_loss_mask_1: 0.2357  m1_loss_dice_1: 1.567  m1_loss_ce_2: 0.9137  m1_loss_mask_2: 0.2215  m1_loss_dice_2: 1.488  m1_loss_ce_3: 0.8416  m1_loss_mask_3: 0.2128  m1_loss_dice_3: 1.451  m1_loss_ce_4: 0.861  m1_loss_mask_4: 0.2151  m1_loss_dice_4: 1.422  m1_loss_ce_5: 0.8203  m1_loss_mask_5: 0.2144  m1_loss_dice_5: 1.441  m1_loss_ce_6: 0.8076  m1_loss_mask_6: 0.2152  m1_loss_dice_6: 1.428  m1_loss_ce_7: 0.8129  m1_loss_mask_7: 0.2127  m1_loss_dice_7: 1.408  m1_loss_ce_8: 0.752  m1_loss_mask_8: 0.2135  m1_loss_dice_8: 1.424  m2_loss_ce: 7.209  m2_loss_mask: 0.4992  m2_loss_dice: 2.525  m2_loss_ce_0: 7.472  m2_loss_mask_0: 0.713  m2_loss_dice_0: 3.441  m2_loss_ce_1: 7.213  m2_loss_mask_1: 0.5805  m2_loss_dice_1: 2.932  m2_loss_ce_2: 7.22  m2_loss_mask_2: 0.5349  m2_loss_dice_2: 2.83  m2_loss_ce_3: 7.329  m2_loss_mask_3: 0.5247  m2_loss_dice_3: 2.621  m2_loss_ce_4: 7.43  m2_loss_mask_4: 0.5157  m2_loss_dice_4: 2.619  m2_loss_ce_5: 7.422  m2_loss_mask_5: 0.5144  m2_loss_dice_5: 2.644  m2_loss_ce_6: 7.329  m2_loss_mask_6: 0.4915  m2_loss_dice_6: 2.592  m2_loss_ce_7: 7.321  m2_loss_mask_7: 0.4924  m2_loss_dice_7: 2.564  m2_loss_ce_8: 7.269  m2_loss_mask_8: 0.502  m2_loss_dice_8: 2.543    time: 1.3874  last_time: 1.3985  data_time: 0.0582  last_data_time: 0.0668   lr: 0.0001  max_mem: 35069M
[10/06 21:24:35] d2.utils.events INFO:  eta: 0:20:22  iter: 119  total_loss: 130.7  m1_loss_ce: 0.7273  m1_loss_mask: 0.2158  m1_loss_dice: 1.325  m1_loss_ce_0: 0.8213  m1_loss_mask_0: 0.2561  m1_loss_dice_0: 1.647  m1_loss_ce_1: 0.8891  m1_loss_mask_1: 0.2341  m1_loss_dice_1: 1.477  m1_loss_ce_2: 0.8828  m1_loss_mask_2: 0.2242  m1_loss_dice_2: 1.422  m1_loss_ce_3: 0.8064  m1_loss_mask_3: 0.2245  m1_loss_dice_3: 1.369  m1_loss_ce_4: 0.7792  m1_loss_mask_4: 0.2192  m1_loss_dice_4: 1.339  m1_loss_ce_5: 0.7818  m1_loss_mask_5: 0.2157  m1_loss_dice_5: 1.388  m1_loss_ce_6: 0.7607  m1_loss_mask_6: 0.2162  m1_loss_dice_6: 1.312  m1_loss_ce_7: 0.7547  m1_loss_mask_7: 0.2152  m1_loss_dice_7: 1.33  m1_loss_ce_8: 0.7374  m1_loss_mask_8: 0.2148  m1_loss_dice_8: 1.313  m2_loss_ce: 7.254  m2_loss_mask: 0.5472  m2_loss_dice: 2.467  m2_loss_ce_0: 7.461  m2_loss_mask_0: 0.7738  m2_loss_dice_0: 3.51  m2_loss_ce_1: 7.297  m2_loss_mask_1: 0.6394  m2_loss_dice_1: 2.896  m2_loss_ce_2: 7.264  m2_loss_mask_2: 0.5871  m2_loss_dice_2: 2.821  m2_loss_ce_3: 7.393  m2_loss_mask_3: 0.5662  m2_loss_dice_3: 2.596  m2_loss_ce_4: 7.467  m2_loss_mask_4: 0.5645  m2_loss_dice_4: 2.594  m2_loss_ce_5: 7.444  m2_loss_mask_5: 0.5582  m2_loss_dice_5: 2.617  m2_loss_ce_6: 7.364  m2_loss_mask_6: 0.5459  m2_loss_dice_6: 2.577  m2_loss_ce_7: 7.354  m2_loss_mask_7: 0.5506  m2_loss_dice_7: 2.556  m2_loss_ce_8: 7.292  m2_loss_mask_8: 0.5536  m2_loss_dice_8: 2.555    time: 1.3904  last_time: 1.4488  data_time: 0.0549  last_data_time: 0.0381   lr: 0.0001  max_mem: 35069M
[10/06 21:25:04] d2.utils.events INFO:  eta: 0:20:00  iter: 139  total_loss: 128.9  m1_loss_ce: 0.7223  m1_loss_mask: 0.195  m1_loss_dice: 1.282  m1_loss_ce_0: 0.8775  m1_loss_mask_0: 0.2387  m1_loss_dice_0: 1.597  m1_loss_ce_1: 0.9193  m1_loss_mask_1: 0.2183  m1_loss_dice_1: 1.457  m1_loss_ce_2: 0.8519  m1_loss_mask_2: 0.2092  m1_loss_dice_2: 1.381  m1_loss_ce_3: 0.7849  m1_loss_mask_3: 0.2026  m1_loss_dice_3: 1.316  m1_loss_ce_4: 0.7843  m1_loss_mask_4: 0.2006  m1_loss_dice_4: 1.346  m1_loss_ce_5: 0.76  m1_loss_mask_5: 0.1986  m1_loss_dice_5: 1.32  m1_loss_ce_6: 0.7661  m1_loss_mask_6: 0.1965  m1_loss_dice_6: 1.275  m1_loss_ce_7: 0.7416  m1_loss_mask_7: 0.1966  m1_loss_dice_7: 1.26  m1_loss_ce_8: 0.737  m1_loss_mask_8: 0.1993  m1_loss_dice_8: 1.28  m2_loss_ce: 7.175  m2_loss_mask: 0.5543  m2_loss_dice: 2.451  m2_loss_ce_0: 7.472  m2_loss_mask_0: 0.7844  m2_loss_dice_0: 3.457  m2_loss_ce_1: 7.219  m2_loss_mask_1: 0.6687  m2_loss_dice_1: 2.904  m2_loss_ce_2: 7.188  m2_loss_mask_2: 0.5949  m2_loss_dice_2: 2.775  m2_loss_ce_3: 7.31  m2_loss_mask_3: 0.5665  m2_loss_dice_3: 2.599  m2_loss_ce_4: 7.421  m2_loss_mask_4: 0.5669  m2_loss_dice_4: 2.575  m2_loss_ce_5: 7.38  m2_loss_mask_5: 0.5669  m2_loss_dice_5: 2.597  m2_loss_ce_6: 7.295  m2_loss_mask_6: 0.5582  m2_loss_dice_6: 2.557  m2_loss_ce_7: 7.269  m2_loss_mask_7: 0.5493  m2_loss_dice_7: 2.536  m2_loss_ce_8: 7.215  m2_loss_mask_8: 0.5553  m2_loss_dice_8: 2.498    time: 1.4004  last_time: 1.6392  data_time: 0.0499  last_data_time: 0.1185   lr: 0.0001  max_mem: 35069M
[10/06 21:25:32] d2.utils.events INFO:  eta: 0:19:31  iter: 159  total_loss: 130.4  m1_loss_ce: 0.6964  m1_loss_mask: 0.2091  m1_loss_dice: 1.374  m1_loss_ce_0: 0.8019  m1_loss_mask_0: 0.2454  m1_loss_dice_0: 1.65  m1_loss_ce_1: 0.8936  m1_loss_mask_1: 0.2274  m1_loss_dice_1: 1.561  m1_loss_ce_2: 0.8284  m1_loss_mask_2: 0.2129  m1_loss_dice_2: 1.476  m1_loss_ce_3: 0.7966  m1_loss_mask_3: 0.212  m1_loss_dice_3: 1.421  m1_loss_ce_4: 0.7722  m1_loss_mask_4: 0.2097  m1_loss_dice_4: 1.414  m1_loss_ce_5: 0.7402  m1_loss_mask_5: 0.2076  m1_loss_dice_5: 1.409  m1_loss_ce_6: 0.7105  m1_loss_mask_6: 0.205  m1_loss_dice_6: 1.354  m1_loss_ce_7: 0.7254  m1_loss_mask_7: 0.2103  m1_loss_dice_7: 1.376  m1_loss_ce_8: 0.7131  m1_loss_mask_8: 0.2119  m1_loss_dice_8: 1.376  m2_loss_ce: 7.2  m2_loss_mask: 0.5224  m2_loss_dice: 2.556  m2_loss_ce_0: 7.437  m2_loss_mask_0: 0.7338  m2_loss_dice_0: 3.447  m2_loss_ce_1: 7.237  m2_loss_mask_1: 0.6068  m2_loss_dice_1: 2.974  m2_loss_ce_2: 7.229  m2_loss_mask_2: 0.5612  m2_loss_dice_2: 2.841  m2_loss_ce_3: 7.322  m2_loss_mask_3: 0.5617  m2_loss_dice_3: 2.639  m2_loss_ce_4: 7.429  m2_loss_mask_4: 0.5482  m2_loss_dice_4: 2.659  m2_loss_ce_5: 7.409  m2_loss_mask_5: 0.5462  m2_loss_dice_5: 2.62  m2_loss_ce_6: 7.338  m2_loss_mask_6: 0.5275  m2_loss_dice_6: 2.623  m2_loss_ce_7: 7.302  m2_loss_mask_7: 0.5357  m2_loss_dice_7: 2.645  m2_loss_ce_8: 7.235  m2_loss_mask_8: 0.5289  m2_loss_dice_8: 2.593    time: 1.4000  last_time: 1.4089  data_time: 0.0599  last_data_time: 0.0372   lr: 0.0001  max_mem: 35069M
[10/06 21:26:00] d2.utils.events INFO:  eta: 0:19:01  iter: 179  total_loss: 129.9  m1_loss_ce: 0.6805  m1_loss_mask: 0.2097  m1_loss_dice: 1.284  m1_loss_ce_0: 0.8106  m1_loss_mask_0: 0.2647  m1_loss_dice_0: 1.534  m1_loss_ce_1: 0.8412  m1_loss_mask_1: 0.2368  m1_loss_dice_1: 1.427  m1_loss_ce_2: 0.7607  m1_loss_mask_2: 0.2217  m1_loss_dice_2: 1.354  m1_loss_ce_3: 0.737  m1_loss_mask_3: 0.2174  m1_loss_dice_3: 1.347  m1_loss_ce_4: 0.6935  m1_loss_mask_4: 0.2167  m1_loss_dice_4: 1.31  m1_loss_ce_5: 0.6911  m1_loss_mask_5: 0.2143  m1_loss_dice_5: 1.303  m1_loss_ce_6: 0.6927  m1_loss_mask_6: 0.2152  m1_loss_dice_6: 1.28  m1_loss_ce_7: 0.6795  m1_loss_mask_7: 0.2152  m1_loss_dice_7: 1.256  m1_loss_ce_8: 0.68  m1_loss_mask_8: 0.2134  m1_loss_dice_8: 1.258  m2_loss_ce: 7.226  m2_loss_mask: 0.5677  m2_loss_dice: 2.47  m2_loss_ce_0: 7.51  m2_loss_mask_0: 0.7991  m2_loss_dice_0: 3.469  m2_loss_ce_1: 7.268  m2_loss_mask_1: 0.6536  m2_loss_dice_1: 2.912  m2_loss_ce_2: 7.247  m2_loss_mask_2: 0.6024  m2_loss_dice_2: 2.77  m2_loss_ce_3: 7.383  m2_loss_mask_3: 0.598  m2_loss_dice_3: 2.585  m2_loss_ce_4: 7.456  m2_loss_mask_4: 0.5789  m2_loss_dice_4: 2.556  m2_loss_ce_5: 7.442  m2_loss_mask_5: 0.5841  m2_loss_dice_5: 2.584  m2_loss_ce_6: 7.342  m2_loss_mask_6: 0.5696  m2_loss_dice_6: 2.544  m2_loss_ce_7: 7.313  m2_loss_mask_7: 0.5731  m2_loss_dice_7: 2.548  m2_loss_ce_8: 7.27  m2_loss_mask_8: 0.5806  m2_loss_dice_8: 2.507    time: 1.3968  last_time: 1.2934  data_time: 0.0603  last_data_time: 0.0449   lr: 0.0001  max_mem: 35069M
[10/06 21:26:28] d2.utils.events INFO:  eta: 0:18:37  iter: 199  total_loss: 129.8  m1_loss_ce: 0.6879  m1_loss_mask: 0.1947  m1_loss_dice: 1.389  m1_loss_ce_0: 0.7934  m1_loss_mask_0: 0.2427  m1_loss_dice_0: 1.686  m1_loss_ce_1: 0.8259  m1_loss_mask_1: 0.2193  m1_loss_dice_1: 1.588  m1_loss_ce_2: 0.7761  m1_loss_mask_2: 0.1971  m1_loss_dice_2: 1.48  m1_loss_ce_3: 0.7587  m1_loss_mask_3: 0.2003  m1_loss_dice_3: 1.417  m1_loss_ce_4: 0.7352  m1_loss_mask_4: 0.1981  m1_loss_dice_4: 1.411  m1_loss_ce_5: 0.6864  m1_loss_mask_5: 0.1939  m1_loss_dice_5: 1.411  m1_loss_ce_6: 0.6864  m1_loss_mask_6: 0.1953  m1_loss_dice_6: 1.401  m1_loss_ce_7: 0.6819  m1_loss_mask_7: 0.1951  m1_loss_dice_7: 1.388  m1_loss_ce_8: 0.6839  m1_loss_mask_8: 0.1954  m1_loss_dice_8: 1.386  m2_loss_ce: 7.273  m2_loss_mask: 0.4949  m2_loss_dice: 2.541  m2_loss_ce_0: 7.483  m2_loss_mask_0: 0.6728  m2_loss_dice_0: 3.424  m2_loss_ce_1: 7.293  m2_loss_mask_1: 0.569  m2_loss_dice_1: 2.983  m2_loss_ce_2: 7.271  m2_loss_mask_2: 0.5277  m2_loss_dice_2: 2.871  m2_loss_ce_3: 7.392  m2_loss_mask_3: 0.5122  m2_loss_dice_3: 2.683  m2_loss_ce_4: 7.451  m2_loss_mask_4: 0.5049  m2_loss_dice_4: 2.655  m2_loss_ce_5: 7.459  m2_loss_mask_5: 0.5028  m2_loss_dice_5: 2.678  m2_loss_ce_6: 7.372  m2_loss_mask_6: 0.4967  m2_loss_dice_6: 2.668  m2_loss_ce_7: 7.344  m2_loss_mask_7: 0.4991  m2_loss_dice_7: 2.633  m2_loss_ce_8: 7.29  m2_loss_mask_8: 0.499  m2_loss_dice_8: 2.613    time: 1.4010  last_time: 1.4487  data_time: 0.0539  last_data_time: 0.0517   lr: 0.0001  max_mem: 35069M
[10/06 21:26:58] d2.utils.events INFO:  eta: 0:18:11  iter: 219  total_loss: 130.5  m1_loss_ce: 0.6473  m1_loss_mask: 0.2387  m1_loss_dice: 1.268  m1_loss_ce_0: 0.7908  m1_loss_mask_0: 0.2826  m1_loss_dice_0: 1.62  m1_loss_ce_1: 0.8381  m1_loss_mask_1: 0.2672  m1_loss_dice_1: 1.474  m1_loss_ce_2: 0.7508  m1_loss_mask_2: 0.2502  m1_loss_dice_2: 1.406  m1_loss_ce_3: 0.7194  m1_loss_mask_3: 0.2422  m1_loss_dice_3: 1.316  m1_loss_ce_4: 0.6664  m1_loss_mask_4: 0.2432  m1_loss_dice_4: 1.311  m1_loss_ce_5: 0.6509  m1_loss_mask_5: 0.2399  m1_loss_dice_5: 1.312  m1_loss_ce_6: 0.6598  m1_loss_mask_6: 0.2416  m1_loss_dice_6: 1.257  m1_loss_ce_7: 0.6718  m1_loss_mask_7: 0.2399  m1_loss_dice_7: 1.256  m1_loss_ce_8: 0.6389  m1_loss_mask_8: 0.2394  m1_loss_dice_8: 1.251  m2_loss_ce: 7.26  m2_loss_mask: 0.5483  m2_loss_dice: 2.529  m2_loss_ce_0: 7.494  m2_loss_mask_0: 0.7528  m2_loss_dice_0: 3.491  m2_loss_ce_1: 7.277  m2_loss_mask_1: 0.6345  m2_loss_dice_1: 2.921  m2_loss_ce_2: 7.268  m2_loss_mask_2: 0.5743  m2_loss_dice_2: 2.836  m2_loss_ce_3: 7.377  m2_loss_mask_3: 0.5783  m2_loss_dice_3: 2.653  m2_loss_ce_4: 7.439  m2_loss_mask_4: 0.5559  m2_loss_dice_4: 2.623  m2_loss_ce_5: 7.455  m2_loss_mask_5: 0.5589  m2_loss_dice_5: 2.611  m2_loss_ce_6: 7.351  m2_loss_mask_6: 0.5367  m2_loss_dice_6: 2.62  m2_loss_ce_7: 7.337  m2_loss_mask_7: 0.546  m2_loss_dice_7: 2.619  m2_loss_ce_8: 7.273  m2_loss_mask_8: 0.5593  m2_loss_dice_8: 2.579    time: 1.4064  last_time: 1.6266  data_time: 0.0597  last_data_time: 0.1351   lr: 0.0001  max_mem: 35069M
[10/06 21:27:26] d2.utils.events INFO:  eta: 0:17:44  iter: 239  total_loss: 130.1  m1_loss_ce: 0.676  m1_loss_mask: 0.2148  m1_loss_dice: 1.322  m1_loss_ce_0: 0.7706  m1_loss_mask_0: 0.2586  m1_loss_dice_0: 1.664  m1_loss_ce_1: 0.8673  m1_loss_mask_1: 0.2369  m1_loss_dice_1: 1.479  m1_loss_ce_2: 0.781  m1_loss_mask_2: 0.2251  m1_loss_dice_2: 1.446  m1_loss_ce_3: 0.7235  m1_loss_mask_3: 0.2264  m1_loss_dice_3: 1.405  m1_loss_ce_4: 0.7063  m1_loss_mask_4: 0.2247  m1_loss_dice_4: 1.375  m1_loss_ce_5: 0.712  m1_loss_mask_5: 0.2192  m1_loss_dice_5: 1.39  m1_loss_ce_6: 0.712  m1_loss_mask_6: 0.2115  m1_loss_dice_6: 1.349  m1_loss_ce_7: 0.6864  m1_loss_mask_7: 0.2142  m1_loss_dice_7: 1.333  m1_loss_ce_8: 0.6813  m1_loss_mask_8: 0.2134  m1_loss_dice_8: 1.375  m2_loss_ce: 7.216  m2_loss_mask: 0.5158  m2_loss_dice: 2.491  m2_loss_ce_0: 7.446  m2_loss_mask_0: 0.7329  m2_loss_dice_0: 3.546  m2_loss_ce_1: 7.235  m2_loss_mask_1: 0.6001  m2_loss_dice_1: 2.919  m2_loss_ce_2: 7.254  m2_loss_mask_2: 0.5628  m2_loss_dice_2: 2.836  m2_loss_ce_3: 7.367  m2_loss_mask_3: 0.5554  m2_loss_dice_3: 2.634  m2_loss_ce_4: 7.438  m2_loss_mask_4: 0.5354  m2_loss_dice_4: 2.623  m2_loss_ce_5: 7.425  m2_loss_mask_5: 0.5379  m2_loss_dice_5: 2.635  m2_loss_ce_6: 7.329  m2_loss_mask_6: 0.5217  m2_loss_dice_6: 2.591  m2_loss_ce_7: 7.307  m2_loss_mask_7: 0.5137  m2_loss_dice_7: 2.571  m2_loss_ce_8: 7.259  m2_loss_mask_8: 0.5249  m2_loss_dice_8: 2.549    time: 1.4069  last_time: 1.4376  data_time: 0.0602  last_data_time: 0.0479   lr: 0.0001  max_mem: 35069M
[10/06 21:27:53] d2.utils.events INFO:  eta: 0:17:13  iter: 259  total_loss: 128.7  m1_loss_ce: 0.5764  m1_loss_mask: 0.2081  m1_loss_dice: 1.327  m1_loss_ce_0: 0.7132  m1_loss_mask_0: 0.2446  m1_loss_dice_0: 1.642  m1_loss_ce_1: 0.7633  m1_loss_mask_1: 0.2303  m1_loss_dice_1: 1.494  m1_loss_ce_2: 0.6713  m1_loss_mask_2: 0.2169  m1_loss_dice_2: 1.394  m1_loss_ce_3: 0.6343  m1_loss_mask_3: 0.2149  m1_loss_dice_3: 1.35  m1_loss_ce_4: 0.6107  m1_loss_mask_4: 0.2051  m1_loss_dice_4: 1.353  m1_loss_ce_5: 0.5925  m1_loss_mask_5: 0.2053  m1_loss_dice_5: 1.337  m1_loss_ce_6: 0.5771  m1_loss_mask_6: 0.2084  m1_loss_dice_6: 1.315  m1_loss_ce_7: 0.5968  m1_loss_mask_7: 0.2093  m1_loss_dice_7: 1.293  m1_loss_ce_8: 0.5706  m1_loss_mask_8: 0.2085  m1_loss_dice_8: 1.337  m2_loss_ce: 7.244  m2_loss_mask: 0.5343  m2_loss_dice: 2.515  m2_loss_ce_0: 7.469  m2_loss_mask_0: 0.7725  m2_loss_dice_0: 3.512  m2_loss_ce_1: 7.278  m2_loss_mask_1: 0.634  m2_loss_dice_1: 2.981  m2_loss_ce_2: 7.267  m2_loss_mask_2: 0.5707  m2_loss_dice_2: 2.838  m2_loss_ce_3: 7.397  m2_loss_mask_3: 0.5588  m2_loss_dice_3: 2.635  m2_loss_ce_4: 7.487  m2_loss_mask_4: 0.5506  m2_loss_dice_4: 2.635  m2_loss_ce_5: 7.474  m2_loss_mask_5: 0.5466  m2_loss_dice_5: 2.669  m2_loss_ce_6: 7.371  m2_loss_mask_6: 0.5428  m2_loss_dice_6: 2.607  m2_loss_ce_7: 7.335  m2_loss_mask_7: 0.5404  m2_loss_dice_7: 2.612  m2_loss_ce_8: 7.285  m2_loss_mask_8: 0.5488  m2_loss_dice_8: 2.593    time: 1.4033  last_time: 1.3548  data_time: 0.0468  last_data_time: 0.0402   lr: 0.0001  max_mem: 35069M
[10/06 21:28:22] d2.utils.events INFO:  eta: 0:16:46  iter: 279  total_loss: 129.2  m1_loss_ce: 0.5954  m1_loss_mask: 0.2043  m1_loss_dice: 1.296  m1_loss_ce_0: 0.7055  m1_loss_mask_0: 0.2423  m1_loss_dice_0: 1.566  m1_loss_ce_1: 0.7657  m1_loss_mask_1: 0.2365  m1_loss_dice_1: 1.429  m1_loss_ce_2: 0.6877  m1_loss_mask_2: 0.2191  m1_loss_dice_2: 1.386  m1_loss_ce_3: 0.6708  m1_loss_mask_3: 0.2145  m1_loss_dice_3: 1.319  m1_loss_ce_4: 0.6759  m1_loss_mask_4: 0.2049  m1_loss_dice_4: 1.363  m1_loss_ce_5: 0.6383  m1_loss_mask_5: 0.2076  m1_loss_dice_5: 1.309  m1_loss_ce_6: 0.6308  m1_loss_mask_6: 0.2022  m1_loss_dice_6: 1.294  m1_loss_ce_7: 0.6161  m1_loss_mask_7: 0.2108  m1_loss_dice_7: 1.267  m1_loss_ce_8: 0.6325  m1_loss_mask_8: 0.2077  m1_loss_dice_8: 1.315  m2_loss_ce: 7.198  m2_loss_mask: 0.5477  m2_loss_dice: 2.504  m2_loss_ce_0: 7.452  m2_loss_mask_0: 0.7809  m2_loss_dice_0: 3.512  m2_loss_ce_1: 7.231  m2_loss_mask_1: 0.6508  m2_loss_dice_1: 2.963  m2_loss_ce_2: 7.229  m2_loss_mask_2: 0.5962  m2_loss_dice_2: 2.819  m2_loss_ce_3: 7.361  m2_loss_mask_3: 0.5727  m2_loss_dice_3: 2.633  m2_loss_ce_4: 7.419  m2_loss_mask_4: 0.568  m2_loss_dice_4: 2.641  m2_loss_ce_5: 7.402  m2_loss_mask_5: 0.5637  m2_loss_dice_5: 2.627  m2_loss_ce_6: 7.318  m2_loss_mask_6: 0.5497  m2_loss_dice_6: 2.561  m2_loss_ce_7: 7.27  m2_loss_mask_7: 0.5631  m2_loss_dice_7: 2.558  m2_loss_ce_8: 7.229  m2_loss_mask_8: 0.5609  m2_loss_dice_8: 2.566    time: 1.4058  last_time: 1.5022  data_time: 0.0673  last_data_time: 0.0504   lr: 0.0001  max_mem: 35069M
[10/06 21:28:52] d2.utils.events INFO:  eta: 0:16:22  iter: 299  total_loss: 128.3  m1_loss_ce: 0.6183  m1_loss_mask: 0.2113  m1_loss_dice: 1.266  m1_loss_ce_0: 0.6894  m1_loss_mask_0: 0.2456  m1_loss_dice_0: 1.573  m1_loss_ce_1: 0.803  m1_loss_mask_1: 0.2231  m1_loss_dice_1: 1.427  m1_loss_ce_2: 0.7145  m1_loss_mask_2: 0.2069  m1_loss_dice_2: 1.369  m1_loss_ce_3: 0.6783  m1_loss_mask_3: 0.2029  m1_loss_dice_3: 1.308  m1_loss_ce_4: 0.636  m1_loss_mask_4: 0.2084  m1_loss_dice_4: 1.31  m1_loss_ce_5: 0.6375  m1_loss_mask_5: 0.2069  m1_loss_dice_5: 1.296  m1_loss_ce_6: 0.6339  m1_loss_mask_6: 0.2104  m1_loss_dice_6: 1.279  m1_loss_ce_7: 0.6316  m1_loss_mask_7: 0.2073  m1_loss_dice_7: 1.265  m1_loss_ce_8: 0.6272  m1_loss_mask_8: 0.208  m1_loss_dice_8: 1.277  m2_loss_ce: 7.256  m2_loss_mask: 0.5311  m2_loss_dice: 2.49  m2_loss_ce_0: 7.483  m2_loss_mask_0: 0.7274  m2_loss_dice_0: 3.484  m2_loss_ce_1: 7.26  m2_loss_mask_1: 0.6193  m2_loss_dice_1: 2.96  m2_loss_ce_2: 7.255  m2_loss_mask_2: 0.5614  m2_loss_dice_2: 2.813  m2_loss_ce_3: 7.39  m2_loss_mask_3: 0.5439  m2_loss_dice_3: 2.603  m2_loss_ce_4: 7.47  m2_loss_mask_4: 0.5448  m2_loss_dice_4: 2.645  m2_loss_ce_5: 7.484  m2_loss_mask_5: 0.542  m2_loss_dice_5: 2.661  m2_loss_ce_6: 7.356  m2_loss_mask_6: 0.5335  m2_loss_dice_6: 2.577  m2_loss_ce_7: 7.321  m2_loss_mask_7: 0.5331  m2_loss_dice_7: 2.597  m2_loss_ce_8: 7.28  m2_loss_mask_8: 0.5486  m2_loss_dice_8: 2.555    time: 1.4095  last_time: 1.3125  data_time: 0.0623  last_data_time: 0.0474   lr: 0.0001  max_mem: 35069M
[10/06 21:29:20] d2.utils.events INFO:  eta: 0:15:53  iter: 319  total_loss: 130.6  m1_loss_ce: 0.6667  m1_loss_mask: 0.1896  m1_loss_dice: 1.371  m1_loss_ce_0: 0.773  m1_loss_mask_0: 0.222  m1_loss_dice_0: 1.649  m1_loss_ce_1: 0.8685  m1_loss_mask_1: 0.206  m1_loss_dice_1: 1.505  m1_loss_ce_2: 0.7723  m1_loss_mask_2: 0.1949  m1_loss_dice_2: 1.453  m1_loss_ce_3: 0.7329  m1_loss_mask_3: 0.194  m1_loss_dice_3: 1.405  m1_loss_ce_4: 0.7211  m1_loss_mask_4: 0.1916  m1_loss_dice_4: 1.407  m1_loss_ce_5: 0.6869  m1_loss_mask_5: 0.1918  m1_loss_dice_5: 1.392  m1_loss_ce_6: 0.6831  m1_loss_mask_6: 0.1939  m1_loss_dice_6: 1.349  m1_loss_ce_7: 0.684  m1_loss_mask_7: 0.1916  m1_loss_dice_7: 1.391  m1_loss_ce_8: 0.6727  m1_loss_mask_8: 0.191  m1_loss_dice_8: 1.363  m2_loss_ce: 7.221  m2_loss_mask: 0.4931  m2_loss_dice: 2.569  m2_loss_ce_0: 7.444  m2_loss_mask_0: 0.6824  m2_loss_dice_0: 3.492  m2_loss_ce_1: 7.278  m2_loss_mask_1: 0.5831  m2_loss_dice_1: 2.936  m2_loss_ce_2: 7.26  m2_loss_mask_2: 0.5275  m2_loss_dice_2: 2.877  m2_loss_ce_3: 7.363  m2_loss_mask_3: 0.5124  m2_loss_dice_3: 2.678  m2_loss_ce_4: 7.435  m2_loss_mask_4: 0.5113  m2_loss_dice_4: 2.668  m2_loss_ce_5: 7.431  m2_loss_mask_5: 0.5041  m2_loss_dice_5: 2.667  m2_loss_ce_6: 7.335  m2_loss_mask_6: 0.4908  m2_loss_dice_6: 2.631  m2_loss_ce_7: 7.291  m2_loss_mask_7: 0.493  m2_loss_dice_7: 2.618  m2_loss_ce_8: 7.254  m2_loss_mask_8: 0.5039  m2_loss_dice_8: 2.623    time: 1.4096  last_time: 1.4553  data_time: 0.0592  last_data_time: 0.0494   lr: 0.0001  max_mem: 35069M
[10/06 21:29:48] d2.utils.events INFO:  eta: 0:15:24  iter: 339  total_loss: 130.2  m1_loss_ce: 0.6464  m1_loss_mask: 0.2049  m1_loss_dice: 1.326  m1_loss_ce_0: 0.7311  m1_loss_mask_0: 0.2505  m1_loss_dice_0: 1.585  m1_loss_ce_1: 0.8063  m1_loss_mask_1: 0.2278  m1_loss_dice_1: 1.5  m1_loss_ce_2: 0.7411  m1_loss_mask_2: 0.216  m1_loss_dice_2: 1.439  m1_loss_ce_3: 0.6944  m1_loss_mask_3: 0.2154  m1_loss_dice_3: 1.352  m1_loss_ce_4: 0.6926  m1_loss_mask_4: 0.2084  m1_loss_dice_4: 1.334  m1_loss_ce_5: 0.6492  m1_loss_mask_5: 0.205  m1_loss_dice_5: 1.358  m1_loss_ce_6: 0.6581  m1_loss_mask_6: 0.2037  m1_loss_dice_6: 1.327  m1_loss_ce_7: 0.6478  m1_loss_mask_7: 0.204  m1_loss_dice_7: 1.336  m1_loss_ce_8: 0.681  m1_loss_mask_8: 0.2073  m1_loss_dice_8: 1.339  m2_loss_ce: 7.231  m2_loss_mask: 0.5664  m2_loss_dice: 2.535  m2_loss_ce_0: 7.52  m2_loss_mask_0: 0.7723  m2_loss_dice_0: 3.479  m2_loss_ce_1: 7.286  m2_loss_mask_1: 0.664  m2_loss_dice_1: 2.928  m2_loss_ce_2: 7.259  m2_loss_mask_2: 0.6083  m2_loss_dice_2: 2.819  m2_loss_ce_3: 7.38  m2_loss_mask_3: 0.5947  m2_loss_dice_3: 2.632  m2_loss_ce_4: 7.479  m2_loss_mask_4: 0.5755  m2_loss_dice_4: 2.61  m2_loss_ce_5: 7.452  m2_loss_mask_5: 0.5735  m2_loss_dice_5: 2.634  m2_loss_ce_6: 7.335  m2_loss_mask_6: 0.5572  m2_loss_dice_6: 2.595  m2_loss_ce_7: 7.344  m2_loss_mask_7: 0.5653  m2_loss_dice_7: 2.582  m2_loss_ce_8: 7.263  m2_loss_mask_8: 0.5697  m2_loss_dice_8: 2.557    time: 1.4085  last_time: 1.4283  data_time: 0.0542  last_data_time: 0.0442   lr: 0.0001  max_mem: 35069M
[10/06 21:30:17] d2.utils.events INFO:  eta: 0:14:57  iter: 359  total_loss: 130.9  m1_loss_ce: 0.6344  m1_loss_mask: 0.205  m1_loss_dice: 1.335  m1_loss_ce_0: 0.7714  m1_loss_mask_0: 0.2601  m1_loss_dice_0: 1.63  m1_loss_ce_1: 0.7553  m1_loss_mask_1: 0.2376  m1_loss_dice_1: 1.523  m1_loss_ce_2: 0.7402  m1_loss_mask_2: 0.2263  m1_loss_dice_2: 1.466  m1_loss_ce_3: 0.6938  m1_loss_mask_3: 0.2147  m1_loss_dice_3: 1.402  m1_loss_ce_4: 0.7042  m1_loss_mask_4: 0.2078  m1_loss_dice_4: 1.376  m1_loss_ce_5: 0.6816  m1_loss_mask_5: 0.2059  m1_loss_dice_5: 1.372  m1_loss_ce_6: 0.6824  m1_loss_mask_6: 0.2068  m1_loss_dice_6: 1.319  m1_loss_ce_7: 0.622  m1_loss_mask_7: 0.206  m1_loss_dice_7: 1.349  m1_loss_ce_8: 0.6505  m1_loss_mask_8: 0.2061  m1_loss_dice_8: 1.384  m2_loss_ce: 7.303  m2_loss_mask: 0.533  m2_loss_dice: 2.533  m2_loss_ce_0: 7.486  m2_loss_mask_0: 0.7608  m2_loss_dice_0: 3.577  m2_loss_ce_1: 7.297  m2_loss_mask_1: 0.6294  m2_loss_dice_1: 2.967  m2_loss_ce_2: 7.276  m2_loss_mask_2: 0.5815  m2_loss_dice_2: 2.898  m2_loss_ce_3: 7.426  m2_loss_mask_3: 0.5782  m2_loss_dice_3: 2.702  m2_loss_ce_4: 7.487  m2_loss_mask_4: 0.5593  m2_loss_dice_4: 2.657  m2_loss_ce_5: 7.502  m2_loss_mask_5: 0.5543  m2_loss_dice_5: 2.698  m2_loss_ce_6: 7.404  m2_loss_mask_6: 0.5409  m2_loss_dice_6: 2.646  m2_loss_ce_7: 7.347  m2_loss_mask_7: 0.543  m2_loss_dice_7: 2.627  m2_loss_ce_8: 7.303  m2_loss_mask_8: 0.5502  m2_loss_dice_8: 2.612    time: 1.4104  last_time: 1.4888  data_time: 0.0602  last_data_time: 0.0418   lr: 0.0001  max_mem: 35069M
[10/06 21:30:46] d2.utils.events INFO:  eta: 0:14:30  iter: 379  total_loss: 128.9  m1_loss_ce: 0.5882  m1_loss_mask: 0.2008  m1_loss_dice: 1.321  m1_loss_ce_0: 0.6534  m1_loss_mask_0: 0.2418  m1_loss_dice_0: 1.654  m1_loss_ce_1: 0.7387  m1_loss_mask_1: 0.2296  m1_loss_dice_1: 1.538  m1_loss_ce_2: 0.6809  m1_loss_mask_2: 0.2103  m1_loss_dice_2: 1.45  m1_loss_ce_3: 0.6814  m1_loss_mask_3: 0.2101  m1_loss_dice_3: 1.377  m1_loss_ce_4: 0.6221  m1_loss_mask_4: 0.2009  m1_loss_dice_4: 1.368  m1_loss_ce_5: 0.6142  m1_loss_mask_5: 0.2011  m1_loss_dice_5: 1.374  m1_loss_ce_6: 0.6028  m1_loss_mask_6: 0.2037  m1_loss_dice_6: 1.341  m1_loss_ce_7: 0.6137  m1_loss_mask_7: 0.2004  m1_loss_dice_7: 1.335  m1_loss_ce_8: 0.6026  m1_loss_mask_8: 0.2009  m1_loss_dice_8: 1.335  m2_loss_ce: 7.24  m2_loss_mask: 0.5344  m2_loss_dice: 2.535  m2_loss_ce_0: 7.471  m2_loss_mask_0: 0.7323  m2_loss_dice_0: 3.495  m2_loss_ce_1: 7.244  m2_loss_mask_1: 0.6191  m2_loss_dice_1: 2.944  m2_loss_ce_2: 7.255  m2_loss_mask_2: 0.554  m2_loss_dice_2: 2.828  m2_loss_ce_3: 7.349  m2_loss_mask_3: 0.547  m2_loss_dice_3: 2.646  m2_loss_ce_4: 7.474  m2_loss_mask_4: 0.5438  m2_loss_dice_4: 2.672  m2_loss_ce_5: 7.453  m2_loss_mask_5: 0.5342  m2_loss_dice_5: 2.643  m2_loss_ce_6: 7.346  m2_loss_mask_6: 0.5338  m2_loss_dice_6: 2.625  m2_loss_ce_7: 7.343  m2_loss_mask_7: 0.5337  m2_loss_dice_7: 2.6  m2_loss_ce_8: 7.275  m2_loss_mask_8: 0.5418  m2_loss_dice_8: 2.608    time: 1.4134  last_time: 1.4433  data_time: 0.0555  last_data_time: 0.0371   lr: 0.0001  max_mem: 35069M
[10/06 21:31:15] d2.utils.events INFO:  eta: 0:14:04  iter: 399  total_loss: 128.4  m1_loss_ce: 0.5746  m1_loss_mask: 0.187  m1_loss_dice: 1.263  m1_loss_ce_0: 0.713  m1_loss_mask_0: 0.2255  m1_loss_dice_0: 1.519  m1_loss_ce_1: 0.7712  m1_loss_mask_1: 0.2056  m1_loss_dice_1: 1.375  m1_loss_ce_2: 0.7094  m1_loss_mask_2: 0.1913  m1_loss_dice_2: 1.339  m1_loss_ce_3: 0.6427  m1_loss_mask_3: 0.1925  m1_loss_dice_3: 1.294  m1_loss_ce_4: 0.6537  m1_loss_mask_4: 0.1901  m1_loss_dice_4: 1.283  m1_loss_ce_5: 0.5936  m1_loss_mask_5: 0.1878  m1_loss_dice_5: 1.268  m1_loss_ce_6: 0.5864  m1_loss_mask_6: 0.1877  m1_loss_dice_6: 1.308  m1_loss_ce_7: 0.6043  m1_loss_mask_7: 0.1884  m1_loss_dice_7: 1.282  m1_loss_ce_8: 0.5686  m1_loss_mask_8: 0.1872  m1_loss_dice_8: 1.301  m2_loss_ce: 7.269  m2_loss_mask: 0.5171  m2_loss_dice: 2.509  m2_loss_ce_0: 7.474  m2_loss_mask_0: 0.727  m2_loss_dice_0: 3.529  m2_loss_ce_1: 7.298  m2_loss_mask_1: 0.6082  m2_loss_dice_1: 2.951  m2_loss_ce_2: 7.277  m2_loss_mask_2: 0.5569  m2_loss_dice_2: 2.868  m2_loss_ce_3: 7.391  m2_loss_mask_3: 0.5378  m2_loss_dice_3: 2.639  m2_loss_ce_4: 7.459  m2_loss_mask_4: 0.5268  m2_loss_dice_4: 2.659  m2_loss_ce_5: 7.473  m2_loss_mask_5: 0.5343  m2_loss_dice_5: 2.661  m2_loss_ce_6: 7.356  m2_loss_mask_6: 0.5142  m2_loss_dice_6: 2.581  m2_loss_ce_7: 7.355  m2_loss_mask_7: 0.5223  m2_loss_dice_7: 2.586  m2_loss_ce_8: 7.286  m2_loss_mask_8: 0.5187  m2_loss_dice_8: 2.55    time: 1.4134  last_time: 1.3727  data_time: 0.0666  last_data_time: 0.0526   lr: 0.0001  max_mem: 35069M
[10/06 21:31:44] d2.utils.events INFO:  eta: 0:13:37  iter: 419  total_loss: 129.9  m1_loss_ce: 0.61  m1_loss_mask: 0.1897  m1_loss_dice: 1.393  m1_loss_ce_0: 0.6688  m1_loss_mask_0: 0.2387  m1_loss_dice_0: 1.645  m1_loss_ce_1: 0.7273  m1_loss_mask_1: 0.2134  m1_loss_dice_1: 1.502  m1_loss_ce_2: 0.6654  m1_loss_mask_2: 0.201  m1_loss_dice_2: 1.472  m1_loss_ce_3: 0.5978  m1_loss_mask_3: 0.2014  m1_loss_dice_3: 1.402  m1_loss_ce_4: 0.592  m1_loss_mask_4: 0.1978  m1_loss_dice_4: 1.404  m1_loss_ce_5: 0.6003  m1_loss_mask_5: 0.1907  m1_loss_dice_5: 1.385  m1_loss_ce_6: 0.5881  m1_loss_mask_6: 0.1913  m1_loss_dice_6: 1.402  m1_loss_ce_7: 0.5774  m1_loss_mask_7: 0.1909  m1_loss_dice_7: 1.363  m1_loss_ce_8: 0.5894  m1_loss_mask_8: 0.1922  m1_loss_dice_8: 1.359  m2_loss_ce: 7.302  m2_loss_mask: 0.4946  m2_loss_dice: 2.579  m2_loss_ce_0: 7.477  m2_loss_mask_0: 0.6929  m2_loss_dice_0: 3.491  m2_loss_ce_1: 7.305  m2_loss_mask_1: 0.5779  m2_loss_dice_1: 2.992  m2_loss_ce_2: 7.298  m2_loss_mask_2: 0.5173  m2_loss_dice_2: 2.907  m2_loss_ce_3: 7.435  m2_loss_mask_3: 0.5184  m2_loss_dice_3: 2.699  m2_loss_ce_4: 7.48  m2_loss_mask_4: 0.5042  m2_loss_dice_4: 2.677  m2_loss_ce_5: 7.476  m2_loss_mask_5: 0.5043  m2_loss_dice_5: 2.681  m2_loss_ce_6: 7.395  m2_loss_mask_6: 0.4902  m2_loss_dice_6: 2.663  m2_loss_ce_7: 7.356  m2_loss_mask_7: 0.4924  m2_loss_dice_7: 2.669  m2_loss_ce_8: 7.311  m2_loss_mask_8: 0.5001  m2_loss_dice_8: 2.622    time: 1.4148  last_time: 1.3975  data_time: 0.0621  last_data_time: 0.0625   lr: 0.0001  max_mem: 35069M
[10/06 21:32:13] d2.utils.events INFO:  eta: 0:13:10  iter: 439  total_loss: 128.9  m1_loss_ce: 0.6186  m1_loss_mask: 0.1925  m1_loss_dice: 1.351  m1_loss_ce_0: 0.6854  m1_loss_mask_0: 0.2476  m1_loss_dice_0: 1.632  m1_loss_ce_1: 0.7711  m1_loss_mask_1: 0.2182  m1_loss_dice_1: 1.526  m1_loss_ce_2: 0.7317  m1_loss_mask_2: 0.2064  m1_loss_dice_2: 1.447  m1_loss_ce_3: 0.6921  m1_loss_mask_3: 0.2027  m1_loss_dice_3: 1.387  m1_loss_ce_4: 0.6586  m1_loss_mask_4: 0.2023  m1_loss_dice_4: 1.36  m1_loss_ce_5: 0.6376  m1_loss_mask_5: 0.1979  m1_loss_dice_5: 1.376  m1_loss_ce_6: 0.6205  m1_loss_mask_6: 0.2  m1_loss_dice_6: 1.337  m1_loss_ce_7: 0.6269  m1_loss_mask_7: 0.1997  m1_loss_dice_7: 1.331  m1_loss_ce_8: 0.6197  m1_loss_mask_8: 0.2028  m1_loss_dice_8: 1.344  m2_loss_ce: 7.209  m2_loss_mask: 0.5198  m2_loss_dice: 2.482  m2_loss_ce_0: 7.455  m2_loss_mask_0: 0.712  m2_loss_dice_0: 3.472  m2_loss_ce_1: 7.221  m2_loss_mask_1: 0.611  m2_loss_dice_1: 2.91  m2_loss_ce_2: 7.228  m2_loss_mask_2: 0.5507  m2_loss_dice_2: 2.826  m2_loss_ce_3: 7.334  m2_loss_mask_3: 0.5483  m2_loss_dice_3: 2.632  m2_loss_ce_4: 7.417  m2_loss_mask_4: 0.536  m2_loss_dice_4: 2.638  m2_loss_ce_5: 7.397  m2_loss_mask_5: 0.5294  m2_loss_dice_5: 2.654  m2_loss_ce_6: 7.319  m2_loss_mask_6: 0.5174  m2_loss_dice_6: 2.577  m2_loss_ce_7: 7.29  m2_loss_mask_7: 0.5117  m2_loss_dice_7: 2.566  m2_loss_ce_8: 7.226  m2_loss_mask_8: 0.5278  m2_loss_dice_8: 2.51    time: 1.4169  last_time: 1.5897  data_time: 0.0633  last_data_time: 0.0892   lr: 0.0001  max_mem: 35069M
[10/06 21:32:42] d2.utils.events INFO:  eta: 0:12:43  iter: 459  total_loss: 128.9  m1_loss_ce: 0.5366  m1_loss_mask: 0.1951  m1_loss_dice: 1.343  m1_loss_ce_0: 0.6518  m1_loss_mask_0: 0.2264  m1_loss_dice_0: 1.605  m1_loss_ce_1: 0.7084  m1_loss_mask_1: 0.2139  m1_loss_dice_1: 1.478  m1_loss_ce_2: 0.663  m1_loss_mask_2: 0.1948  m1_loss_dice_2: 1.451  m1_loss_ce_3: 0.5903  m1_loss_mask_3: 0.2003  m1_loss_dice_3: 1.374  m1_loss_ce_4: 0.5889  m1_loss_mask_4: 0.197  m1_loss_dice_4: 1.363  m1_loss_ce_5: 0.5974  m1_loss_mask_5: 0.1948  m1_loss_dice_5: 1.347  m1_loss_ce_6: 0.5255  m1_loss_mask_6: 0.1948  m1_loss_dice_6: 1.366  m1_loss_ce_7: 0.5474  m1_loss_mask_7: 0.1964  m1_loss_dice_7: 1.358  m1_loss_ce_8: 0.5343  m1_loss_mask_8: 0.1918  m1_loss_dice_8: 1.337  m2_loss_ce: 7.269  m2_loss_mask: 0.4926  m2_loss_dice: 2.519  m2_loss_ce_0: 7.454  m2_loss_mask_0: 0.6996  m2_loss_dice_0: 3.463  m2_loss_ce_1: 7.27  m2_loss_mask_1: 0.5595  m2_loss_dice_1: 2.938  m2_loss_ce_2: 7.246  m2_loss_mask_2: 0.529  m2_loss_dice_2: 2.854  m2_loss_ce_3: 7.378  m2_loss_mask_3: 0.5127  m2_loss_dice_3: 2.675  m2_loss_ce_4: 7.464  m2_loss_mask_4: 0.5117  m2_loss_dice_4: 2.656  m2_loss_ce_5: 7.44  m2_loss_mask_5: 0.5115  m2_loss_dice_5: 2.661  m2_loss_ce_6: 7.336  m2_loss_mask_6: 0.5046  m2_loss_dice_6: 2.615  m2_loss_ce_7: 7.317  m2_loss_mask_7: 0.4992  m2_loss_dice_7: 2.631  m2_loss_ce_8: 7.277  m2_loss_mask_8: 0.5063  m2_loss_dice_8: 2.587    time: 1.4184  last_time: 1.3824  data_time: 0.0733  last_data_time: 0.0537   lr: 0.0001  max_mem: 35069M
[10/06 21:33:10] d2.utils.events INFO:  eta: 0:12:16  iter: 479  total_loss: 129.5  m1_loss_ce: 0.594  m1_loss_mask: 0.1851  m1_loss_dice: 1.371  m1_loss_ce_0: 0.6817  m1_loss_mask_0: 0.2237  m1_loss_dice_0: 1.695  m1_loss_ce_1: 0.7666  m1_loss_mask_1: 0.2113  m1_loss_dice_1: 1.514  m1_loss_ce_2: 0.7317  m1_loss_mask_2: 0.202  m1_loss_dice_2: 1.478  m1_loss_ce_3: 0.672  m1_loss_mask_3: 0.1976  m1_loss_dice_3: 1.425  m1_loss_ce_4: 0.6285  m1_loss_mask_4: 0.1973  m1_loss_dice_4: 1.396  m1_loss_ce_5: 0.633  m1_loss_mask_5: 0.1936  m1_loss_dice_5: 1.368  m1_loss_ce_6: 0.6133  m1_loss_mask_6: 0.1888  m1_loss_dice_6: 1.404  m1_loss_ce_7: 0.5788  m1_loss_mask_7: 0.1893  m1_loss_dice_7: 1.374  m1_loss_ce_8: 0.6047  m1_loss_mask_8: 0.1865  m1_loss_dice_8: 1.388  m2_loss_ce: 7.274  m2_loss_mask: 0.5011  m2_loss_dice: 2.546  m2_loss_ce_0: 7.479  m2_loss_mask_0: 0.6908  m2_loss_dice_0: 3.431  m2_loss_ce_1: 7.296  m2_loss_mask_1: 0.5928  m2_loss_dice_1: 2.924  m2_loss_ce_2: 7.279  m2_loss_mask_2: 0.5265  m2_loss_dice_2: 2.849  m2_loss_ce_3: 7.392  m2_loss_mask_3: 0.5107  m2_loss_dice_3: 2.666  m2_loss_ce_4: 7.494  m2_loss_mask_4: 0.5051  m2_loss_dice_4: 2.632  m2_loss_ce_5: 7.478  m2_loss_mask_5: 0.5013  m2_loss_dice_5: 2.68  m2_loss_ce_6: 7.399  m2_loss_mask_6: 0.4996  m2_loss_dice_6: 2.631  m2_loss_ce_7: 7.355  m2_loss_mask_7: 0.4981  m2_loss_dice_7: 2.632  m2_loss_ce_8: 7.292  m2_loss_mask_8: 0.5063  m2_loss_dice_8: 2.616    time: 1.4185  last_time: 1.3500  data_time: 0.0637  last_data_time: 0.0375   lr: 0.0001  max_mem: 35069M
[10/06 21:33:39] d2.utils.events INFO:  eta: 0:11:48  iter: 499  total_loss: 129  m1_loss_ce: 0.5524  m1_loss_mask: 0.1947  m1_loss_dice: 1.26  m1_loss_ce_0: 0.6446  m1_loss_mask_0: 0.2412  m1_loss_dice_0: 1.532  m1_loss_ce_1: 0.7253  m1_loss_mask_1: 0.219  m1_loss_dice_1: 1.436  m1_loss_ce_2: 0.6861  m1_loss_mask_2: 0.2038  m1_loss_dice_2: 1.37  m1_loss_ce_3: 0.6276  m1_loss_mask_3: 0.2012  m1_loss_dice_3: 1.317  m1_loss_ce_4: 0.5611  m1_loss_mask_4: 0.2022  m1_loss_dice_4: 1.317  m1_loss_ce_5: 0.5749  m1_loss_mask_5: 0.1942  m1_loss_dice_5: 1.289  m1_loss_ce_6: 0.5642  m1_loss_mask_6: 0.1966  m1_loss_dice_6: 1.273  m1_loss_ce_7: 0.5808  m1_loss_mask_7: 0.1956  m1_loss_dice_7: 1.26  m1_loss_ce_8: 0.5499  m1_loss_mask_8: 0.1953  m1_loss_dice_8: 1.284  m2_loss_ce: 7.253  m2_loss_mask: 0.5517  m2_loss_dice: 2.541  m2_loss_ce_0: 7.509  m2_loss_mask_0: 0.7709  m2_loss_dice_0: 3.518  m2_loss_ce_1: 7.302  m2_loss_mask_1: 0.6323  m2_loss_dice_1: 2.975  m2_loss_ce_2: 7.277  m2_loss_mask_2: 0.5823  m2_loss_dice_2: 2.874  m2_loss_ce_3: 7.408  m2_loss_mask_3: 0.574  m2_loss_dice_3: 2.678  m2_loss_ce_4: 7.468  m2_loss_mask_4: 0.5665  m2_loss_dice_4: 2.669  m2_loss_ce_5: 7.479  m2_loss_mask_5: 0.566  m2_loss_dice_5: 2.687  m2_loss_ce_6: 7.371  m2_loss_mask_6: 0.5545  m2_loss_dice_6: 2.64  m2_loss_ce_7: 7.346  m2_loss_mask_7: 0.5605  m2_loss_dice_7: 2.65  m2_loss_ce_8: 7.291  m2_loss_mask_8: 0.5623  m2_loss_dice_8: 2.597    time: 1.4192  last_time: 1.5105  data_time: 0.0497  last_data_time: 0.0839   lr: 0.0001  max_mem: 35069M
[10/06 21:34:09] d2.utils.events INFO:  eta: 0:11:20  iter: 519  total_loss: 127.9  m1_loss_ce: 0.5545  m1_loss_mask: 0.1903  m1_loss_dice: 1.3  m1_loss_ce_0: 0.6375  m1_loss_mask_0: 0.2232  m1_loss_dice_0: 1.563  m1_loss_ce_1: 0.6983  m1_loss_mask_1: 0.2157  m1_loss_dice_1: 1.444  m1_loss_ce_2: 0.6687  m1_loss_mask_2: 0.2032  m1_loss_dice_2: 1.376  m1_loss_ce_3: 0.5826  m1_loss_mask_3: 0.1939  m1_loss_dice_3: 1.34  m1_loss_ce_4: 0.5696  m1_loss_mask_4: 0.197  m1_loss_dice_4: 1.331  m1_loss_ce_5: 0.5431  m1_loss_mask_5: 0.1906  m1_loss_dice_5: 1.341  m1_loss_ce_6: 0.5729  m1_loss_mask_6: 0.1928  m1_loss_dice_6: 1.306  m1_loss_ce_7: 0.5369  m1_loss_mask_7: 0.1944  m1_loss_dice_7: 1.284  m1_loss_ce_8: 0.5371  m1_loss_mask_8: 0.1926  m1_loss_dice_8: 1.29  m2_loss_ce: 7.264  m2_loss_mask: 0.5252  m2_loss_dice: 2.52  m2_loss_ce_0: 7.512  m2_loss_mask_0: 0.7574  m2_loss_dice_0: 3.533  m2_loss_ce_1: 7.29  m2_loss_mask_1: 0.6369  m2_loss_dice_1: 2.953  m2_loss_ce_2: 7.281  m2_loss_mask_2: 0.5674  m2_loss_dice_2: 2.868  m2_loss_ce_3: 7.4  m2_loss_mask_3: 0.5627  m2_loss_dice_3: 2.651  m2_loss_ce_4: 7.457  m2_loss_mask_4: 0.5524  m2_loss_dice_4: 2.656  m2_loss_ce_5: 7.455  m2_loss_mask_5: 0.5486  m2_loss_dice_5: 2.666  m2_loss_ce_6: 7.359  m2_loss_mask_6: 0.5329  m2_loss_dice_6: 2.602  m2_loss_ce_7: 7.36  m2_loss_mask_7: 0.5382  m2_loss_dice_7: 2.613  m2_loss_ce_8: 7.307  m2_loss_mask_8: 0.5463  m2_loss_dice_8: 2.563    time: 1.4210  last_time: 1.4023  data_time: 0.0600  last_data_time: 0.0501   lr: 0.0001  max_mem: 35069M
[10/06 21:34:38] d2.utils.events INFO:  eta: 0:10:52  iter: 539  total_loss: 130.1  m1_loss_ce: 0.6552  m1_loss_mask: 0.213  m1_loss_dice: 1.335  m1_loss_ce_0: 0.7183  m1_loss_mask_0: 0.2507  m1_loss_dice_0: 1.604  m1_loss_ce_1: 0.802  m1_loss_mask_1: 0.2319  m1_loss_dice_1: 1.472  m1_loss_ce_2: 0.7594  m1_loss_mask_2: 0.225  m1_loss_dice_2: 1.403  m1_loss_ce_3: 0.6855  m1_loss_mask_3: 0.2176  m1_loss_dice_3: 1.336  m1_loss_ce_4: 0.6714  m1_loss_mask_4: 0.2133  m1_loss_dice_4: 1.325  m1_loss_ce_5: 0.6422  m1_loss_mask_5: 0.2134  m1_loss_dice_5: 1.344  m1_loss_ce_6: 0.6753  m1_loss_mask_6: 0.2126  m1_loss_dice_6: 1.313  m1_loss_ce_7: 0.6382  m1_loss_mask_7: 0.21  m1_loss_dice_7: 1.321  m1_loss_ce_8: 0.67  m1_loss_mask_8: 0.2114  m1_loss_dice_8: 1.322  m2_loss_ce: 7.216  m2_loss_mask: 0.5275  m2_loss_dice: 2.525  m2_loss_ce_0: 7.482  m2_loss_mask_0: 0.7306  m2_loss_dice_0: 3.478  m2_loss_ce_1: 7.283  m2_loss_mask_1: 0.6024  m2_loss_dice_1: 2.941  m2_loss_ce_2: 7.256  m2_loss_mask_2: 0.5464  m2_loss_dice_2: 2.842  m2_loss_ce_3: 7.392  m2_loss_mask_3: 0.5371  m2_loss_dice_3: 2.648  m2_loss_ce_4: 7.456  m2_loss_mask_4: 0.5327  m2_loss_dice_4: 2.662  m2_loss_ce_5: 7.443  m2_loss_mask_5: 0.5276  m2_loss_dice_5: 2.692  m2_loss_ce_6: 7.345  m2_loss_mask_6: 0.519  m2_loss_dice_6: 2.641  m2_loss_ce_7: 7.315  m2_loss_mask_7: 0.5165  m2_loss_dice_7: 2.632  m2_loss_ce_8: 7.271  m2_loss_mask_8: 0.5232  m2_loss_dice_8: 2.575    time: 1.4215  last_time: 1.3635  data_time: 0.0577  last_data_time: 0.0407   lr: 0.0001  max_mem: 35069M
[10/06 21:35:06] d2.utils.events INFO:  eta: 0:10:23  iter: 559  total_loss: 128.9  m1_loss_ce: 0.5554  m1_loss_mask: 0.171  m1_loss_dice: 1.312  m1_loss_ce_0: 0.6608  m1_loss_mask_0: 0.2207  m1_loss_dice_0: 1.691  m1_loss_ce_1: 0.7548  m1_loss_mask_1: 0.1879  m1_loss_dice_1: 1.511  m1_loss_ce_2: 0.7391  m1_loss_mask_2: 0.1786  m1_loss_dice_2: 1.432  m1_loss_ce_3: 0.6428  m1_loss_mask_3: 0.1786  m1_loss_dice_3: 1.358  m1_loss_ce_4: 0.61  m1_loss_mask_4: 0.1734  m1_loss_dice_4: 1.365  m1_loss_ce_5: 0.5881  m1_loss_mask_5: 0.169  m1_loss_dice_5: 1.365  m1_loss_ce_6: 0.5635  m1_loss_mask_6: 0.1723  m1_loss_dice_6: 1.324  m1_loss_ce_7: 0.574  m1_loss_mask_7: 0.1742  m1_loss_dice_7: 1.376  m1_loss_ce_8: 0.5595  m1_loss_mask_8: 0.1715  m1_loss_dice_8: 1.316  m2_loss_ce: 7.277  m2_loss_mask: 0.5205  m2_loss_dice: 2.492  m2_loss_ce_0: 7.473  m2_loss_mask_0: 0.7293  m2_loss_dice_0: 3.542  m2_loss_ce_1: 7.305  m2_loss_mask_1: 0.5905  m2_loss_dice_1: 2.917  m2_loss_ce_2: 7.288  m2_loss_mask_2: 0.539  m2_loss_dice_2: 2.82  m2_loss_ce_3: 7.416  m2_loss_mask_3: 0.548  m2_loss_dice_3: 2.591  m2_loss_ce_4: 7.473  m2_loss_mask_4: 0.5323  m2_loss_dice_4: 2.614  m2_loss_ce_5: 7.467  m2_loss_mask_5: 0.536  m2_loss_dice_5: 2.64  m2_loss_ce_6: 7.395  m2_loss_mask_6: 0.5186  m2_loss_dice_6: 2.579  m2_loss_ce_7: 7.35  m2_loss_mask_7: 0.5226  m2_loss_dice_7: 2.55  m2_loss_ce_8: 7.301  m2_loss_mask_8: 0.5283  m2_loss_dice_8: 2.532    time: 1.4217  last_time: 1.5553  data_time: 0.0825  last_data_time: 0.0820   lr: 0.0001  max_mem: 35069M
[10/06 21:35:35] d2.utils.events INFO:  eta: 0:09:55  iter: 579  total_loss: 128  m1_loss_ce: 0.5582  m1_loss_mask: 0.1918  m1_loss_dice: 1.27  m1_loss_ce_0: 0.6881  m1_loss_mask_0: 0.2319  m1_loss_dice_0: 1.549  m1_loss_ce_1: 0.7471  m1_loss_mask_1: 0.2071  m1_loss_dice_1: 1.411  m1_loss_ce_2: 0.6539  m1_loss_mask_2: 0.2041  m1_loss_dice_2: 1.377  m1_loss_ce_3: 0.6481  m1_loss_mask_3: 0.2032  m1_loss_dice_3: 1.291  m1_loss_ce_4: 0.6011  m1_loss_mask_4: 0.1973  m1_loss_dice_4: 1.297  m1_loss_ce_5: 0.5844  m1_loss_mask_5: 0.1949  m1_loss_dice_5: 1.288  m1_loss_ce_6: 0.5886  m1_loss_mask_6: 0.1948  m1_loss_dice_6: 1.29  m1_loss_ce_7: 0.5622  m1_loss_mask_7: 0.1928  m1_loss_dice_7: 1.284  m1_loss_ce_8: 0.5686  m1_loss_mask_8: 0.1933  m1_loss_dice_8: 1.277  m2_loss_ce: 7.213  m2_loss_mask: 0.5421  m2_loss_dice: 2.487  m2_loss_ce_0: 7.464  m2_loss_mask_0: 0.769  m2_loss_dice_0: 3.467  m2_loss_ce_1: 7.238  m2_loss_mask_1: 0.6362  m2_loss_dice_1: 2.945  m2_loss_ce_2: 7.234  m2_loss_mask_2: 0.5746  m2_loss_dice_2: 2.822  m2_loss_ce_3: 7.334  m2_loss_mask_3: 0.5516  m2_loss_dice_3: 2.62  m2_loss_ce_4: 7.432  m2_loss_mask_4: 0.5479  m2_loss_dice_4: 2.645  m2_loss_ce_5: 7.418  m2_loss_mask_5: 0.5495  m2_loss_dice_5: 2.618  m2_loss_ce_6: 7.319  m2_loss_mask_6: 0.537  m2_loss_dice_6: 2.577  m2_loss_ce_7: 7.297  m2_loss_mask_7: 0.5409  m2_loss_dice_7: 2.59  m2_loss_ce_8: 7.238  m2_loss_mask_8: 0.5467  m2_loss_dice_8: 2.565    time: 1.4228  last_time: 1.4430  data_time: 0.0460  last_data_time: 0.0476   lr: 0.0001  max_mem: 35069M
[10/06 21:36:05] d2.utils.events INFO:  eta: 0:09:27  iter: 599  total_loss: 128.5  m1_loss_ce: 0.5439  m1_loss_mask: 0.1893  m1_loss_dice: 1.273  m1_loss_ce_0: 0.6662  m1_loss_mask_0: 0.2273  m1_loss_dice_0: 1.538  m1_loss_ce_1: 0.7265  m1_loss_mask_1: 0.2043  m1_loss_dice_1: 1.439  m1_loss_ce_2: 0.6584  m1_loss_mask_2: 0.1995  m1_loss_dice_2: 1.374  m1_loss_ce_3: 0.5974  m1_loss_mask_3: 0.198  m1_loss_dice_3: 1.319  m1_loss_ce_4: 0.5788  m1_loss_mask_4: 0.198  m1_loss_dice_4: 1.331  m1_loss_ce_5: 0.5788  m1_loss_mask_5: 0.1887  m1_loss_dice_5: 1.324  m1_loss_ce_6: 0.5997  m1_loss_mask_6: 0.1888  m1_loss_dice_6: 1.317  m1_loss_ce_7: 0.5586  m1_loss_mask_7: 0.1898  m1_loss_dice_7: 1.267  m1_loss_ce_8: 0.5713  m1_loss_mask_8: 0.1932  m1_loss_dice_8: 1.29  m2_loss_ce: 7.233  m2_loss_mask: 0.5246  m2_loss_dice: 2.499  m2_loss_ce_0: 7.484  m2_loss_mask_0: 0.7272  m2_loss_dice_0: 3.525  m2_loss_ce_1: 7.252  m2_loss_mask_1: 0.6068  m2_loss_dice_1: 2.929  m2_loss_ce_2: 7.249  m2_loss_mask_2: 0.5636  m2_loss_dice_2: 2.837  m2_loss_ce_3: 7.346  m2_loss_mask_3: 0.5481  m2_loss_dice_3: 2.631  m2_loss_ce_4: 7.435  m2_loss_mask_4: 0.5397  m2_loss_dice_4: 2.654  m2_loss_ce_5: 7.405  m2_loss_mask_5: 0.537  m2_loss_dice_5: 2.633  m2_loss_ce_6: 7.335  m2_loss_mask_6: 0.5162  m2_loss_dice_6: 2.587  m2_loss_ce_7: 7.295  m2_loss_mask_7: 0.5219  m2_loss_dice_7: 2.59  m2_loss_ce_8: 7.236  m2_loss_mask_8: 0.5316  m2_loss_dice_8: 2.567    time: 1.4247  last_time: 1.3025  data_time: 0.0658  last_data_time: 0.0367   lr: 0.0001  max_mem: 35069M
[10/06 21:36:32] d2.utils.events INFO:  eta: 0:08:58  iter: 619  total_loss: 127.5  m1_loss_ce: 0.5746  m1_loss_mask: 0.1884  m1_loss_dice: 1.3  m1_loss_ce_0: 0.6596  m1_loss_mask_0: 0.2266  m1_loss_dice_0: 1.592  m1_loss_ce_1: 0.7396  m1_loss_mask_1: 0.1976  m1_loss_dice_1: 1.372  m1_loss_ce_2: 0.6829  m1_loss_mask_2: 0.1925  m1_loss_dice_2: 1.376  m1_loss_ce_3: 0.6275  m1_loss_mask_3: 0.1933  m1_loss_dice_3: 1.306  m1_loss_ce_4: 0.601  m1_loss_mask_4: 0.1904  m1_loss_dice_4: 1.291  m1_loss_ce_5: 0.6187  m1_loss_mask_5: 0.1864  m1_loss_dice_5: 1.308  m1_loss_ce_6: 0.5936  m1_loss_mask_6: 0.1909  m1_loss_dice_6: 1.292  m1_loss_ce_7: 0.616  m1_loss_mask_7: 0.1892  m1_loss_dice_7: 1.267  m1_loss_ce_8: 0.5981  m1_loss_mask_8: 0.1896  m1_loss_dice_8: 1.297  m2_loss_ce: 7.219  m2_loss_mask: 0.5439  m2_loss_dice: 2.51  m2_loss_ce_0: 7.461  m2_loss_mask_0: 0.7652  m2_loss_dice_0: 3.436  m2_loss_ce_1: 7.281  m2_loss_mask_1: 0.6295  m2_loss_dice_1: 2.923  m2_loss_ce_2: 7.249  m2_loss_mask_2: 0.5713  m2_loss_dice_2: 2.805  m2_loss_ce_3: 7.383  m2_loss_mask_3: 0.5672  m2_loss_dice_3: 2.611  m2_loss_ce_4: 7.443  m2_loss_mask_4: 0.551  m2_loss_dice_4: 2.602  m2_loss_ce_5: 7.407  m2_loss_mask_5: 0.5448  m2_loss_dice_5: 2.603  m2_loss_ce_6: 7.332  m2_loss_mask_6: 0.5357  m2_loss_dice_6: 2.592  m2_loss_ce_7: 7.319  m2_loss_mask_7: 0.5399  m2_loss_dice_7: 2.563  m2_loss_ce_8: 7.276  m2_loss_mask_8: 0.5431  m2_loss_dice_8: 2.551    time: 1.4223  last_time: 1.4543  data_time: 0.0537  last_data_time: 0.0929   lr: 0.0001  max_mem: 35069M
[10/06 21:37:00] d2.utils.events INFO:  eta: 0:08:30  iter: 639  total_loss: 128.2  m1_loss_ce: 0.5799  m1_loss_mask: 0.173  m1_loss_dice: 1.273  m1_loss_ce_0: 0.6656  m1_loss_mask_0: 0.2104  m1_loss_dice_0: 1.497  m1_loss_ce_1: 0.703  m1_loss_mask_1: 0.206  m1_loss_dice_1: 1.379  m1_loss_ce_2: 0.6852  m1_loss_mask_2: 0.183  m1_loss_dice_2: 1.308  m1_loss_ce_3: 0.6091  m1_loss_mask_3: 0.1782  m1_loss_dice_3: 1.299  m1_loss_ce_4: 0.5833  m1_loss_mask_4: 0.1788  m1_loss_dice_4: 1.263  m1_loss_ce_5: 0.5604  m1_loss_mask_5: 0.1771  m1_loss_dice_5: 1.305  m1_loss_ce_6: 0.5905  m1_loss_mask_6: 0.1744  m1_loss_dice_6: 1.243  m1_loss_ce_7: 0.5983  m1_loss_mask_7: 0.1746  m1_loss_dice_7: 1.245  m1_loss_ce_8: 0.5901  m1_loss_mask_8: 0.173  m1_loss_dice_8: 1.243  m2_loss_ce: 7.227  m2_loss_mask: 0.5359  m2_loss_dice: 2.527  m2_loss_ce_0: 7.466  m2_loss_mask_0: 0.7597  m2_loss_dice_0: 3.455  m2_loss_ce_1: 7.248  m2_loss_mask_1: 0.6312  m2_loss_dice_1: 2.92  m2_loss_ce_2: 7.242  m2_loss_mask_2: 0.5827  m2_loss_dice_2: 2.799  m2_loss_ce_3: 7.358  m2_loss_mask_3: 0.5571  m2_loss_dice_3: 2.621  m2_loss_ce_4: 7.443  m2_loss_mask_4: 0.5394  m2_loss_dice_4: 2.585  m2_loss_ce_5: 7.419  m2_loss_mask_5: 0.5482  m2_loss_dice_5: 2.609  m2_loss_ce_6: 7.329  m2_loss_mask_6: 0.5359  m2_loss_dice_6: 2.574  m2_loss_ce_7: 7.297  m2_loss_mask_7: 0.5368  m2_loss_dice_7: 2.564  m2_loss_ce_8: 7.246  m2_loss_mask_8: 0.5476  m2_loss_dice_8: 2.561    time: 1.4218  last_time: 1.4552  data_time: 0.0514  last_data_time: 0.0442   lr: 0.0001  max_mem: 35069M
[10/06 21:37:30] d2.utils.events INFO:  eta: 0:08:02  iter: 659  total_loss: 128.9  m1_loss_ce: 0.5839  m1_loss_mask: 0.1863  m1_loss_dice: 1.278  m1_loss_ce_0: 0.6689  m1_loss_mask_0: 0.2319  m1_loss_dice_0: 1.559  m1_loss_ce_1: 0.7502  m1_loss_mask_1: 0.2017  m1_loss_dice_1: 1.446  m1_loss_ce_2: 0.6881  m1_loss_mask_2: 0.195  m1_loss_dice_2: 1.42  m1_loss_ce_3: 0.6387  m1_loss_mask_3: 0.1944  m1_loss_dice_3: 1.311  m1_loss_ce_4: 0.6008  m1_loss_mask_4: 0.1925  m1_loss_dice_4: 1.318  m1_loss_ce_5: 0.6065  m1_loss_mask_5: 0.1902  m1_loss_dice_5: 1.295  m1_loss_ce_6: 0.5737  m1_loss_mask_6: 0.1903  m1_loss_dice_6: 1.309  m1_loss_ce_7: 0.5826  m1_loss_mask_7: 0.1881  m1_loss_dice_7: 1.246  m1_loss_ce_8: 0.5993  m1_loss_mask_8: 0.1874  m1_loss_dice_8: 1.287  m2_loss_ce: 7.349  m2_loss_mask: 0.5167  m2_loss_dice: 2.569  m2_loss_ce_0: 7.524  m2_loss_mask_0: 0.7274  m2_loss_dice_0: 3.542  m2_loss_ce_1: 7.358  m2_loss_mask_1: 0.6089  m2_loss_dice_1: 3.011  m2_loss_ce_2: 7.331  m2_loss_mask_2: 0.5647  m2_loss_dice_2: 2.909  m2_loss_ce_3: 7.483  m2_loss_mask_3: 0.5429  m2_loss_dice_3: 2.705  m2_loss_ce_4: 7.549  m2_loss_mask_4: 0.5376  m2_loss_dice_4: 2.705  m2_loss_ce_5: 7.543  m2_loss_mask_5: 0.5424  m2_loss_dice_5: 2.712  m2_loss_ce_6: 7.435  m2_loss_mask_6: 0.5205  m2_loss_dice_6: 2.655  m2_loss_ce_7: 7.438  m2_loss_mask_7: 0.5197  m2_loss_dice_7: 2.648  m2_loss_ce_8: 7.368  m2_loss_mask_8: 0.526  m2_loss_dice_8: 2.601    time: 1.4228  last_time: 1.3237  data_time: 0.0540  last_data_time: 0.0465   lr: 0.0001  max_mem: 35069M
[10/06 21:37:58] d2.utils.events INFO:  eta: 0:07:33  iter: 679  total_loss: 127.3  m1_loss_ce: 0.5399  m1_loss_mask: 0.1908  m1_loss_dice: 1.234  m1_loss_ce_0: 0.6128  m1_loss_mask_0: 0.2344  m1_loss_dice_0: 1.495  m1_loss_ce_1: 0.6667  m1_loss_mask_1: 0.2113  m1_loss_dice_1: 1.407  m1_loss_ce_2: 0.6589  m1_loss_mask_2: 0.1918  m1_loss_dice_2: 1.328  m1_loss_ce_3: 0.6119  m1_loss_mask_3: 0.1949  m1_loss_dice_3: 1.213  m1_loss_ce_4: 0.5628  m1_loss_mask_4: 0.1941  m1_loss_dice_4: 1.261  m1_loss_ce_5: 0.563  m1_loss_mask_5: 0.1903  m1_loss_dice_5: 1.235  m1_loss_ce_6: 0.5589  m1_loss_mask_6: 0.1889  m1_loss_dice_6: 1.192  m1_loss_ce_7: 0.5561  m1_loss_mask_7: 0.1873  m1_loss_dice_7: 1.22  m1_loss_ce_8: 0.5423  m1_loss_mask_8: 0.1899  m1_loss_dice_8: 1.199  m2_loss_ce: 7.2  m2_loss_mask: 0.5313  m2_loss_dice: 2.531  m2_loss_ce_0: 7.405  m2_loss_mask_0: 0.7586  m2_loss_dice_0: 3.515  m2_loss_ce_1: 7.245  m2_loss_mask_1: 0.6241  m2_loss_dice_1: 2.939  m2_loss_ce_2: 7.225  m2_loss_mask_2: 0.5623  m2_loss_dice_2: 2.815  m2_loss_ce_3: 7.351  m2_loss_mask_3: 0.564  m2_loss_dice_3: 2.649  m2_loss_ce_4: 7.424  m2_loss_mask_4: 0.5501  m2_loss_dice_4: 2.636  m2_loss_ce_5: 7.421  m2_loss_mask_5: 0.5455  m2_loss_dice_5: 2.646  m2_loss_ce_6: 7.332  m2_loss_mask_6: 0.5282  m2_loss_dice_6: 2.573  m2_loss_ce_7: 7.287  m2_loss_mask_7: 0.5354  m2_loss_dice_7: 2.598  m2_loss_ce_8: 7.246  m2_loss_mask_8: 0.5401  m2_loss_dice_8: 2.562    time: 1.4233  last_time: 1.3534  data_time: 0.0522  last_data_time: 0.0382   lr: 0.0001  max_mem: 35069M
[10/06 21:38:26] d2.utils.events INFO:  eta: 0:07:05  iter: 699  total_loss: 127.7  m1_loss_ce: 0.5202  m1_loss_mask: 0.1884  m1_loss_dice: 1.245  m1_loss_ce_0: 0.6379  m1_loss_mask_0: 0.2299  m1_loss_dice_0: 1.49  m1_loss_ce_1: 0.6955  m1_loss_mask_1: 0.2064  m1_loss_dice_1: 1.502  m1_loss_ce_2: 0.6493  m1_loss_mask_2: 0.1934  m1_loss_dice_2: 1.354  m1_loss_ce_3: 0.5913  m1_loss_mask_3: 0.1953  m1_loss_dice_3: 1.268  m1_loss_ce_4: 0.5434  m1_loss_mask_4: 0.1912  m1_loss_dice_4: 1.313  m1_loss_ce_5: 0.5503  m1_loss_mask_5: 0.1901  m1_loss_dice_5: 1.311  m1_loss_ce_6: 0.5425  m1_loss_mask_6: 0.1894  m1_loss_dice_6: 1.271  m1_loss_ce_7: 0.5217  m1_loss_mask_7: 0.1896  m1_loss_dice_7: 1.28  m1_loss_ce_8: 0.5461  m1_loss_mask_8: 0.1884  m1_loss_dice_8: 1.25  m2_loss_ce: 7.257  m2_loss_mask: 0.5168  m2_loss_dice: 2.532  m2_loss_ce_0: 7.506  m2_loss_mask_0: 0.7225  m2_loss_dice_0: 3.493  m2_loss_ce_1: 7.267  m2_loss_mask_1: 0.6041  m2_loss_dice_1: 2.931  m2_loss_ce_2: 7.242  m2_loss_mask_2: 0.5515  m2_loss_dice_2: 2.873  m2_loss_ce_3: 7.373  m2_loss_mask_3: 0.551  m2_loss_dice_3: 2.655  m2_loss_ce_4: 7.456  m2_loss_mask_4: 0.5369  m2_loss_dice_4: 2.634  m2_loss_ce_5: 7.472  m2_loss_mask_5: 0.5422  m2_loss_dice_5: 2.617  m2_loss_ce_6: 7.351  m2_loss_mask_6: 0.5246  m2_loss_dice_6: 2.616  m2_loss_ce_7: 7.345  m2_loss_mask_7: 0.5293  m2_loss_dice_7: 2.583  m2_loss_ce_8: 7.289  m2_loss_mask_8: 0.5285  m2_loss_dice_8: 2.559    time: 1.4217  last_time: 1.3962  data_time: 0.0579  last_data_time: 0.0682   lr: 0.0001  max_mem: 35069M
[10/06 21:38:54] d2.utils.events INFO:  eta: 0:06:36  iter: 719  total_loss: 126.4  m1_loss_ce: 0.5169  m1_loss_mask: 0.1988  m1_loss_dice: 1.188  m1_loss_ce_0: 0.6451  m1_loss_mask_0: 0.2415  m1_loss_dice_0: 1.401  m1_loss_ce_1: 0.6803  m1_loss_mask_1: 0.2267  m1_loss_dice_1: 1.33  m1_loss_ce_2: 0.6214  m1_loss_mask_2: 0.2011  m1_loss_dice_2: 1.299  m1_loss_ce_3: 0.5544  m1_loss_mask_3: 0.203  m1_loss_dice_3: 1.241  m1_loss_ce_4: 0.5369  m1_loss_mask_4: 0.2009  m1_loss_dice_4: 1.247  m1_loss_ce_5: 0.5332  m1_loss_mask_5: 0.1984  m1_loss_dice_5: 1.204  m1_loss_ce_6: 0.5401  m1_loss_mask_6: 0.1983  m1_loss_dice_6: 1.206  m1_loss_ce_7: 0.5293  m1_loss_mask_7: 0.1971  m1_loss_dice_7: 1.207  m1_loss_ce_8: 0.5143  m1_loss_mask_8: 0.1992  m1_loss_dice_8: 1.215  m2_loss_ce: 7.206  m2_loss_mask: 0.5706  m2_loss_dice: 2.453  m2_loss_ce_0: 7.476  m2_loss_mask_0: 0.8138  m2_loss_dice_0: 3.487  m2_loss_ce_1: 7.235  m2_loss_mask_1: 0.6728  m2_loss_dice_1: 2.856  m2_loss_ce_2: 7.225  m2_loss_mask_2: 0.6065  m2_loss_dice_2: 2.757  m2_loss_ce_3: 7.335  m2_loss_mask_3: 0.6011  m2_loss_dice_3: 2.569  m2_loss_ce_4: 7.441  m2_loss_mask_4: 0.5873  m2_loss_dice_4: 2.57  m2_loss_ce_5: 7.398  m2_loss_mask_5: 0.5848  m2_loss_dice_5: 2.571  m2_loss_ce_6: 7.301  m2_loss_mask_6: 0.5771  m2_loss_dice_6: 2.548  m2_loss_ce_7: 7.288  m2_loss_mask_7: 0.5804  m2_loss_dice_7: 2.525  m2_loss_ce_8: 7.241  m2_loss_mask_8: 0.5821  m2_loss_dice_8: 2.501    time: 1.4215  last_time: 1.4827  data_time: 0.0555  last_data_time: 0.0376   lr: 0.0001  max_mem: 35069M
[10/06 21:39:22] d2.utils.events INFO:  eta: 0:06:08  iter: 739  total_loss: 127.9  m1_loss_ce: 0.5495  m1_loss_mask: 0.1866  m1_loss_dice: 1.294  m1_loss_ce_0: 0.6935  m1_loss_mask_0: 0.226  m1_loss_dice_0: 1.562  m1_loss_ce_1: 0.7117  m1_loss_mask_1: 0.2088  m1_loss_dice_1: 1.451  m1_loss_ce_2: 0.7274  m1_loss_mask_2: 0.1935  m1_loss_dice_2: 1.379  m1_loss_ce_3: 0.6259  m1_loss_mask_3: 0.195  m1_loss_dice_3: 1.298  m1_loss_ce_4: 0.6393  m1_loss_mask_4: 0.1873  m1_loss_dice_4: 1.285  m1_loss_ce_5: 0.599  m1_loss_mask_5: 0.1872  m1_loss_dice_5: 1.288  m1_loss_ce_6: 0.5772  m1_loss_mask_6: 0.182  m1_loss_dice_6: 1.326  m1_loss_ce_7: 0.5977  m1_loss_mask_7: 0.1821  m1_loss_dice_7: 1.295  m1_loss_ce_8: 0.5503  m1_loss_mask_8: 0.1837  m1_loss_dice_8: 1.293  m2_loss_ce: 7.21  m2_loss_mask: 0.5135  m2_loss_dice: 2.505  m2_loss_ce_0: 7.471  m2_loss_mask_0: 0.7229  m2_loss_dice_0: 3.512  m2_loss_ce_1: 7.271  m2_loss_mask_1: 0.5986  m2_loss_dice_1: 2.909  m2_loss_ce_2: 7.247  m2_loss_mask_2: 0.5463  m2_loss_dice_2: 2.81  m2_loss_ce_3: 7.381  m2_loss_mask_3: 0.5244  m2_loss_dice_3: 2.614  m2_loss_ce_4: 7.462  m2_loss_mask_4: 0.534  m2_loss_dice_4: 2.623  m2_loss_ce_5: 7.436  m2_loss_mask_5: 0.5263  m2_loss_dice_5: 2.611  m2_loss_ce_6: 7.311  m2_loss_mask_6: 0.5187  m2_loss_dice_6: 2.605  m2_loss_ce_7: 7.297  m2_loss_mask_7: 0.5237  m2_loss_dice_7: 2.604  m2_loss_ce_8: 7.249  m2_loss_mask_8: 0.5277  m2_loss_dice_8: 2.575    time: 1.4207  last_time: 1.4300  data_time: 0.0617  last_data_time: 0.0549   lr: 0.0001  max_mem: 35069M
[10/06 21:39:51] d2.utils.events INFO:  eta: 0:05:39  iter: 759  total_loss: 127.6  m1_loss_ce: 0.531  m1_loss_mask: 0.1704  m1_loss_dice: 1.287  m1_loss_ce_0: 0.7129  m1_loss_mask_0: 0.2032  m1_loss_dice_0: 1.534  m1_loss_ce_1: 0.7732  m1_loss_mask_1: 0.1925  m1_loss_dice_1: 1.443  m1_loss_ce_2: 0.7461  m1_loss_mask_2: 0.179  m1_loss_dice_2: 1.394  m1_loss_ce_3: 0.6312  m1_loss_mask_3: 0.1788  m1_loss_dice_3: 1.358  m1_loss_ce_4: 0.6185  m1_loss_mask_4: 0.1725  m1_loss_dice_4: 1.328  m1_loss_ce_5: 0.5939  m1_loss_mask_5: 0.1729  m1_loss_dice_5: 1.285  m1_loss_ce_6: 0.5907  m1_loss_mask_6: 0.1715  m1_loss_dice_6: 1.309  m1_loss_ce_7: 0.5598  m1_loss_mask_7: 0.1726  m1_loss_dice_7: 1.278  m1_loss_ce_8: 0.558  m1_loss_mask_8: 0.1715  m1_loss_dice_8: 1.301  m2_loss_ce: 7.304  m2_loss_mask: 0.5097  m2_loss_dice: 2.523  m2_loss_ce_0: 7.458  m2_loss_mask_0: 0.6984  m2_loss_dice_0: 3.473  m2_loss_ce_1: 7.308  m2_loss_mask_1: 0.6014  m2_loss_dice_1: 2.954  m2_loss_ce_2: 7.307  m2_loss_mask_2: 0.5463  m2_loss_dice_2: 2.857  m2_loss_ce_3: 7.415  m2_loss_mask_3: 0.5368  m2_loss_dice_3: 2.646  m2_loss_ce_4: 7.485  m2_loss_mask_4: 0.5303  m2_loss_dice_4: 2.645  m2_loss_ce_5: 7.484  m2_loss_mask_5: 0.5248  m2_loss_dice_5: 2.639  m2_loss_ce_6: 7.397  m2_loss_mask_6: 0.5128  m2_loss_dice_6: 2.633  m2_loss_ce_7: 7.369  m2_loss_mask_7: 0.524  m2_loss_dice_7: 2.596  m2_loss_ce_8: 7.321  m2_loss_mask_8: 0.5286  m2_loss_dice_8: 2.586    time: 1.4210  last_time: 1.3930  data_time: 0.0617  last_data_time: 0.1071   lr: 0.0001  max_mem: 35069M
[10/06 21:40:19] d2.utils.events INFO:  eta: 0:05:11  iter: 779  total_loss: 127  m1_loss_ce: 0.5031  m1_loss_mask: 0.184  m1_loss_dice: 1.332  m1_loss_ce_0: 0.6366  m1_loss_mask_0: 0.2196  m1_loss_dice_0: 1.56  m1_loss_ce_1: 0.7033  m1_loss_mask_1: 0.1916  m1_loss_dice_1: 1.413  m1_loss_ce_2: 0.661  m1_loss_mask_2: 0.1831  m1_loss_dice_2: 1.34  m1_loss_ce_3: 0.5733  m1_loss_mask_3: 0.1858  m1_loss_dice_3: 1.327  m1_loss_ce_4: 0.5817  m1_loss_mask_4: 0.1806  m1_loss_dice_4: 1.326  m1_loss_ce_5: 0.5461  m1_loss_mask_5: 0.1808  m1_loss_dice_5: 1.271  m1_loss_ce_6: 0.5284  m1_loss_mask_6: 0.1842  m1_loss_dice_6: 1.256  m1_loss_ce_7: 0.5335  m1_loss_mask_7: 0.185  m1_loss_dice_7: 1.278  m1_loss_ce_8: 0.5057  m1_loss_mask_8: 0.185  m1_loss_dice_8: 1.335  m2_loss_ce: 7.202  m2_loss_mask: 0.5301  m2_loss_dice: 2.489  m2_loss_ce_0: 7.42  m2_loss_mask_0: 0.7516  m2_loss_dice_0: 3.413  m2_loss_ce_1: 7.213  m2_loss_mask_1: 0.6145  m2_loss_dice_1: 2.927  m2_loss_ce_2: 7.218  m2_loss_mask_2: 0.5597  m2_loss_dice_2: 2.791  m2_loss_ce_3: 7.327  m2_loss_mask_3: 0.5541  m2_loss_dice_3: 2.596  m2_loss_ce_4: 7.401  m2_loss_mask_4: 0.5487  m2_loss_dice_4: 2.595  m2_loss_ce_5: 7.389  m2_loss_mask_5: 0.5428  m2_loss_dice_5: 2.597  m2_loss_ce_6: 7.282  m2_loss_mask_6: 0.5383  m2_loss_dice_6: 2.549  m2_loss_ce_7: 7.272  m2_loss_mask_7: 0.5411  m2_loss_dice_7: 2.563  m2_loss_ce_8: 7.218  m2_loss_mask_8: 0.5454  m2_loss_dice_8: 2.516    time: 1.4203  last_time: 1.3426  data_time: 0.0524  last_data_time: 0.0650   lr: 0.0001  max_mem: 35069M
[10/06 21:40:48] d2.utils.events INFO:  eta: 0:04:43  iter: 799  total_loss: 127.8  m1_loss_ce: 0.5021  m1_loss_mask: 0.181  m1_loss_dice: 1.287  m1_loss_ce_0: 0.7037  m1_loss_mask_0: 0.2203  m1_loss_dice_0: 1.497  m1_loss_ce_1: 0.7564  m1_loss_mask_1: 0.2117  m1_loss_dice_1: 1.441  m1_loss_ce_2: 0.6473  m1_loss_mask_2: 0.1919  m1_loss_dice_2: 1.353  m1_loss_ce_3: 0.6286  m1_loss_mask_3: 0.1881  m1_loss_dice_3: 1.313  m1_loss_ce_4: 0.5962  m1_loss_mask_4: 0.1847  m1_loss_dice_4: 1.277  m1_loss_ce_5: 0.5668  m1_loss_mask_5: 0.1833  m1_loss_dice_5: 1.291  m1_loss_ce_6: 0.5557  m1_loss_mask_6: 0.1855  m1_loss_dice_6: 1.271  m1_loss_ce_7: 0.584  m1_loss_mask_7: 0.1834  m1_loss_dice_7: 1.255  m1_loss_ce_8: 0.5216  m1_loss_mask_8: 0.1815  m1_loss_dice_8: 1.309  m2_loss_ce: 7.182  m2_loss_mask: 0.5291  m2_loss_dice: 2.529  m2_loss_ce_0: 7.456  m2_loss_mask_0: 0.7253  m2_loss_dice_0: 3.447  m2_loss_ce_1: 7.213  m2_loss_mask_1: 0.6108  m2_loss_dice_1: 2.953  m2_loss_ce_2: 7.19  m2_loss_mask_2: 0.5612  m2_loss_dice_2: 2.814  m2_loss_ce_3: 7.318  m2_loss_mask_3: 0.5522  m2_loss_dice_3: 2.664  m2_loss_ce_4: 7.398  m2_loss_mask_4: 0.5401  m2_loss_dice_4: 2.648  m2_loss_ce_5: 7.384  m2_loss_mask_5: 0.5392  m2_loss_dice_5: 2.64  m2_loss_ce_6: 7.308  m2_loss_mask_6: 0.5312  m2_loss_dice_6: 2.636  m2_loss_ce_7: 7.247  m2_loss_mask_7: 0.5375  m2_loss_dice_7: 2.643  m2_loss_ce_8: 7.216  m2_loss_mask_8: 0.5419  m2_loss_dice_8: 2.556    time: 1.4214  last_time: 1.4452  data_time: 0.0607  last_data_time: 0.0385   lr: 0.0001  max_mem: 35069M
[10/06 21:41:18] d2.utils.events INFO:  eta: 0:04:15  iter: 819  total_loss: 127  m1_loss_ce: 0.5662  m1_loss_mask: 0.1959  m1_loss_dice: 1.235  m1_loss_ce_0: 0.6589  m1_loss_mask_0: 0.226  m1_loss_dice_0: 1.474  m1_loss_ce_1: 0.7468  m1_loss_mask_1: 0.2123  m1_loss_dice_1: 1.418  m1_loss_ce_2: 0.6483  m1_loss_mask_2: 0.1983  m1_loss_dice_2: 1.357  m1_loss_ce_3: 0.6044  m1_loss_mask_3: 0.1991  m1_loss_dice_3: 1.294  m1_loss_ce_4: 0.5685  m1_loss_mask_4: 0.1953  m1_loss_dice_4: 1.278  m1_loss_ce_5: 0.5561  m1_loss_mask_5: 0.1954  m1_loss_dice_5: 1.296  m1_loss_ce_6: 0.5177  m1_loss_mask_6: 0.1966  m1_loss_dice_6: 1.261  m1_loss_ce_7: 0.5429  m1_loss_mask_7: 0.1941  m1_loss_dice_7: 1.26  m1_loss_ce_8: 0.5297  m1_loss_mask_8: 0.194  m1_loss_dice_8: 1.255  m2_loss_ce: 7.225  m2_loss_mask: 0.5242  m2_loss_dice: 2.49  m2_loss_ce_0: 7.453  m2_loss_mask_0: 0.7499  m2_loss_dice_0: 3.498  m2_loss_ce_1: 7.234  m2_loss_mask_1: 0.6194  m2_loss_dice_1: 2.915  m2_loss_ce_2: 7.228  m2_loss_mask_2: 0.5425  m2_loss_dice_2: 2.841  m2_loss_ce_3: 7.327  m2_loss_mask_3: 0.5458  m2_loss_dice_3: 2.627  m2_loss_ce_4: 7.437  m2_loss_mask_4: 0.5338  m2_loss_dice_4: 2.601  m2_loss_ce_5: 7.445  m2_loss_mask_5: 0.5308  m2_loss_dice_5: 2.624  m2_loss_ce_6: 7.351  m2_loss_mask_6: 0.5203  m2_loss_dice_6: 2.611  m2_loss_ce_7: 7.328  m2_loss_mask_7: 0.5195  m2_loss_dice_7: 2.562  m2_loss_ce_8: 7.271  m2_loss_mask_8: 0.5264  m2_loss_dice_8: 2.565    time: 1.4221  last_time: 1.4858  data_time: 0.0520  last_data_time: 0.0412   lr: 0.0001  max_mem: 35069M
[10/06 21:41:47] d2.utils.events INFO:  eta: 0:03:46  iter: 839  total_loss: 126.9  m1_loss_ce: 0.5385  m1_loss_mask: 0.1783  m1_loss_dice: 1.291  m1_loss_ce_0: 0.6766  m1_loss_mask_0: 0.2227  m1_loss_dice_0: 1.479  m1_loss_ce_1: 0.7083  m1_loss_mask_1: 0.203  m1_loss_dice_1: 1.394  m1_loss_ce_2: 0.662  m1_loss_mask_2: 0.1856  m1_loss_dice_2: 1.347  m1_loss_ce_3: 0.6102  m1_loss_mask_3: 0.1857  m1_loss_dice_3: 1.283  m1_loss_ce_4: 0.549  m1_loss_mask_4: 0.1827  m1_loss_dice_4: 1.285  m1_loss_ce_5: 0.5829  m1_loss_mask_5: 0.1792  m1_loss_dice_5: 1.291  m1_loss_ce_6: 0.5386  m1_loss_mask_6: 0.179  m1_loss_dice_6: 1.262  m1_loss_ce_7: 0.541  m1_loss_mask_7: 0.1766  m1_loss_dice_7: 1.267  m1_loss_ce_8: 0.5452  m1_loss_mask_8: 0.1776  m1_loss_dice_8: 1.26  m2_loss_ce: 7.251  m2_loss_mask: 0.5173  m2_loss_dice: 2.494  m2_loss_ce_0: 7.458  m2_loss_mask_0: 0.7266  m2_loss_dice_0: 3.531  m2_loss_ce_1: 7.288  m2_loss_mask_1: 0.6048  m2_loss_dice_1: 2.936  m2_loss_ce_2: 7.286  m2_loss_mask_2: 0.5471  m2_loss_dice_2: 2.875  m2_loss_ce_3: 7.378  m2_loss_mask_3: 0.5413  m2_loss_dice_3: 2.611  m2_loss_ce_4: 7.473  m2_loss_mask_4: 0.53  m2_loss_dice_4: 2.632  m2_loss_ce_5: 7.457  m2_loss_mask_5: 0.5347  m2_loss_dice_5: 2.645  m2_loss_ce_6: 7.376  m2_loss_mask_6: 0.5197  m2_loss_dice_6: 2.606  m2_loss_ce_7: 7.379  m2_loss_mask_7: 0.5235  m2_loss_dice_7: 2.59  m2_loss_ce_8: 7.282  m2_loss_mask_8: 0.5275  m2_loss_dice_8: 2.599    time: 1.4229  last_time: 1.4099  data_time: 0.0555  last_data_time: 0.0642   lr: 0.0001  max_mem: 35069M
[10/06 21:42:15] d2.utils.events INFO:  eta: 0:03:18  iter: 859  total_loss: 127.8  m1_loss_ce: 0.5063  m1_loss_mask: 0.1958  m1_loss_dice: 1.255  m1_loss_ce_0: 0.6385  m1_loss_mask_0: 0.2223  m1_loss_dice_0: 1.502  m1_loss_ce_1: 0.6915  m1_loss_mask_1: 0.2129  m1_loss_dice_1: 1.378  m1_loss_ce_2: 0.6798  m1_loss_mask_2: 0.1971  m1_loss_dice_2: 1.347  m1_loss_ce_3: 0.6029  m1_loss_mask_3: 0.1977  m1_loss_dice_3: 1.287  m1_loss_ce_4: 0.5649  m1_loss_mask_4: 0.1986  m1_loss_dice_4: 1.266  m1_loss_ce_5: 0.5747  m1_loss_mask_5: 0.1958  m1_loss_dice_5: 1.251  m1_loss_ce_6: 0.5044  m1_loss_mask_6: 0.1975  m1_loss_dice_6: 1.238  m1_loss_ce_7: 0.546  m1_loss_mask_7: 0.1963  m1_loss_dice_7: 1.248  m1_loss_ce_8: 0.512  m1_loss_mask_8: 0.1963  m1_loss_dice_8: 1.253  m2_loss_ce: 7.193  m2_loss_mask: 0.519  m2_loss_dice: 2.498  m2_loss_ce_0: 7.431  m2_loss_mask_0: 0.7385  m2_loss_dice_0: 3.508  m2_loss_ce_1: 7.22  m2_loss_mask_1: 0.6222  m2_loss_dice_1: 2.931  m2_loss_ce_2: 7.211  m2_loss_mask_2: 0.5593  m2_loss_dice_2: 2.813  m2_loss_ce_3: 7.329  m2_loss_mask_3: 0.5548  m2_loss_dice_3: 2.627  m2_loss_ce_4: 7.387  m2_loss_mask_4: 0.5434  m2_loss_dice_4: 2.645  m2_loss_ce_5: 7.372  m2_loss_mask_5: 0.5386  m2_loss_dice_5: 2.629  m2_loss_ce_6: 7.294  m2_loss_mask_6: 0.5183  m2_loss_dice_6: 2.596  m2_loss_ce_7: 7.278  m2_loss_mask_7: 0.5213  m2_loss_dice_7: 2.607  m2_loss_ce_8: 7.249  m2_loss_mask_8: 0.5234  m2_loss_dice_8: 2.55    time: 1.4222  last_time: 1.3710  data_time: 0.0619  last_data_time: 0.0390   lr: 0.0001  max_mem: 35069M
[10/06 21:42:44] d2.utils.events INFO:  eta: 0:02:50  iter: 879  total_loss: 128.3  m1_loss_ce: 0.5513  m1_loss_mask: 0.1751  m1_loss_dice: 1.294  m1_loss_ce_0: 0.6665  m1_loss_mask_0: 0.2155  m1_loss_dice_0: 1.55  m1_loss_ce_1: 0.7439  m1_loss_mask_1: 0.1973  m1_loss_dice_1: 1.443  m1_loss_ce_2: 0.6868  m1_loss_mask_2: 0.1901  m1_loss_dice_2: 1.345  m1_loss_ce_3: 0.6057  m1_loss_mask_3: 0.1829  m1_loss_dice_3: 1.314  m1_loss_ce_4: 0.5655  m1_loss_mask_4: 0.1832  m1_loss_dice_4: 1.295  m1_loss_ce_5: 0.5555  m1_loss_mask_5: 0.1799  m1_loss_dice_5: 1.295  m1_loss_ce_6: 0.5492  m1_loss_mask_6: 0.1762  m1_loss_dice_6: 1.292  m1_loss_ce_7: 0.5327  m1_loss_mask_7: 0.1769  m1_loss_dice_7: 1.299  m1_loss_ce_8: 0.517  m1_loss_mask_8: 0.1736  m1_loss_dice_8: 1.274  m2_loss_ce: 7.185  m2_loss_mask: 0.5118  m2_loss_dice: 2.529  m2_loss_ce_0: 7.45  m2_loss_mask_0: 0.7441  m2_loss_dice_0: 3.482  m2_loss_ce_1: 7.224  m2_loss_mask_1: 0.6043  m2_loss_dice_1: 2.985  m2_loss_ce_2: 7.231  m2_loss_mask_2: 0.5431  m2_loss_dice_2: 2.844  m2_loss_ce_3: 7.353  m2_loss_mask_3: 0.536  m2_loss_dice_3: 2.647  m2_loss_ce_4: 7.429  m2_loss_mask_4: 0.5321  m2_loss_dice_4: 2.666  m2_loss_ce_5: 7.413  m2_loss_mask_5: 0.5278  m2_loss_dice_5: 2.673  m2_loss_ce_6: 7.309  m2_loss_mask_6: 0.5174  m2_loss_dice_6: 2.64  m2_loss_ce_7: 7.275  m2_loss_mask_7: 0.5196  m2_loss_dice_7: 2.598  m2_loss_ce_8: 7.248  m2_loss_mask_8: 0.5221  m2_loss_dice_8: 2.59    time: 1.4225  last_time: 1.4483  data_time: 0.0551  last_data_time: 0.0462   lr: 0.0001  max_mem: 35069M
[10/06 21:43:12] d2.utils.events INFO:  eta: 0:02:21  iter: 899  total_loss: 127.4  m1_loss_ce: 0.4771  m1_loss_mask: 0.1874  m1_loss_dice: 1.207  m1_loss_ce_0: 0.5787  m1_loss_mask_0: 0.2323  m1_loss_dice_0: 1.479  m1_loss_ce_1: 0.6634  m1_loss_mask_1: 0.2064  m1_loss_dice_1: 1.359  m1_loss_ce_2: 0.6122  m1_loss_mask_2: 0.1962  m1_loss_dice_2: 1.293  m1_loss_ce_3: 0.5503  m1_loss_mask_3: 0.1952  m1_loss_dice_3: 1.232  m1_loss_ce_4: 0.536  m1_loss_mask_4: 0.1931  m1_loss_dice_4: 1.235  m1_loss_ce_5: 0.5103  m1_loss_mask_5: 0.1898  m1_loss_dice_5: 1.235  m1_loss_ce_6: 0.4776  m1_loss_mask_6: 0.1901  m1_loss_dice_6: 1.22  m1_loss_ce_7: 0.5178  m1_loss_mask_7: 0.1937  m1_loss_dice_7: 1.152  m1_loss_ce_8: 0.4942  m1_loss_mask_8: 0.1884  m1_loss_dice_8: 1.205  m2_loss_ce: 7.266  m2_loss_mask: 0.5354  m2_loss_dice: 2.458  m2_loss_ce_0: 7.553  m2_loss_mask_0: 0.7677  m2_loss_dice_0: 3.499  m2_loss_ce_1: 7.302  m2_loss_mask_1: 0.6297  m2_loss_dice_1: 2.859  m2_loss_ce_2: 7.26  m2_loss_mask_2: 0.5669  m2_loss_dice_2: 2.797  m2_loss_ce_3: 7.426  m2_loss_mask_3: 0.5516  m2_loss_dice_3: 2.535  m2_loss_ce_4: 7.493  m2_loss_mask_4: 0.544  m2_loss_dice_4: 2.567  m2_loss_ce_5: 7.479  m2_loss_mask_5: 0.5556  m2_loss_dice_5: 2.572  m2_loss_ce_6: 7.381  m2_loss_mask_6: 0.5409  m2_loss_dice_6: 2.533  m2_loss_ce_7: 7.353  m2_loss_mask_7: 0.5434  m2_loss_dice_7: 2.524  m2_loss_ce_8: 7.312  m2_loss_mask_8: 0.5481  m2_loss_dice_8: 2.496    time: 1.4228  last_time: 1.5157  data_time: 0.0736  last_data_time: 0.0678   lr: 0.0001  max_mem: 35069M
[10/06 21:43:41] d2.utils.events INFO:  eta: 0:01:53  iter: 919  total_loss: 126.9  m1_loss_ce: 0.5035  m1_loss_mask: 0.1903  m1_loss_dice: 1.245  m1_loss_ce_0: 0.6338  m1_loss_mask_0: 0.2319  m1_loss_dice_0: 1.55  m1_loss_ce_1: 0.7141  m1_loss_mask_1: 0.2166  m1_loss_dice_1: 1.418  m1_loss_ce_2: 0.6243  m1_loss_mask_2: 0.1986  m1_loss_dice_2: 1.356  m1_loss_ce_3: 0.5696  m1_loss_mask_3: 0.1986  m1_loss_dice_3: 1.318  m1_loss_ce_4: 0.5485  m1_loss_mask_4: 0.1972  m1_loss_dice_4: 1.261  m1_loss_ce_5: 0.5573  m1_loss_mask_5: 0.1952  m1_loss_dice_5: 1.284  m1_loss_ce_6: 0.4885  m1_loss_mask_6: 0.1934  m1_loss_dice_6: 1.279  m1_loss_ce_7: 0.5054  m1_loss_mask_7: 0.1927  m1_loss_dice_7: 1.28  m1_loss_ce_8: 0.4975  m1_loss_mask_8: 0.1914  m1_loss_dice_8: 1.278  m2_loss_ce: 7.25  m2_loss_mask: 0.5381  m2_loss_dice: 2.494  m2_loss_ce_0: 7.505  m2_loss_mask_0: 0.7434  m2_loss_dice_0: 3.523  m2_loss_ce_1: 7.29  m2_loss_mask_1: 0.6304  m2_loss_dice_1: 2.909  m2_loss_ce_2: 7.278  m2_loss_mask_2: 0.5737  m2_loss_dice_2: 2.805  m2_loss_ce_3: 7.387  m2_loss_mask_3: 0.559  m2_loss_dice_3: 2.602  m2_loss_ce_4: 7.458  m2_loss_mask_4: 0.5555  m2_loss_dice_4: 2.614  m2_loss_ce_5: 7.46  m2_loss_mask_5: 0.5502  m2_loss_dice_5: 2.596  m2_loss_ce_6: 7.354  m2_loss_mask_6: 0.5403  m2_loss_dice_6: 2.576  m2_loss_ce_7: 7.343  m2_loss_mask_7: 0.5386  m2_loss_dice_7: 2.564  m2_loss_ce_8: 7.288  m2_loss_mask_8: 0.5474  m2_loss_dice_8: 2.539    time: 1.4231  last_time: 1.4339  data_time: 0.0545  last_data_time: 0.0397   lr: 0.0001  max_mem: 35069M
[10/06 21:44:09] d2.utils.events INFO:  eta: 0:01:25  iter: 939  total_loss: 128.2  m1_loss_ce: 0.5685  m1_loss_mask: 0.2011  m1_loss_dice: 1.27  m1_loss_ce_0: 0.6177  m1_loss_mask_0: 0.2277  m1_loss_dice_0: 1.516  m1_loss_ce_1: 0.7218  m1_loss_mask_1: 0.2205  m1_loss_dice_1: 1.445  m1_loss_ce_2: 0.656  m1_loss_mask_2: 0.2077  m1_loss_dice_2: 1.393  m1_loss_ce_3: 0.5966  m1_loss_mask_3: 0.2067  m1_loss_dice_3: 1.318  m1_loss_ce_4: 0.5842  m1_loss_mask_4: 0.205  m1_loss_dice_4: 1.274  m1_loss_ce_5: 0.5694  m1_loss_mask_5: 0.2044  m1_loss_dice_5: 1.313  m1_loss_ce_6: 0.5838  m1_loss_mask_6: 0.2001  m1_loss_dice_6: 1.272  m1_loss_ce_7: 0.5242  m1_loss_mask_7: 0.2015  m1_loss_dice_7: 1.257  m1_loss_ce_8: 0.5406  m1_loss_mask_8: 0.2011  m1_loss_dice_8: 1.279  m2_loss_ce: 7.192  m2_loss_mask: 0.5533  m2_loss_dice: 2.53  m2_loss_ce_0: 7.44  m2_loss_mask_0: 0.7656  m2_loss_dice_0: 3.498  m2_loss_ce_1: 7.228  m2_loss_mask_1: 0.6425  m2_loss_dice_1: 2.941  m2_loss_ce_2: 7.202  m2_loss_mask_2: 0.5738  m2_loss_dice_2: 2.819  m2_loss_ce_3: 7.317  m2_loss_mask_3: 0.5553  m2_loss_dice_3: 2.628  m2_loss_ce_4: 7.384  m2_loss_mask_4: 0.5619  m2_loss_dice_4: 2.607  m2_loss_ce_5: 7.371  m2_loss_mask_5: 0.5631  m2_loss_dice_5: 2.591  m2_loss_ce_6: 7.308  m2_loss_mask_6: 0.5471  m2_loss_dice_6: 2.592  m2_loss_ce_7: 7.284  m2_loss_mask_7: 0.555  m2_loss_dice_7: 2.588  m2_loss_ce_8: 7.23  m2_loss_mask_8: 0.5659  m2_loss_dice_8: 2.578    time: 1.4224  last_time: 1.3636  data_time: 0.0506  last_data_time: 0.0365   lr: 0.0001  max_mem: 35069M
[10/06 21:44:39] d2.utils.events INFO:  eta: 0:00:56  iter: 959  total_loss: 127.2  m1_loss_ce: 0.5093  m1_loss_mask: 0.1897  m1_loss_dice: 1.216  m1_loss_ce_0: 0.6657  m1_loss_mask_0: 0.2257  m1_loss_dice_0: 1.479  m1_loss_ce_1: 0.7386  m1_loss_mask_1: 0.2065  m1_loss_dice_1: 1.394  m1_loss_ce_2: 0.6304  m1_loss_mask_2: 0.1947  m1_loss_dice_2: 1.301  m1_loss_ce_3: 0.5831  m1_loss_mask_3: 0.1878  m1_loss_dice_3: 1.233  m1_loss_ce_4: 0.5558  m1_loss_mask_4: 0.1904  m1_loss_dice_4: 1.257  m1_loss_ce_5: 0.5796  m1_loss_mask_5: 0.1877  m1_loss_dice_5: 1.185  m1_loss_ce_6: 0.5485  m1_loss_mask_6: 0.1915  m1_loss_dice_6: 1.208  m1_loss_ce_7: 0.5305  m1_loss_mask_7: 0.1913  m1_loss_dice_7: 1.222  m1_loss_ce_8: 0.5473  m1_loss_mask_8: 0.188  m1_loss_dice_8: 1.232  m2_loss_ce: 7.293  m2_loss_mask: 0.5447  m2_loss_dice: 2.522  m2_loss_ce_0: 7.492  m2_loss_mask_0: 0.7461  m2_loss_dice_0: 3.575  m2_loss_ce_1: 7.296  m2_loss_mask_1: 0.6131  m2_loss_dice_1: 2.923  m2_loss_ce_2: 7.298  m2_loss_mask_2: 0.5746  m2_loss_dice_2: 2.804  m2_loss_ce_3: 7.428  m2_loss_mask_3: 0.554  m2_loss_dice_3: 2.619  m2_loss_ce_4: 7.483  m2_loss_mask_4: 0.5505  m2_loss_dice_4: 2.607  m2_loss_ce_5: 7.471  m2_loss_mask_5: 0.549  m2_loss_dice_5: 2.602  m2_loss_ce_6: 7.387  m2_loss_mask_6: 0.5453  m2_loss_dice_6: 2.592  m2_loss_ce_7: 7.372  m2_loss_mask_7: 0.552  m2_loss_dice_7: 2.566  m2_loss_ce_8: 7.301  m2_loss_mask_8: 0.5565  m2_loss_dice_8: 2.57    time: 1.4236  last_time: 1.5691  data_time: 0.0666  last_data_time: 0.0455   lr: 0.0001  max_mem: 35069M
[10/06 21:45:08] d2.utils.events INFO:  eta: 0:00:28  iter: 979  total_loss: 127.4  m1_loss_ce: 0.535  m1_loss_mask: 0.1816  m1_loss_dice: 1.264  m1_loss_ce_0: 0.6403  m1_loss_mask_0: 0.2181  m1_loss_dice_0: 1.518  m1_loss_ce_1: 0.6612  m1_loss_mask_1: 0.2132  m1_loss_dice_1: 1.397  m1_loss_ce_2: 0.6531  m1_loss_mask_2: 0.2012  m1_loss_dice_2: 1.277  m1_loss_ce_3: 0.5995  m1_loss_mask_3: 0.1971  m1_loss_dice_3: 1.257  m1_loss_ce_4: 0.5334  m1_loss_mask_4: 0.195  m1_loss_dice_4: 1.249  m1_loss_ce_5: 0.5541  m1_loss_mask_5: 0.1926  m1_loss_dice_5: 1.238  m1_loss_ce_6: 0.5171  m1_loss_mask_6: 0.1865  m1_loss_dice_6: 1.247  m1_loss_ce_7: 0.5257  m1_loss_mask_7: 0.1835  m1_loss_dice_7: 1.233  m1_loss_ce_8: 0.5117  m1_loss_mask_8: 0.1836  m1_loss_dice_8: 1.242  m2_loss_ce: 7.282  m2_loss_mask: 0.5389  m2_loss_dice: 2.572  m2_loss_ce_0: 7.504  m2_loss_mask_0: 0.7547  m2_loss_dice_0: 3.485  m2_loss_ce_1: 7.368  m2_loss_mask_1: 0.627  m2_loss_dice_1: 2.965  m2_loss_ce_2: 7.301  m2_loss_mask_2: 0.5606  m2_loss_dice_2: 2.836  m2_loss_ce_3: 7.41  m2_loss_mask_3: 0.5419  m2_loss_dice_3: 2.668  m2_loss_ce_4: 7.502  m2_loss_mask_4: 0.5391  m2_loss_dice_4: 2.658  m2_loss_ce_5: 7.499  m2_loss_mask_5: 0.5485  m2_loss_dice_5: 2.704  m2_loss_ce_6: 7.385  m2_loss_mask_6: 0.535  m2_loss_dice_6: 2.608  m2_loss_ce_7: 7.39  m2_loss_mask_7: 0.5291  m2_loss_dice_7: 2.642  m2_loss_ce_8: 7.323  m2_loss_mask_8: 0.5337  m2_loss_dice_8: 2.604    time: 1.4245  last_time: 1.4093  data_time: 0.0640  last_data_time: 0.0628   lr: 0.0001  max_mem: 35069M
[10/06 21:45:36] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4/model_final.pth
[10/06 21:45:38] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 127.5  m1_loss_ce: 0.5096  m1_loss_mask: 0.1825  m1_loss_dice: 1.276  m1_loss_ce_0: 0.625  m1_loss_mask_0: 0.2086  m1_loss_dice_0: 1.541  m1_loss_ce_1: 0.7173  m1_loss_mask_1: 0.1877  m1_loss_dice_1: 1.434  m1_loss_ce_2: 0.6572  m1_loss_mask_2: 0.183  m1_loss_dice_2: 1.337  m1_loss_ce_3: 0.6077  m1_loss_mask_3: 0.1816  m1_loss_dice_3: 1.281  m1_loss_ce_4: 0.5837  m1_loss_mask_4: 0.1806  m1_loss_dice_4: 1.302  m1_loss_ce_5: 0.5383  m1_loss_mask_5: 0.1819  m1_loss_dice_5: 1.312  m1_loss_ce_6: 0.5547  m1_loss_mask_6: 0.1814  m1_loss_dice_6: 1.252  m1_loss_ce_7: 0.5382  m1_loss_mask_7: 0.1816  m1_loss_dice_7: 1.27  m1_loss_ce_8: 0.5517  m1_loss_mask_8: 0.1798  m1_loss_dice_8: 1.266  m2_loss_ce: 7.234  m2_loss_mask: 0.5136  m2_loss_dice: 2.526  m2_loss_ce_0: 7.479  m2_loss_mask_0: 0.7471  m2_loss_dice_0: 3.437  m2_loss_ce_1: 7.258  m2_loss_mask_1: 0.6045  m2_loss_dice_1: 2.958  m2_loss_ce_2: 7.252  m2_loss_mask_2: 0.5661  m2_loss_dice_2: 2.833  m2_loss_ce_3: 7.376  m2_loss_mask_3: 0.5388  m2_loss_dice_3: 2.667  m2_loss_ce_4: 7.448  m2_loss_mask_4: 0.5311  m2_loss_dice_4: 2.624  m2_loss_ce_5: 7.449  m2_loss_mask_5: 0.5227  m2_loss_dice_5: 2.642  m2_loss_ce_6: 7.354  m2_loss_mask_6: 0.5064  m2_loss_dice_6: 2.567  m2_loss_ce_7: 7.328  m2_loss_mask_7: 0.5105  m2_loss_dice_7: 2.618  m2_loss_ce_8: 7.262  m2_loss_mask_8: 0.5121  m2_loss_dice_8: 2.568    time: 1.4236  last_time: 1.3731  data_time: 0.0553  last_data_time: 0.0992   lr: 0.0001  max_mem: 35069M
[10/06 21:45:39] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:23:40 (1.4236 s / it)
[10/06 21:45:39] d2.engine.hooks INFO: Total training time: 0:23:48 (0:00:07 on hooks)
[10/06 21:45:39] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[10/06 21:45:39] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[10/06 21:45:39] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/06 21:45:39] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/06 21:45:39] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[10/06 21:47:05] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval4bzuk_y7 ...
[10/06 21:48:14] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 47.314 | 75.135 | 58.308 |      19       |
| Things | 31.087 | 68.509 | 39.949 |       8       |
| Stuff  | 59.115 | 79.954 | 71.661 |      11       |
[10/06 21:48:14] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 96.880 | 97.181 | 99.690 |     Stuff     |
| class_8  | 70.233 | 83.102 | 84.513 |     Stuff     |
| class_11 | 84.029 | 87.448 | 96.091 |     Stuff     |
| class_12 | 36.288 | 77.899 | 46.584 |     Stuff     |
| class_13 | 29.554 | 73.885 | 40.000 |     Stuff     |
| class_17 | 38.172 | 62.849 | 60.736 |     Stuff     |
| class_19 | 36.553 | 67.218 | 54.380 |     Stuff     |
| class_20 | 52.702 | 73.766 | 71.444 |     Stuff     |
| class_21 | 86.895 | 89.003 | 97.631 |     Stuff     |
| class_22 | 32.890 | 74.849 | 43.943 |     Stuff     |
| class_23 | 86.070 | 92.293 | 93.257 |     Stuff     |
| class_24 | 46.520 | 75.522 | 61.597 |    Things     |
| class_25 | 38.092 | 71.941 | 52.949 |    Things     |
| class_26 | 61.253 | 82.698 | 74.068 |    Things     |
| class_27 | 35.495 | 86.708 | 40.936 |    Things     |
| class_28 | 0.000  | 0.000  | 0.000  |    Things     |
| class_31 | 18.555 | 89.681 | 20.690 |    Things     |
| class_32 | 13.722 | 71.698 | 19.139 |    Things     |
| class_33 | 35.062 | 69.827 | 50.213 |    Things     |
[10/06 21:48:14] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/06 21:48:14] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[10/06 21:48:14] d2.evaluation.testing INFO: copypaste: 47.3139,75.1352,58.3084,31.0873,68.5094,39.9489,59.1150,79.9539,71.6607,96.8796,97.1811,99.6898,70.2325,83.1024,84.5133,84.0291,87.4478,96.0905,36.2882,77.8986,46.5839,29.5540,73.8851,40.0000,38.1722,62.8493,60.7362,36.5527,67.2177,54.3796,52.7018,73.7665,71.4441,86.8952,89.0034,97.6313,32.8904,74.8487,43.9425,86.0696,92.2928,93.2571,46.5195,75.5220,61.5973,38.0916,71.9408,52.9486,61.2533,82.6984,74.0684,35.4946,86.7082,40.9357,0.0000,0.0000,0.0000,18.5546,89.6806,20.6897,13.7222,71.6984,19.1388,35.0623,69.8268,50.2132
[10/06 22:30:26] detectron2 INFO: Rank of current process: 0. World size: 2
[10/06 22:30:27] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/06 22:30:27] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_L1_L2_0_6_0_4_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/06 22:30:27] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_L1_L2_0_6_0_4_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/06 22:30:27] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/06 22:30:27] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4/config.yaml
[10/06 22:30:27] d2.utils.env INFO: Using a generated random seed 30515762
[10/06 22:30:32] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[10/06 22:30:32] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/06 22:30:32] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/06 22:30:32] d2.data.build INFO: Using training sampler TrainingSampler
[10/06 22:30:32] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/06 22:30:32] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/06 22:30:32] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/06 22:30:32] d2.data.build INFO: Making batched data loader with batch_size=4
[10/06 22:30:32] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/06 22:30:36] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[10/06 22:30:36] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 22:30:36] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 22:30:37] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 22:30:37] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 22:31:13] d2.utils.events INFO:  eta: 0:24:09  iter: 19  total_loss: 39.34  m1_loss_ce: 0.4813  m1_loss_mask: 0.1671  m1_loss_dice: 1.221  m1_loss_ce_0: 0.5742  m1_loss_mask_0: 0.1955  m1_loss_dice_0: 1.457  m1_loss_ce_1: 0.64  m1_loss_mask_1: 0.1807  m1_loss_dice_1: 1.346  m1_loss_ce_2: 0.5974  m1_loss_mask_2: 0.1709  m1_loss_dice_2: 1.279  m1_loss_ce_3: 0.5414  m1_loss_mask_3: 0.1698  m1_loss_dice_3: 1.244  m1_loss_ce_4: 0.5404  m1_loss_mask_4: 0.1715  m1_loss_dice_4: 1.244  m1_loss_ce_5: 0.5056  m1_loss_mask_5: 0.1683  m1_loss_dice_5: 1.244  m1_loss_ce_6: 0.4947  m1_loss_mask_6: 0.1692  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.47  m1_loss_mask_7: 0.1685  m1_loss_dice_7: 1.219  m1_loss_ce_8: 0.48  m1_loss_mask_8: 0.1662  m1_loss_dice_8: 1.211  m2_loss_ce: 0.4912  m2_loss_mask: 0.1692  m2_loss_dice: 1.229  m2_loss_ce_0: 0.5558  m2_loss_mask_0: 0.1963  m2_loss_dice_0: 1.482  m2_loss_ce_1: 0.6929  m2_loss_mask_1: 0.1769  m2_loss_dice_1: 1.321  m2_loss_ce_2: 0.5894  m2_loss_mask_2: 0.1704  m2_loss_dice_2: 1.262  m2_loss_ce_3: 0.5529  m2_loss_mask_3: 0.1714  m2_loss_dice_3: 1.191  m2_loss_ce_4: 0.5423  m2_loss_mask_4: 0.1697  m2_loss_dice_4: 1.219  m2_loss_ce_5: 0.5317  m2_loss_mask_5: 0.1684  m2_loss_dice_5: 1.249  m2_loss_ce_6: 0.517  m2_loss_mask_6: 0.1692  m2_loss_dice_6: 1.203  m2_loss_ce_7: 0.5171  m2_loss_mask_7: 0.1695  m2_loss_dice_7: 1.22  m2_loss_ce_8: 0.5011  m2_loss_mask_8: 0.168  m2_loss_dice_8: 1.253    time: 1.4740  last_time: 1.4927  data_time: 0.2544  last_data_time: 0.0566   lr: 0.0001  max_mem: 33696M
[10/06 22:31:42] d2.utils.events INFO:  eta: 0:23:29  iter: 39  total_loss: 39.41  m1_loss_ce: 0.4878  m1_loss_mask: 0.1575  m1_loss_dice: 1.194  m1_loss_ce_0: 0.5602  m1_loss_mask_0: 0.179  m1_loss_dice_0: 1.372  m1_loss_ce_1: 0.6237  m1_loss_mask_1: 0.1677  m1_loss_dice_1: 1.283  m1_loss_ce_2: 0.5341  m1_loss_mask_2: 0.1633  m1_loss_dice_2: 1.27  m1_loss_ce_3: 0.5397  m1_loss_mask_3: 0.1656  m1_loss_dice_3: 1.225  m1_loss_ce_4: 0.5067  m1_loss_mask_4: 0.1609  m1_loss_dice_4: 1.226  m1_loss_ce_5: 0.4985  m1_loss_mask_5: 0.1619  m1_loss_dice_5: 1.201  m1_loss_ce_6: 0.5079  m1_loss_mask_6: 0.158  m1_loss_dice_6: 1.208  m1_loss_ce_7: 0.513  m1_loss_mask_7: 0.1589  m1_loss_dice_7: 1.182  m1_loss_ce_8: 0.4644  m1_loss_mask_8: 0.1574  m1_loss_dice_8: 1.207  m2_loss_ce: 0.5178  m2_loss_mask: 0.1571  m2_loss_dice: 1.184  m2_loss_ce_0: 0.5857  m2_loss_mask_0: 0.1784  m2_loss_dice_0: 1.451  m2_loss_ce_1: 0.6735  m2_loss_mask_1: 0.1642  m2_loss_dice_1: 1.282  m2_loss_ce_2: 0.5931  m2_loss_mask_2: 0.1597  m2_loss_dice_2: 1.245  m2_loss_ce_3: 0.5666  m2_loss_mask_3: 0.1653  m2_loss_dice_3: 1.217  m2_loss_ce_4: 0.5564  m2_loss_mask_4: 0.1643  m2_loss_dice_4: 1.198  m2_loss_ce_5: 0.54  m2_loss_mask_5: 0.1606  m2_loss_dice_5: 1.212  m2_loss_ce_6: 0.5282  m2_loss_mask_6: 0.156  m2_loss_dice_6: 1.17  m2_loss_ce_7: 0.4896  m2_loss_mask_7: 0.157  m2_loss_dice_7: 1.183  m2_loss_ce_8: 0.5283  m2_loss_mask_8: 0.156  m2_loss_dice_8: 1.2    time: 1.4579  last_time: 1.4210  data_time: 0.0464  last_data_time: 0.0481   lr: 0.0001  max_mem: 33763M
[10/06 22:32:10] d2.utils.events INFO:  eta: 0:22:51  iter: 59  total_loss: 39.56  m1_loss_ce: 0.4678  m1_loss_mask: 0.1657  m1_loss_dice: 1.217  m1_loss_ce_0: 0.544  m1_loss_mask_0: 0.1891  m1_loss_dice_0: 1.475  m1_loss_ce_1: 0.6004  m1_loss_mask_1: 0.1786  m1_loss_dice_1: 1.367  m1_loss_ce_2: 0.5454  m1_loss_mask_2: 0.1697  m1_loss_dice_2: 1.313  m1_loss_ce_3: 0.517  m1_loss_mask_3: 0.1711  m1_loss_dice_3: 1.287  m1_loss_ce_4: 0.5012  m1_loss_mask_4: 0.1688  m1_loss_dice_4: 1.255  m1_loss_ce_5: 0.4882  m1_loss_mask_5: 0.1673  m1_loss_dice_5: 1.273  m1_loss_ce_6: 0.46  m1_loss_mask_6: 0.1683  m1_loss_dice_6: 1.248  m1_loss_ce_7: 0.4562  m1_loss_mask_7: 0.1676  m1_loss_dice_7: 1.241  m1_loss_ce_8: 0.4809  m1_loss_mask_8: 0.1658  m1_loss_dice_8: 1.22  m2_loss_ce: 0.5373  m2_loss_mask: 0.1645  m2_loss_dice: 1.249  m2_loss_ce_0: 0.6097  m2_loss_mask_0: 0.194  m2_loss_dice_0: 1.5  m2_loss_ce_1: 0.6595  m2_loss_mask_1: 0.1761  m2_loss_dice_1: 1.368  m2_loss_ce_2: 0.6059  m2_loss_mask_2: 0.1706  m2_loss_dice_2: 1.308  m2_loss_ce_3: 0.5417  m2_loss_mask_3: 0.1723  m2_loss_dice_3: 1.278  m2_loss_ce_4: 0.5411  m2_loss_mask_4: 0.1692  m2_loss_dice_4: 1.268  m2_loss_ce_5: 0.5601  m2_loss_mask_5: 0.1666  m2_loss_dice_5: 1.294  m2_loss_ce_6: 0.5174  m2_loss_mask_6: 0.169  m2_loss_dice_6: 1.217  m2_loss_ce_7: 0.4928  m2_loss_mask_7: 0.1663  m2_loss_dice_7: 1.265  m2_loss_ce_8: 0.5232  m2_loss_mask_8: 0.1646  m2_loss_dice_8: 1.227    time: 1.4386  last_time: 1.3666  data_time: 0.0570  last_data_time: 0.0398   lr: 0.0001  max_mem: 33894M
[10/06 22:32:39] d2.utils.events INFO:  eta: 0:22:13  iter: 79  total_loss: 40.59  m1_loss_ce: 0.4912  m1_loss_mask: 0.1718  m1_loss_dice: 1.213  m1_loss_ce_0: 0.5806  m1_loss_mask_0: 0.1977  m1_loss_dice_0: 1.428  m1_loss_ce_1: 0.6462  m1_loss_mask_1: 0.181  m1_loss_dice_1: 1.342  m1_loss_ce_2: 0.5865  m1_loss_mask_2: 0.1727  m1_loss_dice_2: 1.331  m1_loss_ce_3: 0.5772  m1_loss_mask_3: 0.175  m1_loss_dice_3: 1.264  m1_loss_ce_4: 0.54  m1_loss_mask_4: 0.174  m1_loss_dice_4: 1.274  m1_loss_ce_5: 0.5204  m1_loss_mask_5: 0.1709  m1_loss_dice_5: 1.252  m1_loss_ce_6: 0.5231  m1_loss_mask_6: 0.1729  m1_loss_dice_6: 1.265  m1_loss_ce_7: 0.491  m1_loss_mask_7: 0.1722  m1_loss_dice_7: 1.246  m1_loss_ce_8: 0.462  m1_loss_mask_8: 0.1707  m1_loss_dice_8: 1.232  m2_loss_ce: 0.5333  m2_loss_mask: 0.1687  m2_loss_dice: 1.239  m2_loss_ce_0: 0.5884  m2_loss_mask_0: 0.1911  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.6872  m2_loss_mask_1: 0.1766  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.6205  m2_loss_mask_2: 0.173  m2_loss_dice_2: 1.31  m2_loss_ce_3: 0.582  m2_loss_mask_3: 0.1722  m2_loss_dice_3: 1.252  m2_loss_ce_4: 0.5539  m2_loss_mask_4: 0.1675  m2_loss_dice_4: 1.229  m2_loss_ce_5: 0.5571  m2_loss_mask_5: 0.1685  m2_loss_dice_5: 1.252  m2_loss_ce_6: 0.5752  m2_loss_mask_6: 0.1737  m2_loss_dice_6: 1.242  m2_loss_ce_7: 0.5573  m2_loss_mask_7: 0.1722  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.5472  m2_loss_mask_8: 0.1713  m2_loss_dice_8: 1.234    time: 1.4379  last_time: 1.4194  data_time: 0.0675  last_data_time: 0.0507   lr: 0.0001  max_mem: 33894M
[10/06 22:33:09] d2.utils.events INFO:  eta: 0:21:54  iter: 99  total_loss: 40.53  m1_loss_ce: 0.5132  m1_loss_mask: 0.1715  m1_loss_dice: 1.247  m1_loss_ce_0: 0.5852  m1_loss_mask_0: 0.1957  m1_loss_dice_0: 1.455  m1_loss_ce_1: 0.6447  m1_loss_mask_1: 0.1795  m1_loss_dice_1: 1.386  m1_loss_ce_2: 0.59  m1_loss_mask_2: 0.1761  m1_loss_dice_2: 1.361  m1_loss_ce_3: 0.5301  m1_loss_mask_3: 0.1741  m1_loss_dice_3: 1.258  m1_loss_ce_4: 0.5118  m1_loss_mask_4: 0.1708  m1_loss_dice_4: 1.238  m1_loss_ce_5: 0.4975  m1_loss_mask_5: 0.1693  m1_loss_dice_5: 1.271  m1_loss_ce_6: 0.5114  m1_loss_mask_6: 0.1699  m1_loss_dice_6: 1.258  m1_loss_ce_7: 0.4801  m1_loss_mask_7: 0.1711  m1_loss_dice_7: 1.22  m1_loss_ce_8: 0.4814  m1_loss_mask_8: 0.1719  m1_loss_dice_8: 1.243  m2_loss_ce: 0.5725  m2_loss_mask: 0.171  m2_loss_dice: 1.209  m2_loss_ce_0: 0.5747  m2_loss_mask_0: 0.2053  m2_loss_dice_0: 1.509  m2_loss_ce_1: 0.7116  m2_loss_mask_1: 0.1801  m2_loss_dice_1: 1.372  m2_loss_ce_2: 0.6465  m2_loss_mask_2: 0.1721  m2_loss_dice_2: 1.312  m2_loss_ce_3: 0.5918  m2_loss_mask_3: 0.1706  m2_loss_dice_3: 1.256  m2_loss_ce_4: 0.5953  m2_loss_mask_4: 0.1693  m2_loss_dice_4: 1.268  m2_loss_ce_5: 0.6076  m2_loss_mask_5: 0.1714  m2_loss_dice_5: 1.226  m2_loss_ce_6: 0.5851  m2_loss_mask_6: 0.1706  m2_loss_dice_6: 1.228  m2_loss_ce_7: 0.578  m2_loss_mask_7: 0.1719  m2_loss_dice_7: 1.222  m2_loss_ce_8: 0.5674  m2_loss_mask_8: 0.169  m2_loss_dice_8: 1.243    time: 1.4459  last_time: 1.5078  data_time: 0.0672  last_data_time: 0.1225   lr: 0.0001  max_mem: 34536M
[10/06 22:33:37] d2.utils.events INFO:  eta: 0:21:23  iter: 119  total_loss: 38.33  m1_loss_ce: 0.4636  m1_loss_mask: 0.1597  m1_loss_dice: 1.166  m1_loss_ce_0: 0.5698  m1_loss_mask_0: 0.1934  m1_loss_dice_0: 1.439  m1_loss_ce_1: 0.6819  m1_loss_mask_1: 0.1755  m1_loss_dice_1: 1.314  m1_loss_ce_2: 0.5468  m1_loss_mask_2: 0.1615  m1_loss_dice_2: 1.251  m1_loss_ce_3: 0.5144  m1_loss_mask_3: 0.1606  m1_loss_dice_3: 1.2  m1_loss_ce_4: 0.4838  m1_loss_mask_4: 0.1593  m1_loss_dice_4: 1.173  m1_loss_ce_5: 0.4491  m1_loss_mask_5: 0.1593  m1_loss_dice_5: 1.186  m1_loss_ce_6: 0.4786  m1_loss_mask_6: 0.1599  m1_loss_dice_6: 1.159  m1_loss_ce_7: 0.5009  m1_loss_mask_7: 0.16  m1_loss_dice_7: 1.18  m1_loss_ce_8: 0.4662  m1_loss_mask_8: 0.1607  m1_loss_dice_8: 1.165  m2_loss_ce: 0.5082  m2_loss_mask: 0.1649  m2_loss_dice: 1.197  m2_loss_ce_0: 0.5996  m2_loss_mask_0: 0.1955  m2_loss_dice_0: 1.469  m2_loss_ce_1: 0.7001  m2_loss_mask_1: 0.1755  m2_loss_dice_1: 1.304  m2_loss_ce_2: 0.5962  m2_loss_mask_2: 0.1691  m2_loss_dice_2: 1.248  m2_loss_ce_3: 0.5478  m2_loss_mask_3: 0.1667  m2_loss_dice_3: 1.19  m2_loss_ce_4: 0.5584  m2_loss_mask_4: 0.1674  m2_loss_dice_4: 1.196  m2_loss_ce_5: 0.5253  m2_loss_mask_5: 0.1652  m2_loss_dice_5: 1.203  m2_loss_ce_6: 0.5101  m2_loss_mask_6: 0.1667  m2_loss_dice_6: 1.17  m2_loss_ce_7: 0.5036  m2_loss_mask_7: 0.1654  m2_loss_dice_7: 1.189  m2_loss_ce_8: 0.5406  m2_loss_mask_8: 0.1649  m2_loss_dice_8: 1.205    time: 1.4430  last_time: 1.3522  data_time: 0.0511  last_data_time: 0.0615   lr: 0.0001  max_mem: 34536M
[10/06 22:34:05] d2.utils.events INFO:  eta: 0:20:32  iter: 139  total_loss: 39.46  m1_loss_ce: 0.4302  m1_loss_mask: 0.1676  m1_loss_dice: 1.174  m1_loss_ce_0: 0.5793  m1_loss_mask_0: 0.1899  m1_loss_dice_0: 1.437  m1_loss_ce_1: 0.6321  m1_loss_mask_1: 0.1804  m1_loss_dice_1: 1.357  m1_loss_ce_2: 0.527  m1_loss_mask_2: 0.1708  m1_loss_dice_2: 1.288  m1_loss_ce_3: 0.4817  m1_loss_mask_3: 0.1687  m1_loss_dice_3: 1.246  m1_loss_ce_4: 0.4443  m1_loss_mask_4: 0.1709  m1_loss_dice_4: 1.205  m1_loss_ce_5: 0.4554  m1_loss_mask_5: 0.1647  m1_loss_dice_5: 1.237  m1_loss_ce_6: 0.4872  m1_loss_mask_6: 0.1683  m1_loss_dice_6: 1.175  m1_loss_ce_7: 0.469  m1_loss_mask_7: 0.1674  m1_loss_dice_7: 1.179  m1_loss_ce_8: 0.4489  m1_loss_mask_8: 0.1672  m1_loss_dice_8: 1.16  m2_loss_ce: 0.4777  m2_loss_mask: 0.1636  m2_loss_dice: 1.22  m2_loss_ce_0: 0.544  m2_loss_mask_0: 0.1958  m2_loss_dice_0: 1.491  m2_loss_ce_1: 0.6486  m2_loss_mask_1: 0.1751  m2_loss_dice_1: 1.261  m2_loss_ce_2: 0.5721  m2_loss_mask_2: 0.1708  m2_loss_dice_2: 1.274  m2_loss_ce_3: 0.518  m2_loss_mask_3: 0.1656  m2_loss_dice_3: 1.218  m2_loss_ce_4: 0.5155  m2_loss_mask_4: 0.1677  m2_loss_dice_4: 1.21  m2_loss_ce_5: 0.4948  m2_loss_mask_5: 0.1641  m2_loss_dice_5: 1.191  m2_loss_ce_6: 0.4949  m2_loss_mask_6: 0.1643  m2_loss_dice_6: 1.235  m2_loss_ce_7: 0.4743  m2_loss_mask_7: 0.1622  m2_loss_dice_7: 1.174  m2_loss_ce_8: 0.4885  m2_loss_mask_8: 0.1628  m2_loss_dice_8: 1.217    time: 1.4339  last_time: 1.3469  data_time: 0.0571  last_data_time: 0.0428   lr: 0.0001  max_mem: 34536M
[10/06 22:34:34] d2.utils.events INFO:  eta: 0:20:02  iter: 159  total_loss: 39.8  m1_loss_ce: 0.4378  m1_loss_mask: 0.1634  m1_loss_dice: 1.231  m1_loss_ce_0: 0.5427  m1_loss_mask_0: 0.195  m1_loss_dice_0: 1.441  m1_loss_ce_1: 0.6265  m1_loss_mask_1: 0.1796  m1_loss_dice_1: 1.31  m1_loss_ce_2: 0.5191  m1_loss_mask_2: 0.1753  m1_loss_dice_2: 1.271  m1_loss_ce_3: 0.5167  m1_loss_mask_3: 0.1666  m1_loss_dice_3: 1.219  m1_loss_ce_4: 0.4714  m1_loss_mask_4: 0.1683  m1_loss_dice_4: 1.246  m1_loss_ce_5: 0.4786  m1_loss_mask_5: 0.1686  m1_loss_dice_5: 1.239  m1_loss_ce_6: 0.4483  m1_loss_mask_6: 0.1659  m1_loss_dice_6: 1.231  m1_loss_ce_7: 0.44  m1_loss_mask_7: 0.1657  m1_loss_dice_7: 1.183  m1_loss_ce_8: 0.4786  m1_loss_mask_8: 0.1667  m1_loss_dice_8: 1.207  m2_loss_ce: 0.4874  m2_loss_mask: 0.1673  m2_loss_dice: 1.274  m2_loss_ce_0: 0.6238  m2_loss_mask_0: 0.2063  m2_loss_dice_0: 1.492  m2_loss_ce_1: 0.6534  m2_loss_mask_1: 0.1764  m2_loss_dice_1: 1.366  m2_loss_ce_2: 0.5761  m2_loss_mask_2: 0.1689  m2_loss_dice_2: 1.361  m2_loss_ce_3: 0.5409  m2_loss_mask_3: 0.1688  m2_loss_dice_3: 1.273  m2_loss_ce_4: 0.5778  m2_loss_mask_4: 0.1708  m2_loss_dice_4: 1.227  m2_loss_ce_5: 0.5131  m2_loss_mask_5: 0.1652  m2_loss_dice_5: 1.29  m2_loss_ce_6: 0.5116  m2_loss_mask_6: 0.1685  m2_loss_dice_6: 1.214  m2_loss_ce_7: 0.5164  m2_loss_mask_7: 0.1661  m2_loss_dice_7: 1.203  m2_loss_ce_8: 0.5035  m2_loss_mask_8: 0.1654  m2_loss_dice_8: 1.251    time: 1.4341  last_time: 1.4709  data_time: 0.0600  last_data_time: 0.0636   lr: 0.0001  max_mem: 34536M
[10/06 22:35:03] d2.utils.events INFO:  eta: 0:19:42  iter: 179  total_loss: 40.01  m1_loss_ce: 0.4914  m1_loss_mask: 0.1714  m1_loss_dice: 1.209  m1_loss_ce_0: 0.5702  m1_loss_mask_0: 0.1981  m1_loss_dice_0: 1.468  m1_loss_ce_1: 0.6467  m1_loss_mask_1: 0.1851  m1_loss_dice_1: 1.346  m1_loss_ce_2: 0.5773  m1_loss_mask_2: 0.1767  m1_loss_dice_2: 1.303  m1_loss_ce_3: 0.5444  m1_loss_mask_3: 0.176  m1_loss_dice_3: 1.232  m1_loss_ce_4: 0.5248  m1_loss_mask_4: 0.1734  m1_loss_dice_4: 1.248  m1_loss_ce_5: 0.5139  m1_loss_mask_5: 0.1753  m1_loss_dice_5: 1.267  m1_loss_ce_6: 0.4785  m1_loss_mask_6: 0.1756  m1_loss_dice_6: 1.227  m1_loss_ce_7: 0.5047  m1_loss_mask_7: 0.174  m1_loss_dice_7: 1.229  m1_loss_ce_8: 0.4922  m1_loss_mask_8: 0.1711  m1_loss_dice_8: 1.24  m2_loss_ce: 0.5225  m2_loss_mask: 0.1711  m2_loss_dice: 1.243  m2_loss_ce_0: 0.5808  m2_loss_mask_0: 0.2053  m2_loss_dice_0: 1.534  m2_loss_ce_1: 0.6913  m2_loss_mask_1: 0.1822  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.6285  m2_loss_mask_2: 0.1814  m2_loss_dice_2: 1.3  m2_loss_ce_3: 0.5747  m2_loss_mask_3: 0.1804  m2_loss_dice_3: 1.276  m2_loss_ce_4: 0.5965  m2_loss_mask_4: 0.1755  m2_loss_dice_4: 1.256  m2_loss_ce_5: 0.5865  m2_loss_mask_5: 0.173  m2_loss_dice_5: 1.237  m2_loss_ce_6: 0.5772  m2_loss_mask_6: 0.172  m2_loss_dice_6: 1.248  m2_loss_ce_7: 0.5758  m2_loss_mask_7: 0.1712  m2_loss_dice_7: 1.232  m2_loss_ce_8: 0.541  m2_loss_mask_8: 0.1725  m2_loss_dice_8: 1.24    time: 1.4378  last_time: 1.4840  data_time: 0.0538  last_data_time: 0.0544   lr: 0.0001  max_mem: 34536M
[10/06 22:35:31] d2.utils.events INFO:  eta: 0:19:09  iter: 199  total_loss: 39.59  m1_loss_ce: 0.4642  m1_loss_mask: 0.1698  m1_loss_dice: 1.24  m1_loss_ce_0: 0.5283  m1_loss_mask_0: 0.1916  m1_loss_dice_0: 1.448  m1_loss_ce_1: 0.5852  m1_loss_mask_1: 0.1817  m1_loss_dice_1: 1.361  m1_loss_ce_2: 0.5526  m1_loss_mask_2: 0.17  m1_loss_dice_2: 1.29  m1_loss_ce_3: 0.5098  m1_loss_mask_3: 0.1719  m1_loss_dice_3: 1.274  m1_loss_ce_4: 0.46  m1_loss_mask_4: 0.1724  m1_loss_dice_4: 1.271  m1_loss_ce_5: 0.4695  m1_loss_mask_5: 0.1695  m1_loss_dice_5: 1.266  m1_loss_ce_6: 0.4572  m1_loss_mask_6: 0.1716  m1_loss_dice_6: 1.277  m1_loss_ce_7: 0.4797  m1_loss_mask_7: 0.1707  m1_loss_dice_7: 1.277  m1_loss_ce_8: 0.4825  m1_loss_mask_8: 0.1711  m1_loss_dice_8: 1.243  m2_loss_ce: 0.5068  m2_loss_mask: 0.1632  m2_loss_dice: 1.239  m2_loss_ce_0: 0.5893  m2_loss_mask_0: 0.1984  m2_loss_dice_0: 1.508  m2_loss_ce_1: 0.6715  m2_loss_mask_1: 0.1757  m2_loss_dice_1: 1.338  m2_loss_ce_2: 0.6283  m2_loss_mask_2: 0.17  m2_loss_dice_2: 1.252  m2_loss_ce_3: 0.552  m2_loss_mask_3: 0.1658  m2_loss_dice_3: 1.257  m2_loss_ce_4: 0.5476  m2_loss_mask_4: 0.166  m2_loss_dice_4: 1.213  m2_loss_ce_5: 0.5202  m2_loss_mask_5: 0.1632  m2_loss_dice_5: 1.262  m2_loss_ce_6: 0.4923  m2_loss_mask_6: 0.163  m2_loss_dice_6: 1.232  m2_loss_ce_7: 0.4964  m2_loss_mask_7: 0.1635  m2_loss_dice_7: 1.232  m2_loss_ce_8: 0.5056  m2_loss_mask_8: 0.1607  m2_loss_dice_8: 1.211    time: 1.4341  last_time: 1.3604  data_time: 0.0587  last_data_time: 0.0360   lr: 0.0001  max_mem: 34536M
[10/06 22:36:00] d2.utils.events INFO:  eta: 0:18:39  iter: 219  total_loss: 40.02  m1_loss_ce: 0.4939  m1_loss_mask: 0.1636  m1_loss_dice: 1.253  m1_loss_ce_0: 0.5833  m1_loss_mask_0: 0.1875  m1_loss_dice_0: 1.41  m1_loss_ce_1: 0.6304  m1_loss_mask_1: 0.1839  m1_loss_dice_1: 1.333  m1_loss_ce_2: 0.5718  m1_loss_mask_2: 0.1732  m1_loss_dice_2: 1.29  m1_loss_ce_3: 0.534  m1_loss_mask_3: 0.1695  m1_loss_dice_3: 1.241  m1_loss_ce_4: 0.5237  m1_loss_mask_4: 0.1657  m1_loss_dice_4: 1.261  m1_loss_ce_5: 0.5009  m1_loss_mask_5: 0.1669  m1_loss_dice_5: 1.279  m1_loss_ce_6: 0.4861  m1_loss_mask_6: 0.1656  m1_loss_dice_6: 1.302  m1_loss_ce_7: 0.4794  m1_loss_mask_7: 0.1642  m1_loss_dice_7: 1.249  m1_loss_ce_8: 0.4956  m1_loss_mask_8: 0.1633  m1_loss_dice_8: 1.249  m2_loss_ce: 0.5445  m2_loss_mask: 0.1652  m2_loss_dice: 1.205  m2_loss_ce_0: 0.6151  m2_loss_mask_0: 0.1924  m2_loss_dice_0: 1.476  m2_loss_ce_1: 0.6776  m2_loss_mask_1: 0.1726  m2_loss_dice_1: 1.354  m2_loss_ce_2: 0.6387  m2_loss_mask_2: 0.1678  m2_loss_dice_2: 1.265  m2_loss_ce_3: 0.5955  m2_loss_mask_3: 0.1652  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.5749  m2_loss_mask_4: 0.1682  m2_loss_dice_4: 1.223  m2_loss_ce_5: 0.573  m2_loss_mask_5: 0.1675  m2_loss_dice_5: 1.231  m2_loss_ce_6: 0.5441  m2_loss_mask_6: 0.1678  m2_loss_dice_6: 1.24  m2_loss_ce_7: 0.5611  m2_loss_mask_7: 0.1646  m2_loss_dice_7: 1.224  m2_loss_ce_8: 0.574  m2_loss_mask_8: 0.1645  m2_loss_dice_8: 1.217    time: 1.4325  last_time: 1.3716  data_time: 0.0532  last_data_time: 0.0506   lr: 0.0001  max_mem: 34536M
[10/06 22:36:29] d2.utils.events INFO:  eta: 0:18:14  iter: 239  total_loss: 40.59  m1_loss_ce: 0.4735  m1_loss_mask: 0.1712  m1_loss_dice: 1.241  m1_loss_ce_0: 0.5769  m1_loss_mask_0: 0.1983  m1_loss_dice_0: 1.41  m1_loss_ce_1: 0.6474  m1_loss_mask_1: 0.1867  m1_loss_dice_1: 1.391  m1_loss_ce_2: 0.5714  m1_loss_mask_2: 0.1787  m1_loss_dice_2: 1.315  m1_loss_ce_3: 0.5343  m1_loss_mask_3: 0.1778  m1_loss_dice_3: 1.273  m1_loss_ce_4: 0.5177  m1_loss_mask_4: 0.1713  m1_loss_dice_4: 1.274  m1_loss_ce_5: 0.5136  m1_loss_mask_5: 0.1735  m1_loss_dice_5: 1.245  m1_loss_ce_6: 0.4779  m1_loss_mask_6: 0.1722  m1_loss_dice_6: 1.261  m1_loss_ce_7: 0.4614  m1_loss_mask_7: 0.1717  m1_loss_dice_7: 1.235  m1_loss_ce_8: 0.4668  m1_loss_mask_8: 0.1722  m1_loss_dice_8: 1.233  m2_loss_ce: 0.5321  m2_loss_mask: 0.1717  m2_loss_dice: 1.265  m2_loss_ce_0: 0.5957  m2_loss_mask_0: 0.1955  m2_loss_dice_0: 1.468  m2_loss_ce_1: 0.6841  m2_loss_mask_1: 0.1873  m2_loss_dice_1: 1.361  m2_loss_ce_2: 0.6461  m2_loss_mask_2: 0.1755  m2_loss_dice_2: 1.297  m2_loss_ce_3: 0.5901  m2_loss_mask_3: 0.1738  m2_loss_dice_3: 1.248  m2_loss_ce_4: 0.5684  m2_loss_mask_4: 0.1766  m2_loss_dice_4: 1.237  m2_loss_ce_5: 0.572  m2_loss_mask_5: 0.1732  m2_loss_dice_5: 1.274  m2_loss_ce_6: 0.5692  m2_loss_mask_6: 0.1724  m2_loss_dice_6: 1.208  m2_loss_ce_7: 0.5347  m2_loss_mask_7: 0.1722  m2_loss_dice_7: 1.219  m2_loss_ce_8: 0.5442  m2_loss_mask_8: 0.1719  m2_loss_dice_8: 1.244    time: 1.4347  last_time: 1.4592  data_time: 0.0593  last_data_time: 0.0437   lr: 0.0001  max_mem: 34536M
[10/06 22:36:58] d2.utils.events INFO:  eta: 0:17:46  iter: 259  total_loss: 40.33  m1_loss_ce: 0.4678  m1_loss_mask: 0.1754  m1_loss_dice: 1.217  m1_loss_ce_0: 0.548  m1_loss_mask_0: 0.2032  m1_loss_dice_0: 1.397  m1_loss_ce_1: 0.6209  m1_loss_mask_1: 0.193  m1_loss_dice_1: 1.353  m1_loss_ce_2: 0.5261  m1_loss_mask_2: 0.183  m1_loss_dice_2: 1.26  m1_loss_ce_3: 0.5137  m1_loss_mask_3: 0.1814  m1_loss_dice_3: 1.246  m1_loss_ce_4: 0.482  m1_loss_mask_4: 0.1786  m1_loss_dice_4: 1.241  m1_loss_ce_5: 0.4799  m1_loss_mask_5: 0.1774  m1_loss_dice_5: 1.228  m1_loss_ce_6: 0.4633  m1_loss_mask_6: 0.1793  m1_loss_dice_6: 1.217  m1_loss_ce_7: 0.4675  m1_loss_mask_7: 0.18  m1_loss_dice_7: 1.215  m1_loss_ce_8: 0.4625  m1_loss_mask_8: 0.1762  m1_loss_dice_8: 1.243  m2_loss_ce: 0.5424  m2_loss_mask: 0.1694  m2_loss_dice: 1.233  m2_loss_ce_0: 0.5588  m2_loss_mask_0: 0.2001  m2_loss_dice_0: 1.455  m2_loss_ce_1: 0.6697  m2_loss_mask_1: 0.185  m2_loss_dice_1: 1.352  m2_loss_ce_2: 0.5783  m2_loss_mask_2: 0.1761  m2_loss_dice_2: 1.295  m2_loss_ce_3: 0.5363  m2_loss_mask_3: 0.1748  m2_loss_dice_3: 1.242  m2_loss_ce_4: 0.5253  m2_loss_mask_4: 0.1744  m2_loss_dice_4: 1.258  m2_loss_ce_5: 0.5106  m2_loss_mask_5: 0.1722  m2_loss_dice_5: 1.27  m2_loss_ce_6: 0.5054  m2_loss_mask_6: 0.1709  m2_loss_dice_6: 1.234  m2_loss_ce_7: 0.5175  m2_loss_mask_7: 0.1684  m2_loss_dice_7: 1.224  m2_loss_ce_8: 0.5193  m2_loss_mask_8: 0.1703  m2_loss_dice_8: 1.244    time: 1.4347  last_time: 1.5072  data_time: 0.0550  last_data_time: 0.0913   lr: 0.0001  max_mem: 34536M
[10/06 22:37:26] d2.utils.events INFO:  eta: 0:17:13  iter: 279  total_loss: 39.91  m1_loss_ce: 0.4497  m1_loss_mask: 0.177  m1_loss_dice: 1.228  m1_loss_ce_0: 0.5525  m1_loss_mask_0: 0.1978  m1_loss_dice_0: 1.442  m1_loss_ce_1: 0.6124  m1_loss_mask_1: 0.1829  m1_loss_dice_1: 1.388  m1_loss_ce_2: 0.5583  m1_loss_mask_2: 0.1708  m1_loss_dice_2: 1.302  m1_loss_ce_3: 0.5187  m1_loss_mask_3: 0.1698  m1_loss_dice_3: 1.297  m1_loss_ce_4: 0.4979  m1_loss_mask_4: 0.1714  m1_loss_dice_4: 1.269  m1_loss_ce_5: 0.484  m1_loss_mask_5: 0.1732  m1_loss_dice_5: 1.252  m1_loss_ce_6: 0.4494  m1_loss_mask_6: 0.1756  m1_loss_dice_6: 1.246  m1_loss_ce_7: 0.4971  m1_loss_mask_7: 0.1762  m1_loss_dice_7: 1.242  m1_loss_ce_8: 0.4727  m1_loss_mask_8: 0.1728  m1_loss_dice_8: 1.241  m2_loss_ce: 0.5385  m2_loss_mask: 0.1623  m2_loss_dice: 1.28  m2_loss_ce_0: 0.5981  m2_loss_mask_0: 0.1931  m2_loss_dice_0: 1.451  m2_loss_ce_1: 0.6385  m2_loss_mask_1: 0.1796  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.6018  m2_loss_mask_2: 0.1684  m2_loss_dice_2: 1.316  m2_loss_ce_3: 0.5691  m2_loss_mask_3: 0.1646  m2_loss_dice_3: 1.235  m2_loss_ce_4: 0.5662  m2_loss_mask_4: 0.1668  m2_loss_dice_4: 1.251  m2_loss_ce_5: 0.535  m2_loss_mask_5: 0.1616  m2_loss_dice_5: 1.274  m2_loss_ce_6: 0.5127  m2_loss_mask_6: 0.1655  m2_loss_dice_6: 1.239  m2_loss_ce_7: 0.5189  m2_loss_mask_7: 0.1623  m2_loss_dice_7: 1.238  m2_loss_ce_8: 0.5175  m2_loss_mask_8: 0.162  m2_loss_dice_8: 1.254    time: 1.4333  last_time: 1.4411  data_time: 0.0528  last_data_time: 0.0736   lr: 0.0001  max_mem: 34780M
[10/06 22:37:55] d2.utils.events INFO:  eta: 0:16:43  iter: 299  total_loss: 40.05  m1_loss_ce: 0.4718  m1_loss_mask: 0.1611  m1_loss_dice: 1.279  m1_loss_ce_0: 0.5683  m1_loss_mask_0: 0.1888  m1_loss_dice_0: 1.402  m1_loss_ce_1: 0.6809  m1_loss_mask_1: 0.1746  m1_loss_dice_1: 1.376  m1_loss_ce_2: 0.5789  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.322  m1_loss_ce_3: 0.5689  m1_loss_mask_3: 0.1659  m1_loss_dice_3: 1.308  m1_loss_ce_4: 0.5446  m1_loss_mask_4: 0.1638  m1_loss_dice_4: 1.272  m1_loss_ce_5: 0.5359  m1_loss_mask_5: 0.1618  m1_loss_dice_5: 1.273  m1_loss_ce_6: 0.5136  m1_loss_mask_6: 0.1645  m1_loss_dice_6: 1.28  m1_loss_ce_7: 0.5084  m1_loss_mask_7: 0.1626  m1_loss_dice_7: 1.304  m1_loss_ce_8: 0.4795  m1_loss_mask_8: 0.1606  m1_loss_dice_8: 1.267  m2_loss_ce: 0.5748  m2_loss_mask: 0.1537  m2_loss_dice: 1.253  m2_loss_ce_0: 0.6173  m2_loss_mask_0: 0.1835  m2_loss_dice_0: 1.497  m2_loss_ce_1: 0.7157  m2_loss_mask_1: 0.176  m2_loss_dice_1: 1.344  m2_loss_ce_2: 0.6493  m2_loss_mask_2: 0.1686  m2_loss_dice_2: 1.316  m2_loss_ce_3: 0.6007  m2_loss_mask_3: 0.1618  m2_loss_dice_3: 1.298  m2_loss_ce_4: 0.5867  m2_loss_mask_4: 0.1575  m2_loss_dice_4: 1.26  m2_loss_ce_5: 0.609  m2_loss_mask_5: 0.1562  m2_loss_dice_5: 1.301  m2_loss_ce_6: 0.5749  m2_loss_mask_6: 0.158  m2_loss_dice_6: 1.268  m2_loss_ce_7: 0.5644  m2_loss_mask_7: 0.1577  m2_loss_dice_7: 1.251  m2_loss_ce_8: 0.5279  m2_loss_mask_8: 0.1563  m2_loss_dice_8: 1.263    time: 1.4331  last_time: 1.3850  data_time: 0.0741  last_data_time: 0.0654   lr: 0.0001  max_mem: 34780M
[10/06 22:38:25] d2.utils.events INFO:  eta: 0:16:19  iter: 319  total_loss: 39.84  m1_loss_ce: 0.4716  m1_loss_mask: 0.1619  m1_loss_dice: 1.179  m1_loss_ce_0: 0.5778  m1_loss_mask_0: 0.1835  m1_loss_dice_0: 1.398  m1_loss_ce_1: 0.6399  m1_loss_mask_1: 0.1747  m1_loss_dice_1: 1.332  m1_loss_ce_2: 0.561  m1_loss_mask_2: 0.1668  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.5149  m1_loss_mask_3: 0.1684  m1_loss_dice_3: 1.211  m1_loss_ce_4: 0.5079  m1_loss_mask_4: 0.1659  m1_loss_dice_4: 1.218  m1_loss_ce_5: 0.5042  m1_loss_mask_5: 0.164  m1_loss_dice_5: 1.163  m1_loss_ce_6: 0.4682  m1_loss_mask_6: 0.1619  m1_loss_dice_6: 1.182  m1_loss_ce_7: 0.4838  m1_loss_mask_7: 0.1653  m1_loss_dice_7: 1.174  m1_loss_ce_8: 0.5045  m1_loss_mask_8: 0.1604  m1_loss_dice_8: 1.224  m2_loss_ce: 0.5155  m2_loss_mask: 0.1634  m2_loss_dice: 1.193  m2_loss_ce_0: 0.5832  m2_loss_mask_0: 0.1944  m2_loss_dice_0: 1.4  m2_loss_ce_1: 0.6943  m2_loss_mask_1: 0.1738  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.6037  m2_loss_mask_2: 0.1654  m2_loss_dice_2: 1.283  m2_loss_ce_3: 0.5586  m2_loss_mask_3: 0.1679  m2_loss_dice_3: 1.22  m2_loss_ce_4: 0.5338  m2_loss_mask_4: 0.1673  m2_loss_dice_4: 1.216  m2_loss_ce_5: 0.5592  m2_loss_mask_5: 0.1657  m2_loss_dice_5: 1.192  m2_loss_ce_6: 0.5153  m2_loss_mask_6: 0.167  m2_loss_dice_6: 1.188  m2_loss_ce_7: 0.5208  m2_loss_mask_7: 0.1662  m2_loss_dice_7: 1.186  m2_loss_ce_8: 0.5225  m2_loss_mask_8: 0.1659  m2_loss_dice_8: 1.191    time: 1.4365  last_time: 1.5339  data_time: 0.0707  last_data_time: 0.0746   lr: 0.0001  max_mem: 34780M
[10/06 22:38:54] d2.utils.events INFO:  eta: 0:15:51  iter: 339  total_loss: 39.14  m1_loss_ce: 0.4572  m1_loss_mask: 0.1671  m1_loss_dice: 1.202  m1_loss_ce_0: 0.5947  m1_loss_mask_0: 0.1942  m1_loss_dice_0: 1.396  m1_loss_ce_1: 0.6093  m1_loss_mask_1: 0.1785  m1_loss_dice_1: 1.313  m1_loss_ce_2: 0.5547  m1_loss_mask_2: 0.1709  m1_loss_dice_2: 1.271  m1_loss_ce_3: 0.4716  m1_loss_mask_3: 0.1686  m1_loss_dice_3: 1.208  m1_loss_ce_4: 0.489  m1_loss_mask_4: 0.1679  m1_loss_dice_4: 1.188  m1_loss_ce_5: 0.4769  m1_loss_mask_5: 0.1672  m1_loss_dice_5: 1.199  m1_loss_ce_6: 0.4638  m1_loss_mask_6: 0.1662  m1_loss_dice_6: 1.169  m1_loss_ce_7: 0.4799  m1_loss_mask_7: 0.166  m1_loss_dice_7: 1.164  m1_loss_ce_8: 0.4708  m1_loss_mask_8: 0.1677  m1_loss_dice_8: 1.184  m2_loss_ce: 0.5015  m2_loss_mask: 0.1671  m2_loss_dice: 1.188  m2_loss_ce_0: 0.5776  m2_loss_mask_0: 0.1969  m2_loss_dice_0: 1.426  m2_loss_ce_1: 0.6553  m2_loss_mask_1: 0.1811  m2_loss_dice_1: 1.286  m2_loss_ce_2: 0.5993  m2_loss_mask_2: 0.17  m2_loss_dice_2: 1.252  m2_loss_ce_3: 0.5638  m2_loss_mask_3: 0.1727  m2_loss_dice_3: 1.194  m2_loss_ce_4: 0.5804  m2_loss_mask_4: 0.171  m2_loss_dice_4: 1.155  m2_loss_ce_5: 0.5353  m2_loss_mask_5: 0.1655  m2_loss_dice_5: 1.205  m2_loss_ce_6: 0.5087  m2_loss_mask_6: 0.1701  m2_loss_dice_6: 1.157  m2_loss_ce_7: 0.5412  m2_loss_mask_7: 0.1679  m2_loss_dice_7: 1.2  m2_loss_ce_8: 0.5363  m2_loss_mask_8: 0.1662  m2_loss_dice_8: 1.17    time: 1.4378  last_time: 1.4870  data_time: 0.0543  last_data_time: 0.0408   lr: 0.0001  max_mem: 34780M
[10/06 22:39:22] d2.utils.events INFO:  eta: 0:15:18  iter: 359  total_loss: 40.37  m1_loss_ce: 0.5099  m1_loss_mask: 0.1718  m1_loss_dice: 1.222  m1_loss_ce_0: 0.5786  m1_loss_mask_0: 0.2006  m1_loss_dice_0: 1.431  m1_loss_ce_1: 0.6288  m1_loss_mask_1: 0.1864  m1_loss_dice_1: 1.368  m1_loss_ce_2: 0.5856  m1_loss_mask_2: 0.1786  m1_loss_dice_2: 1.304  m1_loss_ce_3: 0.5624  m1_loss_mask_3: 0.1733  m1_loss_dice_3: 1.242  m1_loss_ce_4: 0.555  m1_loss_mask_4: 0.1726  m1_loss_dice_4: 1.229  m1_loss_ce_5: 0.5264  m1_loss_mask_5: 0.1721  m1_loss_dice_5: 1.216  m1_loss_ce_6: 0.5127  m1_loss_mask_6: 0.1748  m1_loss_dice_6: 1.217  m1_loss_ce_7: 0.506  m1_loss_mask_7: 0.1769  m1_loss_dice_7: 1.204  m1_loss_ce_8: 0.5144  m1_loss_mask_8: 0.174  m1_loss_dice_8: 1.205  m2_loss_ce: 0.5335  m2_loss_mask: 0.1705  m2_loss_dice: 1.225  m2_loss_ce_0: 0.5844  m2_loss_mask_0: 0.2073  m2_loss_dice_0: 1.489  m2_loss_ce_1: 0.6973  m2_loss_mask_1: 0.1841  m2_loss_dice_1: 1.336  m2_loss_ce_2: 0.6386  m2_loss_mask_2: 0.1781  m2_loss_dice_2: 1.287  m2_loss_ce_3: 0.5877  m2_loss_mask_3: 0.1801  m2_loss_dice_3: 1.275  m2_loss_ce_4: 0.5935  m2_loss_mask_4: 0.1718  m2_loss_dice_4: 1.216  m2_loss_ce_5: 0.5834  m2_loss_mask_5: 0.1711  m2_loss_dice_5: 1.23  m2_loss_ce_6: 0.5473  m2_loss_mask_6: 0.1727  m2_loss_dice_6: 1.2  m2_loss_ce_7: 0.5589  m2_loss_mask_7: 0.1746  m2_loss_dice_7: 1.211  m2_loss_ce_8: 0.5497  m2_loss_mask_8: 0.1689  m2_loss_dice_8: 1.26    time: 1.4360  last_time: 1.3659  data_time: 0.0591  last_data_time: 0.0388   lr: 0.0001  max_mem: 34780M
[10/06 22:39:51] d2.utils.events INFO:  eta: 0:14:50  iter: 379  total_loss: 39.74  m1_loss_ce: 0.4943  m1_loss_mask: 0.1605  m1_loss_dice: 1.2  m1_loss_ce_0: 0.5745  m1_loss_mask_0: 0.1881  m1_loss_dice_0: 1.373  m1_loss_ce_1: 0.626  m1_loss_mask_1: 0.1792  m1_loss_dice_1: 1.295  m1_loss_ce_2: 0.5689  m1_loss_mask_2: 0.1661  m1_loss_dice_2: 1.286  m1_loss_ce_3: 0.5739  m1_loss_mask_3: 0.163  m1_loss_dice_3: 1.206  m1_loss_ce_4: 0.4919  m1_loss_mask_4: 0.1614  m1_loss_dice_4: 1.225  m1_loss_ce_5: 0.4929  m1_loss_mask_5: 0.1589  m1_loss_dice_5: 1.199  m1_loss_ce_6: 0.4719  m1_loss_mask_6: 0.1603  m1_loss_dice_6: 1.152  m1_loss_ce_7: 0.4845  m1_loss_mask_7: 0.1613  m1_loss_dice_7: 1.201  m1_loss_ce_8: 0.4751  m1_loss_mask_8: 0.1609  m1_loss_dice_8: 1.188  m2_loss_ce: 0.526  m2_loss_mask: 0.1644  m2_loss_dice: 1.196  m2_loss_ce_0: 0.5923  m2_loss_mask_0: 0.1979  m2_loss_dice_0: 1.465  m2_loss_ce_1: 0.6448  m2_loss_mask_1: 0.1782  m2_loss_dice_1: 1.291  m2_loss_ce_2: 0.6013  m2_loss_mask_2: 0.1668  m2_loss_dice_2: 1.282  m2_loss_ce_3: 0.5765  m2_loss_mask_3: 0.1674  m2_loss_dice_3: 1.208  m2_loss_ce_4: 0.5567  m2_loss_mask_4: 0.1623  m2_loss_dice_4: 1.244  m2_loss_ce_5: 0.562  m2_loss_mask_5: 0.163  m2_loss_dice_5: 1.239  m2_loss_ce_6: 0.5357  m2_loss_mask_6: 0.1654  m2_loss_dice_6: 1.195  m2_loss_ce_7: 0.4897  m2_loss_mask_7: 0.165  m2_loss_dice_7: 1.197  m2_loss_ce_8: 0.5301  m2_loss_mask_8: 0.1611  m2_loss_dice_8: 1.206    time: 1.4363  last_time: 1.5697  data_time: 0.0561  last_data_time: 0.0443   lr: 0.0001  max_mem: 34780M
[10/06 22:40:21] d2.utils.events INFO:  eta: 0:14:24  iter: 399  total_loss: 39.59  m1_loss_ce: 0.4791  m1_loss_mask: 0.165  m1_loss_dice: 1.209  m1_loss_ce_0: 0.5662  m1_loss_mask_0: 0.1941  m1_loss_dice_0: 1.485  m1_loss_ce_1: 0.6366  m1_loss_mask_1: 0.1774  m1_loss_dice_1: 1.335  m1_loss_ce_2: 0.5275  m1_loss_mask_2: 0.1723  m1_loss_dice_2: 1.295  m1_loss_ce_3: 0.5266  m1_loss_mask_3: 0.1745  m1_loss_dice_3: 1.211  m1_loss_ce_4: 0.4998  m1_loss_mask_4: 0.1673  m1_loss_dice_4: 1.24  m1_loss_ce_5: 0.4965  m1_loss_mask_5: 0.1634  m1_loss_dice_5: 1.227  m1_loss_ce_6: 0.5114  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.187  m1_loss_ce_7: 0.4795  m1_loss_mask_7: 0.1648  m1_loss_dice_7: 1.157  m1_loss_ce_8: 0.5264  m1_loss_mask_8: 0.1632  m1_loss_dice_8: 1.224  m2_loss_ce: 0.5069  m2_loss_mask: 0.1712  m2_loss_dice: 1.209  m2_loss_ce_0: 0.5835  m2_loss_mask_0: 0.207  m2_loss_dice_0: 1.494  m2_loss_ce_1: 0.683  m2_loss_mask_1: 0.1797  m2_loss_dice_1: 1.365  m2_loss_ce_2: 0.6027  m2_loss_mask_2: 0.1761  m2_loss_dice_2: 1.296  m2_loss_ce_3: 0.5628  m2_loss_mask_3: 0.1753  m2_loss_dice_3: 1.248  m2_loss_ce_4: 0.5509  m2_loss_mask_4: 0.175  m2_loss_dice_4: 1.207  m2_loss_ce_5: 0.5469  m2_loss_mask_5: 0.1731  m2_loss_dice_5: 1.217  m2_loss_ce_6: 0.557  m2_loss_mask_6: 0.1745  m2_loss_dice_6: 1.215  m2_loss_ce_7: 0.5544  m2_loss_mask_7: 0.1717  m2_loss_dice_7: 1.203  m2_loss_ce_8: 0.5471  m2_loss_mask_8: 0.1714  m2_loss_dice_8: 1.213    time: 1.4392  last_time: 1.4832  data_time: 0.0533  last_data_time: 0.0506   lr: 0.0001  max_mem: 34780M
[10/06 22:40:51] d2.utils.events INFO:  eta: 0:13:56  iter: 419  total_loss: 40.63  m1_loss_ce: 0.4864  m1_loss_mask: 0.1557  m1_loss_dice: 1.224  m1_loss_ce_0: 0.5902  m1_loss_mask_0: 0.1816  m1_loss_dice_0: 1.363  m1_loss_ce_1: 0.6465  m1_loss_mask_1: 0.1724  m1_loss_dice_1: 1.311  m1_loss_ce_2: 0.5986  m1_loss_mask_2: 0.1597  m1_loss_dice_2: 1.281  m1_loss_ce_3: 0.5331  m1_loss_mask_3: 0.1583  m1_loss_dice_3: 1.249  m1_loss_ce_4: 0.5305  m1_loss_mask_4: 0.1559  m1_loss_dice_4: 1.22  m1_loss_ce_5: 0.5236  m1_loss_mask_5: 0.156  m1_loss_dice_5: 1.241  m1_loss_ce_6: 0.5234  m1_loss_mask_6: 0.1572  m1_loss_dice_6: 1.218  m1_loss_ce_7: 0.519  m1_loss_mask_7: 0.1578  m1_loss_dice_7: 1.205  m1_loss_ce_8: 0.5154  m1_loss_mask_8: 0.154  m1_loss_dice_8: 1.219  m2_loss_ce: 0.6017  m2_loss_mask: 0.1634  m2_loss_dice: 1.277  m2_loss_ce_0: 0.6192  m2_loss_mask_0: 0.1975  m2_loss_dice_0: 1.457  m2_loss_ce_1: 0.7128  m2_loss_mask_1: 0.1747  m2_loss_dice_1: 1.344  m2_loss_ce_2: 0.6449  m2_loss_mask_2: 0.1617  m2_loss_dice_2: 1.278  m2_loss_ce_3: 0.6118  m2_loss_mask_3: 0.162  m2_loss_dice_3: 1.264  m2_loss_ce_4: 0.5995  m2_loss_mask_4: 0.1652  m2_loss_dice_4: 1.265  m2_loss_ce_5: 0.6006  m2_loss_mask_5: 0.1619  m2_loss_dice_5: 1.255  m2_loss_ce_6: 0.5873  m2_loss_mask_6: 0.1646  m2_loss_dice_6: 1.263  m2_loss_ce_7: 0.5908  m2_loss_mask_7: 0.1619  m2_loss_dice_7: 1.257  m2_loss_ce_8: 0.6003  m2_loss_mask_8: 0.1628  m2_loss_dice_8: 1.255    time: 1.4417  last_time: 1.3557  data_time: 0.0604  last_data_time: 0.0539   lr: 0.0001  max_mem: 34780M
[10/06 22:41:19] d2.utils.events INFO:  eta: 0:13:26  iter: 439  total_loss: 37.94  m1_loss_ce: 0.4211  m1_loss_mask: 0.1727  m1_loss_dice: 1.177  m1_loss_ce_0: 0.5354  m1_loss_mask_0: 0.199  m1_loss_dice_0: 1.362  m1_loss_ce_1: 0.5984  m1_loss_mask_1: 0.1844  m1_loss_dice_1: 1.293  m1_loss_ce_2: 0.553  m1_loss_mask_2: 0.1794  m1_loss_dice_2: 1.243  m1_loss_ce_3: 0.5402  m1_loss_mask_3: 0.173  m1_loss_dice_3: 1.179  m1_loss_ce_4: 0.4715  m1_loss_mask_4: 0.1722  m1_loss_dice_4: 1.177  m1_loss_ce_5: 0.4829  m1_loss_mask_5: 0.1691  m1_loss_dice_5: 1.199  m1_loss_ce_6: 0.4624  m1_loss_mask_6: 0.1723  m1_loss_dice_6: 1.161  m1_loss_ce_7: 0.4549  m1_loss_mask_7: 0.1714  m1_loss_dice_7: 1.164  m1_loss_ce_8: 0.4545  m1_loss_mask_8: 0.1723  m1_loss_dice_8: 1.157  m2_loss_ce: 0.5497  m2_loss_mask: 0.1701  m2_loss_dice: 1.177  m2_loss_ce_0: 0.5577  m2_loss_mask_0: 0.2042  m2_loss_dice_0: 1.443  m2_loss_ce_1: 0.6464  m2_loss_mask_1: 0.1869  m2_loss_dice_1: 1.293  m2_loss_ce_2: 0.6011  m2_loss_mask_2: 0.1804  m2_loss_dice_2: 1.247  m2_loss_ce_3: 0.5372  m2_loss_mask_3: 0.1757  m2_loss_dice_3: 1.203  m2_loss_ce_4: 0.521  m2_loss_mask_4: 0.1759  m2_loss_dice_4: 1.196  m2_loss_ce_5: 0.5367  m2_loss_mask_5: 0.1752  m2_loss_dice_5: 1.192  m2_loss_ce_6: 0.52  m2_loss_mask_6: 0.1764  m2_loss_dice_6: 1.184  m2_loss_ce_7: 0.5203  m2_loss_mask_7: 0.1743  m2_loss_dice_7: 1.176  m2_loss_ce_8: 0.5176  m2_loss_mask_8: 0.1708  m2_loss_dice_8: 1.16    time: 1.4396  last_time: 1.4478  data_time: 0.0566  last_data_time: 0.0420   lr: 0.0001  max_mem: 34780M
[10/06 22:41:48] d2.utils.events INFO:  eta: 0:12:56  iter: 459  total_loss: 40.22  m1_loss_ce: 0.4382  m1_loss_mask: 0.1569  m1_loss_dice: 1.225  m1_loss_ce_0: 0.5809  m1_loss_mask_0: 0.1846  m1_loss_dice_0: 1.426  m1_loss_ce_1: 0.6332  m1_loss_mask_1: 0.1714  m1_loss_dice_1: 1.318  m1_loss_ce_2: 0.5653  m1_loss_mask_2: 0.1656  m1_loss_dice_2: 1.27  m1_loss_ce_3: 0.5375  m1_loss_mask_3: 0.1597  m1_loss_dice_3: 1.228  m1_loss_ce_4: 0.5014  m1_loss_mask_4: 0.1603  m1_loss_dice_4: 1.215  m1_loss_ce_5: 0.4943  m1_loss_mask_5: 0.1593  m1_loss_dice_5: 1.221  m1_loss_ce_6: 0.4614  m1_loss_mask_6: 0.1572  m1_loss_dice_6: 1.241  m1_loss_ce_7: 0.4525  m1_loss_mask_7: 0.1601  m1_loss_dice_7: 1.244  m1_loss_ce_8: 0.4733  m1_loss_mask_8: 0.1605  m1_loss_dice_8: 1.223  m2_loss_ce: 0.5387  m2_loss_mask: 0.1597  m2_loss_dice: 1.231  m2_loss_ce_0: 0.5683  m2_loss_mask_0: 0.1914  m2_loss_dice_0: 1.525  m2_loss_ce_1: 0.7144  m2_loss_mask_1: 0.1741  m2_loss_dice_1: 1.364  m2_loss_ce_2: 0.651  m2_loss_mask_2: 0.1651  m2_loss_dice_2: 1.3  m2_loss_ce_3: 0.5741  m2_loss_mask_3: 0.1673  m2_loss_dice_3: 1.237  m2_loss_ce_4: 0.5631  m2_loss_mask_4: 0.163  m2_loss_dice_4: 1.244  m2_loss_ce_5: 0.5493  m2_loss_mask_5: 0.1622  m2_loss_dice_5: 1.257  m2_loss_ce_6: 0.5219  m2_loss_mask_6: 0.1617  m2_loss_dice_6: 1.244  m2_loss_ce_7: 0.5442  m2_loss_mask_7: 0.1621  m2_loss_dice_7: 1.217  m2_loss_ce_8: 0.5627  m2_loss_mask_8: 0.162  m2_loss_dice_8: 1.254    time: 1.4399  last_time: 1.5476  data_time: 0.0671  last_data_time: 0.1514   lr: 0.0001  max_mem: 34780M
[10/06 22:42:18] d2.utils.events INFO:  eta: 0:12:29  iter: 479  total_loss: 38.75  m1_loss_ce: 0.4461  m1_loss_mask: 0.1509  m1_loss_dice: 1.183  m1_loss_ce_0: 0.5728  m1_loss_mask_0: 0.1852  m1_loss_dice_0: 1.402  m1_loss_ce_1: 0.5991  m1_loss_mask_1: 0.1719  m1_loss_dice_1: 1.32  m1_loss_ce_2: 0.5627  m1_loss_mask_2: 0.1595  m1_loss_dice_2: 1.283  m1_loss_ce_3: 0.5034  m1_loss_mask_3: 0.1555  m1_loss_dice_3: 1.227  m1_loss_ce_4: 0.4938  m1_loss_mask_4: 0.1573  m1_loss_dice_4: 1.221  m1_loss_ce_5: 0.4348  m1_loss_mask_5: 0.1563  m1_loss_dice_5: 1.194  m1_loss_ce_6: 0.4484  m1_loss_mask_6: 0.1535  m1_loss_dice_6: 1.221  m1_loss_ce_7: 0.4447  m1_loss_mask_7: 0.1553  m1_loss_dice_7: 1.194  m1_loss_ce_8: 0.4589  m1_loss_mask_8: 0.15  m1_loss_dice_8: 1.189  m2_loss_ce: 0.5251  m2_loss_mask: 0.157  m2_loss_dice: 1.218  m2_loss_ce_0: 0.5658  m2_loss_mask_0: 0.1964  m2_loss_dice_0: 1.474  m2_loss_ce_1: 0.6729  m2_loss_mask_1: 0.17  m2_loss_dice_1: 1.324  m2_loss_ce_2: 0.587  m2_loss_mask_2: 0.1623  m2_loss_dice_2: 1.269  m2_loss_ce_3: 0.5409  m2_loss_mask_3: 0.162  m2_loss_dice_3: 1.219  m2_loss_ce_4: 0.53  m2_loss_mask_4: 0.1622  m2_loss_dice_4: 1.259  m2_loss_ce_5: 0.5123  m2_loss_mask_5: 0.16  m2_loss_dice_5: 1.26  m2_loss_ce_6: 0.5025  m2_loss_mask_6: 0.1584  m2_loss_dice_6: 1.211  m2_loss_ce_7: 0.5172  m2_loss_mask_7: 0.1582  m2_loss_dice_7: 1.176  m2_loss_ce_8: 0.5018  m2_loss_mask_8: 0.1573  m2_loss_dice_8: 1.202    time: 1.4424  last_time: 1.5952  data_time: 0.0606  last_data_time: 0.1393   lr: 0.0001  max_mem: 34780M
[10/06 22:42:47] d2.utils.events INFO:  eta: 0:12:00  iter: 499  total_loss: 39.16  m1_loss_ce: 0.4467  m1_loss_mask: 0.1735  m1_loss_dice: 1.214  m1_loss_ce_0: 0.5409  m1_loss_mask_0: 0.2082  m1_loss_dice_0: 1.409  m1_loss_ce_1: 0.6313  m1_loss_mask_1: 0.1817  m1_loss_dice_1: 1.321  m1_loss_ce_2: 0.5658  m1_loss_mask_2: 0.176  m1_loss_dice_2: 1.256  m1_loss_ce_3: 0.5306  m1_loss_mask_3: 0.1776  m1_loss_dice_3: 1.216  m1_loss_ce_4: 0.4983  m1_loss_mask_4: 0.1751  m1_loss_dice_4: 1.22  m1_loss_ce_5: 0.4513  m1_loss_mask_5: 0.1733  m1_loss_dice_5: 1.201  m1_loss_ce_6: 0.4586  m1_loss_mask_6: 0.1731  m1_loss_dice_6: 1.201  m1_loss_ce_7: 0.4627  m1_loss_mask_7: 0.1721  m1_loss_dice_7: 1.231  m1_loss_ce_8: 0.4512  m1_loss_mask_8: 0.175  m1_loss_dice_8: 1.211  m2_loss_ce: 0.5108  m2_loss_mask: 0.1767  m2_loss_dice: 1.236  m2_loss_ce_0: 0.5993  m2_loss_mask_0: 0.211  m2_loss_dice_0: 1.502  m2_loss_ce_1: 0.708  m2_loss_mask_1: 0.1842  m2_loss_dice_1: 1.345  m2_loss_ce_2: 0.6017  m2_loss_mask_2: 0.1809  m2_loss_dice_2: 1.268  m2_loss_ce_3: 0.5511  m2_loss_mask_3: 0.1804  m2_loss_dice_3: 1.222  m2_loss_ce_4: 0.5649  m2_loss_mask_4: 0.1811  m2_loss_dice_4: 1.238  m2_loss_ce_5: 0.5643  m2_loss_mask_5: 0.1747  m2_loss_dice_5: 1.242  m2_loss_ce_6: 0.5085  m2_loss_mask_6: 0.1773  m2_loss_dice_6: 1.218  m2_loss_ce_7: 0.5215  m2_loss_mask_7: 0.1763  m2_loss_dice_7: 1.225  m2_loss_ce_8: 0.536  m2_loss_mask_8: 0.1759  m2_loss_dice_8: 1.192    time: 1.4421  last_time: 1.3576  data_time: 0.0517  last_data_time: 0.0499   lr: 0.0001  max_mem: 34780M
[10/06 22:43:15] d2.utils.events INFO:  eta: 0:11:30  iter: 519  total_loss: 39.49  m1_loss_ce: 0.4521  m1_loss_mask: 0.1564  m1_loss_dice: 1.107  m1_loss_ce_0: 0.5546  m1_loss_mask_0: 0.1863  m1_loss_dice_0: 1.347  m1_loss_ce_1: 0.6015  m1_loss_mask_1: 0.1708  m1_loss_dice_1: 1.275  m1_loss_ce_2: 0.5784  m1_loss_mask_2: 0.1583  m1_loss_dice_2: 1.245  m1_loss_ce_3: 0.5009  m1_loss_mask_3: 0.1582  m1_loss_dice_3: 1.179  m1_loss_ce_4: 0.4868  m1_loss_mask_4: 0.1566  m1_loss_dice_4: 1.16  m1_loss_ce_5: 0.4881  m1_loss_mask_5: 0.1575  m1_loss_dice_5: 1.146  m1_loss_ce_6: 0.482  m1_loss_mask_6: 0.1575  m1_loss_dice_6: 1.134  m1_loss_ce_7: 0.4797  m1_loss_mask_7: 0.1564  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.4595  m1_loss_mask_8: 0.1576  m1_loss_dice_8: 1.163  m2_loss_ce: 0.516  m2_loss_mask: 0.1607  m2_loss_dice: 1.185  m2_loss_ce_0: 0.5535  m2_loss_mask_0: 0.1957  m2_loss_dice_0: 1.378  m2_loss_ce_1: 0.6544  m2_loss_mask_1: 0.1731  m2_loss_dice_1: 1.311  m2_loss_ce_2: 0.5992  m2_loss_mask_2: 0.1592  m2_loss_dice_2: 1.258  m2_loss_ce_3: 0.5585  m2_loss_mask_3: 0.163  m2_loss_dice_3: 1.193  m2_loss_ce_4: 0.5325  m2_loss_mask_4: 0.1621  m2_loss_dice_4: 1.156  m2_loss_ce_5: 0.5263  m2_loss_mask_5: 0.1631  m2_loss_dice_5: 1.195  m2_loss_ce_6: 0.5313  m2_loss_mask_6: 0.1612  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.5025  m2_loss_mask_7: 0.1613  m2_loss_dice_7: 1.144  m2_loss_ce_8: 0.5123  m2_loss_mask_8: 0.1572  m2_loss_dice_8: 1.178    time: 1.4394  last_time: 1.4667  data_time: 0.0473  last_data_time: 0.0642   lr: 0.0001  max_mem: 34780M
[10/06 22:43:44] d2.utils.events INFO:  eta: 0:11:01  iter: 539  total_loss: 40.54  m1_loss_ce: 0.4542  m1_loss_mask: 0.165  m1_loss_dice: 1.206  m1_loss_ce_0: 0.5242  m1_loss_mask_0: 0.1912  m1_loss_dice_0: 1.425  m1_loss_ce_1: 0.5914  m1_loss_mask_1: 0.1801  m1_loss_dice_1: 1.329  m1_loss_ce_2: 0.5334  m1_loss_mask_2: 0.17  m1_loss_dice_2: 1.327  m1_loss_ce_3: 0.4965  m1_loss_mask_3: 0.1708  m1_loss_dice_3: 1.214  m1_loss_ce_4: 0.4728  m1_loss_mask_4: 0.1683  m1_loss_dice_4: 1.227  m1_loss_ce_5: 0.4674  m1_loss_mask_5: 0.1679  m1_loss_dice_5: 1.229  m1_loss_ce_6: 0.4499  m1_loss_mask_6: 0.1673  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.4654  m1_loss_mask_7: 0.1658  m1_loss_dice_7: 1.191  m1_loss_ce_8: 0.4532  m1_loss_mask_8: 0.1642  m1_loss_dice_8: 1.197  m2_loss_ce: 0.4972  m2_loss_mask: 0.167  m2_loss_dice: 1.25  m2_loss_ce_0: 0.5732  m2_loss_mask_0: 0.197  m2_loss_dice_0: 1.531  m2_loss_ce_1: 0.6548  m2_loss_mask_1: 0.1793  m2_loss_dice_1: 1.373  m2_loss_ce_2: 0.627  m2_loss_mask_2: 0.1719  m2_loss_dice_2: 1.32  m2_loss_ce_3: 0.5682  m2_loss_mask_3: 0.1766  m2_loss_dice_3: 1.261  m2_loss_ce_4: 0.5763  m2_loss_mask_4: 0.1753  m2_loss_dice_4: 1.257  m2_loss_ce_5: 0.5689  m2_loss_mask_5: 0.1708  m2_loss_dice_5: 1.247  m2_loss_ce_6: 0.5207  m2_loss_mask_6: 0.1726  m2_loss_dice_6: 1.232  m2_loss_ce_7: 0.5369  m2_loss_mask_7: 0.1692  m2_loss_dice_7: 1.24  m2_loss_ce_8: 0.5186  m2_loss_mask_8: 0.1665  m2_loss_dice_8: 1.215    time: 1.4400  last_time: 1.3888  data_time: 0.0542  last_data_time: 0.0677   lr: 0.0001  max_mem: 34780M
[10/06 22:44:13] d2.utils.events INFO:  eta: 0:10:33  iter: 559  total_loss: 38.33  m1_loss_ce: 0.4561  m1_loss_mask: 0.1776  m1_loss_dice: 1.142  m1_loss_ce_0: 0.5495  m1_loss_mask_0: 0.2044  m1_loss_dice_0: 1.371  m1_loss_ce_1: 0.6162  m1_loss_mask_1: 0.191  m1_loss_dice_1: 1.259  m1_loss_ce_2: 0.5662  m1_loss_mask_2: 0.1798  m1_loss_dice_2: 1.249  m1_loss_ce_3: 0.4839  m1_loss_mask_3: 0.1779  m1_loss_dice_3: 1.192  m1_loss_ce_4: 0.4834  m1_loss_mask_4: 0.1796  m1_loss_dice_4: 1.154  m1_loss_ce_5: 0.4678  m1_loss_mask_5: 0.1766  m1_loss_dice_5: 1.17  m1_loss_ce_6: 0.4757  m1_loss_mask_6: 0.1766  m1_loss_dice_6: 1.168  m1_loss_ce_7: 0.4633  m1_loss_mask_7: 0.1759  m1_loss_dice_7: 1.147  m1_loss_ce_8: 0.4645  m1_loss_mask_8: 0.1767  m1_loss_dice_8: 1.133  m2_loss_ce: 0.5231  m2_loss_mask: 0.1793  m2_loss_dice: 1.183  m2_loss_ce_0: 0.609  m2_loss_mask_0: 0.2058  m2_loss_dice_0: 1.417  m2_loss_ce_1: 0.6455  m2_loss_mask_1: 0.1924  m2_loss_dice_1: 1.295  m2_loss_ce_2: 0.604  m2_loss_mask_2: 0.19  m2_loss_dice_2: 1.228  m2_loss_ce_3: 0.5504  m2_loss_mask_3: 0.1887  m2_loss_dice_3: 1.21  m2_loss_ce_4: 0.556  m2_loss_mask_4: 0.1863  m2_loss_dice_4: 1.186  m2_loss_ce_5: 0.5647  m2_loss_mask_5: 0.1802  m2_loss_dice_5: 1.18  m2_loss_ce_6: 0.5453  m2_loss_mask_6: 0.1789  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.5508  m2_loss_mask_7: 0.1783  m2_loss_dice_7: 1.191  m2_loss_ce_8: 0.5263  m2_loss_mask_8: 0.1776  m2_loss_dice_8: 1.191    time: 1.4393  last_time: 1.4892  data_time: 0.0659  last_data_time: 0.0521   lr: 0.0001  max_mem: 34780M
[10/06 22:44:42] d2.utils.events INFO:  eta: 0:10:04  iter: 579  total_loss: 39.6  m1_loss_ce: 0.4624  m1_loss_mask: 0.1566  m1_loss_dice: 1.222  m1_loss_ce_0: 0.5628  m1_loss_mask_0: 0.183  m1_loss_dice_0: 1.482  m1_loss_ce_1: 0.6652  m1_loss_mask_1: 0.1666  m1_loss_dice_1: 1.391  m1_loss_ce_2: 0.5637  m1_loss_mask_2: 0.1592  m1_loss_dice_2: 1.321  m1_loss_ce_3: 0.5272  m1_loss_mask_3: 0.1593  m1_loss_dice_3: 1.215  m1_loss_ce_4: 0.5089  m1_loss_mask_4: 0.1586  m1_loss_dice_4: 1.264  m1_loss_ce_5: 0.4835  m1_loss_mask_5: 0.1574  m1_loss_dice_5: 1.28  m1_loss_ce_6: 0.4854  m1_loss_mask_6: 0.1547  m1_loss_dice_6: 1.232  m1_loss_ce_7: 0.4897  m1_loss_mask_7: 0.156  m1_loss_dice_7: 1.249  m1_loss_ce_8: 0.4724  m1_loss_mask_8: 0.1544  m1_loss_dice_8: 1.202  m2_loss_ce: 0.5589  m2_loss_mask: 0.1525  m2_loss_dice: 1.237  m2_loss_ce_0: 0.6161  m2_loss_mask_0: 0.1789  m2_loss_dice_0: 1.516  m2_loss_ce_1: 0.7309  m2_loss_mask_1: 0.164  m2_loss_dice_1: 1.339  m2_loss_ce_2: 0.6575  m2_loss_mask_2: 0.1575  m2_loss_dice_2: 1.355  m2_loss_ce_3: 0.6022  m2_loss_mask_3: 0.1589  m2_loss_dice_3: 1.259  m2_loss_ce_4: 0.5844  m2_loss_mask_4: 0.1566  m2_loss_dice_4: 1.274  m2_loss_ce_5: 0.5968  m2_loss_mask_5: 0.1539  m2_loss_dice_5: 1.238  m2_loss_ce_6: 0.5535  m2_loss_mask_6: 0.1551  m2_loss_dice_6: 1.255  m2_loss_ce_7: 0.5649  m2_loss_mask_7: 0.1556  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.5591  m2_loss_mask_8: 0.1549  m2_loss_dice_8: 1.248    time: 1.4396  last_time: 1.4182  data_time: 0.0595  last_data_time: 0.0513   lr: 0.0001  max_mem: 34780M
[10/06 22:45:10] d2.utils.events INFO:  eta: 0:09:35  iter: 599  total_loss: 39.16  m1_loss_ce: 0.4679  m1_loss_mask: 0.1588  m1_loss_dice: 1.172  m1_loss_ce_0: 0.5154  m1_loss_mask_0: 0.1927  m1_loss_dice_0: 1.4  m1_loss_ce_1: 0.6168  m1_loss_mask_1: 0.1765  m1_loss_dice_1: 1.297  m1_loss_ce_2: 0.5168  m1_loss_mask_2: 0.1664  m1_loss_dice_2: 1.313  m1_loss_ce_3: 0.505  m1_loss_mask_3: 0.1682  m1_loss_dice_3: 1.222  m1_loss_ce_4: 0.4713  m1_loss_mask_4: 0.1641  m1_loss_dice_4: 1.181  m1_loss_ce_5: 0.4445  m1_loss_mask_5: 0.1606  m1_loss_dice_5: 1.207  m1_loss_ce_6: 0.4444  m1_loss_mask_6: 0.1649  m1_loss_dice_6: 1.173  m1_loss_ce_7: 0.4473  m1_loss_mask_7: 0.1612  m1_loss_dice_7: 1.201  m1_loss_ce_8: 0.4548  m1_loss_mask_8: 0.1607  m1_loss_dice_8: 1.185  m2_loss_ce: 0.5115  m2_loss_mask: 0.1737  m2_loss_dice: 1.244  m2_loss_ce_0: 0.5942  m2_loss_mask_0: 0.2005  m2_loss_dice_0: 1.461  m2_loss_ce_1: 0.6987  m2_loss_mask_1: 0.1831  m2_loss_dice_1: 1.337  m2_loss_ce_2: 0.6071  m2_loss_mask_2: 0.1754  m2_loss_dice_2: 1.321  m2_loss_ce_3: 0.5537  m2_loss_mask_3: 0.1764  m2_loss_dice_3: 1.239  m2_loss_ce_4: 0.5685  m2_loss_mask_4: 0.1755  m2_loss_dice_4: 1.251  m2_loss_ce_5: 0.5668  m2_loss_mask_5: 0.1754  m2_loss_dice_5: 1.27  m2_loss_ce_6: 0.5128  m2_loss_mask_6: 0.1771  m2_loss_dice_6: 1.223  m2_loss_ce_7: 0.5141  m2_loss_mask_7: 0.1743  m2_loss_dice_7: 1.221  m2_loss_ce_8: 0.5027  m2_loss_mask_8: 0.1743  m2_loss_dice_8: 1.256    time: 1.4391  last_time: 1.4516  data_time: 0.0580  last_data_time: 0.0404   lr: 0.0001  max_mem: 34780M
[10/06 22:45:40] d2.utils.events INFO:  eta: 0:09:07  iter: 619  total_loss: 39.04  m1_loss_ce: 0.4537  m1_loss_mask: 0.1652  m1_loss_dice: 1.146  m1_loss_ce_0: 0.549  m1_loss_mask_0: 0.1869  m1_loss_dice_0: 1.367  m1_loss_ce_1: 0.6048  m1_loss_mask_1: 0.174  m1_loss_dice_1: 1.308  m1_loss_ce_2: 0.5506  m1_loss_mask_2: 0.1717  m1_loss_dice_2: 1.249  m1_loss_ce_3: 0.4929  m1_loss_mask_3: 0.1687  m1_loss_dice_3: 1.174  m1_loss_ce_4: 0.4933  m1_loss_mask_4: 0.1663  m1_loss_dice_4: 1.2  m1_loss_ce_5: 0.4839  m1_loss_mask_5: 0.1654  m1_loss_dice_5: 1.163  m1_loss_ce_6: 0.4421  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.175  m1_loss_ce_7: 0.431  m1_loss_mask_7: 0.165  m1_loss_dice_7: 1.145  m1_loss_ce_8: 0.464  m1_loss_mask_8: 0.1645  m1_loss_dice_8: 1.167  m2_loss_ce: 0.5296  m2_loss_mask: 0.1696  m2_loss_dice: 1.195  m2_loss_ce_0: 0.5687  m2_loss_mask_0: 0.2028  m2_loss_dice_0: 1.425  m2_loss_ce_1: 0.6723  m2_loss_mask_1: 0.1848  m2_loss_dice_1: 1.277  m2_loss_ce_2: 0.5797  m2_loss_mask_2: 0.1758  m2_loss_dice_2: 1.28  m2_loss_ce_3: 0.556  m2_loss_mask_3: 0.1719  m2_loss_dice_3: 1.227  m2_loss_ce_4: 0.5059  m2_loss_mask_4: 0.1743  m2_loss_dice_4: 1.21  m2_loss_ce_5: 0.5386  m2_loss_mask_5: 0.172  m2_loss_dice_5: 1.209  m2_loss_ce_6: 0.5441  m2_loss_mask_6: 0.1693  m2_loss_dice_6: 1.19  m2_loss_ce_7: 0.5238  m2_loss_mask_7: 0.17  m2_loss_dice_7: 1.177  m2_loss_ce_8: 0.5287  m2_loss_mask_8: 0.1703  m2_loss_dice_8: 1.223    time: 1.4409  last_time: 1.4434  data_time: 0.0653  last_data_time: 0.0452   lr: 0.0001  max_mem: 34780M
[10/06 22:46:10] d2.utils.events INFO:  eta: 0:08:38  iter: 639  total_loss: 40.24  m1_loss_ce: 0.4941  m1_loss_mask: 0.1735  m1_loss_dice: 1.246  m1_loss_ce_0: 0.5831  m1_loss_mask_0: 0.1974  m1_loss_dice_0: 1.446  m1_loss_ce_1: 0.6417  m1_loss_mask_1: 0.1809  m1_loss_dice_1: 1.337  m1_loss_ce_2: 0.5766  m1_loss_mask_2: 0.1794  m1_loss_dice_2: 1.292  m1_loss_ce_3: 0.5378  m1_loss_mask_3: 0.1774  m1_loss_dice_3: 1.244  m1_loss_ce_4: 0.5026  m1_loss_mask_4: 0.1765  m1_loss_dice_4: 1.249  m1_loss_ce_5: 0.4833  m1_loss_mask_5: 0.1745  m1_loss_dice_5: 1.214  m1_loss_ce_6: 0.4775  m1_loss_mask_6: 0.1762  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.4711  m1_loss_mask_7: 0.1768  m1_loss_dice_7: 1.214  m1_loss_ce_8: 0.4538  m1_loss_mask_8: 0.172  m1_loss_dice_8: 1.21  m2_loss_ce: 0.567  m2_loss_mask: 0.1666  m2_loss_dice: 1.252  m2_loss_ce_0: 0.6107  m2_loss_mask_0: 0.2027  m2_loss_dice_0: 1.479  m2_loss_ce_1: 0.6792  m2_loss_mask_1: 0.1847  m2_loss_dice_1: 1.348  m2_loss_ce_2: 0.6267  m2_loss_mask_2: 0.1741  m2_loss_dice_2: 1.299  m2_loss_ce_3: 0.5939  m2_loss_mask_3: 0.1712  m2_loss_dice_3: 1.26  m2_loss_ce_4: 0.5504  m2_loss_mask_4: 0.1717  m2_loss_dice_4: 1.248  m2_loss_ce_5: 0.5547  m2_loss_mask_5: 0.1666  m2_loss_dice_5: 1.27  m2_loss_ce_6: 0.5633  m2_loss_mask_6: 0.1702  m2_loss_dice_6: 1.254  m2_loss_ce_7: 0.5421  m2_loss_mask_7: 0.1695  m2_loss_dice_7: 1.254  m2_loss_ce_8: 0.5651  m2_loss_mask_8: 0.1664  m2_loss_dice_8: 1.225    time: 1.4417  last_time: 1.5205  data_time: 0.0673  last_data_time: 0.0607   lr: 0.0001  max_mem: 34780M
[10/06 22:46:38] d2.utils.events INFO:  eta: 0:08:09  iter: 659  total_loss: 39.18  m1_loss_ce: 0.4668  m1_loss_mask: 0.1551  m1_loss_dice: 1.177  m1_loss_ce_0: 0.5467  m1_loss_mask_0: 0.185  m1_loss_dice_0: 1.442  m1_loss_ce_1: 0.632  m1_loss_mask_1: 0.1702  m1_loss_dice_1: 1.303  m1_loss_ce_2: 0.5886  m1_loss_mask_2: 0.1607  m1_loss_dice_2: 1.271  m1_loss_ce_3: 0.5346  m1_loss_mask_3: 0.1586  m1_loss_dice_3: 1.26  m1_loss_ce_4: 0.5027  m1_loss_mask_4: 0.158  m1_loss_dice_4: 1.227  m1_loss_ce_5: 0.4751  m1_loss_mask_5: 0.1602  m1_loss_dice_5: 1.225  m1_loss_ce_6: 0.4838  m1_loss_mask_6: 0.1593  m1_loss_dice_6: 1.189  m1_loss_ce_7: 0.4837  m1_loss_mask_7: 0.1559  m1_loss_dice_7: 1.197  m1_loss_ce_8: 0.4939  m1_loss_mask_8: 0.1576  m1_loss_dice_8: 1.185  m2_loss_ce: 0.5374  m2_loss_mask: 0.1576  m2_loss_dice: 1.191  m2_loss_ce_0: 0.574  m2_loss_mask_0: 0.1904  m2_loss_dice_0: 1.476  m2_loss_ce_1: 0.6939  m2_loss_mask_1: 0.1675  m2_loss_dice_1: 1.352  m2_loss_ce_2: 0.6207  m2_loss_mask_2: 0.1614  m2_loss_dice_2: 1.302  m2_loss_ce_3: 0.5633  m2_loss_mask_3: 0.1581  m2_loss_dice_3: 1.245  m2_loss_ce_4: 0.5402  m2_loss_mask_4: 0.1607  m2_loss_dice_4: 1.238  m2_loss_ce_5: 0.5579  m2_loss_mask_5: 0.1576  m2_loss_dice_5: 1.251  m2_loss_ce_6: 0.532  m2_loss_mask_6: 0.1602  m2_loss_dice_6: 1.214  m2_loss_ce_7: 0.5111  m2_loss_mask_7: 0.1597  m2_loss_dice_7: 1.244  m2_loss_ce_8: 0.5335  m2_loss_mask_8: 0.1574  m2_loss_dice_8: 1.21    time: 1.4403  last_time: 1.4674  data_time: 0.0501  last_data_time: 0.0469   lr: 0.0001  max_mem: 34780M
[10/06 22:47:06] d2.utils.events INFO:  eta: 0:07:40  iter: 679  total_loss: 39.62  m1_loss_ce: 0.4963  m1_loss_mask: 0.1625  m1_loss_dice: 1.194  m1_loss_ce_0: 0.5577  m1_loss_mask_0: 0.1929  m1_loss_dice_0: 1.411  m1_loss_ce_1: 0.6273  m1_loss_mask_1: 0.1822  m1_loss_dice_1: 1.352  m1_loss_ce_2: 0.5754  m1_loss_mask_2: 0.1709  m1_loss_dice_2: 1.276  m1_loss_ce_3: 0.5341  m1_loss_mask_3: 0.17  m1_loss_dice_3: 1.22  m1_loss_ce_4: 0.5059  m1_loss_mask_4: 0.1657  m1_loss_dice_4: 1.226  m1_loss_ce_5: 0.483  m1_loss_mask_5: 0.1635  m1_loss_dice_5: 1.251  m1_loss_ce_6: 0.4681  m1_loss_mask_6: 0.1623  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.4735  m1_loss_mask_7: 0.1608  m1_loss_dice_7: 1.224  m1_loss_ce_8: 0.4713  m1_loss_mask_8: 0.1647  m1_loss_dice_8: 1.211  m2_loss_ce: 0.5439  m2_loss_mask: 0.1733  m2_loss_dice: 1.218  m2_loss_ce_0: 0.6023  m2_loss_mask_0: 0.1937  m2_loss_dice_0: 1.473  m2_loss_ce_1: 0.6958  m2_loss_mask_1: 0.1884  m2_loss_dice_1: 1.327  m2_loss_ce_2: 0.589  m2_loss_mask_2: 0.1749  m2_loss_dice_2: 1.327  m2_loss_ce_3: 0.5731  m2_loss_mask_3: 0.1799  m2_loss_dice_3: 1.261  m2_loss_ce_4: 0.5734  m2_loss_mask_4: 0.174  m2_loss_dice_4: 1.233  m2_loss_ce_5: 0.5759  m2_loss_mask_5: 0.1717  m2_loss_dice_5: 1.23  m2_loss_ce_6: 0.5334  m2_loss_mask_6: 0.1764  m2_loss_dice_6: 1.228  m2_loss_ce_7: 0.5393  m2_loss_mask_7: 0.1749  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.5356  m2_loss_mask_8: 0.1719  m2_loss_dice_8: 1.201    time: 1.4391  last_time: 1.4692  data_time: 0.0525  last_data_time: 0.0499   lr: 0.0001  max_mem: 34780M
[10/06 22:47:35] d2.utils.events INFO:  eta: 0:07:11  iter: 699  total_loss: 39.02  m1_loss_ce: 0.4503  m1_loss_mask: 0.1714  m1_loss_dice: 1.175  m1_loss_ce_0: 0.5583  m1_loss_mask_0: 0.1879  m1_loss_dice_0: 1.391  m1_loss_ce_1: 0.6439  m1_loss_mask_1: 0.1793  m1_loss_dice_1: 1.308  m1_loss_ce_2: 0.5741  m1_loss_mask_2: 0.1724  m1_loss_dice_2: 1.261  m1_loss_ce_3: 0.5266  m1_loss_mask_3: 0.1727  m1_loss_dice_3: 1.211  m1_loss_ce_4: 0.5189  m1_loss_mask_4: 0.1724  m1_loss_dice_4: 1.214  m1_loss_ce_5: 0.4728  m1_loss_mask_5: 0.1704  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.4733  m1_loss_mask_6: 0.1695  m1_loss_dice_6: 1.159  m1_loss_ce_7: 0.4873  m1_loss_mask_7: 0.1713  m1_loss_dice_7: 1.183  m1_loss_ce_8: 0.4626  m1_loss_mask_8: 0.1726  m1_loss_dice_8: 1.197  m2_loss_ce: 0.5302  m2_loss_mask: 0.1748  m2_loss_dice: 1.195  m2_loss_ce_0: 0.5797  m2_loss_mask_0: 0.2046  m2_loss_dice_0: 1.481  m2_loss_ce_1: 0.6762  m2_loss_mask_1: 0.1828  m2_loss_dice_1: 1.331  m2_loss_ce_2: 0.6148  m2_loss_mask_2: 0.1752  m2_loss_dice_2: 1.32  m2_loss_ce_3: 0.5409  m2_loss_mask_3: 0.1777  m2_loss_dice_3: 1.213  m2_loss_ce_4: 0.5732  m2_loss_mask_4: 0.1762  m2_loss_dice_4: 1.229  m2_loss_ce_5: 0.5305  m2_loss_mask_5: 0.1742  m2_loss_dice_5: 1.208  m2_loss_ce_6: 0.5214  m2_loss_mask_6: 0.1751  m2_loss_dice_6: 1.183  m2_loss_ce_7: 0.51  m2_loss_mask_7: 0.1728  m2_loss_dice_7: 1.197  m2_loss_ce_8: 0.5187  m2_loss_mask_8: 0.1746  m2_loss_dice_8: 1.213    time: 1.4394  last_time: 1.4922  data_time: 0.0535  last_data_time: 0.0525   lr: 0.0001  max_mem: 34780M
[10/06 22:48:05] d2.utils.events INFO:  eta: 0:06:42  iter: 719  total_loss: 38.38  m1_loss_ce: 0.4187  m1_loss_mask: 0.1603  m1_loss_dice: 1.184  m1_loss_ce_0: 0.5043  m1_loss_mask_0: 0.1852  m1_loss_dice_0: 1.417  m1_loss_ce_1: 0.5965  m1_loss_mask_1: 0.17  m1_loss_dice_1: 1.274  m1_loss_ce_2: 0.5384  m1_loss_mask_2: 0.169  m1_loss_dice_2: 1.239  m1_loss_ce_3: 0.4463  m1_loss_mask_3: 0.1724  m1_loss_dice_3: 1.194  m1_loss_ce_4: 0.4374  m1_loss_mask_4: 0.1691  m1_loss_dice_4: 1.201  m1_loss_ce_5: 0.4167  m1_loss_mask_5: 0.1655  m1_loss_dice_5: 1.21  m1_loss_ce_6: 0.4163  m1_loss_mask_6: 0.1648  m1_loss_dice_6: 1.183  m1_loss_ce_7: 0.4116  m1_loss_mask_7: 0.164  m1_loss_dice_7: 1.172  m1_loss_ce_8: 0.4496  m1_loss_mask_8: 0.162  m1_loss_dice_8: 1.159  m2_loss_ce: 0.4912  m2_loss_mask: 0.1622  m2_loss_dice: 1.205  m2_loss_ce_0: 0.5305  m2_loss_mask_0: 0.1941  m2_loss_dice_0: 1.423  m2_loss_ce_1: 0.638  m2_loss_mask_1: 0.1721  m2_loss_dice_1: 1.296  m2_loss_ce_2: 0.5747  m2_loss_mask_2: 0.1681  m2_loss_dice_2: 1.271  m2_loss_ce_3: 0.5193  m2_loss_mask_3: 0.1657  m2_loss_dice_3: 1.207  m2_loss_ce_4: 0.5082  m2_loss_mask_4: 0.1634  m2_loss_dice_4: 1.227  m2_loss_ce_5: 0.5002  m2_loss_mask_5: 0.1623  m2_loss_dice_5: 1.226  m2_loss_ce_6: 0.4977  m2_loss_mask_6: 0.1627  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.488  m2_loss_mask_7: 0.1615  m2_loss_dice_7: 1.202  m2_loss_ce_8: 0.4822  m2_loss_mask_8: 0.1613  m2_loss_dice_8: 1.202    time: 1.4404  last_time: 1.4936  data_time: 0.0606  last_data_time: 0.0539   lr: 0.0001  max_mem: 34780M
[10/06 22:48:33] d2.utils.events INFO:  eta: 0:06:13  iter: 739  total_loss: 40.14  m1_loss_ce: 0.4191  m1_loss_mask: 0.152  m1_loss_dice: 1.232  m1_loss_ce_0: 0.5153  m1_loss_mask_0: 0.1788  m1_loss_dice_0: 1.437  m1_loss_ce_1: 0.5842  m1_loss_mask_1: 0.1706  m1_loss_dice_1: 1.388  m1_loss_ce_2: 0.5311  m1_loss_mask_2: 0.1622  m1_loss_dice_2: 1.298  m1_loss_ce_3: 0.4817  m1_loss_mask_3: 0.1654  m1_loss_dice_3: 1.326  m1_loss_ce_4: 0.4725  m1_loss_mask_4: 0.1599  m1_loss_dice_4: 1.289  m1_loss_ce_5: 0.4469  m1_loss_mask_5: 0.1543  m1_loss_dice_5: 1.282  m1_loss_ce_6: 0.4117  m1_loss_mask_6: 0.1536  m1_loss_dice_6: 1.266  m1_loss_ce_7: 0.4349  m1_loss_mask_7: 0.1507  m1_loss_dice_7: 1.219  m1_loss_ce_8: 0.4366  m1_loss_mask_8: 0.1526  m1_loss_dice_8: 1.259  m2_loss_ce: 0.5162  m2_loss_mask: 0.1644  m2_loss_dice: 1.27  m2_loss_ce_0: 0.5953  m2_loss_mask_0: 0.1925  m2_loss_dice_0: 1.527  m2_loss_ce_1: 0.6951  m2_loss_mask_1: 0.1815  m2_loss_dice_1: 1.358  m2_loss_ce_2: 0.6235  m2_loss_mask_2: 0.1752  m2_loss_dice_2: 1.339  m2_loss_ce_3: 0.5677  m2_loss_mask_3: 0.1698  m2_loss_dice_3: 1.298  m2_loss_ce_4: 0.5665  m2_loss_mask_4: 0.1693  m2_loss_dice_4: 1.283  m2_loss_ce_5: 0.5204  m2_loss_mask_5: 0.1666  m2_loss_dice_5: 1.275  m2_loss_ce_6: 0.5474  m2_loss_mask_6: 0.1682  m2_loss_dice_6: 1.278  m2_loss_ce_7: 0.5405  m2_loss_mask_7: 0.1672  m2_loss_dice_7: 1.303  m2_loss_ce_8: 0.533  m2_loss_mask_8: 0.1663  m2_loss_dice_8: 1.3    time: 1.4402  last_time: 1.5098  data_time: 0.0574  last_data_time: 0.0454   lr: 0.0001  max_mem: 34780M
[10/06 22:49:02] d2.utils.events INFO:  eta: 0:05:45  iter: 759  total_loss: 39.55  m1_loss_ce: 0.4526  m1_loss_mask: 0.1544  m1_loss_dice: 1.216  m1_loss_ce_0: 0.566  m1_loss_mask_0: 0.1825  m1_loss_dice_0: 1.414  m1_loss_ce_1: 0.6171  m1_loss_mask_1: 0.1708  m1_loss_dice_1: 1.357  m1_loss_ce_2: 0.5463  m1_loss_mask_2: 0.1625  m1_loss_dice_2: 1.299  m1_loss_ce_3: 0.5085  m1_loss_mask_3: 0.1612  m1_loss_dice_3: 1.243  m1_loss_ce_4: 0.5009  m1_loss_mask_4: 0.1569  m1_loss_dice_4: 1.257  m1_loss_ce_5: 0.5014  m1_loss_mask_5: 0.1549  m1_loss_dice_5: 1.243  m1_loss_ce_6: 0.4629  m1_loss_mask_6: 0.1558  m1_loss_dice_6: 1.193  m1_loss_ce_7: 0.4528  m1_loss_mask_7: 0.1534  m1_loss_dice_7: 1.238  m1_loss_ce_8: 0.4323  m1_loss_mask_8: 0.1552  m1_loss_dice_8: 1.237  m2_loss_ce: 0.5584  m2_loss_mask: 0.1683  m2_loss_dice: 1.273  m2_loss_ce_0: 0.5898  m2_loss_mask_0: 0.1986  m2_loss_dice_0: 1.451  m2_loss_ce_1: 0.729  m2_loss_mask_1: 0.1767  m2_loss_dice_1: 1.352  m2_loss_ce_2: 0.6499  m2_loss_mask_2: 0.1703  m2_loss_dice_2: 1.301  m2_loss_ce_3: 0.5898  m2_loss_mask_3: 0.1731  m2_loss_dice_3: 1.276  m2_loss_ce_4: 0.5937  m2_loss_mask_4: 0.1686  m2_loss_dice_4: 1.269  m2_loss_ce_5: 0.5978  m2_loss_mask_5: 0.1671  m2_loss_dice_5: 1.251  m2_loss_ce_6: 0.5606  m2_loss_mask_6: 0.1689  m2_loss_dice_6: 1.274  m2_loss_ce_7: 0.5739  m2_loss_mask_7: 0.1693  m2_loss_dice_7: 1.261  m2_loss_ce_8: 0.5537  m2_loss_mask_8: 0.168  m2_loss_dice_8: 1.274    time: 1.4398  last_time: 1.4977  data_time: 0.0626  last_data_time: 0.0653   lr: 0.0001  max_mem: 34780M
[10/06 22:49:31] d2.utils.events INFO:  eta: 0:05:16  iter: 779  total_loss: 40.53  m1_loss_ce: 0.4464  m1_loss_mask: 0.1613  m1_loss_dice: 1.227  m1_loss_ce_0: 0.5259  m1_loss_mask_0: 0.1818  m1_loss_dice_0: 1.44  m1_loss_ce_1: 0.5802  m1_loss_mask_1: 0.1718  m1_loss_dice_1: 1.364  m1_loss_ce_2: 0.5409  m1_loss_mask_2: 0.1616  m1_loss_dice_2: 1.283  m1_loss_ce_3: 0.4901  m1_loss_mask_3: 0.1603  m1_loss_dice_3: 1.24  m1_loss_ce_4: 0.4982  m1_loss_mask_4: 0.1598  m1_loss_dice_4: 1.245  m1_loss_ce_5: 0.4606  m1_loss_mask_5: 0.1598  m1_loss_dice_5: 1.238  m1_loss_ce_6: 0.4749  m1_loss_mask_6: 0.1617  m1_loss_dice_6: 1.206  m1_loss_ce_7: 0.4611  m1_loss_mask_7: 0.1605  m1_loss_dice_7: 1.208  m1_loss_ce_8: 0.4356  m1_loss_mask_8: 0.1598  m1_loss_dice_8: 1.234  m2_loss_ce: 0.5432  m2_loss_mask: 0.1606  m2_loss_dice: 1.269  m2_loss_ce_0: 0.624  m2_loss_mask_0: 0.1931  m2_loss_dice_0: 1.558  m2_loss_ce_1: 0.6812  m2_loss_mask_1: 0.1759  m2_loss_dice_1: 1.391  m2_loss_ce_2: 0.6318  m2_loss_mask_2: 0.1644  m2_loss_dice_2: 1.294  m2_loss_ce_3: 0.5718  m2_loss_mask_3: 0.163  m2_loss_dice_3: 1.278  m2_loss_ce_4: 0.634  m2_loss_mask_4: 0.1591  m2_loss_dice_4: 1.241  m2_loss_ce_5: 0.5748  m2_loss_mask_5: 0.1616  m2_loss_dice_5: 1.257  m2_loss_ce_6: 0.5685  m2_loss_mask_6: 0.1627  m2_loss_dice_6: 1.237  m2_loss_ce_7: 0.5731  m2_loss_mask_7: 0.1627  m2_loss_dice_7: 1.223  m2_loss_ce_8: 0.5528  m2_loss_mask_8: 0.161  m2_loss_dice_8: 1.245    time: 1.4406  last_time: 1.5285  data_time: 0.0583  last_data_time: 0.0487   lr: 0.0001  max_mem: 34780M
[10/06 22:50:01] d2.utils.events INFO:  eta: 0:04:47  iter: 799  total_loss: 39.5  m1_loss_ce: 0.4414  m1_loss_mask: 0.161  m1_loss_dice: 1.164  m1_loss_ce_0: 0.5765  m1_loss_mask_0: 0.1895  m1_loss_dice_0: 1.328  m1_loss_ce_1: 0.6258  m1_loss_mask_1: 0.1705  m1_loss_dice_1: 1.292  m1_loss_ce_2: 0.5644  m1_loss_mask_2: 0.1642  m1_loss_dice_2: 1.206  m1_loss_ce_3: 0.5351  m1_loss_mask_3: 0.1601  m1_loss_dice_3: 1.204  m1_loss_ce_4: 0.4951  m1_loss_mask_4: 0.1588  m1_loss_dice_4: 1.198  m1_loss_ce_5: 0.4634  m1_loss_mask_5: 0.1591  m1_loss_dice_5: 1.209  m1_loss_ce_6: 0.4689  m1_loss_mask_6: 0.1641  m1_loss_dice_6: 1.18  m1_loss_ce_7: 0.4403  m1_loss_mask_7: 0.1635  m1_loss_dice_7: 1.164  m1_loss_ce_8: 0.4411  m1_loss_mask_8: 0.1617  m1_loss_dice_8: 1.177  m2_loss_ce: 0.5369  m2_loss_mask: 0.1734  m2_loss_dice: 1.191  m2_loss_ce_0: 0.599  m2_loss_mask_0: 0.2022  m2_loss_dice_0: 1.455  m2_loss_ce_1: 0.6999  m2_loss_mask_1: 0.1819  m2_loss_dice_1: 1.303  m2_loss_ce_2: 0.6469  m2_loss_mask_2: 0.1796  m2_loss_dice_2: 1.249  m2_loss_ce_3: 0.6094  m2_loss_mask_3: 0.179  m2_loss_dice_3: 1.193  m2_loss_ce_4: 0.5891  m2_loss_mask_4: 0.1771  m2_loss_dice_4: 1.192  m2_loss_ce_5: 0.56  m2_loss_mask_5: 0.1737  m2_loss_dice_5: 1.209  m2_loss_ce_6: 0.5656  m2_loss_mask_6: 0.1784  m2_loss_dice_6: 1.189  m2_loss_ce_7: 0.5515  m2_loss_mask_7: 0.1756  m2_loss_dice_7: 1.184  m2_loss_ce_8: 0.5617  m2_loss_mask_8: 0.1742  m2_loss_dice_8: 1.179    time: 1.4415  last_time: 1.4195  data_time: 0.0583  last_data_time: 0.0533   lr: 0.0001  max_mem: 34780M
[10/06 22:50:30] d2.utils.events INFO:  eta: 0:04:19  iter: 819  total_loss: 38.63  m1_loss_ce: 0.4189  m1_loss_mask: 0.1673  m1_loss_dice: 1.204  m1_loss_ce_0: 0.5578  m1_loss_mask_0: 0.1963  m1_loss_dice_0: 1.391  m1_loss_ce_1: 0.6113  m1_loss_mask_1: 0.1829  m1_loss_dice_1: 1.319  m1_loss_ce_2: 0.4971  m1_loss_mask_2: 0.1695  m1_loss_dice_2: 1.247  m1_loss_ce_3: 0.5136  m1_loss_mask_3: 0.1748  m1_loss_dice_3: 1.184  m1_loss_ce_4: 0.4516  m1_loss_mask_4: 0.1702  m1_loss_dice_4: 1.183  m1_loss_ce_5: 0.4765  m1_loss_mask_5: 0.1676  m1_loss_dice_5: 1.208  m1_loss_ce_6: 0.4434  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.178  m1_loss_ce_7: 0.4273  m1_loss_mask_7: 0.1682  m1_loss_dice_7: 1.192  m1_loss_ce_8: 0.4073  m1_loss_mask_8: 0.1677  m1_loss_dice_8: 1.183  m2_loss_ce: 0.5113  m2_loss_mask: 0.1722  m2_loss_dice: 1.209  m2_loss_ce_0: 0.5862  m2_loss_mask_0: 0.1941  m2_loss_dice_0: 1.475  m2_loss_ce_1: 0.6452  m2_loss_mask_1: 0.1821  m2_loss_dice_1: 1.335  m2_loss_ce_2: 0.5821  m2_loss_mask_2: 0.1812  m2_loss_dice_2: 1.317  m2_loss_ce_3: 0.5282  m2_loss_mask_3: 0.1778  m2_loss_dice_3: 1.226  m2_loss_ce_4: 0.5295  m2_loss_mask_4: 0.1764  m2_loss_dice_4: 1.236  m2_loss_ce_5: 0.5259  m2_loss_mask_5: 0.1734  m2_loss_dice_5: 1.214  m2_loss_ce_6: 0.5204  m2_loss_mask_6: 0.1735  m2_loss_dice_6: 1.241  m2_loss_ce_7: 0.509  m2_loss_mask_7: 0.1725  m2_loss_dice_7: 1.209  m2_loss_ce_8: 0.4945  m2_loss_mask_8: 0.1729  m2_loss_dice_8: 1.229    time: 1.4412  last_time: 1.4116  data_time: 0.0630  last_data_time: 0.0412   lr: 0.0001  max_mem: 35205M
[10/06 22:50:59] d2.utils.events INFO:  eta: 0:03:50  iter: 839  total_loss: 38.58  m1_loss_ce: 0.4489  m1_loss_mask: 0.1633  m1_loss_dice: 1.105  m1_loss_ce_0: 0.5439  m1_loss_mask_0: 0.1854  m1_loss_dice_0: 1.317  m1_loss_ce_1: 0.5912  m1_loss_mask_1: 0.1684  m1_loss_dice_1: 1.275  m1_loss_ce_2: 0.571  m1_loss_mask_2: 0.1638  m1_loss_dice_2: 1.19  m1_loss_ce_3: 0.5045  m1_loss_mask_3: 0.1655  m1_loss_dice_3: 1.153  m1_loss_ce_4: 0.4981  m1_loss_mask_4: 0.1629  m1_loss_dice_4: 1.158  m1_loss_ce_5: 0.4496  m1_loss_mask_5: 0.1607  m1_loss_dice_5: 1.176  m1_loss_ce_6: 0.4556  m1_loss_mask_6: 0.1648  m1_loss_dice_6: 1.162  m1_loss_ce_7: 0.4347  m1_loss_mask_7: 0.1599  m1_loss_dice_7: 1.159  m1_loss_ce_8: 0.4473  m1_loss_mask_8: 0.162  m1_loss_dice_8: 1.169  m2_loss_ce: 0.5369  m2_loss_mask: 0.1697  m2_loss_dice: 1.183  m2_loss_ce_0: 0.5806  m2_loss_mask_0: 0.2012  m2_loss_dice_0: 1.391  m2_loss_ce_1: 0.6854  m2_loss_mask_1: 0.1803  m2_loss_dice_1: 1.253  m2_loss_ce_2: 0.6217  m2_loss_mask_2: 0.176  m2_loss_dice_2: 1.276  m2_loss_ce_3: 0.5802  m2_loss_mask_3: 0.1758  m2_loss_dice_3: 1.208  m2_loss_ce_4: 0.54  m2_loss_mask_4: 0.1773  m2_loss_dice_4: 1.186  m2_loss_ce_5: 0.5576  m2_loss_mask_5: 0.172  m2_loss_dice_5: 1.182  m2_loss_ce_6: 0.5377  m2_loss_mask_6: 0.1739  m2_loss_dice_6: 1.17  m2_loss_ce_7: 0.5359  m2_loss_mask_7: 0.1728  m2_loss_dice_7: 1.178  m2_loss_ce_8: 0.5266  m2_loss_mask_8: 0.1721  m2_loss_dice_8: 1.203    time: 1.4410  last_time: 1.4792  data_time: 0.0615  last_data_time: 0.0508   lr: 0.0001  max_mem: 35205M
[10/06 22:51:28] d2.utils.events INFO:  eta: 0:03:21  iter: 859  total_loss: 39.27  m1_loss_ce: 0.4354  m1_loss_mask: 0.1666  m1_loss_dice: 1.194  m1_loss_ce_0: 0.5269  m1_loss_mask_0: 0.1881  m1_loss_dice_0: 1.363  m1_loss_ce_1: 0.5801  m1_loss_mask_1: 0.1797  m1_loss_dice_1: 1.282  m1_loss_ce_2: 0.5124  m1_loss_mask_2: 0.1699  m1_loss_dice_2: 1.259  m1_loss_ce_3: 0.5116  m1_loss_mask_3: 0.1693  m1_loss_dice_3: 1.23  m1_loss_ce_4: 0.483  m1_loss_mask_4: 0.1678  m1_loss_dice_4: 1.236  m1_loss_ce_5: 0.4605  m1_loss_mask_5: 0.1668  m1_loss_dice_5: 1.227  m1_loss_ce_6: 0.455  m1_loss_mask_6: 0.1688  m1_loss_dice_6: 1.196  m1_loss_ce_7: 0.4298  m1_loss_mask_7: 0.1713  m1_loss_dice_7: 1.199  m1_loss_ce_8: 0.4435  m1_loss_mask_8: 0.1689  m1_loss_dice_8: 1.187  m2_loss_ce: 0.5127  m2_loss_mask: 0.1709  m2_loss_dice: 1.225  m2_loss_ce_0: 0.6196  m2_loss_mask_0: 0.2049  m2_loss_dice_0: 1.476  m2_loss_ce_1: 0.6624  m2_loss_mask_1: 0.1903  m2_loss_dice_1: 1.361  m2_loss_ce_2: 0.597  m2_loss_mask_2: 0.1748  m2_loss_dice_2: 1.313  m2_loss_ce_3: 0.5748  m2_loss_mask_3: 0.1734  m2_loss_dice_3: 1.254  m2_loss_ce_4: 0.5551  m2_loss_mask_4: 0.1731  m2_loss_dice_4: 1.262  m2_loss_ce_5: 0.5555  m2_loss_mask_5: 0.1709  m2_loss_dice_5: 1.234  m2_loss_ce_6: 0.5359  m2_loss_mask_6: 0.1714  m2_loss_dice_6: 1.222  m2_loss_ce_7: 0.561  m2_loss_mask_7: 0.169  m2_loss_dice_7: 1.225  m2_loss_ce_8: 0.5415  m2_loss_mask_8: 0.1686  m2_loss_dice_8: 1.199    time: 1.4419  last_time: 1.4680  data_time: 0.0492  last_data_time: 0.0429   lr: 0.0001  max_mem: 35205M
[10/06 22:51:57] d2.utils.events INFO:  eta: 0:02:52  iter: 879  total_loss: 39.37  m1_loss_ce: 0.4044  m1_loss_mask: 0.1505  m1_loss_dice: 1.243  m1_loss_ce_0: 0.5581  m1_loss_mask_0: 0.1713  m1_loss_dice_0: 1.408  m1_loss_ce_1: 0.6245  m1_loss_mask_1: 0.167  m1_loss_dice_1: 1.36  m1_loss_ce_2: 0.5387  m1_loss_mask_2: 0.1532  m1_loss_dice_2: 1.295  m1_loss_ce_3: 0.4813  m1_loss_mask_3: 0.1508  m1_loss_dice_3: 1.264  m1_loss_ce_4: 0.4854  m1_loss_mask_4: 0.1536  m1_loss_dice_4: 1.251  m1_loss_ce_5: 0.4684  m1_loss_mask_5: 0.1485  m1_loss_dice_5: 1.248  m1_loss_ce_6: 0.42  m1_loss_mask_6: 0.1526  m1_loss_dice_6: 1.227  m1_loss_ce_7: 0.4501  m1_loss_mask_7: 0.1487  m1_loss_dice_7: 1.222  m1_loss_ce_8: 0.4349  m1_loss_mask_8: 0.1505  m1_loss_dice_8: 1.203  m2_loss_ce: 0.5424  m2_loss_mask: 0.1597  m2_loss_dice: 1.227  m2_loss_ce_0: 0.6046  m2_loss_mask_0: 0.1912  m2_loss_dice_0: 1.486  m2_loss_ce_1: 0.6967  m2_loss_mask_1: 0.1726  m2_loss_dice_1: 1.359  m2_loss_ce_2: 0.6286  m2_loss_mask_2: 0.1619  m2_loss_dice_2: 1.312  m2_loss_ce_3: 0.5788  m2_loss_mask_3: 0.1618  m2_loss_dice_3: 1.254  m2_loss_ce_4: 0.5816  m2_loss_mask_4: 0.1597  m2_loss_dice_4: 1.247  m2_loss_ce_5: 0.5606  m2_loss_mask_5: 0.159  m2_loss_dice_5: 1.224  m2_loss_ce_6: 0.549  m2_loss_mask_6: 0.1625  m2_loss_dice_6: 1.28  m2_loss_ce_7: 0.557  m2_loss_mask_7: 0.1618  m2_loss_dice_7: 1.265  m2_loss_ce_8: 0.5422  m2_loss_mask_8: 0.1603  m2_loss_dice_8: 1.246    time: 1.4415  last_time: 1.3295  data_time: 0.0497  last_data_time: 0.0452   lr: 0.0001  max_mem: 35205M
[10/06 22:52:25] d2.utils.events INFO:  eta: 0:02:23  iter: 899  total_loss: 39.86  m1_loss_ce: 0.4327  m1_loss_mask: 0.1532  m1_loss_dice: 1.223  m1_loss_ce_0: 0.5544  m1_loss_mask_0: 0.1811  m1_loss_dice_0: 1.425  m1_loss_ce_1: 0.6371  m1_loss_mask_1: 0.165  m1_loss_dice_1: 1.371  m1_loss_ce_2: 0.5481  m1_loss_mask_2: 0.1558  m1_loss_dice_2: 1.316  m1_loss_ce_3: 0.4921  m1_loss_mask_3: 0.1585  m1_loss_dice_3: 1.264  m1_loss_ce_4: 0.4743  m1_loss_mask_4: 0.1577  m1_loss_dice_4: 1.26  m1_loss_ce_5: 0.464  m1_loss_mask_5: 0.1541  m1_loss_dice_5: 1.251  m1_loss_ce_6: 0.4391  m1_loss_mask_6: 0.1531  m1_loss_dice_6: 1.231  m1_loss_ce_7: 0.4305  m1_loss_mask_7: 0.1556  m1_loss_dice_7: 1.236  m1_loss_ce_8: 0.4334  m1_loss_mask_8: 0.1539  m1_loss_dice_8: 1.232  m2_loss_ce: 0.5192  m2_loss_mask: 0.1608  m2_loss_dice: 1.248  m2_loss_ce_0: 0.5963  m2_loss_mask_0: 0.1973  m2_loss_dice_0: 1.494  m2_loss_ce_1: 0.7012  m2_loss_mask_1: 0.1713  m2_loss_dice_1: 1.35  m2_loss_ce_2: 0.6167  m2_loss_mask_2: 0.165  m2_loss_dice_2: 1.303  m2_loss_ce_3: 0.5747  m2_loss_mask_3: 0.1632  m2_loss_dice_3: 1.268  m2_loss_ce_4: 0.548  m2_loss_mask_4: 0.1651  m2_loss_dice_4: 1.256  m2_loss_ce_5: 0.5449  m2_loss_mask_5: 0.1611  m2_loss_dice_5: 1.27  m2_loss_ce_6: 0.5317  m2_loss_mask_6: 0.1652  m2_loss_dice_6: 1.251  m2_loss_ce_7: 0.5549  m2_loss_mask_7: 0.1642  m2_loss_dice_7: 1.259  m2_loss_ce_8: 0.5344  m2_loss_mask_8: 0.1626  m2_loss_dice_8: 1.255    time: 1.4410  last_time: 1.4396  data_time: 0.0516  last_data_time: 0.0373   lr: 0.0001  max_mem: 35205M
[10/06 22:52:55] d2.utils.events INFO:  eta: 0:01:55  iter: 919  total_loss: 40.54  m1_loss_ce: 0.4279  m1_loss_mask: 0.1642  m1_loss_dice: 1.299  m1_loss_ce_0: 0.5757  m1_loss_mask_0: 0.1826  m1_loss_dice_0: 1.518  m1_loss_ce_1: 0.5682  m1_loss_mask_1: 0.1731  m1_loss_dice_1: 1.403  m1_loss_ce_2: 0.5055  m1_loss_mask_2: 0.1683  m1_loss_dice_2: 1.351  m1_loss_ce_3: 0.4969  m1_loss_mask_3: 0.1667  m1_loss_dice_3: 1.354  m1_loss_ce_4: 0.4408  m1_loss_mask_4: 0.1679  m1_loss_dice_4: 1.343  m1_loss_ce_5: 0.4254  m1_loss_mask_5: 0.1656  m1_loss_dice_5: 1.325  m1_loss_ce_6: 0.4479  m1_loss_mask_6: 0.1665  m1_loss_dice_6: 1.325  m1_loss_ce_7: 0.4214  m1_loss_mask_7: 0.1662  m1_loss_dice_7: 1.301  m1_loss_ce_8: 0.4217  m1_loss_mask_8: 0.1627  m1_loss_dice_8: 1.291  m2_loss_ce: 0.5149  m2_loss_mask: 0.1665  m2_loss_dice: 1.299  m2_loss_ce_0: 0.5818  m2_loss_mask_0: 0.1966  m2_loss_dice_0: 1.55  m2_loss_ce_1: 0.6852  m2_loss_mask_1: 0.1733  m2_loss_dice_1: 1.425  m2_loss_ce_2: 0.5954  m2_loss_mask_2: 0.1693  m2_loss_dice_2: 1.382  m2_loss_ce_3: 0.5594  m2_loss_mask_3: 0.1671  m2_loss_dice_3: 1.296  m2_loss_ce_4: 0.5291  m2_loss_mask_4: 0.1697  m2_loss_dice_4: 1.327  m2_loss_ce_5: 0.5509  m2_loss_mask_5: 0.1675  m2_loss_dice_5: 1.312  m2_loss_ce_6: 0.5101  m2_loss_mask_6: 0.1684  m2_loss_dice_6: 1.317  m2_loss_ce_7: 0.5037  m2_loss_mask_7: 0.1664  m2_loss_dice_7: 1.297  m2_loss_ce_8: 0.528  m2_loss_mask_8: 0.1668  m2_loss_dice_8: 1.291    time: 1.4414  last_time: 1.5236  data_time: 0.0577  last_data_time: 0.0789   lr: 0.0001  max_mem: 35205M
[10/06 22:53:24] d2.utils.events INFO:  eta: 0:01:26  iter: 939  total_loss: 39.51  m1_loss_ce: 0.4604  m1_loss_mask: 0.1576  m1_loss_dice: 1.211  m1_loss_ce_0: 0.5683  m1_loss_mask_0: 0.1845  m1_loss_dice_0: 1.408  m1_loss_ce_1: 0.6022  m1_loss_mask_1: 0.1761  m1_loss_dice_1: 1.328  m1_loss_ce_2: 0.5581  m1_loss_mask_2: 0.1651  m1_loss_dice_2: 1.242  m1_loss_ce_3: 0.5221  m1_loss_mask_3: 0.1653  m1_loss_dice_3: 1.22  m1_loss_ce_4: 0.4889  m1_loss_mask_4: 0.1623  m1_loss_dice_4: 1.224  m1_loss_ce_5: 0.4857  m1_loss_mask_5: 0.1556  m1_loss_dice_5: 1.23  m1_loss_ce_6: 0.473  m1_loss_mask_6: 0.1603  m1_loss_dice_6: 1.221  m1_loss_ce_7: 0.4461  m1_loss_mask_7: 0.1557  m1_loss_dice_7: 1.2  m1_loss_ce_8: 0.4642  m1_loss_mask_8: 0.1562  m1_loss_dice_8: 1.194  m2_loss_ce: 0.5605  m2_loss_mask: 0.1616  m2_loss_dice: 1.234  m2_loss_ce_0: 0.5815  m2_loss_mask_0: 0.189  m2_loss_dice_0: 1.525  m2_loss_ce_1: 0.7032  m2_loss_mask_1: 0.1816  m2_loss_dice_1: 1.367  m2_loss_ce_2: 0.6539  m2_loss_mask_2: 0.1638  m2_loss_dice_2: 1.304  m2_loss_ce_3: 0.6025  m2_loss_mask_3: 0.1645  m2_loss_dice_3: 1.235  m2_loss_ce_4: 0.5937  m2_loss_mask_4: 0.1632  m2_loss_dice_4: 1.268  m2_loss_ce_5: 0.5946  m2_loss_mask_5: 0.1619  m2_loss_dice_5: 1.291  m2_loss_ce_6: 0.5463  m2_loss_mask_6: 0.1633  m2_loss_dice_6: 1.235  m2_loss_ce_7: 0.53  m2_loss_mask_7: 0.1628  m2_loss_dice_7: 1.236  m2_loss_ce_8: 0.5455  m2_loss_mask_8: 0.1619  m2_loss_dice_8: 1.262    time: 1.4422  last_time: 1.4462  data_time: 0.0597  last_data_time: 0.0632   lr: 0.0001  max_mem: 35205M
[10/06 22:53:53] d2.utils.events INFO:  eta: 0:00:57  iter: 959  total_loss: 37.05  m1_loss_ce: 0.4345  m1_loss_mask: 0.1549  m1_loss_dice: 1.105  m1_loss_ce_0: 0.5658  m1_loss_mask_0: 0.1756  m1_loss_dice_0: 1.294  m1_loss_ce_1: 0.6064  m1_loss_mask_1: 0.1634  m1_loss_dice_1: 1.197  m1_loss_ce_2: 0.5334  m1_loss_mask_2: 0.1569  m1_loss_dice_2: 1.183  m1_loss_ce_3: 0.4869  m1_loss_mask_3: 0.1572  m1_loss_dice_3: 1.128  m1_loss_ce_4: 0.4753  m1_loss_mask_4: 0.1556  m1_loss_dice_4: 1.132  m1_loss_ce_5: 0.4292  m1_loss_mask_5: 0.1578  m1_loss_dice_5: 1.108  m1_loss_ce_6: 0.4545  m1_loss_mask_6: 0.1554  m1_loss_dice_6: 1.087  m1_loss_ce_7: 0.4408  m1_loss_mask_7: 0.1548  m1_loss_dice_7: 1.138  m1_loss_ce_8: 0.4192  m1_loss_mask_8: 0.1546  m1_loss_dice_8: 1.088  m2_loss_ce: 0.5067  m2_loss_mask: 0.1588  m2_loss_dice: 1.148  m2_loss_ce_0: 0.57  m2_loss_mask_0: 0.191  m2_loss_dice_0: 1.39  m2_loss_ce_1: 0.6749  m2_loss_mask_1: 0.173  m2_loss_dice_1: 1.253  m2_loss_ce_2: 0.6054  m2_loss_mask_2: 0.165  m2_loss_dice_2: 1.23  m2_loss_ce_3: 0.5444  m2_loss_mask_3: 0.1638  m2_loss_dice_3: 1.155  m2_loss_ce_4: 0.5529  m2_loss_mask_4: 0.165  m2_loss_dice_4: 1.141  m2_loss_ce_5: 0.5467  m2_loss_mask_5: 0.1607  m2_loss_dice_5: 1.15  m2_loss_ce_6: 0.5341  m2_loss_mask_6: 0.1624  m2_loss_dice_6: 1.153  m2_loss_ce_7: 0.5397  m2_loss_mask_7: 0.1613  m2_loss_dice_7: 1.161  m2_loss_ce_8: 0.5299  m2_loss_mask_8: 0.1618  m2_loss_dice_8: 1.119    time: 1.4419  last_time: 1.5996  data_time: 0.0497  last_data_time: 0.0539   lr: 0.0001  max_mem: 35205M
[10/06 22:54:21] d2.utils.events INFO:  eta: 0:00:28  iter: 979  total_loss: 37.2  m1_loss_ce: 0.4384  m1_loss_mask: 0.1643  m1_loss_dice: 1.097  m1_loss_ce_0: 0.549  m1_loss_mask_0: 0.1912  m1_loss_dice_0: 1.257  m1_loss_ce_1: 0.615  m1_loss_mask_1: 0.1802  m1_loss_dice_1: 1.228  m1_loss_ce_2: 0.5431  m1_loss_mask_2: 0.1694  m1_loss_dice_2: 1.18  m1_loss_ce_3: 0.4751  m1_loss_mask_3: 0.1701  m1_loss_dice_3: 1.128  m1_loss_ce_4: 0.4756  m1_loss_mask_4: 0.1698  m1_loss_dice_4: 1.124  m1_loss_ce_5: 0.4417  m1_loss_mask_5: 0.1655  m1_loss_dice_5: 1.129  m1_loss_ce_6: 0.4469  m1_loss_mask_6: 0.1657  m1_loss_dice_6: 1.119  m1_loss_ce_7: 0.4147  m1_loss_mask_7: 0.1647  m1_loss_dice_7: 1.107  m1_loss_ce_8: 0.3868  m1_loss_mask_8: 0.163  m1_loss_dice_8: 1.111  m2_loss_ce: 0.5064  m2_loss_mask: 0.172  m2_loss_dice: 1.163  m2_loss_ce_0: 0.5931  m2_loss_mask_0: 0.2055  m2_loss_dice_0: 1.386  m2_loss_ce_1: 0.6655  m2_loss_mask_1: 0.1816  m2_loss_dice_1: 1.237  m2_loss_ce_2: 0.6034  m2_loss_mask_2: 0.172  m2_loss_dice_2: 1.189  m2_loss_ce_3: 0.5708  m2_loss_mask_3: 0.1746  m2_loss_dice_3: 1.155  m2_loss_ce_4: 0.5304  m2_loss_mask_4: 0.1731  m2_loss_dice_4: 1.158  m2_loss_ce_5: 0.5171  m2_loss_mask_5: 0.1744  m2_loss_dice_5: 1.149  m2_loss_ce_6: 0.4973  m2_loss_mask_6: 0.171  m2_loss_dice_6: 1.151  m2_loss_ce_7: 0.5365  m2_loss_mask_7: 0.1718  m2_loss_dice_7: 1.141  m2_loss_ce_8: 0.4851  m2_loss_mask_8: 0.1706  m2_loss_dice_8: 1.159    time: 1.4410  last_time: 1.3822  data_time: 0.0529  last_data_time: 0.0458   lr: 0.0001  max_mem: 35205M
[10/06 22:54:50] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_0_6_0_4/model_final.pth
[10/06 22:54:53] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 37.77  m1_loss_ce: 0.4043  m1_loss_mask: 0.1603  m1_loss_dice: 1.129  m1_loss_ce_0: 0.5036  m1_loss_mask_0: 0.1961  m1_loss_dice_0: 1.358  m1_loss_ce_1: 0.594  m1_loss_mask_1: 0.1735  m1_loss_dice_1: 1.285  m1_loss_ce_2: 0.5472  m1_loss_mask_2: 0.164  m1_loss_dice_2: 1.211  m1_loss_ce_3: 0.4801  m1_loss_mask_3: 0.1642  m1_loss_dice_3: 1.158  m1_loss_ce_4: 0.4378  m1_loss_mask_4: 0.1618  m1_loss_dice_4: 1.172  m1_loss_ce_5: 0.4432  m1_loss_mask_5: 0.1621  m1_loss_dice_5: 1.146  m1_loss_ce_6: 0.438  m1_loss_mask_6: 0.1586  m1_loss_dice_6: 1.135  m1_loss_ce_7: 0.4124  m1_loss_mask_7: 0.1612  m1_loss_dice_7: 1.116  m1_loss_ce_8: 0.4422  m1_loss_mask_8: 0.1601  m1_loss_dice_8: 1.128  m2_loss_ce: 0.5222  m2_loss_mask: 0.1728  m2_loss_dice: 1.162  m2_loss_ce_0: 0.5537  m2_loss_mask_0: 0.2096  m2_loss_dice_0: 1.463  m2_loss_ce_1: 0.6311  m2_loss_mask_1: 0.1828  m2_loss_dice_1: 1.331  m2_loss_ce_2: 0.596  m2_loss_mask_2: 0.1746  m2_loss_dice_2: 1.238  m2_loss_ce_3: 0.5445  m2_loss_mask_3: 0.174  m2_loss_dice_3: 1.184  m2_loss_ce_4: 0.4938  m2_loss_mask_4: 0.1729  m2_loss_dice_4: 1.181  m2_loss_ce_5: 0.5104  m2_loss_mask_5: 0.173  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.5028  m2_loss_mask_6: 0.1742  m2_loss_dice_6: 1.226  m2_loss_ce_7: 0.5092  m2_loss_mask_7: 0.1717  m2_loss_dice_7: 1.18  m2_loss_ce_8: 0.5174  m2_loss_mask_8: 0.1725  m2_loss_dice_8: 1.171    time: 1.4413  last_time: 1.4560  data_time: 0.0567  last_data_time: 0.0372   lr: 0.0001  max_mem: 35205M
[10/06 22:54:53] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:23:58 (1.4413 s / it)
[10/06 22:54:53] d2.engine.hooks INFO: Total training time: 0:24:06 (0:00:07 on hooks)
[10/06 22:54:53] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[10/06 22:54:53] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[10/06 22:54:53] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/06 22:54:53] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/06 22:54:53] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[10/06 22:56:21] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval_cc2vw6s ...
[10/06 22:57:25] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 59.211 | 80.664 | 72.260 |      19       |
| Things | 52.384 | 80.138 | 65.067 |       8       |
| Stuff  | 64.175 | 81.047 | 77.492 |      11       |
[10/06 22:57:25] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 96.910 | 97.618 | 99.275 |     Stuff     |
| class_8  | 72.503 | 83.672 | 86.652 |     Stuff     |
| class_11 | 86.733 | 89.006 | 97.446 |     Stuff     |
| class_12 | 42.476 | 78.730 | 53.951 |     Stuff     |
| class_13 | 37.515 | 74.639 | 50.262 |     Stuff     |
| class_17 | 45.082 | 64.196 | 70.226 |     Stuff     |
| class_19 | 50.087 | 69.023 | 72.566 |     Stuff     |
| class_20 | 63.681 | 76.696 | 83.031 |     Stuff     |
| class_21 | 89.362 | 90.383 | 98.869 |     Stuff     |
| class_22 | 33.638 | 75.600 | 44.494 |     Stuff     |
| class_23 | 87.942 | 91.949 | 95.642 |     Stuff     |
| class_24 | 52.202 | 77.211 | 67.610 |    Things     |
| class_25 | 48.231 | 74.175 | 65.022 |    Things     |
| class_26 | 64.426 | 83.360 | 77.286 |    Things     |
| class_27 | 51.634 | 87.490 | 59.016 |    Things     |
| class_28 | 66.196 | 90.128 | 73.446 |    Things     |
| class_31 | 54.903 | 82.354 | 66.667 |    Things     |
| class_32 | 38.116 | 74.476 | 51.178 |    Things     |
| class_33 | 43.369 | 71.913 | 60.307 |    Things     |
[10/06 22:57:25] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/06 22:57:25] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[10/06 22:57:25] d2.evaluation.testing INFO: copypaste: 59.2108,80.6643,72.2604,52.3843,80.1385,65.0666,64.1754,81.0466,77.4923,96.9101,97.6182,99.2746,72.5034,83.6719,86.6521,86.7334,89.0063,97.4464,42.4757,78.7302,53.9510,37.5151,74.6394,50.2618,45.0820,64.1957,70.2259,50.0873,69.0227,72.5664,63.6812,76.6958,83.0309,89.3617,90.3835,98.8695,33.6379,75.6004,44.4944,87.9421,91.9491,95.6422,52.2022,77.2109,67.6098,48.2305,74.1752,65.0224,64.4256,83.3605,77.2855,51.6336,87.4903,59.0164,66.1956,90.1279,73.4463,54.9027,82.3541,66.6667,38.1156,74.4758,51.1785,43.3687,71.9131,60.3071
