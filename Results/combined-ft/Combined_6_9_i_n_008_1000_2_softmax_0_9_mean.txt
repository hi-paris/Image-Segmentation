[08/18 18:06:15] detectron2 INFO: Rank of current process: 0. World size: 1
[08/18 18:06:16] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA A100-PCIE-40GB (arch=8.0)
Driver version                   535.129.03
CUDA_HOME                        /usr
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/18 18:06:16] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_0_9.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/18 18:06:16] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_0_9.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_0_9
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/18 18:06:16] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_0_9
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/18 18:06:16] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_0_9/config.yaml
[08/18 18:06:16] d2.utils.env INFO: Using a generated random seed 19792228
[08/18 18:06:22] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/18 18:06:22] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/18 18:06:22] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/18 18:06:22] d2.data.build INFO: Using training sampler TrainingSampler
[08/18 18:06:22] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/18 18:06:22] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/18 18:06:22] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/18 18:06:22] d2.data.build INFO: Making batched data loader with batch_size=8
[08/18 18:06:23] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/18 18:06:27] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/18 18:06:27] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 18:06:27] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 18:06:47] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 18:06:47] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 18:06:53] d2.engine.hooks INFO: Total training time: 0:00:05 (0:00:00 on hooks)
[08/18 18:06:53] d2.utils.events INFO:  iter: 0       lr: N/A  max_mem: 39021M
[08/18 19:26:17] detectron2 INFO: Rank of current process: 0. World size: 1
[08/18 19:26:18] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/18 19:26:18] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_0_9.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/18 19:26:18] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_0_9.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_0_9
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/18 19:26:18] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_0_9
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/18 19:26:18] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_0_9/config.yaml
[08/18 19:26:18] d2.utils.env INFO: Using a generated random seed 20294193
[08/18 19:26:22] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/18 19:26:22] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/18 19:26:23] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/18 19:26:23] d2.data.build INFO: Using training sampler TrainingSampler
[08/18 19:26:23] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/18 19:26:23] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/18 19:26:23] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/18 19:26:23] d2.data.build INFO: Making batched data loader with batch_size=8
[08/18 19:26:23] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/18 19:26:26] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/18 19:26:26] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 19:26:26] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 19:26:46] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 19:26:46] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 19:26:50] d2.engine.hooks INFO: Total training time: 0:00:04 (0:00:00 on hooks)
[08/18 19:26:50] d2.utils.events INFO:  iter: 0       lr: N/A  max_mem: 43766M
[08/18 19:35:32] detectron2 INFO: Rank of current process: 0. World size: 2
[08/18 19:35:33] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/18 19:35:33] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_0_9.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/18 19:35:33] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_0_9.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_0_9
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/18 19:35:33] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_0_9
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/18 19:35:33] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_0_9/config.yaml
[08/18 19:35:33] d2.utils.env INFO: Using a generated random seed 35219332
[08/18 19:35:37] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/18 19:35:37] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/18 19:35:37] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/18 19:35:37] d2.data.build INFO: Using training sampler TrainingSampler
[08/18 19:35:38] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/18 19:35:38] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/18 19:35:38] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/18 19:35:38] d2.data.build INFO: Making batched data loader with batch_size=4
[08/18 19:35:38] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/18 19:35:42] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/18 19:35:42] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 19:35:42] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 19:35:43] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 19:35:43] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/18 19:36:19] d2.utils.events INFO:  eta: 0:23:44  iter: 19  total_loss: 43.82  m1_loss_ce: 0.5495  m1_loss_mask: 0.1774  m1_loss_dice: 1.161  m1_loss_ce_0: 0.6489  m1_loss_mask_0: 0.2025  m1_loss_dice_0: 1.446  m1_loss_ce_1: 0.6965  m1_loss_mask_1: 0.1942  m1_loss_dice_1: 1.354  m1_loss_ce_2: 0.6825  m1_loss_mask_2: 0.1839  m1_loss_dice_2: 1.296  m1_loss_ce_3: 0.5984  m1_loss_mask_3: 0.185  m1_loss_dice_3: 1.22  m1_loss_ce_4: 0.568  m1_loss_mask_4: 0.1864  m1_loss_dice_4: 1.209  m1_loss_ce_5: 0.5732  m1_loss_mask_5: 0.1824  m1_loss_dice_5: 1.227  m1_loss_ce_6: 0.5392  m1_loss_mask_6: 0.182  m1_loss_dice_6: 1.224  m1_loss_ce_7: 0.5187  m1_loss_mask_7: 0.1791  m1_loss_dice_7: 1.21  m1_loss_ce_8: 0.5054  m1_loss_mask_8: 0.1792  m1_loss_dice_8: 1.218  m2_loss_ce: 0.4904  m2_loss_mask: 0.1725  m2_loss_dice: 1.199  m2_loss_ce_0: 0.623  m2_loss_mask_0: 0.1959  m2_loss_dice_0: 1.402  m2_loss_ce_1: 0.6718  m2_loss_mask_1: 0.1799  m2_loss_dice_1: 1.33  m2_loss_ce_2: 0.621  m2_loss_mask_2: 0.1673  m2_loss_dice_2: 1.273  m2_loss_ce_3: 0.5593  m2_loss_mask_3: 0.1732  m2_loss_dice_3: 1.19  m2_loss_ce_4: 0.5154  m2_loss_mask_4: 0.1718  m2_loss_dice_4: 1.202  m2_loss_ce_5: 0.5443  m2_loss_mask_5: 0.1715  m2_loss_dice_5: 1.186  m2_loss_ce_6: 0.5369  m2_loss_mask_6: 0.1727  m2_loss_dice_6: 1.179  m2_loss_ce_7: 0.4967  m2_loss_mask_7: 0.1723  m2_loss_dice_7: 1.206  m2_loss_ce_8: 0.5099  m2_loss_mask_8: 0.169  m2_loss_dice_8: 1.192  com_loss_ce: 2.147  com_loss_mask: 0.6935  com_loss_dice: 0.9793    time: 1.4568  last_time: 1.4454  data_time: 0.2227  last_data_time: 0.0529   lr: 0.0001  max_mem: 34508M
[08/18 19:36:48] d2.utils.events INFO:  eta: 0:23:12  iter: 39  total_loss: 44.04  m1_loss_ce: 0.555  m1_loss_mask: 0.1545  m1_loss_dice: 1.257  m1_loss_ce_0: 0.6415  m1_loss_mask_0: 0.1873  m1_loss_dice_0: 1.473  m1_loss_ce_1: 0.708  m1_loss_mask_1: 0.1675  m1_loss_dice_1: 1.389  m1_loss_ce_2: 0.6495  m1_loss_mask_2: 0.1609  m1_loss_dice_2: 1.357  m1_loss_ce_3: 0.5864  m1_loss_mask_3: 0.1594  m1_loss_dice_3: 1.321  m1_loss_ce_4: 0.5627  m1_loss_mask_4: 0.159  m1_loss_dice_4: 1.306  m1_loss_ce_5: 0.5637  m1_loss_mask_5: 0.1569  m1_loss_dice_5: 1.312  m1_loss_ce_6: 0.5612  m1_loss_mask_6: 0.1577  m1_loss_dice_6: 1.269  m1_loss_ce_7: 0.5349  m1_loss_mask_7: 0.1595  m1_loss_dice_7: 1.289  m1_loss_ce_8: 0.5359  m1_loss_mask_8: 0.1551  m1_loss_dice_8: 1.238  m2_loss_ce: 0.5169  m2_loss_mask: 0.1524  m2_loss_dice: 1.292  m2_loss_ce_0: 0.6515  m2_loss_mask_0: 0.1833  m2_loss_dice_0: 1.535  m2_loss_ce_1: 0.6738  m2_loss_mask_1: 0.1608  m2_loss_dice_1: 1.42  m2_loss_ce_2: 0.6489  m2_loss_mask_2: 0.1516  m2_loss_dice_2: 1.332  m2_loss_ce_3: 0.6157  m2_loss_mask_3: 0.1544  m2_loss_dice_3: 1.3  m2_loss_ce_4: 0.5436  m2_loss_mask_4: 0.155  m2_loss_dice_4: 1.313  m2_loss_ce_5: 0.5548  m2_loss_mask_5: 0.1561  m2_loss_dice_5: 1.256  m2_loss_ce_6: 0.5301  m2_loss_mask_6: 0.1547  m2_loss_dice_6: 1.267  m2_loss_ce_7: 0.5193  m2_loss_mask_7: 0.1527  m2_loss_dice_7: 1.291  m2_loss_ce_8: 0.5194  m2_loss_mask_8: 0.1522  m2_loss_dice_8: 1.271  com_loss_ce: 2.149  com_loss_mask: 0.6936  com_loss_dice: 0.9805    time: 1.4648  last_time: 1.5044  data_time: 0.0483  last_data_time: 0.0511   lr: 0.0001  max_mem: 34664M
[08/18 19:37:18] d2.utils.events INFO:  eta: 0:22:54  iter: 59  total_loss: 45.25  m1_loss_ce: 0.5653  m1_loss_mask: 0.1655  m1_loss_dice: 1.277  m1_loss_ce_0: 0.6352  m1_loss_mask_0: 0.1951  m1_loss_dice_0: 1.519  m1_loss_ce_1: 0.7096  m1_loss_mask_1: 0.1783  m1_loss_dice_1: 1.418  m1_loss_ce_2: 0.6656  m1_loss_mask_2: 0.1742  m1_loss_dice_2: 1.33  m1_loss_ce_3: 0.5853  m1_loss_mask_3: 0.1719  m1_loss_dice_3: 1.274  m1_loss_ce_4: 0.5765  m1_loss_mask_4: 0.1702  m1_loss_dice_4: 1.275  m1_loss_ce_5: 0.5721  m1_loss_mask_5: 0.1664  m1_loss_dice_5: 1.289  m1_loss_ce_6: 0.5583  m1_loss_mask_6: 0.1696  m1_loss_dice_6: 1.263  m1_loss_ce_7: 0.5192  m1_loss_mask_7: 0.1647  m1_loss_dice_7: 1.254  m1_loss_ce_8: 0.5525  m1_loss_mask_8: 0.167  m1_loss_dice_8: 1.274  m2_loss_ce: 0.5329  m2_loss_mask: 0.16  m2_loss_dice: 1.274  m2_loss_ce_0: 0.6776  m2_loss_mask_0: 0.1884  m2_loss_dice_0: 1.52  m2_loss_ce_1: 0.6861  m2_loss_mask_1: 0.1677  m2_loss_dice_1: 1.441  m2_loss_ce_2: 0.64  m2_loss_mask_2: 0.158  m2_loss_dice_2: 1.32  m2_loss_ce_3: 0.6106  m2_loss_mask_3: 0.1603  m2_loss_dice_3: 1.292  m2_loss_ce_4: 0.6133  m2_loss_mask_4: 0.1615  m2_loss_dice_4: 1.302  m2_loss_ce_5: 0.5608  m2_loss_mask_5: 0.1593  m2_loss_dice_5: 1.282  m2_loss_ce_6: 0.5593  m2_loss_mask_6: 0.1597  m2_loss_dice_6: 1.26  m2_loss_ce_7: 0.5548  m2_loss_mask_7: 0.1584  m2_loss_dice_7: 1.274  m2_loss_ce_8: 0.5691  m2_loss_mask_8: 0.1605  m2_loss_dice_8: 1.261  com_loss_ce: 2.149  com_loss_mask: 0.6936  com_loss_dice: 0.9813    time: 1.4684  last_time: 1.4352  data_time: 0.0455  last_data_time: 0.0523   lr: 0.0001  max_mem: 34825M
[08/18 19:37:48] d2.utils.events INFO:  eta: 0:22:24  iter: 79  total_loss: 46.4  m1_loss_ce: 0.5894  m1_loss_mask: 0.1551  m1_loss_dice: 1.304  m1_loss_ce_0: 0.6484  m1_loss_mask_0: 0.1852  m1_loss_dice_0: 1.498  m1_loss_ce_1: 0.7255  m1_loss_mask_1: 0.1733  m1_loss_dice_1: 1.397  m1_loss_ce_2: 0.6652  m1_loss_mask_2: 0.1733  m1_loss_dice_2: 1.354  m1_loss_ce_3: 0.5824  m1_loss_mask_3: 0.1679  m1_loss_dice_3: 1.371  m1_loss_ce_4: 0.5763  m1_loss_mask_4: 0.1582  m1_loss_dice_4: 1.296  m1_loss_ce_5: 0.5588  m1_loss_mask_5: 0.1598  m1_loss_dice_5: 1.301  m1_loss_ce_6: 0.5582  m1_loss_mask_6: 0.1563  m1_loss_dice_6: 1.285  m1_loss_ce_7: 0.5641  m1_loss_mask_7: 0.1554  m1_loss_dice_7: 1.304  m1_loss_ce_8: 0.5432  m1_loss_mask_8: 0.1565  m1_loss_dice_8: 1.263  m2_loss_ce: 0.542  m2_loss_mask: 0.1554  m2_loss_dice: 1.296  m2_loss_ce_0: 0.6498  m2_loss_mask_0: 0.1916  m2_loss_dice_0: 1.571  m2_loss_ce_1: 0.7136  m2_loss_mask_1: 0.1698  m2_loss_dice_1: 1.448  m2_loss_ce_2: 0.6666  m2_loss_mask_2: 0.1599  m2_loss_dice_2: 1.36  m2_loss_ce_3: 0.5933  m2_loss_mask_3: 0.1596  m2_loss_dice_3: 1.308  m2_loss_ce_4: 0.5812  m2_loss_mask_4: 0.1635  m2_loss_dice_4: 1.305  m2_loss_ce_5: 0.5904  m2_loss_mask_5: 0.1618  m2_loss_dice_5: 1.307  m2_loss_ce_6: 0.5575  m2_loss_mask_6: 0.156  m2_loss_dice_6: 1.295  m2_loss_ce_7: 0.5775  m2_loss_mask_7: 0.1559  m2_loss_dice_7: 1.287  m2_loss_ce_8: 0.5435  m2_loss_mask_8: 0.158  m2_loss_dice_8: 1.311  com_loss_ce: 2.146  com_loss_mask: 0.6936  com_loss_dice: 0.9809    time: 1.4684  last_time: 1.4941  data_time: 0.0467  last_data_time: 0.0372   lr: 0.0001  max_mem: 34825M
[08/18 19:38:18] d2.utils.events INFO:  eta: 0:21:57  iter: 99  total_loss: 43.81  m1_loss_ce: 0.5258  m1_loss_mask: 0.1742  m1_loss_dice: 1.156  m1_loss_ce_0: 0.6197  m1_loss_mask_0: 0.2069  m1_loss_dice_0: 1.397  m1_loss_ce_1: 0.6811  m1_loss_mask_1: 0.1857  m1_loss_dice_1: 1.305  m1_loss_ce_2: 0.6339  m1_loss_mask_2: 0.1781  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.5821  m1_loss_mask_3: 0.1742  m1_loss_dice_3: 1.181  m1_loss_ce_4: 0.5623  m1_loss_mask_4: 0.1742  m1_loss_dice_4: 1.184  m1_loss_ce_5: 0.5632  m1_loss_mask_5: 0.1751  m1_loss_dice_5: 1.189  m1_loss_ce_6: 0.5487  m1_loss_mask_6: 0.1755  m1_loss_dice_6: 1.196  m1_loss_ce_7: 0.5353  m1_loss_mask_7: 0.1743  m1_loss_dice_7: 1.142  m1_loss_ce_8: 0.5289  m1_loss_mask_8: 0.1736  m1_loss_dice_8: 1.179  m2_loss_ce: 0.5191  m2_loss_mask: 0.1653  m2_loss_dice: 1.169  m2_loss_ce_0: 0.636  m2_loss_mask_0: 0.1997  m2_loss_dice_0: 1.405  m2_loss_ce_1: 0.6544  m2_loss_mask_1: 0.1759  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.6351  m2_loss_mask_2: 0.1726  m2_loss_dice_2: 1.252  m2_loss_ce_3: 0.5989  m2_loss_mask_3: 0.1697  m2_loss_dice_3: 1.22  m2_loss_ce_4: 0.5653  m2_loss_mask_4: 0.1704  m2_loss_dice_4: 1.189  m2_loss_ce_5: 0.5507  m2_loss_mask_5: 0.1671  m2_loss_dice_5: 1.187  m2_loss_ce_6: 0.5498  m2_loss_mask_6: 0.1659  m2_loss_dice_6: 1.165  m2_loss_ce_7: 0.5529  m2_loss_mask_7: 0.1658  m2_loss_dice_7: 1.17  m2_loss_ce_8: 0.5352  m2_loss_mask_8: 0.1641  m2_loss_dice_8: 1.179  com_loss_ce: 2.146  com_loss_mask: 0.6936  com_loss_dice: 0.9793    time: 1.4743  last_time: 1.4646  data_time: 0.0458  last_data_time: 0.0434   lr: 0.0001  max_mem: 34865M
[08/18 19:38:47] d2.utils.events INFO:  eta: 0:21:27  iter: 119  total_loss: 45.88  m1_loss_ce: 0.5846  m1_loss_mask: 0.1759  m1_loss_dice: 1.245  m1_loss_ce_0: 0.6659  m1_loss_mask_0: 0.2128  m1_loss_dice_0: 1.475  m1_loss_ce_1: 0.7133  m1_loss_mask_1: 0.1954  m1_loss_dice_1: 1.395  m1_loss_ce_2: 0.6386  m1_loss_mask_2: 0.1849  m1_loss_dice_2: 1.321  m1_loss_ce_3: 0.5721  m1_loss_mask_3: 0.1811  m1_loss_dice_3: 1.267  m1_loss_ce_4: 0.5903  m1_loss_mask_4: 0.1799  m1_loss_dice_4: 1.238  m1_loss_ce_5: 0.5677  m1_loss_mask_5: 0.1774  m1_loss_dice_5: 1.286  m1_loss_ce_6: 0.5641  m1_loss_mask_6: 0.1756  m1_loss_dice_6: 1.269  m1_loss_ce_7: 0.5437  m1_loss_mask_7: 0.1761  m1_loss_dice_7: 1.247  m1_loss_ce_8: 0.5587  m1_loss_mask_8: 0.1763  m1_loss_dice_8: 1.229  m2_loss_ce: 0.5454  m2_loss_mask: 0.1754  m2_loss_dice: 1.213  m2_loss_ce_0: 0.6244  m2_loss_mask_0: 0.2082  m2_loss_dice_0: 1.501  m2_loss_ce_1: 0.6811  m2_loss_mask_1: 0.189  m2_loss_dice_1: 1.379  m2_loss_ce_2: 0.6266  m2_loss_mask_2: 0.1729  m2_loss_dice_2: 1.307  m2_loss_ce_3: 0.6006  m2_loss_mask_3: 0.1695  m2_loss_dice_3: 1.254  m2_loss_ce_4: 0.5666  m2_loss_mask_4: 0.1708  m2_loss_dice_4: 1.266  m2_loss_ce_5: 0.5351  m2_loss_mask_5: 0.1694  m2_loss_dice_5: 1.237  m2_loss_ce_6: 0.5428  m2_loss_mask_6: 0.1684  m2_loss_dice_6: 1.24  m2_loss_ce_7: 0.5273  m2_loss_mask_7: 0.1716  m2_loss_dice_7: 1.252  m2_loss_ce_8: 0.5374  m2_loss_mask_8: 0.1751  m2_loss_dice_8: 1.218  com_loss_ce: 2.145  com_loss_mask: 0.6936  com_loss_dice: 0.9802    time: 1.4720  last_time: 1.5129  data_time: 0.0434  last_data_time: 0.0438   lr: 0.0001  max_mem: 34865M
[08/18 19:39:17] d2.utils.events INFO:  eta: 0:20:59  iter: 139  total_loss: 43.87  m1_loss_ce: 0.5446  m1_loss_mask: 0.1625  m1_loss_dice: 1.215  m1_loss_ce_0: 0.598  m1_loss_mask_0: 0.1994  m1_loss_dice_0: 1.421  m1_loss_ce_1: 0.6888  m1_loss_mask_1: 0.1811  m1_loss_dice_1: 1.374  m1_loss_ce_2: 0.6217  m1_loss_mask_2: 0.1724  m1_loss_dice_2: 1.28  m1_loss_ce_3: 0.5886  m1_loss_mask_3: 0.1659  m1_loss_dice_3: 1.241  m1_loss_ce_4: 0.5468  m1_loss_mask_4: 0.167  m1_loss_dice_4: 1.213  m1_loss_ce_5: 0.5315  m1_loss_mask_5: 0.1625  m1_loss_dice_5: 1.237  m1_loss_ce_6: 0.5337  m1_loss_mask_6: 0.1637  m1_loss_dice_6: 1.194  m1_loss_ce_7: 0.534  m1_loss_mask_7: 0.1643  m1_loss_dice_7: 1.18  m1_loss_ce_8: 0.5204  m1_loss_mask_8: 0.1665  m1_loss_dice_8: 1.189  m2_loss_ce: 0.5288  m2_loss_mask: 0.1619  m2_loss_dice: 1.198  m2_loss_ce_0: 0.6043  m2_loss_mask_0: 0.1993  m2_loss_dice_0: 1.454  m2_loss_ce_1: 0.6551  m2_loss_mask_1: 0.1777  m2_loss_dice_1: 1.37  m2_loss_ce_2: 0.6311  m2_loss_mask_2: 0.1694  m2_loss_dice_2: 1.255  m2_loss_ce_3: 0.5963  m2_loss_mask_3: 0.1664  m2_loss_dice_3: 1.208  m2_loss_ce_4: 0.5458  m2_loss_mask_4: 0.1686  m2_loss_dice_4: 1.215  m2_loss_ce_5: 0.546  m2_loss_mask_5: 0.1691  m2_loss_dice_5: 1.202  m2_loss_ce_6: 0.5302  m2_loss_mask_6: 0.1642  m2_loss_dice_6: 1.233  m2_loss_ce_7: 0.5255  m2_loss_mask_7: 0.1656  m2_loss_dice_7: 1.204  m2_loss_ce_8: 0.5048  m2_loss_mask_8: 0.1632  m2_loss_dice_8: 1.228  com_loss_ce: 2.145  com_loss_mask: 0.6936  com_loss_dice: 0.9784    time: 1.4725  last_time: 1.4501  data_time: 0.0428  last_data_time: 0.0406   lr: 0.0001  max_mem: 34865M
[08/18 19:39:46] d2.utils.events INFO:  eta: 0:20:30  iter: 159  total_loss: 43.95  m1_loss_ce: 0.5278  m1_loss_mask: 0.1616  m1_loss_dice: 1.208  m1_loss_ce_0: 0.61  m1_loss_mask_0: 0.1866  m1_loss_dice_0: 1.426  m1_loss_ce_1: 0.6386  m1_loss_mask_1: 0.1765  m1_loss_dice_1: 1.372  m1_loss_ce_2: 0.6188  m1_loss_mask_2: 0.1676  m1_loss_dice_2: 1.289  m1_loss_ce_3: 0.5505  m1_loss_mask_3: 0.168  m1_loss_dice_3: 1.212  m1_loss_ce_4: 0.5366  m1_loss_mask_4: 0.1628  m1_loss_dice_4: 1.221  m1_loss_ce_5: 0.5462  m1_loss_mask_5: 0.1633  m1_loss_dice_5: 1.224  m1_loss_ce_6: 0.5347  m1_loss_mask_6: 0.1657  m1_loss_dice_6: 1.192  m1_loss_ce_7: 0.4996  m1_loss_mask_7: 0.1639  m1_loss_dice_7: 1.235  m1_loss_ce_8: 0.5106  m1_loss_mask_8: 0.1667  m1_loss_dice_8: 1.209  m2_loss_ce: 0.4907  m2_loss_mask: 0.167  m2_loss_dice: 1.188  m2_loss_ce_0: 0.6148  m2_loss_mask_0: 0.1909  m2_loss_dice_0: 1.476  m2_loss_ce_1: 0.6405  m2_loss_mask_1: 0.1734  m2_loss_dice_1: 1.349  m2_loss_ce_2: 0.5865  m2_loss_mask_2: 0.1712  m2_loss_dice_2: 1.285  m2_loss_ce_3: 0.5408  m2_loss_mask_3: 0.1699  m2_loss_dice_3: 1.234  m2_loss_ce_4: 0.546  m2_loss_mask_4: 0.1664  m2_loss_dice_4: 1.289  m2_loss_ce_5: 0.5312  m2_loss_mask_5: 0.1682  m2_loss_dice_5: 1.236  m2_loss_ce_6: 0.5189  m2_loss_mask_6: 0.1688  m2_loss_dice_6: 1.231  m2_loss_ce_7: 0.5081  m2_loss_mask_7: 0.1667  m2_loss_dice_7: 1.214  m2_loss_ce_8: 0.4795  m2_loss_mask_8: 0.1675  m2_loss_dice_8: 1.185  com_loss_ce: 2.142  com_loss_mask: 0.6936  com_loss_dice: 0.98    time: 1.4727  last_time: 1.4399  data_time: 0.0443  last_data_time: 0.0411   lr: 0.0001  max_mem: 34980M
[08/18 19:40:15] d2.utils.events INFO:  eta: 0:19:59  iter: 179  total_loss: 43.82  m1_loss_ce: 0.5525  m1_loss_mask: 0.1611  m1_loss_dice: 1.146  m1_loss_ce_0: 0.6613  m1_loss_mask_0: 0.1913  m1_loss_dice_0: 1.339  m1_loss_ce_1: 0.7136  m1_loss_mask_1: 0.173  m1_loss_dice_1: 1.265  m1_loss_ce_2: 0.6517  m1_loss_mask_2: 0.1712  m1_loss_dice_2: 1.218  m1_loss_ce_3: 0.6086  m1_loss_mask_3: 0.1654  m1_loss_dice_3: 1.18  m1_loss_ce_4: 0.5866  m1_loss_mask_4: 0.1651  m1_loss_dice_4: 1.154  m1_loss_ce_5: 0.5782  m1_loss_mask_5: 0.1663  m1_loss_dice_5: 1.174  m1_loss_ce_6: 0.5684  m1_loss_mask_6: 0.1646  m1_loss_dice_6: 1.148  m1_loss_ce_7: 0.541  m1_loss_mask_7: 0.1653  m1_loss_dice_7: 1.154  m1_loss_ce_8: 0.5798  m1_loss_mask_8: 0.1623  m1_loss_dice_8: 1.14  m2_loss_ce: 0.5167  m2_loss_mask: 0.1659  m2_loss_dice: 1.161  m2_loss_ce_0: 0.6264  m2_loss_mask_0: 0.197  m2_loss_dice_0: 1.387  m2_loss_ce_1: 0.6952  m2_loss_mask_1: 0.1763  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.6499  m2_loss_mask_2: 0.171  m2_loss_dice_2: 1.233  m2_loss_ce_3: 0.6064  m2_loss_mask_3: 0.1669  m2_loss_dice_3: 1.179  m2_loss_ce_4: 0.5877  m2_loss_mask_4: 0.1698  m2_loss_dice_4: 1.161  m2_loss_ce_5: 0.5401  m2_loss_mask_5: 0.1682  m2_loss_dice_5: 1.185  m2_loss_ce_6: 0.5631  m2_loss_mask_6: 0.165  m2_loss_dice_6: 1.139  m2_loss_ce_7: 0.5447  m2_loss_mask_7: 0.1664  m2_loss_dice_7: 1.148  m2_loss_ce_8: 0.55  m2_loss_mask_8: 0.1662  m2_loss_dice_8: 1.164  com_loss_ce: 2.143  com_loss_mask: 0.6936  com_loss_dice: 0.9779    time: 1.4684  last_time: 1.4630  data_time: 0.0417  last_data_time: 0.0387   lr: 0.0001  max_mem: 34980M
[08/18 19:40:44] d2.utils.events INFO:  eta: 0:19:29  iter: 199  total_loss: 45.63  m1_loss_ce: 0.5478  m1_loss_mask: 0.16  m1_loss_dice: 1.169  m1_loss_ce_0: 0.6315  m1_loss_mask_0: 0.1953  m1_loss_dice_0: 1.417  m1_loss_ce_1: 0.7191  m1_loss_mask_1: 0.1797  m1_loss_dice_1: 1.293  m1_loss_ce_2: 0.6642  m1_loss_mask_2: 0.1704  m1_loss_dice_2: 1.256  m1_loss_ce_3: 0.6242  m1_loss_mask_3: 0.1677  m1_loss_dice_3: 1.191  m1_loss_ce_4: 0.5862  m1_loss_mask_4: 0.1681  m1_loss_dice_4: 1.242  m1_loss_ce_5: 0.5603  m1_loss_mask_5: 0.164  m1_loss_dice_5: 1.231  m1_loss_ce_6: 0.5337  m1_loss_mask_6: 0.1658  m1_loss_dice_6: 1.233  m1_loss_ce_7: 0.5362  m1_loss_mask_7: 0.1609  m1_loss_dice_7: 1.199  m1_loss_ce_8: 0.5345  m1_loss_mask_8: 0.1621  m1_loss_dice_8: 1.196  m2_loss_ce: 0.5163  m2_loss_mask: 0.1692  m2_loss_dice: 1.161  m2_loss_ce_0: 0.6547  m2_loss_mask_0: 0.1976  m2_loss_dice_0: 1.429  m2_loss_ce_1: 0.6896  m2_loss_mask_1: 0.1754  m2_loss_dice_1: 1.33  m2_loss_ce_2: 0.6492  m2_loss_mask_2: 0.167  m2_loss_dice_2: 1.25  m2_loss_ce_3: 0.5966  m2_loss_mask_3: 0.1661  m2_loss_dice_3: 1.228  m2_loss_ce_4: 0.5796  m2_loss_mask_4: 0.1687  m2_loss_dice_4: 1.195  m2_loss_ce_5: 0.5565  m2_loss_mask_5: 0.1711  m2_loss_dice_5: 1.217  m2_loss_ce_6: 0.5468  m2_loss_mask_6: 0.1672  m2_loss_dice_6: 1.203  m2_loss_ce_7: 0.526  m2_loss_mask_7: 0.1652  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.5476  m2_loss_mask_8: 0.1657  m2_loss_dice_8: 1.176  com_loss_ce: 2.143  com_loss_mask: 0.6936  com_loss_dice: 0.9801    time: 1.4673  last_time: 1.4276  data_time: 0.0437  last_data_time: 0.0403   lr: 0.0001  max_mem: 34980M
[08/18 19:41:14] d2.utils.events INFO:  eta: 0:19:00  iter: 219  total_loss: 45.37  m1_loss_ce: 0.5634  m1_loss_mask: 0.172  m1_loss_dice: 1.228  m1_loss_ce_0: 0.6465  m1_loss_mask_0: 0.2015  m1_loss_dice_0: 1.455  m1_loss_ce_1: 0.7557  m1_loss_mask_1: 0.1835  m1_loss_dice_1: 1.376  m1_loss_ce_2: 0.6938  m1_loss_mask_2: 0.1738  m1_loss_dice_2: 1.323  m1_loss_ce_3: 0.6062  m1_loss_mask_3: 0.1741  m1_loss_dice_3: 1.265  m1_loss_ce_4: 0.6254  m1_loss_mask_4: 0.173  m1_loss_dice_4: 1.281  m1_loss_ce_5: 0.5564  m1_loss_mask_5: 0.1718  m1_loss_dice_5: 1.274  m1_loss_ce_6: 0.5889  m1_loss_mask_6: 0.173  m1_loss_dice_6: 1.215  m1_loss_ce_7: 0.5927  m1_loss_mask_7: 0.1724  m1_loss_dice_7: 1.211  m1_loss_ce_8: 0.5541  m1_loss_mask_8: 0.1739  m1_loss_dice_8: 1.221  m2_loss_ce: 0.563  m2_loss_mask: 0.1724  m2_loss_dice: 1.277  m2_loss_ce_0: 0.6615  m2_loss_mask_0: 0.1966  m2_loss_dice_0: 1.462  m2_loss_ce_1: 0.7313  m2_loss_mask_1: 0.1793  m2_loss_dice_1: 1.434  m2_loss_ce_2: 0.6851  m2_loss_mask_2: 0.177  m2_loss_dice_2: 1.307  m2_loss_ce_3: 0.6089  m2_loss_mask_3: 0.1739  m2_loss_dice_3: 1.25  m2_loss_ce_4: 0.5742  m2_loss_mask_4: 0.1735  m2_loss_dice_4: 1.259  m2_loss_ce_5: 0.5846  m2_loss_mask_5: 0.1724  m2_loss_dice_5: 1.27  m2_loss_ce_6: 0.5846  m2_loss_mask_6: 0.1714  m2_loss_dice_6: 1.242  m2_loss_ce_7: 0.5947  m2_loss_mask_7: 0.1705  m2_loss_dice_7: 1.254  m2_loss_ce_8: 0.5635  m2_loss_mask_8: 0.171  m2_loss_dice_8: 1.225  com_loss_ce: 2.148  com_loss_mask: 0.6936  com_loss_dice: 0.9807    time: 1.4674  last_time: 1.5158  data_time: 0.0441  last_data_time: 0.0355   lr: 0.0001  max_mem: 34980M
[08/18 19:41:43] d2.utils.events INFO:  eta: 0:18:31  iter: 239  total_loss: 45.31  m1_loss_ce: 0.5989  m1_loss_mask: 0.1727  m1_loss_dice: 1.195  m1_loss_ce_0: 0.7145  m1_loss_mask_0: 0.1944  m1_loss_dice_0: 1.414  m1_loss_ce_1: 0.7562  m1_loss_mask_1: 0.1793  m1_loss_dice_1: 1.379  m1_loss_ce_2: 0.6908  m1_loss_mask_2: 0.1747  m1_loss_dice_2: 1.296  m1_loss_ce_3: 0.6477  m1_loss_mask_3: 0.1696  m1_loss_dice_3: 1.23  m1_loss_ce_4: 0.6513  m1_loss_mask_4: 0.173  m1_loss_dice_4: 1.274  m1_loss_ce_5: 0.6071  m1_loss_mask_5: 0.1706  m1_loss_dice_5: 1.215  m1_loss_ce_6: 0.6115  m1_loss_mask_6: 0.1713  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.5847  m1_loss_mask_7: 0.1707  m1_loss_dice_7: 1.246  m1_loss_ce_8: 0.5977  m1_loss_mask_8: 0.1749  m1_loss_dice_8: 1.208  m2_loss_ce: 0.5913  m2_loss_mask: 0.1668  m2_loss_dice: 1.243  m2_loss_ce_0: 0.6694  m2_loss_mask_0: 0.1997  m2_loss_dice_0: 1.488  m2_loss_ce_1: 0.7229  m2_loss_mask_1: 0.1776  m2_loss_dice_1: 1.389  m2_loss_ce_2: 0.6894  m2_loss_mask_2: 0.1708  m2_loss_dice_2: 1.326  m2_loss_ce_3: 0.6453  m2_loss_mask_3: 0.1673  m2_loss_dice_3: 1.277  m2_loss_ce_4: 0.6289  m2_loss_mask_4: 0.167  m2_loss_dice_4: 1.241  m2_loss_ce_5: 0.5996  m2_loss_mask_5: 0.1678  m2_loss_dice_5: 1.258  m2_loss_ce_6: 0.5787  m2_loss_mask_6: 0.1656  m2_loss_dice_6: 1.245  m2_loss_ce_7: 0.5816  m2_loss_mask_7: 0.1665  m2_loss_dice_7: 1.236  m2_loss_ce_8: 0.5686  m2_loss_mask_8: 0.1674  m2_loss_dice_8: 1.209  com_loss_ce: 2.147  com_loss_mask: 0.6936  com_loss_dice: 0.9802    time: 1.4677  last_time: 1.4151  data_time: 0.0417  last_data_time: 0.0390   lr: 0.0001  max_mem: 34980M
[08/18 19:42:13] d2.utils.events INFO:  eta: 0:18:02  iter: 259  total_loss: 43.43  m1_loss_ce: 0.536  m1_loss_mask: 0.1657  m1_loss_dice: 1.211  m1_loss_ce_0: 0.6722  m1_loss_mask_0: 0.1999  m1_loss_dice_0: 1.44  m1_loss_ce_1: 0.7193  m1_loss_mask_1: 0.1822  m1_loss_dice_1: 1.344  m1_loss_ce_2: 0.6521  m1_loss_mask_2: 0.1741  m1_loss_dice_2: 1.321  m1_loss_ce_3: 0.5971  m1_loss_mask_3: 0.1699  m1_loss_dice_3: 1.218  m1_loss_ce_4: 0.5615  m1_loss_mask_4: 0.1684  m1_loss_dice_4: 1.221  m1_loss_ce_5: 0.5352  m1_loss_mask_5: 0.1648  m1_loss_dice_5: 1.238  m1_loss_ce_6: 0.5114  m1_loss_mask_6: 0.166  m1_loss_dice_6: 1.213  m1_loss_ce_7: 0.5261  m1_loss_mask_7: 0.1673  m1_loss_dice_7: 1.246  m1_loss_ce_8: 0.547  m1_loss_mask_8: 0.1657  m1_loss_dice_8: 1.21  m2_loss_ce: 0.5403  m2_loss_mask: 0.1664  m2_loss_dice: 1.229  m2_loss_ce_0: 0.5938  m2_loss_mask_0: 0.2049  m2_loss_dice_0: 1.48  m2_loss_ce_1: 0.6653  m2_loss_mask_1: 0.1878  m2_loss_dice_1: 1.363  m2_loss_ce_2: 0.64  m2_loss_mask_2: 0.1686  m2_loss_dice_2: 1.29  m2_loss_ce_3: 0.5702  m2_loss_mask_3: 0.1665  m2_loss_dice_3: 1.243  m2_loss_ce_4: 0.5685  m2_loss_mask_4: 0.1665  m2_loss_dice_4: 1.237  m2_loss_ce_5: 0.5474  m2_loss_mask_5: 0.1667  m2_loss_dice_5: 1.238  m2_loss_ce_6: 0.5317  m2_loss_mask_6: 0.1642  m2_loss_dice_6: 1.258  m2_loss_ce_7: 0.5132  m2_loss_mask_7: 0.1664  m2_loss_dice_7: 1.228  m2_loss_ce_8: 0.5144  m2_loss_mask_8: 0.1664  m2_loss_dice_8: 1.235  com_loss_ce: 2.144  com_loss_mask: 0.6936  com_loss_dice: 0.9797    time: 1.4691  last_time: 1.5722  data_time: 0.0424  last_data_time: 0.0401   lr: 0.0001  max_mem: 34980M
[08/18 19:42:43] d2.utils.events INFO:  eta: 0:17:34  iter: 279  total_loss: 45.05  m1_loss_ce: 0.502  m1_loss_mask: 0.1619  m1_loss_dice: 1.27  m1_loss_ce_0: 0.5968  m1_loss_mask_0: 0.1917  m1_loss_dice_0: 1.487  m1_loss_ce_1: 0.7039  m1_loss_mask_1: 0.1714  m1_loss_dice_1: 1.391  m1_loss_ce_2: 0.6241  m1_loss_mask_2: 0.1664  m1_loss_dice_2: 1.345  m1_loss_ce_3: 0.5637  m1_loss_mask_3: 0.1618  m1_loss_dice_3: 1.287  m1_loss_ce_4: 0.5373  m1_loss_mask_4: 0.1635  m1_loss_dice_4: 1.319  m1_loss_ce_5: 0.5172  m1_loss_mask_5: 0.1595  m1_loss_dice_5: 1.28  m1_loss_ce_6: 0.5068  m1_loss_mask_6: 0.1601  m1_loss_dice_6: 1.251  m1_loss_ce_7: 0.5223  m1_loss_mask_7: 0.1593  m1_loss_dice_7: 1.266  m1_loss_ce_8: 0.5104  m1_loss_mask_8: 0.162  m1_loss_dice_8: 1.272  m2_loss_ce: 0.5325  m2_loss_mask: 0.1583  m2_loss_dice: 1.256  m2_loss_ce_0: 0.6221  m2_loss_mask_0: 0.1845  m2_loss_dice_0: 1.465  m2_loss_ce_1: 0.6446  m2_loss_mask_1: 0.1679  m2_loss_dice_1: 1.364  m2_loss_ce_2: 0.6093  m2_loss_mask_2: 0.1646  m2_loss_dice_2: 1.31  m2_loss_ce_3: 0.5499  m2_loss_mask_3: 0.1588  m2_loss_dice_3: 1.292  m2_loss_ce_4: 0.5915  m2_loss_mask_4: 0.1635  m2_loss_dice_4: 1.261  m2_loss_ce_5: 0.545  m2_loss_mask_5: 0.1616  m2_loss_dice_5: 1.26  m2_loss_ce_6: 0.5224  m2_loss_mask_6: 0.1613  m2_loss_dice_6: 1.267  m2_loss_ce_7: 0.5377  m2_loss_mask_7: 0.158  m2_loss_dice_7: 1.231  m2_loss_ce_8: 0.532  m2_loss_mask_8: 0.1593  m2_loss_dice_8: 1.232  com_loss_ce: 2.145  com_loss_mask: 0.6936  com_loss_dice: 0.9792    time: 1.4707  last_time: 1.4710  data_time: 0.0432  last_data_time: 0.0488   lr: 0.0001  max_mem: 34980M
[08/18 19:43:13] d2.utils.events INFO:  eta: 0:17:04  iter: 299  total_loss: 45.18  m1_loss_ce: 0.581  m1_loss_mask: 0.1699  m1_loss_dice: 1.245  m1_loss_ce_0: 0.6454  m1_loss_mask_0: 0.1977  m1_loss_dice_0: 1.475  m1_loss_ce_1: 0.7143  m1_loss_mask_1: 0.1825  m1_loss_dice_1: 1.379  m1_loss_ce_2: 0.6806  m1_loss_mask_2: 0.1745  m1_loss_dice_2: 1.326  m1_loss_ce_3: 0.6129  m1_loss_mask_3: 0.1729  m1_loss_dice_3: 1.264  m1_loss_ce_4: 0.621  m1_loss_mask_4: 0.1727  m1_loss_dice_4: 1.265  m1_loss_ce_5: 0.5709  m1_loss_mask_5: 0.173  m1_loss_dice_5: 1.257  m1_loss_ce_6: 0.5542  m1_loss_mask_6: 0.1718  m1_loss_dice_6: 1.284  m1_loss_ce_7: 0.5685  m1_loss_mask_7: 0.1702  m1_loss_dice_7: 1.237  m1_loss_ce_8: 0.5516  m1_loss_mask_8: 0.1672  m1_loss_dice_8: 1.253  m2_loss_ce: 0.5667  m2_loss_mask: 0.1621  m2_loss_dice: 1.214  m2_loss_ce_0: 0.6565  m2_loss_mask_0: 0.1887  m2_loss_dice_0: 1.476  m2_loss_ce_1: 0.7024  m2_loss_mask_1: 0.1781  m2_loss_dice_1: 1.375  m2_loss_ce_2: 0.6507  m2_loss_mask_2: 0.1688  m2_loss_dice_2: 1.313  m2_loss_ce_3: 0.6141  m2_loss_mask_3: 0.1621  m2_loss_dice_3: 1.245  m2_loss_ce_4: 0.5832  m2_loss_mask_4: 0.1641  m2_loss_dice_4: 1.231  m2_loss_ce_5: 0.5769  m2_loss_mask_5: 0.1653  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.564  m2_loss_mask_6: 0.164  m2_loss_dice_6: 1.23  m2_loss_ce_7: 0.5509  m2_loss_mask_7: 0.1621  m2_loss_dice_7: 1.22  m2_loss_ce_8: 0.5601  m2_loss_mask_8: 0.1627  m2_loss_dice_8: 1.204  com_loss_ce: 2.145  com_loss_mask: 0.6936  com_loss_dice: 0.9802    time: 1.4704  last_time: 1.4504  data_time: 0.0399  last_data_time: 0.0376   lr: 0.0001  max_mem: 34980M
[08/18 19:43:42] d2.utils.events INFO:  eta: 0:16:35  iter: 319  total_loss: 45.67  m1_loss_ce: 0.5328  m1_loss_mask: 0.1637  m1_loss_dice: 1.269  m1_loss_ce_0: 0.6498  m1_loss_mask_0: 0.1905  m1_loss_dice_0: 1.463  m1_loss_ce_1: 0.7174  m1_loss_mask_1: 0.1742  m1_loss_dice_1: 1.402  m1_loss_ce_2: 0.6785  m1_loss_mask_2: 0.1703  m1_loss_dice_2: 1.336  m1_loss_ce_3: 0.5925  m1_loss_mask_3: 0.1672  m1_loss_dice_3: 1.249  m1_loss_ce_4: 0.5901  m1_loss_mask_4: 0.1657  m1_loss_dice_4: 1.296  m1_loss_ce_5: 0.5802  m1_loss_mask_5: 0.1641  m1_loss_dice_5: 1.232  m1_loss_ce_6: 0.537  m1_loss_mask_6: 0.1633  m1_loss_dice_6: 1.231  m1_loss_ce_7: 0.5506  m1_loss_mask_7: 0.1633  m1_loss_dice_7: 1.257  m1_loss_ce_8: 0.5297  m1_loss_mask_8: 0.1599  m1_loss_dice_8: 1.256  m2_loss_ce: 0.5334  m2_loss_mask: 0.1605  m2_loss_dice: 1.267  m2_loss_ce_0: 0.6349  m2_loss_mask_0: 0.1909  m2_loss_dice_0: 1.516  m2_loss_ce_1: 0.6949  m2_loss_mask_1: 0.1709  m2_loss_dice_1: 1.442  m2_loss_ce_2: 0.6208  m2_loss_mask_2: 0.168  m2_loss_dice_2: 1.359  m2_loss_ce_3: 0.5882  m2_loss_mask_3: 0.1641  m2_loss_dice_3: 1.293  m2_loss_ce_4: 0.5522  m2_loss_mask_4: 0.1644  m2_loss_dice_4: 1.284  m2_loss_ce_5: 0.5776  m2_loss_mask_5: 0.1628  m2_loss_dice_5: 1.297  m2_loss_ce_6: 0.5226  m2_loss_mask_6: 0.1609  m2_loss_dice_6: 1.245  m2_loss_ce_7: 0.5336  m2_loss_mask_7: 0.1605  m2_loss_dice_7: 1.267  m2_loss_ce_8: 0.5224  m2_loss_mask_8: 0.1602  m2_loss_dice_8: 1.267  com_loss_ce: 2.144  com_loss_mask: 0.6936  com_loss_dice: 0.9799    time: 1.4711  last_time: 1.4783  data_time: 0.0447  last_data_time: 0.0509   lr: 0.0001  max_mem: 34980M
[08/18 19:44:12] d2.utils.events INFO:  eta: 0:16:07  iter: 339  total_loss: 43.72  m1_loss_ce: 0.5128  m1_loss_mask: 0.1705  m1_loss_dice: 1.223  m1_loss_ce_0: 0.6396  m1_loss_mask_0: 0.1968  m1_loss_dice_0: 1.428  m1_loss_ce_1: 0.6688  m1_loss_mask_1: 0.1839  m1_loss_dice_1: 1.324  m1_loss_ce_2: 0.6275  m1_loss_mask_2: 0.1739  m1_loss_dice_2: 1.28  m1_loss_ce_3: 0.5775  m1_loss_mask_3: 0.1703  m1_loss_dice_3: 1.231  m1_loss_ce_4: 0.5431  m1_loss_mask_4: 0.1666  m1_loss_dice_4: 1.217  m1_loss_ce_5: 0.5167  m1_loss_mask_5: 0.1722  m1_loss_dice_5: 1.242  m1_loss_ce_6: 0.4983  m1_loss_mask_6: 0.1695  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.4923  m1_loss_mask_7: 0.1725  m1_loss_dice_7: 1.204  m1_loss_ce_8: 0.5223  m1_loss_mask_8: 0.1686  m1_loss_dice_8: 1.165  m2_loss_ce: 0.4697  m2_loss_mask: 0.1619  m2_loss_dice: 1.236  m2_loss_ce_0: 0.5695  m2_loss_mask_0: 0.1907  m2_loss_dice_0: 1.432  m2_loss_ce_1: 0.6609  m2_loss_mask_1: 0.1727  m2_loss_dice_1: 1.346  m2_loss_ce_2: 0.5896  m2_loss_mask_2: 0.1623  m2_loss_dice_2: 1.292  m2_loss_ce_3: 0.5767  m2_loss_mask_3: 0.1663  m2_loss_dice_3: 1.274  m2_loss_ce_4: 0.53  m2_loss_mask_4: 0.1675  m2_loss_dice_4: 1.234  m2_loss_ce_5: 0.5092  m2_loss_mask_5: 0.1625  m2_loss_dice_5: 1.255  m2_loss_ce_6: 0.4793  m2_loss_mask_6: 0.1626  m2_loss_dice_6: 1.233  m2_loss_ce_7: 0.4801  m2_loss_mask_7: 0.1611  m2_loss_dice_7: 1.232  m2_loss_ce_8: 0.4798  m2_loss_mask_8: 0.162  m2_loss_dice_8: 1.202  com_loss_ce: 2.144  com_loss_mask: 0.6936  com_loss_dice: 0.9792    time: 1.4718  last_time: 1.4742  data_time: 0.0439  last_data_time: 0.0449   lr: 0.0001  max_mem: 34980M
[08/18 19:44:42] d2.utils.events INFO:  eta: 0:15:38  iter: 359  total_loss: 45.04  m1_loss_ce: 0.5587  m1_loss_mask: 0.1685  m1_loss_dice: 1.25  m1_loss_ce_0: 0.6386  m1_loss_mask_0: 0.2019  m1_loss_dice_0: 1.447  m1_loss_ce_1: 0.7112  m1_loss_mask_1: 0.1867  m1_loss_dice_1: 1.368  m1_loss_ce_2: 0.6839  m1_loss_mask_2: 0.176  m1_loss_dice_2: 1.273  m1_loss_ce_3: 0.6033  m1_loss_mask_3: 0.1732  m1_loss_dice_3: 1.225  m1_loss_ce_4: 0.6023  m1_loss_mask_4: 0.1735  m1_loss_dice_4: 1.212  m1_loss_ce_5: 0.5659  m1_loss_mask_5: 0.1721  m1_loss_dice_5: 1.211  m1_loss_ce_6: 0.555  m1_loss_mask_6: 0.1716  m1_loss_dice_6: 1.211  m1_loss_ce_7: 0.55  m1_loss_mask_7: 0.1682  m1_loss_dice_7: 1.217  m1_loss_ce_8: 0.5417  m1_loss_mask_8: 0.1686  m1_loss_dice_8: 1.2  m2_loss_ce: 0.524  m2_loss_mask: 0.1681  m2_loss_dice: 1.207  m2_loss_ce_0: 0.6362  m2_loss_mask_0: 0.2066  m2_loss_dice_0: 1.458  m2_loss_ce_1: 0.6838  m2_loss_mask_1: 0.1882  m2_loss_dice_1: 1.404  m2_loss_ce_2: 0.6555  m2_loss_mask_2: 0.1731  m2_loss_dice_2: 1.256  m2_loss_ce_3: 0.5951  m2_loss_mask_3: 0.1752  m2_loss_dice_3: 1.252  m2_loss_ce_4: 0.5888  m2_loss_mask_4: 0.1742  m2_loss_dice_4: 1.23  m2_loss_ce_5: 0.5525  m2_loss_mask_5: 0.1689  m2_loss_dice_5: 1.233  m2_loss_ce_6: 0.5205  m2_loss_mask_6: 0.1717  m2_loss_dice_6: 1.179  m2_loss_ce_7: 0.5063  m2_loss_mask_7: 0.1723  m2_loss_dice_7: 1.23  m2_loss_ce_8: 0.5137  m2_loss_mask_8: 0.1684  m2_loss_dice_8: 1.212  com_loss_ce: 2.146  com_loss_mask: 0.6936  com_loss_dice: 0.9794    time: 1.4715  last_time: 1.5109  data_time: 0.0420  last_data_time: 0.0367   lr: 0.0001  max_mem: 34980M
[08/18 19:45:11] d2.utils.events INFO:  eta: 0:15:09  iter: 379  total_loss: 43.18  m1_loss_ce: 0.506  m1_loss_mask: 0.1644  m1_loss_dice: 1.128  m1_loss_ce_0: 0.6102  m1_loss_mask_0: 0.1912  m1_loss_dice_0: 1.351  m1_loss_ce_1: 0.7005  m1_loss_mask_1: 0.1745  m1_loss_dice_1: 1.252  m1_loss_ce_2: 0.6297  m1_loss_mask_2: 0.1709  m1_loss_dice_2: 1.213  m1_loss_ce_3: 0.5682  m1_loss_mask_3: 0.1657  m1_loss_dice_3: 1.174  m1_loss_ce_4: 0.5395  m1_loss_mask_4: 0.1682  m1_loss_dice_4: 1.182  m1_loss_ce_5: 0.5462  m1_loss_mask_5: 0.1651  m1_loss_dice_5: 1.186  m1_loss_ce_6: 0.5188  m1_loss_mask_6: 0.1652  m1_loss_dice_6: 1.152  m1_loss_ce_7: 0.5242  m1_loss_mask_7: 0.1637  m1_loss_dice_7: 1.161  m1_loss_ce_8: 0.5105  m1_loss_mask_8: 0.165  m1_loss_dice_8: 1.151  m2_loss_ce: 0.5139  m2_loss_mask: 0.1645  m2_loss_dice: 1.157  m2_loss_ce_0: 0.6356  m2_loss_mask_0: 0.197  m2_loss_dice_0: 1.356  m2_loss_ce_1: 0.6657  m2_loss_mask_1: 0.1744  m2_loss_dice_1: 1.291  m2_loss_ce_2: 0.6102  m2_loss_mask_2: 0.1697  m2_loss_dice_2: 1.234  m2_loss_ce_3: 0.5279  m2_loss_mask_3: 0.1662  m2_loss_dice_3: 1.168  m2_loss_ce_4: 0.5088  m2_loss_mask_4: 0.1658  m2_loss_dice_4: 1.183  m2_loss_ce_5: 0.5061  m2_loss_mask_5: 0.168  m2_loss_dice_5: 1.2  m2_loss_ce_6: 0.4988  m2_loss_mask_6: 0.1647  m2_loss_dice_6: 1.147  m2_loss_ce_7: 0.5055  m2_loss_mask_7: 0.1644  m2_loss_dice_7: 1.17  m2_loss_ce_8: 0.4792  m2_loss_mask_8: 0.165  m2_loss_dice_8: 1.156  com_loss_ce: 2.145  com_loss_mask: 0.6936  com_loss_dice: 0.9773    time: 1.4719  last_time: 1.4669  data_time: 0.0431  last_data_time: 0.0436   lr: 0.0001  max_mem: 34980M
[08/18 19:45:42] d2.utils.events INFO:  eta: 0:14:41  iter: 399  total_loss: 43.46  m1_loss_ce: 0.5159  m1_loss_mask: 0.1567  m1_loss_dice: 1.199  m1_loss_ce_0: 0.619  m1_loss_mask_0: 0.1795  m1_loss_dice_0: 1.374  m1_loss_ce_1: 0.673  m1_loss_mask_1: 0.1755  m1_loss_dice_1: 1.358  m1_loss_ce_2: 0.5823  m1_loss_mask_2: 0.1617  m1_loss_dice_2: 1.251  m1_loss_ce_3: 0.5364  m1_loss_mask_3: 0.1611  m1_loss_dice_3: 1.237  m1_loss_ce_4: 0.4823  m1_loss_mask_4: 0.1579  m1_loss_dice_4: 1.229  m1_loss_ce_5: 0.5069  m1_loss_mask_5: 0.1566  m1_loss_dice_5: 1.207  m1_loss_ce_6: 0.4776  m1_loss_mask_6: 0.1547  m1_loss_dice_6: 1.171  m1_loss_ce_7: 0.4971  m1_loss_mask_7: 0.1552  m1_loss_dice_7: 1.213  m1_loss_ce_8: 0.4855  m1_loss_mask_8: 0.156  m1_loss_dice_8: 1.181  m2_loss_ce: 0.5156  m2_loss_mask: 0.1594  m2_loss_dice: 1.196  m2_loss_ce_0: 0.6142  m2_loss_mask_0: 0.1869  m2_loss_dice_0: 1.404  m2_loss_ce_1: 0.6719  m2_loss_mask_1: 0.1707  m2_loss_dice_1: 1.308  m2_loss_ce_2: 0.6134  m2_loss_mask_2: 0.1613  m2_loss_dice_2: 1.263  m2_loss_ce_3: 0.5794  m2_loss_mask_3: 0.1588  m2_loss_dice_3: 1.248  m2_loss_ce_4: 0.5822  m2_loss_mask_4: 0.1619  m2_loss_dice_4: 1.224  m2_loss_ce_5: 0.5423  m2_loss_mask_5: 0.1599  m2_loss_dice_5: 1.247  m2_loss_ce_6: 0.5531  m2_loss_mask_6: 0.1589  m2_loss_dice_6: 1.205  m2_loss_ce_7: 0.5029  m2_loss_mask_7: 0.1586  m2_loss_dice_7: 1.18  m2_loss_ce_8: 0.5174  m2_loss_mask_8: 0.1608  m2_loss_dice_8: 1.194  com_loss_ce: 2.141  com_loss_mask: 0.6936  com_loss_dice: 0.9798    time: 1.4733  last_time: 1.5203  data_time: 0.0445  last_data_time: 0.0570   lr: 0.0001  max_mem: 34980M
[08/18 19:46:12] d2.utils.events INFO:  eta: 0:14:12  iter: 419  total_loss: 45.2  m1_loss_ce: 0.4999  m1_loss_mask: 0.1598  m1_loss_dice: 1.211  m1_loss_ce_0: 0.6192  m1_loss_mask_0: 0.18  m1_loss_dice_0: 1.453  m1_loss_ce_1: 0.689  m1_loss_mask_1: 0.1697  m1_loss_dice_1: 1.339  m1_loss_ce_2: 0.6277  m1_loss_mask_2: 0.1654  m1_loss_dice_2: 1.298  m1_loss_ce_3: 0.5662  m1_loss_mask_3: 0.1641  m1_loss_dice_3: 1.275  m1_loss_ce_4: 0.5463  m1_loss_mask_4: 0.1597  m1_loss_dice_4: 1.212  m1_loss_ce_5: 0.5493  m1_loss_mask_5: 0.1607  m1_loss_dice_5: 1.252  m1_loss_ce_6: 0.4929  m1_loss_mask_6: 0.161  m1_loss_dice_6: 1.213  m1_loss_ce_7: 0.5002  m1_loss_mask_7: 0.1588  m1_loss_dice_7: 1.234  m1_loss_ce_8: 0.4959  m1_loss_mask_8: 0.1605  m1_loss_dice_8: 1.251  m2_loss_ce: 0.511  m2_loss_mask: 0.1619  m2_loss_dice: 1.261  m2_loss_ce_0: 0.6177  m2_loss_mask_0: 0.1893  m2_loss_dice_0: 1.475  m2_loss_ce_1: 0.6672  m2_loss_mask_1: 0.1697  m2_loss_dice_1: 1.381  m2_loss_ce_2: 0.6411  m2_loss_mask_2: 0.1623  m2_loss_dice_2: 1.304  m2_loss_ce_3: 0.5768  m2_loss_mask_3: 0.1654  m2_loss_dice_3: 1.263  m2_loss_ce_4: 0.5387  m2_loss_mask_4: 0.1663  m2_loss_dice_4: 1.278  m2_loss_ce_5: 0.5661  m2_loss_mask_5: 0.1654  m2_loss_dice_5: 1.268  m2_loss_ce_6: 0.5092  m2_loss_mask_6: 0.1623  m2_loss_dice_6: 1.278  m2_loss_ce_7: 0.5285  m2_loss_mask_7: 0.1637  m2_loss_dice_7: 1.27  m2_loss_ce_8: 0.5258  m2_loss_mask_8: 0.1627  m2_loss_dice_8: 1.264  com_loss_ce: 2.142  com_loss_mask: 0.6936  com_loss_dice: 0.98    time: 1.4744  last_time: 1.4542  data_time: 0.0471  last_data_time: 0.0457   lr: 0.0001  max_mem: 34980M
[08/18 19:46:41] d2.utils.events INFO:  eta: 0:13:43  iter: 439  total_loss: 44.36  m1_loss_ce: 0.5007  m1_loss_mask: 0.1564  m1_loss_dice: 1.221  m1_loss_ce_0: 0.6101  m1_loss_mask_0: 0.1758  m1_loss_dice_0: 1.39  m1_loss_ce_1: 0.6417  m1_loss_mask_1: 0.1648  m1_loss_dice_1: 1.388  m1_loss_ce_2: 0.6264  m1_loss_mask_2: 0.1578  m1_loss_dice_2: 1.331  m1_loss_ce_3: 0.5649  m1_loss_mask_3: 0.1558  m1_loss_dice_3: 1.23  m1_loss_ce_4: 0.5356  m1_loss_mask_4: 0.1552  m1_loss_dice_4: 1.201  m1_loss_ce_5: 0.5343  m1_loss_mask_5: 0.1531  m1_loss_dice_5: 1.239  m1_loss_ce_6: 0.5172  m1_loss_mask_6: 0.1539  m1_loss_dice_6: 1.216  m1_loss_ce_7: 0.4846  m1_loss_mask_7: 0.1547  m1_loss_dice_7: 1.216  m1_loss_ce_8: 0.4994  m1_loss_mask_8: 0.1557  m1_loss_dice_8: 1.237  m2_loss_ce: 0.5317  m2_loss_mask: 0.1608  m2_loss_dice: 1.251  m2_loss_ce_0: 0.6159  m2_loss_mask_0: 0.1883  m2_loss_dice_0: 1.491  m2_loss_ce_1: 0.665  m2_loss_mask_1: 0.1734  m2_loss_dice_1: 1.402  m2_loss_ce_2: 0.6349  m2_loss_mask_2: 0.1646  m2_loss_dice_2: 1.35  m2_loss_ce_3: 0.5917  m2_loss_mask_3: 0.1641  m2_loss_dice_3: 1.282  m2_loss_ce_4: 0.5467  m2_loss_mask_4: 0.1665  m2_loss_dice_4: 1.247  m2_loss_ce_5: 0.5569  m2_loss_mask_5: 0.1632  m2_loss_dice_5: 1.272  m2_loss_ce_6: 0.5367  m2_loss_mask_6: 0.164  m2_loss_dice_6: 1.243  m2_loss_ce_7: 0.521  m2_loss_mask_7: 0.1622  m2_loss_dice_7: 1.237  m2_loss_ce_8: 0.519  m2_loss_mask_8: 0.1598  m2_loss_dice_8: 1.241  com_loss_ce: 2.145  com_loss_mask: 0.6936  com_loss_dice: 0.9806    time: 1.4745  last_time: 1.5183  data_time: 0.0439  last_data_time: 0.0416   lr: 0.0001  max_mem: 34980M
[08/18 19:47:11] d2.utils.events INFO:  eta: 0:13:14  iter: 459  total_loss: 41.97  m1_loss_ce: 0.4739  m1_loss_mask: 0.1705  m1_loss_dice: 1.083  m1_loss_ce_0: 0.6025  m1_loss_mask_0: 0.1959  m1_loss_dice_0: 1.306  m1_loss_ce_1: 0.6277  m1_loss_mask_1: 0.1813  m1_loss_dice_1: 1.291  m1_loss_ce_2: 0.5962  m1_loss_mask_2: 0.1724  m1_loss_dice_2: 1.189  m1_loss_ce_3: 0.5148  m1_loss_mask_3: 0.1726  m1_loss_dice_3: 1.13  m1_loss_ce_4: 0.4834  m1_loss_mask_4: 0.1698  m1_loss_dice_4: 1.162  m1_loss_ce_5: 0.486  m1_loss_mask_5: 0.1697  m1_loss_dice_5: 1.15  m1_loss_ce_6: 0.4872  m1_loss_mask_6: 0.1703  m1_loss_dice_6: 1.115  m1_loss_ce_7: 0.4687  m1_loss_mask_7: 0.1699  m1_loss_dice_7: 1.123  m1_loss_ce_8: 0.457  m1_loss_mask_8: 0.1709  m1_loss_dice_8: 1.096  m2_loss_ce: 0.4911  m2_loss_mask: 0.1707  m2_loss_dice: 1.102  m2_loss_ce_0: 0.6001  m2_loss_mask_0: 0.196  m2_loss_dice_0: 1.332  m2_loss_ce_1: 0.6423  m2_loss_mask_1: 0.1828  m2_loss_dice_1: 1.294  m2_loss_ce_2: 0.5862  m2_loss_mask_2: 0.1764  m2_loss_dice_2: 1.198  m2_loss_ce_3: 0.5453  m2_loss_mask_3: 0.1748  m2_loss_dice_3: 1.194  m2_loss_ce_4: 0.551  m2_loss_mask_4: 0.1744  m2_loss_dice_4: 1.15  m2_loss_ce_5: 0.5382  m2_loss_mask_5: 0.1736  m2_loss_dice_5: 1.123  m2_loss_ce_6: 0.5114  m2_loss_mask_6: 0.1719  m2_loss_dice_6: 1.095  m2_loss_ce_7: 0.4839  m2_loss_mask_7: 0.1719  m2_loss_dice_7: 1.128  m2_loss_ce_8: 0.4773  m2_loss_mask_8: 0.1709  m2_loss_dice_8: 1.124  com_loss_ce: 2.14  com_loss_mask: 0.6936  com_loss_dice: 0.9775    time: 1.4750  last_time: 1.5557  data_time: 0.0430  last_data_time: 0.0487   lr: 0.0001  max_mem: 34980M
[08/18 19:47:41] d2.utils.events INFO:  eta: 0:12:44  iter: 479  total_loss: 45.59  m1_loss_ce: 0.5439  m1_loss_mask: 0.157  m1_loss_dice: 1.183  m1_loss_ce_0: 0.6719  m1_loss_mask_0: 0.1843  m1_loss_dice_0: 1.41  m1_loss_ce_1: 0.7185  m1_loss_mask_1: 0.1699  m1_loss_dice_1: 1.337  m1_loss_ce_2: 0.6772  m1_loss_mask_2: 0.1614  m1_loss_dice_2: 1.287  m1_loss_ce_3: 0.5628  m1_loss_mask_3: 0.1609  m1_loss_dice_3: 1.261  m1_loss_ce_4: 0.5417  m1_loss_mask_4: 0.1612  m1_loss_dice_4: 1.246  m1_loss_ce_5: 0.5552  m1_loss_mask_5: 0.158  m1_loss_dice_5: 1.256  m1_loss_ce_6: 0.5649  m1_loss_mask_6: 0.1589  m1_loss_dice_6: 1.206  m1_loss_ce_7: 0.5496  m1_loss_mask_7: 0.1569  m1_loss_dice_7: 1.197  m1_loss_ce_8: 0.5616  m1_loss_mask_8: 0.1575  m1_loss_dice_8: 1.23  m2_loss_ce: 0.5428  m2_loss_mask: 0.1579  m2_loss_dice: 1.277  m2_loss_ce_0: 0.6427  m2_loss_mask_0: 0.1882  m2_loss_dice_0: 1.49  m2_loss_ce_1: 0.725  m2_loss_mask_1: 0.1715  m2_loss_dice_1: 1.412  m2_loss_ce_2: 0.654  m2_loss_mask_2: 0.1625  m2_loss_dice_2: 1.341  m2_loss_ce_3: 0.6112  m2_loss_mask_3: 0.1632  m2_loss_dice_3: 1.305  m2_loss_ce_4: 0.5743  m2_loss_mask_4: 0.1656  m2_loss_dice_4: 1.311  m2_loss_ce_5: 0.5543  m2_loss_mask_5: 0.1602  m2_loss_dice_5: 1.272  m2_loss_ce_6: 0.5546  m2_loss_mask_6: 0.1592  m2_loss_dice_6: 1.239  m2_loss_ce_7: 0.5677  m2_loss_mask_7: 0.159  m2_loss_dice_7: 1.256  m2_loss_ce_8: 0.5194  m2_loss_mask_8: 0.1592  m2_loss_dice_8: 1.225  com_loss_ce: 2.144  com_loss_mask: 0.6936  com_loss_dice: 0.9811    time: 1.4746  last_time: 1.5082  data_time: 0.0453  last_data_time: 0.0349   lr: 0.0001  max_mem: 34980M
[08/18 19:48:10] d2.utils.events INFO:  eta: 0:12:15  iter: 499  total_loss: 43.1  m1_loss_ce: 0.5406  m1_loss_mask: 0.173  m1_loss_dice: 1.183  m1_loss_ce_0: 0.6244  m1_loss_mask_0: 0.209  m1_loss_dice_0: 1.428  m1_loss_ce_1: 0.6832  m1_loss_mask_1: 0.1904  m1_loss_dice_1: 1.313  m1_loss_ce_2: 0.6084  m1_loss_mask_2: 0.178  m1_loss_dice_2: 1.264  m1_loss_ce_3: 0.5596  m1_loss_mask_3: 0.1777  m1_loss_dice_3: 1.21  m1_loss_ce_4: 0.5756  m1_loss_mask_4: 0.1743  m1_loss_dice_4: 1.196  m1_loss_ce_5: 0.5793  m1_loss_mask_5: 0.1754  m1_loss_dice_5: 1.231  m1_loss_ce_6: 0.5371  m1_loss_mask_6: 0.1734  m1_loss_dice_6: 1.163  m1_loss_ce_7: 0.5578  m1_loss_mask_7: 0.1722  m1_loss_dice_7: 1.225  m1_loss_ce_8: 0.5431  m1_loss_mask_8: 0.1737  m1_loss_dice_8: 1.166  m2_loss_ce: 0.5173  m2_loss_mask: 0.1753  m2_loss_dice: 1.229  m2_loss_ce_0: 0.6264  m2_loss_mask_0: 0.2058  m2_loss_dice_0: 1.476  m2_loss_ce_1: 0.6678  m2_loss_mask_1: 0.1978  m2_loss_dice_1: 1.365  m2_loss_ce_2: 0.6315  m2_loss_mask_2: 0.1794  m2_loss_dice_2: 1.302  m2_loss_ce_3: 0.5461  m2_loss_mask_3: 0.1758  m2_loss_dice_3: 1.242  m2_loss_ce_4: 0.5295  m2_loss_mask_4: 0.1759  m2_loss_dice_4: 1.244  m2_loss_ce_5: 0.5256  m2_loss_mask_5: 0.1758  m2_loss_dice_5: 1.221  m2_loss_ce_6: 0.519  m2_loss_mask_6: 0.1736  m2_loss_dice_6: 1.225  m2_loss_ce_7: 0.5142  m2_loss_mask_7: 0.1738  m2_loss_dice_7: 1.225  m2_loss_ce_8: 0.5106  m2_loss_mask_8: 0.1733  m2_loss_dice_8: 1.206  com_loss_ce: 2.146  com_loss_mask: 0.6936  com_loss_dice: 0.9792    time: 1.4750  last_time: 1.5060  data_time: 0.0434  last_data_time: 0.0346   lr: 0.0001  max_mem: 34980M
[08/18 19:48:41] d2.utils.events INFO:  eta: 0:11:46  iter: 519  total_loss: 44.45  m1_loss_ce: 0.5154  m1_loss_mask: 0.1584  m1_loss_dice: 1.265  m1_loss_ce_0: 0.6111  m1_loss_mask_0: 0.186  m1_loss_dice_0: 1.446  m1_loss_ce_1: 0.6853  m1_loss_mask_1: 0.1682  m1_loss_dice_1: 1.357  m1_loss_ce_2: 0.611  m1_loss_mask_2: 0.1629  m1_loss_dice_2: 1.304  m1_loss_ce_3: 0.5623  m1_loss_mask_3: 0.1594  m1_loss_dice_3: 1.268  m1_loss_ce_4: 0.5492  m1_loss_mask_4: 0.1595  m1_loss_dice_4: 1.226  m1_loss_ce_5: 0.52  m1_loss_mask_5: 0.1615  m1_loss_dice_5: 1.264  m1_loss_ce_6: 0.5011  m1_loss_mask_6: 0.1577  m1_loss_dice_6: 1.247  m1_loss_ce_7: 0.5051  m1_loss_mask_7: 0.1598  m1_loss_dice_7: 1.24  m1_loss_ce_8: 0.4811  m1_loss_mask_8: 0.1578  m1_loss_dice_8: 1.245  m2_loss_ce: 0.5377  m2_loss_mask: 0.1588  m2_loss_dice: 1.267  m2_loss_ce_0: 0.6125  m2_loss_mask_0: 0.1886  m2_loss_dice_0: 1.444  m2_loss_ce_1: 0.6677  m2_loss_mask_1: 0.1723  m2_loss_dice_1: 1.381  m2_loss_ce_2: 0.6272  m2_loss_mask_2: 0.1618  m2_loss_dice_2: 1.327  m2_loss_ce_3: 0.5864  m2_loss_mask_3: 0.1585  m2_loss_dice_3: 1.259  m2_loss_ce_4: 0.5655  m2_loss_mask_4: 0.162  m2_loss_dice_4: 1.27  m2_loss_ce_5: 0.5552  m2_loss_mask_5: 0.1597  m2_loss_dice_5: 1.26  m2_loss_ce_6: 0.5578  m2_loss_mask_6: 0.1597  m2_loss_dice_6: 1.263  m2_loss_ce_7: 0.558  m2_loss_mask_7: 0.1593  m2_loss_dice_7: 1.255  m2_loss_ce_8: 0.5231  m2_loss_mask_8: 0.159  m2_loss_dice_8: 1.262  com_loss_ce: 2.149  com_loss_mask: 0.6936  com_loss_dice: 0.981    time: 1.4761  last_time: 1.5347  data_time: 0.0467  last_data_time: 0.0503   lr: 0.0001  max_mem: 34980M
[08/18 19:49:11] d2.utils.events INFO:  eta: 0:11:17  iter: 539  total_loss: 42.98  m1_loss_ce: 0.5063  m1_loss_mask: 0.1722  m1_loss_dice: 1.16  m1_loss_ce_0: 0.6247  m1_loss_mask_0: 0.2027  m1_loss_dice_0: 1.353  m1_loss_ce_1: 0.6683  m1_loss_mask_1: 0.1835  m1_loss_dice_1: 1.312  m1_loss_ce_2: 0.5998  m1_loss_mask_2: 0.1782  m1_loss_dice_2: 1.212  m1_loss_ce_3: 0.5521  m1_loss_mask_3: 0.1773  m1_loss_dice_3: 1.134  m1_loss_ce_4: 0.5298  m1_loss_mask_4: 0.174  m1_loss_dice_4: 1.183  m1_loss_ce_5: 0.4852  m1_loss_mask_5: 0.1715  m1_loss_dice_5: 1.175  m1_loss_ce_6: 0.4659  m1_loss_mask_6: 0.1733  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.5351  m1_loss_mask_7: 0.1714  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.5058  m1_loss_mask_8: 0.1738  m1_loss_dice_8: 1.178  m2_loss_ce: 0.5257  m2_loss_mask: 0.1747  m2_loss_dice: 1.158  m2_loss_ce_0: 0.6478  m2_loss_mask_0: 0.2061  m2_loss_dice_0: 1.368  m2_loss_ce_1: 0.6802  m2_loss_mask_1: 0.184  m2_loss_dice_1: 1.335  m2_loss_ce_2: 0.6259  m2_loss_mask_2: 0.1791  m2_loss_dice_2: 1.255  m2_loss_ce_3: 0.6025  m2_loss_mask_3: 0.1783  m2_loss_dice_3: 1.202  m2_loss_ce_4: 0.5622  m2_loss_mask_4: 0.1802  m2_loss_dice_4: 1.23  m2_loss_ce_5: 0.5232  m2_loss_mask_5: 0.1792  m2_loss_dice_5: 1.211  m2_loss_ce_6: 0.5316  m2_loss_mask_6: 0.177  m2_loss_dice_6: 1.176  m2_loss_ce_7: 0.5212  m2_loss_mask_7: 0.1785  m2_loss_dice_7: 1.188  m2_loss_ce_8: 0.5492  m2_loss_mask_8: 0.1763  m2_loss_dice_8: 1.173  com_loss_ce: 2.144  com_loss_mask: 0.6936  com_loss_dice: 0.9796    time: 1.4765  last_time: 1.3595  data_time: 0.0426  last_data_time: 0.0382   lr: 0.0001  max_mem: 34980M
[08/18 19:49:41] d2.utils.events INFO:  eta: 0:10:48  iter: 559  total_loss: 41.64  m1_loss_ce: 0.4941  m1_loss_mask: 0.168  m1_loss_dice: 1.156  m1_loss_ce_0: 0.6088  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.356  m1_loss_ce_1: 0.6469  m1_loss_mask_1: 0.1787  m1_loss_dice_1: 1.301  m1_loss_ce_2: 0.5861  m1_loss_mask_2: 0.1718  m1_loss_dice_2: 1.223  m1_loss_ce_3: 0.5112  m1_loss_mask_3: 0.1707  m1_loss_dice_3: 1.187  m1_loss_ce_4: 0.5303  m1_loss_mask_4: 0.1723  m1_loss_dice_4: 1.213  m1_loss_ce_5: 0.5045  m1_loss_mask_5: 0.1668  m1_loss_dice_5: 1.185  m1_loss_ce_6: 0.4952  m1_loss_mask_6: 0.1682  m1_loss_dice_6: 1.156  m1_loss_ce_7: 0.4905  m1_loss_mask_7: 0.1673  m1_loss_dice_7: 1.177  m1_loss_ce_8: 0.4617  m1_loss_mask_8: 0.169  m1_loss_dice_8: 1.174  m2_loss_ce: 0.4727  m2_loss_mask: 0.171  m2_loss_dice: 1.199  m2_loss_ce_0: 0.6036  m2_loss_mask_0: 0.1977  m2_loss_dice_0: 1.39  m2_loss_ce_1: 0.627  m2_loss_mask_1: 0.1809  m2_loss_dice_1: 1.323  m2_loss_ce_2: 0.5952  m2_loss_mask_2: 0.1716  m2_loss_dice_2: 1.249  m2_loss_ce_3: 0.5633  m2_loss_mask_3: 0.1724  m2_loss_dice_3: 1.233  m2_loss_ce_4: 0.5356  m2_loss_mask_4: 0.1738  m2_loss_dice_4: 1.222  m2_loss_ce_5: 0.5124  m2_loss_mask_5: 0.1741  m2_loss_dice_5: 1.235  m2_loss_ce_6: 0.5173  m2_loss_mask_6: 0.1707  m2_loss_dice_6: 1.168  m2_loss_ce_7: 0.4727  m2_loss_mask_7: 0.1709  m2_loss_dice_7: 1.195  m2_loss_ce_8: 0.4868  m2_loss_mask_8: 0.171  m2_loss_dice_8: 1.171  com_loss_ce: 2.14  com_loss_mask: 0.6936  com_loss_dice: 0.9784    time: 1.4771  last_time: 1.5018  data_time: 0.0444  last_data_time: 0.0425   lr: 0.0001  max_mem: 34980M
[08/18 19:50:10] d2.utils.events INFO:  eta: 0:10:18  iter: 579  total_loss: 44.68  m1_loss_ce: 0.5847  m1_loss_mask: 0.1649  m1_loss_dice: 1.186  m1_loss_ce_0: 0.6776  m1_loss_mask_0: 0.1942  m1_loss_dice_0: 1.407  m1_loss_ce_1: 0.7378  m1_loss_mask_1: 0.1708  m1_loss_dice_1: 1.336  m1_loss_ce_2: 0.6638  m1_loss_mask_2: 0.162  m1_loss_dice_2: 1.285  m1_loss_ce_3: 0.5927  m1_loss_mask_3: 0.1639  m1_loss_dice_3: 1.254  m1_loss_ce_4: 0.5937  m1_loss_mask_4: 0.1676  m1_loss_dice_4: 1.256  m1_loss_ce_5: 0.5666  m1_loss_mask_5: 0.1656  m1_loss_dice_5: 1.228  m1_loss_ce_6: 0.5501  m1_loss_mask_6: 0.1634  m1_loss_dice_6: 1.212  m1_loss_ce_7: 0.564  m1_loss_mask_7: 0.1655  m1_loss_dice_7: 1.204  m1_loss_ce_8: 0.5741  m1_loss_mask_8: 0.1626  m1_loss_dice_8: 1.214  m2_loss_ce: 0.5807  m2_loss_mask: 0.1631  m2_loss_dice: 1.237  m2_loss_ce_0: 0.6552  m2_loss_mask_0: 0.1943  m2_loss_dice_0: 1.438  m2_loss_ce_1: 0.7408  m2_loss_mask_1: 0.173  m2_loss_dice_1: 1.376  m2_loss_ce_2: 0.6968  m2_loss_mask_2: 0.1648  m2_loss_dice_2: 1.296  m2_loss_ce_3: 0.6349  m2_loss_mask_3: 0.1666  m2_loss_dice_3: 1.239  m2_loss_ce_4: 0.578  m2_loss_mask_4: 0.1654  m2_loss_dice_4: 1.284  m2_loss_ce_5: 0.5914  m2_loss_mask_5: 0.1615  m2_loss_dice_5: 1.281  m2_loss_ce_6: 0.5738  m2_loss_mask_6: 0.1606  m2_loss_dice_6: 1.258  m2_loss_ce_7: 0.5626  m2_loss_mask_7: 0.163  m2_loss_dice_7: 1.236  m2_loss_ce_8: 0.5623  m2_loss_mask_8: 0.1629  m2_loss_dice_8: 1.214  com_loss_ce: 2.149  com_loss_mask: 0.6936  com_loss_dice: 0.9797    time: 1.4771  last_time: 1.4720  data_time: 0.0430  last_data_time: 0.0411   lr: 0.0001  max_mem: 34980M
[08/18 19:50:40] d2.utils.events INFO:  eta: 0:09:49  iter: 599  total_loss: 43.98  m1_loss_ce: 0.562  m1_loss_mask: 0.1711  m1_loss_dice: 1.155  m1_loss_ce_0: 0.6331  m1_loss_mask_0: 0.2024  m1_loss_dice_0: 1.366  m1_loss_ce_1: 0.6811  m1_loss_mask_1: 0.188  m1_loss_dice_1: 1.313  m1_loss_ce_2: 0.6816  m1_loss_mask_2: 0.1782  m1_loss_dice_2: 1.252  m1_loss_ce_3: 0.621  m1_loss_mask_3: 0.1773  m1_loss_dice_3: 1.198  m1_loss_ce_4: 0.5986  m1_loss_mask_4: 0.1743  m1_loss_dice_4: 1.209  m1_loss_ce_5: 0.5441  m1_loss_mask_5: 0.1736  m1_loss_dice_5: 1.22  m1_loss_ce_6: 0.5647  m1_loss_mask_6: 0.1746  m1_loss_dice_6: 1.16  m1_loss_ce_7: 0.5439  m1_loss_mask_7: 0.1721  m1_loss_dice_7: 1.165  m1_loss_ce_8: 0.5327  m1_loss_mask_8: 0.1729  m1_loss_dice_8: 1.171  m2_loss_ce: 0.5602  m2_loss_mask: 0.1728  m2_loss_dice: 1.193  m2_loss_ce_0: 0.6219  m2_loss_mask_0: 0.2009  m2_loss_dice_0: 1.383  m2_loss_ce_1: 0.6769  m2_loss_mask_1: 0.1845  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.6405  m2_loss_mask_2: 0.1754  m2_loss_dice_2: 1.254  m2_loss_ce_3: 0.5859  m2_loss_mask_3: 0.1765  m2_loss_dice_3: 1.215  m2_loss_ce_4: 0.5636  m2_loss_mask_4: 0.1792  m2_loss_dice_4: 1.199  m2_loss_ce_5: 0.5706  m2_loss_mask_5: 0.1766  m2_loss_dice_5: 1.203  m2_loss_ce_6: 0.5632  m2_loss_mask_6: 0.1748  m2_loss_dice_6: 1.176  m2_loss_ce_7: 0.5572  m2_loss_mask_7: 0.1771  m2_loss_dice_7: 1.16  m2_loss_ce_8: 0.5252  m2_loss_mask_8: 0.1773  m2_loss_dice_8: 1.172  com_loss_ce: 2.144  com_loss_mask: 0.6936  com_loss_dice: 0.9794    time: 1.4769  last_time: 1.4839  data_time: 0.0440  last_data_time: 0.0416   lr: 0.0001  max_mem: 34980M
[08/18 19:51:10] d2.utils.events INFO:  eta: 0:09:19  iter: 619  total_loss: 44.91  m1_loss_ce: 0.5501  m1_loss_mask: 0.174  m1_loss_dice: 1.256  m1_loss_ce_0: 0.6749  m1_loss_mask_0: 0.207  m1_loss_dice_0: 1.412  m1_loss_ce_1: 0.683  m1_loss_mask_1: 0.1875  m1_loss_dice_1: 1.374  m1_loss_ce_2: 0.6137  m1_loss_mask_2: 0.1828  m1_loss_dice_2: 1.272  m1_loss_ce_3: 0.5647  m1_loss_mask_3: 0.1817  m1_loss_dice_3: 1.238  m1_loss_ce_4: 0.5432  m1_loss_mask_4: 0.1797  m1_loss_dice_4: 1.262  m1_loss_ce_5: 0.5578  m1_loss_mask_5: 0.1799  m1_loss_dice_5: 1.27  m1_loss_ce_6: 0.5421  m1_loss_mask_6: 0.1778  m1_loss_dice_6: 1.217  m1_loss_ce_7: 0.5613  m1_loss_mask_7: 0.1743  m1_loss_dice_7: 1.229  m1_loss_ce_8: 0.5151  m1_loss_mask_8: 0.174  m1_loss_dice_8: 1.243  m2_loss_ce: 0.5783  m2_loss_mask: 0.1825  m2_loss_dice: 1.237  m2_loss_ce_0: 0.7138  m2_loss_mask_0: 0.2164  m2_loss_dice_0: 1.454  m2_loss_ce_1: 0.6628  m2_loss_mask_1: 0.191  m2_loss_dice_1: 1.408  m2_loss_ce_2: 0.634  m2_loss_mask_2: 0.1838  m2_loss_dice_2: 1.28  m2_loss_ce_3: 0.589  m2_loss_mask_3: 0.1855  m2_loss_dice_3: 1.255  m2_loss_ce_4: 0.5304  m2_loss_mask_4: 0.1863  m2_loss_dice_4: 1.273  m2_loss_ce_5: 0.5592  m2_loss_mask_5: 0.183  m2_loss_dice_5: 1.248  m2_loss_ce_6: 0.535  m2_loss_mask_6: 0.1847  m2_loss_dice_6: 1.235  m2_loss_ce_7: 0.519  m2_loss_mask_7: 0.1824  m2_loss_dice_7: 1.247  m2_loss_ce_8: 0.5533  m2_loss_mask_8: 0.1824  m2_loss_dice_8: 1.27  com_loss_ce: 2.148  com_loss_mask: 0.6936  com_loss_dice: 0.9796    time: 1.4773  last_time: 1.5105  data_time: 0.0447  last_data_time: 0.0450   lr: 0.0001  max_mem: 34980M
[08/18 19:51:40] d2.utils.events INFO:  eta: 0:08:50  iter: 639  total_loss: 43.63  m1_loss_ce: 0.5244  m1_loss_mask: 0.1637  m1_loss_dice: 1.167  m1_loss_ce_0: 0.6087  m1_loss_mask_0: 0.1976  m1_loss_dice_0: 1.399  m1_loss_ce_1: 0.6483  m1_loss_mask_1: 0.1776  m1_loss_dice_1: 1.33  m1_loss_ce_2: 0.6143  m1_loss_mask_2: 0.1686  m1_loss_dice_2: 1.238  m1_loss_ce_3: 0.5666  m1_loss_mask_3: 0.1669  m1_loss_dice_3: 1.23  m1_loss_ce_4: 0.5494  m1_loss_mask_4: 0.1664  m1_loss_dice_4: 1.22  m1_loss_ce_5: 0.551  m1_loss_mask_5: 0.1641  m1_loss_dice_5: 1.229  m1_loss_ce_6: 0.5572  m1_loss_mask_6: 0.1629  m1_loss_dice_6: 1.21  m1_loss_ce_7: 0.537  m1_loss_mask_7: 0.1607  m1_loss_dice_7: 1.196  m1_loss_ce_8: 0.5652  m1_loss_mask_8: 0.1617  m1_loss_dice_8: 1.173  m2_loss_ce: 0.5318  m2_loss_mask: 0.1639  m2_loss_dice: 1.202  m2_loss_ce_0: 0.6312  m2_loss_mask_0: 0.198  m2_loss_dice_0: 1.43  m2_loss_ce_1: 0.6639  m2_loss_mask_1: 0.1776  m2_loss_dice_1: 1.342  m2_loss_ce_2: 0.6352  m2_loss_mask_2: 0.1661  m2_loss_dice_2: 1.252  m2_loss_ce_3: 0.5712  m2_loss_mask_3: 0.1663  m2_loss_dice_3: 1.221  m2_loss_ce_4: 0.5698  m2_loss_mask_4: 0.1685  m2_loss_dice_4: 1.26  m2_loss_ce_5: 0.5372  m2_loss_mask_5: 0.1675  m2_loss_dice_5: 1.235  m2_loss_ce_6: 0.5307  m2_loss_mask_6: 0.1649  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.538  m2_loss_mask_7: 0.1659  m2_loss_dice_7: 1.211  m2_loss_ce_8: 0.5253  m2_loss_mask_8: 0.1673  m2_loss_dice_8: 1.212  com_loss_ce: 2.144  com_loss_mask: 0.6936  com_loss_dice: 0.9804    time: 1.4778  last_time: 1.5397  data_time: 0.0444  last_data_time: 0.0460   lr: 0.0001  max_mem: 34980M
[08/18 19:52:09] d2.utils.events INFO:  eta: 0:08:20  iter: 659  total_loss: 43.57  m1_loss_ce: 0.5156  m1_loss_mask: 0.1616  m1_loss_dice: 1.185  m1_loss_ce_0: 0.5997  m1_loss_mask_0: 0.1908  m1_loss_dice_0: 1.418  m1_loss_ce_1: 0.68  m1_loss_mask_1: 0.1714  m1_loss_dice_1: 1.324  m1_loss_ce_2: 0.5964  m1_loss_mask_2: 0.1683  m1_loss_dice_2: 1.255  m1_loss_ce_3: 0.5629  m1_loss_mask_3: 0.1642  m1_loss_dice_3: 1.212  m1_loss_ce_4: 0.5479  m1_loss_mask_4: 0.165  m1_loss_dice_4: 1.2  m1_loss_ce_5: 0.5514  m1_loss_mask_5: 0.1639  m1_loss_dice_5: 1.229  m1_loss_ce_6: 0.511  m1_loss_mask_6: 0.1632  m1_loss_dice_6: 1.209  m1_loss_ce_7: 0.5428  m1_loss_mask_7: 0.1622  m1_loss_dice_7: 1.182  m1_loss_ce_8: 0.5313  m1_loss_mask_8: 0.1625  m1_loss_dice_8: 1.209  m2_loss_ce: 0.5216  m2_loss_mask: 0.1625  m2_loss_dice: 1.233  m2_loss_ce_0: 0.6359  m2_loss_mask_0: 0.2059  m2_loss_dice_0: 1.438  m2_loss_ce_1: 0.6891  m2_loss_mask_1: 0.1773  m2_loss_dice_1: 1.338  m2_loss_ce_2: 0.6191  m2_loss_mask_2: 0.1657  m2_loss_dice_2: 1.284  m2_loss_ce_3: 0.5898  m2_loss_mask_3: 0.1634  m2_loss_dice_3: 1.237  m2_loss_ce_4: 0.553  m2_loss_mask_4: 0.1638  m2_loss_dice_4: 1.251  m2_loss_ce_5: 0.5612  m2_loss_mask_5: 0.1634  m2_loss_dice_5: 1.242  m2_loss_ce_6: 0.5355  m2_loss_mask_6: 0.1611  m2_loss_dice_6: 1.22  m2_loss_ce_7: 0.5369  m2_loss_mask_7: 0.1627  m2_loss_dice_7: 1.221  m2_loss_ce_8: 0.5404  m2_loss_mask_8: 0.1609  m2_loss_dice_8: 1.226  com_loss_ce: 2.144  com_loss_mask: 0.6936  com_loss_dice: 0.9802    time: 1.4777  last_time: 1.5064  data_time: 0.0451  last_data_time: 0.0477   lr: 0.0001  max_mem: 34980M
[08/18 19:52:39] d2.utils.events INFO:  eta: 0:07:51  iter: 679  total_loss: 46.06  m1_loss_ce: 0.5514  m1_loss_mask: 0.1568  m1_loss_dice: 1.254  m1_loss_ce_0: 0.6606  m1_loss_mask_0: 0.1842  m1_loss_dice_0: 1.518  m1_loss_ce_1: 0.6275  m1_loss_mask_1: 0.1708  m1_loss_dice_1: 1.426  m1_loss_ce_2: 0.6305  m1_loss_mask_2: 0.1617  m1_loss_dice_2: 1.379  m1_loss_ce_3: 0.5443  m1_loss_mask_3: 0.1593  m1_loss_dice_3: 1.294  m1_loss_ce_4: 0.53  m1_loss_mask_4: 0.1586  m1_loss_dice_4: 1.292  m1_loss_ce_5: 0.5225  m1_loss_mask_5: 0.1546  m1_loss_dice_5: 1.289  m1_loss_ce_6: 0.5105  m1_loss_mask_6: 0.1574  m1_loss_dice_6: 1.31  m1_loss_ce_7: 0.4915  m1_loss_mask_7: 0.1572  m1_loss_dice_7: 1.249  m1_loss_ce_8: 0.5129  m1_loss_mask_8: 0.1576  m1_loss_dice_8: 1.289  m2_loss_ce: 0.536  m2_loss_mask: 0.1597  m2_loss_dice: 1.269  m2_loss_ce_0: 0.6832  m2_loss_mask_0: 0.1925  m2_loss_dice_0: 1.605  m2_loss_ce_1: 0.6806  m2_loss_mask_1: 0.1722  m2_loss_dice_1: 1.516  m2_loss_ce_2: 0.6237  m2_loss_mask_2: 0.1647  m2_loss_dice_2: 1.398  m2_loss_ce_3: 0.5667  m2_loss_mask_3: 0.1656  m2_loss_dice_3: 1.304  m2_loss_ce_4: 0.5181  m2_loss_mask_4: 0.1629  m2_loss_dice_4: 1.301  m2_loss_ce_5: 0.5366  m2_loss_mask_5: 0.161  m2_loss_dice_5: 1.339  m2_loss_ce_6: 0.5303  m2_loss_mask_6: 0.162  m2_loss_dice_6: 1.295  m2_loss_ce_7: 0.5509  m2_loss_mask_7: 0.1596  m2_loss_dice_7: 1.291  m2_loss_ce_8: 0.5194  m2_loss_mask_8: 0.1599  m2_loss_dice_8: 1.275  com_loss_ce: 2.147  com_loss_mask: 0.6936  com_loss_dice: 0.9812    time: 1.4780  last_time: 1.5359  data_time: 0.0466  last_data_time: 0.0552   lr: 0.0001  max_mem: 34980M
[08/18 19:53:09] d2.utils.events INFO:  eta: 0:07:22  iter: 699  total_loss: 45.52  m1_loss_ce: 0.5419  m1_loss_mask: 0.169  m1_loss_dice: 1.211  m1_loss_ce_0: 0.6622  m1_loss_mask_0: 0.1968  m1_loss_dice_0: 1.467  m1_loss_ce_1: 0.7415  m1_loss_mask_1: 0.1814  m1_loss_dice_1: 1.37  m1_loss_ce_2: 0.6375  m1_loss_mask_2: 0.1734  m1_loss_dice_2: 1.307  m1_loss_ce_3: 0.6322  m1_loss_mask_3: 0.1737  m1_loss_dice_3: 1.273  m1_loss_ce_4: 0.5944  m1_loss_mask_4: 0.1704  m1_loss_dice_4: 1.257  m1_loss_ce_5: 0.5844  m1_loss_mask_5: 0.1701  m1_loss_dice_5: 1.272  m1_loss_ce_6: 0.5303  m1_loss_mask_6: 0.1707  m1_loss_dice_6: 1.233  m1_loss_ce_7: 0.5613  m1_loss_mask_7: 0.168  m1_loss_dice_7: 1.245  m1_loss_ce_8: 0.5639  m1_loss_mask_8: 0.1711  m1_loss_dice_8: 1.233  m2_loss_ce: 0.5944  m2_loss_mask: 0.1695  m2_loss_dice: 1.236  m2_loss_ce_0: 0.652  m2_loss_mask_0: 0.1946  m2_loss_dice_0: 1.504  m2_loss_ce_1: 0.7403  m2_loss_mask_1: 0.1797  m2_loss_dice_1: 1.417  m2_loss_ce_2: 0.6794  m2_loss_mask_2: 0.1715  m2_loss_dice_2: 1.297  m2_loss_ce_3: 0.6266  m2_loss_mask_3: 0.1691  m2_loss_dice_3: 1.257  m2_loss_ce_4: 0.6239  m2_loss_mask_4: 0.1703  m2_loss_dice_4: 1.288  m2_loss_ce_5: 0.5833  m2_loss_mask_5: 0.1677  m2_loss_dice_5: 1.275  m2_loss_ce_6: 0.5908  m2_loss_mask_6: 0.1699  m2_loss_dice_6: 1.257  m2_loss_ce_7: 0.5855  m2_loss_mask_7: 0.1679  m2_loss_dice_7: 1.264  m2_loss_ce_8: 0.5828  m2_loss_mask_8: 0.1684  m2_loss_dice_8: 1.241  com_loss_ce: 2.149  com_loss_mask: 0.6936  com_loss_dice: 0.9809    time: 1.4787  last_time: 1.5088  data_time: 0.0443  last_data_time: 0.0477   lr: 0.0001  max_mem: 34980M
[08/18 19:53:40] d2.utils.events INFO:  eta: 0:06:52  iter: 719  total_loss: 45.54  m1_loss_ce: 0.5516  m1_loss_mask: 0.1588  m1_loss_dice: 1.214  m1_loss_ce_0: 0.6588  m1_loss_mask_0: 0.1854  m1_loss_dice_0: 1.446  m1_loss_ce_1: 0.7379  m1_loss_mask_1: 0.1734  m1_loss_dice_1: 1.361  m1_loss_ce_2: 0.6866  m1_loss_mask_2: 0.1665  m1_loss_dice_2: 1.314  m1_loss_ce_3: 0.5997  m1_loss_mask_3: 0.1643  m1_loss_dice_3: 1.246  m1_loss_ce_4: 0.6095  m1_loss_mask_4: 0.1612  m1_loss_dice_4: 1.213  m1_loss_ce_5: 0.5618  m1_loss_mask_5: 0.1608  m1_loss_dice_5: 1.23  m1_loss_ce_6: 0.5773  m1_loss_mask_6: 0.1597  m1_loss_dice_6: 1.228  m1_loss_ce_7: 0.5278  m1_loss_mask_7: 0.1637  m1_loss_dice_7: 1.23  m1_loss_ce_8: 0.536  m1_loss_mask_8: 0.1596  m1_loss_dice_8: 1.224  m2_loss_ce: 0.5445  m2_loss_mask: 0.1641  m2_loss_dice: 1.247  m2_loss_ce_0: 0.6556  m2_loss_mask_0: 0.2004  m2_loss_dice_0: 1.484  m2_loss_ce_1: 0.7015  m2_loss_mask_1: 0.1782  m2_loss_dice_1: 1.414  m2_loss_ce_2: 0.6711  m2_loss_mask_2: 0.1704  m2_loss_dice_2: 1.338  m2_loss_ce_3: 0.6261  m2_loss_mask_3: 0.1686  m2_loss_dice_3: 1.262  m2_loss_ce_4: 0.5945  m2_loss_mask_4: 0.1684  m2_loss_dice_4: 1.28  m2_loss_ce_5: 0.613  m2_loss_mask_5: 0.1667  m2_loss_dice_5: 1.253  m2_loss_ce_6: 0.5722  m2_loss_mask_6: 0.1656  m2_loss_dice_6: 1.253  m2_loss_ce_7: 0.5539  m2_loss_mask_7: 0.1676  m2_loss_dice_7: 1.264  m2_loss_ce_8: 0.5645  m2_loss_mask_8: 0.164  m2_loss_dice_8: 1.238  com_loss_ce: 2.148  com_loss_mask: 0.6936  com_loss_dice: 0.9809    time: 1.4794  last_time: 1.5778  data_time: 0.0446  last_data_time: 0.0485   lr: 0.0001  max_mem: 34980M
[08/18 19:54:09] d2.utils.events INFO:  eta: 0:06:23  iter: 739  total_loss: 43.86  m1_loss_ce: 0.4855  m1_loss_mask: 0.164  m1_loss_dice: 1.188  m1_loss_ce_0: 0.5988  m1_loss_mask_0: 0.19  m1_loss_dice_0: 1.394  m1_loss_ce_1: 0.6866  m1_loss_mask_1: 0.1692  m1_loss_dice_1: 1.316  m1_loss_ce_2: 0.6404  m1_loss_mask_2: 0.1634  m1_loss_dice_2: 1.257  m1_loss_ce_3: 0.588  m1_loss_mask_3: 0.1649  m1_loss_dice_3: 1.209  m1_loss_ce_4: 0.5608  m1_loss_mask_4: 0.1659  m1_loss_dice_4: 1.26  m1_loss_ce_5: 0.5147  m1_loss_mask_5: 0.166  m1_loss_dice_5: 1.172  m1_loss_ce_6: 0.5252  m1_loss_mask_6: 0.1669  m1_loss_dice_6: 1.187  m1_loss_ce_7: 0.4983  m1_loss_mask_7: 0.1625  m1_loss_dice_7: 1.2  m1_loss_ce_8: 0.494  m1_loss_mask_8: 0.1634  m1_loss_dice_8: 1.231  m2_loss_ce: 0.5283  m2_loss_mask: 0.1637  m2_loss_dice: 1.217  m2_loss_ce_0: 0.6182  m2_loss_mask_0: 0.1935  m2_loss_dice_0: 1.449  m2_loss_ce_1: 0.701  m2_loss_mask_1: 0.1729  m2_loss_dice_1: 1.383  m2_loss_ce_2: 0.6655  m2_loss_mask_2: 0.1673  m2_loss_dice_2: 1.255  m2_loss_ce_3: 0.5815  m2_loss_mask_3: 0.1656  m2_loss_dice_3: 1.26  m2_loss_ce_4: 0.5549  m2_loss_mask_4: 0.1672  m2_loss_dice_4: 1.247  m2_loss_ce_5: 0.5298  m2_loss_mask_5: 0.1657  m2_loss_dice_5: 1.232  m2_loss_ce_6: 0.5372  m2_loss_mask_6: 0.1687  m2_loss_dice_6: 1.211  m2_loss_ce_7: 0.5338  m2_loss_mask_7: 0.1682  m2_loss_dice_7: 1.223  m2_loss_ce_8: 0.5255  m2_loss_mask_8: 0.1641  m2_loss_dice_8: 1.202  com_loss_ce: 2.141  com_loss_mask: 0.6936  com_loss_dice: 0.9796    time: 1.4794  last_time: 1.4954  data_time: 0.0434  last_data_time: 0.0458   lr: 0.0001  max_mem: 34980M
[08/18 19:54:39] d2.utils.events INFO:  eta: 0:05:53  iter: 759  total_loss: 46.23  m1_loss_ce: 0.503  m1_loss_mask: 0.1538  m1_loss_dice: 1.227  m1_loss_ce_0: 0.6134  m1_loss_mask_0: 0.1703  m1_loss_dice_0: 1.462  m1_loss_ce_1: 0.682  m1_loss_mask_1: 0.1596  m1_loss_dice_1: 1.418  m1_loss_ce_2: 0.6505  m1_loss_mask_2: 0.1571  m1_loss_dice_2: 1.347  m1_loss_ce_3: 0.5572  m1_loss_mask_3: 0.1537  m1_loss_dice_3: 1.273  m1_loss_ce_4: 0.5382  m1_loss_mask_4: 0.1542  m1_loss_dice_4: 1.273  m1_loss_ce_5: 0.5329  m1_loss_mask_5: 0.1515  m1_loss_dice_5: 1.271  m1_loss_ce_6: 0.5097  m1_loss_mask_6: 0.1543  m1_loss_dice_6: 1.243  m1_loss_ce_7: 0.5092  m1_loss_mask_7: 0.153  m1_loss_dice_7: 1.295  m1_loss_ce_8: 0.5113  m1_loss_mask_8: 0.1524  m1_loss_dice_8: 1.262  m2_loss_ce: 0.5274  m2_loss_mask: 0.1523  m2_loss_dice: 1.266  m2_loss_ce_0: 0.6502  m2_loss_mask_0: 0.1815  m2_loss_dice_0: 1.494  m2_loss_ce_1: 0.6899  m2_loss_mask_1: 0.1666  m2_loss_dice_1: 1.409  m2_loss_ce_2: 0.643  m2_loss_mask_2: 0.1547  m2_loss_dice_2: 1.329  m2_loss_ce_3: 0.5708  m2_loss_mask_3: 0.1536  m2_loss_dice_3: 1.289  m2_loss_ce_4: 0.5348  m2_loss_mask_4: 0.1607  m2_loss_dice_4: 1.314  m2_loss_ce_5: 0.5457  m2_loss_mask_5: 0.1553  m2_loss_dice_5: 1.244  m2_loss_ce_6: 0.534  m2_loss_mask_6: 0.1569  m2_loss_dice_6: 1.281  m2_loss_ce_7: 0.5133  m2_loss_mask_7: 0.1516  m2_loss_dice_7: 1.275  m2_loss_ce_8: 0.5614  m2_loss_mask_8: 0.1532  m2_loss_dice_8: 1.251  com_loss_ce: 2.146  com_loss_mask: 0.6936  com_loss_dice: 0.9814    time: 1.4791  last_time: 1.4865  data_time: 0.0446  last_data_time: 0.0391   lr: 0.0001  max_mem: 34980M
[08/18 19:55:09] d2.utils.events INFO:  eta: 0:05:24  iter: 779  total_loss: 43.24  m1_loss_ce: 0.5138  m1_loss_mask: 0.161  m1_loss_dice: 1.141  m1_loss_ce_0: 0.6155  m1_loss_mask_0: 0.1798  m1_loss_dice_0: 1.393  m1_loss_ce_1: 0.6888  m1_loss_mask_1: 0.1685  m1_loss_dice_1: 1.29  m1_loss_ce_2: 0.6029  m1_loss_mask_2: 0.1645  m1_loss_dice_2: 1.237  m1_loss_ce_3: 0.5755  m1_loss_mask_3: 0.1649  m1_loss_dice_3: 1.206  m1_loss_ce_4: 0.5331  m1_loss_mask_4: 0.1622  m1_loss_dice_4: 1.194  m1_loss_ce_5: 0.5402  m1_loss_mask_5: 0.1627  m1_loss_dice_5: 1.176  m1_loss_ce_6: 0.5201  m1_loss_mask_6: 0.1614  m1_loss_dice_6: 1.174  m1_loss_ce_7: 0.5079  m1_loss_mask_7: 0.1629  m1_loss_dice_7: 1.219  m1_loss_ce_8: 0.5035  m1_loss_mask_8: 0.1625  m1_loss_dice_8: 1.17  m2_loss_ce: 0.5464  m2_loss_mask: 0.1613  m2_loss_dice: 1.198  m2_loss_ce_0: 0.6183  m2_loss_mask_0: 0.1849  m2_loss_dice_0: 1.44  m2_loss_ce_1: 0.6893  m2_loss_mask_1: 0.1725  m2_loss_dice_1: 1.343  m2_loss_ce_2: 0.6284  m2_loss_mask_2: 0.165  m2_loss_dice_2: 1.277  m2_loss_ce_3: 0.5808  m2_loss_mask_3: 0.1675  m2_loss_dice_3: 1.256  m2_loss_ce_4: 0.5616  m2_loss_mask_4: 0.1692  m2_loss_dice_4: 1.257  m2_loss_ce_5: 0.5728  m2_loss_mask_5: 0.1675  m2_loss_dice_5: 1.235  m2_loss_ce_6: 0.5493  m2_loss_mask_6: 0.1649  m2_loss_dice_6: 1.213  m2_loss_ce_7: 0.5331  m2_loss_mask_7: 0.1621  m2_loss_dice_7: 1.185  m2_loss_ce_8: 0.5458  m2_loss_mask_8: 0.1632  m2_loss_dice_8: 1.234  com_loss_ce: 2.139  com_loss_mask: 0.6936  com_loss_dice: 0.9797    time: 1.4793  last_time: 1.4923  data_time: 0.0425  last_data_time: 0.0416   lr: 0.0001  max_mem: 34980M
[08/18 19:55:38] d2.utils.events INFO:  eta: 0:04:54  iter: 799  total_loss: 43.69  m1_loss_ce: 0.5227  m1_loss_mask: 0.1693  m1_loss_dice: 1.134  m1_loss_ce_0: 0.635  m1_loss_mask_0: 0.1961  m1_loss_dice_0: 1.386  m1_loss_ce_1: 0.7117  m1_loss_mask_1: 0.1812  m1_loss_dice_1: 1.278  m1_loss_ce_2: 0.5963  m1_loss_mask_2: 0.1715  m1_loss_dice_2: 1.219  m1_loss_ce_3: 0.5587  m1_loss_mask_3: 0.1741  m1_loss_dice_3: 1.177  m1_loss_ce_4: 0.5347  m1_loss_mask_4: 0.1718  m1_loss_dice_4: 1.191  m1_loss_ce_5: 0.5022  m1_loss_mask_5: 0.1703  m1_loss_dice_5: 1.2  m1_loss_ce_6: 0.534  m1_loss_mask_6: 0.17  m1_loss_dice_6: 1.15  m1_loss_ce_7: 0.5525  m1_loss_mask_7: 0.1712  m1_loss_dice_7: 1.169  m1_loss_ce_8: 0.5304  m1_loss_mask_8: 0.1695  m1_loss_dice_8: 1.164  m2_loss_ce: 0.5384  m2_loss_mask: 0.1801  m2_loss_dice: 1.168  m2_loss_ce_0: 0.6145  m2_loss_mask_0: 0.2072  m2_loss_dice_0: 1.415  m2_loss_ce_1: 0.7035  m2_loss_mask_1: 0.1868  m2_loss_dice_1: 1.318  m2_loss_ce_2: 0.6347  m2_loss_mask_2: 0.1785  m2_loss_dice_2: 1.229  m2_loss_ce_3: 0.5783  m2_loss_mask_3: 0.1794  m2_loss_dice_3: 1.181  m2_loss_ce_4: 0.5688  m2_loss_mask_4: 0.1802  m2_loss_dice_4: 1.221  m2_loss_ce_5: 0.5375  m2_loss_mask_5: 0.1756  m2_loss_dice_5: 1.174  m2_loss_ce_6: 0.5225  m2_loss_mask_6: 0.1802  m2_loss_dice_6: 1.2  m2_loss_ce_7: 0.5366  m2_loss_mask_7: 0.1749  m2_loss_dice_7: 1.178  m2_loss_ce_8: 0.545  m2_loss_mask_8: 0.1778  m2_loss_dice_8: 1.189  com_loss_ce: 2.142  com_loss_mask: 0.6936  com_loss_dice: 0.9786    time: 1.4790  last_time: 1.4639  data_time: 0.0436  last_data_time: 0.0380   lr: 0.0001  max_mem: 34980M
[08/18 19:56:08] d2.utils.events INFO:  eta: 0:04:25  iter: 819  total_loss: 43.83  m1_loss_ce: 0.4691  m1_loss_mask: 0.1577  m1_loss_dice: 1.14  m1_loss_ce_0: 0.6256  m1_loss_mask_0: 0.1779  m1_loss_dice_0: 1.352  m1_loss_ce_1: 0.6355  m1_loss_mask_1: 0.1624  m1_loss_dice_1: 1.282  m1_loss_ce_2: 0.5859  m1_loss_mask_2: 0.157  m1_loss_dice_2: 1.241  m1_loss_ce_3: 0.5103  m1_loss_mask_3: 0.1592  m1_loss_dice_3: 1.199  m1_loss_ce_4: 0.52  m1_loss_mask_4: 0.1564  m1_loss_dice_4: 1.191  m1_loss_ce_5: 0.488  m1_loss_mask_5: 0.1557  m1_loss_dice_5: 1.161  m1_loss_ce_6: 0.4825  m1_loss_mask_6: 0.1557  m1_loss_dice_6: 1.12  m1_loss_ce_7: 0.4867  m1_loss_mask_7: 0.1544  m1_loss_dice_7: 1.164  m1_loss_ce_8: 0.4776  m1_loss_mask_8: 0.1542  m1_loss_dice_8: 1.149  m2_loss_ce: 0.5263  m2_loss_mask: 0.1584  m2_loss_dice: 1.185  m2_loss_ce_0: 0.6175  m2_loss_mask_0: 0.1946  m2_loss_dice_0: 1.445  m2_loss_ce_1: 0.6336  m2_loss_mask_1: 0.1731  m2_loss_dice_1: 1.368  m2_loss_ce_2: 0.6097  m2_loss_mask_2: 0.165  m2_loss_dice_2: 1.27  m2_loss_ce_3: 0.566  m2_loss_mask_3: 0.1619  m2_loss_dice_3: 1.219  m2_loss_ce_4: 0.5554  m2_loss_mask_4: 0.1652  m2_loss_dice_4: 1.195  m2_loss_ce_5: 0.5379  m2_loss_mask_5: 0.1605  m2_loss_dice_5: 1.203  m2_loss_ce_6: 0.5254  m2_loss_mask_6: 0.1595  m2_loss_dice_6: 1.172  m2_loss_ce_7: 0.5296  m2_loss_mask_7: 0.1611  m2_loss_dice_7: 1.196  m2_loss_ce_8: 0.5011  m2_loss_mask_8: 0.1592  m2_loss_dice_8: 1.196  com_loss_ce: 2.143  com_loss_mask: 0.6936  com_loss_dice: 0.9801    time: 1.4790  last_time: 1.5577  data_time: 0.0440  last_data_time: 0.0447   lr: 0.0001  max_mem: 34980M
[08/18 19:56:38] d2.utils.events INFO:  eta: 0:03:55  iter: 839  total_loss: 44.89  m1_loss_ce: 0.5297  m1_loss_mask: 0.1621  m1_loss_dice: 1.2  m1_loss_ce_0: 0.6828  m1_loss_mask_0: 0.1927  m1_loss_dice_0: 1.379  m1_loss_ce_1: 0.7279  m1_loss_mask_1: 0.1769  m1_loss_dice_1: 1.283  m1_loss_ce_2: 0.6331  m1_loss_mask_2: 0.1632  m1_loss_dice_2: 1.293  m1_loss_ce_3: 0.595  m1_loss_mask_3: 0.1639  m1_loss_dice_3: 1.233  m1_loss_ce_4: 0.5675  m1_loss_mask_4: 0.1631  m1_loss_dice_4: 1.21  m1_loss_ce_5: 0.5796  m1_loss_mask_5: 0.1653  m1_loss_dice_5: 1.196  m1_loss_ce_6: 0.5773  m1_loss_mask_6: 0.1636  m1_loss_dice_6: 1.182  m1_loss_ce_7: 0.5572  m1_loss_mask_7: 0.1636  m1_loss_dice_7: 1.192  m1_loss_ce_8: 0.5532  m1_loss_mask_8: 0.1643  m1_loss_dice_8: 1.179  m2_loss_ce: 0.5966  m2_loss_mask: 0.1689  m2_loss_dice: 1.224  m2_loss_ce_0: 0.678  m2_loss_mask_0: 0.2023  m2_loss_dice_0: 1.44  m2_loss_ce_1: 0.78  m2_loss_mask_1: 0.1812  m2_loss_dice_1: 1.386  m2_loss_ce_2: 0.6883  m2_loss_mask_2: 0.1717  m2_loss_dice_2: 1.318  m2_loss_ce_3: 0.6553  m2_loss_mask_3: 0.1703  m2_loss_dice_3: 1.247  m2_loss_ce_4: 0.5882  m2_loss_mask_4: 0.1737  m2_loss_dice_4: 1.24  m2_loss_ce_5: 0.6339  m2_loss_mask_5: 0.1727  m2_loss_dice_5: 1.285  m2_loss_ce_6: 0.575  m2_loss_mask_6: 0.1698  m2_loss_dice_6: 1.215  m2_loss_ce_7: 0.6051  m2_loss_mask_7: 0.1691  m2_loss_dice_7: 1.222  m2_loss_ce_8: 0.5852  m2_loss_mask_8: 0.1696  m2_loss_dice_8: 1.235  com_loss_ce: 2.148  com_loss_mask: 0.6936  com_loss_dice: 0.9801    time: 1.4792  last_time: 1.4987  data_time: 0.0449  last_data_time: 0.0466   lr: 0.0001  max_mem: 34980M
[08/18 19:57:08] d2.utils.events INFO:  eta: 0:03:26  iter: 859  total_loss: 44.6  m1_loss_ce: 0.5166  m1_loss_mask: 0.1612  m1_loss_dice: 1.219  m1_loss_ce_0: 0.688  m1_loss_mask_0: 0.1953  m1_loss_dice_0: 1.418  m1_loss_ce_1: 0.6768  m1_loss_mask_1: 0.1711  m1_loss_dice_1: 1.344  m1_loss_ce_2: 0.5872  m1_loss_mask_2: 0.162  m1_loss_dice_2: 1.313  m1_loss_ce_3: 0.5519  m1_loss_mask_3: 0.1625  m1_loss_dice_3: 1.205  m1_loss_ce_4: 0.5013  m1_loss_mask_4: 0.1597  m1_loss_dice_4: 1.234  m1_loss_ce_5: 0.5018  m1_loss_mask_5: 0.159  m1_loss_dice_5: 1.225  m1_loss_ce_6: 0.5044  m1_loss_mask_6: 0.158  m1_loss_dice_6: 1.222  m1_loss_ce_7: 0.5238  m1_loss_mask_7: 0.158  m1_loss_dice_7: 1.219  m1_loss_ce_8: 0.5033  m1_loss_mask_8: 0.1594  m1_loss_dice_8: 1.234  m2_loss_ce: 0.5035  m2_loss_mask: 0.1595  m2_loss_dice: 1.207  m2_loss_ce_0: 0.6059  m2_loss_mask_0: 0.1914  m2_loss_dice_0: 1.484  m2_loss_ce_1: 0.6351  m2_loss_mask_1: 0.1736  m2_loss_dice_1: 1.378  m2_loss_ce_2: 0.5839  m2_loss_mask_2: 0.1648  m2_loss_dice_2: 1.297  m2_loss_ce_3: 0.5468  m2_loss_mask_3: 0.1618  m2_loss_dice_3: 1.26  m2_loss_ce_4: 0.518  m2_loss_mask_4: 0.1623  m2_loss_dice_4: 1.247  m2_loss_ce_5: 0.5142  m2_loss_mask_5: 0.1602  m2_loss_dice_5: 1.259  m2_loss_ce_6: 0.515  m2_loss_mask_6: 0.1604  m2_loss_dice_6: 1.202  m2_loss_ce_7: 0.5097  m2_loss_mask_7: 0.1601  m2_loss_dice_7: 1.205  m2_loss_ce_8: 0.5241  m2_loss_mask_8: 0.1591  m2_loss_dice_8: 1.213  com_loss_ce: 2.145  com_loss_mask: 0.6936  com_loss_dice: 0.9801    time: 1.4794  last_time: 1.4340  data_time: 0.0435  last_data_time: 0.0423   lr: 0.0001  max_mem: 34980M
[08/18 19:57:37] d2.utils.events INFO:  eta: 0:02:57  iter: 879  total_loss: 44.11  m1_loss_ce: 0.5182  m1_loss_mask: 0.165  m1_loss_dice: 1.262  m1_loss_ce_0: 0.5904  m1_loss_mask_0: 0.1966  m1_loss_dice_0: 1.443  m1_loss_ce_1: 0.6891  m1_loss_mask_1: 0.1792  m1_loss_dice_1: 1.379  m1_loss_ce_2: 0.6306  m1_loss_mask_2: 0.1736  m1_loss_dice_2: 1.304  m1_loss_ce_3: 0.5653  m1_loss_mask_3: 0.1689  m1_loss_dice_3: 1.27  m1_loss_ce_4: 0.5479  m1_loss_mask_4: 0.1652  m1_loss_dice_4: 1.261  m1_loss_ce_5: 0.5305  m1_loss_mask_5: 0.1682  m1_loss_dice_5: 1.268  m1_loss_ce_6: 0.5321  m1_loss_mask_6: 0.1651  m1_loss_dice_6: 1.248  m1_loss_ce_7: 0.5283  m1_loss_mask_7: 0.1649  m1_loss_dice_7: 1.24  m1_loss_ce_8: 0.512  m1_loss_mask_8: 0.1641  m1_loss_dice_8: 1.241  m2_loss_ce: 0.5484  m2_loss_mask: 0.1704  m2_loss_dice: 1.245  m2_loss_ce_0: 0.6239  m2_loss_mask_0: 0.2054  m2_loss_dice_0: 1.532  m2_loss_ce_1: 0.6774  m2_loss_mask_1: 0.1837  m2_loss_dice_1: 1.417  m2_loss_ce_2: 0.6323  m2_loss_mask_2: 0.1728  m2_loss_dice_2: 1.338  m2_loss_ce_3: 0.5755  m2_loss_mask_3: 0.1671  m2_loss_dice_3: 1.295  m2_loss_ce_4: 0.5759  m2_loss_mask_4: 0.1735  m2_loss_dice_4: 1.281  m2_loss_ce_5: 0.5755  m2_loss_mask_5: 0.1696  m2_loss_dice_5: 1.283  m2_loss_ce_6: 0.5414  m2_loss_mask_6: 0.1708  m2_loss_dice_6: 1.261  m2_loss_ce_7: 0.5284  m2_loss_mask_7: 0.1675  m2_loss_dice_7: 1.252  m2_loss_ce_8: 0.5413  m2_loss_mask_8: 0.1674  m2_loss_dice_8: 1.265  com_loss_ce: 2.144  com_loss_mask: 0.6936  com_loss_dice: 0.9795    time: 1.4793  last_time: 1.5070  data_time: 0.0447  last_data_time: 0.0460   lr: 0.0001  max_mem: 34980M
[08/18 19:58:07] d2.utils.events INFO:  eta: 0:02:27  iter: 899  total_loss: 43.5  m1_loss_ce: 0.51  m1_loss_mask: 0.1669  m1_loss_dice: 1.16  m1_loss_ce_0: 0.6086  m1_loss_mask_0: 0.198  m1_loss_dice_0: 1.352  m1_loss_ce_1: 0.672  m1_loss_mask_1: 0.1859  m1_loss_dice_1: 1.309  m1_loss_ce_2: 0.5991  m1_loss_mask_2: 0.1762  m1_loss_dice_2: 1.277  m1_loss_ce_3: 0.5613  m1_loss_mask_3: 0.177  m1_loss_dice_3: 1.192  m1_loss_ce_4: 0.5261  m1_loss_mask_4: 0.1734  m1_loss_dice_4: 1.201  m1_loss_ce_5: 0.4972  m1_loss_mask_5: 0.1713  m1_loss_dice_5: 1.187  m1_loss_ce_6: 0.5151  m1_loss_mask_6: 0.1703  m1_loss_dice_6: 1.165  m1_loss_ce_7: 0.4898  m1_loss_mask_7: 0.1679  m1_loss_dice_7: 1.17  m1_loss_ce_8: 0.5038  m1_loss_mask_8: 0.1669  m1_loss_dice_8: 1.163  m2_loss_ce: 0.5574  m2_loss_mask: 0.1748  m2_loss_dice: 1.178  m2_loss_ce_0: 0.665  m2_loss_mask_0: 0.2015  m2_loss_dice_0: 1.415  m2_loss_ce_1: 0.7018  m2_loss_mask_1: 0.1883  m2_loss_dice_1: 1.311  m2_loss_ce_2: 0.6765  m2_loss_mask_2: 0.1847  m2_loss_dice_2: 1.275  m2_loss_ce_3: 0.6167  m2_loss_mask_3: 0.1842  m2_loss_dice_3: 1.238  m2_loss_ce_4: 0.57  m2_loss_mask_4: 0.1832  m2_loss_dice_4: 1.215  m2_loss_ce_5: 0.5635  m2_loss_mask_5: 0.1796  m2_loss_dice_5: 1.227  m2_loss_ce_6: 0.5694  m2_loss_mask_6: 0.1776  m2_loss_dice_6: 1.188  m2_loss_ce_7: 0.5591  m2_loss_mask_7: 0.1744  m2_loss_dice_7: 1.197  m2_loss_ce_8: 0.5415  m2_loss_mask_8: 0.1757  m2_loss_dice_8: 1.205  com_loss_ce: 2.143  com_loss_mask: 0.6936  com_loss_dice: 0.9791    time: 1.4791  last_time: 1.3757  data_time: 0.0428  last_data_time: 0.0393   lr: 0.0001  max_mem: 34980M
[08/18 19:58:36] d2.utils.events INFO:  eta: 0:01:57  iter: 919  total_loss: 44.07  m1_loss_ce: 0.474  m1_loss_mask: 0.1565  m1_loss_dice: 1.192  m1_loss_ce_0: 0.6047  m1_loss_mask_0: 0.1767  m1_loss_dice_0: 1.372  m1_loss_ce_1: 0.65  m1_loss_mask_1: 0.165  m1_loss_dice_1: 1.322  m1_loss_ce_2: 0.666  m1_loss_mask_2: 0.1599  m1_loss_dice_2: 1.247  m1_loss_ce_3: 0.5471  m1_loss_mask_3: 0.1569  m1_loss_dice_3: 1.185  m1_loss_ce_4: 0.5256  m1_loss_mask_4: 0.1582  m1_loss_dice_4: 1.198  m1_loss_ce_5: 0.5256  m1_loss_mask_5: 0.1537  m1_loss_dice_5: 1.179  m1_loss_ce_6: 0.4655  m1_loss_mask_6: 0.1574  m1_loss_dice_6: 1.198  m1_loss_ce_7: 0.4943  m1_loss_mask_7: 0.157  m1_loss_dice_7: 1.174  m1_loss_ce_8: 0.4984  m1_loss_mask_8: 0.1567  m1_loss_dice_8: 1.184  m2_loss_ce: 0.5108  m2_loss_mask: 0.1623  m2_loss_dice: 1.219  m2_loss_ce_0: 0.6613  m2_loss_mask_0: 0.1899  m2_loss_dice_0: 1.45  m2_loss_ce_1: 0.688  m2_loss_mask_1: 0.1744  m2_loss_dice_1: 1.345  m2_loss_ce_2: 0.6535  m2_loss_mask_2: 0.1652  m2_loss_dice_2: 1.266  m2_loss_ce_3: 0.5843  m2_loss_mask_3: 0.1634  m2_loss_dice_3: 1.255  m2_loss_ce_4: 0.5529  m2_loss_mask_4: 0.1638  m2_loss_dice_4: 1.259  m2_loss_ce_5: 0.5689  m2_loss_mask_5: 0.1645  m2_loss_dice_5: 1.263  m2_loss_ce_6: 0.5253  m2_loss_mask_6: 0.1635  m2_loss_dice_6: 1.216  m2_loss_ce_7: 0.5573  m2_loss_mask_7: 0.1627  m2_loss_dice_7: 1.252  m2_loss_ce_8: 0.5234  m2_loss_mask_8: 0.1617  m2_loss_dice_8: 1.23  com_loss_ce: 2.143  com_loss_mask: 0.6936  com_loss_dice: 0.9802    time: 1.4790  last_time: 1.4165  data_time: 0.0428  last_data_time: 0.0431   lr: 0.0001  max_mem: 34980M
[08/18 19:59:06] d2.utils.events INFO:  eta: 0:01:28  iter: 939  total_loss: 43.75  m1_loss_ce: 0.4916  m1_loss_mask: 0.1551  m1_loss_dice: 1.204  m1_loss_ce_0: 0.6088  m1_loss_mask_0: 0.1846  m1_loss_dice_0: 1.414  m1_loss_ce_1: 0.6754  m1_loss_mask_1: 0.1684  m1_loss_dice_1: 1.327  m1_loss_ce_2: 0.6102  m1_loss_mask_2: 0.16  m1_loss_dice_2: 1.264  m1_loss_ce_3: 0.5619  m1_loss_mask_3: 0.1584  m1_loss_dice_3: 1.208  m1_loss_ce_4: 0.5049  m1_loss_mask_4: 0.1574  m1_loss_dice_4: 1.232  m1_loss_ce_5: 0.5306  m1_loss_mask_5: 0.157  m1_loss_dice_5: 1.235  m1_loss_ce_6: 0.4981  m1_loss_mask_6: 0.1551  m1_loss_dice_6: 1.222  m1_loss_ce_7: 0.5184  m1_loss_mask_7: 0.1534  m1_loss_dice_7: 1.199  m1_loss_ce_8: 0.5053  m1_loss_mask_8: 0.1529  m1_loss_dice_8: 1.205  m2_loss_ce: 0.5372  m2_loss_mask: 0.1568  m2_loss_dice: 1.249  m2_loss_ce_0: 0.6279  m2_loss_mask_0: 0.1948  m2_loss_dice_0: 1.453  m2_loss_ce_1: 0.6823  m2_loss_mask_1: 0.1674  m2_loss_dice_1: 1.387  m2_loss_ce_2: 0.6339  m2_loss_mask_2: 0.1585  m2_loss_dice_2: 1.327  m2_loss_ce_3: 0.5984  m2_loss_mask_3: 0.156  m2_loss_dice_3: 1.267  m2_loss_ce_4: 0.5405  m2_loss_mask_4: 0.1589  m2_loss_dice_4: 1.284  m2_loss_ce_5: 0.5658  m2_loss_mask_5: 0.158  m2_loss_dice_5: 1.26  m2_loss_ce_6: 0.5594  m2_loss_mask_6: 0.1572  m2_loss_dice_6: 1.245  m2_loss_ce_7: 0.5401  m2_loss_mask_7: 0.1559  m2_loss_dice_7: 1.245  m2_loss_ce_8: 0.5615  m2_loss_mask_8: 0.1569  m2_loss_dice_8: 1.244  com_loss_ce: 2.145  com_loss_mask: 0.6936  com_loss_dice: 0.9804    time: 1.4791  last_time: 1.4733  data_time: 0.0434  last_data_time: 0.0703   lr: 0.0001  max_mem: 34980M
[08/18 19:59:36] d2.utils.events INFO:  eta: 0:00:58  iter: 959  total_loss: 44.84  m1_loss_ce: 0.5006  m1_loss_mask: 0.1594  m1_loss_dice: 1.238  m1_loss_ce_0: 0.5991  m1_loss_mask_0: 0.1796  m1_loss_dice_0: 1.442  m1_loss_ce_1: 0.6286  m1_loss_mask_1: 0.1737  m1_loss_dice_1: 1.355  m1_loss_ce_2: 0.5765  m1_loss_mask_2: 0.1656  m1_loss_dice_2: 1.299  m1_loss_ce_3: 0.5694  m1_loss_mask_3: 0.1617  m1_loss_dice_3: 1.253  m1_loss_ce_4: 0.55  m1_loss_mask_4: 0.1624  m1_loss_dice_4: 1.255  m1_loss_ce_5: 0.5283  m1_loss_mask_5: 0.1609  m1_loss_dice_5: 1.281  m1_loss_ce_6: 0.5046  m1_loss_mask_6: 0.1599  m1_loss_dice_6: 1.227  m1_loss_ce_7: 0.5038  m1_loss_mask_7: 0.1609  m1_loss_dice_7: 1.265  m1_loss_ce_8: 0.468  m1_loss_mask_8: 0.1604  m1_loss_dice_8: 1.203  m2_loss_ce: 0.5082  m2_loss_mask: 0.1623  m2_loss_dice: 1.268  m2_loss_ce_0: 0.605  m2_loss_mask_0: 0.1897  m2_loss_dice_0: 1.446  m2_loss_ce_1: 0.6567  m2_loss_mask_1: 0.1755  m2_loss_dice_1: 1.391  m2_loss_ce_2: 0.6179  m2_loss_mask_2: 0.1697  m2_loss_dice_2: 1.338  m2_loss_ce_3: 0.5667  m2_loss_mask_3: 0.1676  m2_loss_dice_3: 1.277  m2_loss_ce_4: 0.5595  m2_loss_mask_4: 0.1705  m2_loss_dice_4: 1.279  m2_loss_ce_5: 0.5548  m2_loss_mask_5: 0.1695  m2_loss_dice_5: 1.269  m2_loss_ce_6: 0.5249  m2_loss_mask_6: 0.166  m2_loss_dice_6: 1.299  m2_loss_ce_7: 0.5116  m2_loss_mask_7: 0.1642  m2_loss_dice_7: 1.256  m2_loss_ce_8: 0.5094  m2_loss_mask_8: 0.1642  m2_loss_dice_8: 1.291  com_loss_ce: 2.143  com_loss_mask: 0.6936  com_loss_dice: 0.9809    time: 1.4792  last_time: 1.4417  data_time: 0.0428  last_data_time: 0.0394   lr: 0.0001  max_mem: 34980M
[08/18 20:00:05] d2.utils.events INFO:  eta: 0:00:29  iter: 979  total_loss: 44.29  m1_loss_ce: 0.4839  m1_loss_mask: 0.1634  m1_loss_dice: 1.215  m1_loss_ce_0: 0.6574  m1_loss_mask_0: 0.195  m1_loss_dice_0: 1.381  m1_loss_ce_1: 0.6933  m1_loss_mask_1: 0.1763  m1_loss_dice_1: 1.342  m1_loss_ce_2: 0.6343  m1_loss_mask_2: 0.1682  m1_loss_dice_2: 1.273  m1_loss_ce_3: 0.577  m1_loss_mask_3: 0.1636  m1_loss_dice_3: 1.196  m1_loss_ce_4: 0.5736  m1_loss_mask_4: 0.1636  m1_loss_dice_4: 1.204  m1_loss_ce_5: 0.5483  m1_loss_mask_5: 0.1649  m1_loss_dice_5: 1.174  m1_loss_ce_6: 0.5244  m1_loss_mask_6: 0.1636  m1_loss_dice_6: 1.197  m1_loss_ce_7: 0.5189  m1_loss_mask_7: 0.164  m1_loss_dice_7: 1.213  m1_loss_ce_8: 0.5026  m1_loss_mask_8: 0.1635  m1_loss_dice_8: 1.181  m2_loss_ce: 0.5581  m2_loss_mask: 0.1676  m2_loss_dice: 1.192  m2_loss_ce_0: 0.6199  m2_loss_mask_0: 0.2017  m2_loss_dice_0: 1.428  m2_loss_ce_1: 0.6933  m2_loss_mask_1: 0.1798  m2_loss_dice_1: 1.389  m2_loss_ce_2: 0.6597  m2_loss_mask_2: 0.1696  m2_loss_dice_2: 1.292  m2_loss_ce_3: 0.5858  m2_loss_mask_3: 0.1701  m2_loss_dice_3: 1.25  m2_loss_ce_4: 0.5811  m2_loss_mask_4: 0.174  m2_loss_dice_4: 1.267  m2_loss_ce_5: 0.5821  m2_loss_mask_5: 0.1683  m2_loss_dice_5: 1.252  m2_loss_ce_6: 0.5482  m2_loss_mask_6: 0.1699  m2_loss_dice_6: 1.202  m2_loss_ce_7: 0.5589  m2_loss_mask_7: 0.1715  m2_loss_dice_7: 1.215  m2_loss_ce_8: 0.5436  m2_loss_mask_8: 0.1684  m2_loss_dice_8: 1.22  com_loss_ce: 2.144  com_loss_mask: 0.6936  com_loss_dice: 0.9785    time: 1.4787  last_time: 1.4822  data_time: 0.0420  last_data_time: 0.0486   lr: 0.0001  max_mem: 34980M
[08/18 20:00:36] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_0_9/model_final.pth
[08/18 20:00:39] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 44.56  m1_loss_ce: 0.5637  m1_loss_mask: 0.1511  m1_loss_dice: 1.205  m1_loss_ce_0: 0.6442  m1_loss_mask_0: 0.1757  m1_loss_dice_0: 1.381  m1_loss_ce_1: 0.7224  m1_loss_mask_1: 0.1598  m1_loss_dice_1: 1.35  m1_loss_ce_2: 0.6588  m1_loss_mask_2: 0.1519  m1_loss_dice_2: 1.3  m1_loss_ce_3: 0.604  m1_loss_mask_3: 0.1523  m1_loss_dice_3: 1.24  m1_loss_ce_4: 0.5831  m1_loss_mask_4: 0.1508  m1_loss_dice_4: 1.234  m1_loss_ce_5: 0.5639  m1_loss_mask_5: 0.1522  m1_loss_dice_5: 1.169  m1_loss_ce_6: 0.5408  m1_loss_mask_6: 0.1506  m1_loss_dice_6: 1.229  m1_loss_ce_7: 0.5498  m1_loss_mask_7: 0.1503  m1_loss_dice_7: 1.226  m1_loss_ce_8: 0.5275  m1_loss_mask_8: 0.1486  m1_loss_dice_8: 1.255  m2_loss_ce: 0.5509  m2_loss_mask: 0.1493  m2_loss_dice: 1.243  m2_loss_ce_0: 0.6344  m2_loss_mask_0: 0.1816  m2_loss_dice_0: 1.447  m2_loss_ce_1: 0.7329  m2_loss_mask_1: 0.1579  m2_loss_dice_1: 1.344  m2_loss_ce_2: 0.6809  m2_loss_mask_2: 0.1552  m2_loss_dice_2: 1.287  m2_loss_ce_3: 0.6078  m2_loss_mask_3: 0.1557  m2_loss_dice_3: 1.282  m2_loss_ce_4: 0.584  m2_loss_mask_4: 0.1521  m2_loss_dice_4: 1.307  m2_loss_ce_5: 0.5546  m2_loss_mask_5: 0.1539  m2_loss_dice_5: 1.263  m2_loss_ce_6: 0.5782  m2_loss_mask_6: 0.1509  m2_loss_dice_6: 1.25  m2_loss_ce_7: 0.5473  m2_loss_mask_7: 0.1525  m2_loss_dice_7: 1.228  m2_loss_ce_8: 0.542  m2_loss_mask_8: 0.1511  m2_loss_dice_8: 1.265  com_loss_ce: 2.147  com_loss_mask: 0.6936  com_loss_dice: 0.9803    time: 1.4792  last_time: 1.5447  data_time: 0.0468  last_data_time: 0.0896   lr: 0.0001  max_mem: 34980M
[08/18 20:00:39] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:24:36 (1.4792 s / it)
[08/18 20:00:39] d2.engine.hooks INFO: Total training time: 0:24:46 (0:00:10 on hooks)
[08/18 20:00:39] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/18 20:00:39] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/18 20:00:39] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/18 20:00:39] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/18 20:00:39] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/18 20:02:11] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval6t804r9j ...
[08/18 20:02:29] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 56.797 | 81.282 | 68.845 |      19       |
| Things | 48.106 | 80.937 | 59.407 |       8       |
| Stuff  | 63.118 | 81.533 | 75.708 |      11       |
[08/18 20:02:29] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.448 | 97.854 | 99.586 |     Stuff     |
| class_8  | 72.932 | 84.414 | 86.398 |     Stuff     |
| class_11 | 86.440 | 88.791 | 97.352 |     Stuff     |
| class_12 | 34.116 | 80.086 | 42.599 |     Stuff     |
| class_13 | 33.434 | 76.533 | 43.686 |     Stuff     |
| class_17 | 41.658 | 64.140 | 64.948 |     Stuff     |
| class_19 | 48.827 | 68.955 | 70.810 |     Stuff     |
| class_20 | 65.992 | 77.407 | 85.253 |     Stuff     |
| class_21 | 89.199 | 89.939 | 99.177 |     Stuff     |
| class_22 | 36.566 | 76.788 | 47.619 |     Stuff     |
| class_23 | 87.687 | 91.954 | 95.360 |     Stuff     |
| class_24 | 51.472 | 77.060 | 66.794 |    Things     |
| class_25 | 36.977 | 74.853 | 49.399 |    Things     |
| class_26 | 65.321 | 83.273 | 78.442 |    Things     |
| class_27 | 49.866 | 88.060 | 56.627 |    Things     |
| class_28 | 61.554 | 90.244 | 68.208 |    Things     |
| class_31 | 36.701 | 89.131 | 41.176 |    Things     |
| class_32 | 40.038 | 73.499 | 54.475 |    Things     |
| class_33 | 42.923 | 71.376 | 60.136 |    Things     |
[08/18 20:02:29] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/18 20:02:29] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/18 20:02:29] d2.evaluation.testing INFO: copypaste: 56.7974,81.2819,68.8446,48.1064,80.9371,59.4073,63.1181,81.5328,75.7081,97.4483,97.8535,99.5859,72.9323,84.4141,86.3983,86.4401,88.7910,97.3523,34.1159,80.0856,42.5993,33.4342,76.5329,43.6860,41.6582,64.1404,64.9485,48.8270,68.9551,70.8098,65.9917,77.4070,85.2530,89.1987,89.9390,99.1770,36.5656,76.7878,47.6190,87.6871,91.9541,95.3596,51.4720,77.0602,66.7945,36.9769,74.8532,49.3992,65.3214,83.2731,78.4424,49.8656,88.0605,56.6265,61.5535,90.2437,68.2081,36.7011,89.1312,41.1765,40.0383,73.4989,54.4747,42.9227,71.3756,60.1365
