[09/08 22:06:27] detectron2 INFO: Rank of current process: 0. World size: 2
[09/08 22:06:28] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[09/08 22:06:28] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_softmax_entropy_2000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[09/08 22:06:28] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_softmax_entropy_2000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_2000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy_2000_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[09/08 22:06:28] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_2000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy_2000_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[09/08 22:06:28] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy_2000_1000/config.yaml
[09/08 22:06:28] d2.utils.env INFO: Using a generated random seed 30171017
[09/08 22:06:32] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[09/08 22:06:32] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[09/08 22:06:32] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[09/08 22:06:32] d2.data.build INFO: Using training sampler TrainingSampler
[09/08 22:06:33] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/08 22:06:33] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[09/08 22:06:33] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[09/08 22:06:33] d2.data.build INFO: Making batched data loader with batch_size=4
[09/08 22:06:33] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[09/08 22:06:37] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[09/08 22:06:37] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_2000_19/model_final.pth ...
[09/08 22:06:37] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_2000_19/model_final.pth ...
[09/08 22:06:37] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_2000_19/model_final.pth ...
[09/08 22:06:37] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_2000_19/model_final.pth ...
[09/08 22:07:12] d2.utils.events INFO:  eta: 0:22:46  iter: 19  total_loss: 40.59  m1_loss_ce: 0.4727  m1_loss_mask: 0.156  m1_loss_dice: 1.101  m1_loss_ce_0: 0.5684  m1_loss_mask_0: 0.1874  m1_loss_dice_0: 1.302  m1_loss_ce_1: 0.6203  m1_loss_mask_1: 0.1713  m1_loss_dice_1: 1.201  m1_loss_ce_2: 0.5554  m1_loss_mask_2: 0.1585  m1_loss_dice_2: 1.182  m1_loss_ce_3: 0.4898  m1_loss_mask_3: 0.1562  m1_loss_dice_3: 1.116  m1_loss_ce_4: 0.4489  m1_loss_mask_4: 0.1566  m1_loss_dice_4: 1.114  m1_loss_ce_5: 0.4833  m1_loss_mask_5: 0.1546  m1_loss_dice_5: 1.136  m1_loss_ce_6: 0.45  m1_loss_mask_6: 0.1542  m1_loss_dice_6: 1.112  m1_loss_ce_7: 0.4587  m1_loss_mask_7: 0.1552  m1_loss_dice_7: 1.113  m1_loss_ce_8: 0.4241  m1_loss_mask_8: 0.1542  m1_loss_dice_8: 1.113  m2_loss_ce: 0.4408  m2_loss_mask: 0.157  m2_loss_dice: 1.086  m2_loss_ce_0: 0.5937  m2_loss_mask_0: 0.1861  m2_loss_dice_0: 1.323  m2_loss_ce_1: 0.6704  m2_loss_mask_1: 0.1711  m2_loss_dice_1: 1.235  m2_loss_ce_2: 0.579  m2_loss_mask_2: 0.1602  m2_loss_dice_2: 1.203  m2_loss_ce_3: 0.5342  m2_loss_mask_3: 0.1577  m2_loss_dice_3: 1.105  m2_loss_ce_4: 0.4761  m2_loss_mask_4: 0.1557  m2_loss_dice_4: 1.139  m2_loss_ce_5: 0.4868  m2_loss_mask_5: 0.1553  m2_loss_dice_5: 1.154  m2_loss_ce_6: 0.4658  m2_loss_mask_6: 0.1563  m2_loss_dice_6: 1.09  m2_loss_ce_7: 0.4677  m2_loss_mask_7: 0.158  m2_loss_dice_7: 1.153  m2_loss_ce_8: 0.4581  m2_loss_mask_8: 0.1595  m2_loss_dice_8: 1.106  com_loss_ce: 1.763  com_loss_mask: 0.6926  com_loss_dice: 0.9708    time: 1.4057  last_time: 1.3770  data_time: 0.2347  last_data_time: 0.0486   lr: 0.0001  max_mem: 34667M
[09/08 22:07:40] d2.utils.events INFO:  eta: 0:22:33  iter: 39  total_loss: 41.32  m1_loss_ce: 0.4106  m1_loss_mask: 0.1659  m1_loss_dice: 1.218  m1_loss_ce_0: 0.5756  m1_loss_mask_0: 0.1899  m1_loss_dice_0: 1.41  m1_loss_ce_1: 0.6142  m1_loss_mask_1: 0.1796  m1_loss_dice_1: 1.302  m1_loss_ce_2: 0.5398  m1_loss_mask_2: 0.1689  m1_loss_dice_2: 1.246  m1_loss_ce_3: 0.4587  m1_loss_mask_3: 0.1654  m1_loss_dice_3: 1.21  m1_loss_ce_4: 0.423  m1_loss_mask_4: 0.1674  m1_loss_dice_4: 1.225  m1_loss_ce_5: 0.4372  m1_loss_mask_5: 0.1641  m1_loss_dice_5: 1.207  m1_loss_ce_6: 0.4032  m1_loss_mask_6: 0.1689  m1_loss_dice_6: 1.21  m1_loss_ce_7: 0.4089  m1_loss_mask_7: 0.1689  m1_loss_dice_7: 1.194  m1_loss_ce_8: 0.4236  m1_loss_mask_8: 0.1668  m1_loss_dice_8: 1.2  m2_loss_ce: 0.467  m2_loss_mask: 0.1579  m2_loss_dice: 1.202  m2_loss_ce_0: 0.5352  m2_loss_mask_0: 0.1854  m2_loss_dice_0: 1.36  m2_loss_ce_1: 0.6205  m2_loss_mask_1: 0.1784  m2_loss_dice_1: 1.323  m2_loss_ce_2: 0.5636  m2_loss_mask_2: 0.1642  m2_loss_dice_2: 1.27  m2_loss_ce_3: 0.5094  m2_loss_mask_3: 0.1582  m2_loss_dice_3: 1.231  m2_loss_ce_4: 0.4756  m2_loss_mask_4: 0.1583  m2_loss_dice_4: 1.21  m2_loss_ce_5: 0.4541  m2_loss_mask_5: 0.1564  m2_loss_dice_5: 1.197  m2_loss_ce_6: 0.4867  m2_loss_mask_6: 0.158  m2_loss_dice_6: 1.183  m2_loss_ce_7: 0.4684  m2_loss_mask_7: 0.1556  m2_loss_dice_7: 1.205  m2_loss_ce_8: 0.4659  m2_loss_mask_8: 0.1581  m2_loss_dice_8: 1.191  com_loss_ce: 1.748  com_loss_mask: 0.6926  com_loss_dice: 0.9742    time: 1.4127  last_time: 1.4358  data_time: 0.0459  last_data_time: 0.0440   lr: 0.0001  max_mem: 34667M
[09/08 22:08:09] d2.utils.events INFO:  eta: 0:22:06  iter: 59  total_loss: 42.54  m1_loss_ce: 0.4856  m1_loss_mask: 0.1533  m1_loss_dice: 1.159  m1_loss_ce_0: 0.5917  m1_loss_mask_0: 0.1821  m1_loss_dice_0: 1.394  m1_loss_ce_1: 0.6253  m1_loss_mask_1: 0.1686  m1_loss_dice_1: 1.347  m1_loss_ce_2: 0.5703  m1_loss_mask_2: 0.157  m1_loss_dice_2: 1.296  m1_loss_ce_3: 0.5136  m1_loss_mask_3: 0.1554  m1_loss_dice_3: 1.198  m1_loss_ce_4: 0.4858  m1_loss_mask_4: 0.156  m1_loss_dice_4: 1.237  m1_loss_ce_5: 0.4469  m1_loss_mask_5: 0.1543  m1_loss_dice_5: 1.224  m1_loss_ce_6: 0.4468  m1_loss_mask_6: 0.1549  m1_loss_dice_6: 1.198  m1_loss_ce_7: 0.4421  m1_loss_mask_7: 0.1563  m1_loss_dice_7: 1.209  m1_loss_ce_8: 0.4323  m1_loss_mask_8: 0.1566  m1_loss_dice_8: 1.206  m2_loss_ce: 0.4604  m2_loss_mask: 0.1547  m2_loss_dice: 1.17  m2_loss_ce_0: 0.591  m2_loss_mask_0: 0.1744  m2_loss_dice_0: 1.425  m2_loss_ce_1: 0.6881  m2_loss_mask_1: 0.1635  m2_loss_dice_1: 1.352  m2_loss_ce_2: 0.5996  m2_loss_mask_2: 0.1569  m2_loss_dice_2: 1.292  m2_loss_ce_3: 0.547  m2_loss_mask_3: 0.155  m2_loss_dice_3: 1.252  m2_loss_ce_4: 0.506  m2_loss_mask_4: 0.156  m2_loss_dice_4: 1.232  m2_loss_ce_5: 0.5099  m2_loss_mask_5: 0.1533  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.5053  m2_loss_mask_6: 0.1535  m2_loss_dice_6: 1.182  m2_loss_ce_7: 0.4694  m2_loss_mask_7: 0.154  m2_loss_dice_7: 1.204  m2_loss_ce_8: 0.4677  m2_loss_mask_8: 0.155  m2_loss_dice_8: 1.198  com_loss_ce: 1.79  com_loss_mask: 0.6925  com_loss_dice: 0.9744    time: 1.4175  last_time: 1.3674  data_time: 0.0488  last_data_time: 0.0381   lr: 0.0001  max_mem: 34667M
[09/08 22:08:37] d2.utils.events INFO:  eta: 0:21:40  iter: 79  total_loss: 40.06  m1_loss_ce: 0.4194  m1_loss_mask: 0.155  m1_loss_dice: 1.149  m1_loss_ce_0: 0.5525  m1_loss_mask_0: 0.1854  m1_loss_dice_0: 1.294  m1_loss_ce_1: 0.5926  m1_loss_mask_1: 0.1673  m1_loss_dice_1: 1.264  m1_loss_ce_2: 0.5408  m1_loss_mask_2: 0.1608  m1_loss_dice_2: 1.187  m1_loss_ce_3: 0.4923  m1_loss_mask_3: 0.1595  m1_loss_dice_3: 1.133  m1_loss_ce_4: 0.4672  m1_loss_mask_4: 0.1583  m1_loss_dice_4: 1.121  m1_loss_ce_5: 0.4643  m1_loss_mask_5: 0.1565  m1_loss_dice_5: 1.126  m1_loss_ce_6: 0.4558  m1_loss_mask_6: 0.1544  m1_loss_dice_6: 1.136  m1_loss_ce_7: 0.4522  m1_loss_mask_7: 0.1555  m1_loss_dice_7: 1.121  m1_loss_ce_8: 0.4444  m1_loss_mask_8: 0.1569  m1_loss_dice_8: 1.142  m2_loss_ce: 0.4547  m2_loss_mask: 0.1563  m2_loss_dice: 1.133  m2_loss_ce_0: 0.559  m2_loss_mask_0: 0.1807  m2_loss_dice_0: 1.347  m2_loss_ce_1: 0.6333  m2_loss_mask_1: 0.1702  m2_loss_dice_1: 1.256  m2_loss_ce_2: 0.5762  m2_loss_mask_2: 0.1652  m2_loss_dice_2: 1.237  m2_loss_ce_3: 0.5524  m2_loss_mask_3: 0.1602  m2_loss_dice_3: 1.191  m2_loss_ce_4: 0.507  m2_loss_mask_4: 0.1549  m2_loss_dice_4: 1.122  m2_loss_ce_5: 0.474  m2_loss_mask_5: 0.1529  m2_loss_dice_5: 1.161  m2_loss_ce_6: 0.4346  m2_loss_mask_6: 0.1558  m2_loss_dice_6: 1.132  m2_loss_ce_7: 0.4699  m2_loss_mask_7: 0.1546  m2_loss_dice_7: 1.14  m2_loss_ce_8: 0.4616  m2_loss_mask_8: 0.1561  m2_loss_dice_8: 1.124  com_loss_ce: 1.761  com_loss_mask: 0.6926  com_loss_dice: 0.9718    time: 1.4186  last_time: 1.4601  data_time: 0.0491  last_data_time: 0.0355   lr: 0.0001  max_mem: 34813M
[09/08 22:09:06] d2.utils.events INFO:  eta: 0:21:20  iter: 99  total_loss: 41.08  m1_loss_ce: 0.4097  m1_loss_mask: 0.1558  m1_loss_dice: 1.176  m1_loss_ce_0: 0.5446  m1_loss_mask_0: 0.1858  m1_loss_dice_0: 1.359  m1_loss_ce_1: 0.5729  m1_loss_mask_1: 0.1709  m1_loss_dice_1: 1.28  m1_loss_ce_2: 0.5376  m1_loss_mask_2: 0.1588  m1_loss_dice_2: 1.212  m1_loss_ce_3: 0.4793  m1_loss_mask_3: 0.1561  m1_loss_dice_3: 1.197  m1_loss_ce_4: 0.4655  m1_loss_mask_4: 0.1615  m1_loss_dice_4: 1.196  m1_loss_ce_5: 0.456  m1_loss_mask_5: 0.1564  m1_loss_dice_5: 1.18  m1_loss_ce_6: 0.4348  m1_loss_mask_6: 0.157  m1_loss_dice_6: 1.143  m1_loss_ce_7: 0.426  m1_loss_mask_7: 0.1557  m1_loss_dice_7: 1.152  m1_loss_ce_8: 0.4219  m1_loss_mask_8: 0.1561  m1_loss_dice_8: 1.178  m2_loss_ce: 0.4394  m2_loss_mask: 0.1576  m2_loss_dice: 1.124  m2_loss_ce_0: 0.5591  m2_loss_mask_0: 0.181  m2_loss_dice_0: 1.354  m2_loss_ce_1: 0.6186  m2_loss_mask_1: 0.167  m2_loss_dice_1: 1.282  m2_loss_ce_2: 0.5705  m2_loss_mask_2: 0.1623  m2_loss_dice_2: 1.248  m2_loss_ce_3: 0.5321  m2_loss_mask_3: 0.1556  m2_loss_dice_3: 1.181  m2_loss_ce_4: 0.4581  m2_loss_mask_4: 0.156  m2_loss_dice_4: 1.172  m2_loss_ce_5: 0.4753  m2_loss_mask_5: 0.1539  m2_loss_dice_5: 1.174  m2_loss_ce_6: 0.4529  m2_loss_mask_6: 0.1529  m2_loss_dice_6: 1.134  m2_loss_ce_7: 0.4611  m2_loss_mask_7: 0.1562  m2_loss_dice_7: 1.172  m2_loss_ce_8: 0.4562  m2_loss_mask_8: 0.1574  m2_loss_dice_8: 1.143  com_loss_ce: 1.768  com_loss_mask: 0.6926  com_loss_dice: 0.9728    time: 1.4235  last_time: 1.3936  data_time: 0.0482  last_data_time: 0.0499   lr: 0.0001  max_mem: 34813M
[09/08 22:09:35] d2.utils.events INFO:  eta: 0:20:50  iter: 119  total_loss: 42.13  m1_loss_ce: 0.4276  m1_loss_mask: 0.155  m1_loss_dice: 1.197  m1_loss_ce_0: 0.536  m1_loss_mask_0: 0.1785  m1_loss_dice_0: 1.405  m1_loss_ce_1: 0.6304  m1_loss_mask_1: 0.1631  m1_loss_dice_1: 1.354  m1_loss_ce_2: 0.548  m1_loss_mask_2: 0.1568  m1_loss_dice_2: 1.269  m1_loss_ce_3: 0.4887  m1_loss_mask_3: 0.1573  m1_loss_dice_3: 1.198  m1_loss_ce_4: 0.4533  m1_loss_mask_4: 0.1558  m1_loss_dice_4: 1.244  m1_loss_ce_5: 0.447  m1_loss_mask_5: 0.1558  m1_loss_dice_5: 1.233  m1_loss_ce_6: 0.4376  m1_loss_mask_6: 0.1507  m1_loss_dice_6: 1.199  m1_loss_ce_7: 0.4283  m1_loss_mask_7: 0.1551  m1_loss_dice_7: 1.224  m1_loss_ce_8: 0.4302  m1_loss_mask_8: 0.1552  m1_loss_dice_8: 1.193  m2_loss_ce: 0.4613  m2_loss_mask: 0.1467  m2_loss_dice: 1.157  m2_loss_ce_0: 0.5371  m2_loss_mask_0: 0.1664  m2_loss_dice_0: 1.436  m2_loss_ce_1: 0.6045  m2_loss_mask_1: 0.1563  m2_loss_dice_1: 1.358  m2_loss_ce_2: 0.5682  m2_loss_mask_2: 0.1532  m2_loss_dice_2: 1.293  m2_loss_ce_3: 0.4959  m2_loss_mask_3: 0.1507  m2_loss_dice_3: 1.252  m2_loss_ce_4: 0.4594  m2_loss_mask_4: 0.1516  m2_loss_dice_4: 1.219  m2_loss_ce_5: 0.4831  m2_loss_mask_5: 0.1494  m2_loss_dice_5: 1.203  m2_loss_ce_6: 0.4589  m2_loss_mask_6: 0.1505  m2_loss_dice_6: 1.194  m2_loss_ce_7: 0.469  m2_loss_mask_7: 0.15  m2_loss_dice_7: 1.199  m2_loss_ce_8: 0.4848  m2_loss_mask_8: 0.1481  m2_loss_dice_8: 1.193  com_loss_ce: 1.753  com_loss_mask: 0.6926  com_loss_dice: 0.9744    time: 1.4224  last_time: 1.3811  data_time: 0.0553  last_data_time: 0.0413   lr: 0.0001  max_mem: 34813M
[09/08 22:10:04] d2.utils.events INFO:  eta: 0:20:22  iter: 139  total_loss: 41.53  m1_loss_ce: 0.4058  m1_loss_mask: 0.161  m1_loss_dice: 1.17  m1_loss_ce_0: 0.5721  m1_loss_mask_0: 0.1826  m1_loss_dice_0: 1.358  m1_loss_ce_1: 0.6036  m1_loss_mask_1: 0.1718  m1_loss_dice_1: 1.314  m1_loss_ce_2: 0.5592  m1_loss_mask_2: 0.1655  m1_loss_dice_2: 1.234  m1_loss_ce_3: 0.4865  m1_loss_mask_3: 0.1612  m1_loss_dice_3: 1.224  m1_loss_ce_4: 0.4566  m1_loss_mask_4: 0.1594  m1_loss_dice_4: 1.209  m1_loss_ce_5: 0.4648  m1_loss_mask_5: 0.1655  m1_loss_dice_5: 1.189  m1_loss_ce_6: 0.4185  m1_loss_mask_6: 0.1591  m1_loss_dice_6: 1.205  m1_loss_ce_7: 0.4495  m1_loss_mask_7: 0.1626  m1_loss_dice_7: 1.174  m1_loss_ce_8: 0.4469  m1_loss_mask_8: 0.164  m1_loss_dice_8: 1.181  m2_loss_ce: 0.4894  m2_loss_mask: 0.1594  m2_loss_dice: 1.151  m2_loss_ce_0: 0.6212  m2_loss_mask_0: 0.1784  m2_loss_dice_0: 1.336  m2_loss_ce_1: 0.7181  m2_loss_mask_1: 0.1691  m2_loss_dice_1: 1.258  m2_loss_ce_2: 0.6262  m2_loss_mask_2: 0.16  m2_loss_dice_2: 1.261  m2_loss_ce_3: 0.5616  m2_loss_mask_3: 0.1582  m2_loss_dice_3: 1.183  m2_loss_ce_4: 0.5118  m2_loss_mask_4: 0.157  m2_loss_dice_4: 1.165  m2_loss_ce_5: 0.5039  m2_loss_mask_5: 0.1586  m2_loss_dice_5: 1.146  m2_loss_ce_6: 0.4786  m2_loss_mask_6: 0.1613  m2_loss_dice_6: 1.169  m2_loss_ce_7: 0.4534  m2_loss_mask_7: 0.1606  m2_loss_dice_7: 1.181  m2_loss_ce_8: 0.4949  m2_loss_mask_8: 0.1607  m2_loss_dice_8: 1.154  com_loss_ce: 1.745  com_loss_mask: 0.6926  com_loss_dice: 0.9726    time: 1.4235  last_time: 1.4685  data_time: 0.0496  last_data_time: 0.0490   lr: 0.0001  max_mem: 34813M
[09/08 22:10:32] d2.utils.events INFO:  eta: 0:19:56  iter: 159  total_loss: 41.7  m1_loss_ce: 0.4544  m1_loss_mask: 0.155  m1_loss_dice: 1.211  m1_loss_ce_0: 0.5161  m1_loss_mask_0: 0.1775  m1_loss_dice_0: 1.397  m1_loss_ce_1: 0.5717  m1_loss_mask_1: 0.1658  m1_loss_dice_1: 1.365  m1_loss_ce_2: 0.5082  m1_loss_mask_2: 0.1608  m1_loss_dice_2: 1.271  m1_loss_ce_3: 0.5204  m1_loss_mask_3: 0.1595  m1_loss_dice_3: 1.232  m1_loss_ce_4: 0.491  m1_loss_mask_4: 0.1551  m1_loss_dice_4: 1.225  m1_loss_ce_5: 0.4312  m1_loss_mask_5: 0.155  m1_loss_dice_5: 1.222  m1_loss_ce_6: 0.4538  m1_loss_mask_6: 0.1544  m1_loss_dice_6: 1.229  m1_loss_ce_7: 0.436  m1_loss_mask_7: 0.1542  m1_loss_dice_7: 1.211  m1_loss_ce_8: 0.4367  m1_loss_mask_8: 0.1547  m1_loss_dice_8: 1.213  m2_loss_ce: 0.4693  m2_loss_mask: 0.1601  m2_loss_dice: 1.18  m2_loss_ce_0: 0.5766  m2_loss_mask_0: 0.1766  m2_loss_dice_0: 1.411  m2_loss_ce_1: 0.6592  m2_loss_mask_1: 0.1643  m2_loss_dice_1: 1.343  m2_loss_ce_2: 0.5511  m2_loss_mask_2: 0.1566  m2_loss_dice_2: 1.306  m2_loss_ce_3: 0.5325  m2_loss_mask_3: 0.16  m2_loss_dice_3: 1.227  m2_loss_ce_4: 0.4869  m2_loss_mask_4: 0.1559  m2_loss_dice_4: 1.21  m2_loss_ce_5: 0.4667  m2_loss_mask_5: 0.1536  m2_loss_dice_5: 1.175  m2_loss_ce_6: 0.4677  m2_loss_mask_6: 0.1572  m2_loss_dice_6: 1.211  m2_loss_ce_7: 0.4733  m2_loss_mask_7: 0.1582  m2_loss_dice_7: 1.187  m2_loss_ce_8: 0.4576  m2_loss_mask_8: 0.1585  m2_loss_dice_8: 1.206  com_loss_ce: 1.751  com_loss_mask: 0.6926  com_loss_dice: 0.9718    time: 1.4249  last_time: 1.4462  data_time: 0.0503  last_data_time: 0.0506   lr: 0.0001  max_mem: 34889M
[09/08 22:11:02] d2.utils.events INFO:  eta: 0:19:32  iter: 179  total_loss: 42.23  m1_loss_ce: 0.447  m1_loss_mask: 0.1592  m1_loss_dice: 1.238  m1_loss_ce_0: 0.5427  m1_loss_mask_0: 0.1809  m1_loss_dice_0: 1.452  m1_loss_ce_1: 0.6219  m1_loss_mask_1: 0.1658  m1_loss_dice_1: 1.392  m1_loss_ce_2: 0.5856  m1_loss_mask_2: 0.1523  m1_loss_dice_2: 1.301  m1_loss_ce_3: 0.4934  m1_loss_mask_3: 0.155  m1_loss_dice_3: 1.262  m1_loss_ce_4: 0.4422  m1_loss_mask_4: 0.1556  m1_loss_dice_4: 1.252  m1_loss_ce_5: 0.4384  m1_loss_mask_5: 0.1544  m1_loss_dice_5: 1.227  m1_loss_ce_6: 0.4196  m1_loss_mask_6: 0.1564  m1_loss_dice_6: 1.238  m1_loss_ce_7: 0.4147  m1_loss_mask_7: 0.1596  m1_loss_dice_7: 1.23  m1_loss_ce_8: 0.4153  m1_loss_mask_8: 0.1599  m1_loss_dice_8: 1.229  m2_loss_ce: 0.4649  m2_loss_mask: 0.1503  m2_loss_dice: 1.204  m2_loss_ce_0: 0.5574  m2_loss_mask_0: 0.1707  m2_loss_dice_0: 1.427  m2_loss_ce_1: 0.6574  m2_loss_mask_1: 0.1585  m2_loss_dice_1: 1.36  m2_loss_ce_2: 0.5827  m2_loss_mask_2: 0.147  m2_loss_dice_2: 1.304  m2_loss_ce_3: 0.5046  m2_loss_mask_3: 0.1492  m2_loss_dice_3: 1.262  m2_loss_ce_4: 0.4783  m2_loss_mask_4: 0.1496  m2_loss_dice_4: 1.23  m2_loss_ce_5: 0.4876  m2_loss_mask_5: 0.1476  m2_loss_dice_5: 1.23  m2_loss_ce_6: 0.4748  m2_loss_mask_6: 0.1487  m2_loss_dice_6: 1.206  m2_loss_ce_7: 0.4729  m2_loss_mask_7: 0.1502  m2_loss_dice_7: 1.233  m2_loss_ce_8: 0.4231  m2_loss_mask_8: 0.1497  m2_loss_dice_8: 1.226  com_loss_ce: 1.764  com_loss_mask: 0.6926  com_loss_dice: 0.9743    time: 1.4289  last_time: 1.4636  data_time: 0.0564  last_data_time: 0.0513   lr: 0.0001  max_mem: 35235M
[09/08 22:11:30] d2.utils.events INFO:  eta: 0:19:02  iter: 199  total_loss: 41.94  m1_loss_ce: 0.4818  m1_loss_mask: 0.1606  m1_loss_dice: 1.17  m1_loss_ce_0: 0.5706  m1_loss_mask_0: 0.18  m1_loss_dice_0: 1.395  m1_loss_ce_1: 0.6775  m1_loss_mask_1: 0.1675  m1_loss_dice_1: 1.293  m1_loss_ce_2: 0.5954  m1_loss_mask_2: 0.1624  m1_loss_dice_2: 1.222  m1_loss_ce_3: 0.4898  m1_loss_mask_3: 0.1598  m1_loss_dice_3: 1.163  m1_loss_ce_4: 0.4969  m1_loss_mask_4: 0.1569  m1_loss_dice_4: 1.171  m1_loss_ce_5: 0.4728  m1_loss_mask_5: 0.1574  m1_loss_dice_5: 1.192  m1_loss_ce_6: 0.4773  m1_loss_mask_6: 0.1551  m1_loss_dice_6: 1.117  m1_loss_ce_7: 0.4712  m1_loss_mask_7: 0.1617  m1_loss_dice_7: 1.127  m1_loss_ce_8: 0.459  m1_loss_mask_8: 0.1597  m1_loss_dice_8: 1.189  m2_loss_ce: 0.4984  m2_loss_mask: 0.154  m2_loss_dice: 1.15  m2_loss_ce_0: 0.6015  m2_loss_mask_0: 0.1806  m2_loss_dice_0: 1.34  m2_loss_ce_1: 0.6948  m2_loss_mask_1: 0.1606  m2_loss_dice_1: 1.274  m2_loss_ce_2: 0.5819  m2_loss_mask_2: 0.1558  m2_loss_dice_2: 1.225  m2_loss_ce_3: 0.551  m2_loss_mask_3: 0.157  m2_loss_dice_3: 1.169  m2_loss_ce_4: 0.5164  m2_loss_mask_4: 0.1591  m2_loss_dice_4: 1.169  m2_loss_ce_5: 0.5002  m2_loss_mask_5: 0.1531  m2_loss_dice_5: 1.173  m2_loss_ce_6: 0.5039  m2_loss_mask_6: 0.1587  m2_loss_dice_6: 1.147  m2_loss_ce_7: 0.521  m2_loss_mask_7: 0.1549  m2_loss_dice_7: 1.159  m2_loss_ce_8: 0.5045  m2_loss_mask_8: 0.1541  m2_loss_dice_8: 1.163  com_loss_ce: 1.764  com_loss_mask: 0.6926  com_loss_dice: 0.9734    time: 1.4280  last_time: 1.3911  data_time: 0.0517  last_data_time: 0.0450   lr: 0.0001  max_mem: 35309M
[09/08 22:11:58] d2.utils.events INFO:  eta: 0:18:30  iter: 219  total_loss: 42  m1_loss_ce: 0.4636  m1_loss_mask: 0.1548  m1_loss_dice: 1.203  m1_loss_ce_0: 0.552  m1_loss_mask_0: 0.1874  m1_loss_dice_0: 1.439  m1_loss_ce_1: 0.6198  m1_loss_mask_1: 0.1727  m1_loss_dice_1: 1.331  m1_loss_ce_2: 0.5623  m1_loss_mask_2: 0.1595  m1_loss_dice_2: 1.276  m1_loss_ce_3: 0.5035  m1_loss_mask_3: 0.1611  m1_loss_dice_3: 1.224  m1_loss_ce_4: 0.4651  m1_loss_mask_4: 0.1574  m1_loss_dice_4: 1.211  m1_loss_ce_5: 0.453  m1_loss_mask_5: 0.1574  m1_loss_dice_5: 1.213  m1_loss_ce_6: 0.4466  m1_loss_mask_6: 0.1534  m1_loss_dice_6: 1.184  m1_loss_ce_7: 0.4551  m1_loss_mask_7: 0.1552  m1_loss_dice_7: 1.209  m1_loss_ce_8: 0.4475  m1_loss_mask_8: 0.1567  m1_loss_dice_8: 1.212  m2_loss_ce: 0.4541  m2_loss_mask: 0.1541  m2_loss_dice: 1.201  m2_loss_ce_0: 0.586  m2_loss_mask_0: 0.1773  m2_loss_dice_0: 1.36  m2_loss_ce_1: 0.675  m2_loss_mask_1: 0.1643  m2_loss_dice_1: 1.331  m2_loss_ce_2: 0.5717  m2_loss_mask_2: 0.1571  m2_loss_dice_2: 1.269  m2_loss_ce_3: 0.5578  m2_loss_mask_3: 0.1562  m2_loss_dice_3: 1.238  m2_loss_ce_4: 0.5078  m2_loss_mask_4: 0.1538  m2_loss_dice_4: 1.21  m2_loss_ce_5: 0.4785  m2_loss_mask_5: 0.1528  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.4862  m2_loss_mask_6: 0.1538  m2_loss_dice_6: 1.193  m2_loss_ce_7: 0.4614  m2_loss_mask_7: 0.1527  m2_loss_dice_7: 1.208  m2_loss_ce_8: 0.4572  m2_loss_mask_8: 0.154  m2_loss_dice_8: 1.188  com_loss_ce: 1.756  com_loss_mask: 0.6926  com_loss_dice: 0.9718    time: 1.4259  last_time: 1.3350  data_time: 0.0493  last_data_time: 0.0408   lr: 0.0001  max_mem: 35309M
[09/08 22:12:28] d2.utils.events INFO:  eta: 0:18:04  iter: 239  total_loss: 40.37  m1_loss_ce: 0.4599  m1_loss_mask: 0.1567  m1_loss_dice: 1.146  m1_loss_ce_0: 0.5141  m1_loss_mask_0: 0.181  m1_loss_dice_0: 1.383  m1_loss_ce_1: 0.5742  m1_loss_mask_1: 0.1657  m1_loss_dice_1: 1.308  m1_loss_ce_2: 0.502  m1_loss_mask_2: 0.1599  m1_loss_dice_2: 1.266  m1_loss_ce_3: 0.4668  m1_loss_mask_3: 0.1605  m1_loss_dice_3: 1.161  m1_loss_ce_4: 0.444  m1_loss_mask_4: 0.1596  m1_loss_dice_4: 1.204  m1_loss_ce_5: 0.4887  m1_loss_mask_5: 0.1555  m1_loss_dice_5: 1.213  m1_loss_ce_6: 0.4323  m1_loss_mask_6: 0.1577  m1_loss_dice_6: 1.17  m1_loss_ce_7: 0.4622  m1_loss_mask_7: 0.156  m1_loss_dice_7: 1.2  m1_loss_ce_8: 0.4515  m1_loss_mask_8: 0.1565  m1_loss_dice_8: 1.202  m2_loss_ce: 0.4694  m2_loss_mask: 0.1573  m2_loss_dice: 1.144  m2_loss_ce_0: 0.5689  m2_loss_mask_0: 0.1769  m2_loss_dice_0: 1.383  m2_loss_ce_1: 0.6592  m2_loss_mask_1: 0.161  m2_loss_dice_1: 1.304  m2_loss_ce_2: 0.5448  m2_loss_mask_2: 0.1618  m2_loss_dice_2: 1.219  m2_loss_ce_3: 0.5077  m2_loss_mask_3: 0.1576  m2_loss_dice_3: 1.193  m2_loss_ce_4: 0.4974  m2_loss_mask_4: 0.1607  m2_loss_dice_4: 1.179  m2_loss_ce_5: 0.4615  m2_loss_mask_5: 0.1587  m2_loss_dice_5: 1.179  m2_loss_ce_6: 0.4636  m2_loss_mask_6: 0.1595  m2_loss_dice_6: 1.176  m2_loss_ce_7: 0.4298  m2_loss_mask_7: 0.16  m2_loss_dice_7: 1.156  m2_loss_ce_8: 0.4542  m2_loss_mask_8: 0.1579  m2_loss_dice_8: 1.165  com_loss_ce: 1.754  com_loss_mask: 0.6925  com_loss_dice: 0.9728    time: 1.4284  last_time: 1.3990  data_time: 0.0533  last_data_time: 0.0882   lr: 0.0001  max_mem: 36309M
[09/08 22:12:57] d2.utils.events INFO:  eta: 0:17:37  iter: 259  total_loss: 42.14  m1_loss_ce: 0.4754  m1_loss_mask: 0.1525  m1_loss_dice: 1.195  m1_loss_ce_0: 0.5398  m1_loss_mask_0: 0.1831  m1_loss_dice_0: 1.461  m1_loss_ce_1: 0.6159  m1_loss_mask_1: 0.1676  m1_loss_dice_1: 1.373  m1_loss_ce_2: 0.5255  m1_loss_mask_2: 0.1577  m1_loss_dice_2: 1.307  m1_loss_ce_3: 0.4748  m1_loss_mask_3: 0.159  m1_loss_dice_3: 1.215  m1_loss_ce_4: 0.4701  m1_loss_mask_4: 0.1588  m1_loss_dice_4: 1.206  m1_loss_ce_5: 0.4332  m1_loss_mask_5: 0.1555  m1_loss_dice_5: 1.254  m1_loss_ce_6: 0.4406  m1_loss_mask_6: 0.1528  m1_loss_dice_6: 1.224  m1_loss_ce_7: 0.4534  m1_loss_mask_7: 0.1549  m1_loss_dice_7: 1.191  m1_loss_ce_8: 0.4419  m1_loss_mask_8: 0.1533  m1_loss_dice_8: 1.197  m2_loss_ce: 0.4397  m2_loss_mask: 0.1586  m2_loss_dice: 1.213  m2_loss_ce_0: 0.5747  m2_loss_mask_0: 0.1785  m2_loss_dice_0: 1.413  m2_loss_ce_1: 0.6142  m2_loss_mask_1: 0.1651  m2_loss_dice_1: 1.377  m2_loss_ce_2: 0.5226  m2_loss_mask_2: 0.1587  m2_loss_dice_2: 1.315  m2_loss_ce_3: 0.5234  m2_loss_mask_3: 0.1548  m2_loss_dice_3: 1.232  m2_loss_ce_4: 0.4802  m2_loss_mask_4: 0.1552  m2_loss_dice_4: 1.224  m2_loss_ce_5: 0.4809  m2_loss_mask_5: 0.1565  m2_loss_dice_5: 1.193  m2_loss_ce_6: 0.4771  m2_loss_mask_6: 0.158  m2_loss_dice_6: 1.201  m2_loss_ce_7: 0.4698  m2_loss_mask_7: 0.1569  m2_loss_dice_7: 1.178  m2_loss_ce_8: 0.4467  m2_loss_mask_8: 0.1569  m2_loss_dice_8: 1.194  com_loss_ce: 1.746  com_loss_mask: 0.6926  com_loss_dice: 0.9724    time: 1.4297  last_time: 1.4326  data_time: 0.0574  last_data_time: 0.0539   lr: 0.0001  max_mem: 36309M
[09/08 22:13:26] d2.utils.events INFO:  eta: 0:17:09  iter: 279  total_loss: 43  m1_loss_ce: 0.4888  m1_loss_mask: 0.1619  m1_loss_dice: 1.165  m1_loss_ce_0: 0.6012  m1_loss_mask_0: 0.1813  m1_loss_dice_0: 1.35  m1_loss_ce_1: 0.6657  m1_loss_mask_1: 0.1721  m1_loss_dice_1: 1.315  m1_loss_ce_2: 0.6004  m1_loss_mask_2: 0.1656  m1_loss_dice_2: 1.253  m1_loss_ce_3: 0.5408  m1_loss_mask_3: 0.1656  m1_loss_dice_3: 1.177  m1_loss_ce_4: 0.5247  m1_loss_mask_4: 0.161  m1_loss_dice_4: 1.213  m1_loss_ce_5: 0.4964  m1_loss_mask_5: 0.1617  m1_loss_dice_5: 1.209  m1_loss_ce_6: 0.5006  m1_loss_mask_6: 0.161  m1_loss_dice_6: 1.135  m1_loss_ce_7: 0.4846  m1_loss_mask_7: 0.1643  m1_loss_dice_7: 1.156  m1_loss_ce_8: 0.488  m1_loss_mask_8: 0.1634  m1_loss_dice_8: 1.161  m2_loss_ce: 0.5451  m2_loss_mask: 0.156  m2_loss_dice: 1.164  m2_loss_ce_0: 0.6376  m2_loss_mask_0: 0.1735  m2_loss_dice_0: 1.373  m2_loss_ce_1: 0.6916  m2_loss_mask_1: 0.163  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.5796  m2_loss_mask_2: 0.1581  m2_loss_dice_2: 1.263  m2_loss_ce_3: 0.5205  m2_loss_mask_3: 0.1573  m2_loss_dice_3: 1.218  m2_loss_ce_4: 0.5232  m2_loss_mask_4: 0.1569  m2_loss_dice_4: 1.217  m2_loss_ce_5: 0.5411  m2_loss_mask_5: 0.1564  m2_loss_dice_5: 1.179  m2_loss_ce_6: 0.5391  m2_loss_mask_6: 0.1559  m2_loss_dice_6: 1.163  m2_loss_ce_7: 0.4964  m2_loss_mask_7: 0.1546  m2_loss_dice_7: 1.176  m2_loss_ce_8: 0.4996  m2_loss_mask_8: 0.1551  m2_loss_dice_8: 1.138  com_loss_ce: 1.75  com_loss_mask: 0.6926  com_loss_dice: 0.9717    time: 1.4307  last_time: 1.3668  data_time: 0.0530  last_data_time: 0.0451   lr: 0.0001  max_mem: 36309M
[09/08 22:13:55] d2.utils.events INFO:  eta: 0:16:40  iter: 299  total_loss: 39.56  m1_loss_ce: 0.4748  m1_loss_mask: 0.1665  m1_loss_dice: 1.078  m1_loss_ce_0: 0.5516  m1_loss_mask_0: 0.1893  m1_loss_dice_0: 1.231  m1_loss_ce_1: 0.6051  m1_loss_mask_1: 0.1751  m1_loss_dice_1: 1.218  m1_loss_ce_2: 0.5337  m1_loss_mask_2: 0.1724  m1_loss_dice_2: 1.162  m1_loss_ce_3: 0.4893  m1_loss_mask_3: 0.1674  m1_loss_dice_3: 1.102  m1_loss_ce_4: 0.4512  m1_loss_mask_4: 0.1708  m1_loss_dice_4: 1.143  m1_loss_ce_5: 0.4514  m1_loss_mask_5: 0.169  m1_loss_dice_5: 1.122  m1_loss_ce_6: 0.4521  m1_loss_mask_6: 0.1673  m1_loss_dice_6: 1.13  m1_loss_ce_7: 0.4536  m1_loss_mask_7: 0.1687  m1_loss_dice_7: 1.095  m1_loss_ce_8: 0.4112  m1_loss_mask_8: 0.1687  m1_loss_dice_8: 1.11  m2_loss_ce: 0.4507  m2_loss_mask: 0.1592  m2_loss_dice: 1.151  m2_loss_ce_0: 0.5966  m2_loss_mask_0: 0.186  m2_loss_dice_0: 1.292  m2_loss_ce_1: 0.6049  m2_loss_mask_1: 0.1738  m2_loss_dice_1: 1.239  m2_loss_ce_2: 0.5817  m2_loss_mask_2: 0.169  m2_loss_dice_2: 1.164  m2_loss_ce_3: 0.5207  m2_loss_mask_3: 0.1668  m2_loss_dice_3: 1.152  m2_loss_ce_4: 0.478  m2_loss_mask_4: 0.1641  m2_loss_dice_4: 1.13  m2_loss_ce_5: 0.453  m2_loss_mask_5: 0.1599  m2_loss_dice_5: 1.147  m2_loss_ce_6: 0.4771  m2_loss_mask_6: 0.1621  m2_loss_dice_6: 1.091  m2_loss_ce_7: 0.4448  m2_loss_mask_7: 0.1596  m2_loss_dice_7: 1.092  m2_loss_ce_8: 0.4743  m2_loss_mask_8: 0.1616  m2_loss_dice_8: 1.082  com_loss_ce: 1.744  com_loss_mask: 0.6926  com_loss_dice: 0.972    time: 1.4311  last_time: 1.3808  data_time: 0.0531  last_data_time: 0.0606   lr: 0.0001  max_mem: 36309M
[09/08 22:14:24] d2.utils.events INFO:  eta: 0:16:11  iter: 319  total_loss: 41.15  m1_loss_ce: 0.4429  m1_loss_mask: 0.1596  m1_loss_dice: 1.169  m1_loss_ce_0: 0.553  m1_loss_mask_0: 0.1769  m1_loss_dice_0: 1.368  m1_loss_ce_1: 0.6058  m1_loss_mask_1: 0.1669  m1_loss_dice_1: 1.303  m1_loss_ce_2: 0.5028  m1_loss_mask_2: 0.163  m1_loss_dice_2: 1.221  m1_loss_ce_3: 0.4509  m1_loss_mask_3: 0.1573  m1_loss_dice_3: 1.192  m1_loss_ce_4: 0.4442  m1_loss_mask_4: 0.1557  m1_loss_dice_4: 1.186  m1_loss_ce_5: 0.4761  m1_loss_mask_5: 0.1556  m1_loss_dice_5: 1.181  m1_loss_ce_6: 0.4394  m1_loss_mask_6: 0.1566  m1_loss_dice_6: 1.166  m1_loss_ce_7: 0.4276  m1_loss_mask_7: 0.1587  m1_loss_dice_7: 1.168  m1_loss_ce_8: 0.4447  m1_loss_mask_8: 0.1587  m1_loss_dice_8: 1.171  m2_loss_ce: 0.4573  m2_loss_mask: 0.1523  m2_loss_dice: 1.164  m2_loss_ce_0: 0.5916  m2_loss_mask_0: 0.1748  m2_loss_dice_0: 1.337  m2_loss_ce_1: 0.6306  m2_loss_mask_1: 0.1609  m2_loss_dice_1: 1.313  m2_loss_ce_2: 0.5633  m2_loss_mask_2: 0.1605  m2_loss_dice_2: 1.274  m2_loss_ce_3: 0.5363  m2_loss_mask_3: 0.15  m2_loss_dice_3: 1.182  m2_loss_ce_4: 0.5096  m2_loss_mask_4: 0.1501  m2_loss_dice_4: 1.194  m2_loss_ce_5: 0.4821  m2_loss_mask_5: 0.1514  m2_loss_dice_5: 1.176  m2_loss_ce_6: 0.4636  m2_loss_mask_6: 0.151  m2_loss_dice_6: 1.152  m2_loss_ce_7: 0.4675  m2_loss_mask_7: 0.1543  m2_loss_dice_7: 1.18  m2_loss_ce_8: 0.4743  m2_loss_mask_8: 0.1535  m2_loss_dice_8: 1.172  com_loss_ce: 1.752  com_loss_mask: 0.6926  com_loss_dice: 0.9731    time: 1.4321  last_time: 1.4591  data_time: 0.0575  last_data_time: 0.0636   lr: 0.0001  max_mem: 36309M
[09/08 22:14:53] d2.utils.events INFO:  eta: 0:15:43  iter: 339  total_loss: 42.55  m1_loss_ce: 0.4818  m1_loss_mask: 0.1564  m1_loss_dice: 1.24  m1_loss_ce_0: 0.5563  m1_loss_mask_0: 0.1777  m1_loss_dice_0: 1.43  m1_loss_ce_1: 0.6334  m1_loss_mask_1: 0.1712  m1_loss_dice_1: 1.334  m1_loss_ce_2: 0.578  m1_loss_mask_2: 0.1622  m1_loss_dice_2: 1.286  m1_loss_ce_3: 0.4946  m1_loss_mask_3: 0.1626  m1_loss_dice_3: 1.217  m1_loss_ce_4: 0.4858  m1_loss_mask_4: 0.1616  m1_loss_dice_4: 1.214  m1_loss_ce_5: 0.491  m1_loss_mask_5: 0.1575  m1_loss_dice_5: 1.215  m1_loss_ce_6: 0.4721  m1_loss_mask_6: 0.1579  m1_loss_dice_6: 1.249  m1_loss_ce_7: 0.4747  m1_loss_mask_7: 0.1593  m1_loss_dice_7: 1.188  m1_loss_ce_8: 0.4553  m1_loss_mask_8: 0.1583  m1_loss_dice_8: 1.258  m2_loss_ce: 0.5016  m2_loss_mask: 0.1612  m2_loss_dice: 1.225  m2_loss_ce_0: 0.584  m2_loss_mask_0: 0.1784  m2_loss_dice_0: 1.383  m2_loss_ce_1: 0.6577  m2_loss_mask_1: 0.1719  m2_loss_dice_1: 1.348  m2_loss_ce_2: 0.5985  m2_loss_mask_2: 0.1615  m2_loss_dice_2: 1.257  m2_loss_ce_3: 0.5501  m2_loss_mask_3: 0.1619  m2_loss_dice_3: 1.243  m2_loss_ce_4: 0.4977  m2_loss_mask_4: 0.1603  m2_loss_dice_4: 1.253  m2_loss_ce_5: 0.5097  m2_loss_mask_5: 0.1601  m2_loss_dice_5: 1.255  m2_loss_ce_6: 0.5147  m2_loss_mask_6: 0.1597  m2_loss_dice_6: 1.205  m2_loss_ce_7: 0.5186  m2_loss_mask_7: 0.1622  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.49  m2_loss_mask_8: 0.164  m2_loss_dice_8: 1.195  com_loss_ce: 1.766  com_loss_mask: 0.6925  com_loss_dice: 0.9736    time: 1.4330  last_time: 1.4778  data_time: 0.0610  last_data_time: 0.0661   lr: 0.0001  max_mem: 36309M
[09/08 22:15:22] d2.utils.events INFO:  eta: 0:15:14  iter: 359  total_loss: 41.06  m1_loss_ce: 0.4035  m1_loss_mask: 0.1625  m1_loss_dice: 1.209  m1_loss_ce_0: 0.4939  m1_loss_mask_0: 0.197  m1_loss_dice_0: 1.449  m1_loss_ce_1: 0.548  m1_loss_mask_1: 0.1881  m1_loss_dice_1: 1.337  m1_loss_ce_2: 0.4741  m1_loss_mask_2: 0.1742  m1_loss_dice_2: 1.285  m1_loss_ce_3: 0.4324  m1_loss_mask_3: 0.1768  m1_loss_dice_3: 1.272  m1_loss_ce_4: 0.419  m1_loss_mask_4: 0.1755  m1_loss_dice_4: 1.239  m1_loss_ce_5: 0.406  m1_loss_mask_5: 0.1641  m1_loss_dice_5: 1.225  m1_loss_ce_6: 0.4004  m1_loss_mask_6: 0.1697  m1_loss_dice_6: 1.251  m1_loss_ce_7: 0.3764  m1_loss_mask_7: 0.1686  m1_loss_dice_7: 1.241  m1_loss_ce_8: 0.3961  m1_loss_mask_8: 0.1688  m1_loss_dice_8: 1.238  m2_loss_ce: 0.4612  m2_loss_mask: 0.1642  m2_loss_dice: 1.177  m2_loss_ce_0: 0.5419  m2_loss_mask_0: 0.1853  m2_loss_dice_0: 1.348  m2_loss_ce_1: 0.6366  m2_loss_mask_1: 0.1728  m2_loss_dice_1: 1.31  m2_loss_ce_2: 0.5303  m2_loss_mask_2: 0.1706  m2_loss_dice_2: 1.268  m2_loss_ce_3: 0.4831  m2_loss_mask_3: 0.1692  m2_loss_dice_3: 1.255  m2_loss_ce_4: 0.4691  m2_loss_mask_4: 0.168  m2_loss_dice_4: 1.197  m2_loss_ce_5: 0.4427  m2_loss_mask_5: 0.165  m2_loss_dice_5: 1.204  m2_loss_ce_6: 0.4464  m2_loss_mask_6: 0.1671  m2_loss_dice_6: 1.217  m2_loss_ce_7: 0.4279  m2_loss_mask_7: 0.167  m2_loss_dice_7: 1.191  m2_loss_ce_8: 0.4495  m2_loss_mask_8: 0.1652  m2_loss_dice_8: 1.175  com_loss_ce: 1.743  com_loss_mask: 0.6926  com_loss_dice: 0.9737    time: 1.4338  last_time: 1.4811  data_time: 0.0552  last_data_time: 0.0581   lr: 0.0001  max_mem: 36309M
[09/08 22:15:51] d2.utils.events INFO:  eta: 0:14:48  iter: 379  total_loss: 42.46  m1_loss_ce: 0.4424  m1_loss_mask: 0.1645  m1_loss_dice: 1.256  m1_loss_ce_0: 0.5995  m1_loss_mask_0: 0.1927  m1_loss_dice_0: 1.469  m1_loss_ce_1: 0.6462  m1_loss_mask_1: 0.1782  m1_loss_dice_1: 1.381  m1_loss_ce_2: 0.5526  m1_loss_mask_2: 0.1642  m1_loss_dice_2: 1.244  m1_loss_ce_3: 0.5033  m1_loss_mask_3: 0.1646  m1_loss_dice_3: 1.276  m1_loss_ce_4: 0.4766  m1_loss_mask_4: 0.167  m1_loss_dice_4: 1.283  m1_loss_ce_5: 0.4935  m1_loss_mask_5: 0.1617  m1_loss_dice_5: 1.21  m1_loss_ce_6: 0.4786  m1_loss_mask_6: 0.1653  m1_loss_dice_6: 1.238  m1_loss_ce_7: 0.4359  m1_loss_mask_7: 0.1657  m1_loss_dice_7: 1.238  m1_loss_ce_8: 0.437  m1_loss_mask_8: 0.1646  m1_loss_dice_8: 1.228  m2_loss_ce: 0.5111  m2_loss_mask: 0.1602  m2_loss_dice: 1.223  m2_loss_ce_0: 0.6257  m2_loss_mask_0: 0.1902  m2_loss_dice_0: 1.447  m2_loss_ce_1: 0.6665  m2_loss_mask_1: 0.1793  m2_loss_dice_1: 1.381  m2_loss_ce_2: 0.5974  m2_loss_mask_2: 0.1701  m2_loss_dice_2: 1.332  m2_loss_ce_3: 0.5247  m2_loss_mask_3: 0.1624  m2_loss_dice_3: 1.27  m2_loss_ce_4: 0.5516  m2_loss_mask_4: 0.1617  m2_loss_dice_4: 1.274  m2_loss_ce_5: 0.514  m2_loss_mask_5: 0.1598  m2_loss_dice_5: 1.277  m2_loss_ce_6: 0.5248  m2_loss_mask_6: 0.1599  m2_loss_dice_6: 1.206  m2_loss_ce_7: 0.5005  m2_loss_mask_7: 0.1648  m2_loss_dice_7: 1.227  m2_loss_ce_8: 0.5156  m2_loss_mask_8: 0.1603  m2_loss_dice_8: 1.242  com_loss_ce: 1.757  com_loss_mask: 0.6926  com_loss_dice: 0.9735    time: 1.4354  last_time: 1.4704  data_time: 0.0518  last_data_time: 0.0531   lr: 0.0001  max_mem: 36309M
[09/08 22:16:21] d2.utils.events INFO:  eta: 0:14:20  iter: 399  total_loss: 41.01  m1_loss_ce: 0.4138  m1_loss_mask: 0.1497  m1_loss_dice: 1.139  m1_loss_ce_0: 0.5633  m1_loss_mask_0: 0.1798  m1_loss_dice_0: 1.363  m1_loss_ce_1: 0.6133  m1_loss_mask_1: 0.1602  m1_loss_dice_1: 1.241  m1_loss_ce_2: 0.5425  m1_loss_mask_2: 0.1505  m1_loss_dice_2: 1.207  m1_loss_ce_3: 0.5116  m1_loss_mask_3: 0.153  m1_loss_dice_3: 1.164  m1_loss_ce_4: 0.4587  m1_loss_mask_4: 0.1493  m1_loss_dice_4: 1.169  m1_loss_ce_5: 0.4517  m1_loss_mask_5: 0.1453  m1_loss_dice_5: 1.156  m1_loss_ce_6: 0.4398  m1_loss_mask_6: 0.1456  m1_loss_dice_6: 1.159  m1_loss_ce_7: 0.4298  m1_loss_mask_7: 0.1476  m1_loss_dice_7: 1.17  m1_loss_ce_8: 0.3986  m1_loss_mask_8: 0.1481  m1_loss_dice_8: 1.152  m2_loss_ce: 0.4627  m2_loss_mask: 0.1558  m2_loss_dice: 1.115  m2_loss_ce_0: 0.5581  m2_loss_mask_0: 0.1737  m2_loss_dice_0: 1.375  m2_loss_ce_1: 0.641  m2_loss_mask_1: 0.1656  m2_loss_dice_1: 1.288  m2_loss_ce_2: 0.5811  m2_loss_mask_2: 0.1588  m2_loss_dice_2: 1.275  m2_loss_ce_3: 0.5164  m2_loss_mask_3: 0.1578  m2_loss_dice_3: 1.176  m2_loss_ce_4: 0.4787  m2_loss_mask_4: 0.1542  m2_loss_dice_4: 1.179  m2_loss_ce_5: 0.4847  m2_loss_mask_5: 0.1552  m2_loss_dice_5: 1.161  m2_loss_ce_6: 0.4902  m2_loss_mask_6: 0.1568  m2_loss_dice_6: 1.165  m2_loss_ce_7: 0.448  m2_loss_mask_7: 0.1607  m2_loss_dice_7: 1.149  m2_loss_ce_8: 0.4587  m2_loss_mask_8: 0.1572  m2_loss_dice_8: 1.141  com_loss_ce: 1.733  com_loss_mask: 0.6926  com_loss_dice: 0.9725    time: 1.4373  last_time: 1.5489  data_time: 0.0652  last_data_time: 0.1095   lr: 0.0001  max_mem: 36309M
[09/08 22:16:49] d2.utils.events INFO:  eta: 0:13:50  iter: 419  total_loss: 41.64  m1_loss_ce: 0.4362  m1_loss_mask: 0.1588  m1_loss_dice: 1.197  m1_loss_ce_0: 0.5715  m1_loss_mask_0: 0.1749  m1_loss_dice_0: 1.378  m1_loss_ce_1: 0.6196  m1_loss_mask_1: 0.1641  m1_loss_dice_1: 1.311  m1_loss_ce_2: 0.5266  m1_loss_mask_2: 0.1554  m1_loss_dice_2: 1.263  m1_loss_ce_3: 0.4658  m1_loss_mask_3: 0.1564  m1_loss_dice_3: 1.204  m1_loss_ce_4: 0.4106  m1_loss_mask_4: 0.1576  m1_loss_dice_4: 1.245  m1_loss_ce_5: 0.4031  m1_loss_mask_5: 0.1549  m1_loss_dice_5: 1.239  m1_loss_ce_6: 0.4298  m1_loss_mask_6: 0.1577  m1_loss_dice_6: 1.229  m1_loss_ce_7: 0.4108  m1_loss_mask_7: 0.1547  m1_loss_dice_7: 1.173  m1_loss_ce_8: 0.3863  m1_loss_mask_8: 0.1574  m1_loss_dice_8: 1.181  m2_loss_ce: 0.4621  m2_loss_mask: 0.1599  m2_loss_dice: 1.186  m2_loss_ce_0: 0.5848  m2_loss_mask_0: 0.1808  m2_loss_dice_0: 1.374  m2_loss_ce_1: 0.6715  m2_loss_mask_1: 0.1683  m2_loss_dice_1: 1.32  m2_loss_ce_2: 0.5949  m2_loss_mask_2: 0.1586  m2_loss_dice_2: 1.301  m2_loss_ce_3: 0.5122  m2_loss_mask_3: 0.1574  m2_loss_dice_3: 1.218  m2_loss_ce_4: 0.4841  m2_loss_mask_4: 0.1562  m2_loss_dice_4: 1.246  m2_loss_ce_5: 0.4973  m2_loss_mask_5: 0.1547  m2_loss_dice_5: 1.2  m2_loss_ce_6: 0.4753  m2_loss_mask_6: 0.1566  m2_loss_dice_6: 1.191  m2_loss_ce_7: 0.4617  m2_loss_mask_7: 0.1576  m2_loss_dice_7: 1.226  m2_loss_ce_8: 0.4741  m2_loss_mask_8: 0.1586  m2_loss_dice_8: 1.204  com_loss_ce: 1.766  com_loss_mask: 0.6926  com_loss_dice: 0.9723    time: 1.4363  last_time: 1.3604  data_time: 0.0488  last_data_time: 0.0438   lr: 0.0001  max_mem: 36309M
[09/08 22:17:18] d2.utils.events INFO:  eta: 0:13:23  iter: 439  total_loss: 41.2  m1_loss_ce: 0.491  m1_loss_mask: 0.1541  m1_loss_dice: 1.184  m1_loss_ce_0: 0.5493  m1_loss_mask_0: 0.1789  m1_loss_dice_0: 1.319  m1_loss_ce_1: 0.6497  m1_loss_mask_1: 0.1674  m1_loss_dice_1: 1.227  m1_loss_ce_2: 0.5761  m1_loss_mask_2: 0.1647  m1_loss_dice_2: 1.227  m1_loss_ce_3: 0.5193  m1_loss_mask_3: 0.1609  m1_loss_dice_3: 1.154  m1_loss_ce_4: 0.4862  m1_loss_mask_4: 0.1583  m1_loss_dice_4: 1.191  m1_loss_ce_5: 0.4788  m1_loss_mask_5: 0.1553  m1_loss_dice_5: 1.166  m1_loss_ce_6: 0.4634  m1_loss_mask_6: 0.1562  m1_loss_dice_6: 1.128  m1_loss_ce_7: 0.4799  m1_loss_mask_7: 0.1569  m1_loss_dice_7: 1.137  m1_loss_ce_8: 0.4772  m1_loss_mask_8: 0.1536  m1_loss_dice_8: 1.13  m2_loss_ce: 0.5299  m2_loss_mask: 0.158  m2_loss_dice: 1.15  m2_loss_ce_0: 0.614  m2_loss_mask_0: 0.1788  m2_loss_dice_0: 1.358  m2_loss_ce_1: 0.6639  m2_loss_mask_1: 0.1737  m2_loss_dice_1: 1.304  m2_loss_ce_2: 0.6365  m2_loss_mask_2: 0.1611  m2_loss_dice_2: 1.266  m2_loss_ce_3: 0.5698  m2_loss_mask_3: 0.1544  m2_loss_dice_3: 1.17  m2_loss_ce_4: 0.5267  m2_loss_mask_4: 0.155  m2_loss_dice_4: 1.197  m2_loss_ce_5: 0.5192  m2_loss_mask_5: 0.1553  m2_loss_dice_5: 1.193  m2_loss_ce_6: 0.542  m2_loss_mask_6: 0.158  m2_loss_dice_6: 1.168  m2_loss_ce_7: 0.5459  m2_loss_mask_7: 0.1559  m2_loss_dice_7: 1.172  m2_loss_ce_8: 0.5399  m2_loss_mask_8: 0.1545  m2_loss_dice_8: 1.138  com_loss_ce: 1.752  com_loss_mask: 0.6926  com_loss_dice: 0.9723    time: 1.4372  last_time: 1.4689  data_time: 0.0609  last_data_time: 0.0346   lr: 0.0001  max_mem: 36309M
[09/08 22:17:48] d2.utils.events INFO:  eta: 0:12:54  iter: 459  total_loss: 42.36  m1_loss_ce: 0.4272  m1_loss_mask: 0.1499  m1_loss_dice: 1.217  m1_loss_ce_0: 0.5373  m1_loss_mask_0: 0.1732  m1_loss_dice_0: 1.448  m1_loss_ce_1: 0.5795  m1_loss_mask_1: 0.1649  m1_loss_dice_1: 1.347  m1_loss_ce_2: 0.5167  m1_loss_mask_2: 0.1585  m1_loss_dice_2: 1.311  m1_loss_ce_3: 0.4886  m1_loss_mask_3: 0.155  m1_loss_dice_3: 1.258  m1_loss_ce_4: 0.4548  m1_loss_mask_4: 0.1528  m1_loss_dice_4: 1.227  m1_loss_ce_5: 0.4445  m1_loss_mask_5: 0.1527  m1_loss_dice_5: 1.239  m1_loss_ce_6: 0.4156  m1_loss_mask_6: 0.1498  m1_loss_dice_6: 1.24  m1_loss_ce_7: 0.4272  m1_loss_mask_7: 0.1491  m1_loss_dice_7: 1.203  m1_loss_ce_8: 0.418  m1_loss_mask_8: 0.1483  m1_loss_dice_8: 1.207  m2_loss_ce: 0.424  m2_loss_mask: 0.1477  m2_loss_dice: 1.231  m2_loss_ce_0: 0.6196  m2_loss_mask_0: 0.1757  m2_loss_dice_0: 1.439  m2_loss_ce_1: 0.6669  m2_loss_mask_1: 0.1605  m2_loss_dice_1: 1.337  m2_loss_ce_2: 0.5365  m2_loss_mask_2: 0.1529  m2_loss_dice_2: 1.316  m2_loss_ce_3: 0.5323  m2_loss_mask_3: 0.1477  m2_loss_dice_3: 1.268  m2_loss_ce_4: 0.5295  m2_loss_mask_4: 0.1476  m2_loss_dice_4: 1.207  m2_loss_ce_5: 0.4578  m2_loss_mask_5: 0.1482  m2_loss_dice_5: 1.222  m2_loss_ce_6: 0.4739  m2_loss_mask_6: 0.147  m2_loss_dice_6: 1.169  m2_loss_ce_7: 0.4282  m2_loss_mask_7: 0.149  m2_loss_dice_7: 1.226  m2_loss_ce_8: 0.4488  m2_loss_mask_8: 0.1487  m2_loss_dice_8: 1.177  com_loss_ce: 1.75  com_loss_mask: 0.6925  com_loss_dice: 0.9747    time: 1.4385  last_time: 1.4624  data_time: 0.0550  last_data_time: 0.0415   lr: 0.0001  max_mem: 36309M
[09/08 22:18:17] d2.utils.events INFO:  eta: 0:12:26  iter: 479  total_loss: 37.92  m1_loss_ce: 0.4115  m1_loss_mask: 0.1485  m1_loss_dice: 1.069  m1_loss_ce_0: 0.5324  m1_loss_mask_0: 0.1707  m1_loss_dice_0: 1.28  m1_loss_ce_1: 0.5565  m1_loss_mask_1: 0.1606  m1_loss_dice_1: 1.235  m1_loss_ce_2: 0.5017  m1_loss_mask_2: 0.1529  m1_loss_dice_2: 1.158  m1_loss_ce_3: 0.4457  m1_loss_mask_3: 0.1489  m1_loss_dice_3: 1.053  m1_loss_ce_4: 0.4435  m1_loss_mask_4: 0.1514  m1_loss_dice_4: 1.09  m1_loss_ce_5: 0.4381  m1_loss_mask_5: 0.1514  m1_loss_dice_5: 1.104  m1_loss_ce_6: 0.4035  m1_loss_mask_6: 0.149  m1_loss_dice_6: 1.061  m1_loss_ce_7: 0.4048  m1_loss_mask_7: 0.151  m1_loss_dice_7: 1.102  m1_loss_ce_8: 0.4145  m1_loss_mask_8: 0.1499  m1_loss_dice_8: 1.077  m2_loss_ce: 0.4274  m2_loss_mask: 0.1527  m2_loss_dice: 1.07  m2_loss_ce_0: 0.5402  m2_loss_mask_0: 0.1767  m2_loss_dice_0: 1.266  m2_loss_ce_1: 0.5966  m2_loss_mask_1: 0.1663  m2_loss_dice_1: 1.183  m2_loss_ce_2: 0.5316  m2_loss_mask_2: 0.1538  m2_loss_dice_2: 1.165  m2_loss_ce_3: 0.5124  m2_loss_mask_3: 0.1541  m2_loss_dice_3: 1.099  m2_loss_ce_4: 0.4665  m2_loss_mask_4: 0.1486  m2_loss_dice_4: 1.098  m2_loss_ce_5: 0.4568  m2_loss_mask_5: 0.1506  m2_loss_dice_5: 1.105  m2_loss_ce_6: 0.4346  m2_loss_mask_6: 0.1515  m2_loss_dice_6: 1.075  m2_loss_ce_7: 0.4319  m2_loss_mask_7: 0.1488  m2_loss_dice_7: 1.061  m2_loss_ce_8: 0.4528  m2_loss_mask_8: 0.1518  m2_loss_dice_8: 1.087  com_loss_ce: 1.727  com_loss_mask: 0.6926  com_loss_dice: 0.9709    time: 1.4393  last_time: 1.4410  data_time: 0.0569  last_data_time: 0.0522   lr: 0.0001  max_mem: 36309M
[09/08 22:18:46] d2.utils.events INFO:  eta: 0:11:58  iter: 499  total_loss: 43.62  m1_loss_ce: 0.4915  m1_loss_mask: 0.1504  m1_loss_dice: 1.242  m1_loss_ce_0: 0.538  m1_loss_mask_0: 0.177  m1_loss_dice_0: 1.452  m1_loss_ce_1: 0.623  m1_loss_mask_1: 0.1664  m1_loss_dice_1: 1.362  m1_loss_ce_2: 0.5682  m1_loss_mask_2: 0.1557  m1_loss_dice_2: 1.328  m1_loss_ce_3: 0.4978  m1_loss_mask_3: 0.1587  m1_loss_dice_3: 1.312  m1_loss_ce_4: 0.4976  m1_loss_mask_4: 0.1532  m1_loss_dice_4: 1.3  m1_loss_ce_5: 0.4917  m1_loss_mask_5: 0.1539  m1_loss_dice_5: 1.275  m1_loss_ce_6: 0.4638  m1_loss_mask_6: 0.1528  m1_loss_dice_6: 1.26  m1_loss_ce_7: 0.4721  m1_loss_mask_7: 0.1507  m1_loss_dice_7: 1.227  m1_loss_ce_8: 0.4484  m1_loss_mask_8: 0.1526  m1_loss_dice_8: 1.212  m2_loss_ce: 0.4989  m2_loss_mask: 0.1556  m2_loss_dice: 1.225  m2_loss_ce_0: 0.608  m2_loss_mask_0: 0.1704  m2_loss_dice_0: 1.465  m2_loss_ce_1: 0.6706  m2_loss_mask_1: 0.162  m2_loss_dice_1: 1.415  m2_loss_ce_2: 0.6277  m2_loss_mask_2: 0.1555  m2_loss_dice_2: 1.329  m2_loss_ce_3: 0.5931  m2_loss_mask_3: 0.1555  m2_loss_dice_3: 1.289  m2_loss_ce_4: 0.5342  m2_loss_mask_4: 0.1569  m2_loss_dice_4: 1.31  m2_loss_ce_5: 0.5285  m2_loss_mask_5: 0.1509  m2_loss_dice_5: 1.228  m2_loss_ce_6: 0.509  m2_loss_mask_6: 0.1543  m2_loss_dice_6: 1.246  m2_loss_ce_7: 0.5199  m2_loss_mask_7: 0.1559  m2_loss_dice_7: 1.27  m2_loss_ce_8: 0.5177  m2_loss_mask_8: 0.1555  m2_loss_dice_8: 1.244  com_loss_ce: 1.765  com_loss_mask: 0.6926  com_loss_dice: 0.9748    time: 1.4398  last_time: 1.4050  data_time: 0.0497  last_data_time: 0.0406   lr: 0.0001  max_mem: 36309M
[09/08 22:19:15] d2.utils.events INFO:  eta: 0:11:29  iter: 519  total_loss: 39.61  m1_loss_ce: 0.4336  m1_loss_mask: 0.1425  m1_loss_dice: 1.16  m1_loss_ce_0: 0.537  m1_loss_mask_0: 0.1708  m1_loss_dice_0: 1.36  m1_loss_ce_1: 0.6072  m1_loss_mask_1: 0.1592  m1_loss_dice_1: 1.241  m1_loss_ce_2: 0.5315  m1_loss_mask_2: 0.1483  m1_loss_dice_2: 1.207  m1_loss_ce_3: 0.4875  m1_loss_mask_3: 0.1511  m1_loss_dice_3: 1.159  m1_loss_ce_4: 0.4496  m1_loss_mask_4: 0.1481  m1_loss_dice_4: 1.145  m1_loss_ce_5: 0.428  m1_loss_mask_5: 0.1456  m1_loss_dice_5: 1.14  m1_loss_ce_6: 0.4642  m1_loss_mask_6: 0.1437  m1_loss_dice_6: 1.146  m1_loss_ce_7: 0.4322  m1_loss_mask_7: 0.1411  m1_loss_dice_7: 1.121  m1_loss_ce_8: 0.4315  m1_loss_mask_8: 0.1427  m1_loss_dice_8: 1.117  m2_loss_ce: 0.4594  m2_loss_mask: 0.1502  m2_loss_dice: 1.134  m2_loss_ce_0: 0.5704  m2_loss_mask_0: 0.1657  m2_loss_dice_0: 1.321  m2_loss_ce_1: 0.6489  m2_loss_mask_1: 0.1614  m2_loss_dice_1: 1.289  m2_loss_ce_2: 0.5339  m2_loss_mask_2: 0.1507  m2_loss_dice_2: 1.191  m2_loss_ce_3: 0.5037  m2_loss_mask_3: 0.1525  m2_loss_dice_3: 1.173  m2_loss_ce_4: 0.4703  m2_loss_mask_4: 0.1505  m2_loss_dice_4: 1.145  m2_loss_ce_5: 0.4664  m2_loss_mask_5: 0.1492  m2_loss_dice_5: 1.176  m2_loss_ce_6: 0.477  m2_loss_mask_6: 0.1493  m2_loss_dice_6: 1.148  m2_loss_ce_7: 0.4844  m2_loss_mask_7: 0.1496  m2_loss_dice_7: 1.108  m2_loss_ce_8: 0.4889  m2_loss_mask_8: 0.1509  m2_loss_dice_8: 1.099  com_loss_ce: 1.751  com_loss_mask: 0.6926  com_loss_dice: 0.9726    time: 1.4398  last_time: 1.4339  data_time: 0.0536  last_data_time: 0.0577   lr: 0.0001  max_mem: 36309M
[09/08 22:19:44] d2.utils.events INFO:  eta: 0:10:59  iter: 539  total_loss: 41.3  m1_loss_ce: 0.4138  m1_loss_mask: 0.161  m1_loss_dice: 1.192  m1_loss_ce_0: 0.5103  m1_loss_mask_0: 0.1889  m1_loss_dice_0: 1.379  m1_loss_ce_1: 0.5665  m1_loss_mask_1: 0.1677  m1_loss_dice_1: 1.322  m1_loss_ce_2: 0.5296  m1_loss_mask_2: 0.1622  m1_loss_dice_2: 1.272  m1_loss_ce_3: 0.4986  m1_loss_mask_3: 0.1605  m1_loss_dice_3: 1.202  m1_loss_ce_4: 0.4444  m1_loss_mask_4: 0.1578  m1_loss_dice_4: 1.195  m1_loss_ce_5: 0.4295  m1_loss_mask_5: 0.1587  m1_loss_dice_5: 1.179  m1_loss_ce_6: 0.4355  m1_loss_mask_6: 0.1578  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.4215  m1_loss_mask_7: 0.1602  m1_loss_dice_7: 1.184  m1_loss_ce_8: 0.4321  m1_loss_mask_8: 0.1616  m1_loss_dice_8: 1.201  m2_loss_ce: 0.4444  m2_loss_mask: 0.1605  m2_loss_dice: 1.158  m2_loss_ce_0: 0.5408  m2_loss_mask_0: 0.1915  m2_loss_dice_0: 1.319  m2_loss_ce_1: 0.6228  m2_loss_mask_1: 0.1745  m2_loss_dice_1: 1.299  m2_loss_ce_2: 0.5577  m2_loss_mask_2: 0.1684  m2_loss_dice_2: 1.246  m2_loss_ce_3: 0.4804  m2_loss_mask_3: 0.1619  m2_loss_dice_3: 1.208  m2_loss_ce_4: 0.4815  m2_loss_mask_4: 0.1641  m2_loss_dice_4: 1.243  m2_loss_ce_5: 0.4448  m2_loss_mask_5: 0.161  m2_loss_dice_5: 1.21  m2_loss_ce_6: 0.4885  m2_loss_mask_6: 0.1625  m2_loss_dice_6: 1.177  m2_loss_ce_7: 0.4603  m2_loss_mask_7: 0.1613  m2_loss_dice_7: 1.227  m2_loss_ce_8: 0.4496  m2_loss_mask_8: 0.1605  m2_loss_dice_8: 1.211  com_loss_ce: 1.746  com_loss_mask: 0.6926  com_loss_dice: 0.9725    time: 1.4392  last_time: 1.5458  data_time: 0.0546  last_data_time: 0.0472   lr: 0.0001  max_mem: 36309M
[09/08 22:20:13] d2.utils.events INFO:  eta: 0:10:31  iter: 559  total_loss: 42.28  m1_loss_ce: 0.4455  m1_loss_mask: 0.152  m1_loss_dice: 1.255  m1_loss_ce_0: 0.5478  m1_loss_mask_0: 0.1755  m1_loss_dice_0: 1.399  m1_loss_ce_1: 0.6294  m1_loss_mask_1: 0.1619  m1_loss_dice_1: 1.366  m1_loss_ce_2: 0.5657  m1_loss_mask_2: 0.1546  m1_loss_dice_2: 1.31  m1_loss_ce_3: 0.5144  m1_loss_mask_3: 0.1545  m1_loss_dice_3: 1.282  m1_loss_ce_4: 0.4838  m1_loss_mask_4: 0.1543  m1_loss_dice_4: 1.251  m1_loss_ce_5: 0.4606  m1_loss_mask_5: 0.1497  m1_loss_dice_5: 1.233  m1_loss_ce_6: 0.4387  m1_loss_mask_6: 0.1522  m1_loss_dice_6: 1.2  m1_loss_ce_7: 0.4464  m1_loss_mask_7: 0.152  m1_loss_dice_7: 1.23  m1_loss_ce_8: 0.4701  m1_loss_mask_8: 0.1538  m1_loss_dice_8: 1.235  m2_loss_ce: 0.4714  m2_loss_mask: 0.1581  m2_loss_dice: 1.238  m2_loss_ce_0: 0.5793  m2_loss_mask_0: 0.1765  m2_loss_dice_0: 1.429  m2_loss_ce_1: 0.6601  m2_loss_mask_1: 0.1641  m2_loss_dice_1: 1.351  m2_loss_ce_2: 0.5753  m2_loss_mask_2: 0.1569  m2_loss_dice_2: 1.331  m2_loss_ce_3: 0.5218  m2_loss_mask_3: 0.1555  m2_loss_dice_3: 1.275  m2_loss_ce_4: 0.4921  m2_loss_mask_4: 0.1555  m2_loss_dice_4: 1.256  m2_loss_ce_5: 0.5032  m2_loss_mask_5: 0.1518  m2_loss_dice_5: 1.233  m2_loss_ce_6: 0.4976  m2_loss_mask_6: 0.1561  m2_loss_dice_6: 1.228  m2_loss_ce_7: 0.4588  m2_loss_mask_7: 0.1544  m2_loss_dice_7: 1.223  m2_loss_ce_8: 0.4773  m2_loss_mask_8: 0.1544  m2_loss_dice_8: 1.227  com_loss_ce: 1.757  com_loss_mask: 0.6926  com_loss_dice: 0.973    time: 1.4394  last_time: 1.4037  data_time: 0.0557  last_data_time: 0.0458   lr: 0.0001  max_mem: 36309M
[09/08 22:20:41] d2.utils.events INFO:  eta: 0:10:02  iter: 579  total_loss: 42.77  m1_loss_ce: 0.4362  m1_loss_mask: 0.1693  m1_loss_dice: 1.151  m1_loss_ce_0: 0.5536  m1_loss_mask_0: 0.2001  m1_loss_dice_0: 1.381  m1_loss_ce_1: 0.6282  m1_loss_mask_1: 0.1859  m1_loss_dice_1: 1.276  m1_loss_ce_2: 0.5826  m1_loss_mask_2: 0.1743  m1_loss_dice_2: 1.268  m1_loss_ce_3: 0.5257  m1_loss_mask_3: 0.1745  m1_loss_dice_3: 1.202  m1_loss_ce_4: 0.4768  m1_loss_mask_4: 0.1732  m1_loss_dice_4: 1.186  m1_loss_ce_5: 0.4589  m1_loss_mask_5: 0.1719  m1_loss_dice_5: 1.205  m1_loss_ce_6: 0.4597  m1_loss_mask_6: 0.1692  m1_loss_dice_6: 1.177  m1_loss_ce_7: 0.4412  m1_loss_mask_7: 0.1683  m1_loss_dice_7: 1.164  m1_loss_ce_8: 0.4429  m1_loss_mask_8: 0.1682  m1_loss_dice_8: 1.192  m2_loss_ce: 0.497  m2_loss_mask: 0.1691  m2_loss_dice: 1.174  m2_loss_ce_0: 0.5809  m2_loss_mask_0: 0.1985  m2_loss_dice_0: 1.406  m2_loss_ce_1: 0.6598  m2_loss_mask_1: 0.1814  m2_loss_dice_1: 1.348  m2_loss_ce_2: 0.5862  m2_loss_mask_2: 0.175  m2_loss_dice_2: 1.27  m2_loss_ce_3: 0.5634  m2_loss_mask_3: 0.1682  m2_loss_dice_3: 1.2  m2_loss_ce_4: 0.5442  m2_loss_mask_4: 0.1678  m2_loss_dice_4: 1.238  m2_loss_ce_5: 0.5153  m2_loss_mask_5: 0.166  m2_loss_dice_5: 1.204  m2_loss_ce_6: 0.5064  m2_loss_mask_6: 0.1697  m2_loss_dice_6: 1.152  m2_loss_ce_7: 0.4988  m2_loss_mask_7: 0.1686  m2_loss_dice_7: 1.192  m2_loss_ce_8: 0.5019  m2_loss_mask_8: 0.1681  m2_loss_dice_8: 1.176  com_loss_ce: 1.766  com_loss_mask: 0.6926  com_loss_dice: 0.9717    time: 1.4390  last_time: 1.3560  data_time: 0.0502  last_data_time: 0.0416   lr: 0.0001  max_mem: 36309M
[09/08 22:21:10] d2.utils.events INFO:  eta: 0:09:33  iter: 599  total_loss: 37.97  m1_loss_ce: 0.4114  m1_loss_mask: 0.1553  m1_loss_dice: 1.061  m1_loss_ce_0: 0.5489  m1_loss_mask_0: 0.183  m1_loss_dice_0: 1.277  m1_loss_ce_1: 0.6159  m1_loss_mask_1: 0.1621  m1_loss_dice_1: 1.211  m1_loss_ce_2: 0.5226  m1_loss_mask_2: 0.1591  m1_loss_dice_2: 1.149  m1_loss_ce_3: 0.4518  m1_loss_mask_3: 0.1627  m1_loss_dice_3: 1.118  m1_loss_ce_4: 0.4246  m1_loss_mask_4: 0.1593  m1_loss_dice_4: 1.114  m1_loss_ce_5: 0.4089  m1_loss_mask_5: 0.1572  m1_loss_dice_5: 1.124  m1_loss_ce_6: 0.3952  m1_loss_mask_6: 0.1585  m1_loss_dice_6: 1.086  m1_loss_ce_7: 0.4232  m1_loss_mask_7: 0.1571  m1_loss_dice_7: 1.091  m1_loss_ce_8: 0.401  m1_loss_mask_8: 0.1563  m1_loss_dice_8: 1.087  m2_loss_ce: 0.4831  m2_loss_mask: 0.1562  m2_loss_dice: 1.101  m2_loss_ce_0: 0.593  m2_loss_mask_0: 0.178  m2_loss_dice_0: 1.316  m2_loss_ce_1: 0.6718  m2_loss_mask_1: 0.167  m2_loss_dice_1: 1.23  m2_loss_ce_2: 0.5597  m2_loss_mask_2: 0.1616  m2_loss_dice_2: 1.189  m2_loss_ce_3: 0.5238  m2_loss_mask_3: 0.1558  m2_loss_dice_3: 1.17  m2_loss_ce_4: 0.4703  m2_loss_mask_4: 0.1538  m2_loss_dice_4: 1.155  m2_loss_ce_5: 0.4798  m2_loss_mask_5: 0.1544  m2_loss_dice_5: 1.094  m2_loss_ce_6: 0.4497  m2_loss_mask_6: 0.1555  m2_loss_dice_6: 1.124  m2_loss_ce_7: 0.4812  m2_loss_mask_7: 0.1574  m2_loss_dice_7: 1.101  m2_loss_ce_8: 0.4582  m2_loss_mask_8: 0.1562  m2_loss_dice_8: 1.101  com_loss_ce: 1.756  com_loss_mask: 0.6926  com_loss_dice: 0.9713    time: 1.4385  last_time: 1.3732  data_time: 0.0555  last_data_time: 0.0455   lr: 0.0001  max_mem: 36309M
[09/08 22:21:39] d2.utils.events INFO:  eta: 0:09:04  iter: 619  total_loss: 40.86  m1_loss_ce: 0.4779  m1_loss_mask: 0.1575  m1_loss_dice: 1.161  m1_loss_ce_0: 0.5515  m1_loss_mask_0: 0.1857  m1_loss_dice_0: 1.373  m1_loss_ce_1: 0.5896  m1_loss_mask_1: 0.1718  m1_loss_dice_1: 1.287  m1_loss_ce_2: 0.5181  m1_loss_mask_2: 0.1647  m1_loss_dice_2: 1.258  m1_loss_ce_3: 0.4873  m1_loss_mask_3: 0.163  m1_loss_dice_3: 1.189  m1_loss_ce_4: 0.4791  m1_loss_mask_4: 0.1597  m1_loss_dice_4: 1.181  m1_loss_ce_5: 0.433  m1_loss_mask_5: 0.1586  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.4554  m1_loss_mask_6: 0.158  m1_loss_dice_6: 1.221  m1_loss_ce_7: 0.4223  m1_loss_mask_7: 0.1573  m1_loss_dice_7: 1.21  m1_loss_ce_8: 0.4423  m1_loss_mask_8: 0.1601  m1_loss_dice_8: 1.207  m2_loss_ce: 0.4565  m2_loss_mask: 0.1637  m2_loss_dice: 1.152  m2_loss_ce_0: 0.555  m2_loss_mask_0: 0.1883  m2_loss_dice_0: 1.379  m2_loss_ce_1: 0.6458  m2_loss_mask_1: 0.1774  m2_loss_dice_1: 1.335  m2_loss_ce_2: 0.5307  m2_loss_mask_2: 0.1663  m2_loss_dice_2: 1.243  m2_loss_ce_3: 0.5149  m2_loss_mask_3: 0.1648  m2_loss_dice_3: 1.245  m2_loss_ce_4: 0.4894  m2_loss_mask_4: 0.1632  m2_loss_dice_4: 1.213  m2_loss_ce_5: 0.4583  m2_loss_mask_5: 0.164  m2_loss_dice_5: 1.178  m2_loss_ce_6: 0.4498  m2_loss_mask_6: 0.1643  m2_loss_dice_6: 1.211  m2_loss_ce_7: 0.4783  m2_loss_mask_7: 0.1647  m2_loss_dice_7: 1.2  m2_loss_ce_8: 0.4993  m2_loss_mask_8: 0.1645  m2_loss_dice_8: 1.194  com_loss_ce: 1.749  com_loss_mask: 0.6926  com_loss_dice: 0.9728    time: 1.4381  last_time: 1.4470  data_time: 0.0483  last_data_time: 0.0459   lr: 0.0001  max_mem: 36309M
[09/08 22:22:08] d2.utils.events INFO:  eta: 0:08:36  iter: 639  total_loss: 41.43  m1_loss_ce: 0.4573  m1_loss_mask: 0.1756  m1_loss_dice: 1.15  m1_loss_ce_0: 0.5233  m1_loss_mask_0: 0.1932  m1_loss_dice_0: 1.352  m1_loss_ce_1: 0.5964  m1_loss_mask_1: 0.1828  m1_loss_dice_1: 1.284  m1_loss_ce_2: 0.5333  m1_loss_mask_2: 0.1802  m1_loss_dice_2: 1.215  m1_loss_ce_3: 0.4743  m1_loss_mask_3: 0.1744  m1_loss_dice_3: 1.177  m1_loss_ce_4: 0.4383  m1_loss_mask_4: 0.1748  m1_loss_dice_4: 1.179  m1_loss_ce_5: 0.445  m1_loss_mask_5: 0.1745  m1_loss_dice_5: 1.151  m1_loss_ce_6: 0.4399  m1_loss_mask_6: 0.1738  m1_loss_dice_6: 1.139  m1_loss_ce_7: 0.4205  m1_loss_mask_7: 0.1763  m1_loss_dice_7: 1.176  m1_loss_ce_8: 0.4354  m1_loss_mask_8: 0.1763  m1_loss_dice_8: 1.166  m2_loss_ce: 0.4396  m2_loss_mask: 0.1744  m2_loss_dice: 1.15  m2_loss_ce_0: 0.5489  m2_loss_mask_0: 0.1952  m2_loss_dice_0: 1.349  m2_loss_ce_1: 0.6555  m2_loss_mask_1: 0.1779  m2_loss_dice_1: 1.294  m2_loss_ce_2: 0.5316  m2_loss_mask_2: 0.178  m2_loss_dice_2: 1.232  m2_loss_ce_3: 0.5129  m2_loss_mask_3: 0.1758  m2_loss_dice_3: 1.191  m2_loss_ce_4: 0.4841  m2_loss_mask_4: 0.1736  m2_loss_dice_4: 1.153  m2_loss_ce_5: 0.4627  m2_loss_mask_5: 0.1757  m2_loss_dice_5: 1.172  m2_loss_ce_6: 0.4569  m2_loss_mask_6: 0.1764  m2_loss_dice_6: 1.14  m2_loss_ce_7: 0.4487  m2_loss_mask_7: 0.1745  m2_loss_dice_7: 1.11  m2_loss_ce_8: 0.4679  m2_loss_mask_8: 0.1736  m2_loss_dice_8: 1.144  com_loss_ce: 1.746  com_loss_mask: 0.6926  com_loss_dice: 0.973    time: 1.4380  last_time: 1.3960  data_time: 0.0526  last_data_time: 0.0445   lr: 0.0001  max_mem: 36309M
[09/08 22:22:36] d2.utils.events INFO:  eta: 0:08:07  iter: 659  total_loss: 39.94  m1_loss_ce: 0.4159  m1_loss_mask: 0.1559  m1_loss_dice: 1.15  m1_loss_ce_0: 0.5105  m1_loss_mask_0: 0.1776  m1_loss_dice_0: 1.338  m1_loss_ce_1: 0.5534  m1_loss_mask_1: 0.1626  m1_loss_dice_1: 1.263  m1_loss_ce_2: 0.507  m1_loss_mask_2: 0.1604  m1_loss_dice_2: 1.196  m1_loss_ce_3: 0.4298  m1_loss_mask_3: 0.1589  m1_loss_dice_3: 1.162  m1_loss_ce_4: 0.4152  m1_loss_mask_4: 0.1585  m1_loss_dice_4: 1.122  m1_loss_ce_5: 0.4409  m1_loss_mask_5: 0.1559  m1_loss_dice_5: 1.155  m1_loss_ce_6: 0.4088  m1_loss_mask_6: 0.1578  m1_loss_dice_6: 1.15  m1_loss_ce_7: 0.4059  m1_loss_mask_7: 0.1568  m1_loss_dice_7: 1.131  m1_loss_ce_8: 0.3816  m1_loss_mask_8: 0.1575  m1_loss_dice_8: 1.107  m2_loss_ce: 0.4388  m2_loss_mask: 0.158  m2_loss_dice: 1.134  m2_loss_ce_0: 0.523  m2_loss_mask_0: 0.1795  m2_loss_dice_0: 1.324  m2_loss_ce_1: 0.6485  m2_loss_mask_1: 0.1697  m2_loss_dice_1: 1.284  m2_loss_ce_2: 0.5495  m2_loss_mask_2: 0.1622  m2_loss_dice_2: 1.238  m2_loss_ce_3: 0.502  m2_loss_mask_3: 0.1587  m2_loss_dice_3: 1.163  m2_loss_ce_4: 0.4768  m2_loss_mask_4: 0.1577  m2_loss_dice_4: 1.207  m2_loss_ce_5: 0.4614  m2_loss_mask_5: 0.1547  m2_loss_dice_5: 1.168  m2_loss_ce_6: 0.4471  m2_loss_mask_6: 0.1599  m2_loss_dice_6: 1.141  m2_loss_ce_7: 0.4553  m2_loss_mask_7: 0.1616  m2_loss_dice_7: 1.157  m2_loss_ce_8: 0.462  m2_loss_mask_8: 0.1589  m2_loss_dice_8: 1.181  com_loss_ce: 1.768  com_loss_mask: 0.6926  com_loss_dice: 0.9716    time: 1.4368  last_time: 1.3676  data_time: 0.0441  last_data_time: 0.0440   lr: 0.0001  max_mem: 36309M
[09/08 22:23:05] d2.utils.events INFO:  eta: 0:07:38  iter: 679  total_loss: 40.69  m1_loss_ce: 0.4233  m1_loss_mask: 0.1586  m1_loss_dice: 1.136  m1_loss_ce_0: 0.5252  m1_loss_mask_0: 0.1804  m1_loss_dice_0: 1.352  m1_loss_ce_1: 0.5959  m1_loss_mask_1: 0.1719  m1_loss_dice_1: 1.27  m1_loss_ce_2: 0.5159  m1_loss_mask_2: 0.1608  m1_loss_dice_2: 1.24  m1_loss_ce_3: 0.4824  m1_loss_mask_3: 0.1619  m1_loss_dice_3: 1.175  m1_loss_ce_4: 0.4448  m1_loss_mask_4: 0.1614  m1_loss_dice_4: 1.167  m1_loss_ce_5: 0.4418  m1_loss_mask_5: 0.1591  m1_loss_dice_5: 1.157  m1_loss_ce_6: 0.4633  m1_loss_mask_6: 0.1592  m1_loss_dice_6: 1.172  m1_loss_ce_7: 0.4392  m1_loss_mask_7: 0.1591  m1_loss_dice_7: 1.15  m1_loss_ce_8: 0.3956  m1_loss_mask_8: 0.1584  m1_loss_dice_8: 1.162  m2_loss_ce: 0.4519  m2_loss_mask: 0.158  m2_loss_dice: 1.142  m2_loss_ce_0: 0.5852  m2_loss_mask_0: 0.1804  m2_loss_dice_0: 1.366  m2_loss_ce_1: 0.6487  m2_loss_mask_1: 0.171  m2_loss_dice_1: 1.308  m2_loss_ce_2: 0.5555  m2_loss_mask_2: 0.1633  m2_loss_dice_2: 1.274  m2_loss_ce_3: 0.5058  m2_loss_mask_3: 0.1589  m2_loss_dice_3: 1.21  m2_loss_ce_4: 0.4828  m2_loss_mask_4: 0.162  m2_loss_dice_4: 1.191  m2_loss_ce_5: 0.4934  m2_loss_mask_5: 0.1596  m2_loss_dice_5: 1.186  m2_loss_ce_6: 0.4604  m2_loss_mask_6: 0.1618  m2_loss_dice_6: 1.171  m2_loss_ce_7: 0.4869  m2_loss_mask_7: 0.1591  m2_loss_dice_7: 1.202  m2_loss_ce_8: 0.4935  m2_loss_mask_8: 0.1576  m2_loss_dice_8: 1.166  com_loss_ce: 1.786  com_loss_mask: 0.6926  com_loss_dice: 0.972    time: 1.4370  last_time: 1.4303  data_time: 0.0531  last_data_time: 0.0644   lr: 0.0001  max_mem: 36309M
[09/08 22:23:34] d2.utils.events INFO:  eta: 0:07:09  iter: 699  total_loss: 41.24  m1_loss_ce: 0.4201  m1_loss_mask: 0.1526  m1_loss_dice: 1.184  m1_loss_ce_0: 0.5304  m1_loss_mask_0: 0.1764  m1_loss_dice_0: 1.374  m1_loss_ce_1: 0.5862  m1_loss_mask_1: 0.1596  m1_loss_dice_1: 1.302  m1_loss_ce_2: 0.5114  m1_loss_mask_2: 0.1534  m1_loss_dice_2: 1.257  m1_loss_ce_3: 0.4467  m1_loss_mask_3: 0.1539  m1_loss_dice_3: 1.18  m1_loss_ce_4: 0.4293  m1_loss_mask_4: 0.1573  m1_loss_dice_4: 1.174  m1_loss_ce_5: 0.4336  m1_loss_mask_5: 0.1575  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.4634  m1_loss_mask_6: 0.1546  m1_loss_dice_6: 1.167  m1_loss_ce_7: 0.4191  m1_loss_mask_7: 0.153  m1_loss_dice_7: 1.183  m1_loss_ce_8: 0.4263  m1_loss_mask_8: 0.1526  m1_loss_dice_8: 1.207  m2_loss_ce: 0.4589  m2_loss_mask: 0.1556  m2_loss_dice: 1.138  m2_loss_ce_0: 0.5686  m2_loss_mask_0: 0.1769  m2_loss_dice_0: 1.375  m2_loss_ce_1: 0.6593  m2_loss_mask_1: 0.1651  m2_loss_dice_1: 1.332  m2_loss_ce_2: 0.5918  m2_loss_mask_2: 0.16  m2_loss_dice_2: 1.26  m2_loss_ce_3: 0.5325  m2_loss_mask_3: 0.1596  m2_loss_dice_3: 1.203  m2_loss_ce_4: 0.4812  m2_loss_mask_4: 0.1542  m2_loss_dice_4: 1.191  m2_loss_ce_5: 0.4643  m2_loss_mask_5: 0.154  m2_loss_dice_5: 1.168  m2_loss_ce_6: 0.4892  m2_loss_mask_6: 0.1562  m2_loss_dice_6: 1.172  m2_loss_ce_7: 0.4749  m2_loss_mask_7: 0.1544  m2_loss_dice_7: 1.165  m2_loss_ce_8: 0.4684  m2_loss_mask_8: 0.155  m2_loss_dice_8: 1.148  com_loss_ce: 1.767  com_loss_mask: 0.6925  com_loss_dice: 0.9725    time: 1.4374  last_time: 1.4321  data_time: 0.0528  last_data_time: 0.0517   lr: 0.0001  max_mem: 36309M
[09/08 22:24:02] d2.utils.events INFO:  eta: 0:06:41  iter: 719  total_loss: 39.79  m1_loss_ce: 0.4829  m1_loss_mask: 0.1575  m1_loss_dice: 1.145  m1_loss_ce_0: 0.5526  m1_loss_mask_0: 0.1839  m1_loss_dice_0: 1.338  m1_loss_ce_1: 0.6004  m1_loss_mask_1: 0.1729  m1_loss_dice_1: 1.238  m1_loss_ce_2: 0.5382  m1_loss_mask_2: 0.1679  m1_loss_dice_2: 1.222  m1_loss_ce_3: 0.5053  m1_loss_mask_3: 0.1637  m1_loss_dice_3: 1.163  m1_loss_ce_4: 0.4568  m1_loss_mask_4: 0.1643  m1_loss_dice_4: 1.153  m1_loss_ce_5: 0.4637  m1_loss_mask_5: 0.16  m1_loss_dice_5: 1.173  m1_loss_ce_6: 0.4252  m1_loss_mask_6: 0.1598  m1_loss_dice_6: 1.16  m1_loss_ce_7: 0.4385  m1_loss_mask_7: 0.1589  m1_loss_dice_7: 1.15  m1_loss_ce_8: 0.4492  m1_loss_mask_8: 0.1595  m1_loss_dice_8: 1.13  m2_loss_ce: 0.4736  m2_loss_mask: 0.1605  m2_loss_dice: 1.141  m2_loss_ce_0: 0.5862  m2_loss_mask_0: 0.1793  m2_loss_dice_0: 1.307  m2_loss_ce_1: 0.6343  m2_loss_mask_1: 0.1703  m2_loss_dice_1: 1.267  m2_loss_ce_2: 0.5933  m2_loss_mask_2: 0.1602  m2_loss_dice_2: 1.199  m2_loss_ce_3: 0.5372  m2_loss_mask_3: 0.1607  m2_loss_dice_3: 1.159  m2_loss_ce_4: 0.5051  m2_loss_mask_4: 0.1604  m2_loss_dice_4: 1.166  m2_loss_ce_5: 0.4726  m2_loss_mask_5: 0.1606  m2_loss_dice_5: 1.136  m2_loss_ce_6: 0.4824  m2_loss_mask_6: 0.1593  m2_loss_dice_6: 1.145  m2_loss_ce_7: 0.5014  m2_loss_mask_7: 0.1625  m2_loss_dice_7: 1.145  m2_loss_ce_8: 0.4972  m2_loss_mask_8: 0.161  m2_loss_dice_8: 1.107  com_loss_ce: 1.753  com_loss_mask: 0.6926  com_loss_dice: 0.9727    time: 1.4372  last_time: 1.4416  data_time: 0.0524  last_data_time: 0.0431   lr: 0.0001  max_mem: 36309M
[09/08 22:24:31] d2.utils.events INFO:  eta: 0:06:12  iter: 739  total_loss: 39.84  m1_loss_ce: 0.4128  m1_loss_mask: 0.1586  m1_loss_dice: 1.129  m1_loss_ce_0: 0.5318  m1_loss_mask_0: 0.1878  m1_loss_dice_0: 1.335  m1_loss_ce_1: 0.5555  m1_loss_mask_1: 0.1746  m1_loss_dice_1: 1.265  m1_loss_ce_2: 0.447  m1_loss_mask_2: 0.17  m1_loss_dice_2: 1.179  m1_loss_ce_3: 0.427  m1_loss_mask_3: 0.1668  m1_loss_dice_3: 1.162  m1_loss_ce_4: 0.4179  m1_loss_mask_4: 0.1635  m1_loss_dice_4: 1.119  m1_loss_ce_5: 0.4115  m1_loss_mask_5: 0.1616  m1_loss_dice_5: 1.13  m1_loss_ce_6: 0.3804  m1_loss_mask_6: 0.1597  m1_loss_dice_6: 1.131  m1_loss_ce_7: 0.3688  m1_loss_mask_7: 0.1608  m1_loss_dice_7: 1.131  m1_loss_ce_8: 0.3976  m1_loss_mask_8: 0.1596  m1_loss_dice_8: 1.131  m2_loss_ce: 0.4425  m2_loss_mask: 0.159  m2_loss_dice: 1.128  m2_loss_ce_0: 0.548  m2_loss_mask_0: 0.1812  m2_loss_dice_0: 1.31  m2_loss_ce_1: 0.567  m2_loss_mask_1: 0.1685  m2_loss_dice_1: 1.277  m2_loss_ce_2: 0.5328  m2_loss_mask_2: 0.1606  m2_loss_dice_2: 1.245  m2_loss_ce_3: 0.4522  m2_loss_mask_3: 0.1623  m2_loss_dice_3: 1.163  m2_loss_ce_4: 0.4383  m2_loss_mask_4: 0.1625  m2_loss_dice_4: 1.18  m2_loss_ce_5: 0.4424  m2_loss_mask_5: 0.1625  m2_loss_dice_5: 1.157  m2_loss_ce_6: 0.4052  m2_loss_mask_6: 0.1614  m2_loss_dice_6: 1.159  m2_loss_ce_7: 0.4022  m2_loss_mask_7: 0.1619  m2_loss_dice_7: 1.146  m2_loss_ce_8: 0.4491  m2_loss_mask_8: 0.1629  m2_loss_dice_8: 1.146  com_loss_ce: 1.738  com_loss_mask: 0.6926  com_loss_dice: 0.9712    time: 1.4364  last_time: 1.4900  data_time: 0.0460  last_data_time: 0.0520   lr: 0.0001  max_mem: 36309M
[09/08 22:25:00] d2.utils.events INFO:  eta: 0:05:43  iter: 759  total_loss: 41.13  m1_loss_ce: 0.4156  m1_loss_mask: 0.1566  m1_loss_dice: 1.186  m1_loss_ce_0: 0.5519  m1_loss_mask_0: 0.1797  m1_loss_dice_0: 1.356  m1_loss_ce_1: 0.586  m1_loss_mask_1: 0.1638  m1_loss_dice_1: 1.289  m1_loss_ce_2: 0.4963  m1_loss_mask_2: 0.159  m1_loss_dice_2: 1.247  m1_loss_ce_3: 0.4497  m1_loss_mask_3: 0.1594  m1_loss_dice_3: 1.192  m1_loss_ce_4: 0.4448  m1_loss_mask_4: 0.1579  m1_loss_dice_4: 1.149  m1_loss_ce_5: 0.4467  m1_loss_mask_5: 0.1554  m1_loss_dice_5: 1.158  m1_loss_ce_6: 0.4186  m1_loss_mask_6: 0.157  m1_loss_dice_6: 1.158  m1_loss_ce_7: 0.399  m1_loss_mask_7: 0.1559  m1_loss_dice_7: 1.179  m1_loss_ce_8: 0.4102  m1_loss_mask_8: 0.1568  m1_loss_dice_8: 1.156  m2_loss_ce: 0.4626  m2_loss_mask: 0.1598  m2_loss_dice: 1.158  m2_loss_ce_0: 0.5774  m2_loss_mask_0: 0.1819  m2_loss_dice_0: 1.374  m2_loss_ce_1: 0.6694  m2_loss_mask_1: 0.1758  m2_loss_dice_1: 1.294  m2_loss_ce_2: 0.5436  m2_loss_mask_2: 0.1676  m2_loss_dice_2: 1.249  m2_loss_ce_3: 0.5191  m2_loss_mask_3: 0.1672  m2_loss_dice_3: 1.2  m2_loss_ce_4: 0.5093  m2_loss_mask_4: 0.1667  m2_loss_dice_4: 1.198  m2_loss_ce_5: 0.4777  m2_loss_mask_5: 0.1627  m2_loss_dice_5: 1.213  m2_loss_ce_6: 0.4579  m2_loss_mask_6: 0.1621  m2_loss_dice_6: 1.183  m2_loss_ce_7: 0.4679  m2_loss_mask_7: 0.1621  m2_loss_dice_7: 1.156  m2_loss_ce_8: 0.4655  m2_loss_mask_8: 0.1616  m2_loss_dice_8: 1.158  com_loss_ce: 1.764  com_loss_mask: 0.6926  com_loss_dice: 0.9736    time: 1.4368  last_time: 1.4117  data_time: 0.0543  last_data_time: 0.0423   lr: 0.0001  max_mem: 36309M
[09/08 22:25:29] d2.utils.events INFO:  eta: 0:05:15  iter: 779  total_loss: 40.31  m1_loss_ce: 0.444  m1_loss_mask: 0.1544  m1_loss_dice: 1.115  m1_loss_ce_0: 0.5191  m1_loss_mask_0: 0.1807  m1_loss_dice_0: 1.33  m1_loss_ce_1: 0.5883  m1_loss_mask_1: 0.1654  m1_loss_dice_1: 1.311  m1_loss_ce_2: 0.5078  m1_loss_mask_2: 0.1592  m1_loss_dice_2: 1.214  m1_loss_ce_3: 0.4806  m1_loss_mask_3: 0.1592  m1_loss_dice_3: 1.168  m1_loss_ce_4: 0.4388  m1_loss_mask_4: 0.1581  m1_loss_dice_4: 1.143  m1_loss_ce_5: 0.4482  m1_loss_mask_5: 0.1545  m1_loss_dice_5: 1.183  m1_loss_ce_6: 0.4172  m1_loss_mask_6: 0.1555  m1_loss_dice_6: 1.142  m1_loss_ce_7: 0.4218  m1_loss_mask_7: 0.1551  m1_loss_dice_7: 1.157  m1_loss_ce_8: 0.427  m1_loss_mask_8: 0.1554  m1_loss_dice_8: 1.171  m2_loss_ce: 0.4857  m2_loss_mask: 0.1568  m2_loss_dice: 1.151  m2_loss_ce_0: 0.5943  m2_loss_mask_0: 0.1754  m2_loss_dice_0: 1.328  m2_loss_ce_1: 0.6505  m2_loss_mask_1: 0.1642  m2_loss_dice_1: 1.287  m2_loss_ce_2: 0.5765  m2_loss_mask_2: 0.1581  m2_loss_dice_2: 1.242  m2_loss_ce_3: 0.5067  m2_loss_mask_3: 0.1585  m2_loss_dice_3: 1.196  m2_loss_ce_4: 0.5099  m2_loss_mask_4: 0.1554  m2_loss_dice_4: 1.169  m2_loss_ce_5: 0.4985  m2_loss_mask_5: 0.1556  m2_loss_dice_5: 1.178  m2_loss_ce_6: 0.4934  m2_loss_mask_6: 0.155  m2_loss_dice_6: 1.153  m2_loss_ce_7: 0.4625  m2_loss_mask_7: 0.1572  m2_loss_dice_7: 1.149  m2_loss_ce_8: 0.4598  m2_loss_mask_8: 0.1576  m2_loss_dice_8: 1.167  com_loss_ce: 1.758  com_loss_mask: 0.6926  com_loss_dice: 0.9724    time: 1.4368  last_time: 1.4378  data_time: 0.0553  last_data_time: 0.0390   lr: 0.0001  max_mem: 36309M
[09/08 22:25:58] d2.utils.events INFO:  eta: 0:04:46  iter: 799  total_loss: 40.6  m1_loss_ce: 0.4196  m1_loss_mask: 0.1628  m1_loss_dice: 1.179  m1_loss_ce_0: 0.5198  m1_loss_mask_0: 0.1912  m1_loss_dice_0: 1.38  m1_loss_ce_1: 0.5889  m1_loss_mask_1: 0.1768  m1_loss_dice_1: 1.303  m1_loss_ce_2: 0.5056  m1_loss_mask_2: 0.1635  m1_loss_dice_2: 1.248  m1_loss_ce_3: 0.4345  m1_loss_mask_3: 0.1676  m1_loss_dice_3: 1.19  m1_loss_ce_4: 0.4306  m1_loss_mask_4: 0.1649  m1_loss_dice_4: 1.172  m1_loss_ce_5: 0.4109  m1_loss_mask_5: 0.1604  m1_loss_dice_5: 1.142  m1_loss_ce_6: 0.3986  m1_loss_mask_6: 0.1611  m1_loss_dice_6: 1.158  m1_loss_ce_7: 0.4013  m1_loss_mask_7: 0.1621  m1_loss_dice_7: 1.166  m1_loss_ce_8: 0.4129  m1_loss_mask_8: 0.1631  m1_loss_dice_8: 1.167  m2_loss_ce: 0.4634  m2_loss_mask: 0.1657  m2_loss_dice: 1.176  m2_loss_ce_0: 0.5728  m2_loss_mask_0: 0.189  m2_loss_dice_0: 1.391  m2_loss_ce_1: 0.6288  m2_loss_mask_1: 0.1753  m2_loss_dice_1: 1.31  m2_loss_ce_2: 0.5446  m2_loss_mask_2: 0.1694  m2_loss_dice_2: 1.252  m2_loss_ce_3: 0.5055  m2_loss_mask_3: 0.1678  m2_loss_dice_3: 1.214  m2_loss_ce_4: 0.4831  m2_loss_mask_4: 0.1658  m2_loss_dice_4: 1.203  m2_loss_ce_5: 0.4643  m2_loss_mask_5: 0.1636  m2_loss_dice_5: 1.196  m2_loss_ce_6: 0.4654  m2_loss_mask_6: 0.1655  m2_loss_dice_6: 1.187  m2_loss_ce_7: 0.4527  m2_loss_mask_7: 0.1657  m2_loss_dice_7: 1.167  m2_loss_ce_8: 0.4551  m2_loss_mask_8: 0.1658  m2_loss_dice_8: 1.184  com_loss_ce: 1.767  com_loss_mask: 0.6926  com_loss_dice: 0.9731    time: 1.4368  last_time: 1.3860  data_time: 0.0520  last_data_time: 0.0625   lr: 0.0001  max_mem: 36309M
[09/08 22:26:26] d2.utils.events INFO:  eta: 0:04:17  iter: 819  total_loss: 41.51  m1_loss_ce: 0.4093  m1_loss_mask: 0.158  m1_loss_dice: 1.215  m1_loss_ce_0: 0.547  m1_loss_mask_0: 0.1831  m1_loss_dice_0: 1.361  m1_loss_ce_1: 0.5533  m1_loss_mask_1: 0.177  m1_loss_dice_1: 1.331  m1_loss_ce_2: 0.5311  m1_loss_mask_2: 0.1611  m1_loss_dice_2: 1.298  m1_loss_ce_3: 0.4527  m1_loss_mask_3: 0.1546  m1_loss_dice_3: 1.204  m1_loss_ce_4: 0.4592  m1_loss_mask_4: 0.1542  m1_loss_dice_4: 1.234  m1_loss_ce_5: 0.4373  m1_loss_mask_5: 0.1521  m1_loss_dice_5: 1.193  m1_loss_ce_6: 0.4088  m1_loss_mask_6: 0.1544  m1_loss_dice_6: 1.194  m1_loss_ce_7: 0.4201  m1_loss_mask_7: 0.1545  m1_loss_dice_7: 1.186  m1_loss_ce_8: 0.4611  m1_loss_mask_8: 0.1546  m1_loss_dice_8: 1.191  m2_loss_ce: 0.5161  m2_loss_mask: 0.1606  m2_loss_dice: 1.225  m2_loss_ce_0: 0.5806  m2_loss_mask_0: 0.1784  m2_loss_dice_0: 1.409  m2_loss_ce_1: 0.6405  m2_loss_mask_1: 0.1783  m2_loss_dice_1: 1.321  m2_loss_ce_2: 0.5901  m2_loss_mask_2: 0.1643  m2_loss_dice_2: 1.257  m2_loss_ce_3: 0.5571  m2_loss_mask_3: 0.1637  m2_loss_dice_3: 1.197  m2_loss_ce_4: 0.5106  m2_loss_mask_4: 0.1608  m2_loss_dice_4: 1.232  m2_loss_ce_5: 0.501  m2_loss_mask_5: 0.1607  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.4947  m2_loss_mask_6: 0.1615  m2_loss_dice_6: 1.192  m2_loss_ce_7: 0.5035  m2_loss_mask_7: 0.1586  m2_loss_dice_7: 1.199  m2_loss_ce_8: 0.5015  m2_loss_mask_8: 0.1593  m2_loss_dice_8: 1.198  com_loss_ce: 1.737  com_loss_mask: 0.6926  com_loss_dice: 0.9737    time: 1.4363  last_time: 1.3976  data_time: 0.0477  last_data_time: 0.0396   lr: 0.0001  max_mem: 36309M
[09/08 22:26:55] d2.utils.events INFO:  eta: 0:03:49  iter: 839  total_loss: 40.61  m1_loss_ce: 0.4266  m1_loss_mask: 0.1518  m1_loss_dice: 1.187  m1_loss_ce_0: 0.5308  m1_loss_mask_0: 0.1769  m1_loss_dice_0: 1.36  m1_loss_ce_1: 0.6148  m1_loss_mask_1: 0.1648  m1_loss_dice_1: 1.288  m1_loss_ce_2: 0.5478  m1_loss_mask_2: 0.1557  m1_loss_dice_2: 1.247  m1_loss_ce_3: 0.4547  m1_loss_mask_3: 0.1571  m1_loss_dice_3: 1.215  m1_loss_ce_4: 0.4536  m1_loss_mask_4: 0.1565  m1_loss_dice_4: 1.15  m1_loss_ce_5: 0.4255  m1_loss_mask_5: 0.1528  m1_loss_dice_5: 1.191  m1_loss_ce_6: 0.4175  m1_loss_mask_6: 0.1516  m1_loss_dice_6: 1.168  m1_loss_ce_7: 0.4268  m1_loss_mask_7: 0.1529  m1_loss_dice_7: 1.176  m1_loss_ce_8: 0.4175  m1_loss_mask_8: 0.1522  m1_loss_dice_8: 1.18  m2_loss_ce: 0.4474  m2_loss_mask: 0.1509  m2_loss_dice: 1.153  m2_loss_ce_0: 0.5997  m2_loss_mask_0: 0.1715  m2_loss_dice_0: 1.409  m2_loss_ce_1: 0.6828  m2_loss_mask_1: 0.1617  m2_loss_dice_1: 1.342  m2_loss_ce_2: 0.5747  m2_loss_mask_2: 0.1511  m2_loss_dice_2: 1.293  m2_loss_ce_3: 0.5202  m2_loss_mask_3: 0.1488  m2_loss_dice_3: 1.266  m2_loss_ce_4: 0.4963  m2_loss_mask_4: 0.1478  m2_loss_dice_4: 1.218  m2_loss_ce_5: 0.491  m2_loss_mask_5: 0.1496  m2_loss_dice_5: 1.209  m2_loss_ce_6: 0.4715  m2_loss_mask_6: 0.1509  m2_loss_dice_6: 1.177  m2_loss_ce_7: 0.4469  m2_loss_mask_7: 0.1534  m2_loss_dice_7: 1.209  m2_loss_ce_8: 0.4718  m2_loss_mask_8: 0.1518  m2_loss_dice_8: 1.157  com_loss_ce: 1.778  com_loss_mask: 0.6925  com_loss_dice: 0.974    time: 1.4363  last_time: 1.4060  data_time: 0.0494  last_data_time: 0.0458   lr: 0.0001  max_mem: 36309M
[09/08 22:27:24] d2.utils.events INFO:  eta: 0:03:20  iter: 859  total_loss: 39.55  m1_loss_ce: 0.418  m1_loss_mask: 0.1494  m1_loss_dice: 1.114  m1_loss_ce_0: 0.498  m1_loss_mask_0: 0.1726  m1_loss_dice_0: 1.317  m1_loss_ce_1: 0.56  m1_loss_mask_1: 0.1582  m1_loss_dice_1: 1.219  m1_loss_ce_2: 0.5083  m1_loss_mask_2: 0.1537  m1_loss_dice_2: 1.166  m1_loss_ce_3: 0.4509  m1_loss_mask_3: 0.152  m1_loss_dice_3: 1.14  m1_loss_ce_4: 0.4531  m1_loss_mask_4: 0.1495  m1_loss_dice_4: 1.111  m1_loss_ce_5: 0.4168  m1_loss_mask_5: 0.1483  m1_loss_dice_5: 1.103  m1_loss_ce_6: 0.4286  m1_loss_mask_6: 0.152  m1_loss_dice_6: 1.061  m1_loss_ce_7: 0.4304  m1_loss_mask_7: 0.1497  m1_loss_dice_7: 1.065  m1_loss_ce_8: 0.4411  m1_loss_mask_8: 0.1502  m1_loss_dice_8: 1.085  m2_loss_ce: 0.4312  m2_loss_mask: 0.157  m2_loss_dice: 1.115  m2_loss_ce_0: 0.5462  m2_loss_mask_0: 0.1741  m2_loss_dice_0: 1.321  m2_loss_ce_1: 0.6328  m2_loss_mask_1: 0.1678  m2_loss_dice_1: 1.24  m2_loss_ce_2: 0.5411  m2_loss_mask_2: 0.1582  m2_loss_dice_2: 1.196  m2_loss_ce_3: 0.4803  m2_loss_mask_3: 0.1561  m2_loss_dice_3: 1.171  m2_loss_ce_4: 0.4412  m2_loss_mask_4: 0.1547  m2_loss_dice_4: 1.147  m2_loss_ce_5: 0.4531  m2_loss_mask_5: 0.1549  m2_loss_dice_5: 1.138  m2_loss_ce_6: 0.4515  m2_loss_mask_6: 0.1587  m2_loss_dice_6: 1.144  m2_loss_ce_7: 0.4453  m2_loss_mask_7: 0.1566  m2_loss_dice_7: 1.143  m2_loss_ce_8: 0.4748  m2_loss_mask_8: 0.1578  m2_loss_dice_8: 1.117  com_loss_ce: 1.776  com_loss_mask: 0.6926  com_loss_dice: 0.9724    time: 1.4361  last_time: 1.4743  data_time: 0.0501  last_data_time: 0.0570   lr: 0.0001  max_mem: 36309M
[09/08 22:27:52] d2.utils.events INFO:  eta: 0:02:51  iter: 879  total_loss: 41.91  m1_loss_ce: 0.4399  m1_loss_mask: 0.1398  m1_loss_dice: 1.171  m1_loss_ce_0: 0.5276  m1_loss_mask_0: 0.1677  m1_loss_dice_0: 1.32  m1_loss_ce_1: 0.5671  m1_loss_mask_1: 0.1534  m1_loss_dice_1: 1.276  m1_loss_ce_2: 0.524  m1_loss_mask_2: 0.1435  m1_loss_dice_2: 1.256  m1_loss_ce_3: 0.4749  m1_loss_mask_3: 0.1428  m1_loss_dice_3: 1.214  m1_loss_ce_4: 0.463  m1_loss_mask_4: 0.1413  m1_loss_dice_4: 1.19  m1_loss_ce_5: 0.4531  m1_loss_mask_5: 0.1417  m1_loss_dice_5: 1.181  m1_loss_ce_6: 0.4431  m1_loss_mask_6: 0.1392  m1_loss_dice_6: 1.166  m1_loss_ce_7: 0.4364  m1_loss_mask_7: 0.1408  m1_loss_dice_7: 1.171  m1_loss_ce_8: 0.4324  m1_loss_mask_8: 0.1414  m1_loss_dice_8: 1.185  m2_loss_ce: 0.5057  m2_loss_mask: 0.1486  m2_loss_dice: 1.169  m2_loss_ce_0: 0.5753  m2_loss_mask_0: 0.1729  m2_loss_dice_0: 1.375  m2_loss_ce_1: 0.6919  m2_loss_mask_1: 0.1573  m2_loss_dice_1: 1.283  m2_loss_ce_2: 0.5625  m2_loss_mask_2: 0.1483  m2_loss_dice_2: 1.237  m2_loss_ce_3: 0.5475  m2_loss_mask_3: 0.1446  m2_loss_dice_3: 1.214  m2_loss_ce_4: 0.5047  m2_loss_mask_4: 0.1426  m2_loss_dice_4: 1.206  m2_loss_ce_5: 0.5077  m2_loss_mask_5: 0.1427  m2_loss_dice_5: 1.215  m2_loss_ce_6: 0.5064  m2_loss_mask_6: 0.1463  m2_loss_dice_6: 1.176  m2_loss_ce_7: 0.4874  m2_loss_mask_7: 0.1426  m2_loss_dice_7: 1.183  m2_loss_ce_8: 0.497  m2_loss_mask_8: 0.1469  m2_loss_dice_8: 1.206  com_loss_ce: 1.74  com_loss_mask: 0.6926  com_loss_dice: 0.9718    time: 1.4359  last_time: 1.3681  data_time: 0.0556  last_data_time: 0.0449   lr: 0.0001  max_mem: 36309M
[09/08 22:28:21] d2.utils.events INFO:  eta: 0:02:23  iter: 899  total_loss: 42.18  m1_loss_ce: 0.4532  m1_loss_mask: 0.1519  m1_loss_dice: 1.195  m1_loss_ce_0: 0.5733  m1_loss_mask_0: 0.1767  m1_loss_dice_0: 1.386  m1_loss_ce_1: 0.6135  m1_loss_mask_1: 0.1659  m1_loss_dice_1: 1.308  m1_loss_ce_2: 0.5421  m1_loss_mask_2: 0.1556  m1_loss_dice_2: 1.253  m1_loss_ce_3: 0.4818  m1_loss_mask_3: 0.1537  m1_loss_dice_3: 1.195  m1_loss_ce_4: 0.4473  m1_loss_mask_4: 0.1523  m1_loss_dice_4: 1.205  m1_loss_ce_5: 0.4364  m1_loss_mask_5: 0.1496  m1_loss_dice_5: 1.217  m1_loss_ce_6: 0.4413  m1_loss_mask_6: 0.1525  m1_loss_dice_6: 1.2  m1_loss_ce_7: 0.4523  m1_loss_mask_7: 0.1542  m1_loss_dice_7: 1.216  m1_loss_ce_8: 0.4305  m1_loss_mask_8: 0.1509  m1_loss_dice_8: 1.171  m2_loss_ce: 0.5015  m2_loss_mask: 0.1621  m2_loss_dice: 1.223  m2_loss_ce_0: 0.6011  m2_loss_mask_0: 0.1759  m2_loss_dice_0: 1.411  m2_loss_ce_1: 0.6885  m2_loss_mask_1: 0.1737  m2_loss_dice_1: 1.355  m2_loss_ce_2: 0.5998  m2_loss_mask_2: 0.1651  m2_loss_dice_2: 1.251  m2_loss_ce_3: 0.5743  m2_loss_mask_3: 0.1632  m2_loss_dice_3: 1.243  m2_loss_ce_4: 0.5278  m2_loss_mask_4: 0.1596  m2_loss_dice_4: 1.254  m2_loss_ce_5: 0.5118  m2_loss_mask_5: 0.1592  m2_loss_dice_5: 1.204  m2_loss_ce_6: 0.5288  m2_loss_mask_6: 0.1615  m2_loss_dice_6: 1.203  m2_loss_ce_7: 0.5139  m2_loss_mask_7: 0.1614  m2_loss_dice_7: 1.192  m2_loss_ce_8: 0.5077  m2_loss_mask_8: 0.1632  m2_loss_dice_8: 1.194  com_loss_ce: 1.783  com_loss_mask: 0.6926  com_loss_dice: 0.9746    time: 1.4361  last_time: 1.4520  data_time: 0.0660  last_data_time: 0.0412   lr: 0.0001  max_mem: 36309M
[09/08 22:28:50] d2.utils.events INFO:  eta: 0:01:54  iter: 919  total_loss: 40.51  m1_loss_ce: 0.4385  m1_loss_mask: 0.1484  m1_loss_dice: 1.132  m1_loss_ce_0: 0.5324  m1_loss_mask_0: 0.1751  m1_loss_dice_0: 1.308  m1_loss_ce_1: 0.5959  m1_loss_mask_1: 0.1607  m1_loss_dice_1: 1.262  m1_loss_ce_2: 0.5269  m1_loss_mask_2: 0.1518  m1_loss_dice_2: 1.197  m1_loss_ce_3: 0.4999  m1_loss_mask_3: 0.1515  m1_loss_dice_3: 1.162  m1_loss_ce_4: 0.4452  m1_loss_mask_4: 0.1508  m1_loss_dice_4: 1.12  m1_loss_ce_5: 0.4264  m1_loss_mask_5: 0.1513  m1_loss_dice_5: 1.154  m1_loss_ce_6: 0.4307  m1_loss_mask_6: 0.1504  m1_loss_dice_6: 1.136  m1_loss_ce_7: 0.4127  m1_loss_mask_7: 0.1501  m1_loss_dice_7: 1.137  m1_loss_ce_8: 0.4333  m1_loss_mask_8: 0.15  m1_loss_dice_8: 1.12  m2_loss_ce: 0.4554  m2_loss_mask: 0.153  m2_loss_dice: 1.177  m2_loss_ce_0: 0.5577  m2_loss_mask_0: 0.1725  m2_loss_dice_0: 1.368  m2_loss_ce_1: 0.6612  m2_loss_mask_1: 0.1622  m2_loss_dice_1: 1.298  m2_loss_ce_2: 0.5549  m2_loss_mask_2: 0.154  m2_loss_dice_2: 1.198  m2_loss_ce_3: 0.538  m2_loss_mask_3: 0.1522  m2_loss_dice_3: 1.17  m2_loss_ce_4: 0.4525  m2_loss_mask_4: 0.153  m2_loss_dice_4: 1.174  m2_loss_ce_5: 0.4779  m2_loss_mask_5: 0.1504  m2_loss_dice_5: 1.134  m2_loss_ce_6: 0.4617  m2_loss_mask_6: 0.1512  m2_loss_dice_6: 1.182  m2_loss_ce_7: 0.4533  m2_loss_mask_7: 0.154  m2_loss_dice_7: 1.162  m2_loss_ce_8: 0.4511  m2_loss_mask_8: 0.1525  m2_loss_dice_8: 1.135  com_loss_ce: 1.765  com_loss_mask: 0.6926  com_loss_dice: 0.974    time: 1.4364  last_time: 1.3876  data_time: 0.0530  last_data_time: 0.0436   lr: 0.0001  max_mem: 36309M
[09/08 22:29:19] d2.utils.events INFO:  eta: 0:01:25  iter: 939  total_loss: 42.85  m1_loss_ce: 0.457  m1_loss_mask: 0.1448  m1_loss_dice: 1.224  m1_loss_ce_0: 0.5687  m1_loss_mask_0: 0.1732  m1_loss_dice_0: 1.403  m1_loss_ce_1: 0.5869  m1_loss_mask_1: 0.1588  m1_loss_dice_1: 1.321  m1_loss_ce_2: 0.5227  m1_loss_mask_2: 0.1475  m1_loss_dice_2: 1.303  m1_loss_ce_3: 0.4882  m1_loss_mask_3: 0.1484  m1_loss_dice_3: 1.264  m1_loss_ce_4: 0.4839  m1_loss_mask_4: 0.1482  m1_loss_dice_4: 1.255  m1_loss_ce_5: 0.46  m1_loss_mask_5: 0.1462  m1_loss_dice_5: 1.231  m1_loss_ce_6: 0.4454  m1_loss_mask_6: 0.1457  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.4333  m1_loss_mask_7: 0.1464  m1_loss_dice_7: 1.244  m1_loss_ce_8: 0.4464  m1_loss_mask_8: 0.1469  m1_loss_dice_8: 1.207  m2_loss_ce: 0.4966  m2_loss_mask: 0.1515  m2_loss_dice: 1.247  m2_loss_ce_0: 0.6006  m2_loss_mask_0: 0.1761  m2_loss_dice_0: 1.434  m2_loss_ce_1: 0.6781  m2_loss_mask_1: 0.1634  m2_loss_dice_1: 1.393  m2_loss_ce_2: 0.629  m2_loss_mask_2: 0.153  m2_loss_dice_2: 1.324  m2_loss_ce_3: 0.5882  m2_loss_mask_3: 0.1515  m2_loss_dice_3: 1.308  m2_loss_ce_4: 0.5217  m2_loss_mask_4: 0.1509  m2_loss_dice_4: 1.306  m2_loss_ce_5: 0.5329  m2_loss_mask_5: 0.1508  m2_loss_dice_5: 1.261  m2_loss_ce_6: 0.511  m2_loss_mask_6: 0.1495  m2_loss_dice_6: 1.277  m2_loss_ce_7: 0.5405  m2_loss_mask_7: 0.1497  m2_loss_dice_7: 1.24  m2_loss_ce_8: 0.5038  m2_loss_mask_8: 0.1518  m2_loss_dice_8: 1.243  com_loss_ce: 1.764  com_loss_mask: 0.6926  com_loss_dice: 0.9745    time: 1.4361  last_time: 1.3576  data_time: 0.0504  last_data_time: 0.0458   lr: 0.0001  max_mem: 36309M
[09/08 22:29:47] d2.utils.events INFO:  eta: 0:00:57  iter: 959  total_loss: 39.68  m1_loss_ce: 0.3799  m1_loss_mask: 0.1544  m1_loss_dice: 1.091  m1_loss_ce_0: 0.5004  m1_loss_mask_0: 0.1843  m1_loss_dice_0: 1.316  m1_loss_ce_1: 0.5651  m1_loss_mask_1: 0.1672  m1_loss_dice_1: 1.219  m1_loss_ce_2: 0.4943  m1_loss_mask_2: 0.16  m1_loss_dice_2: 1.173  m1_loss_ce_3: 0.4228  m1_loss_mask_3: 0.1564  m1_loss_dice_3: 1.096  m1_loss_ce_4: 0.3998  m1_loss_mask_4: 0.1563  m1_loss_dice_4: 1.107  m1_loss_ce_5: 0.3888  m1_loss_mask_5: 0.1571  m1_loss_dice_5: 1.11  m1_loss_ce_6: 0.3823  m1_loss_mask_6: 0.1553  m1_loss_dice_6: 1.098  m1_loss_ce_7: 0.3776  m1_loss_mask_7: 0.1544  m1_loss_dice_7: 1.108  m1_loss_ce_8: 0.3756  m1_loss_mask_8: 0.1553  m1_loss_dice_8: 1.116  m2_loss_ce: 0.4468  m2_loss_mask: 0.1632  m2_loss_dice: 1.102  m2_loss_ce_0: 0.5891  m2_loss_mask_0: 0.1927  m2_loss_dice_0: 1.34  m2_loss_ce_1: 0.6378  m2_loss_mask_1: 0.1768  m2_loss_dice_1: 1.232  m2_loss_ce_2: 0.5501  m2_loss_mask_2: 0.1665  m2_loss_dice_2: 1.234  m2_loss_ce_3: 0.5035  m2_loss_mask_3: 0.169  m2_loss_dice_3: 1.18  m2_loss_ce_4: 0.4599  m2_loss_mask_4: 0.1657  m2_loss_dice_4: 1.166  m2_loss_ce_5: 0.4495  m2_loss_mask_5: 0.1618  m2_loss_dice_5: 1.136  m2_loss_ce_6: 0.4676  m2_loss_mask_6: 0.1636  m2_loss_dice_6: 1.148  m2_loss_ce_7: 0.4698  m2_loss_mask_7: 0.1638  m2_loss_dice_7: 1.142  m2_loss_ce_8: 0.4496  m2_loss_mask_8: 0.1643  m2_loss_dice_8: 1.146  com_loss_ce: 1.715  com_loss_mask: 0.6926  com_loss_dice: 0.9711    time: 1.4357  last_time: 1.4192  data_time: 0.0477  last_data_time: 0.0397   lr: 0.0001  max_mem: 36309M
[09/08 22:30:16] d2.utils.events INFO:  eta: 0:00:28  iter: 979  total_loss: 42.01  m1_loss_ce: 0.4428  m1_loss_mask: 0.153  m1_loss_dice: 1.222  m1_loss_ce_0: 0.547  m1_loss_mask_0: 0.1744  m1_loss_dice_0: 1.382  m1_loss_ce_1: 0.6118  m1_loss_mask_1: 0.1681  m1_loss_dice_1: 1.28  m1_loss_ce_2: 0.5012  m1_loss_mask_2: 0.1581  m1_loss_dice_2: 1.244  m1_loss_ce_3: 0.473  m1_loss_mask_3: 0.1543  m1_loss_dice_3: 1.227  m1_loss_ce_4: 0.4731  m1_loss_mask_4: 0.155  m1_loss_dice_4: 1.195  m1_loss_ce_5: 0.4425  m1_loss_mask_5: 0.1579  m1_loss_dice_5: 1.219  m1_loss_ce_6: 0.4228  m1_loss_mask_6: 0.1563  m1_loss_dice_6: 1.206  m1_loss_ce_7: 0.4075  m1_loss_mask_7: 0.1523  m1_loss_dice_7: 1.192  m1_loss_ce_8: 0.4582  m1_loss_mask_8: 0.1517  m1_loss_dice_8: 1.189  m2_loss_ce: 0.4655  m2_loss_mask: 0.1448  m2_loss_dice: 1.135  m2_loss_ce_0: 0.5475  m2_loss_mask_0: 0.1768  m2_loss_dice_0: 1.361  m2_loss_ce_1: 0.6393  m2_loss_mask_1: 0.1611  m2_loss_dice_1: 1.329  m2_loss_ce_2: 0.5294  m2_loss_mask_2: 0.1501  m2_loss_dice_2: 1.255  m2_loss_ce_3: 0.5567  m2_loss_mask_3: 0.1434  m2_loss_dice_3: 1.205  m2_loss_ce_4: 0.4808  m2_loss_mask_4: 0.1468  m2_loss_dice_4: 1.229  m2_loss_ce_5: 0.4871  m2_loss_mask_5: 0.1434  m2_loss_dice_5: 1.216  m2_loss_ce_6: 0.4856  m2_loss_mask_6: 0.1442  m2_loss_dice_6: 1.184  m2_loss_ce_7: 0.4703  m2_loss_mask_7: 0.1438  m2_loss_dice_7: 1.192  m2_loss_ce_8: 0.4906  m2_loss_mask_8: 0.1448  m2_loss_dice_8: 1.173  com_loss_ce: 1.737  com_loss_mask: 0.6926  com_loss_dice: 0.9714    time: 1.4358  last_time: 1.3834  data_time: 0.0611  last_data_time: 0.0444   lr: 0.0001  max_mem: 36309M
[09/08 22:30:45] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_softmax_entropy_2000_1000/model_final.pth
[09/08 22:30:48] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 41  m1_loss_ce: 0.4178  m1_loss_mask: 0.1559  m1_loss_dice: 1.13  m1_loss_ce_0: 0.5227  m1_loss_mask_0: 0.1795  m1_loss_dice_0: 1.356  m1_loss_ce_1: 0.5635  m1_loss_mask_1: 0.1663  m1_loss_dice_1: 1.27  m1_loss_ce_2: 0.4909  m1_loss_mask_2: 0.1591  m1_loss_dice_2: 1.21  m1_loss_ce_3: 0.4665  m1_loss_mask_3: 0.1572  m1_loss_dice_3: 1.202  m1_loss_ce_4: 0.4351  m1_loss_mask_4: 0.159  m1_loss_dice_4: 1.157  m1_loss_ce_5: 0.426  m1_loss_mask_5: 0.1567  m1_loss_dice_5: 1.165  m1_loss_ce_6: 0.4275  m1_loss_mask_6: 0.1551  m1_loss_dice_6: 1.136  m1_loss_ce_7: 0.4227  m1_loss_mask_7: 0.1558  m1_loss_dice_7: 1.145  m1_loss_ce_8: 0.4001  m1_loss_mask_8: 0.1564  m1_loss_dice_8: 1.167  m2_loss_ce: 0.4738  m2_loss_mask: 0.1633  m2_loss_dice: 1.154  m2_loss_ce_0: 0.5702  m2_loss_mask_0: 0.1813  m2_loss_dice_0: 1.38  m2_loss_ce_1: 0.6598  m2_loss_mask_1: 0.1709  m2_loss_dice_1: 1.267  m2_loss_ce_2: 0.5539  m2_loss_mask_2: 0.1634  m2_loss_dice_2: 1.209  m2_loss_ce_3: 0.5128  m2_loss_mask_3: 0.161  m2_loss_dice_3: 1.206  m2_loss_ce_4: 0.4876  m2_loss_mask_4: 0.1599  m2_loss_dice_4: 1.166  m2_loss_ce_5: 0.4748  m2_loss_mask_5: 0.1598  m2_loss_dice_5: 1.186  m2_loss_ce_6: 0.459  m2_loss_mask_6: 0.1638  m2_loss_dice_6: 1.211  m2_loss_ce_7: 0.4769  m2_loss_mask_7: 0.1599  m2_loss_dice_7: 1.15  m2_loss_ce_8: 0.4699  m2_loss_mask_8: 0.1626  m2_loss_dice_8: 1.141  com_loss_ce: 1.763  com_loss_mask: 0.6926  com_loss_dice: 0.9734    time: 1.4359  last_time: 1.3214  data_time: 0.0501  last_data_time: 0.0515   lr: 0.0001  max_mem: 36309M
[09/08 22:30:48] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:23:53 (1.4359 s / it)
[09/08 22:30:48] d2.engine.hooks INFO: Total training time: 0:24:01 (0:00:08 on hooks)
[09/08 22:30:48] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[09/08 22:30:48] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[09/08 22:30:48] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/08 22:30:48] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[09/08 22:30:48] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[09/08 22:32:15] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evalzjzmp75t ...
[09/08 22:33:16] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 60.511 | 80.901 | 73.746 |      19       |
| Things | 53.197 | 80.262 | 65.909 |       8       |
| Stuff  | 65.830 | 81.366 | 79.445 |      11       |
[09/08 22:33:16] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.406 | 97.710 | 99.689 |     Stuff     |
| class_8  | 71.859 | 84.737 | 84.802 |     Stuff     |
| class_11 | 86.770 | 89.139 | 97.342 |     Stuff     |
| class_12 | 45.728 | 77.694 | 58.857 |     Stuff     |
| class_13 | 38.831 | 75.102 | 51.705 |     Stuff     |
| class_17 | 51.031 | 65.132 | 78.351 |     Stuff     |
| class_19 | 51.092 | 69.443 | 73.575 |     Stuff     |
| class_20 | 67.095 | 78.166 | 85.836 |     Stuff     |
| class_21 | 89.089 | 90.200 | 98.768 |     Stuff     |
| class_22 | 37.653 | 75.806 | 49.670 |     Stuff     |
| class_23 | 87.580 | 91.896 | 95.304 |     Stuff     |
| class_24 | 53.776 | 77.551 | 69.343 |    Things     |
| class_25 | 48.548 | 73.186 | 66.335 |    Things     |
| class_26 | 66.209 | 83.707 | 79.096 |    Things     |
| class_27 | 52.086 | 86.441 | 60.256 |    Things     |
| class_28 | 66.312 | 89.475 | 74.112 |    Things     |
| class_31 | 58.698 | 85.602 | 68.571 |    Things     |
| class_32 | 37.639 | 74.312 | 50.649 |    Things     |
| class_33 | 42.306 | 71.820 | 58.906 |    Things     |
[09/08 22:33:16] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[09/08 22:33:16] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[09/08 22:33:16] d2.evaluation.testing INFO: copypaste: 60.5109,80.9010,73.7456,53.1967,80.2618,65.9085,65.8304,81.3659,79.4452,97.4059,97.7097,99.6891,71.8589,84.7375,84.8018,86.7697,89.1394,97.3415,45.7282,77.6935,58.8571,38.8313,75.1023,51.7045,51.0310,65.1316,78.3505,51.0924,69.4425,73.5751,67.0947,78.1661,85.8360,89.0886,90.1999,98.7680,37.6532,75.8063,49.6703,87.5800,91.8959,95.3036,53.7762,77.5508,69.3432,48.5480,73.1865,66.3347,66.2086,83.7070,79.0957,52.0864,86.4412,60.2564,66.3115,89.4751,74.1117,58.6984,85.6018,68.5714,37.6388,74.3125,50.6494,42.3060,71.8196,58.9059
