[09/08 19:39:29] detectron2 INFO: Rank of current process: 0. World size: 2
[09/08 19:39:30] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[09/08 19:39:30] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/cl_Comb_2_softmax_entropy_2000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[09/08 19:39:30] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/cl_Comb_2_softmax_entropy_2000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_2000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_softmax_entropy_2000_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[09/08 19:39:30] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: convnext_large_d_320
    CLIP_PRETRAINED_WEIGHTS: laion2b_s29b_b131k_ft_soup
    EMBED_DIM: 768
    ENSEMBLE_ON_VALID_MASK: false
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_2000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_softmax_entropy_2000_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[09/08 19:39:30] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_softmax_entropy_2000_1000/config.yaml
[09/08 19:39:30] d2.utils.env INFO: Using a generated random seed 31983621
[09/08 19:39:38] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): TimmModel(
        (trunk): ConvNeXt(
          (stem): Sequential(
            (0): Conv2d(3, 192, kernel_size=(4, 4), stride=(4, 4))
            (1): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          )
          (stages): Sequential(
            (0): ConvNeXtStage(
              (downsample): Identity()
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): Identity()
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.003)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.006)
                )
              )
            )
            (1): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.009)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.011)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.014)
                )
              )
            )
            (2): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.017)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.020)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.023)
                )
                (3): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.026)
                )
                (4): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.029)
                )
                (5): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.031)
                )
                (6): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.034)
                )
                (7): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.037)
                )
                (8): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.040)
                )
                (9): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.043)
                )
                (10): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.046)
                )
                (11): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.049)
                )
                (12): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.051)
                )
                (13): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.054)
                )
                (14): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.057)
                )
                (15): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.060)
                )
                (16): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.063)
                )
                (17): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.066)
                )
                (18): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.069)
                )
                (19): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.071)
                )
                (20): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.074)
                )
                (21): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.077)
                )
                (22): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.080)
                )
                (23): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.083)
                )
                (24): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.086)
                )
                (25): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.089)
                )
                (26): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.091)
                )
              )
            )
            (3): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(768, 1536, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.094)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.097)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.100)
                )
              )
            )
          )
          (norm_pre): Identity()
          (head): NormMlpClassifierHead(
            (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Identity())
            (norm): LayerNorm2d((1536,), eps=1e-06, elementwise_affine=True)
            (flatten): Flatten(start_dim=1, end_dim=-1)
            (pre_logits): Identity()
            (drop): Dropout(p=0.0, inplace=False)
            (fc): Identity()
          )
        )
        (head): Sequential(
          (mlp): Mlp(
            (fc1): Linear(in_features=1536, out_features=1536, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (norm): Identity()
            (fc2): Linear(in_features=1536, out_features=768, bias=False)
            (drop2): Dropout(p=0, inplace=False)
          )
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-15): 16 x ResidualAttentionBlock(
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): GELU(approximate='none')
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 768)
      (ln_final): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(1536, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=768, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 768)
)
[09/08 19:39:38] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[09/08 19:39:38] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[09/08 19:39:38] d2.data.build INFO: Using training sampler TrainingSampler
[09/08 19:39:40] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/08 19:39:40] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[09/08 19:39:40] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[09/08 19:39:40] d2.data.build INFO: Making batched data loader with batch_size=4
[09/08 19:39:41] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[09/08 19:39:49] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): TimmModel(
        (trunk): ConvNeXt(
          (stem): Sequential(
            (0): Conv2d(3, 192, kernel_size=(4, 4), stride=(4, 4))
            (1): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          )
          (stages): Sequential(
            (0): ConvNeXtStage(
              (downsample): Identity()
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): Identity()
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.003)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.006)
                )
              )
            )
            (1): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.009)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.011)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.014)
                )
              )
            )
            (2): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.017)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.020)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.023)
                )
                (3): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.026)
                )
                (4): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.029)
                )
                (5): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.031)
                )
                (6): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.034)
                )
                (7): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.037)
                )
                (8): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.040)
                )
                (9): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.043)
                )
                (10): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.046)
                )
                (11): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.049)
                )
                (12): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.051)
                )
                (13): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.054)
                )
                (14): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.057)
                )
                (15): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.060)
                )
                (16): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.063)
                )
                (17): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.066)
                )
                (18): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.069)
                )
                (19): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.071)
                )
                (20): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.074)
                )
                (21): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.077)
                )
                (22): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.080)
                )
                (23): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.083)
                )
                (24): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.086)
                )
                (25): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.089)
                )
                (26): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.091)
                )
              )
            )
            (3): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(768, 1536, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.094)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.097)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.100)
                )
              )
            )
          )
          (norm_pre): Identity()
          (head): NormMlpClassifierHead(
            (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Identity())
            (norm): LayerNorm2d((1536,), eps=1e-06, elementwise_affine=True)
            (flatten): Flatten(start_dim=1, end_dim=-1)
            (pre_logits): Identity()
            (drop): Dropout(p=0.0, inplace=False)
            (fc): Identity()
          )
        )
        (head): Sequential(
          (mlp): Mlp(
            (fc1): Linear(in_features=1536, out_features=1536, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (norm): Identity()
            (fc2): Linear(in_features=1536, out_features=768, bias=False)
            (drop2): Dropout(p=0, inplace=False)
          )
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-15): 16 x ResidualAttentionBlock(
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): GELU(approximate='none')
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 768)
      (ln_final): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(1536, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=768, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 768)
)
[09/08 19:39:49] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_2000_19/model_final.pth ...
[09/08 19:39:49] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_2000_19/model_final.pth ...
[09/08 19:39:49] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_2000_19/model_final.pth ...
[09/08 19:39:49] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_2000_19/model_final.pth ...
[09/08 19:40:31] d2.utils.events INFO:  eta: 0:26:48  iter: 19  total_loss: 38.77  m1_loss_ce: 0.4196  m1_loss_mask: 0.1598  m1_loss_dice: 1.111  m1_loss_ce_0: 0.5303  m1_loss_mask_0: 0.1939  m1_loss_dice_0: 1.294  m1_loss_ce_1: 0.563  m1_loss_mask_1: 0.1714  m1_loss_dice_1: 1.198  m1_loss_ce_2: 0.49  m1_loss_mask_2: 0.1675  m1_loss_dice_2: 1.199  m1_loss_ce_3: 0.4577  m1_loss_mask_3: 0.1633  m1_loss_dice_3: 1.161  m1_loss_ce_4: 0.4407  m1_loss_mask_4: 0.1642  m1_loss_dice_4: 1.126  m1_loss_ce_5: 0.4622  m1_loss_mask_5: 0.1604  m1_loss_dice_5: 1.142  m1_loss_ce_6: 0.407  m1_loss_mask_6: 0.1609  m1_loss_dice_6: 1.15  m1_loss_ce_7: 0.3897  m1_loss_mask_7: 0.1615  m1_loss_dice_7: 1.142  m1_loss_ce_8: 0.4209  m1_loss_mask_8: 0.1609  m1_loss_dice_8: 1.13  m2_loss_ce: 0.3725  m2_loss_mask: 0.1662  m2_loss_dice: 1.118  m2_loss_ce_0: 0.5052  m2_loss_mask_0: 0.1888  m2_loss_dice_0: 1.285  m2_loss_ce_1: 0.5248  m2_loss_mask_1: 0.1713  m2_loss_dice_1: 1.237  m2_loss_ce_2: 0.5145  m2_loss_mask_2: 0.169  m2_loss_dice_2: 1.208  m2_loss_ce_3: 0.4229  m2_loss_mask_3: 0.1687  m2_loss_dice_3: 1.139  m2_loss_ce_4: 0.3816  m2_loss_mask_4: 0.1681  m2_loss_dice_4: 1.136  m2_loss_ce_5: 0.4084  m2_loss_mask_5: 0.1645  m2_loss_dice_5: 1.127  m2_loss_ce_6: 0.4035  m2_loss_mask_6: 0.1667  m2_loss_dice_6: 1.117  m2_loss_ce_7: 0.3831  m2_loss_mask_7: 0.167  m2_loss_dice_7: 1.133  m2_loss_ce_8: 0.3911  m2_loss_mask_8: 0.1661  m2_loss_dice_8: 1.112  com_loss_ce: 1.713  com_loss_mask: 0.6927  com_loss_dice: 0.9704    time: 1.6484  last_time: 1.6434  data_time: 0.2527  last_data_time: 0.0347   lr: 0.0001  max_mem: 36256M
[09/08 19:41:05] d2.utils.events INFO:  eta: 0:26:32  iter: 39  total_loss: 38.72  m1_loss_ce: 0.43  m1_loss_mask: 0.1475  m1_loss_dice: 1.134  m1_loss_ce_0: 0.5415  m1_loss_mask_0: 0.1693  m1_loss_dice_0: 1.339  m1_loss_ce_1: 0.5757  m1_loss_mask_1: 0.1594  m1_loss_dice_1: 1.263  m1_loss_ce_2: 0.536  m1_loss_mask_2: 0.1552  m1_loss_dice_2: 1.206  m1_loss_ce_3: 0.4648  m1_loss_mask_3: 0.148  m1_loss_dice_3: 1.169  m1_loss_ce_4: 0.421  m1_loss_mask_4: 0.1455  m1_loss_dice_4: 1.135  m1_loss_ce_5: 0.4114  m1_loss_mask_5: 0.1475  m1_loss_dice_5: 1.185  m1_loss_ce_6: 0.4082  m1_loss_mask_6: 0.1505  m1_loss_dice_6: 1.148  m1_loss_ce_7: 0.3998  m1_loss_mask_7: 0.1476  m1_loss_dice_7: 1.173  m1_loss_ce_8: 0.3897  m1_loss_mask_8: 0.1495  m1_loss_dice_8: 1.151  m2_loss_ce: 0.3914  m2_loss_mask: 0.1525  m2_loss_dice: 1.15  m2_loss_ce_0: 0.5358  m2_loss_mask_0: 0.1675  m2_loss_dice_0: 1.276  m2_loss_ce_1: 0.5549  m2_loss_mask_1: 0.1559  m2_loss_dice_1: 1.234  m2_loss_ce_2: 0.4883  m2_loss_mask_2: 0.1524  m2_loss_dice_2: 1.212  m2_loss_ce_3: 0.4476  m2_loss_mask_3: 0.1527  m2_loss_dice_3: 1.164  m2_loss_ce_4: 0.4023  m2_loss_mask_4: 0.1521  m2_loss_dice_4: 1.157  m2_loss_ce_5: 0.4272  m2_loss_mask_5: 0.1512  m2_loss_dice_5: 1.15  m2_loss_ce_6: 0.3776  m2_loss_mask_6: 0.1517  m2_loss_dice_6: 1.139  m2_loss_ce_7: 0.391  m2_loss_mask_7: 0.1542  m2_loss_dice_7: 1.15  m2_loss_ce_8: 0.3878  m2_loss_mask_8: 0.1513  m2_loss_dice_8: 1.134  com_loss_ce: 1.716  com_loss_mask: 0.6927  com_loss_dice: 0.9717    time: 1.6709  last_time: 1.6613  data_time: 0.0617  last_data_time: 0.0393   lr: 0.0001  max_mem: 36389M
[09/08 19:41:39] d2.utils.events INFO:  eta: 0:26:06  iter: 59  total_loss: 40.22  m1_loss_ce: 0.416  m1_loss_mask: 0.1562  m1_loss_dice: 1.164  m1_loss_ce_0: 0.5374  m1_loss_mask_0: 0.1874  m1_loss_dice_0: 1.36  m1_loss_ce_1: 0.5934  m1_loss_mask_1: 0.1774  m1_loss_dice_1: 1.316  m1_loss_ce_2: 0.5424  m1_loss_mask_2: 0.1626  m1_loss_dice_2: 1.236  m1_loss_ce_3: 0.4834  m1_loss_mask_3: 0.1647  m1_loss_dice_3: 1.164  m1_loss_ce_4: 0.4505  m1_loss_mask_4: 0.1634  m1_loss_dice_4: 1.162  m1_loss_ce_5: 0.4237  m1_loss_mask_5: 0.1609  m1_loss_dice_5: 1.181  m1_loss_ce_6: 0.4038  m1_loss_mask_6: 0.16  m1_loss_dice_6: 1.139  m1_loss_ce_7: 0.3917  m1_loss_mask_7: 0.1577  m1_loss_dice_7: 1.165  m1_loss_ce_8: 0.4089  m1_loss_mask_8: 0.1588  m1_loss_dice_8: 1.157  m2_loss_ce: 0.4444  m2_loss_mask: 0.1601  m2_loss_dice: 1.126  m2_loss_ce_0: 0.5443  m2_loss_mask_0: 0.1861  m2_loss_dice_0: 1.364  m2_loss_ce_1: 0.5601  m2_loss_mask_1: 0.1779  m2_loss_dice_1: 1.267  m2_loss_ce_2: 0.5333  m2_loss_mask_2: 0.164  m2_loss_dice_2: 1.209  m2_loss_ce_3: 0.4715  m2_loss_mask_3: 0.1615  m2_loss_dice_3: 1.165  m2_loss_ce_4: 0.4542  m2_loss_mask_4: 0.1607  m2_loss_dice_4: 1.195  m2_loss_ce_5: 0.4371  m2_loss_mask_5: 0.1591  m2_loss_dice_5: 1.16  m2_loss_ce_6: 0.4233  m2_loss_mask_6: 0.1578  m2_loss_dice_6: 1.135  m2_loss_ce_7: 0.4431  m2_loss_mask_7: 0.1584  m2_loss_dice_7: 1.14  m2_loss_ce_8: 0.4426  m2_loss_mask_8: 0.1585  m2_loss_dice_8: 1.145  com_loss_ce: 1.737  com_loss_mask: 0.6927  com_loss_dice: 0.9744    time: 1.6775  last_time: 1.6588  data_time: 0.0484  last_data_time: 0.0351   lr: 0.0001  max_mem: 36389M
[09/08 19:42:12] d2.utils.events INFO:  eta: 0:25:36  iter: 79  total_loss: 38.67  m1_loss_ce: 0.4054  m1_loss_mask: 0.1449  m1_loss_dice: 1.116  m1_loss_ce_0: 0.5132  m1_loss_mask_0: 0.1743  m1_loss_dice_0: 1.297  m1_loss_ce_1: 0.5515  m1_loss_mask_1: 0.1541  m1_loss_dice_1: 1.23  m1_loss_ce_2: 0.4655  m1_loss_mask_2: 0.148  m1_loss_dice_2: 1.237  m1_loss_ce_3: 0.4188  m1_loss_mask_3: 0.1506  m1_loss_dice_3: 1.179  m1_loss_ce_4: 0.4388  m1_loss_mask_4: 0.1466  m1_loss_dice_4: 1.136  m1_loss_ce_5: 0.4085  m1_loss_mask_5: 0.1461  m1_loss_dice_5: 1.122  m1_loss_ce_6: 0.4063  m1_loss_mask_6: 0.147  m1_loss_dice_6: 1.135  m1_loss_ce_7: 0.4159  m1_loss_mask_7: 0.1457  m1_loss_dice_7: 1.166  m1_loss_ce_8: 0.3745  m1_loss_mask_8: 0.1454  m1_loss_dice_8: 1.121  m2_loss_ce: 0.3973  m2_loss_mask: 0.1454  m2_loss_dice: 1.101  m2_loss_ce_0: 0.5439  m2_loss_mask_0: 0.1711  m2_loss_dice_0: 1.286  m2_loss_ce_1: 0.5372  m2_loss_mask_1: 0.1566  m2_loss_dice_1: 1.222  m2_loss_ce_2: 0.4559  m2_loss_mask_2: 0.1525  m2_loss_dice_2: 1.252  m2_loss_ce_3: 0.4302  m2_loss_mask_3: 0.1502  m2_loss_dice_3: 1.113  m2_loss_ce_4: 0.4112  m2_loss_mask_4: 0.1498  m2_loss_dice_4: 1.145  m2_loss_ce_5: 0.4173  m2_loss_mask_5: 0.1468  m2_loss_dice_5: 1.14  m2_loss_ce_6: 0.3947  m2_loss_mask_6: 0.1504  m2_loss_dice_6: 1.122  m2_loss_ce_7: 0.3689  m2_loss_mask_7: 0.1466  m2_loss_dice_7: 1.093  m2_loss_ce_8: 0.413  m2_loss_mask_8: 0.1466  m2_loss_dice_8: 1.103  com_loss_ce: 1.723  com_loss_mask: 0.6926  com_loss_dice: 0.973    time: 1.6803  last_time: 1.7402  data_time: 0.0499  last_data_time: 0.0536   lr: 0.0001  max_mem: 36869M
[09/08 19:42:46] d2.utils.events INFO:  eta: 0:25:05  iter: 99  total_loss: 39.45  m1_loss_ce: 0.4046  m1_loss_mask: 0.1451  m1_loss_dice: 1.156  m1_loss_ce_0: 0.5065  m1_loss_mask_0: 0.1618  m1_loss_dice_0: 1.346  m1_loss_ce_1: 0.5528  m1_loss_mask_1: 0.1562  m1_loss_dice_1: 1.257  m1_loss_ce_2: 0.4855  m1_loss_mask_2: 0.1512  m1_loss_dice_2: 1.204  m1_loss_ce_3: 0.4457  m1_loss_mask_3: 0.15  m1_loss_dice_3: 1.206  m1_loss_ce_4: 0.4121  m1_loss_mask_4: 0.1509  m1_loss_dice_4: 1.193  m1_loss_ce_5: 0.387  m1_loss_mask_5: 0.1465  m1_loss_dice_5: 1.168  m1_loss_ce_6: 0.4068  m1_loss_mask_6: 0.1428  m1_loss_dice_6: 1.144  m1_loss_ce_7: 0.4185  m1_loss_mask_7: 0.1475  m1_loss_dice_7: 1.167  m1_loss_ce_8: 0.4119  m1_loss_mask_8: 0.1465  m1_loss_dice_8: 1.172  m2_loss_ce: 0.4203  m2_loss_mask: 0.1434  m2_loss_dice: 1.111  m2_loss_ce_0: 0.5228  m2_loss_mask_0: 0.1602  m2_loss_dice_0: 1.348  m2_loss_ce_1: 0.5581  m2_loss_mask_1: 0.1518  m2_loss_dice_1: 1.241  m2_loss_ce_2: 0.5124  m2_loss_mask_2: 0.1479  m2_loss_dice_2: 1.22  m2_loss_ce_3: 0.4578  m2_loss_mask_3: 0.1468  m2_loss_dice_3: 1.156  m2_loss_ce_4: 0.4185  m2_loss_mask_4: 0.1452  m2_loss_dice_4: 1.155  m2_loss_ce_5: 0.4148  m2_loss_mask_5: 0.1443  m2_loss_dice_5: 1.154  m2_loss_ce_6: 0.3933  m2_loss_mask_6: 0.1433  m2_loss_dice_6: 1.154  m2_loss_ce_7: 0.3842  m2_loss_mask_7: 0.1424  m2_loss_dice_7: 1.134  m2_loss_ce_8: 0.3849  m2_loss_mask_8: 0.1433  m2_loss_dice_8: 1.14  com_loss_ce: 1.71  com_loss_mask: 0.6926  com_loss_dice: 0.9747    time: 1.6810  last_time: 1.6629  data_time: 0.0512  last_data_time: 0.0532   lr: 0.0001  max_mem: 36869M
[09/08 19:43:20] d2.utils.events INFO:  eta: 0:24:33  iter: 119  total_loss: 38.1  m1_loss_ce: 0.3524  m1_loss_mask: 0.154  m1_loss_dice: 1.081  m1_loss_ce_0: 0.5089  m1_loss_mask_0: 0.1748  m1_loss_dice_0: 1.264  m1_loss_ce_1: 0.5812  m1_loss_mask_1: 0.1629  m1_loss_dice_1: 1.189  m1_loss_ce_2: 0.4942  m1_loss_mask_2: 0.1599  m1_loss_dice_2: 1.151  m1_loss_ce_3: 0.4296  m1_loss_mask_3: 0.1571  m1_loss_dice_3: 1.111  m1_loss_ce_4: 0.3779  m1_loss_mask_4: 0.1563  m1_loss_dice_4: 1.103  m1_loss_ce_5: 0.3883  m1_loss_mask_5: 0.1561  m1_loss_dice_5: 1.101  m1_loss_ce_6: 0.3859  m1_loss_mask_6: 0.1582  m1_loss_dice_6: 1.085  m1_loss_ce_7: 0.3988  m1_loss_mask_7: 0.1576  m1_loss_dice_7: 1.085  m1_loss_ce_8: 0.3744  m1_loss_mask_8: 0.1555  m1_loss_dice_8: 1.05  m2_loss_ce: 0.3885  m2_loss_mask: 0.1563  m2_loss_dice: 1.105  m2_loss_ce_0: 0.5009  m2_loss_mask_0: 0.175  m2_loss_dice_0: 1.294  m2_loss_ce_1: 0.5448  m2_loss_mask_1: 0.163  m2_loss_dice_1: 1.247  m2_loss_ce_2: 0.49  m2_loss_mask_2: 0.1563  m2_loss_dice_2: 1.142  m2_loss_ce_3: 0.4298  m2_loss_mask_3: 0.157  m2_loss_dice_3: 1.108  m2_loss_ce_4: 0.4229  m2_loss_mask_4: 0.1531  m2_loss_dice_4: 1.105  m2_loss_ce_5: 0.4113  m2_loss_mask_5: 0.1538  m2_loss_dice_5: 1.102  m2_loss_ce_6: 0.4047  m2_loss_mask_6: 0.1541  m2_loss_dice_6: 1.07  m2_loss_ce_7: 0.3947  m2_loss_mask_7: 0.1539  m2_loss_dice_7: 1.054  m2_loss_ce_8: 0.3861  m2_loss_mask_8: 0.154  m2_loss_dice_8: 1.054  com_loss_ce: 1.711  com_loss_mask: 0.6926  com_loss_dice: 0.9705    time: 1.6815  last_time: 1.8336  data_time: 0.0620  last_data_time: 0.2001   lr: 0.0001  max_mem: 36869M
[09/08 19:43:54] d2.utils.events INFO:  eta: 0:23:59  iter: 139  total_loss: 40.21  m1_loss_ce: 0.4403  m1_loss_mask: 0.1461  m1_loss_dice: 1.14  m1_loss_ce_0: 0.53  m1_loss_mask_0: 0.1706  m1_loss_dice_0: 1.317  m1_loss_ce_1: 0.5682  m1_loss_mask_1: 0.1576  m1_loss_dice_1: 1.264  m1_loss_ce_2: 0.5158  m1_loss_mask_2: 0.1487  m1_loss_dice_2: 1.249  m1_loss_ce_3: 0.46  m1_loss_mask_3: 0.1494  m1_loss_dice_3: 1.143  m1_loss_ce_4: 0.4179  m1_loss_mask_4: 0.1506  m1_loss_dice_4: 1.178  m1_loss_ce_5: 0.4117  m1_loss_mask_5: 0.1458  m1_loss_dice_5: 1.161  m1_loss_ce_6: 0.3899  m1_loss_mask_6: 0.1484  m1_loss_dice_6: 1.155  m1_loss_ce_7: 0.4155  m1_loss_mask_7: 0.1466  m1_loss_dice_7: 1.144  m1_loss_ce_8: 0.4077  m1_loss_mask_8: 0.1486  m1_loss_dice_8: 1.155  m2_loss_ce: 0.403  m2_loss_mask: 0.146  m2_loss_dice: 1.146  m2_loss_ce_0: 0.4878  m2_loss_mask_0: 0.1725  m2_loss_dice_0: 1.309  m2_loss_ce_1: 0.5457  m2_loss_mask_1: 0.1583  m2_loss_dice_1: 1.265  m2_loss_ce_2: 0.4971  m2_loss_mask_2: 0.1505  m2_loss_dice_2: 1.236  m2_loss_ce_3: 0.451  m2_loss_mask_3: 0.1501  m2_loss_dice_3: 1.169  m2_loss_ce_4: 0.439  m2_loss_mask_4: 0.1473  m2_loss_dice_4: 1.189  m2_loss_ce_5: 0.4313  m2_loss_mask_5: 0.1454  m2_loss_dice_5: 1.182  m2_loss_ce_6: 0.3935  m2_loss_mask_6: 0.1467  m2_loss_dice_6: 1.182  m2_loss_ce_7: 0.3947  m2_loss_mask_7: 0.1448  m2_loss_dice_7: 1.149  m2_loss_ce_8: 0.3694  m2_loss_mask_8: 0.1452  m2_loss_dice_8: 1.147  com_loss_ce: 1.732  com_loss_mask: 0.6926  com_loss_dice: 0.9708    time: 1.6830  last_time: 1.6703  data_time: 0.0443  last_data_time: 0.0361   lr: 0.0001  max_mem: 36869M
[09/08 19:44:28] d2.utils.events INFO:  eta: 0:23:27  iter: 159  total_loss: 39.87  m1_loss_ce: 0.4296  m1_loss_mask: 0.1534  m1_loss_dice: 1.101  m1_loss_ce_0: 0.5306  m1_loss_mask_0: 0.1866  m1_loss_dice_0: 1.338  m1_loss_ce_1: 0.5583  m1_loss_mask_1: 0.1669  m1_loss_dice_1: 1.264  m1_loss_ce_2: 0.4728  m1_loss_mask_2: 0.1578  m1_loss_dice_2: 1.216  m1_loss_ce_3: 0.4554  m1_loss_mask_3: 0.1613  m1_loss_dice_3: 1.136  m1_loss_ce_4: 0.4108  m1_loss_mask_4: 0.1628  m1_loss_dice_4: 1.156  m1_loss_ce_5: 0.4093  m1_loss_mask_5: 0.1581  m1_loss_dice_5: 1.168  m1_loss_ce_6: 0.4343  m1_loss_mask_6: 0.1545  m1_loss_dice_6: 1.118  m1_loss_ce_7: 0.4284  m1_loss_mask_7: 0.1546  m1_loss_dice_7: 1.103  m1_loss_ce_8: 0.4115  m1_loss_mask_8: 0.1526  m1_loss_dice_8: 1.124  m2_loss_ce: 0.4304  m2_loss_mask: 0.161  m2_loss_dice: 1.084  m2_loss_ce_0: 0.5369  m2_loss_mask_0: 0.1771  m2_loss_dice_0: 1.365  m2_loss_ce_1: 0.6113  m2_loss_mask_1: 0.1643  m2_loss_dice_1: 1.244  m2_loss_ce_2: 0.5241  m2_loss_mask_2: 0.1621  m2_loss_dice_2: 1.178  m2_loss_ce_3: 0.4702  m2_loss_mask_3: 0.1643  m2_loss_dice_3: 1.134  m2_loss_ce_4: 0.4658  m2_loss_mask_4: 0.1603  m2_loss_dice_4: 1.152  m2_loss_ce_5: 0.4158  m2_loss_mask_5: 0.1587  m2_loss_dice_5: 1.132  m2_loss_ce_6: 0.4353  m2_loss_mask_6: 0.1638  m2_loss_dice_6: 1.114  m2_loss_ce_7: 0.4221  m2_loss_mask_7: 0.1609  m2_loss_dice_7: 1.108  m2_loss_ce_8: 0.4468  m2_loss_mask_8: 0.1626  m2_loss_dice_8: 1.102  com_loss_ce: 1.74  com_loss_mask: 0.6926  com_loss_dice: 0.9709    time: 1.6861  last_time: 1.6672  data_time: 0.0560  last_data_time: 0.0465   lr: 0.0001  max_mem: 36932M
[09/08 19:45:02] d2.utils.events INFO:  eta: 0:22:56  iter: 179  total_loss: 38.53  m1_loss_ce: 0.3919  m1_loss_mask: 0.1364  m1_loss_dice: 1.124  m1_loss_ce_0: 0.4955  m1_loss_mask_0: 0.1628  m1_loss_dice_0: 1.348  m1_loss_ce_1: 0.5397  m1_loss_mask_1: 0.1493  m1_loss_dice_1: 1.237  m1_loss_ce_2: 0.4921  m1_loss_mask_2: 0.1424  m1_loss_dice_2: 1.184  m1_loss_ce_3: 0.4507  m1_loss_mask_3: 0.1432  m1_loss_dice_3: 1.151  m1_loss_ce_4: 0.4349  m1_loss_mask_4: 0.1424  m1_loss_dice_4: 1.127  m1_loss_ce_5: 0.4186  m1_loss_mask_5: 0.1414  m1_loss_dice_5: 1.168  m1_loss_ce_6: 0.3922  m1_loss_mask_6: 0.14  m1_loss_dice_6: 1.105  m1_loss_ce_7: 0.429  m1_loss_mask_7: 0.1406  m1_loss_dice_7: 1.099  m1_loss_ce_8: 0.3901  m1_loss_mask_8: 0.1393  m1_loss_dice_8: 1.112  m2_loss_ce: 0.4008  m2_loss_mask: 0.1456  m2_loss_dice: 1.152  m2_loss_ce_0: 0.5078  m2_loss_mask_0: 0.167  m2_loss_dice_0: 1.321  m2_loss_ce_1: 0.5306  m2_loss_mask_1: 0.1563  m2_loss_dice_1: 1.246  m2_loss_ce_2: 0.4996  m2_loss_mask_2: 0.1519  m2_loss_dice_2: 1.21  m2_loss_ce_3: 0.4071  m2_loss_mask_3: 0.1503  m2_loss_dice_3: 1.154  m2_loss_ce_4: 0.4327  m2_loss_mask_4: 0.1496  m2_loss_dice_4: 1.139  m2_loss_ce_5: 0.4013  m2_loss_mask_5: 0.1482  m2_loss_dice_5: 1.17  m2_loss_ce_6: 0.4191  m2_loss_mask_6: 0.1503  m2_loss_dice_6: 1.128  m2_loss_ce_7: 0.3849  m2_loss_mask_7: 0.1459  m2_loss_dice_7: 1.123  m2_loss_ce_8: 0.3973  m2_loss_mask_8: 0.1451  m2_loss_dice_8: 1.136  com_loss_ce: 1.725  com_loss_mask: 0.6926  com_loss_dice: 0.974    time: 1.6866  last_time: 1.6655  data_time: 0.0460  last_data_time: 0.0469   lr: 0.0001  max_mem: 36932M
[09/08 19:45:36] d2.utils.events INFO:  eta: 0:22:25  iter: 199  total_loss: 38.32  m1_loss_ce: 0.394  m1_loss_mask: 0.1605  m1_loss_dice: 1.106  m1_loss_ce_0: 0.478  m1_loss_mask_0: 0.1896  m1_loss_dice_0: 1.32  m1_loss_ce_1: 0.5268  m1_loss_mask_1: 0.1724  m1_loss_dice_1: 1.264  m1_loss_ce_2: 0.471  m1_loss_mask_2: 0.165  m1_loss_dice_2: 1.206  m1_loss_ce_3: 0.4135  m1_loss_mask_3: 0.1644  m1_loss_dice_3: 1.132  m1_loss_ce_4: 0.3931  m1_loss_mask_4: 0.1633  m1_loss_dice_4: 1.137  m1_loss_ce_5: 0.3958  m1_loss_mask_5: 0.1611  m1_loss_dice_5: 1.131  m1_loss_ce_6: 0.3973  m1_loss_mask_6: 0.161  m1_loss_dice_6: 1.066  m1_loss_ce_7: 0.378  m1_loss_mask_7: 0.1617  m1_loss_dice_7: 1.1  m1_loss_ce_8: 0.3894  m1_loss_mask_8: 0.1591  m1_loss_dice_8: 1.109  m2_loss_ce: 0.3941  m2_loss_mask: 0.1637  m2_loss_dice: 1.066  m2_loss_ce_0: 0.5131  m2_loss_mask_0: 0.187  m2_loss_dice_0: 1.289  m2_loss_ce_1: 0.5359  m2_loss_mask_1: 0.1801  m2_loss_dice_1: 1.206  m2_loss_ce_2: 0.4913  m2_loss_mask_2: 0.1723  m2_loss_dice_2: 1.169  m2_loss_ce_3: 0.4329  m2_loss_mask_3: 0.1753  m2_loss_dice_3: 1.119  m2_loss_ce_4: 0.4056  m2_loss_mask_4: 0.1714  m2_loss_dice_4: 1.117  m2_loss_ce_5: 0.3891  m2_loss_mask_5: 0.1693  m2_loss_dice_5: 1.121  m2_loss_ce_6: 0.3882  m2_loss_mask_6: 0.1722  m2_loss_dice_6: 1.109  m2_loss_ce_7: 0.4018  m2_loss_mask_7: 0.1657  m2_loss_dice_7: 1.118  m2_loss_ce_8: 0.3939  m2_loss_mask_8: 0.165  m2_loss_dice_8: 1.087  com_loss_ce: 1.717  com_loss_mask: 0.6926  com_loss_dice: 0.9734    time: 1.6889  last_time: 1.7231  data_time: 0.0574  last_data_time: 0.0395   lr: 0.0001  max_mem: 36932M
[09/08 19:46:11] d2.utils.events INFO:  eta: 0:21:52  iter: 219  total_loss: 38.3  m1_loss_ce: 0.3989  m1_loss_mask: 0.1532  m1_loss_dice: 1.13  m1_loss_ce_0: 0.5209  m1_loss_mask_0: 0.1719  m1_loss_dice_0: 1.267  m1_loss_ce_1: 0.5665  m1_loss_mask_1: 0.1588  m1_loss_dice_1: 1.255  m1_loss_ce_2: 0.4972  m1_loss_mask_2: 0.157  m1_loss_dice_2: 1.186  m1_loss_ce_3: 0.4453  m1_loss_mask_3: 0.1541  m1_loss_dice_3: 1.138  m1_loss_ce_4: 0.3994  m1_loss_mask_4: 0.1539  m1_loss_dice_4: 1.154  m1_loss_ce_5: 0.4239  m1_loss_mask_5: 0.153  m1_loss_dice_5: 1.143  m1_loss_ce_6: 0.3814  m1_loss_mask_6: 0.1528  m1_loss_dice_6: 1.118  m1_loss_ce_7: 0.3813  m1_loss_mask_7: 0.1524  m1_loss_dice_7: 1.143  m1_loss_ce_8: 0.3885  m1_loss_mask_8: 0.1535  m1_loss_dice_8: 1.159  m2_loss_ce: 0.4247  m2_loss_mask: 0.1523  m2_loss_dice: 1.143  m2_loss_ce_0: 0.5145  m2_loss_mask_0: 0.1705  m2_loss_dice_0: 1.327  m2_loss_ce_1: 0.5591  m2_loss_mask_1: 0.16  m2_loss_dice_1: 1.255  m2_loss_ce_2: 0.506  m2_loss_mask_2: 0.1557  m2_loss_dice_2: 1.223  m2_loss_ce_3: 0.453  m2_loss_mask_3: 0.1526  m2_loss_dice_3: 1.111  m2_loss_ce_4: 0.4347  m2_loss_mask_4: 0.1526  m2_loss_dice_4: 1.142  m2_loss_ce_5: 0.4162  m2_loss_mask_5: 0.1521  m2_loss_dice_5: 1.128  m2_loss_ce_6: 0.4075  m2_loss_mask_6: 0.1527  m2_loss_dice_6: 1.12  m2_loss_ce_7: 0.405  m2_loss_mask_7: 0.1507  m2_loss_dice_7: 1.093  m2_loss_ce_8: 0.3996  m2_loss_mask_8: 0.1511  m2_loss_dice_8: 1.087  com_loss_ce: 1.73  com_loss_mask: 0.6926  com_loss_dice: 0.9733    time: 1.6897  last_time: 1.7307  data_time: 0.0500  last_data_time: 0.0429   lr: 0.0001  max_mem: 36932M
[09/08 19:46:45] d2.utils.events INFO:  eta: 0:21:22  iter: 239  total_loss: 38.88  m1_loss_ce: 0.4156  m1_loss_mask: 0.1487  m1_loss_dice: 1.159  m1_loss_ce_0: 0.5217  m1_loss_mask_0: 0.1684  m1_loss_dice_0: 1.302  m1_loss_ce_1: 0.5814  m1_loss_mask_1: 0.1593  m1_loss_dice_1: 1.253  m1_loss_ce_2: 0.5101  m1_loss_mask_2: 0.1546  m1_loss_dice_2: 1.209  m1_loss_ce_3: 0.439  m1_loss_mask_3: 0.1542  m1_loss_dice_3: 1.126  m1_loss_ce_4: 0.4388  m1_loss_mask_4: 0.1501  m1_loss_dice_4: 1.14  m1_loss_ce_5: 0.423  m1_loss_mask_5: 0.1466  m1_loss_dice_5: 1.136  m1_loss_ce_6: 0.379  m1_loss_mask_6: 0.1466  m1_loss_dice_6: 1.122  m1_loss_ce_7: 0.4018  m1_loss_mask_7: 0.1472  m1_loss_dice_7: 1.131  m1_loss_ce_8: 0.3754  m1_loss_mask_8: 0.1478  m1_loss_dice_8: 1.136  m2_loss_ce: 0.4146  m2_loss_mask: 0.1507  m2_loss_dice: 1.108  m2_loss_ce_0: 0.5037  m2_loss_mask_0: 0.1659  m2_loss_dice_0: 1.29  m2_loss_ce_1: 0.5917  m2_loss_mask_1: 0.1583  m2_loss_dice_1: 1.241  m2_loss_ce_2: 0.5036  m2_loss_mask_2: 0.1531  m2_loss_dice_2: 1.207  m2_loss_ce_3: 0.4647  m2_loss_mask_3: 0.151  m2_loss_dice_3: 1.169  m2_loss_ce_4: 0.4132  m2_loss_mask_4: 0.1531  m2_loss_dice_4: 1.175  m2_loss_ce_5: 0.4237  m2_loss_mask_5: 0.1532  m2_loss_dice_5: 1.173  m2_loss_ce_6: 0.4012  m2_loss_mask_6: 0.1522  m2_loss_dice_6: 1.117  m2_loss_ce_7: 0.4004  m2_loss_mask_7: 0.1507  m2_loss_dice_7: 1.129  m2_loss_ce_8: 0.3983  m2_loss_mask_8: 0.1506  m2_loss_dice_8: 1.131  com_loss_ce: 1.723  com_loss_mask: 0.6927  com_loss_dice: 0.9742    time: 1.6929  last_time: 1.8135  data_time: 0.0637  last_data_time: 0.1617   lr: 0.0001  max_mem: 36932M
[09/08 19:47:20] d2.utils.events INFO:  eta: 0:20:50  iter: 259  total_loss: 38.11  m1_loss_ce: 0.3884  m1_loss_mask: 0.1495  m1_loss_dice: 1.143  m1_loss_ce_0: 0.4839  m1_loss_mask_0: 0.1768  m1_loss_dice_0: 1.307  m1_loss_ce_1: 0.5185  m1_loss_mask_1: 0.1667  m1_loss_dice_1: 1.231  m1_loss_ce_2: 0.473  m1_loss_mask_2: 0.1577  m1_loss_dice_2: 1.199  m1_loss_ce_3: 0.4397  m1_loss_mask_3: 0.156  m1_loss_dice_3: 1.158  m1_loss_ce_4: 0.4101  m1_loss_mask_4: 0.1545  m1_loss_dice_4: 1.136  m1_loss_ce_5: 0.4046  m1_loss_mask_5: 0.1548  m1_loss_dice_5: 1.159  m1_loss_ce_6: 0.4003  m1_loss_mask_6: 0.1513  m1_loss_dice_6: 1.129  m1_loss_ce_7: 0.3969  m1_loss_mask_7: 0.1519  m1_loss_dice_7: 1.115  m1_loss_ce_8: 0.4099  m1_loss_mask_8: 0.1518  m1_loss_dice_8: 1.118  m2_loss_ce: 0.4038  m2_loss_mask: 0.1528  m2_loss_dice: 1.111  m2_loss_ce_0: 0.5139  m2_loss_mask_0: 0.1724  m2_loss_dice_0: 1.333  m2_loss_ce_1: 0.5504  m2_loss_mask_1: 0.1668  m2_loss_dice_1: 1.22  m2_loss_ce_2: 0.5161  m2_loss_mask_2: 0.1543  m2_loss_dice_2: 1.208  m2_loss_ce_3: 0.4444  m2_loss_mask_3: 0.1551  m2_loss_dice_3: 1.196  m2_loss_ce_4: 0.4105  m2_loss_mask_4: 0.1527  m2_loss_dice_4: 1.142  m2_loss_ce_5: 0.394  m2_loss_mask_5: 0.1509  m2_loss_dice_5: 1.144  m2_loss_ce_6: 0.4062  m2_loss_mask_6: 0.1532  m2_loss_dice_6: 1.117  m2_loss_ce_7: 0.3925  m2_loss_mask_7: 0.1522  m2_loss_dice_7: 1.102  m2_loss_ce_8: 0.4223  m2_loss_mask_8: 0.1507  m2_loss_dice_8: 1.095  com_loss_ce: 1.737  com_loss_mask: 0.6926  com_loss_dice: 0.9711    time: 1.6948  last_time: 1.7774  data_time: 0.0549  last_data_time: 0.0433   lr: 0.0001  max_mem: 36932M
[09/08 19:47:54] d2.utils.events INFO:  eta: 0:20:17  iter: 279  total_loss: 37.75  m1_loss_ce: 0.3843  m1_loss_mask: 0.1473  m1_loss_dice: 1.08  m1_loss_ce_0: 0.5092  m1_loss_mask_0: 0.1736  m1_loss_dice_0: 1.299  m1_loss_ce_1: 0.5479  m1_loss_mask_1: 0.1624  m1_loss_dice_1: 1.214  m1_loss_ce_2: 0.512  m1_loss_mask_2: 0.1488  m1_loss_dice_2: 1.166  m1_loss_ce_3: 0.4323  m1_loss_mask_3: 0.1484  m1_loss_dice_3: 1.078  m1_loss_ce_4: 0.4356  m1_loss_mask_4: 0.1484  m1_loss_dice_4: 1.08  m1_loss_ce_5: 0.3885  m1_loss_mask_5: 0.1493  m1_loss_dice_5: 1.078  m1_loss_ce_6: 0.3707  m1_loss_mask_6: 0.148  m1_loss_dice_6: 1.069  m1_loss_ce_7: 0.37  m1_loss_mask_7: 0.1484  m1_loss_dice_7: 1.101  m1_loss_ce_8: 0.3666  m1_loss_mask_8: 0.1471  m1_loss_dice_8: 1.08  m2_loss_ce: 0.393  m2_loss_mask: 0.1455  m2_loss_dice: 1.066  m2_loss_ce_0: 0.5046  m2_loss_mask_0: 0.1685  m2_loss_dice_0: 1.277  m2_loss_ce_1: 0.575  m2_loss_mask_1: 0.1603  m2_loss_dice_1: 1.172  m2_loss_ce_2: 0.5033  m2_loss_mask_2: 0.1536  m2_loss_dice_2: 1.138  m2_loss_ce_3: 0.4714  m2_loss_mask_3: 0.1491  m2_loss_dice_3: 1.088  m2_loss_ce_4: 0.4359  m2_loss_mask_4: 0.1457  m2_loss_dice_4: 1.07  m2_loss_ce_5: 0.4529  m2_loss_mask_5: 0.147  m2_loss_dice_5: 1.069  m2_loss_ce_6: 0.3877  m2_loss_mask_6: 0.1489  m2_loss_dice_6: 1.068  m2_loss_ce_7: 0.3985  m2_loss_mask_7: 0.1481  m2_loss_dice_7: 1.08  m2_loss_ce_8: 0.4064  m2_loss_mask_8: 0.1465  m2_loss_dice_8: 1.092  com_loss_ce: 1.735  com_loss_mask: 0.6926  com_loss_dice: 0.9719    time: 1.6954  last_time: 1.7243  data_time: 0.0473  last_data_time: 0.0518   lr: 0.0001  max_mem: 36932M
[09/08 19:48:28] d2.utils.events INFO:  eta: 0:19:43  iter: 299  total_loss: 37.51  m1_loss_ce: 0.3779  m1_loss_mask: 0.1332  m1_loss_dice: 1.068  m1_loss_ce_0: 0.4894  m1_loss_mask_0: 0.1598  m1_loss_dice_0: 1.3  m1_loss_ce_1: 0.5579  m1_loss_mask_1: 0.1479  m1_loss_dice_1: 1.201  m1_loss_ce_2: 0.4861  m1_loss_mask_2: 0.1425  m1_loss_dice_2: 1.148  m1_loss_ce_3: 0.4392  m1_loss_mask_3: 0.1454  m1_loss_dice_3: 1.155  m1_loss_ce_4: 0.4254  m1_loss_mask_4: 0.1398  m1_loss_dice_4: 1.132  m1_loss_ce_5: 0.4085  m1_loss_mask_5: 0.1402  m1_loss_dice_5: 1.116  m1_loss_ce_6: 0.4009  m1_loss_mask_6: 0.1353  m1_loss_dice_6: 1.089  m1_loss_ce_7: 0.3999  m1_loss_mask_7: 0.1344  m1_loss_dice_7: 1.089  m1_loss_ce_8: 0.3791  m1_loss_mask_8: 0.135  m1_loss_dice_8: 1.103  m2_loss_ce: 0.3874  m2_loss_mask: 0.1448  m2_loss_dice: 1.092  m2_loss_ce_0: 0.5036  m2_loss_mask_0: 0.1613  m2_loss_dice_0: 1.287  m2_loss_ce_1: 0.5269  m2_loss_mask_1: 0.1553  m2_loss_dice_1: 1.208  m2_loss_ce_2: 0.5041  m2_loss_mask_2: 0.1487  m2_loss_dice_2: 1.154  m2_loss_ce_3: 0.4443  m2_loss_mask_3: 0.1452  m2_loss_dice_3: 1.127  m2_loss_ce_4: 0.3762  m2_loss_mask_4: 0.1463  m2_loss_dice_4: 1.12  m2_loss_ce_5: 0.4012  m2_loss_mask_5: 0.1445  m2_loss_dice_5: 1.133  m2_loss_ce_6: 0.403  m2_loss_mask_6: 0.1462  m2_loss_dice_6: 1.076  m2_loss_ce_7: 0.3893  m2_loss_mask_7: 0.1448  m2_loss_dice_7: 1.093  m2_loss_ce_8: 0.4106  m2_loss_mask_8: 0.145  m2_loss_dice_8: 1.071  com_loss_ce: 1.73  com_loss_mask: 0.6926  com_loss_dice: 0.9703    time: 1.6961  last_time: 1.6569  data_time: 0.0486  last_data_time: 0.0495   lr: 0.0001  max_mem: 36932M
[09/08 19:49:02] d2.utils.events INFO:  eta: 0:19:10  iter: 319  total_loss: 38.13  m1_loss_ce: 0.3813  m1_loss_mask: 0.1482  m1_loss_dice: 1.128  m1_loss_ce_0: 0.4659  m1_loss_mask_0: 0.1744  m1_loss_dice_0: 1.295  m1_loss_ce_1: 0.5075  m1_loss_mask_1: 0.1607  m1_loss_dice_1: 1.225  m1_loss_ce_2: 0.4455  m1_loss_mask_2: 0.1535  m1_loss_dice_2: 1.165  m1_loss_ce_3: 0.4243  m1_loss_mask_3: 0.1521  m1_loss_dice_3: 1.134  m1_loss_ce_4: 0.3847  m1_loss_mask_4: 0.1509  m1_loss_dice_4: 1.125  m1_loss_ce_5: 0.3654  m1_loss_mask_5: 0.1512  m1_loss_dice_5: 1.155  m1_loss_ce_6: 0.351  m1_loss_mask_6: 0.1535  m1_loss_dice_6: 1.121  m1_loss_ce_7: 0.3678  m1_loss_mask_7: 0.1495  m1_loss_dice_7: 1.145  m1_loss_ce_8: 0.345  m1_loss_mask_8: 0.1514  m1_loss_dice_8: 1.129  m2_loss_ce: 0.3506  m2_loss_mask: 0.1538  m2_loss_dice: 1.083  m2_loss_ce_0: 0.4898  m2_loss_mask_0: 0.1685  m2_loss_dice_0: 1.302  m2_loss_ce_1: 0.5197  m2_loss_mask_1: 0.1578  m2_loss_dice_1: 1.249  m2_loss_ce_2: 0.4512  m2_loss_mask_2: 0.1565  m2_loss_dice_2: 1.183  m2_loss_ce_3: 0.4118  m2_loss_mask_3: 0.1517  m2_loss_dice_3: 1.13  m2_loss_ce_4: 0.3822  m2_loss_mask_4: 0.1504  m2_loss_dice_4: 1.111  m2_loss_ce_5: 0.3646  m2_loss_mask_5: 0.1514  m2_loss_dice_5: 1.097  m2_loss_ce_6: 0.3691  m2_loss_mask_6: 0.152  m2_loss_dice_6: 1.103  m2_loss_ce_7: 0.3553  m2_loss_mask_7: 0.1531  m2_loss_dice_7: 1.08  m2_loss_ce_8: 0.3634  m2_loss_mask_8: 0.1542  m2_loss_dice_8: 1.104  com_loss_ce: 1.721  com_loss_mask: 0.6926  com_loss_dice: 0.9741    time: 1.6961  last_time: 1.6860  data_time: 0.0464  last_data_time: 0.0436   lr: 0.0001  max_mem: 36932M
[09/08 19:49:37] d2.utils.events INFO:  eta: 0:18:37  iter: 339  total_loss: 40.46  m1_loss_ce: 0.4079  m1_loss_mask: 0.1374  m1_loss_dice: 1.16  m1_loss_ce_0: 0.5162  m1_loss_mask_0: 0.1613  m1_loss_dice_0: 1.381  m1_loss_ce_1: 0.5767  m1_loss_mask_1: 0.1505  m1_loss_dice_1: 1.291  m1_loss_ce_2: 0.4994  m1_loss_mask_2: 0.1433  m1_loss_dice_2: 1.233  m1_loss_ce_3: 0.4455  m1_loss_mask_3: 0.144  m1_loss_dice_3: 1.21  m1_loss_ce_4: 0.4026  m1_loss_mask_4: 0.1398  m1_loss_dice_4: 1.227  m1_loss_ce_5: 0.4245  m1_loss_mask_5: 0.1403  m1_loss_dice_5: 1.205  m1_loss_ce_6: 0.4084  m1_loss_mask_6: 0.1397  m1_loss_dice_6: 1.188  m1_loss_ce_7: 0.3866  m1_loss_mask_7: 0.1394  m1_loss_dice_7: 1.158  m1_loss_ce_8: 0.4038  m1_loss_mask_8: 0.1387  m1_loss_dice_8: 1.16  m2_loss_ce: 0.4201  m2_loss_mask: 0.1446  m2_loss_dice: 1.183  m2_loss_ce_0: 0.5257  m2_loss_mask_0: 0.1677  m2_loss_dice_0: 1.348  m2_loss_ce_1: 0.5696  m2_loss_mask_1: 0.1524  m2_loss_dice_1: 1.338  m2_loss_ce_2: 0.5252  m2_loss_mask_2: 0.1441  m2_loss_dice_2: 1.233  m2_loss_ce_3: 0.4696  m2_loss_mask_3: 0.146  m2_loss_dice_3: 1.226  m2_loss_ce_4: 0.4721  m2_loss_mask_4: 0.1435  m2_loss_dice_4: 1.195  m2_loss_ce_5: 0.4408  m2_loss_mask_5: 0.1442  m2_loss_dice_5: 1.215  m2_loss_ce_6: 0.4215  m2_loss_mask_6: 0.1438  m2_loss_dice_6: 1.14  m2_loss_ce_7: 0.4252  m2_loss_mask_7: 0.1454  m2_loss_dice_7: 1.164  m2_loss_ce_8: 0.4255  m2_loss_mask_8: 0.1441  m2_loss_dice_8: 1.184  com_loss_ce: 1.73  com_loss_mask: 0.6926  com_loss_dice: 0.9739    time: 1.6993  last_time: 1.7388  data_time: 0.0607  last_data_time: 0.0504   lr: 0.0001  max_mem: 37272M
[09/08 19:50:12] d2.utils.events INFO:  eta: 0:18:03  iter: 359  total_loss: 39.04  m1_loss_ce: 0.373  m1_loss_mask: 0.1382  m1_loss_dice: 1.088  m1_loss_ce_0: 0.5113  m1_loss_mask_0: 0.154  m1_loss_dice_0: 1.311  m1_loss_ce_1: 0.5617  m1_loss_mask_1: 0.1471  m1_loss_dice_1: 1.214  m1_loss_ce_2: 0.5217  m1_loss_mask_2: 0.1385  m1_loss_dice_2: 1.174  m1_loss_ce_3: 0.4606  m1_loss_mask_3: 0.1435  m1_loss_dice_3: 1.148  m1_loss_ce_4: 0.454  m1_loss_mask_4: 0.1388  m1_loss_dice_4: 1.116  m1_loss_ce_5: 0.4422  m1_loss_mask_5: 0.1395  m1_loss_dice_5: 1.15  m1_loss_ce_6: 0.4283  m1_loss_mask_6: 0.1394  m1_loss_dice_6: 1.085  m1_loss_ce_7: 0.4104  m1_loss_mask_7: 0.1403  m1_loss_dice_7: 1.079  m1_loss_ce_8: 0.4075  m1_loss_mask_8: 0.1397  m1_loss_dice_8: 1.091  m2_loss_ce: 0.4301  m2_loss_mask: 0.1408  m2_loss_dice: 1.078  m2_loss_ce_0: 0.5338  m2_loss_mask_0: 0.1535  m2_loss_dice_0: 1.275  m2_loss_ce_1: 0.5531  m2_loss_mask_1: 0.149  m2_loss_dice_1: 1.221  m2_loss_ce_2: 0.514  m2_loss_mask_2: 0.1421  m2_loss_dice_2: 1.198  m2_loss_ce_3: 0.44  m2_loss_mask_3: 0.1416  m2_loss_dice_3: 1.158  m2_loss_ce_4: 0.4435  m2_loss_mask_4: 0.1406  m2_loss_dice_4: 1.126  m2_loss_ce_5: 0.4348  m2_loss_mask_5: 0.1412  m2_loss_dice_5: 1.127  m2_loss_ce_6: 0.4144  m2_loss_mask_6: 0.1412  m2_loss_dice_6: 1.094  m2_loss_ce_7: 0.4197  m2_loss_mask_7: 0.141  m2_loss_dice_7: 1.128  m2_loss_ce_8: 0.4351  m2_loss_mask_8: 0.1408  m2_loss_dice_8: 1.105  com_loss_ce: 1.753  com_loss_mask: 0.6927  com_loss_dice: 0.9732    time: 1.7002  last_time: 1.7252  data_time: 0.0505  last_data_time: 0.0549   lr: 0.0001  max_mem: 37804M
[09/08 19:50:46] d2.utils.events INFO:  eta: 0:17:30  iter: 379  total_loss: 38.09  m1_loss_ce: 0.4026  m1_loss_mask: 0.136  m1_loss_dice: 1.079  m1_loss_ce_0: 0.5661  m1_loss_mask_0: 0.1613  m1_loss_dice_0: 1.247  m1_loss_ce_1: 0.5877  m1_loss_mask_1: 0.1502  m1_loss_dice_1: 1.15  m1_loss_ce_2: 0.4929  m1_loss_mask_2: 0.1416  m1_loss_dice_2: 1.092  m1_loss_ce_3: 0.4343  m1_loss_mask_3: 0.1439  m1_loss_dice_3: 1.079  m1_loss_ce_4: 0.444  m1_loss_mask_4: 0.1381  m1_loss_dice_4: 1.112  m1_loss_ce_5: 0.4323  m1_loss_mask_5: 0.1395  m1_loss_dice_5: 1.072  m1_loss_ce_6: 0.3989  m1_loss_mask_6: 0.1366  m1_loss_dice_6: 1.067  m1_loss_ce_7: 0.3963  m1_loss_mask_7: 0.1352  m1_loss_dice_7: 1.06  m1_loss_ce_8: 0.3748  m1_loss_mask_8: 0.1363  m1_loss_dice_8: 1.081  m2_loss_ce: 0.4084  m2_loss_mask: 0.1379  m2_loss_dice: 1.093  m2_loss_ce_0: 0.5325  m2_loss_mask_0: 0.1622  m2_loss_dice_0: 1.255  m2_loss_ce_1: 0.5993  m2_loss_mask_1: 0.1468  m2_loss_dice_1: 1.2  m2_loss_ce_2: 0.5313  m2_loss_mask_2: 0.1395  m2_loss_dice_2: 1.162  m2_loss_ce_3: 0.4699  m2_loss_mask_3: 0.1403  m2_loss_dice_3: 1.106  m2_loss_ce_4: 0.4248  m2_loss_mask_4: 0.1402  m2_loss_dice_4: 1.122  m2_loss_ce_5: 0.4133  m2_loss_mask_5: 0.139  m2_loss_dice_5: 1.129  m2_loss_ce_6: 0.4028  m2_loss_mask_6: 0.1405  m2_loss_dice_6: 1.074  m2_loss_ce_7: 0.4101  m2_loss_mask_7: 0.1398  m2_loss_dice_7: 1.087  m2_loss_ce_8: 0.4372  m2_loss_mask_8: 0.1398  m2_loss_dice_8: 1.068  com_loss_ce: 1.735  com_loss_mask: 0.6927  com_loss_dice: 0.9712    time: 1.7001  last_time: 1.7081  data_time: 0.0451  last_data_time: 0.0355   lr: 0.0001  max_mem: 37804M
[09/08 19:51:20] d2.utils.events INFO:  eta: 0:16:56  iter: 399  total_loss: 38.04  m1_loss_ce: 0.3759  m1_loss_mask: 0.1441  m1_loss_dice: 1.131  m1_loss_ce_0: 0.4959  m1_loss_mask_0: 0.173  m1_loss_dice_0: 1.281  m1_loss_ce_1: 0.5241  m1_loss_mask_1: 0.162  m1_loss_dice_1: 1.186  m1_loss_ce_2: 0.4615  m1_loss_mask_2: 0.1527  m1_loss_dice_2: 1.168  m1_loss_ce_3: 0.4546  m1_loss_mask_3: 0.1509  m1_loss_dice_3: 1.109  m1_loss_ce_4: 0.3965  m1_loss_mask_4: 0.147  m1_loss_dice_4: 1.132  m1_loss_ce_5: 0.377  m1_loss_mask_5: 0.148  m1_loss_dice_5: 1.105  m1_loss_ce_6: 0.369  m1_loss_mask_6: 0.1469  m1_loss_dice_6: 1.102  m1_loss_ce_7: 0.3534  m1_loss_mask_7: 0.145  m1_loss_dice_7: 1.095  m1_loss_ce_8: 0.352  m1_loss_mask_8: 0.1468  m1_loss_dice_8: 1.121  m2_loss_ce: 0.387  m2_loss_mask: 0.1476  m2_loss_dice: 1.097  m2_loss_ce_0: 0.5146  m2_loss_mask_0: 0.1708  m2_loss_dice_0: 1.314  m2_loss_ce_1: 0.5417  m2_loss_mask_1: 0.1591  m2_loss_dice_1: 1.219  m2_loss_ce_2: 0.4703  m2_loss_mask_2: 0.1564  m2_loss_dice_2: 1.19  m2_loss_ce_3: 0.4714  m2_loss_mask_3: 0.1484  m2_loss_dice_3: 1.126  m2_loss_ce_4: 0.4142  m2_loss_mask_4: 0.1496  m2_loss_dice_4: 1.118  m2_loss_ce_5: 0.4077  m2_loss_mask_5: 0.1489  m2_loss_dice_5: 1.117  m2_loss_ce_6: 0.3763  m2_loss_mask_6: 0.1504  m2_loss_dice_6: 1.116  m2_loss_ce_7: 0.4006  m2_loss_mask_7: 0.1498  m2_loss_dice_7: 1.111  m2_loss_ce_8: 0.4016  m2_loss_mask_8: 0.1519  m2_loss_dice_8: 1.14  com_loss_ce: 1.716  com_loss_mask: 0.6927  com_loss_dice: 0.972    time: 1.7004  last_time: 1.7473  data_time: 0.0452  last_data_time: 0.0414   lr: 0.0001  max_mem: 37804M
[09/08 19:51:55] d2.utils.events INFO:  eta: 0:16:22  iter: 419  total_loss: 39.93  m1_loss_ce: 0.3748  m1_loss_mask: 0.1435  m1_loss_dice: 1.13  m1_loss_ce_0: 0.4986  m1_loss_mask_0: 0.1702  m1_loss_dice_0: 1.331  m1_loss_ce_1: 0.5406  m1_loss_mask_1: 0.1573  m1_loss_dice_1: 1.267  m1_loss_ce_2: 0.5105  m1_loss_mask_2: 0.1516  m1_loss_dice_2: 1.203  m1_loss_ce_3: 0.4439  m1_loss_mask_3: 0.1483  m1_loss_dice_3: 1.134  m1_loss_ce_4: 0.4165  m1_loss_mask_4: 0.1453  m1_loss_dice_4: 1.172  m1_loss_ce_5: 0.4156  m1_loss_mask_5: 0.1466  m1_loss_dice_5: 1.14  m1_loss_ce_6: 0.3837  m1_loss_mask_6: 0.1456  m1_loss_dice_6: 1.155  m1_loss_ce_7: 0.3977  m1_loss_mask_7: 0.1437  m1_loss_dice_7: 1.117  m1_loss_ce_8: 0.3894  m1_loss_mask_8: 0.1437  m1_loss_dice_8: 1.129  m2_loss_ce: 0.4321  m2_loss_mask: 0.1485  m2_loss_dice: 1.145  m2_loss_ce_0: 0.5303  m2_loss_mask_0: 0.1675  m2_loss_dice_0: 1.336  m2_loss_ce_1: 0.5887  m2_loss_mask_1: 0.1595  m2_loss_dice_1: 1.263  m2_loss_ce_2: 0.5252  m2_loss_mask_2: 0.1476  m2_loss_dice_2: 1.217  m2_loss_ce_3: 0.4656  m2_loss_mask_3: 0.1485  m2_loss_dice_3: 1.183  m2_loss_ce_4: 0.4306  m2_loss_mask_4: 0.1491  m2_loss_dice_4: 1.172  m2_loss_ce_5: 0.4353  m2_loss_mask_5: 0.1459  m2_loss_dice_5: 1.191  m2_loss_ce_6: 0.4283  m2_loss_mask_6: 0.1505  m2_loss_dice_6: 1.173  m2_loss_ce_7: 0.3841  m2_loss_mask_7: 0.1455  m2_loss_dice_7: 1.146  m2_loss_ce_8: 0.415  m2_loss_mask_8: 0.1479  m2_loss_dice_8: 1.187  com_loss_ce: 1.73  com_loss_mask: 0.6926  com_loss_dice: 0.9726    time: 1.7015  last_time: 1.6914  data_time: 0.0579  last_data_time: 0.0437   lr: 0.0001  max_mem: 37804M
[09/08 19:52:29] d2.utils.events INFO:  eta: 0:15:48  iter: 439  total_loss: 36.31  m1_loss_ce: 0.3524  m1_loss_mask: 0.155  m1_loss_dice: 1.056  m1_loss_ce_0: 0.4791  m1_loss_mask_0: 0.1771  m1_loss_dice_0: 1.202  m1_loss_ce_1: 0.5191  m1_loss_mask_1: 0.1669  m1_loss_dice_1: 1.163  m1_loss_ce_2: 0.4621  m1_loss_mask_2: 0.1569  m1_loss_dice_2: 1.132  m1_loss_ce_3: 0.4069  m1_loss_mask_3: 0.1577  m1_loss_dice_3: 1.076  m1_loss_ce_4: 0.3806  m1_loss_mask_4: 0.1555  m1_loss_dice_4: 1.045  m1_loss_ce_5: 0.375  m1_loss_mask_5: 0.1576  m1_loss_dice_5: 1.048  m1_loss_ce_6: 0.3447  m1_loss_mask_6: 0.1552  m1_loss_dice_6: 1.047  m1_loss_ce_7: 0.3495  m1_loss_mask_7: 0.1562  m1_loss_dice_7: 1.052  m1_loss_ce_8: 0.3537  m1_loss_mask_8: 0.1573  m1_loss_dice_8: 1.024  m2_loss_ce: 0.3705  m2_loss_mask: 0.1535  m2_loss_dice: 1.043  m2_loss_ce_0: 0.4853  m2_loss_mask_0: 0.1741  m2_loss_dice_0: 1.235  m2_loss_ce_1: 0.5552  m2_loss_mask_1: 0.1614  m2_loss_dice_1: 1.215  m2_loss_ce_2: 0.4695  m2_loss_mask_2: 0.1608  m2_loss_dice_2: 1.138  m2_loss_ce_3: 0.449  m2_loss_mask_3: 0.1584  m2_loss_dice_3: 1.073  m2_loss_ce_4: 0.399  m2_loss_mask_4: 0.1563  m2_loss_dice_4: 1.095  m2_loss_ce_5: 0.4029  m2_loss_mask_5: 0.1537  m2_loss_dice_5: 1.084  m2_loss_ce_6: 0.3771  m2_loss_mask_6: 0.155  m2_loss_dice_6: 1.048  m2_loss_ce_7: 0.3611  m2_loss_mask_7: 0.1514  m2_loss_dice_7: 1.018  m2_loss_ce_8: 0.378  m2_loss_mask_8: 0.1533  m2_loss_dice_8: 1.053  com_loss_ce: 1.696  com_loss_mask: 0.6926  com_loss_dice: 0.9692    time: 1.7019  last_time: 1.7248  data_time: 0.0555  last_data_time: 0.0549   lr: 0.0001  max_mem: 37804M
[09/08 19:53:03] d2.utils.events INFO:  eta: 0:15:15  iter: 459  total_loss: 37.58  m1_loss_ce: 0.3984  m1_loss_mask: 0.1566  m1_loss_dice: 1.073  m1_loss_ce_0: 0.4877  m1_loss_mask_0: 0.1824  m1_loss_dice_0: 1.223  m1_loss_ce_1: 0.5322  m1_loss_mask_1: 0.1713  m1_loss_dice_1: 1.13  m1_loss_ce_2: 0.4769  m1_loss_mask_2: 0.1621  m1_loss_dice_2: 1.129  m1_loss_ce_3: 0.4386  m1_loss_mask_3: 0.1637  m1_loss_dice_3: 1.101  m1_loss_ce_4: 0.3998  m1_loss_mask_4: 0.1594  m1_loss_dice_4: 1.095  m1_loss_ce_5: 0.3739  m1_loss_mask_5: 0.1599  m1_loss_dice_5: 1.072  m1_loss_ce_6: 0.3768  m1_loss_mask_6: 0.1579  m1_loss_dice_6: 1.063  m1_loss_ce_7: 0.3618  m1_loss_mask_7: 0.157  m1_loss_dice_7: 1.08  m1_loss_ce_8: 0.358  m1_loss_mask_8: 0.157  m1_loss_dice_8: 1.057  m2_loss_ce: 0.3914  m2_loss_mask: 0.1618  m2_loss_dice: 1.075  m2_loss_ce_0: 0.4877  m2_loss_mask_0: 0.1869  m2_loss_dice_0: 1.238  m2_loss_ce_1: 0.5314  m2_loss_mask_1: 0.1756  m2_loss_dice_1: 1.185  m2_loss_ce_2: 0.4737  m2_loss_mask_2: 0.169  m2_loss_dice_2: 1.156  m2_loss_ce_3: 0.4285  m2_loss_mask_3: 0.1667  m2_loss_dice_3: 1.075  m2_loss_ce_4: 0.4058  m2_loss_mask_4: 0.1645  m2_loss_dice_4: 1.077  m2_loss_ce_5: 0.3979  m2_loss_mask_5: 0.1629  m2_loss_dice_5: 1.09  m2_loss_ce_6: 0.3733  m2_loss_mask_6: 0.1665  m2_loss_dice_6: 1.071  m2_loss_ce_7: 0.4019  m2_loss_mask_7: 0.1628  m2_loss_dice_7: 1.054  m2_loss_ce_8: 0.395  m2_loss_mask_8: 0.1653  m2_loss_dice_8: 1.101  com_loss_ce: 1.727  com_loss_mask: 0.6926  com_loss_dice: 0.97    time: 1.7019  last_time: 1.8406  data_time: 0.0517  last_data_time: 0.1325   lr: 0.0001  max_mem: 37804M
[09/08 19:53:37] d2.utils.events INFO:  eta: 0:14:41  iter: 479  total_loss: 37.37  m1_loss_ce: 0.3917  m1_loss_mask: 0.1442  m1_loss_dice: 1.022  m1_loss_ce_0: 0.4508  m1_loss_mask_0: 0.1652  m1_loss_dice_0: 1.232  m1_loss_ce_1: 0.4813  m1_loss_mask_1: 0.1521  m1_loss_dice_1: 1.166  m1_loss_ce_2: 0.4579  m1_loss_mask_2: 0.1458  m1_loss_dice_2: 1.092  m1_loss_ce_3: 0.4133  m1_loss_mask_3: 0.1452  m1_loss_dice_3: 1.062  m1_loss_ce_4: 0.3804  m1_loss_mask_4: 0.1445  m1_loss_dice_4: 1.07  m1_loss_ce_5: 0.3648  m1_loss_mask_5: 0.145  m1_loss_dice_5: 1.082  m1_loss_ce_6: 0.369  m1_loss_mask_6: 0.1411  m1_loss_dice_6: 1.042  m1_loss_ce_7: 0.351  m1_loss_mask_7: 0.1454  m1_loss_dice_7: 1.063  m1_loss_ce_8: 0.3765  m1_loss_mask_8: 0.1451  m1_loss_dice_8: 1.041  m2_loss_ce: 0.3754  m2_loss_mask: 0.1504  m2_loss_dice: 1.061  m2_loss_ce_0: 0.4785  m2_loss_mask_0: 0.1668  m2_loss_dice_0: 1.262  m2_loss_ce_1: 0.5372  m2_loss_mask_1: 0.158  m2_loss_dice_1: 1.186  m2_loss_ce_2: 0.522  m2_loss_mask_2: 0.1493  m2_loss_dice_2: 1.105  m2_loss_ce_3: 0.4266  m2_loss_mask_3: 0.1497  m2_loss_dice_3: 1.114  m2_loss_ce_4: 0.3886  m2_loss_mask_4: 0.1475  m2_loss_dice_4: 1.117  m2_loss_ce_5: 0.3746  m2_loss_mask_5: 0.1473  m2_loss_dice_5: 1.083  m2_loss_ce_6: 0.3715  m2_loss_mask_6: 0.1478  m2_loss_dice_6: 1.073  m2_loss_ce_7: 0.3702  m2_loss_mask_7: 0.148  m2_loss_dice_7: 1.093  m2_loss_ce_8: 0.3762  m2_loss_mask_8: 0.1485  m2_loss_dice_8: 1.066  com_loss_ce: 1.715  com_loss_mask: 0.6926  com_loss_dice: 0.973    time: 1.7021  last_time: 1.6772  data_time: 0.0476  last_data_time: 0.0457   lr: 0.0001  max_mem: 37804M
[09/08 19:54:11] d2.utils.events INFO:  eta: 0:14:07  iter: 499  total_loss: 39.16  m1_loss_ce: 0.3961  m1_loss_mask: 0.1559  m1_loss_dice: 1.122  m1_loss_ce_0: 0.492  m1_loss_mask_0: 0.1696  m1_loss_dice_0: 1.289  m1_loss_ce_1: 0.5648  m1_loss_mask_1: 0.1671  m1_loss_dice_1: 1.222  m1_loss_ce_2: 0.4892  m1_loss_mask_2: 0.1554  m1_loss_dice_2: 1.184  m1_loss_ce_3: 0.4636  m1_loss_mask_3: 0.1517  m1_loss_dice_3: 1.151  m1_loss_ce_4: 0.4187  m1_loss_mask_4: 0.1581  m1_loss_dice_4: 1.124  m1_loss_ce_5: 0.4278  m1_loss_mask_5: 0.1551  m1_loss_dice_5: 1.149  m1_loss_ce_6: 0.3997  m1_loss_mask_6: 0.1543  m1_loss_dice_6: 1.11  m1_loss_ce_7: 0.3947  m1_loss_mask_7: 0.1552  m1_loss_dice_7: 1.127  m1_loss_ce_8: 0.4201  m1_loss_mask_8: 0.1553  m1_loss_dice_8: 1.121  m2_loss_ce: 0.4329  m2_loss_mask: 0.1514  m2_loss_dice: 1.153  m2_loss_ce_0: 0.5587  m2_loss_mask_0: 0.1712  m2_loss_dice_0: 1.318  m2_loss_ce_1: 0.6171  m2_loss_mask_1: 0.1639  m2_loss_dice_1: 1.228  m2_loss_ce_2: 0.5463  m2_loss_mask_2: 0.1551  m2_loss_dice_2: 1.216  m2_loss_ce_3: 0.5015  m2_loss_mask_3: 0.1625  m2_loss_dice_3: 1.157  m2_loss_ce_4: 0.4607  m2_loss_mask_4: 0.1547  m2_loss_dice_4: 1.15  m2_loss_ce_5: 0.4266  m2_loss_mask_5: 0.1547  m2_loss_dice_5: 1.132  m2_loss_ce_6: 0.4154  m2_loss_mask_6: 0.1546  m2_loss_dice_6: 1.136  m2_loss_ce_7: 0.4439  m2_loss_mask_7: 0.1514  m2_loss_dice_7: 1.151  m2_loss_ce_8: 0.4345  m2_loss_mask_8: 0.1513  m2_loss_dice_8: 1.128  com_loss_ce: 1.738  com_loss_mask: 0.6926  com_loss_dice: 0.974    time: 1.7019  last_time: 1.7259  data_time: 0.0465  last_data_time: 0.0416   lr: 0.0001  max_mem: 37804M
[09/08 19:54:46] d2.utils.events INFO:  eta: 0:13:34  iter: 519  total_loss: 40.31  m1_loss_ce: 0.371  m1_loss_mask: 0.1467  m1_loss_dice: 1.174  m1_loss_ce_0: 0.5219  m1_loss_mask_0: 0.1767  m1_loss_dice_0: 1.436  m1_loss_ce_1: 0.5921  m1_loss_mask_1: 0.1567  m1_loss_dice_1: 1.358  m1_loss_ce_2: 0.4983  m1_loss_mask_2: 0.1498  m1_loss_dice_2: 1.236  m1_loss_ce_3: 0.4266  m1_loss_mask_3: 0.1538  m1_loss_dice_3: 1.212  m1_loss_ce_4: 0.4131  m1_loss_mask_4: 0.1527  m1_loss_dice_4: 1.192  m1_loss_ce_5: 0.4162  m1_loss_mask_5: 0.1472  m1_loss_dice_5: 1.176  m1_loss_ce_6: 0.3959  m1_loss_mask_6: 0.1492  m1_loss_dice_6: 1.149  m1_loss_ce_7: 0.3874  m1_loss_mask_7: 0.1456  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.3728  m1_loss_mask_8: 0.1485  m1_loss_dice_8: 1.172  m2_loss_ce: 0.4141  m2_loss_mask: 0.1615  m2_loss_dice: 1.103  m2_loss_ce_0: 0.5145  m2_loss_mask_0: 0.1841  m2_loss_dice_0: 1.359  m2_loss_ce_1: 0.5745  m2_loss_mask_1: 0.1663  m2_loss_dice_1: 1.301  m2_loss_ce_2: 0.5281  m2_loss_mask_2: 0.1647  m2_loss_dice_2: 1.241  m2_loss_ce_3: 0.4732  m2_loss_mask_3: 0.1677  m2_loss_dice_3: 1.138  m2_loss_ce_4: 0.46  m2_loss_mask_4: 0.1585  m2_loss_dice_4: 1.123  m2_loss_ce_5: 0.4281  m2_loss_mask_5: 0.1613  m2_loss_dice_5: 1.169  m2_loss_ce_6: 0.452  m2_loss_mask_6: 0.1582  m2_loss_dice_6: 1.173  m2_loss_ce_7: 0.4339  m2_loss_mask_7: 0.1578  m2_loss_dice_7: 1.108  m2_loss_ce_8: 0.4045  m2_loss_mask_8: 0.1558  m2_loss_dice_8: 1.133  com_loss_ce: 1.754  com_loss_mask: 0.6926  com_loss_dice: 0.9757    time: 1.7031  last_time: 1.7185  data_time: 0.0535  last_data_time: 0.0554   lr: 0.0001  max_mem: 37804M
[09/08 19:55:21] d2.utils.events INFO:  eta: 0:13:01  iter: 539  total_loss: 40.28  m1_loss_ce: 0.4597  m1_loss_mask: 0.1481  m1_loss_dice: 1.183  m1_loss_ce_0: 0.5557  m1_loss_mask_0: 0.1766  m1_loss_dice_0: 1.366  m1_loss_ce_1: 0.6296  m1_loss_mask_1: 0.1571  m1_loss_dice_1: 1.354  m1_loss_ce_2: 0.5639  m1_loss_mask_2: 0.1525  m1_loss_dice_2: 1.204  m1_loss_ce_3: 0.4897  m1_loss_mask_3: 0.1522  m1_loss_dice_3: 1.188  m1_loss_ce_4: 0.4318  m1_loss_mask_4: 0.1482  m1_loss_dice_4: 1.211  m1_loss_ce_5: 0.4289  m1_loss_mask_5: 0.1491  m1_loss_dice_5: 1.213  m1_loss_ce_6: 0.4261  m1_loss_mask_6: 0.1483  m1_loss_dice_6: 1.157  m1_loss_ce_7: 0.4496  m1_loss_mask_7: 0.1482  m1_loss_dice_7: 1.178  m1_loss_ce_8: 0.433  m1_loss_mask_8: 0.1491  m1_loss_dice_8: 1.173  m2_loss_ce: 0.45  m2_loss_mask: 0.1566  m2_loss_dice: 1.181  m2_loss_ce_0: 0.5299  m2_loss_mask_0: 0.1727  m2_loss_dice_0: 1.367  m2_loss_ce_1: 0.6117  m2_loss_mask_1: 0.1584  m2_loss_dice_1: 1.275  m2_loss_ce_2: 0.542  m2_loss_mask_2: 0.1549  m2_loss_dice_2: 1.262  m2_loss_ce_3: 0.4709  m2_loss_mask_3: 0.1556  m2_loss_dice_3: 1.202  m2_loss_ce_4: 0.4784  m2_loss_mask_4: 0.1544  m2_loss_dice_4: 1.21  m2_loss_ce_5: 0.4305  m2_loss_mask_5: 0.1534  m2_loss_dice_5: 1.188  m2_loss_ce_6: 0.4295  m2_loss_mask_6: 0.1569  m2_loss_dice_6: 1.182  m2_loss_ce_7: 0.4255  m2_loss_mask_7: 0.1572  m2_loss_dice_7: 1.175  m2_loss_ce_8: 0.4517  m2_loss_mask_8: 0.1551  m2_loss_dice_8: 1.191  com_loss_ce: 1.757  com_loss_mask: 0.6927  com_loss_dice: 0.9758    time: 1.7040  last_time: 1.7268  data_time: 0.0594  last_data_time: 0.0510   lr: 0.0001  max_mem: 37804M
[09/08 19:55:55] d2.utils.events INFO:  eta: 0:12:27  iter: 559  total_loss: 39.01  m1_loss_ce: 0.3953  m1_loss_mask: 0.1437  m1_loss_dice: 1.142  m1_loss_ce_0: 0.5006  m1_loss_mask_0: 0.1648  m1_loss_dice_0: 1.307  m1_loss_ce_1: 0.555  m1_loss_mask_1: 0.1609  m1_loss_dice_1: 1.264  m1_loss_ce_2: 0.5078  m1_loss_mask_2: 0.1509  m1_loss_dice_2: 1.187  m1_loss_ce_3: 0.4158  m1_loss_mask_3: 0.1467  m1_loss_dice_3: 1.165  m1_loss_ce_4: 0.4195  m1_loss_mask_4: 0.1497  m1_loss_dice_4: 1.134  m1_loss_ce_5: 0.4097  m1_loss_mask_5: 0.1467  m1_loss_dice_5: 1.123  m1_loss_ce_6: 0.3821  m1_loss_mask_6: 0.1494  m1_loss_dice_6: 1.138  m1_loss_ce_7: 0.3857  m1_loss_mask_7: 0.1477  m1_loss_dice_7: 1.114  m1_loss_ce_8: 0.3737  m1_loss_mask_8: 0.1459  m1_loss_dice_8: 1.13  m2_loss_ce: 0.4032  m2_loss_mask: 0.1516  m2_loss_dice: 1.109  m2_loss_ce_0: 0.5326  m2_loss_mask_0: 0.1663  m2_loss_dice_0: 1.288  m2_loss_ce_1: 0.543  m2_loss_mask_1: 0.1624  m2_loss_dice_1: 1.224  m2_loss_ce_2: 0.4956  m2_loss_mask_2: 0.156  m2_loss_dice_2: 1.231  m2_loss_ce_3: 0.4593  m2_loss_mask_3: 0.1582  m2_loss_dice_3: 1.153  m2_loss_ce_4: 0.4425  m2_loss_mask_4: 0.1541  m2_loss_dice_4: 1.155  m2_loss_ce_5: 0.3968  m2_loss_mask_5: 0.1541  m2_loss_dice_5: 1.141  m2_loss_ce_6: 0.4085  m2_loss_mask_6: 0.1514  m2_loss_dice_6: 1.121  m2_loss_ce_7: 0.3841  m2_loss_mask_7: 0.1541  m2_loss_dice_7: 1.134  m2_loss_ce_8: 0.3877  m2_loss_mask_8: 0.1523  m2_loss_dice_8: 1.109  com_loss_ce: 1.73  com_loss_mask: 0.6927  com_loss_dice: 0.9741    time: 1.7047  last_time: 1.6605  data_time: 0.0574  last_data_time: 0.0405   lr: 0.0001  max_mem: 37804M
[09/08 19:56:30] d2.utils.events INFO:  eta: 0:11:53  iter: 579  total_loss: 40.27  m1_loss_ce: 0.3933  m1_loss_mask: 0.1437  m1_loss_dice: 1.155  m1_loss_ce_0: 0.4992  m1_loss_mask_0: 0.164  m1_loss_dice_0: 1.329  m1_loss_ce_1: 0.564  m1_loss_mask_1: 0.156  m1_loss_dice_1: 1.282  m1_loss_ce_2: 0.5194  m1_loss_mask_2: 0.1481  m1_loss_dice_2: 1.212  m1_loss_ce_3: 0.4226  m1_loss_mask_3: 0.1494  m1_loss_dice_3: 1.162  m1_loss_ce_4: 0.4252  m1_loss_mask_4: 0.1491  m1_loss_dice_4: 1.141  m1_loss_ce_5: 0.4048  m1_loss_mask_5: 0.1461  m1_loss_dice_5: 1.129  m1_loss_ce_6: 0.3664  m1_loss_mask_6: 0.1458  m1_loss_dice_6: 1.12  m1_loss_ce_7: 0.3839  m1_loss_mask_7: 0.1451  m1_loss_dice_7: 1.154  m1_loss_ce_8: 0.3767  m1_loss_mask_8: 0.1452  m1_loss_dice_8: 1.132  m2_loss_ce: 0.4066  m2_loss_mask: 0.149  m2_loss_dice: 1.147  m2_loss_ce_0: 0.5199  m2_loss_mask_0: 0.166  m2_loss_dice_0: 1.283  m2_loss_ce_1: 0.5864  m2_loss_mask_1: 0.1613  m2_loss_dice_1: 1.258  m2_loss_ce_2: 0.5184  m2_loss_mask_2: 0.152  m2_loss_dice_2: 1.256  m2_loss_ce_3: 0.4722  m2_loss_mask_3: 0.15  m2_loss_dice_3: 1.176  m2_loss_ce_4: 0.4423  m2_loss_mask_4: 0.1499  m2_loss_dice_4: 1.193  m2_loss_ce_5: 0.4307  m2_loss_mask_5: 0.1487  m2_loss_dice_5: 1.184  m2_loss_ce_6: 0.4091  m2_loss_mask_6: 0.1498  m2_loss_dice_6: 1.143  m2_loss_ce_7: 0.4373  m2_loss_mask_7: 0.1481  m2_loss_dice_7: 1.147  m2_loss_ce_8: 0.4146  m2_loss_mask_8: 0.1486  m2_loss_dice_8: 1.153  com_loss_ce: 1.732  com_loss_mask: 0.6926  com_loss_dice: 0.972    time: 1.7049  last_time: 1.7285  data_time: 0.0474  last_data_time: 0.0457   lr: 0.0001  max_mem: 37804M
[09/08 19:57:05] d2.utils.events INFO:  eta: 0:11:19  iter: 599  total_loss: 39.26  m1_loss_ce: 0.4159  m1_loss_mask: 0.1395  m1_loss_dice: 1.159  m1_loss_ce_0: 0.527  m1_loss_mask_0: 0.1631  m1_loss_dice_0: 1.307  m1_loss_ce_1: 0.5364  m1_loss_mask_1: 0.1479  m1_loss_dice_1: 1.232  m1_loss_ce_2: 0.4771  m1_loss_mask_2: 0.1434  m1_loss_dice_2: 1.233  m1_loss_ce_3: 0.4582  m1_loss_mask_3: 0.1382  m1_loss_dice_3: 1.163  m1_loss_ce_4: 0.4066  m1_loss_mask_4: 0.1402  m1_loss_dice_4: 1.158  m1_loss_ce_5: 0.4037  m1_loss_mask_5: 0.1384  m1_loss_dice_5: 1.148  m1_loss_ce_6: 0.3833  m1_loss_mask_6: 0.1402  m1_loss_dice_6: 1.145  m1_loss_ce_7: 0.4114  m1_loss_mask_7: 0.139  m1_loss_dice_7: 1.137  m1_loss_ce_8: 0.3849  m1_loss_mask_8: 0.1385  m1_loss_dice_8: 1.109  m2_loss_ce: 0.3974  m2_loss_mask: 0.1378  m2_loss_dice: 1.139  m2_loss_ce_0: 0.5142  m2_loss_mask_0: 0.1592  m2_loss_dice_0: 1.396  m2_loss_ce_1: 0.568  m2_loss_mask_1: 0.1501  m2_loss_dice_1: 1.302  m2_loss_ce_2: 0.5242  m2_loss_mask_2: 0.1442  m2_loss_dice_2: 1.212  m2_loss_ce_3: 0.4506  m2_loss_mask_3: 0.143  m2_loss_dice_3: 1.178  m2_loss_ce_4: 0.4321  m2_loss_mask_4: 0.1382  m2_loss_dice_4: 1.148  m2_loss_ce_5: 0.4342  m2_loss_mask_5: 0.138  m2_loss_dice_5: 1.182  m2_loss_ce_6: 0.4121  m2_loss_mask_6: 0.1401  m2_loss_dice_6: 1.153  m2_loss_ce_7: 0.416  m2_loss_mask_7: 0.1389  m2_loss_dice_7: 1.18  m2_loss_ce_8: 0.4164  m2_loss_mask_8: 0.1381  m2_loss_dice_8: 1.139  com_loss_ce: 1.733  com_loss_mask: 0.6926  com_loss_dice: 0.9722    time: 1.7055  last_time: 1.6682  data_time: 0.0548  last_data_time: 0.0651   lr: 0.0001  max_mem: 37804M
[09/08 19:57:38] d2.utils.events INFO:  eta: 0:10:44  iter: 619  total_loss: 36.2  m1_loss_ce: 0.3582  m1_loss_mask: 0.1434  m1_loss_dice: 1.06  m1_loss_ce_0: 0.4649  m1_loss_mask_0: 0.168  m1_loss_dice_0: 1.195  m1_loss_ce_1: 0.5165  m1_loss_mask_1: 0.1561  m1_loss_dice_1: 1.119  m1_loss_ce_2: 0.4373  m1_loss_mask_2: 0.1529  m1_loss_dice_2: 1.119  m1_loss_ce_3: 0.4266  m1_loss_mask_3: 0.152  m1_loss_dice_3: 1.092  m1_loss_ce_4: 0.3604  m1_loss_mask_4: 0.1521  m1_loss_dice_4: 1.041  m1_loss_ce_5: 0.3815  m1_loss_mask_5: 0.1466  m1_loss_dice_5: 1.041  m1_loss_ce_6: 0.3903  m1_loss_mask_6: 0.144  m1_loss_dice_6: 1.01  m1_loss_ce_7: 0.3695  m1_loss_mask_7: 0.1429  m1_loss_dice_7: 1.056  m1_loss_ce_8: 0.3951  m1_loss_mask_8: 0.1425  m1_loss_dice_8: 1.045  m2_loss_ce: 0.3789  m2_loss_mask: 0.1494  m2_loss_dice: 1.058  m2_loss_ce_0: 0.5004  m2_loss_mask_0: 0.1684  m2_loss_dice_0: 1.19  m2_loss_ce_1: 0.5131  m2_loss_mask_1: 0.1571  m2_loss_dice_1: 1.178  m2_loss_ce_2: 0.462  m2_loss_mask_2: 0.1539  m2_loss_dice_2: 1.138  m2_loss_ce_3: 0.3906  m2_loss_mask_3: 0.1511  m2_loss_dice_3: 1.102  m2_loss_ce_4: 0.3759  m2_loss_mask_4: 0.1508  m2_loss_dice_4: 1.115  m2_loss_ce_5: 0.363  m2_loss_mask_5: 0.1499  m2_loss_dice_5: 1.029  m2_loss_ce_6: 0.3992  m2_loss_mask_6: 0.1473  m2_loss_dice_6: 1.042  m2_loss_ce_7: 0.3779  m2_loss_mask_7: 0.1465  m2_loss_dice_7: 1.057  m2_loss_ce_8: 0.3967  m2_loss_mask_8: 0.1474  m2_loss_dice_8: 1.074  com_loss_ce: 1.706  com_loss_mask: 0.6926  com_loss_dice: 0.971    time: 1.7046  last_time: 1.6804  data_time: 0.0442  last_data_time: 0.0340   lr: 0.0001  max_mem: 37804M
[09/08 19:58:13] d2.utils.events INFO:  eta: 0:10:11  iter: 639  total_loss: 39.23  m1_loss_ce: 0.3824  m1_loss_mask: 0.1506  m1_loss_dice: 1.131  m1_loss_ce_0: 0.4834  m1_loss_mask_0: 0.1706  m1_loss_dice_0: 1.348  m1_loss_ce_1: 0.5499  m1_loss_mask_1: 0.1586  m1_loss_dice_1: 1.294  m1_loss_ce_2: 0.4759  m1_loss_mask_2: 0.1555  m1_loss_dice_2: 1.263  m1_loss_ce_3: 0.4438  m1_loss_mask_3: 0.1523  m1_loss_dice_3: 1.195  m1_loss_ce_4: 0.3945  m1_loss_mask_4: 0.1549  m1_loss_dice_4: 1.182  m1_loss_ce_5: 0.3857  m1_loss_mask_5: 0.1527  m1_loss_dice_5: 1.179  m1_loss_ce_6: 0.3926  m1_loss_mask_6: 0.1504  m1_loss_dice_6: 1.153  m1_loss_ce_7: 0.378  m1_loss_mask_7: 0.1494  m1_loss_dice_7: 1.148  m1_loss_ce_8: 0.3905  m1_loss_mask_8: 0.1509  m1_loss_dice_8: 1.147  m2_loss_ce: 0.4119  m2_loss_mask: 0.1483  m2_loss_dice: 1.119  m2_loss_ce_0: 0.5113  m2_loss_mask_0: 0.1723  m2_loss_dice_0: 1.341  m2_loss_ce_1: 0.5562  m2_loss_mask_1: 0.1604  m2_loss_dice_1: 1.296  m2_loss_ce_2: 0.5176  m2_loss_mask_2: 0.1528  m2_loss_dice_2: 1.209  m2_loss_ce_3: 0.4257  m2_loss_mask_3: 0.1526  m2_loss_dice_3: 1.199  m2_loss_ce_4: 0.4128  m2_loss_mask_4: 0.1489  m2_loss_dice_4: 1.164  m2_loss_ce_5: 0.3927  m2_loss_mask_5: 0.1495  m2_loss_dice_5: 1.157  m2_loss_ce_6: 0.3949  m2_loss_mask_6: 0.1511  m2_loss_dice_6: 1.131  m2_loss_ce_7: 0.4162  m2_loss_mask_7: 0.1483  m2_loss_dice_7: 1.153  m2_loss_ce_8: 0.4134  m2_loss_mask_8: 0.1481  m2_loss_dice_8: 1.148  com_loss_ce: 1.733  com_loss_mask: 0.6926  com_loss_dice: 0.9751    time: 1.7052  last_time: 1.7032  data_time: 0.0610  last_data_time: 0.0498   lr: 0.0001  max_mem: 37804M
[09/08 19:58:47] d2.utils.events INFO:  eta: 0:09:37  iter: 659  total_loss: 39.96  m1_loss_ce: 0.4216  m1_loss_mask: 0.1449  m1_loss_dice: 1.158  m1_loss_ce_0: 0.496  m1_loss_mask_0: 0.1648  m1_loss_dice_0: 1.414  m1_loss_ce_1: 0.5675  m1_loss_mask_1: 0.152  m1_loss_dice_1: 1.331  m1_loss_ce_2: 0.5318  m1_loss_mask_2: 0.1461  m1_loss_dice_2: 1.228  m1_loss_ce_3: 0.452  m1_loss_mask_3: 0.1501  m1_loss_dice_3: 1.193  m1_loss_ce_4: 0.4146  m1_loss_mask_4: 0.1434  m1_loss_dice_4: 1.187  m1_loss_ce_5: 0.4181  m1_loss_mask_5: 0.1438  m1_loss_dice_5: 1.205  m1_loss_ce_6: 0.4122  m1_loss_mask_6: 0.1456  m1_loss_dice_6: 1.172  m1_loss_ce_7: 0.3942  m1_loss_mask_7: 0.1448  m1_loss_dice_7: 1.177  m1_loss_ce_8: 0.3963  m1_loss_mask_8: 0.1438  m1_loss_dice_8: 1.21  m2_loss_ce: 0.4303  m2_loss_mask: 0.1421  m2_loss_dice: 1.17  m2_loss_ce_0: 0.4894  m2_loss_mask_0: 0.1585  m2_loss_dice_0: 1.317  m2_loss_ce_1: 0.5651  m2_loss_mask_1: 0.1523  m2_loss_dice_1: 1.271  m2_loss_ce_2: 0.5065  m2_loss_mask_2: 0.146  m2_loss_dice_2: 1.224  m2_loss_ce_3: 0.4223  m2_loss_mask_3: 0.1443  m2_loss_dice_3: 1.188  m2_loss_ce_4: 0.409  m2_loss_mask_4: 0.1455  m2_loss_dice_4: 1.198  m2_loss_ce_5: 0.4269  m2_loss_mask_5: 0.1431  m2_loss_dice_5: 1.2  m2_loss_ce_6: 0.4067  m2_loss_mask_6: 0.1448  m2_loss_dice_6: 1.168  m2_loss_ce_7: 0.373  m2_loss_mask_7: 0.1427  m2_loss_dice_7: 1.154  m2_loss_ce_8: 0.393  m2_loss_mask_8: 0.1444  m2_loss_dice_8: 1.175  com_loss_ce: 1.748  com_loss_mask: 0.6926  com_loss_dice: 0.9737    time: 1.7054  last_time: 1.6744  data_time: 0.0477  last_data_time: 0.0530   lr: 0.0001  max_mem: 37804M
[09/08 19:59:21] d2.utils.events INFO:  eta: 0:09:03  iter: 679  total_loss: 38.82  m1_loss_ce: 0.4212  m1_loss_mask: 0.1451  m1_loss_dice: 1.12  m1_loss_ce_0: 0.481  m1_loss_mask_0: 0.1738  m1_loss_dice_0: 1.319  m1_loss_ce_1: 0.5817  m1_loss_mask_1: 0.1534  m1_loss_dice_1: 1.224  m1_loss_ce_2: 0.5059  m1_loss_mask_2: 0.1488  m1_loss_dice_2: 1.188  m1_loss_ce_3: 0.4668  m1_loss_mask_3: 0.1456  m1_loss_dice_3: 1.127  m1_loss_ce_4: 0.4176  m1_loss_mask_4: 0.1473  m1_loss_dice_4: 1.135  m1_loss_ce_5: 0.3947  m1_loss_mask_5: 0.1445  m1_loss_dice_5: 1.141  m1_loss_ce_6: 0.4248  m1_loss_mask_6: 0.1437  m1_loss_dice_6: 1.121  m1_loss_ce_7: 0.4039  m1_loss_mask_7: 0.1456  m1_loss_dice_7: 1.104  m1_loss_ce_8: 0.4162  m1_loss_mask_8: 0.1434  m1_loss_dice_8: 1.098  m2_loss_ce: 0.4363  m2_loss_mask: 0.1476  m2_loss_dice: 1.128  m2_loss_ce_0: 0.5595  m2_loss_mask_0: 0.1756  m2_loss_dice_0: 1.291  m2_loss_ce_1: 0.6073  m2_loss_mask_1: 0.1608  m2_loss_dice_1: 1.252  m2_loss_ce_2: 0.5325  m2_loss_mask_2: 0.1563  m2_loss_dice_2: 1.174  m2_loss_ce_3: 0.4586  m2_loss_mask_3: 0.1485  m2_loss_dice_3: 1.125  m2_loss_ce_4: 0.4184  m2_loss_mask_4: 0.1477  m2_loss_dice_4: 1.145  m2_loss_ce_5: 0.4484  m2_loss_mask_5: 0.1472  m2_loss_dice_5: 1.132  m2_loss_ce_6: 0.419  m2_loss_mask_6: 0.1491  m2_loss_dice_6: 1.123  m2_loss_ce_7: 0.4433  m2_loss_mask_7: 0.1461  m2_loss_dice_7: 1.107  m2_loss_ce_8: 0.4079  m2_loss_mask_8: 0.1455  m2_loss_dice_8: 1.161  com_loss_ce: 1.752  com_loss_mask: 0.6926  com_loss_dice: 0.9745    time: 1.7053  last_time: 1.6897  data_time: 0.0500  last_data_time: 0.0573   lr: 0.0001  max_mem: 37804M
[09/08 19:59:56] d2.utils.events INFO:  eta: 0:08:29  iter: 699  total_loss: 39.39  m1_loss_ce: 0.3877  m1_loss_mask: 0.15  m1_loss_dice: 1.123  m1_loss_ce_0: 0.5093  m1_loss_mask_0: 0.1691  m1_loss_dice_0: 1.304  m1_loss_ce_1: 0.5517  m1_loss_mask_1: 0.1588  m1_loss_dice_1: 1.238  m1_loss_ce_2: 0.5021  m1_loss_mask_2: 0.153  m1_loss_dice_2: 1.192  m1_loss_ce_3: 0.4475  m1_loss_mask_3: 0.1511  m1_loss_dice_3: 1.151  m1_loss_ce_4: 0.383  m1_loss_mask_4: 0.1513  m1_loss_dice_4: 1.105  m1_loss_ce_5: 0.3724  m1_loss_mask_5: 0.1484  m1_loss_dice_5: 1.136  m1_loss_ce_6: 0.3816  m1_loss_mask_6: 0.1482  m1_loss_dice_6: 1.108  m1_loss_ce_7: 0.3756  m1_loss_mask_7: 0.1508  m1_loss_dice_7: 1.109  m1_loss_ce_8: 0.3907  m1_loss_mask_8: 0.1491  m1_loss_dice_8: 1.104  m2_loss_ce: 0.4417  m2_loss_mask: 0.1557  m2_loss_dice: 1.097  m2_loss_ce_0: 0.5335  m2_loss_mask_0: 0.1695  m2_loss_dice_0: 1.35  m2_loss_ce_1: 0.5632  m2_loss_mask_1: 0.1708  m2_loss_dice_1: 1.267  m2_loss_ce_2: 0.5509  m2_loss_mask_2: 0.1544  m2_loss_dice_2: 1.185  m2_loss_ce_3: 0.4751  m2_loss_mask_3: 0.1593  m2_loss_dice_3: 1.16  m2_loss_ce_4: 0.4112  m2_loss_mask_4: 0.1571  m2_loss_dice_4: 1.136  m2_loss_ce_5: 0.4218  m2_loss_mask_5: 0.1535  m2_loss_dice_5: 1.111  m2_loss_ce_6: 0.4151  m2_loss_mask_6: 0.1571  m2_loss_dice_6: 1.12  m2_loss_ce_7: 0.4093  m2_loss_mask_7: 0.1544  m2_loss_dice_7: 1.087  m2_loss_ce_8: 0.423  m2_loss_mask_8: 0.1559  m2_loss_dice_8: 1.096  com_loss_ce: 1.741  com_loss_mask: 0.6926  com_loss_dice: 0.9724    time: 1.7051  last_time: 1.6643  data_time: 0.0500  last_data_time: 0.0411   lr: 0.0001  max_mem: 37804M
[09/08 20:00:30] d2.utils.events INFO:  eta: 0:07:55  iter: 719  total_loss: 39.7  m1_loss_ce: 0.3819  m1_loss_mask: 0.1412  m1_loss_dice: 1.156  m1_loss_ce_0: 0.5397  m1_loss_mask_0: 0.166  m1_loss_dice_0: 1.314  m1_loss_ce_1: 0.5831  m1_loss_mask_1: 0.1551  m1_loss_dice_1: 1.293  m1_loss_ce_2: 0.5006  m1_loss_mask_2: 0.1465  m1_loss_dice_2: 1.206  m1_loss_ce_3: 0.4502  m1_loss_mask_3: 0.1451  m1_loss_dice_3: 1.168  m1_loss_ce_4: 0.4186  m1_loss_mask_4: 0.1442  m1_loss_dice_4: 1.139  m1_loss_ce_5: 0.4165  m1_loss_mask_5: 0.1407  m1_loss_dice_5: 1.156  m1_loss_ce_6: 0.3994  m1_loss_mask_6: 0.1457  m1_loss_dice_6: 1.141  m1_loss_ce_7: 0.3965  m1_loss_mask_7: 0.1433  m1_loss_dice_7: 1.115  m1_loss_ce_8: 0.3852  m1_loss_mask_8: 0.1422  m1_loss_dice_8: 1.174  m2_loss_ce: 0.4105  m2_loss_mask: 0.1448  m2_loss_dice: 1.144  m2_loss_ce_0: 0.5281  m2_loss_mask_0: 0.1735  m2_loss_dice_0: 1.345  m2_loss_ce_1: 0.5804  m2_loss_mask_1: 0.1564  m2_loss_dice_1: 1.259  m2_loss_ce_2: 0.5522  m2_loss_mask_2: 0.1484  m2_loss_dice_2: 1.213  m2_loss_ce_3: 0.4485  m2_loss_mask_3: 0.1493  m2_loss_dice_3: 1.165  m2_loss_ce_4: 0.4344  m2_loss_mask_4: 0.1454  m2_loss_dice_4: 1.188  m2_loss_ce_5: 0.4165  m2_loss_mask_5: 0.1451  m2_loss_dice_5: 1.198  m2_loss_ce_6: 0.4175  m2_loss_mask_6: 0.1455  m2_loss_dice_6: 1.17  m2_loss_ce_7: 0.4267  m2_loss_mask_7: 0.1442  m2_loss_dice_7: 1.144  m2_loss_ce_8: 0.4139  m2_loss_mask_8: 0.1446  m2_loss_dice_8: 1.155  com_loss_ce: 1.741  com_loss_mask: 0.6927  com_loss_dice: 0.9725    time: 1.7056  last_time: 1.6932  data_time: 0.0588  last_data_time: 0.0541   lr: 0.0001  max_mem: 37804M
[09/08 20:01:04] d2.utils.events INFO:  eta: 0:07:21  iter: 739  total_loss: 38.38  m1_loss_ce: 0.3912  m1_loss_mask: 0.1411  m1_loss_dice: 1.112  m1_loss_ce_0: 0.5033  m1_loss_mask_0: 0.1695  m1_loss_dice_0: 1.29  m1_loss_ce_1: 0.5282  m1_loss_mask_1: 0.158  m1_loss_dice_1: 1.202  m1_loss_ce_2: 0.4681  m1_loss_mask_2: 0.1473  m1_loss_dice_2: 1.188  m1_loss_ce_3: 0.4146  m1_loss_mask_3: 0.1456  m1_loss_dice_3: 1.13  m1_loss_ce_4: 0.3576  m1_loss_mask_4: 0.1466  m1_loss_dice_4: 1.149  m1_loss_ce_5: 0.3638  m1_loss_mask_5: 0.1437  m1_loss_dice_5: 1.13  m1_loss_ce_6: 0.3515  m1_loss_mask_6: 0.1433  m1_loss_dice_6: 1.141  m1_loss_ce_7: 0.3638  m1_loss_mask_7: 0.1444  m1_loss_dice_7: 1.141  m1_loss_ce_8: 0.3836  m1_loss_mask_8: 0.1438  m1_loss_dice_8: 1.13  m2_loss_ce: 0.3748  m2_loss_mask: 0.1475  m2_loss_dice: 1.137  m2_loss_ce_0: 0.4914  m2_loss_mask_0: 0.1737  m2_loss_dice_0: 1.335  m2_loss_ce_1: 0.5304  m2_loss_mask_1: 0.1591  m2_loss_dice_1: 1.248  m2_loss_ce_2: 0.5136  m2_loss_mask_2: 0.1547  m2_loss_dice_2: 1.19  m2_loss_ce_3: 0.4396  m2_loss_mask_3: 0.1537  m2_loss_dice_3: 1.144  m2_loss_ce_4: 0.3825  m2_loss_mask_4: 0.1493  m2_loss_dice_4: 1.159  m2_loss_ce_5: 0.3773  m2_loss_mask_5: 0.1507  m2_loss_dice_5: 1.133  m2_loss_ce_6: 0.3827  m2_loss_mask_6: 0.152  m2_loss_dice_6: 1.121  m2_loss_ce_7: 0.3897  m2_loss_mask_7: 0.1489  m2_loss_dice_7: 1.14  m2_loss_ce_8: 0.3879  m2_loss_mask_8: 0.1484  m2_loss_dice_8: 1.124  com_loss_ce: 1.725  com_loss_mask: 0.6927  com_loss_dice: 0.9731    time: 1.7056  last_time: 1.7342  data_time: 0.0506  last_data_time: 0.0453   lr: 0.0001  max_mem: 37804M
[09/08 20:01:39] d2.utils.events INFO:  eta: 0:06:47  iter: 759  total_loss: 38  m1_loss_ce: 0.3805  m1_loss_mask: 0.1422  m1_loss_dice: 1.091  m1_loss_ce_0: 0.5214  m1_loss_mask_0: 0.1604  m1_loss_dice_0: 1.263  m1_loss_ce_1: 0.5597  m1_loss_mask_1: 0.1515  m1_loss_dice_1: 1.193  m1_loss_ce_2: 0.4774  m1_loss_mask_2: 0.1466  m1_loss_dice_2: 1.144  m1_loss_ce_3: 0.4416  m1_loss_mask_3: 0.1462  m1_loss_dice_3: 1.134  m1_loss_ce_4: 0.408  m1_loss_mask_4: 0.1448  m1_loss_dice_4: 1.103  m1_loss_ce_5: 0.3888  m1_loss_mask_5: 0.1414  m1_loss_dice_5: 1.115  m1_loss_ce_6: 0.3752  m1_loss_mask_6: 0.1429  m1_loss_dice_6: 1.079  m1_loss_ce_7: 0.3872  m1_loss_mask_7: 0.1415  m1_loss_dice_7: 1.089  m1_loss_ce_8: 0.3759  m1_loss_mask_8: 0.143  m1_loss_dice_8: 1.099  m2_loss_ce: 0.3821  m2_loss_mask: 0.1469  m2_loss_dice: 1.072  m2_loss_ce_0: 0.5122  m2_loss_mask_0: 0.1663  m2_loss_dice_0: 1.287  m2_loss_ce_1: 0.5607  m2_loss_mask_1: 0.1601  m2_loss_dice_1: 1.225  m2_loss_ce_2: 0.486  m2_loss_mask_2: 0.1544  m2_loss_dice_2: 1.181  m2_loss_ce_3: 0.4532  m2_loss_mask_3: 0.1524  m2_loss_dice_3: 1.132  m2_loss_ce_4: 0.4176  m2_loss_mask_4: 0.1498  m2_loss_dice_4: 1.108  m2_loss_ce_5: 0.4185  m2_loss_mask_5: 0.1469  m2_loss_dice_5: 1.123  m2_loss_ce_6: 0.4157  m2_loss_mask_6: 0.1489  m2_loss_dice_6: 1.111  m2_loss_ce_7: 0.3929  m2_loss_mask_7: 0.1491  m2_loss_dice_7: 1.108  m2_loss_ce_8: 0.4029  m2_loss_mask_8: 0.1504  m2_loss_dice_8: 1.081  com_loss_ce: 1.739  com_loss_mask: 0.6927  com_loss_dice: 0.9741    time: 1.7058  last_time: 1.7156  data_time: 0.0535  last_data_time: 0.0361   lr: 0.0001  max_mem: 37804M
[09/08 20:02:13] d2.utils.events INFO:  eta: 0:06:13  iter: 779  total_loss: 38.76  m1_loss_ce: 0.4052  m1_loss_mask: 0.1518  m1_loss_dice: 1.124  m1_loss_ce_0: 0.4823  m1_loss_mask_0: 0.1671  m1_loss_dice_0: 1.285  m1_loss_ce_1: 0.5496  m1_loss_mask_1: 0.158  m1_loss_dice_1: 1.245  m1_loss_ce_2: 0.4849  m1_loss_mask_2: 0.1568  m1_loss_dice_2: 1.158  m1_loss_ce_3: 0.4296  m1_loss_mask_3: 0.1526  m1_loss_dice_3: 1.125  m1_loss_ce_4: 0.4096  m1_loss_mask_4: 0.1543  m1_loss_dice_4: 1.116  m1_loss_ce_5: 0.406  m1_loss_mask_5: 0.1506  m1_loss_dice_5: 1.115  m1_loss_ce_6: 0.3798  m1_loss_mask_6: 0.1519  m1_loss_dice_6: 1.071  m1_loss_ce_7: 0.3948  m1_loss_mask_7: 0.152  m1_loss_dice_7: 1.11  m1_loss_ce_8: 0.3966  m1_loss_mask_8: 0.1518  m1_loss_dice_8: 1.067  m2_loss_ce: 0.4236  m2_loss_mask: 0.1512  m2_loss_dice: 1.091  m2_loss_ce_0: 0.5315  m2_loss_mask_0: 0.1777  m2_loss_dice_0: 1.284  m2_loss_ce_1: 0.5575  m2_loss_mask_1: 0.1595  m2_loss_dice_1: 1.225  m2_loss_ce_2: 0.5381  m2_loss_mask_2: 0.1566  m2_loss_dice_2: 1.16  m2_loss_ce_3: 0.4919  m2_loss_mask_3: 0.1538  m2_loss_dice_3: 1.135  m2_loss_ce_4: 0.414  m2_loss_mask_4: 0.1517  m2_loss_dice_4: 1.125  m2_loss_ce_5: 0.4313  m2_loss_mask_5: 0.1505  m2_loss_dice_5: 1.152  m2_loss_ce_6: 0.4063  m2_loss_mask_6: 0.1536  m2_loss_dice_6: 1.119  m2_loss_ce_7: 0.4189  m2_loss_mask_7: 0.1509  m2_loss_dice_7: 1.126  m2_loss_ce_8: 0.4376  m2_loss_mask_8: 0.1509  m2_loss_dice_8: 1.07  com_loss_ce: 1.735  com_loss_mask: 0.6926  com_loss_dice: 0.973    time: 1.7055  last_time: 1.6766  data_time: 0.0510  last_data_time: 0.0347   lr: 0.0001  max_mem: 37804M
[09/08 20:02:47] d2.utils.events INFO:  eta: 0:05:39  iter: 799  total_loss: 38.4  m1_loss_ce: 0.398  m1_loss_mask: 0.1441  m1_loss_dice: 1.128  m1_loss_ce_0: 0.506  m1_loss_mask_0: 0.1733  m1_loss_dice_0: 1.33  m1_loss_ce_1: 0.5173  m1_loss_mask_1: 0.1609  m1_loss_dice_1: 1.226  m1_loss_ce_2: 0.4991  m1_loss_mask_2: 0.1505  m1_loss_dice_2: 1.155  m1_loss_ce_3: 0.4127  m1_loss_mask_3: 0.1448  m1_loss_dice_3: 1.102  m1_loss_ce_4: 0.378  m1_loss_mask_4: 0.1459  m1_loss_dice_4: 1.145  m1_loss_ce_5: 0.3792  m1_loss_mask_5: 0.1418  m1_loss_dice_5: 1.15  m1_loss_ce_6: 0.395  m1_loss_mask_6: 0.1448  m1_loss_dice_6: 1.055  m1_loss_ce_7: 0.3857  m1_loss_mask_7: 0.1436  m1_loss_dice_7: 1.138  m1_loss_ce_8: 0.3952  m1_loss_mask_8: 0.1443  m1_loss_dice_8: 1.075  m2_loss_ce: 0.4192  m2_loss_mask: 0.152  m2_loss_dice: 1.093  m2_loss_ce_0: 0.511  m2_loss_mask_0: 0.175  m2_loss_dice_0: 1.29  m2_loss_ce_1: 0.5461  m2_loss_mask_1: 0.1686  m2_loss_dice_1: 1.198  m2_loss_ce_2: 0.5022  m2_loss_mask_2: 0.1655  m2_loss_dice_2: 1.165  m2_loss_ce_3: 0.4382  m2_loss_mask_3: 0.1557  m2_loss_dice_3: 1.159  m2_loss_ce_4: 0.4278  m2_loss_mask_4: 0.1554  m2_loss_dice_4: 1.101  m2_loss_ce_5: 0.406  m2_loss_mask_5: 0.1552  m2_loss_dice_5: 1.128  m2_loss_ce_6: 0.4013  m2_loss_mask_6: 0.1519  m2_loss_dice_6: 1.104  m2_loss_ce_7: 0.4074  m2_loss_mask_7: 0.1528  m2_loss_dice_7: 1.083  m2_loss_ce_8: 0.4063  m2_loss_mask_8: 0.1529  m2_loss_dice_8: 1.117  com_loss_ce: 1.736  com_loss_mask: 0.6926  com_loss_dice: 0.9734    time: 1.7053  last_time: 1.7694  data_time: 0.0465  last_data_time: 0.0695   lr: 0.0001  max_mem: 37804M
[09/08 20:03:21] d2.utils.events INFO:  eta: 0:05:05  iter: 819  total_loss: 39.82  m1_loss_ce: 0.4477  m1_loss_mask: 0.1387  m1_loss_dice: 1.16  m1_loss_ce_0: 0.5058  m1_loss_mask_0: 0.157  m1_loss_dice_0: 1.398  m1_loss_ce_1: 0.5476  m1_loss_mask_1: 0.1455  m1_loss_dice_1: 1.308  m1_loss_ce_2: 0.4847  m1_loss_mask_2: 0.1407  m1_loss_dice_2: 1.181  m1_loss_ce_3: 0.4274  m1_loss_mask_3: 0.1407  m1_loss_dice_3: 1.186  m1_loss_ce_4: 0.423  m1_loss_mask_4: 0.1399  m1_loss_dice_4: 1.224  m1_loss_ce_5: 0.4128  m1_loss_mask_5: 0.1402  m1_loss_dice_5: 1.168  m1_loss_ce_6: 0.3979  m1_loss_mask_6: 0.1404  m1_loss_dice_6: 1.165  m1_loss_ce_7: 0.4037  m1_loss_mask_7: 0.1387  m1_loss_dice_7: 1.155  m1_loss_ce_8: 0.3719  m1_loss_mask_8: 0.1375  m1_loss_dice_8: 1.196  m2_loss_ce: 0.4208  m2_loss_mask: 0.1406  m2_loss_dice: 1.165  m2_loss_ce_0: 0.5155  m2_loss_mask_0: 0.1542  m2_loss_dice_0: 1.383  m2_loss_ce_1: 0.5733  m2_loss_mask_1: 0.145  m2_loss_dice_1: 1.331  m2_loss_ce_2: 0.5373  m2_loss_mask_2: 0.1425  m2_loss_dice_2: 1.273  m2_loss_ce_3: 0.4761  m2_loss_mask_3: 0.1429  m2_loss_dice_3: 1.232  m2_loss_ce_4: 0.4591  m2_loss_mask_4: 0.1434  m2_loss_dice_4: 1.203  m2_loss_ce_5: 0.4246  m2_loss_mask_5: 0.1414  m2_loss_dice_5: 1.209  m2_loss_ce_6: 0.4348  m2_loss_mask_6: 0.1402  m2_loss_dice_6: 1.179  m2_loss_ce_7: 0.4311  m2_loss_mask_7: 0.1408  m2_loss_dice_7: 1.179  m2_loss_ce_8: 0.4441  m2_loss_mask_8: 0.1422  m2_loss_dice_8: 1.151  com_loss_ce: 1.746  com_loss_mask: 0.6926  com_loss_dice: 0.9746    time: 1.7056  last_time: 1.6967  data_time: 0.0529  last_data_time: 0.0409   lr: 0.0001  max_mem: 37804M
[09/08 20:03:55] d2.utils.events INFO:  eta: 0:04:31  iter: 839  total_loss: 37.37  m1_loss_ce: 0.3765  m1_loss_mask: 0.1388  m1_loss_dice: 1.066  m1_loss_ce_0: 0.4525  m1_loss_mask_0: 0.165  m1_loss_dice_0: 1.254  m1_loss_ce_1: 0.5133  m1_loss_mask_1: 0.1531  m1_loss_dice_1: 1.208  m1_loss_ce_2: 0.4699  m1_loss_mask_2: 0.1422  m1_loss_dice_2: 1.148  m1_loss_ce_3: 0.4011  m1_loss_mask_3: 0.1436  m1_loss_dice_3: 1.123  m1_loss_ce_4: 0.3541  m1_loss_mask_4: 0.1438  m1_loss_dice_4: 1.09  m1_loss_ce_5: 0.3617  m1_loss_mask_5: 0.1412  m1_loss_dice_5: 1.093  m1_loss_ce_6: 0.3591  m1_loss_mask_6: 0.1401  m1_loss_dice_6: 1.117  m1_loss_ce_7: 0.339  m1_loss_mask_7: 0.1416  m1_loss_dice_7: 1.056  m1_loss_ce_8: 0.369  m1_loss_mask_8: 0.1415  m1_loss_dice_8: 1.067  m2_loss_ce: 0.3837  m2_loss_mask: 0.1476  m2_loss_dice: 1.111  m2_loss_ce_0: 0.4975  m2_loss_mask_0: 0.1675  m2_loss_dice_0: 1.299  m2_loss_ce_1: 0.5688  m2_loss_mask_1: 0.1575  m2_loss_dice_1: 1.219  m2_loss_ce_2: 0.4895  m2_loss_mask_2: 0.1508  m2_loss_dice_2: 1.191  m2_loss_ce_3: 0.4312  m2_loss_mask_3: 0.1496  m2_loss_dice_3: 1.142  m2_loss_ce_4: 0.4019  m2_loss_mask_4: 0.1498  m2_loss_dice_4: 1.157  m2_loss_ce_5: 0.3665  m2_loss_mask_5: 0.1471  m2_loss_dice_5: 1.107  m2_loss_ce_6: 0.3733  m2_loss_mask_6: 0.1483  m2_loss_dice_6: 1.088  m2_loss_ce_7: 0.3817  m2_loss_mask_7: 0.1495  m2_loss_dice_7: 1.132  m2_loss_ce_8: 0.3747  m2_loss_mask_8: 0.1497  m2_loss_dice_8: 1.08  com_loss_ce: 1.723  com_loss_mask: 0.6927  com_loss_dice: 0.9718    time: 1.7054  last_time: 1.6701  data_time: 0.0511  last_data_time: 0.0578   lr: 0.0001  max_mem: 37804M
[09/08 20:04:30] d2.utils.events INFO:  eta: 0:03:57  iter: 859  total_loss: 38.22  m1_loss_ce: 0.3474  m1_loss_mask: 0.1411  m1_loss_dice: 1.136  m1_loss_ce_0: 0.4855  m1_loss_mask_0: 0.1587  m1_loss_dice_0: 1.32  m1_loss_ce_1: 0.5247  m1_loss_mask_1: 0.1489  m1_loss_dice_1: 1.255  m1_loss_ce_2: 0.4691  m1_loss_mask_2: 0.1445  m1_loss_dice_2: 1.193  m1_loss_ce_3: 0.4241  m1_loss_mask_3: 0.1457  m1_loss_dice_3: 1.147  m1_loss_ce_4: 0.3799  m1_loss_mask_4: 0.1442  m1_loss_dice_4: 1.126  m1_loss_ce_5: 0.365  m1_loss_mask_5: 0.1429  m1_loss_dice_5: 1.114  m1_loss_ce_6: 0.3719  m1_loss_mask_6: 0.1428  m1_loss_dice_6: 1.103  m1_loss_ce_7: 0.3607  m1_loss_mask_7: 0.1432  m1_loss_dice_7: 1.117  m1_loss_ce_8: 0.3728  m1_loss_mask_8: 0.1434  m1_loss_dice_8: 1.124  m2_loss_ce: 0.3886  m2_loss_mask: 0.1526  m2_loss_dice: 1.121  m2_loss_ce_0: 0.5083  m2_loss_mask_0: 0.1623  m2_loss_dice_0: 1.305  m2_loss_ce_1: 0.5473  m2_loss_mask_1: 0.155  m2_loss_dice_1: 1.257  m2_loss_ce_2: 0.4896  m2_loss_mask_2: 0.1503  m2_loss_dice_2: 1.226  m2_loss_ce_3: 0.4482  m2_loss_mask_3: 0.1518  m2_loss_dice_3: 1.157  m2_loss_ce_4: 0.3897  m2_loss_mask_4: 0.1503  m2_loss_dice_4: 1.14  m2_loss_ce_5: 0.4113  m2_loss_mask_5: 0.1496  m2_loss_dice_5: 1.162  m2_loss_ce_6: 0.3615  m2_loss_mask_6: 0.1494  m2_loss_dice_6: 1.146  m2_loss_ce_7: 0.396  m2_loss_mask_7: 0.1528  m2_loss_dice_7: 1.152  m2_loss_ce_8: 0.3881  m2_loss_mask_8: 0.1503  m2_loss_dice_8: 1.153  com_loss_ce: 1.718  com_loss_mask: 0.6926  com_loss_dice: 0.9735    time: 1.7056  last_time: 1.7587  data_time: 0.0526  last_data_time: 0.0577   lr: 0.0001  max_mem: 37804M
[09/08 20:05:04] d2.utils.events INFO:  eta: 0:03:23  iter: 879  total_loss: 37.23  m1_loss_ce: 0.3589  m1_loss_mask: 0.1439  m1_loss_dice: 1.053  m1_loss_ce_0: 0.4898  m1_loss_mask_0: 0.1738  m1_loss_dice_0: 1.267  m1_loss_ce_1: 0.522  m1_loss_mask_1: 0.1612  m1_loss_dice_1: 1.176  m1_loss_ce_2: 0.4717  m1_loss_mask_2: 0.1555  m1_loss_dice_2: 1.125  m1_loss_ce_3: 0.3937  m1_loss_mask_3: 0.1513  m1_loss_dice_3: 1.088  m1_loss_ce_4: 0.3837  m1_loss_mask_4: 0.1526  m1_loss_dice_4: 1.085  m1_loss_ce_5: 0.3828  m1_loss_mask_5: 0.1443  m1_loss_dice_5: 1.096  m1_loss_ce_6: 0.3524  m1_loss_mask_6: 0.1458  m1_loss_dice_6: 1.065  m1_loss_ce_7: 0.3448  m1_loss_mask_7: 0.1457  m1_loss_dice_7: 1.078  m1_loss_ce_8: 0.3542  m1_loss_mask_8: 0.1438  m1_loss_dice_8: 1.09  m2_loss_ce: 0.3826  m2_loss_mask: 0.1488  m2_loss_dice: 1.097  m2_loss_ce_0: 0.5025  m2_loss_mask_0: 0.1712  m2_loss_dice_0: 1.268  m2_loss_ce_1: 0.5563  m2_loss_mask_1: 0.1658  m2_loss_dice_1: 1.212  m2_loss_ce_2: 0.5107  m2_loss_mask_2: 0.1595  m2_loss_dice_2: 1.134  m2_loss_ce_3: 0.4474  m2_loss_mask_3: 0.1507  m2_loss_dice_3: 1.121  m2_loss_ce_4: 0.4084  m2_loss_mask_4: 0.1528  m2_loss_dice_4: 1.114  m2_loss_ce_5: 0.3903  m2_loss_mask_5: 0.1492  m2_loss_dice_5: 1.101  m2_loss_ce_6: 0.3648  m2_loss_mask_6: 0.1493  m2_loss_dice_6: 1.088  m2_loss_ce_7: 0.368  m2_loss_mask_7: 0.1497  m2_loss_dice_7: 1.084  m2_loss_ce_8: 0.3638  m2_loss_mask_8: 0.1493  m2_loss_dice_8: 1.1  com_loss_ce: 1.722  com_loss_mask: 0.6927  com_loss_dice: 0.9729    time: 1.7057  last_time: 1.6979  data_time: 0.0482  last_data_time: 0.0511   lr: 0.0001  max_mem: 37804M
[09/08 20:05:38] d2.utils.events INFO:  eta: 0:02:49  iter: 899  total_loss: 37.56  m1_loss_ce: 0.3707  m1_loss_mask: 0.1323  m1_loss_dice: 1.146  m1_loss_ce_0: 0.5097  m1_loss_mask_0: 0.163  m1_loss_dice_0: 1.251  m1_loss_ce_1: 0.5123  m1_loss_mask_1: 0.1496  m1_loss_dice_1: 1.195  m1_loss_ce_2: 0.4723  m1_loss_mask_2: 0.1409  m1_loss_dice_2: 1.16  m1_loss_ce_3: 0.4009  m1_loss_mask_3: 0.1381  m1_loss_dice_3: 1.113  m1_loss_ce_4: 0.3704  m1_loss_mask_4: 0.1376  m1_loss_dice_4: 1.1  m1_loss_ce_5: 0.3673  m1_loss_mask_5: 0.135  m1_loss_dice_5: 1.105  m1_loss_ce_6: 0.3783  m1_loss_mask_6: 0.1321  m1_loss_dice_6: 1.107  m1_loss_ce_7: 0.3846  m1_loss_mask_7: 0.1319  m1_loss_dice_7: 1.118  m1_loss_ce_8: 0.3649  m1_loss_mask_8: 0.1321  m1_loss_dice_8: 1.091  m2_loss_ce: 0.3728  m2_loss_mask: 0.1367  m2_loss_dice: 1.096  m2_loss_ce_0: 0.5196  m2_loss_mask_0: 0.1598  m2_loss_dice_0: 1.287  m2_loss_ce_1: 0.5498  m2_loss_mask_1: 0.148  m2_loss_dice_1: 1.233  m2_loss_ce_2: 0.4916  m2_loss_mask_2: 0.1408  m2_loss_dice_2: 1.222  m2_loss_ce_3: 0.4254  m2_loss_mask_3: 0.1403  m2_loss_dice_3: 1.096  m2_loss_ce_4: 0.3889  m2_loss_mask_4: 0.141  m2_loss_dice_4: 1.095  m2_loss_ce_5: 0.4122  m2_loss_mask_5: 0.1371  m2_loss_dice_5: 1.143  m2_loss_ce_6: 0.3754  m2_loss_mask_6: 0.1368  m2_loss_dice_6: 1.09  m2_loss_ce_7: 0.3868  m2_loss_mask_7: 0.138  m2_loss_dice_7: 1.127  m2_loss_ce_8: 0.3856  m2_loss_mask_8: 0.1369  m2_loss_dice_8: 1.112  com_loss_ce: 1.722  com_loss_mask: 0.6926  com_loss_dice: 0.9716    time: 1.7055  last_time: 1.6495  data_time: 0.0483  last_data_time: 0.0373   lr: 0.0001  max_mem: 37804M
[09/08 20:06:12] d2.utils.events INFO:  eta: 0:02:15  iter: 919  total_loss: 38.87  m1_loss_ce: 0.4209  m1_loss_mask: 0.1474  m1_loss_dice: 1.086  m1_loss_ce_0: 0.5193  m1_loss_mask_0: 0.1669  m1_loss_dice_0: 1.288  m1_loss_ce_1: 0.5708  m1_loss_mask_1: 0.1558  m1_loss_dice_1: 1.237  m1_loss_ce_2: 0.4668  m1_loss_mask_2: 0.1536  m1_loss_dice_2: 1.178  m1_loss_ce_3: 0.4512  m1_loss_mask_3: 0.1513  m1_loss_dice_3: 1.152  m1_loss_ce_4: 0.4348  m1_loss_mask_4: 0.15  m1_loss_dice_4: 1.162  m1_loss_ce_5: 0.414  m1_loss_mask_5: 0.1484  m1_loss_dice_5: 1.174  m1_loss_ce_6: 0.3689  m1_loss_mask_6: 0.1502  m1_loss_dice_6: 1.1  m1_loss_ce_7: 0.3983  m1_loss_mask_7: 0.1488  m1_loss_dice_7: 1.066  m1_loss_ce_8: 0.376  m1_loss_mask_8: 0.1463  m1_loss_dice_8: 1.13  m2_loss_ce: 0.4191  m2_loss_mask: 0.15  m2_loss_dice: 1.178  m2_loss_ce_0: 0.5771  m2_loss_mask_0: 0.1643  m2_loss_dice_0: 1.284  m2_loss_ce_1: 0.5775  m2_loss_mask_1: 0.163  m2_loss_dice_1: 1.264  m2_loss_ce_2: 0.4968  m2_loss_mask_2: 0.1597  m2_loss_dice_2: 1.204  m2_loss_ce_3: 0.462  m2_loss_mask_3: 0.1538  m2_loss_dice_3: 1.157  m2_loss_ce_4: 0.4446  m2_loss_mask_4: 0.1536  m2_loss_dice_4: 1.186  m2_loss_ce_5: 0.4013  m2_loss_mask_5: 0.1521  m2_loss_dice_5: 1.132  m2_loss_ce_6: 0.4127  m2_loss_mask_6: 0.1549  m2_loss_dice_6: 1.141  m2_loss_ce_7: 0.4165  m2_loss_mask_7: 0.1524  m2_loss_dice_7: 1.176  m2_loss_ce_8: 0.4193  m2_loss_mask_8: 0.1503  m2_loss_dice_8: 1.116  com_loss_ce: 1.726  com_loss_mask: 0.6926  com_loss_dice: 0.9735    time: 1.7053  last_time: 1.7973  data_time: 0.0514  last_data_time: 0.0830   lr: 0.0001  max_mem: 37804M
[09/08 20:06:47] d2.utils.events INFO:  eta: 0:01:41  iter: 939  total_loss: 40.14  m1_loss_ce: 0.4344  m1_loss_mask: 0.1545  m1_loss_dice: 1.137  m1_loss_ce_0: 0.5155  m1_loss_mask_0: 0.176  m1_loss_dice_0: 1.317  m1_loss_ce_1: 0.5537  m1_loss_mask_1: 0.167  m1_loss_dice_1: 1.245  m1_loss_ce_2: 0.507  m1_loss_mask_2: 0.1624  m1_loss_dice_2: 1.205  m1_loss_ce_3: 0.4507  m1_loss_mask_3: 0.1614  m1_loss_dice_3: 1.169  m1_loss_ce_4: 0.42  m1_loss_mask_4: 0.1603  m1_loss_dice_4: 1.153  m1_loss_ce_5: 0.4359  m1_loss_mask_5: 0.1554  m1_loss_dice_5: 1.12  m1_loss_ce_6: 0.4191  m1_loss_mask_6: 0.1574  m1_loss_dice_6: 1.166  m1_loss_ce_7: 0.3958  m1_loss_mask_7: 0.1575  m1_loss_dice_7: 1.124  m1_loss_ce_8: 0.4041  m1_loss_mask_8: 0.1554  m1_loss_dice_8: 1.145  m2_loss_ce: 0.4102  m2_loss_mask: 0.1648  m2_loss_dice: 1.133  m2_loss_ce_0: 0.5521  m2_loss_mask_0: 0.179  m2_loss_dice_0: 1.361  m2_loss_ce_1: 0.5669  m2_loss_mask_1: 0.1755  m2_loss_dice_1: 1.28  m2_loss_ce_2: 0.515  m2_loss_mask_2: 0.1681  m2_loss_dice_2: 1.243  m2_loss_ce_3: 0.456  m2_loss_mask_3: 0.1659  m2_loss_dice_3: 1.171  m2_loss_ce_4: 0.4551  m2_loss_mask_4: 0.167  m2_loss_dice_4: 1.163  m2_loss_ce_5: 0.4373  m2_loss_mask_5: 0.1671  m2_loss_dice_5: 1.18  m2_loss_ce_6: 0.4086  m2_loss_mask_6: 0.1674  m2_loss_dice_6: 1.18  m2_loss_ce_7: 0.4327  m2_loss_mask_7: 0.168  m2_loss_dice_7: 1.154  m2_loss_ce_8: 0.4587  m2_loss_mask_8: 0.1641  m2_loss_dice_8: 1.15  com_loss_ce: 1.744  com_loss_mask: 0.6927  com_loss_dice: 0.9725    time: 1.7054  last_time: 1.6794  data_time: 0.0529  last_data_time: 0.0416   lr: 0.0001  max_mem: 37804M
[09/08 20:07:21] d2.utils.events INFO:  eta: 0:01:07  iter: 959  total_loss: 37.34  m1_loss_ce: 0.3637  m1_loss_mask: 0.1624  m1_loss_dice: 1.094  m1_loss_ce_0: 0.5127  m1_loss_mask_0: 0.1826  m1_loss_dice_0: 1.298  m1_loss_ce_1: 0.524  m1_loss_mask_1: 0.167  m1_loss_dice_1: 1.184  m1_loss_ce_2: 0.4463  m1_loss_mask_2: 0.163  m1_loss_dice_2: 1.157  m1_loss_ce_3: 0.4087  m1_loss_mask_3: 0.1601  m1_loss_dice_3: 1.125  m1_loss_ce_4: 0.3571  m1_loss_mask_4: 0.1595  m1_loss_dice_4: 1.095  m1_loss_ce_5: 0.3549  m1_loss_mask_5: 0.158  m1_loss_dice_5: 1.111  m1_loss_ce_6: 0.3751  m1_loss_mask_6: 0.161  m1_loss_dice_6: 1.081  m1_loss_ce_7: 0.3848  m1_loss_mask_7: 0.1599  m1_loss_dice_7: 1.074  m1_loss_ce_8: 0.3673  m1_loss_mask_8: 0.1584  m1_loss_dice_8: 1.104  m2_loss_ce: 0.3815  m2_loss_mask: 0.1553  m2_loss_dice: 1.093  m2_loss_ce_0: 0.4704  m2_loss_mask_0: 0.1702  m2_loss_dice_0: 1.256  m2_loss_ce_1: 0.5409  m2_loss_mask_1: 0.1624  m2_loss_dice_1: 1.255  m2_loss_ce_2: 0.4874  m2_loss_mask_2: 0.1596  m2_loss_dice_2: 1.159  m2_loss_ce_3: 0.4054  m2_loss_mask_3: 0.1568  m2_loss_dice_3: 1.133  m2_loss_ce_4: 0.3805  m2_loss_mask_4: 0.1542  m2_loss_dice_4: 1.12  m2_loss_ce_5: 0.376  m2_loss_mask_5: 0.1576  m2_loss_dice_5: 1.107  m2_loss_ce_6: 0.382  m2_loss_mask_6: 0.1569  m2_loss_dice_6: 1.082  m2_loss_ce_7: 0.372  m2_loss_mask_7: 0.1575  m2_loss_dice_7: 1.129  m2_loss_ce_8: 0.3769  m2_loss_mask_8: 0.1581  m2_loss_dice_8: 1.118  com_loss_ce: 1.729  com_loss_mask: 0.6927  com_loss_dice: 0.9741    time: 1.7057  last_time: 1.6977  data_time: 0.0559  last_data_time: 0.0427   lr: 0.0001  max_mem: 37804M
[09/08 20:07:56] d2.utils.events INFO:  eta: 0:00:33  iter: 979  total_loss: 39.24  m1_loss_ce: 0.3791  m1_loss_mask: 0.1548  m1_loss_dice: 1.142  m1_loss_ce_0: 0.499  m1_loss_mask_0: 0.1841  m1_loss_dice_0: 1.302  m1_loss_ce_1: 0.5332  m1_loss_mask_1: 0.1666  m1_loss_dice_1: 1.21  m1_loss_ce_2: 0.4489  m1_loss_mask_2: 0.1575  m1_loss_dice_2: 1.188  m1_loss_ce_3: 0.4047  m1_loss_mask_3: 0.1571  m1_loss_dice_3: 1.145  m1_loss_ce_4: 0.3724  m1_loss_mask_4: 0.1586  m1_loss_dice_4: 1.127  m1_loss_ce_5: 0.3798  m1_loss_mask_5: 0.1532  m1_loss_dice_5: 1.164  m1_loss_ce_6: 0.3643  m1_loss_mask_6: 0.1558  m1_loss_dice_6: 1.148  m1_loss_ce_7: 0.3515  m1_loss_mask_7: 0.1543  m1_loss_dice_7: 1.134  m1_loss_ce_8: 0.337  m1_loss_mask_8: 0.1509  m1_loss_dice_8: 1.136  m2_loss_ce: 0.4158  m2_loss_mask: 0.1599  m2_loss_dice: 1.148  m2_loss_ce_0: 0.5134  m2_loss_mask_0: 0.1772  m2_loss_dice_0: 1.322  m2_loss_ce_1: 0.5601  m2_loss_mask_1: 0.1673  m2_loss_dice_1: 1.257  m2_loss_ce_2: 0.5094  m2_loss_mask_2: 0.1648  m2_loss_dice_2: 1.208  m2_loss_ce_3: 0.4495  m2_loss_mask_3: 0.1678  m2_loss_dice_3: 1.225  m2_loss_ce_4: 0.4277  m2_loss_mask_4: 0.1623  m2_loss_dice_4: 1.142  m2_loss_ce_5: 0.4324  m2_loss_mask_5: 0.1569  m2_loss_dice_5: 1.156  m2_loss_ce_6: 0.4327  m2_loss_mask_6: 0.1516  m2_loss_dice_6: 1.133  m2_loss_ce_7: 0.4084  m2_loss_mask_7: 0.1574  m2_loss_dice_7: 1.119  m2_loss_ce_8: 0.4235  m2_loss_mask_8: 0.1586  m2_loss_dice_8: 1.16  com_loss_ce: 1.73  com_loss_mask: 0.6927  com_loss_dice: 0.9757    time: 1.7062  last_time: 1.7364  data_time: 0.0603  last_data_time: 0.0593   lr: 0.0001  max_mem: 37804M
[09/08 20:08:30] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_softmax_entropy_2000_1000/model_final.pth
[09/08 20:08:36] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 37.23  m1_loss_ce: 0.362  m1_loss_mask: 0.1473  m1_loss_dice: 1.064  m1_loss_ce_0: 0.4759  m1_loss_mask_0: 0.1712  m1_loss_dice_0: 1.222  m1_loss_ce_1: 0.5151  m1_loss_mask_1: 0.1607  m1_loss_dice_1: 1.211  m1_loss_ce_2: 0.4481  m1_loss_mask_2: 0.1522  m1_loss_dice_2: 1.131  m1_loss_ce_3: 0.3572  m1_loss_mask_3: 0.1491  m1_loss_dice_3: 1.102  m1_loss_ce_4: 0.3485  m1_loss_mask_4: 0.1482  m1_loss_dice_4: 1.057  m1_loss_ce_5: 0.3461  m1_loss_mask_5: 0.1481  m1_loss_dice_5: 1.114  m1_loss_ce_6: 0.3346  m1_loss_mask_6: 0.1478  m1_loss_dice_6: 1.1  m1_loss_ce_7: 0.3351  m1_loss_mask_7: 0.1481  m1_loss_dice_7: 1.053  m1_loss_ce_8: 0.3603  m1_loss_mask_8: 0.1471  m1_loss_dice_8: 1.063  m2_loss_ce: 0.3676  m2_loss_mask: 0.1564  m2_loss_dice: 1.064  m2_loss_ce_0: 0.5045  m2_loss_mask_0: 0.1751  m2_loss_dice_0: 1.243  m2_loss_ce_1: 0.5089  m2_loss_mask_1: 0.1639  m2_loss_dice_1: 1.19  m2_loss_ce_2: 0.4573  m2_loss_mask_2: 0.1581  m2_loss_dice_2: 1.158  m2_loss_ce_3: 0.4165  m2_loss_mask_3: 0.156  m2_loss_dice_3: 1.105  m2_loss_ce_4: 0.3817  m2_loss_mask_4: 0.1559  m2_loss_dice_4: 1.085  m2_loss_ce_5: 0.3567  m2_loss_mask_5: 0.1567  m2_loss_dice_5: 1.1  m2_loss_ce_6: 0.3298  m2_loss_mask_6: 0.1568  m2_loss_dice_6: 1.089  m2_loss_ce_7: 0.3615  m2_loss_mask_7: 0.156  m2_loss_dice_7: 1.102  m2_loss_ce_8: 0.363  m2_loss_mask_8: 0.156  m2_loss_dice_8: 1.07  com_loss_ce: 1.702  com_loss_mask: 0.6927  com_loss_dice: 0.9723    time: 1.7066  last_time: 1.7536  data_time: 0.0554  last_data_time: 0.0389   lr: 0.0001  max_mem: 37804M
[09/08 20:08:36] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:28:23 (1.7066 s / it)
[09/08 20:08:36] d2.engine.hooks INFO: Total training time: 0:28:35 (0:00:11 on hooks)
[09/08 20:08:36] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[09/08 20:08:36] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[09/08 20:08:36] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/08 20:08:36] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[09/08 20:08:36] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[09/08 20:10:19] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evalooya9koq ...
[09/08 20:11:24] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 62.265 | 81.448 | 75.484 |      19       |
| Things | 54.657 | 80.675 | 67.406 |       8       |
| Stuff  | 67.798 | 82.010 | 81.359 |      11       |
[09/08 20:11:24] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.176 | 97.479 | 99.690 |     Stuff     |
| class_8  | 75.349 | 85.229 | 88.407 |     Stuff     |
| class_11 | 88.469 | 90.501 | 97.755 |     Stuff     |
| class_12 | 48.188 | 79.571 | 60.560 |     Stuff     |
| class_13 | 43.539 | 75.105 | 57.971 |     Stuff     |
| class_17 | 53.799 | 65.702 | 81.883 |     Stuff     |
| class_19 | 53.836 | 71.333 | 75.472 |     Stuff     |
| class_20 | 70.804 | 79.026 | 89.597 |     Stuff     |
| class_21 | 89.769 | 90.605 | 99.077 |     Stuff     |
| class_22 | 36.882 | 75.848 | 48.626 |     Stuff     |
| class_23 | 87.963 | 91.715 | 95.909 |     Stuff     |
| class_24 | 54.672 | 77.787 | 70.284 |    Things     |
| class_25 | 48.319 | 72.964 | 66.224 |    Things     |
| class_26 | 67.880 | 83.878 | 80.927 |    Things     |
| class_27 | 54.891 | 85.995 | 63.830 |    Things     |
| class_28 | 72.236 | 90.296 | 80.000 |    Things     |
| class_31 | 53.441 | 86.842 | 61.538 |    Things     |
| class_32 | 40.944 | 75.569 | 54.181 |    Things     |
| class_33 | 44.875 | 72.072 | 62.264 |    Things     |
[09/08 20:11:24] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[09/08 20:11:24] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[09/08 20:11:24] d2.evaluation.testing INFO: copypaste: 62.2648,81.4482,75.4839,54.6573,80.6753,67.4060,67.7976,82.0102,81.3588,97.1761,97.4785,99.6898,75.3490,85.2294,88.4074,88.4693,90.5010,97.7551,48.1879,79.5707,60.5598,43.5393,75.1053,57.9710,53.7987,65.7016,81.8833,53.8361,71.3328,75.4717,70.8044,79.0258,89.5966,89.7687,90.6050,99.0769,36.8817,75.8479,48.6258,87.9626,91.7146,95.9091,54.6717,77.7872,70.2838,48.3194,72.9637,66.2239,67.8804,83.8782,80.9274,54.8907,85.9954,63.8298,72.2365,90.2956,80.0000,53.4413,86.8421,61.5385,40.9436,75.5687,54.1806,44.8748,72.0716,62.2642
