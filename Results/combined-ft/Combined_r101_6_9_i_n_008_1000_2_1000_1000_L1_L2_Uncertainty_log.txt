[10/06 22:25:31] detectron2 INFO: Rank of current process: 0. World size: 2
[10/06 22:25:32] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/06 22:25:32] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_L1_L2_Uncertainty_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/06 22:25:32] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_L1_L2_Uncertainty_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_Uncertainty
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/06 22:25:32] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_Uncertainty
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/06 22:25:32] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_Uncertainty/config.yaml
[10/06 22:25:32] d2.utils.env INFO: Using a generated random seed 34839072
[10/06 22:25:35] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/06 22:25:35] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/06 22:25:36] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/06 22:25:36] d2.data.build INFO: Using training sampler TrainingSampler
[10/06 22:25:36] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/06 22:25:36] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/06 22:25:36] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/06 22:25:36] d2.data.build INFO: Making batched data loader with batch_size=4
[10/06 22:25:36] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/06 22:25:39] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/06 22:25:39] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 22:25:39] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 22:25:55] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.text_projection' to the model due to incompatible shapes: (512, 512) in the checkpoint but (512, 1024) in the model! You might want to double check if this is expected.
[10/06 22:25:55] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.visual.attnpool.c_proj.weight' to the model due to incompatible shapes: (512, 2048) in the checkpoint but (1024, 2048) in the model! You might want to double check if this is expected.
[10/06 22:25:55] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.visual.attnpool.c_proj.bias' to the model due to incompatible shapes: (512,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[10/06 22:25:55] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.predictor.class_embed.layers.2.weight' to the model due to incompatible shapes: (512, 256) in the checkpoint but (1024, 256) in the model! You might want to double check if this is expected.
[10/06 22:25:55] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.predictor.class_embed.layers.2.bias' to the model due to incompatible shapes: (512,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[10/06 22:25:55] fvcore.common.checkpoint WARNING: Skip loading parameter 'void_embedding.weight' to the model due to incompatible shapes: (1, 512) in the checkpoint but (1, 1024) in the model! You might want to double check if this is expected.
[10/06 22:25:55] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.text_projection[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34msem_seg_head.predictor.class_embed.layers.2.{bias, weight}[0m
[34mvoid_embedding.weight[0m
[10/06 22:25:55] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mbackbone.clip_model.visual.layer3.6.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.6.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.6.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[10/06 22:25:55] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 22:25:55] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/06 22:25:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.text_projection' to the model due to incompatible shapes: (512, 512) in the checkpoint but (512, 1024) in the model! You might want to double check if this is expected.
[10/06 22:25:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.visual.attnpool.c_proj.weight' to the model due to incompatible shapes: (512, 2048) in the checkpoint but (1024, 2048) in the model! You might want to double check if this is expected.
[10/06 22:25:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'backbone.clip_model.visual.attnpool.c_proj.bias' to the model due to incompatible shapes: (512,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[10/06 22:25:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.predictor.class_embed.layers.2.weight' to the model due to incompatible shapes: (512, 256) in the checkpoint but (1024, 256) in the model! You might want to double check if this is expected.
[10/06 22:25:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.predictor.class_embed.layers.2.bias' to the model due to incompatible shapes: (512,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[10/06 22:25:56] fvcore.common.checkpoint WARNING: Skip loading parameter 'void_embedding.weight' to the model due to incompatible shapes: (1, 512) in the checkpoint but (1, 1024) in the model! You might want to double check if this is expected.
[10/06 22:25:56] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.text_projection[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34msem_seg_head.predictor.class_embed.layers.2.{bias, weight}[0m
[34mvoid_embedding.weight[0m
[10/06 22:25:56] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mbackbone.clip_model.visual.layer3.6.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.6.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.6.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.6.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.7.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.7.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.8.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.8.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.9.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.9.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.10.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.10.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.11.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.11.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.12.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.12.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.13.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.13.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.14.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.14.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.15.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.15.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.16.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.16.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.17.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.17.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.18.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.18.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.19.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.19.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.20.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.20.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.21.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.21.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv1.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv2.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
  [35mbackbone.clip_model.visual.layer3.22.conv3.weight[0m
  [35mbackbone.clip_model.visual.layer3.22.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[10/06 22:26:30] d2.utils.events INFO:  eta: 0:22:50  iter: 19  total_loss: 156.3  m1_loss_ce: 5.032  m1_loss_mask: 0.2875  m1_loss_dice: 1.649  m1_loss_ce_0: 3.807  m1_loss_mask_0: 0.4076  m1_loss_dice_0: 2.062  m1_loss_ce_1: 3.668  m1_loss_mask_1: 0.3332  m1_loss_dice_1: 1.862  m1_loss_ce_2: 3.586  m1_loss_mask_2: 0.3088  m1_loss_dice_2: 1.799  m1_loss_ce_3: 3.499  m1_loss_mask_3: 0.3093  m1_loss_dice_3: 1.717  m1_loss_ce_4: 3.477  m1_loss_mask_4: 0.3026  m1_loss_dice_4: 1.684  m1_loss_ce_5: 3.427  m1_loss_mask_5: 0.3054  m1_loss_dice_5: 1.639  m1_loss_ce_6: 3.447  m1_loss_mask_6: 0.2963  m1_loss_dice_6: 1.602  m1_loss_ce_7: 3.817  m1_loss_mask_7: 0.288  m1_loss_dice_7: 1.632  m1_loss_ce_8: 4.012  m1_loss_mask_8: 0.2862  m1_loss_dice_8: 1.628  m2_loss_ce: 6.486  m2_loss_mask: 0.4942  m2_loss_dice: 2.517  m2_loss_ce_0: 6.233  m2_loss_mask_0: 0.7044  m2_loss_dice_0: 3.522  m2_loss_ce_1: 6.459  m2_loss_mask_1: 0.5933  m2_loss_dice_1: 2.942  m2_loss_ce_2: 6.641  m2_loss_mask_2: 0.5328  m2_loss_dice_2: 2.858  m2_loss_ce_3: 6.772  m2_loss_mask_3: 0.5134  m2_loss_dice_3: 2.671  m2_loss_ce_4: 6.764  m2_loss_mask_4: 0.5024  m2_loss_dice_4: 2.661  m2_loss_ce_5: 6.585  m2_loss_mask_5: 0.5015  m2_loss_dice_5: 2.668  m2_loss_ce_6: 6.506  m2_loss_mask_6: 0.4965  m2_loss_dice_6: 2.637  m2_loss_ce_7: 6.603  m2_loss_mask_7: 0.4971  m2_loss_dice_7: 2.604  m2_loss_ce_8: 6.564  m2_loss_mask_8: 0.4955  m2_loss_dice_8: 2.581    time: 1.4151  last_time: 1.3185  data_time: 0.2771  last_data_time: 0.0435   lr: 0.0001  max_mem: 33787M
[10/06 22:26:58] d2.utils.events INFO:  eta: 0:22:11  iter: 39  total_loss: 135.3  m1_loss_ce: 4.11  m1_loss_mask: 0.2424  m1_loss_dice: 1.412  m1_loss_ce_0: 1.742  m1_loss_mask_0: 0.2892  m1_loss_dice_0: 1.705  m1_loss_ce_1: 1.685  m1_loss_mask_1: 0.2637  m1_loss_dice_1: 1.63  m1_loss_ce_2: 1.614  m1_loss_mask_2: 0.2639  m1_loss_dice_2: 1.547  m1_loss_ce_3: 1.536  m1_loss_mask_3: 0.254  m1_loss_dice_3: 1.477  m1_loss_ce_4: 1.518  m1_loss_mask_4: 0.2574  m1_loss_dice_4: 1.476  m1_loss_ce_5: 1.557  m1_loss_mask_5: 0.2506  m1_loss_dice_5: 1.47  m1_loss_ce_6: 1.505  m1_loss_mask_6: 0.2482  m1_loss_dice_6: 1.447  m1_loss_ce_7: 1.558  m1_loss_mask_7: 0.2423  m1_loss_dice_7: 1.458  m1_loss_ce_8: 1.636  m1_loss_mask_8: 0.2427  m1_loss_dice_8: 1.426  m2_loss_ce: 6.504  m2_loss_mask: 0.5423  m2_loss_dice: 2.493  m2_loss_ce_0: 6.221  m2_loss_mask_0: 0.7788  m2_loss_dice_0: 3.484  m2_loss_ce_1: 6.495  m2_loss_mask_1: 0.6478  m2_loss_dice_1: 2.889  m2_loss_ce_2: 6.686  m2_loss_mask_2: 0.5832  m2_loss_dice_2: 2.758  m2_loss_ce_3: 6.792  m2_loss_mask_3: 0.5639  m2_loss_dice_3: 2.59  m2_loss_ce_4: 6.778  m2_loss_mask_4: 0.5576  m2_loss_dice_4: 2.578  m2_loss_ce_5: 6.614  m2_loss_mask_5: 0.5596  m2_loss_dice_5: 2.608  m2_loss_ce_6: 6.553  m2_loss_mask_6: 0.546  m2_loss_dice_6: 2.587  m2_loss_ce_7: 6.621  m2_loss_mask_7: 0.5487  m2_loss_dice_7: 2.572  m2_loss_ce_8: 6.576  m2_loss_mask_8: 0.5542  m2_loss_dice_8: 2.531    time: 1.3874  last_time: 1.3316  data_time: 0.0643  last_data_time: 0.0507   lr: 0.0001  max_mem: 33880M
[10/06 22:27:27] d2.utils.events INFO:  eta: 0:21:52  iter: 59  total_loss: 129.9  m1_loss_ce: 2.898  m1_loss_mask: 0.2394  m1_loss_dice: 1.414  m1_loss_ce_0: 1.131  m1_loss_mask_0: 0.2694  m1_loss_dice_0: 1.85  m1_loss_ce_1: 1.125  m1_loss_mask_1: 0.2392  m1_loss_dice_1: 1.594  m1_loss_ce_2: 1.092  m1_loss_mask_2: 0.2325  m1_loss_dice_2: 1.55  m1_loss_ce_3: 1.062  m1_loss_mask_3: 0.2324  m1_loss_dice_3: 1.525  m1_loss_ce_4: 1.022  m1_loss_mask_4: 0.2275  m1_loss_dice_4: 1.5  m1_loss_ce_5: 1.035  m1_loss_mask_5: 0.2252  m1_loss_dice_5: 1.497  m1_loss_ce_6: 1.007  m1_loss_mask_6: 0.2218  m1_loss_dice_6: 1.485  m1_loss_ce_7: 1.021  m1_loss_mask_7: 0.227  m1_loss_dice_7: 1.438  m1_loss_ce_8: 1.044  m1_loss_mask_8: 0.2291  m1_loss_dice_8: 1.482  m2_loss_ce: 6.559  m2_loss_mask: 0.4816  m2_loss_dice: 2.545  m2_loss_ce_0: 6.274  m2_loss_mask_0: 0.6839  m2_loss_dice_0: 3.482  m2_loss_ce_1: 6.56  m2_loss_mask_1: 0.569  m2_loss_dice_1: 2.925  m2_loss_ce_2: 6.749  m2_loss_mask_2: 0.5217  m2_loss_dice_2: 2.803  m2_loss_ce_3: 6.818  m2_loss_mask_3: 0.5032  m2_loss_dice_3: 2.639  m2_loss_ce_4: 6.836  m2_loss_mask_4: 0.4911  m2_loss_dice_4: 2.648  m2_loss_ce_5: 6.663  m2_loss_mask_5: 0.5033  m2_loss_dice_5: 2.692  m2_loss_ce_6: 6.596  m2_loss_mask_6: 0.4876  m2_loss_dice_6: 2.632  m2_loss_ce_7: 6.668  m2_loss_mask_7: 0.4889  m2_loss_dice_7: 2.604  m2_loss_ce_8: 6.634  m2_loss_mask_8: 0.4893  m2_loss_dice_8: 2.545    time: 1.4040  last_time: 1.5779  data_time: 0.0513  last_data_time: 0.0791   lr: 0.0001  max_mem: 34279M
[10/06 22:27:56] d2.utils.events INFO:  eta: 0:21:29  iter: 79  total_loss: 126.2  m1_loss_ce: 2.286  m1_loss_mask: 0.2169  m1_loss_dice: 1.4  m1_loss_ce_0: 0.9526  m1_loss_mask_0: 0.2454  m1_loss_dice_0: 1.806  m1_loss_ce_1: 0.9696  m1_loss_mask_1: 0.2348  m1_loss_dice_1: 1.612  m1_loss_ce_2: 0.8663  m1_loss_mask_2: 0.2307  m1_loss_dice_2: 1.539  m1_loss_ce_3: 0.8851  m1_loss_mask_3: 0.2286  m1_loss_dice_3: 1.468  m1_loss_ce_4: 0.8109  m1_loss_mask_4: 0.2193  m1_loss_dice_4: 1.491  m1_loss_ce_5: 0.8205  m1_loss_mask_5: 0.214  m1_loss_dice_5: 1.435  m1_loss_ce_6: 0.8339  m1_loss_mask_6: 0.2127  m1_loss_dice_6: 1.426  m1_loss_ce_7: 0.8442  m1_loss_mask_7: 0.2147  m1_loss_dice_7: 1.408  m1_loss_ce_8: 0.9141  m1_loss_mask_8: 0.2137  m1_loss_dice_8: 1.429  m2_loss_ce: 6.496  m2_loss_mask: 0.5028  m2_loss_dice: 2.516  m2_loss_ce_0: 6.266  m2_loss_mask_0: 0.7106  m2_loss_dice_0: 3.449  m2_loss_ce_1: 6.506  m2_loss_mask_1: 0.5983  m2_loss_dice_1: 2.928  m2_loss_ce_2: 6.671  m2_loss_mask_2: 0.5373  m2_loss_dice_2: 2.799  m2_loss_ce_3: 6.779  m2_loss_mask_3: 0.5407  m2_loss_dice_3: 2.621  m2_loss_ce_4: 6.737  m2_loss_mask_4: 0.5266  m2_loss_dice_4: 2.596  m2_loss_ce_5: 6.601  m2_loss_mask_5: 0.5183  m2_loss_dice_5: 2.635  m2_loss_ce_6: 6.529  m2_loss_mask_6: 0.5093  m2_loss_dice_6: 2.59  m2_loss_ce_7: 6.59  m2_loss_mask_7: 0.5164  m2_loss_dice_7: 2.587  m2_loss_ce_8: 6.562  m2_loss_mask_8: 0.5128  m2_loss_dice_8: 2.556    time: 1.4173  last_time: 1.5327  data_time: 0.0502  last_data_time: 0.0328   lr: 0.0001  max_mem: 34279M
[10/06 22:28:05] d2.engine.hooks INFO: Overall training speed: 84 iterations in 0:01:59 (1.4245 s / it)
[10/06 22:28:05] d2.engine.hooks INFO: Total training time: 0:02:00 (0:00:00 on hooks)
[10/06 22:28:05] d2.utils.events INFO:  eta: 0:21:23  iter: 86  total_loss: 126.2  m1_loss_ce: 2.183  m1_loss_mask: 0.2166  m1_loss_dice: 1.375  m1_loss_ce_0: 0.9753  m1_loss_mask_0: 0.255  m1_loss_dice_0: 1.759  m1_loss_ce_1: 0.9826  m1_loss_mask_1: 0.241  m1_loss_dice_1: 1.608  m1_loss_ce_2: 0.9068  m1_loss_mask_2: 0.2294  m1_loss_dice_2: 1.521  m1_loss_ce_3: 0.8924  m1_loss_mask_3: 0.225  m1_loss_dice_3: 1.47  m1_loss_ce_4: 0.8615  m1_loss_mask_4: 0.2208  m1_loss_dice_4: 1.457  m1_loss_ce_5: 0.8229  m1_loss_mask_5: 0.2179  m1_loss_dice_5: 1.431  m1_loss_ce_6: 0.8377  m1_loss_mask_6: 0.2151  m1_loss_dice_6: 1.407  m1_loss_ce_7: 0.8552  m1_loss_mask_7: 0.2188  m1_loss_dice_7: 1.389  m1_loss_ce_8: 0.9141  m1_loss_mask_8: 0.2137  m1_loss_dice_8: 1.405  m2_loss_ce: 6.507  m2_loss_mask: 0.5133  m2_loss_dice: 2.5  m2_loss_ce_0: 6.273  m2_loss_mask_0: 0.7309  m2_loss_dice_0: 3.486  m2_loss_ce_1: 6.499  m2_loss_mask_1: 0.6099  m2_loss_dice_1: 2.909  m2_loss_ce_2: 6.679  m2_loss_mask_2: 0.5373  m2_loss_dice_2: 2.827  m2_loss_ce_3: 6.801  m2_loss_mask_3: 0.5425  m2_loss_dice_3: 2.615  m2_loss_ce_4: 6.789  m2_loss_mask_4: 0.5266  m2_loss_dice_4: 2.61  m2_loss_ce_5: 6.628  m2_loss_mask_5: 0.5228  m2_loss_dice_5: 2.645  m2_loss_ce_6: 6.554  m2_loss_mask_6: 0.5133  m2_loss_dice_6: 2.619  m2_loss_ce_7: 6.628  m2_loss_mask_7: 0.5169  m2_loss_dice_7: 2.607  m2_loss_ce_8: 6.587  m2_loss_mask_8: 0.5131  m2_loss_dice_8: 2.573    time: 1.4195  last_time: 1.3609  data_time: 0.0584  last_data_time: 0.0623   lr: 0.0001  max_mem: 34279M
[10/07 00:19:35] detectron2 INFO: Rank of current process: 0. World size: 2
[10/07 00:19:36] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/07 00:19:36] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_L1_L2_Uncertainty_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/07 00:19:36] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_L1_L2_Uncertainty_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_Uncertainty
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/07 00:19:36] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_Uncertainty
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/07 00:19:36] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_Uncertainty/config.yaml
[10/07 00:19:36] d2.utils.env INFO: Using a generated random seed 39366063
[10/07 00:19:40] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[10/07 00:19:40] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/07 00:19:41] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/07 00:19:41] d2.data.build INFO: Using training sampler TrainingSampler
[10/07 00:19:41] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/07 00:19:41] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/07 00:19:41] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/07 00:19:41] d2.data.build INFO: Making batched data loader with batch_size=4
[10/07 00:19:41] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/07 00:19:45] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[10/07 00:19:45] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/07 00:19:45] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/07 00:19:45] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/07 00:19:45] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/07 00:20:20] d2.utils.events INFO:  eta: 0:23:18  iter: 19  total_loss: 41.83  m1_loss_ce: 0.5138  m1_loss_mask: 0.1742  m1_loss_dice: 1.265  m1_loss_ce_0: 0.6284  m1_loss_mask_0: 0.1926  m1_loss_dice_0: 1.495  m1_loss_ce_1: 0.7187  m1_loss_mask_1: 0.1792  m1_loss_dice_1: 1.428  m1_loss_ce_2: 0.6147  m1_loss_mask_2: 0.1768  m1_loss_dice_2: 1.361  m1_loss_ce_3: 0.563  m1_loss_mask_3: 0.1709  m1_loss_dice_3: 1.28  m1_loss_ce_4: 0.5697  m1_loss_mask_4: 0.1716  m1_loss_dice_4: 1.249  m1_loss_ce_5: 0.5398  m1_loss_mask_5: 0.1715  m1_loss_dice_5: 1.259  m1_loss_ce_6: 0.521  m1_loss_mask_6: 0.1757  m1_loss_dice_6: 1.26  m1_loss_ce_7: 0.5302  m1_loss_mask_7: 0.1717  m1_loss_dice_7: 1.284  m1_loss_ce_8: 0.5359  m1_loss_mask_8: 0.1717  m1_loss_dice_8: 1.242  m2_loss_ce: 0.505  m2_loss_mask: 0.1613  m2_loss_dice: 1.291  m2_loss_ce_0: 0.5953  m2_loss_mask_0: 0.1955  m2_loss_dice_0: 1.522  m2_loss_ce_1: 0.6411  m2_loss_mask_1: 0.1662  m2_loss_dice_1: 1.391  m2_loss_ce_2: 0.6147  m2_loss_mask_2: 0.1624  m2_loss_dice_2: 1.348  m2_loss_ce_3: 0.5768  m2_loss_mask_3: 0.1618  m2_loss_dice_3: 1.288  m2_loss_ce_4: 0.5778  m2_loss_mask_4: 0.164  m2_loss_dice_4: 1.287  m2_loss_ce_5: 0.564  m2_loss_mask_5: 0.1624  m2_loss_dice_5: 1.278  m2_loss_ce_6: 0.531  m2_loss_mask_6: 0.1637  m2_loss_dice_6: 1.301  m2_loss_ce_7: 0.5198  m2_loss_mask_7: 0.1629  m2_loss_dice_7: 1.281  m2_loss_ce_8: 0.5218  m2_loss_mask_8: 0.1621  m2_loss_dice_8: 1.291    time: 1.4373  last_time: 1.5339  data_time: 0.2520  last_data_time: 0.0645   lr: 0.0001  max_mem: 34123M
[10/07 00:20:50] d2.utils.events INFO:  eta: 0:23:27  iter: 39  total_loss: 39.56  m1_loss_ce: 0.4693  m1_loss_mask: 0.1686  m1_loss_dice: 1.234  m1_loss_ce_0: 0.5946  m1_loss_mask_0: 0.1911  m1_loss_dice_0: 1.409  m1_loss_ce_1: 0.6236  m1_loss_mask_1: 0.1794  m1_loss_dice_1: 1.321  m1_loss_ce_2: 0.5466  m1_loss_mask_2: 0.1706  m1_loss_dice_2: 1.296  m1_loss_ce_3: 0.4999  m1_loss_mask_3: 0.1679  m1_loss_dice_3: 1.218  m1_loss_ce_4: 0.4857  m1_loss_mask_4: 0.1696  m1_loss_dice_4: 1.223  m1_loss_ce_5: 0.4757  m1_loss_mask_5: 0.1675  m1_loss_dice_5: 1.216  m1_loss_ce_6: 0.4884  m1_loss_mask_6: 0.1702  m1_loss_dice_6: 1.216  m1_loss_ce_7: 0.4707  m1_loss_mask_7: 0.1673  m1_loss_dice_7: 1.188  m1_loss_ce_8: 0.4738  m1_loss_mask_8: 0.1661  m1_loss_dice_8: 1.233  m2_loss_ce: 0.4724  m2_loss_mask: 0.159  m2_loss_dice: 1.21  m2_loss_ce_0: 0.5529  m2_loss_mask_0: 0.1923  m2_loss_dice_0: 1.44  m2_loss_ce_1: 0.6351  m2_loss_mask_1: 0.1735  m2_loss_dice_1: 1.316  m2_loss_ce_2: 0.6055  m2_loss_mask_2: 0.168  m2_loss_dice_2: 1.251  m2_loss_ce_3: 0.5348  m2_loss_mask_3: 0.1653  m2_loss_dice_3: 1.218  m2_loss_ce_4: 0.5323  m2_loss_mask_4: 0.1604  m2_loss_dice_4: 1.217  m2_loss_ce_5: 0.5307  m2_loss_mask_5: 0.1588  m2_loss_dice_5: 1.248  m2_loss_ce_6: 0.493  m2_loss_mask_6: 0.1625  m2_loss_dice_6: 1.198  m2_loss_ce_7: 0.5003  m2_loss_mask_7: 0.1593  m2_loss_dice_7: 1.187  m2_loss_ce_8: 0.5  m2_loss_mask_8: 0.159  m2_loss_dice_8: 1.213    time: 1.4633  last_time: 1.5489  data_time: 0.0549  last_data_time: 0.0657   lr: 0.0001  max_mem: 34123M
[10/07 00:21:20] d2.utils.events INFO:  eta: 0:22:58  iter: 59  total_loss: 39  m1_loss_ce: 0.4951  m1_loss_mask: 0.1691  m1_loss_dice: 1.197  m1_loss_ce_0: 0.6076  m1_loss_mask_0: 0.1981  m1_loss_dice_0: 1.384  m1_loss_ce_1: 0.6552  m1_loss_mask_1: 0.1801  m1_loss_dice_1: 1.288  m1_loss_ce_2: 0.6145  m1_loss_mask_2: 0.1739  m1_loss_dice_2: 1.247  m1_loss_ce_3: 0.5546  m1_loss_mask_3: 0.1737  m1_loss_dice_3: 1.193  m1_loss_ce_4: 0.5132  m1_loss_mask_4: 0.1704  m1_loss_dice_4: 1.221  m1_loss_ce_5: 0.5047  m1_loss_mask_5: 0.1688  m1_loss_dice_5: 1.197  m1_loss_ce_6: 0.4931  m1_loss_mask_6: 0.1699  m1_loss_dice_6: 1.152  m1_loss_ce_7: 0.5011  m1_loss_mask_7: 0.1676  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.4925  m1_loss_mask_8: 0.17  m1_loss_dice_8: 1.196  m2_loss_ce: 0.5398  m2_loss_mask: 0.1604  m2_loss_dice: 1.169  m2_loss_ce_0: 0.6116  m2_loss_mask_0: 0.1921  m2_loss_dice_0: 1.413  m2_loss_ce_1: 0.6829  m2_loss_mask_1: 0.176  m2_loss_dice_1: 1.259  m2_loss_ce_2: 0.6322  m2_loss_mask_2: 0.1694  m2_loss_dice_2: 1.201  m2_loss_ce_3: 0.5796  m2_loss_mask_3: 0.1682  m2_loss_dice_3: 1.184  m2_loss_ce_4: 0.5541  m2_loss_mask_4: 0.1666  m2_loss_dice_4: 1.149  m2_loss_ce_5: 0.5611  m2_loss_mask_5: 0.1634  m2_loss_dice_5: 1.148  m2_loss_ce_6: 0.5269  m2_loss_mask_6: 0.1625  m2_loss_dice_6: 1.158  m2_loss_ce_7: 0.5334  m2_loss_mask_7: 0.16  m2_loss_dice_7: 1.152  m2_loss_ce_8: 0.5466  m2_loss_mask_8: 0.1587  m2_loss_dice_8: 1.192    time: 1.4647  last_time: 1.4577  data_time: 0.0522  last_data_time: 0.0370   lr: 0.0001  max_mem: 34123M
[10/07 00:21:48] d2.utils.events INFO:  eta: 0:22:16  iter: 79  total_loss: 40.93  m1_loss_ce: 0.5573  m1_loss_mask: 0.1756  m1_loss_dice: 1.229  m1_loss_ce_0: 0.5942  m1_loss_mask_0: 0.2074  m1_loss_dice_0: 1.473  m1_loss_ce_1: 0.6731  m1_loss_mask_1: 0.2064  m1_loss_dice_1: 1.35  m1_loss_ce_2: 0.5802  m1_loss_mask_2: 0.1839  m1_loss_dice_2: 1.345  m1_loss_ce_3: 0.563  m1_loss_mask_3: 0.18  m1_loss_dice_3: 1.256  m1_loss_ce_4: 0.5394  m1_loss_mask_4: 0.1889  m1_loss_dice_4: 1.28  m1_loss_ce_5: 0.5584  m1_loss_mask_5: 0.1751  m1_loss_dice_5: 1.225  m1_loss_ce_6: 0.5161  m1_loss_mask_6: 0.1767  m1_loss_dice_6: 1.247  m1_loss_ce_7: 0.5506  m1_loss_mask_7: 0.1774  m1_loss_dice_7: 1.229  m1_loss_ce_8: 0.5104  m1_loss_mask_8: 0.1768  m1_loss_dice_8: 1.206  m2_loss_ce: 0.5446  m2_loss_mask: 0.1756  m2_loss_dice: 1.213  m2_loss_ce_0: 0.6054  m2_loss_mask_0: 0.2123  m2_loss_dice_0: 1.45  m2_loss_ce_1: 0.7431  m2_loss_mask_1: 0.1897  m2_loss_dice_1: 1.34  m2_loss_ce_2: 0.6482  m2_loss_mask_2: 0.178  m2_loss_dice_2: 1.285  m2_loss_ce_3: 0.6087  m2_loss_mask_3: 0.1791  m2_loss_dice_3: 1.257  m2_loss_ce_4: 0.5924  m2_loss_mask_4: 0.1784  m2_loss_dice_4: 1.241  m2_loss_ce_5: 0.586  m2_loss_mask_5: 0.1732  m2_loss_dice_5: 1.238  m2_loss_ce_6: 0.5656  m2_loss_mask_6: 0.1785  m2_loss_dice_6: 1.236  m2_loss_ce_7: 0.5333  m2_loss_mask_7: 0.1773  m2_loss_dice_7: 1.221  m2_loss_ce_8: 0.544  m2_loss_mask_8: 0.1767  m2_loss_dice_8: 1.216    time: 1.4529  last_time: 1.3713  data_time: 0.0626  last_data_time: 0.0607   lr: 0.0001  max_mem: 34123M
[10/07 00:22:17] d2.utils.events INFO:  eta: 0:21:40  iter: 99  total_loss: 42.27  m1_loss_ce: 0.4988  m1_loss_mask: 0.1718  m1_loss_dice: 1.302  m1_loss_ce_0: 0.6133  m1_loss_mask_0: 0.1976  m1_loss_dice_0: 1.489  m1_loss_ce_1: 0.6481  m1_loss_mask_1: 0.1844  m1_loss_dice_1: 1.381  m1_loss_ce_2: 0.6067  m1_loss_mask_2: 0.1835  m1_loss_dice_2: 1.296  m1_loss_ce_3: 0.5786  m1_loss_mask_3: 0.1764  m1_loss_dice_3: 1.28  m1_loss_ce_4: 0.5584  m1_loss_mask_4: 0.1782  m1_loss_dice_4: 1.255  m1_loss_ce_5: 0.5258  m1_loss_mask_5: 0.1739  m1_loss_dice_5: 1.277  m1_loss_ce_6: 0.5055  m1_loss_mask_6: 0.1713  m1_loss_dice_6: 1.255  m1_loss_ce_7: 0.5073  m1_loss_mask_7: 0.1728  m1_loss_dice_7: 1.242  m1_loss_ce_8: 0.5087  m1_loss_mask_8: 0.1732  m1_loss_dice_8: 1.242  m2_loss_ce: 0.5489  m2_loss_mask: 0.1718  m2_loss_dice: 1.299  m2_loss_ce_0: 0.5928  m2_loss_mask_0: 0.2085  m2_loss_dice_0: 1.511  m2_loss_ce_1: 0.6589  m2_loss_mask_1: 0.1847  m2_loss_dice_1: 1.378  m2_loss_ce_2: 0.629  m2_loss_mask_2: 0.18  m2_loss_dice_2: 1.327  m2_loss_ce_3: 0.5902  m2_loss_mask_3: 0.1766  m2_loss_dice_3: 1.269  m2_loss_ce_4: 0.5547  m2_loss_mask_4: 0.1777  m2_loss_dice_4: 1.261  m2_loss_ce_5: 0.5766  m2_loss_mask_5: 0.1681  m2_loss_dice_5: 1.276  m2_loss_ce_6: 0.5434  m2_loss_mask_6: 0.1721  m2_loss_dice_6: 1.256  m2_loss_ce_7: 0.5593  m2_loss_mask_7: 0.1712  m2_loss_dice_7: 1.248  m2_loss_ce_8: 0.5545  m2_loss_mask_8: 0.1705  m2_loss_dice_8: 1.238    time: 1.4521  last_time: 1.4936  data_time: 0.0513  last_data_time: 0.0559   lr: 0.0001  max_mem: 34123M
[10/07 00:22:47] d2.utils.events INFO:  eta: 0:21:18  iter: 119  total_loss: 39.96  m1_loss_ce: 0.4919  m1_loss_mask: 0.1645  m1_loss_dice: 1.199  m1_loss_ce_0: 0.5423  m1_loss_mask_0: 0.1879  m1_loss_dice_0: 1.424  m1_loss_ce_1: 0.659  m1_loss_mask_1: 0.1782  m1_loss_dice_1: 1.335  m1_loss_ce_2: 0.5468  m1_loss_mask_2: 0.1679  m1_loss_dice_2: 1.332  m1_loss_ce_3: 0.5329  m1_loss_mask_3: 0.1667  m1_loss_dice_3: 1.302  m1_loss_ce_4: 0.5331  m1_loss_mask_4: 0.1665  m1_loss_dice_4: 1.243  m1_loss_ce_5: 0.4939  m1_loss_mask_5: 0.1623  m1_loss_dice_5: 1.252  m1_loss_ce_6: 0.5332  m1_loss_mask_6: 0.1644  m1_loss_dice_6: 1.228  m1_loss_ce_7: 0.505  m1_loss_mask_7: 0.1643  m1_loss_dice_7: 1.239  m1_loss_ce_8: 0.5216  m1_loss_mask_8: 0.162  m1_loss_dice_8: 1.241  m2_loss_ce: 0.4989  m2_loss_mask: 0.1628  m2_loss_dice: 1.205  m2_loss_ce_0: 0.6055  m2_loss_mask_0: 0.2056  m2_loss_dice_0: 1.465  m2_loss_ce_1: 0.6504  m2_loss_mask_1: 0.1789  m2_loss_dice_1: 1.345  m2_loss_ce_2: 0.6033  m2_loss_mask_2: 0.1653  m2_loss_dice_2: 1.326  m2_loss_ce_3: 0.5723  m2_loss_mask_3: 0.1642  m2_loss_dice_3: 1.253  m2_loss_ce_4: 0.5132  m2_loss_mask_4: 0.1642  m2_loss_dice_4: 1.256  m2_loss_ce_5: 0.5304  m2_loss_mask_5: 0.1596  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.5235  m2_loss_mask_6: 0.1634  m2_loss_dice_6: 1.252  m2_loss_ce_7: 0.5224  m2_loss_mask_7: 0.1616  m2_loss_dice_7: 1.187  m2_loss_ce_8: 0.5196  m2_loss_mask_8: 0.1613  m2_loss_dice_8: 1.236    time: 1.4547  last_time: 1.2890  data_time: 0.0558  last_data_time: 0.0533   lr: 0.0001  max_mem: 34123M
[10/07 00:23:16] d2.utils.events INFO:  eta: 0:20:52  iter: 139  total_loss: 38.75  m1_loss_ce: 0.477  m1_loss_mask: 0.1614  m1_loss_dice: 1.198  m1_loss_ce_0: 0.5341  m1_loss_mask_0: 0.199  m1_loss_dice_0: 1.391  m1_loss_ce_1: 0.6337  m1_loss_mask_1: 0.1776  m1_loss_dice_1: 1.315  m1_loss_ce_2: 0.5198  m1_loss_mask_2: 0.1713  m1_loss_dice_2: 1.272  m1_loss_ce_3: 0.4691  m1_loss_mask_3: 0.169  m1_loss_dice_3: 1.259  m1_loss_ce_4: 0.4632  m1_loss_mask_4: 0.1678  m1_loss_dice_4: 1.227  m1_loss_ce_5: 0.4493  m1_loss_mask_5: 0.166  m1_loss_dice_5: 1.251  m1_loss_ce_6: 0.4627  m1_loss_mask_6: 0.1678  m1_loss_dice_6: 1.235  m1_loss_ce_7: 0.4486  m1_loss_mask_7: 0.1627  m1_loss_dice_7: 1.205  m1_loss_ce_8: 0.4699  m1_loss_mask_8: 0.1629  m1_loss_dice_8: 1.194  m2_loss_ce: 0.4794  m2_loss_mask: 0.1712  m2_loss_dice: 1.264  m2_loss_ce_0: 0.5768  m2_loss_mask_0: 0.2006  m2_loss_dice_0: 1.426  m2_loss_ce_1: 0.6494  m2_loss_mask_1: 0.1816  m2_loss_dice_1: 1.26  m2_loss_ce_2: 0.5596  m2_loss_mask_2: 0.1764  m2_loss_dice_2: 1.248  m2_loss_ce_3: 0.5473  m2_loss_mask_3: 0.1742  m2_loss_dice_3: 1.235  m2_loss_ce_4: 0.5335  m2_loss_mask_4: 0.1734  m2_loss_dice_4: 1.234  m2_loss_ce_5: 0.5384  m2_loss_mask_5: 0.1707  m2_loss_dice_5: 1.227  m2_loss_ce_6: 0.4989  m2_loss_mask_6: 0.1724  m2_loss_dice_6: 1.206  m2_loss_ce_7: 0.4898  m2_loss_mask_7: 0.1704  m2_loss_dice_7: 1.243  m2_loss_ce_8: 0.4828  m2_loss_mask_8: 0.1699  m2_loss_dice_8: 1.223    time: 1.4545  last_time: 1.3455  data_time: 0.0588  last_data_time: 0.0463   lr: 0.0001  max_mem: 34123M
[10/07 00:23:44] d2.utils.events INFO:  eta: 0:20:13  iter: 159  total_loss: 39.1  m1_loss_ce: 0.5032  m1_loss_mask: 0.1719  m1_loss_dice: 1.188  m1_loss_ce_0: 0.5718  m1_loss_mask_0: 0.2038  m1_loss_dice_0: 1.414  m1_loss_ce_1: 0.6388  m1_loss_mask_1: 0.1838  m1_loss_dice_1: 1.297  m1_loss_ce_2: 0.5767  m1_loss_mask_2: 0.1808  m1_loss_dice_2: 1.271  m1_loss_ce_3: 0.5289  m1_loss_mask_3: 0.1755  m1_loss_dice_3: 1.223  m1_loss_ce_4: 0.5034  m1_loss_mask_4: 0.1763  m1_loss_dice_4: 1.199  m1_loss_ce_5: 0.4956  m1_loss_mask_5: 0.1735  m1_loss_dice_5: 1.19  m1_loss_ce_6: 0.4857  m1_loss_mask_6: 0.1756  m1_loss_dice_6: 1.174  m1_loss_ce_7: 0.4715  m1_loss_mask_7: 0.1756  m1_loss_dice_7: 1.18  m1_loss_ce_8: 0.4449  m1_loss_mask_8: 0.1753  m1_loss_dice_8: 1.185  m2_loss_ce: 0.5131  m2_loss_mask: 0.1632  m2_loss_dice: 1.182  m2_loss_ce_0: 0.5542  m2_loss_mask_0: 0.2068  m2_loss_dice_0: 1.509  m2_loss_ce_1: 0.6548  m2_loss_mask_1: 0.1813  m2_loss_dice_1: 1.304  m2_loss_ce_2: 0.5811  m2_loss_mask_2: 0.1691  m2_loss_dice_2: 1.243  m2_loss_ce_3: 0.5325  m2_loss_mask_3: 0.1699  m2_loss_dice_3: 1.204  m2_loss_ce_4: 0.5338  m2_loss_mask_4: 0.1675  m2_loss_dice_4: 1.215  m2_loss_ce_5: 0.55  m2_loss_mask_5: 0.1648  m2_loss_dice_5: 1.208  m2_loss_ce_6: 0.5237  m2_loss_mask_6: 0.1657  m2_loss_dice_6: 1.157  m2_loss_ce_7: 0.5095  m2_loss_mask_7: 0.1645  m2_loss_dice_7: 1.168  m2_loss_ce_8: 0.5353  m2_loss_mask_8: 0.1633  m2_loss_dice_8: 1.165    time: 1.4481  last_time: 1.3968  data_time: 0.0529  last_data_time: 0.0367   lr: 0.0001  max_mem: 34123M
[10/07 00:24:13] d2.utils.events INFO:  eta: 0:19:42  iter: 179  total_loss: 39.66  m1_loss_ce: 0.4911  m1_loss_mask: 0.169  m1_loss_dice: 1.196  m1_loss_ce_0: 0.5772  m1_loss_mask_0: 0.194  m1_loss_dice_0: 1.404  m1_loss_ce_1: 0.659  m1_loss_mask_1: 0.1812  m1_loss_dice_1: 1.294  m1_loss_ce_2: 0.6103  m1_loss_mask_2: 0.1721  m1_loss_dice_2: 1.227  m1_loss_ce_3: 0.5376  m1_loss_mask_3: 0.1731  m1_loss_dice_3: 1.201  m1_loss_ce_4: 0.5203  m1_loss_mask_4: 0.1698  m1_loss_dice_4: 1.206  m1_loss_ce_5: 0.4682  m1_loss_mask_5: 0.1681  m1_loss_dice_5: 1.219  m1_loss_ce_6: 0.4876  m1_loss_mask_6: 0.171  m1_loss_dice_6: 1.211  m1_loss_ce_7: 0.4782  m1_loss_mask_7: 0.1723  m1_loss_dice_7: 1.209  m1_loss_ce_8: 0.4983  m1_loss_mask_8: 0.1729  m1_loss_dice_8: 1.192  m2_loss_ce: 0.5088  m2_loss_mask: 0.165  m2_loss_dice: 1.27  m2_loss_ce_0: 0.5695  m2_loss_mask_0: 0.1966  m2_loss_dice_0: 1.479  m2_loss_ce_1: 0.6595  m2_loss_mask_1: 0.1861  m2_loss_dice_1: 1.348  m2_loss_ce_2: 0.5854  m2_loss_mask_2: 0.1713  m2_loss_dice_2: 1.281  m2_loss_ce_3: 0.5233  m2_loss_mask_3: 0.1665  m2_loss_dice_3: 1.237  m2_loss_ce_4: 0.5131  m2_loss_mask_4: 0.1676  m2_loss_dice_4: 1.247  m2_loss_ce_5: 0.5033  m2_loss_mask_5: 0.1643  m2_loss_dice_5: 1.213  m2_loss_ce_6: 0.4873  m2_loss_mask_6: 0.1673  m2_loss_dice_6: 1.171  m2_loss_ce_7: 0.5133  m2_loss_mask_7: 0.1673  m2_loss_dice_7: 1.227  m2_loss_ce_8: 0.4927  m2_loss_mask_8: 0.166  m2_loss_dice_8: 1.208    time: 1.4470  last_time: 1.5334  data_time: 0.0538  last_data_time: 0.0435   lr: 0.0001  max_mem: 34123M
[10/07 00:24:42] d2.utils.events INFO:  eta: 0:19:18  iter: 199  total_loss: 38.48  m1_loss_ce: 0.4863  m1_loss_mask: 0.1607  m1_loss_dice: 1.144  m1_loss_ce_0: 0.5635  m1_loss_mask_0: 0.191  m1_loss_dice_0: 1.312  m1_loss_ce_1: 0.6183  m1_loss_mask_1: 0.1791  m1_loss_dice_1: 1.304  m1_loss_ce_2: 0.5672  m1_loss_mask_2: 0.169  m1_loss_dice_2: 1.193  m1_loss_ce_3: 0.5249  m1_loss_mask_3: 0.1666  m1_loss_dice_3: 1.219  m1_loss_ce_4: 0.5222  m1_loss_mask_4: 0.1637  m1_loss_dice_4: 1.142  m1_loss_ce_5: 0.5  m1_loss_mask_5: 0.1602  m1_loss_dice_5: 1.177  m1_loss_ce_6: 0.4679  m1_loss_mask_6: 0.1592  m1_loss_dice_6: 1.13  m1_loss_ce_7: 0.4682  m1_loss_mask_7: 0.1617  m1_loss_dice_7: 1.121  m1_loss_ce_8: 0.4679  m1_loss_mask_8: 0.1624  m1_loss_dice_8: 1.151  m2_loss_ce: 0.5045  m2_loss_mask: 0.1676  m2_loss_dice: 1.174  m2_loss_ce_0: 0.5711  m2_loss_mask_0: 0.2028  m2_loss_dice_0: 1.394  m2_loss_ce_1: 0.6894  m2_loss_mask_1: 0.1809  m2_loss_dice_1: 1.273  m2_loss_ce_2: 0.6227  m2_loss_mask_2: 0.1673  m2_loss_dice_2: 1.25  m2_loss_ce_3: 0.5521  m2_loss_mask_3: 0.1715  m2_loss_dice_3: 1.19  m2_loss_ce_4: 0.5656  m2_loss_mask_4: 0.1709  m2_loss_dice_4: 1.171  m2_loss_ce_5: 0.5229  m2_loss_mask_5: 0.1701  m2_loss_dice_5: 1.189  m2_loss_ce_6: 0.5501  m2_loss_mask_6: 0.1697  m2_loss_dice_6: 1.179  m2_loss_ce_7: 0.5271  m2_loss_mask_7: 0.1691  m2_loss_dice_7: 1.19  m2_loss_ce_8: 0.5019  m2_loss_mask_8: 0.1667  m2_loss_dice_8: 1.205    time: 1.4495  last_time: 1.3805  data_time: 0.0504  last_data_time: 0.0415   lr: 0.0001  max_mem: 34123M
[10/07 00:25:11] d2.utils.events INFO:  eta: 0:18:47  iter: 219  total_loss: 39.62  m1_loss_ce: 0.5784  m1_loss_mask: 0.1635  m1_loss_dice: 1.235  m1_loss_ce_0: 0.5612  m1_loss_mask_0: 0.1938  m1_loss_dice_0: 1.407  m1_loss_ce_1: 0.6429  m1_loss_mask_1: 0.1814  m1_loss_dice_1: 1.346  m1_loss_ce_2: 0.5939  m1_loss_mask_2: 0.1701  m1_loss_dice_2: 1.287  m1_loss_ce_3: 0.5425  m1_loss_mask_3: 0.17  m1_loss_dice_3: 1.239  m1_loss_ce_4: 0.514  m1_loss_mask_4: 0.1686  m1_loss_dice_4: 1.265  m1_loss_ce_5: 0.5134  m1_loss_mask_5: 0.1644  m1_loss_dice_5: 1.213  m1_loss_ce_6: 0.486  m1_loss_mask_6: 0.1656  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.5062  m1_loss_mask_7: 0.1642  m1_loss_dice_7: 1.222  m1_loss_ce_8: 0.5134  m1_loss_mask_8: 0.1635  m1_loss_dice_8: 1.198  m2_loss_ce: 0.5622  m2_loss_mask: 0.1636  m2_loss_dice: 1.209  m2_loss_ce_0: 0.5637  m2_loss_mask_0: 0.2012  m2_loss_dice_0: 1.453  m2_loss_ce_1: 0.6866  m2_loss_mask_1: 0.174  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.6375  m2_loss_mask_2: 0.1664  m2_loss_dice_2: 1.27  m2_loss_ce_3: 0.5649  m2_loss_mask_3: 0.1676  m2_loss_dice_3: 1.19  m2_loss_ce_4: 0.605  m2_loss_mask_4: 0.1686  m2_loss_dice_4: 1.22  m2_loss_ce_5: 0.5558  m2_loss_mask_5: 0.1609  m2_loss_dice_5: 1.228  m2_loss_ce_6: 0.5625  m2_loss_mask_6: 0.1671  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.5343  m2_loss_mask_7: 0.1643  m2_loss_dice_7: 1.2  m2_loss_ce_8: 0.5328  m2_loss_mask_8: 0.164  m2_loss_dice_8: 1.232    time: 1.4484  last_time: 1.4966  data_time: 0.0612  last_data_time: 0.0669   lr: 0.0001  max_mem: 34123M
[10/07 00:25:41] d2.utils.events INFO:  eta: 0:18:21  iter: 239  total_loss: 39.1  m1_loss_ce: 0.469  m1_loss_mask: 0.1692  m1_loss_dice: 1.192  m1_loss_ce_0: 0.5513  m1_loss_mask_0: 0.1921  m1_loss_dice_0: 1.401  m1_loss_ce_1: 0.5874  m1_loss_mask_1: 0.1735  m1_loss_dice_1: 1.333  m1_loss_ce_2: 0.5661  m1_loss_mask_2: 0.1702  m1_loss_dice_2: 1.278  m1_loss_ce_3: 0.5233  m1_loss_mask_3: 0.1682  m1_loss_dice_3: 1.218  m1_loss_ce_4: 0.4834  m1_loss_mask_4: 0.1674  m1_loss_dice_4: 1.223  m1_loss_ce_5: 0.4804  m1_loss_mask_5: 0.1674  m1_loss_dice_5: 1.209  m1_loss_ce_6: 0.4729  m1_loss_mask_6: 0.1667  m1_loss_dice_6: 1.188  m1_loss_ce_7: 0.4654  m1_loss_mask_7: 0.1668  m1_loss_dice_7: 1.218  m1_loss_ce_8: 0.4774  m1_loss_mask_8: 0.1671  m1_loss_dice_8: 1.19  m2_loss_ce: 0.5156  m2_loss_mask: 0.1674  m2_loss_dice: 1.193  m2_loss_ce_0: 0.5697  m2_loss_mask_0: 0.1949  m2_loss_dice_0: 1.404  m2_loss_ce_1: 0.6738  m2_loss_mask_1: 0.1767  m2_loss_dice_1: 1.313  m2_loss_ce_2: 0.5969  m2_loss_mask_2: 0.1651  m2_loss_dice_2: 1.247  m2_loss_ce_3: 0.5569  m2_loss_mask_3: 0.1657  m2_loss_dice_3: 1.207  m2_loss_ce_4: 0.5398  m2_loss_mask_4: 0.1726  m2_loss_dice_4: 1.211  m2_loss_ce_5: 0.5135  m2_loss_mask_5: 0.1704  m2_loss_dice_5: 1.168  m2_loss_ce_6: 0.51  m2_loss_mask_6: 0.174  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.5364  m2_loss_mask_7: 0.1718  m2_loss_dice_7: 1.19  m2_loss_ce_8: 0.5154  m2_loss_mask_8: 0.1673  m2_loss_dice_8: 1.186    time: 1.4510  last_time: 1.4367  data_time: 0.0530  last_data_time: 0.0576   lr: 0.0001  max_mem: 34123M
[10/07 00:26:11] d2.utils.events INFO:  eta: 0:17:52  iter: 259  total_loss: 39.61  m1_loss_ce: 0.4756  m1_loss_mask: 0.1539  m1_loss_dice: 1.233  m1_loss_ce_0: 0.558  m1_loss_mask_0: 0.1888  m1_loss_dice_0: 1.452  m1_loss_ce_1: 0.6335  m1_loss_mask_1: 0.1688  m1_loss_dice_1: 1.36  m1_loss_ce_2: 0.5193  m1_loss_mask_2: 0.1634  m1_loss_dice_2: 1.357  m1_loss_ce_3: 0.5171  m1_loss_mask_3: 0.1614  m1_loss_dice_3: 1.287  m1_loss_ce_4: 0.4716  m1_loss_mask_4: 0.158  m1_loss_dice_4: 1.282  m1_loss_ce_5: 0.453  m1_loss_mask_5: 0.1553  m1_loss_dice_5: 1.246  m1_loss_ce_6: 0.4447  m1_loss_mask_6: 0.1554  m1_loss_dice_6: 1.183  m1_loss_ce_7: 0.4708  m1_loss_mask_7: 0.1555  m1_loss_dice_7: 1.259  m1_loss_ce_8: 0.4564  m1_loss_mask_8: 0.1551  m1_loss_dice_8: 1.226  m2_loss_ce: 0.5108  m2_loss_mask: 0.1515  m2_loss_dice: 1.24  m2_loss_ce_0: 0.5922  m2_loss_mask_0: 0.1862  m2_loss_dice_0: 1.497  m2_loss_ce_1: 0.6698  m2_loss_mask_1: 0.1625  m2_loss_dice_1: 1.382  m2_loss_ce_2: 0.5711  m2_loss_mask_2: 0.1555  m2_loss_dice_2: 1.337  m2_loss_ce_3: 0.5537  m2_loss_mask_3: 0.154  m2_loss_dice_3: 1.268  m2_loss_ce_4: 0.5305  m2_loss_mask_4: 0.1545  m2_loss_dice_4: 1.267  m2_loss_ce_5: 0.5139  m2_loss_mask_5: 0.1515  m2_loss_dice_5: 1.263  m2_loss_ce_6: 0.5125  m2_loss_mask_6: 0.1523  m2_loss_dice_6: 1.203  m2_loss_ce_7: 0.5001  m2_loss_mask_7: 0.1516  m2_loss_dice_7: 1.268  m2_loss_ce_8: 0.5083  m2_loss_mask_8: 0.1514  m2_loss_dice_8: 1.224    time: 1.4537  last_time: 1.3838  data_time: 0.0632  last_data_time: 0.0483   lr: 0.0001  max_mem: 34123M
[10/07 00:26:39] d2.utils.events INFO:  eta: 0:17:20  iter: 279  total_loss: 42.72  m1_loss_ce: 0.5431  m1_loss_mask: 0.1705  m1_loss_dice: 1.268  m1_loss_ce_0: 0.612  m1_loss_mask_0: 0.1939  m1_loss_dice_0: 1.46  m1_loss_ce_1: 0.6814  m1_loss_mask_1: 0.1828  m1_loss_dice_1: 1.434  m1_loss_ce_2: 0.607  m1_loss_mask_2: 0.1752  m1_loss_dice_2: 1.398  m1_loss_ce_3: 0.5897  m1_loss_mask_3: 0.1701  m1_loss_dice_3: 1.286  m1_loss_ce_4: 0.5207  m1_loss_mask_4: 0.1666  m1_loss_dice_4: 1.32  m1_loss_ce_5: 0.5409  m1_loss_mask_5: 0.169  m1_loss_dice_5: 1.304  m1_loss_ce_6: 0.5457  m1_loss_mask_6: 0.1693  m1_loss_dice_6: 1.23  m1_loss_ce_7: 0.5389  m1_loss_mask_7: 0.1689  m1_loss_dice_7: 1.276  m1_loss_ce_8: 0.5196  m1_loss_mask_8: 0.1706  m1_loss_dice_8: 1.28  m2_loss_ce: 0.5828  m2_loss_mask: 0.1701  m2_loss_dice: 1.288  m2_loss_ce_0: 0.6425  m2_loss_mask_0: 0.1971  m2_loss_dice_0: 1.514  m2_loss_ce_1: 0.7381  m2_loss_mask_1: 0.1798  m2_loss_dice_1: 1.411  m2_loss_ce_2: 0.6755  m2_loss_mask_2: 0.169  m2_loss_dice_2: 1.369  m2_loss_ce_3: 0.6595  m2_loss_mask_3: 0.1692  m2_loss_dice_3: 1.306  m2_loss_ce_4: 0.6029  m2_loss_mask_4: 0.1677  m2_loss_dice_4: 1.281  m2_loss_ce_5: 0.6342  m2_loss_mask_5: 0.1657  m2_loss_dice_5: 1.268  m2_loss_ce_6: 0.5892  m2_loss_mask_6: 0.1679  m2_loss_dice_6: 1.286  m2_loss_ce_7: 0.5908  m2_loss_mask_7: 0.1657  m2_loss_dice_7: 1.276  m2_loss_ce_8: 0.5721  m2_loss_mask_8: 0.1681  m2_loss_dice_8: 1.293    time: 1.4488  last_time: 1.3545  data_time: 0.0508  last_data_time: 0.0429   lr: 0.0001  max_mem: 34123M
[10/07 00:27:08] d2.utils.events INFO:  eta: 0:16:50  iter: 299  total_loss: 40.65  m1_loss_ce: 0.5503  m1_loss_mask: 0.1562  m1_loss_dice: 1.274  m1_loss_ce_0: 0.6101  m1_loss_mask_0: 0.1771  m1_loss_dice_0: 1.43  m1_loss_ce_1: 0.6794  m1_loss_mask_1: 0.1632  m1_loss_dice_1: 1.352  m1_loss_ce_2: 0.6306  m1_loss_mask_2: 0.1591  m1_loss_dice_2: 1.303  m1_loss_ce_3: 0.6079  m1_loss_mask_3: 0.1586  m1_loss_dice_3: 1.251  m1_loss_ce_4: 0.5502  m1_loss_mask_4: 0.1559  m1_loss_dice_4: 1.243  m1_loss_ce_5: 0.5321  m1_loss_mask_5: 0.1579  m1_loss_dice_5: 1.231  m1_loss_ce_6: 0.5284  m1_loss_mask_6: 0.1571  m1_loss_dice_6: 1.227  m1_loss_ce_7: 0.5341  m1_loss_mask_7: 0.1535  m1_loss_dice_7: 1.221  m1_loss_ce_8: 0.5287  m1_loss_mask_8: 0.1555  m1_loss_dice_8: 1.193  m2_loss_ce: 0.5783  m2_loss_mask: 0.1594  m2_loss_dice: 1.215  m2_loss_ce_0: 0.5815  m2_loss_mask_0: 0.187  m2_loss_dice_0: 1.497  m2_loss_ce_1: 0.7432  m2_loss_mask_1: 0.1731  m2_loss_dice_1: 1.339  m2_loss_ce_2: 0.6427  m2_loss_mask_2: 0.1621  m2_loss_dice_2: 1.302  m2_loss_ce_3: 0.6121  m2_loss_mask_3: 0.1612  m2_loss_dice_3: 1.257  m2_loss_ce_4: 0.5836  m2_loss_mask_4: 0.1627  m2_loss_dice_4: 1.245  m2_loss_ce_5: 0.5939  m2_loss_mask_5: 0.1585  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.5584  m2_loss_mask_6: 0.1596  m2_loss_dice_6: 1.226  m2_loss_ce_7: 0.5476  m2_loss_mask_7: 0.1613  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.5732  m2_loss_mask_8: 0.16  m2_loss_dice_8: 1.24    time: 1.4490  last_time: 1.5326  data_time: 0.0719  last_data_time: 0.0759   lr: 0.0001  max_mem: 34123M
[10/07 00:27:38] d2.utils.events INFO:  eta: 0:16:25  iter: 319  total_loss: 40.54  m1_loss_ce: 0.5231  m1_loss_mask: 0.1658  m1_loss_dice: 1.211  m1_loss_ce_0: 0.5553  m1_loss_mask_0: 0.1957  m1_loss_dice_0: 1.401  m1_loss_ce_1: 0.6275  m1_loss_mask_1: 0.1719  m1_loss_dice_1: 1.343  m1_loss_ce_2: 0.5591  m1_loss_mask_2: 0.171  m1_loss_dice_2: 1.287  m1_loss_ce_3: 0.529  m1_loss_mask_3: 0.1717  m1_loss_dice_3: 1.252  m1_loss_ce_4: 0.5188  m1_loss_mask_4: 0.1719  m1_loss_dice_4: 1.22  m1_loss_ce_5: 0.4664  m1_loss_mask_5: 0.1682  m1_loss_dice_5: 1.228  m1_loss_ce_6: 0.4824  m1_loss_mask_6: 0.1673  m1_loss_dice_6: 1.214  m1_loss_ce_7: 0.4803  m1_loss_mask_7: 0.1682  m1_loss_dice_7: 1.207  m1_loss_ce_8: 0.4569  m1_loss_mask_8: 0.1657  m1_loss_dice_8: 1.219  m2_loss_ce: 0.5446  m2_loss_mask: 0.1665  m2_loss_dice: 1.245  m2_loss_ce_0: 0.5963  m2_loss_mask_0: 0.1968  m2_loss_dice_0: 1.496  m2_loss_ce_1: 0.6958  m2_loss_mask_1: 0.1764  m2_loss_dice_1: 1.351  m2_loss_ce_2: 0.5942  m2_loss_mask_2: 0.1698  m2_loss_dice_2: 1.325  m2_loss_ce_3: 0.5555  m2_loss_mask_3: 0.1704  m2_loss_dice_3: 1.267  m2_loss_ce_4: 0.5528  m2_loss_mask_4: 0.1695  m2_loss_dice_4: 1.263  m2_loss_ce_5: 0.5594  m2_loss_mask_5: 0.1682  m2_loss_dice_5: 1.242  m2_loss_ce_6: 0.5408  m2_loss_mask_6: 0.1686  m2_loss_dice_6: 1.283  m2_loss_ce_7: 0.5511  m2_loss_mask_7: 0.1689  m2_loss_dice_7: 1.233  m2_loss_ce_8: 0.5221  m2_loss_mask_8: 0.1678  m2_loss_dice_8: 1.227    time: 1.4520  last_time: 1.5789  data_time: 0.0568  last_data_time: 0.0433   lr: 0.0001  max_mem: 34123M
[10/07 00:28:06] d2.utils.events INFO:  eta: 0:15:55  iter: 339  total_loss: 38.36  m1_loss_ce: 0.4655  m1_loss_mask: 0.1705  m1_loss_dice: 1.17  m1_loss_ce_0: 0.4936  m1_loss_mask_0: 0.1995  m1_loss_dice_0: 1.325  m1_loss_ce_1: 0.6034  m1_loss_mask_1: 0.1831  m1_loss_dice_1: 1.29  m1_loss_ce_2: 0.5553  m1_loss_mask_2: 0.1767  m1_loss_dice_2: 1.208  m1_loss_ce_3: 0.4858  m1_loss_mask_3: 0.1768  m1_loss_dice_3: 1.172  m1_loss_ce_4: 0.4864  m1_loss_mask_4: 0.1753  m1_loss_dice_4: 1.155  m1_loss_ce_5: 0.4439  m1_loss_mask_5: 0.1733  m1_loss_dice_5: 1.17  m1_loss_ce_6: 0.4401  m1_loss_mask_6: 0.1736  m1_loss_dice_6: 1.163  m1_loss_ce_7: 0.4769  m1_loss_mask_7: 0.173  m1_loss_dice_7: 1.171  m1_loss_ce_8: 0.4293  m1_loss_mask_8: 0.1715  m1_loss_dice_8: 1.182  m2_loss_ce: 0.4729  m2_loss_mask: 0.1669  m2_loss_dice: 1.185  m2_loss_ce_0: 0.5712  m2_loss_mask_0: 0.197  m2_loss_dice_0: 1.407  m2_loss_ce_1: 0.6318  m2_loss_mask_1: 0.181  m2_loss_dice_1: 1.258  m2_loss_ce_2: 0.5891  m2_loss_mask_2: 0.1737  m2_loss_dice_2: 1.211  m2_loss_ce_3: 0.5437  m2_loss_mask_3: 0.1714  m2_loss_dice_3: 1.176  m2_loss_ce_4: 0.5283  m2_loss_mask_4: 0.1735  m2_loss_dice_4: 1.156  m2_loss_ce_5: 0.5033  m2_loss_mask_5: 0.1665  m2_loss_dice_5: 1.156  m2_loss_ce_6: 0.5061  m2_loss_mask_6: 0.171  m2_loss_dice_6: 1.118  m2_loss_ce_7: 0.5096  m2_loss_mask_7: 0.1676  m2_loss_dice_7: 1.156  m2_loss_ce_8: 0.5011  m2_loss_mask_8: 0.1671  m2_loss_dice_8: 1.144    time: 1.4503  last_time: 1.4495  data_time: 0.0527  last_data_time: 0.0749   lr: 0.0001  max_mem: 34123M
[10/07 00:28:35] d2.utils.events INFO:  eta: 0:15:25  iter: 359  total_loss: 41.94  m1_loss_ce: 0.522  m1_loss_mask: 0.1614  m1_loss_dice: 1.251  m1_loss_ce_0: 0.5491  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.521  m1_loss_ce_1: 0.6203  m1_loss_mask_1: 0.1729  m1_loss_dice_1: 1.359  m1_loss_ce_2: 0.5868  m1_loss_mask_2: 0.1677  m1_loss_dice_2: 1.341  m1_loss_ce_3: 0.5477  m1_loss_mask_3: 0.163  m1_loss_dice_3: 1.283  m1_loss_ce_4: 0.5047  m1_loss_mask_4: 0.1608  m1_loss_dice_4: 1.263  m1_loss_ce_5: 0.4887  m1_loss_mask_5: 0.1598  m1_loss_dice_5: 1.27  m1_loss_ce_6: 0.4729  m1_loss_mask_6: 0.1593  m1_loss_dice_6: 1.306  m1_loss_ce_7: 0.491  m1_loss_mask_7: 0.1616  m1_loss_dice_7: 1.262  m1_loss_ce_8: 0.5074  m1_loss_mask_8: 0.1612  m1_loss_dice_8: 1.254  m2_loss_ce: 0.5445  m2_loss_mask: 0.1578  m2_loss_dice: 1.244  m2_loss_ce_0: 0.6222  m2_loss_mask_0: 0.1894  m2_loss_dice_0: 1.573  m2_loss_ce_1: 0.739  m2_loss_mask_1: 0.166  m2_loss_dice_1: 1.337  m2_loss_ce_2: 0.6658  m2_loss_mask_2: 0.1578  m2_loss_dice_2: 1.286  m2_loss_ce_3: 0.5931  m2_loss_mask_3: 0.1604  m2_loss_dice_3: 1.272  m2_loss_ce_4: 0.6044  m2_loss_mask_4: 0.1593  m2_loss_dice_4: 1.232  m2_loss_ce_5: 0.5526  m2_loss_mask_5: 0.1565  m2_loss_dice_5: 1.211  m2_loss_ce_6: 0.5635  m2_loss_mask_6: 0.1591  m2_loss_dice_6: 1.255  m2_loss_ce_7: 0.5583  m2_loss_mask_7: 0.1573  m2_loss_dice_7: 1.21  m2_loss_ce_8: 0.5639  m2_loss_mask_8: 0.1556  m2_loss_dice_8: 1.244    time: 1.4500  last_time: 1.5837  data_time: 0.0660  last_data_time: 0.0884   lr: 0.0001  max_mem: 34123M
[10/07 00:29:05] d2.utils.events INFO:  eta: 0:14:58  iter: 379  total_loss: 40.97  m1_loss_ce: 0.4909  m1_loss_mask: 0.168  m1_loss_dice: 1.232  m1_loss_ce_0: 0.5564  m1_loss_mask_0: 0.205  m1_loss_dice_0: 1.475  m1_loss_ce_1: 0.6636  m1_loss_mask_1: 0.1876  m1_loss_dice_1: 1.378  m1_loss_ce_2: 0.5775  m1_loss_mask_2: 0.1772  m1_loss_dice_2: 1.356  m1_loss_ce_3: 0.5158  m1_loss_mask_3: 0.1717  m1_loss_dice_3: 1.251  m1_loss_ce_4: 0.5002  m1_loss_mask_4: 0.1708  m1_loss_dice_4: 1.27  m1_loss_ce_5: 0.4921  m1_loss_mask_5: 0.1698  m1_loss_dice_5: 1.284  m1_loss_ce_6: 0.5114  m1_loss_mask_6: 0.1696  m1_loss_dice_6: 1.262  m1_loss_ce_7: 0.4721  m1_loss_mask_7: 0.1671  m1_loss_dice_7: 1.262  m1_loss_ce_8: 0.4603  m1_loss_mask_8: 0.1676  m1_loss_dice_8: 1.251  m2_loss_ce: 0.5373  m2_loss_mask: 0.1746  m2_loss_dice: 1.271  m2_loss_ce_0: 0.5777  m2_loss_mask_0: 0.209  m2_loss_dice_0: 1.535  m2_loss_ce_1: 0.7142  m2_loss_mask_1: 0.1905  m2_loss_dice_1: 1.359  m2_loss_ce_2: 0.6246  m2_loss_mask_2: 0.1804  m2_loss_dice_2: 1.352  m2_loss_ce_3: 0.6129  m2_loss_mask_3: 0.1781  m2_loss_dice_3: 1.293  m2_loss_ce_4: 0.5902  m2_loss_mask_4: 0.1775  m2_loss_dice_4: 1.305  m2_loss_ce_5: 0.612  m2_loss_mask_5: 0.1739  m2_loss_dice_5: 1.308  m2_loss_ce_6: 0.5685  m2_loss_mask_6: 0.1763  m2_loss_dice_6: 1.272  m2_loss_ce_7: 0.5744  m2_loss_mask_7: 0.1737  m2_loss_dice_7: 1.28  m2_loss_ce_8: 0.5562  m2_loss_mask_8: 0.1738  m2_loss_dice_8: 1.249    time: 1.4517  last_time: 1.4698  data_time: 0.0536  last_data_time: 0.0385   lr: 0.0001  max_mem: 34123M
[10/07 00:29:35] d2.utils.events INFO:  eta: 0:14:29  iter: 399  total_loss: 40.57  m1_loss_ce: 0.5609  m1_loss_mask: 0.1611  m1_loss_dice: 1.248  m1_loss_ce_0: 0.5881  m1_loss_mask_0: 0.1906  m1_loss_dice_0: 1.462  m1_loss_ce_1: 0.63  m1_loss_mask_1: 0.1764  m1_loss_dice_1: 1.385  m1_loss_ce_2: 0.5878  m1_loss_mask_2: 0.1734  m1_loss_dice_2: 1.314  m1_loss_ce_3: 0.5145  m1_loss_mask_3: 0.1668  m1_loss_dice_3: 1.282  m1_loss_ce_4: 0.4991  m1_loss_mask_4: 0.1654  m1_loss_dice_4: 1.243  m1_loss_ce_5: 0.4551  m1_loss_mask_5: 0.1626  m1_loss_dice_5: 1.264  m1_loss_ce_6: 0.4812  m1_loss_mask_6: 0.1624  m1_loss_dice_6: 1.259  m1_loss_ce_7: 0.4819  m1_loss_mask_7: 0.162  m1_loss_dice_7: 1.251  m1_loss_ce_8: 0.4527  m1_loss_mask_8: 0.1607  m1_loss_dice_8: 1.242  m2_loss_ce: 0.5609  m2_loss_mask: 0.172  m2_loss_dice: 1.25  m2_loss_ce_0: 0.5918  m2_loss_mask_0: 0.1982  m2_loss_dice_0: 1.518  m2_loss_ce_1: 0.7052  m2_loss_mask_1: 0.1759  m2_loss_dice_1: 1.354  m2_loss_ce_2: 0.6284  m2_loss_mask_2: 0.1775  m2_loss_dice_2: 1.296  m2_loss_ce_3: 0.5924  m2_loss_mask_3: 0.1743  m2_loss_dice_3: 1.258  m2_loss_ce_4: 0.6084  m2_loss_mask_4: 0.1736  m2_loss_dice_4: 1.248  m2_loss_ce_5: 0.5924  m2_loss_mask_5: 0.171  m2_loss_dice_5: 1.255  m2_loss_ce_6: 0.5549  m2_loss_mask_6: 0.1735  m2_loss_dice_6: 1.239  m2_loss_ce_7: 0.564  m2_loss_mask_7: 0.1697  m2_loss_dice_7: 1.231  m2_loss_ce_8: 0.5909  m2_loss_mask_8: 0.1697  m2_loss_dice_8: 1.257    time: 1.4532  last_time: 1.4314  data_time: 0.0659  last_data_time: 0.0501   lr: 0.0001  max_mem: 34123M
[10/07 00:30:03] d2.utils.events INFO:  eta: 0:13:59  iter: 419  total_loss: 39.31  m1_loss_ce: 0.4854  m1_loss_mask: 0.1589  m1_loss_dice: 1.19  m1_loss_ce_0: 0.5502  m1_loss_mask_0: 0.1836  m1_loss_dice_0: 1.378  m1_loss_ce_1: 0.5736  m1_loss_mask_1: 0.172  m1_loss_dice_1: 1.328  m1_loss_ce_2: 0.5551  m1_loss_mask_2: 0.1596  m1_loss_dice_2: 1.307  m1_loss_ce_3: 0.4755  m1_loss_mask_3: 0.1624  m1_loss_dice_3: 1.182  m1_loss_ce_4: 0.4705  m1_loss_mask_4: 0.16  m1_loss_dice_4: 1.225  m1_loss_ce_5: 0.4526  m1_loss_mask_5: 0.1621  m1_loss_dice_5: 1.2  m1_loss_ce_6: 0.4485  m1_loss_mask_6: 0.1601  m1_loss_dice_6: 1.205  m1_loss_ce_7: 0.4148  m1_loss_mask_7: 0.1605  m1_loss_dice_7: 1.233  m1_loss_ce_8: 0.4442  m1_loss_mask_8: 0.16  m1_loss_dice_8: 1.197  m2_loss_ce: 0.506  m2_loss_mask: 0.1583  m2_loss_dice: 1.228  m2_loss_ce_0: 0.558  m2_loss_mask_0: 0.1821  m2_loss_dice_0: 1.485  m2_loss_ce_1: 0.6574  m2_loss_mask_1: 0.1671  m2_loss_dice_1: 1.302  m2_loss_ce_2: 0.6191  m2_loss_mask_2: 0.1617  m2_loss_dice_2: 1.264  m2_loss_ce_3: 0.5993  m2_loss_mask_3: 0.1634  m2_loss_dice_3: 1.21  m2_loss_ce_4: 0.565  m2_loss_mask_4: 0.1617  m2_loss_dice_4: 1.237  m2_loss_ce_5: 0.5401  m2_loss_mask_5: 0.1564  m2_loss_dice_5: 1.238  m2_loss_ce_6: 0.52  m2_loss_mask_6: 0.158  m2_loss_dice_6: 1.213  m2_loss_ce_7: 0.5406  m2_loss_mask_7: 0.1581  m2_loss_dice_7: 1.222  m2_loss_ce_8: 0.5447  m2_loss_mask_8: 0.1589  m2_loss_dice_8: 1.223    time: 1.4499  last_time: 1.3951  data_time: 0.0469  last_data_time: 0.0488   lr: 0.0001  max_mem: 34123M
[10/07 00:30:32] d2.utils.events INFO:  eta: 0:13:29  iter: 439  total_loss: 40.4  m1_loss_ce: 0.6189  m1_loss_mask: 0.1651  m1_loss_dice: 1.24  m1_loss_ce_0: 0.5733  m1_loss_mask_0: 0.1911  m1_loss_dice_0: 1.424  m1_loss_ce_1: 0.6412  m1_loss_mask_1: 0.1794  m1_loss_dice_1: 1.332  m1_loss_ce_2: 0.5891  m1_loss_mask_2: 0.1737  m1_loss_dice_2: 1.317  m1_loss_ce_3: 0.5381  m1_loss_mask_3: 0.1687  m1_loss_dice_3: 1.21  m1_loss_ce_4: 0.5064  m1_loss_mask_4: 0.1668  m1_loss_dice_4: 1.268  m1_loss_ce_5: 0.5069  m1_loss_mask_5: 0.1625  m1_loss_dice_5: 1.217  m1_loss_ce_6: 0.4969  m1_loss_mask_6: 0.1646  m1_loss_dice_6: 1.197  m1_loss_ce_7: 0.4876  m1_loss_mask_7: 0.1661  m1_loss_dice_7: 1.21  m1_loss_ce_8: 0.5019  m1_loss_mask_8: 0.1656  m1_loss_dice_8: 1.209  m2_loss_ce: 0.5496  m2_loss_mask: 0.1757  m2_loss_dice: 1.232  m2_loss_ce_0: 0.6044  m2_loss_mask_0: 0.2055  m2_loss_dice_0: 1.519  m2_loss_ce_1: 0.6889  m2_loss_mask_1: 0.1853  m2_loss_dice_1: 1.361  m2_loss_ce_2: 0.6117  m2_loss_mask_2: 0.1719  m2_loss_dice_2: 1.28  m2_loss_ce_3: 0.5663  m2_loss_mask_3: 0.1769  m2_loss_dice_3: 1.25  m2_loss_ce_4: 0.5657  m2_loss_mask_4: 0.1764  m2_loss_dice_4: 1.272  m2_loss_ce_5: 0.5467  m2_loss_mask_5: 0.1756  m2_loss_dice_5: 1.269  m2_loss_ce_6: 0.5533  m2_loss_mask_6: 0.1783  m2_loss_dice_6: 1.228  m2_loss_ce_7: 0.5722  m2_loss_mask_7: 0.1771  m2_loss_dice_7: 1.221  m2_loss_ce_8: 0.5511  m2_loss_mask_8: 0.174  m2_loss_dice_8: 1.258    time: 1.4497  last_time: 1.3699  data_time: 0.0614  last_data_time: 0.0620   lr: 0.0001  max_mem: 34123M
[10/07 00:31:01] d2.utils.events INFO:  eta: 0:13:01  iter: 459  total_loss: 40.73  m1_loss_ce: 0.5424  m1_loss_mask: 0.1635  m1_loss_dice: 1.222  m1_loss_ce_0: 0.5656  m1_loss_mask_0: 0.1833  m1_loss_dice_0: 1.433  m1_loss_ce_1: 0.6017  m1_loss_mask_1: 0.1762  m1_loss_dice_1: 1.342  m1_loss_ce_2: 0.5684  m1_loss_mask_2: 0.164  m1_loss_dice_2: 1.283  m1_loss_ce_3: 0.4917  m1_loss_mask_3: 0.1586  m1_loss_dice_3: 1.235  m1_loss_ce_4: 0.4636  m1_loss_mask_4: 0.1616  m1_loss_dice_4: 1.238  m1_loss_ce_5: 0.4995  m1_loss_mask_5: 0.1592  m1_loss_dice_5: 1.215  m1_loss_ce_6: 0.4658  m1_loss_mask_6: 0.1613  m1_loss_dice_6: 1.235  m1_loss_ce_7: 0.489  m1_loss_mask_7: 0.1597  m1_loss_dice_7: 1.212  m1_loss_ce_8: 0.4637  m1_loss_mask_8: 0.163  m1_loss_dice_8: 1.258  m2_loss_ce: 0.5413  m2_loss_mask: 0.1645  m2_loss_dice: 1.251  m2_loss_ce_0: 0.6017  m2_loss_mask_0: 0.1951  m2_loss_dice_0: 1.48  m2_loss_ce_1: 0.7048  m2_loss_mask_1: 0.1779  m2_loss_dice_1: 1.387  m2_loss_ce_2: 0.6427  m2_loss_mask_2: 0.1684  m2_loss_dice_2: 1.308  m2_loss_ce_3: 0.5806  m2_loss_mask_3: 0.1659  m2_loss_dice_3: 1.291  m2_loss_ce_4: 0.6008  m2_loss_mask_4: 0.1674  m2_loss_dice_4: 1.287  m2_loss_ce_5: 0.5833  m2_loss_mask_5: 0.1632  m2_loss_dice_5: 1.269  m2_loss_ce_6: 0.5472  m2_loss_mask_6: 0.1652  m2_loss_dice_6: 1.268  m2_loss_ce_7: 0.5443  m2_loss_mask_7: 0.165  m2_loss_dice_7: 1.244  m2_loss_ce_8: 0.5573  m2_loss_mask_8: 0.1636  m2_loss_dice_8: 1.266    time: 1.4509  last_time: 1.4027  data_time: 0.0547  last_data_time: 0.0446   lr: 0.0001  max_mem: 34123M
[10/07 00:31:30] d2.utils.events INFO:  eta: 0:12:32  iter: 479  total_loss: 39.11  m1_loss_ce: 0.5355  m1_loss_mask: 0.1652  m1_loss_dice: 1.201  m1_loss_ce_0: 0.5736  m1_loss_mask_0: 0.199  m1_loss_dice_0: 1.386  m1_loss_ce_1: 0.6403  m1_loss_mask_1: 0.1852  m1_loss_dice_1: 1.29  m1_loss_ce_2: 0.5658  m1_loss_mask_2: 0.1698  m1_loss_dice_2: 1.276  m1_loss_ce_3: 0.5194  m1_loss_mask_3: 0.1679  m1_loss_dice_3: 1.223  m1_loss_ce_4: 0.5022  m1_loss_mask_4: 0.1684  m1_loss_dice_4: 1.171  m1_loss_ce_5: 0.5095  m1_loss_mask_5: 0.1655  m1_loss_dice_5: 1.185  m1_loss_ce_6: 0.4692  m1_loss_mask_6: 0.1649  m1_loss_dice_6: 1.178  m1_loss_ce_7: 0.4808  m1_loss_mask_7: 0.1646  m1_loss_dice_7: 1.181  m1_loss_ce_8: 0.4446  m1_loss_mask_8: 0.1643  m1_loss_dice_8: 1.183  m2_loss_ce: 0.5493  m2_loss_mask: 0.1683  m2_loss_dice: 1.189  m2_loss_ce_0: 0.5964  m2_loss_mask_0: 0.2098  m2_loss_dice_0: 1.473  m2_loss_ce_1: 0.6564  m2_loss_mask_1: 0.1949  m2_loss_dice_1: 1.295  m2_loss_ce_2: 0.6379  m2_loss_mask_2: 0.1745  m2_loss_dice_2: 1.265  m2_loss_ce_3: 0.5671  m2_loss_mask_3: 0.1759  m2_loss_dice_3: 1.211  m2_loss_ce_4: 0.5639  m2_loss_mask_4: 0.1714  m2_loss_dice_4: 1.206  m2_loss_ce_5: 0.5596  m2_loss_mask_5: 0.1689  m2_loss_dice_5: 1.199  m2_loss_ce_6: 0.5358  m2_loss_mask_6: 0.1717  m2_loss_dice_6: 1.193  m2_loss_ce_7: 0.5551  m2_loss_mask_7: 0.1683  m2_loss_dice_7: 1.231  m2_loss_ce_8: 0.5119  m2_loss_mask_8: 0.1697  m2_loss_dice_8: 1.2    time: 1.4508  last_time: 1.3541  data_time: 0.0580  last_data_time: 0.0443   lr: 0.0001  max_mem: 34498M
[10/07 00:31:59] d2.utils.events INFO:  eta: 0:12:00  iter: 499  total_loss: 39.25  m1_loss_ce: 0.5163  m1_loss_mask: 0.1671  m1_loss_dice: 1.187  m1_loss_ce_0: 0.5528  m1_loss_mask_0: 0.1976  m1_loss_dice_0: 1.388  m1_loss_ce_1: 0.6071  m1_loss_mask_1: 0.1809  m1_loss_dice_1: 1.287  m1_loss_ce_2: 0.5579  m1_loss_mask_2: 0.173  m1_loss_dice_2: 1.24  m1_loss_ce_3: 0.4867  m1_loss_mask_3: 0.1704  m1_loss_dice_3: 1.194  m1_loss_ce_4: 0.5007  m1_loss_mask_4: 0.1723  m1_loss_dice_4: 1.202  m1_loss_ce_5: 0.4582  m1_loss_mask_5: 0.1708  m1_loss_dice_5: 1.197  m1_loss_ce_6: 0.4657  m1_loss_mask_6: 0.169  m1_loss_dice_6: 1.212  m1_loss_ce_7: 0.4758  m1_loss_mask_7: 0.1666  m1_loss_dice_7: 1.175  m1_loss_ce_8: 0.4685  m1_loss_mask_8: 0.1703  m1_loss_dice_8: 1.183  m2_loss_ce: 0.5387  m2_loss_mask: 0.1667  m2_loss_dice: 1.219  m2_loss_ce_0: 0.5667  m2_loss_mask_0: 0.1998  m2_loss_dice_0: 1.442  m2_loss_ce_1: 0.7  m2_loss_mask_1: 0.185  m2_loss_dice_1: 1.282  m2_loss_ce_2: 0.6136  m2_loss_mask_2: 0.1757  m2_loss_dice_2: 1.286  m2_loss_ce_3: 0.5696  m2_loss_mask_3: 0.175  m2_loss_dice_3: 1.216  m2_loss_ce_4: 0.5661  m2_loss_mask_4: 0.1738  m2_loss_dice_4: 1.239  m2_loss_ce_5: 0.543  m2_loss_mask_5: 0.1734  m2_loss_dice_5: 1.224  m2_loss_ce_6: 0.5466  m2_loss_mask_6: 0.175  m2_loss_dice_6: 1.196  m2_loss_ce_7: 0.5482  m2_loss_mask_7: 0.1717  m2_loss_dice_7: 1.209  m2_loss_ce_8: 0.5281  m2_loss_mask_8: 0.1682  m2_loss_dice_8: 1.19    time: 1.4486  last_time: 1.3554  data_time: 0.0623  last_data_time: 0.0480   lr: 0.0001  max_mem: 34498M
[10/07 00:32:28] d2.utils.events INFO:  eta: 0:11:33  iter: 519  total_loss: 40.32  m1_loss_ce: 0.5677  m1_loss_mask: 0.1614  m1_loss_dice: 1.24  m1_loss_ce_0: 0.5611  m1_loss_mask_0: 0.19  m1_loss_dice_0: 1.435  m1_loss_ce_1: 0.5889  m1_loss_mask_1: 0.1712  m1_loss_dice_1: 1.366  m1_loss_ce_2: 0.5746  m1_loss_mask_2: 0.1646  m1_loss_dice_2: 1.336  m1_loss_ce_3: 0.5239  m1_loss_mask_3: 0.1603  m1_loss_dice_3: 1.272  m1_loss_ce_4: 0.5081  m1_loss_mask_4: 0.1604  m1_loss_dice_4: 1.271  m1_loss_ce_5: 0.5077  m1_loss_mask_5: 0.159  m1_loss_dice_5: 1.229  m1_loss_ce_6: 0.4996  m1_loss_mask_6: 0.1583  m1_loss_dice_6: 1.236  m1_loss_ce_7: 0.5137  m1_loss_mask_7: 0.1604  m1_loss_dice_7: 1.252  m1_loss_ce_8: 0.4825  m1_loss_mask_8: 0.1591  m1_loss_dice_8: 1.259  m2_loss_ce: 0.549  m2_loss_mask: 0.1657  m2_loss_dice: 1.268  m2_loss_ce_0: 0.6185  m2_loss_mask_0: 0.198  m2_loss_dice_0: 1.525  m2_loss_ce_1: 0.6511  m2_loss_mask_1: 0.1783  m2_loss_dice_1: 1.377  m2_loss_ce_2: 0.6219  m2_loss_mask_2: 0.1683  m2_loss_dice_2: 1.366  m2_loss_ce_3: 0.5775  m2_loss_mask_3: 0.1663  m2_loss_dice_3: 1.296  m2_loss_ce_4: 0.5661  m2_loss_mask_4: 0.1653  m2_loss_dice_4: 1.264  m2_loss_ce_5: 0.5415  m2_loss_mask_5: 0.1658  m2_loss_dice_5: 1.292  m2_loss_ce_6: 0.5415  m2_loss_mask_6: 0.1673  m2_loss_dice_6: 1.259  m2_loss_ce_7: 0.5397  m2_loss_mask_7: 0.1655  m2_loss_dice_7: 1.25  m2_loss_ce_8: 0.5409  m2_loss_mask_8: 0.1655  m2_loss_dice_8: 1.287    time: 1.4498  last_time: 1.6385  data_time: 0.0823  last_data_time: 0.2058   lr: 0.0001  max_mem: 34498M
[10/07 00:32:58] d2.utils.events INFO:  eta: 0:11:05  iter: 539  total_loss: 39.03  m1_loss_ce: 0.5097  m1_loss_mask: 0.1599  m1_loss_dice: 1.208  m1_loss_ce_0: 0.5567  m1_loss_mask_0: 0.1838  m1_loss_dice_0: 1.363  m1_loss_ce_1: 0.61  m1_loss_mask_1: 0.1757  m1_loss_dice_1: 1.268  m1_loss_ce_2: 0.5451  m1_loss_mask_2: 0.1641  m1_loss_dice_2: 1.265  m1_loss_ce_3: 0.466  m1_loss_mask_3: 0.1664  m1_loss_dice_3: 1.199  m1_loss_ce_4: 0.4906  m1_loss_mask_4: 0.1655  m1_loss_dice_4: 1.199  m1_loss_ce_5: 0.4603  m1_loss_mask_5: 0.1625  m1_loss_dice_5: 1.208  m1_loss_ce_6: 0.4592  m1_loss_mask_6: 0.1637  m1_loss_dice_6: 1.193  m1_loss_ce_7: 0.4421  m1_loss_mask_7: 0.1632  m1_loss_dice_7: 1.219  m1_loss_ce_8: 0.4468  m1_loss_mask_8: 0.1621  m1_loss_dice_8: 1.149  m2_loss_ce: 0.5124  m2_loss_mask: 0.1603  m2_loss_dice: 1.159  m2_loss_ce_0: 0.5865  m2_loss_mask_0: 0.192  m2_loss_dice_0: 1.387  m2_loss_ce_1: 0.6825  m2_loss_mask_1: 0.1831  m2_loss_dice_1: 1.283  m2_loss_ce_2: 0.6106  m2_loss_mask_2: 0.1718  m2_loss_dice_2: 1.243  m2_loss_ce_3: 0.5511  m2_loss_mask_3: 0.1709  m2_loss_dice_3: 1.219  m2_loss_ce_4: 0.5436  m2_loss_mask_4: 0.1679  m2_loss_dice_4: 1.2  m2_loss_ce_5: 0.5428  m2_loss_mask_5: 0.1623  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.5381  m2_loss_mask_6: 0.1647  m2_loss_dice_6: 1.2  m2_loss_ce_7: 0.5336  m2_loss_mask_7: 0.1611  m2_loss_dice_7: 1.185  m2_loss_ce_8: 0.5209  m2_loss_mask_8: 0.1595  m2_loss_dice_8: 1.204    time: 1.4508  last_time: 1.5021  data_time: 0.0538  last_data_time: 0.0403   lr: 0.0001  max_mem: 34498M
[10/07 00:33:27] d2.utils.events INFO:  eta: 0:10:37  iter: 559  total_loss: 39.11  m1_loss_ce: 0.5062  m1_loss_mask: 0.1662  m1_loss_dice: 1.2  m1_loss_ce_0: 0.5499  m1_loss_mask_0: 0.1883  m1_loss_dice_0: 1.392  m1_loss_ce_1: 0.602  m1_loss_mask_1: 0.1776  m1_loss_dice_1: 1.331  m1_loss_ce_2: 0.5547  m1_loss_mask_2: 0.1714  m1_loss_dice_2: 1.257  m1_loss_ce_3: 0.4867  m1_loss_mask_3: 0.1693  m1_loss_dice_3: 1.209  m1_loss_ce_4: 0.4807  m1_loss_mask_4: 0.1682  m1_loss_dice_4: 1.187  m1_loss_ce_5: 0.4644  m1_loss_mask_5: 0.1653  m1_loss_dice_5: 1.202  m1_loss_ce_6: 0.4436  m1_loss_mask_6: 0.168  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.4606  m1_loss_mask_7: 0.1679  m1_loss_dice_7: 1.198  m1_loss_ce_8: 0.4483  m1_loss_mask_8: 0.1688  m1_loss_dice_8: 1.196  m2_loss_ce: 0.524  m2_loss_mask: 0.1672  m2_loss_dice: 1.182  m2_loss_ce_0: 0.5775  m2_loss_mask_0: 0.1988  m2_loss_dice_0: 1.448  m2_loss_ce_1: 0.6553  m2_loss_mask_1: 0.1792  m2_loss_dice_1: 1.299  m2_loss_ce_2: 0.5959  m2_loss_mask_2: 0.1743  m2_loss_dice_2: 1.248  m2_loss_ce_3: 0.5672  m2_loss_mask_3: 0.1713  m2_loss_dice_3: 1.172  m2_loss_ce_4: 0.5359  m2_loss_mask_4: 0.1714  m2_loss_dice_4: 1.186  m2_loss_ce_5: 0.5389  m2_loss_mask_5: 0.1659  m2_loss_dice_5: 1.187  m2_loss_ce_6: 0.5353  m2_loss_mask_6: 0.1683  m2_loss_dice_6: 1.163  m2_loss_ce_7: 0.5112  m2_loss_mask_7: 0.1687  m2_loss_dice_7: 1.195  m2_loss_ce_8: 0.506  m2_loss_mask_8: 0.1705  m2_loss_dice_8: 1.186    time: 1.4512  last_time: 1.4444  data_time: 0.0626  last_data_time: 0.0787   lr: 0.0001  max_mem: 34498M
[10/07 00:33:56] d2.utils.events INFO:  eta: 0:10:08  iter: 579  total_loss: 40.83  m1_loss_ce: 0.5238  m1_loss_mask: 0.166  m1_loss_dice: 1.252  m1_loss_ce_0: 0.6022  m1_loss_mask_0: 0.1924  m1_loss_dice_0: 1.464  m1_loss_ce_1: 0.6329  m1_loss_mask_1: 0.1819  m1_loss_dice_1: 1.381  m1_loss_ce_2: 0.5905  m1_loss_mask_2: 0.1735  m1_loss_dice_2: 1.335  m1_loss_ce_3: 0.532  m1_loss_mask_3: 0.1703  m1_loss_dice_3: 1.339  m1_loss_ce_4: 0.4893  m1_loss_mask_4: 0.1687  m1_loss_dice_4: 1.282  m1_loss_ce_5: 0.492  m1_loss_mask_5: 0.1675  m1_loss_dice_5: 1.303  m1_loss_ce_6: 0.4909  m1_loss_mask_6: 0.1649  m1_loss_dice_6: 1.266  m1_loss_ce_7: 0.4603  m1_loss_mask_7: 0.1678  m1_loss_dice_7: 1.303  m1_loss_ce_8: 0.4616  m1_loss_mask_8: 0.1649  m1_loss_dice_8: 1.269  m2_loss_ce: 0.5238  m2_loss_mask: 0.1651  m2_loss_dice: 1.26  m2_loss_ce_0: 0.5977  m2_loss_mask_0: 0.2  m2_loss_dice_0: 1.497  m2_loss_ce_1: 0.6679  m2_loss_mask_1: 0.1775  m2_loss_dice_1: 1.39  m2_loss_ce_2: 0.639  m2_loss_mask_2: 0.1724  m2_loss_dice_2: 1.345  m2_loss_ce_3: 0.5728  m2_loss_mask_3: 0.1706  m2_loss_dice_3: 1.278  m2_loss_ce_4: 0.5928  m2_loss_mask_4: 0.1692  m2_loss_dice_4: 1.272  m2_loss_ce_5: 0.5414  m2_loss_mask_5: 0.1669  m2_loss_dice_5: 1.269  m2_loss_ce_6: 0.5686  m2_loss_mask_6: 0.1691  m2_loss_dice_6: 1.239  m2_loss_ce_7: 0.5669  m2_loss_mask_7: 0.1688  m2_loss_dice_7: 1.211  m2_loss_ce_8: 0.5636  m2_loss_mask_8: 0.1664  m2_loss_dice_8: 1.264    time: 1.4508  last_time: 1.4539  data_time: 0.0642  last_data_time: 0.0400   lr: 0.0001  max_mem: 34498M
[10/07 00:34:26] d2.utils.events INFO:  eta: 0:09:39  iter: 599  total_loss: 38.71  m1_loss_ce: 0.5202  m1_loss_mask: 0.1635  m1_loss_dice: 1.188  m1_loss_ce_0: 0.5421  m1_loss_mask_0: 0.1818  m1_loss_dice_0: 1.339  m1_loss_ce_1: 0.6073  m1_loss_mask_1: 0.1721  m1_loss_dice_1: 1.278  m1_loss_ce_2: 0.5077  m1_loss_mask_2: 0.1663  m1_loss_dice_2: 1.273  m1_loss_ce_3: 0.4824  m1_loss_mask_3: 0.1662  m1_loss_dice_3: 1.19  m1_loss_ce_4: 0.4576  m1_loss_mask_4: 0.1621  m1_loss_dice_4: 1.224  m1_loss_ce_5: 0.4479  m1_loss_mask_5: 0.1638  m1_loss_dice_5: 1.19  m1_loss_ce_6: 0.4741  m1_loss_mask_6: 0.1602  m1_loss_dice_6: 1.195  m1_loss_ce_7: 0.4437  m1_loss_mask_7: 0.1604  m1_loss_dice_7: 1.18  m1_loss_ce_8: 0.4392  m1_loss_mask_8: 0.1586  m1_loss_dice_8: 1.209  m2_loss_ce: 0.4856  m2_loss_mask: 0.168  m2_loss_dice: 1.215  m2_loss_ce_0: 0.5725  m2_loss_mask_0: 0.1978  m2_loss_dice_0: 1.483  m2_loss_ce_1: 0.6522  m2_loss_mask_1: 0.1768  m2_loss_dice_1: 1.308  m2_loss_ce_2: 0.5732  m2_loss_mask_2: 0.1713  m2_loss_dice_2: 1.268  m2_loss_ce_3: 0.5285  m2_loss_mask_3: 0.172  m2_loss_dice_3: 1.239  m2_loss_ce_4: 0.5258  m2_loss_mask_4: 0.1721  m2_loss_dice_4: 1.254  m2_loss_ce_5: 0.5359  m2_loss_mask_5: 0.169  m2_loss_dice_5: 1.243  m2_loss_ce_6: 0.5041  m2_loss_mask_6: 0.1707  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.5141  m2_loss_mask_7: 0.1688  m2_loss_dice_7: 1.199  m2_loss_ce_8: 0.5149  m2_loss_mask_8: 0.1677  m2_loss_dice_8: 1.217    time: 1.4522  last_time: 1.4041  data_time: 0.0538  last_data_time: 0.0412   lr: 0.0001  max_mem: 34498M
[10/07 00:34:57] d2.utils.events INFO:  eta: 0:09:12  iter: 619  total_loss: 40.51  m1_loss_ce: 0.5577  m1_loss_mask: 0.1675  m1_loss_dice: 1.196  m1_loss_ce_0: 0.5739  m1_loss_mask_0: 0.2055  m1_loss_dice_0: 1.437  m1_loss_ce_1: 0.6423  m1_loss_mask_1: 0.183  m1_loss_dice_1: 1.406  m1_loss_ce_2: 0.5615  m1_loss_mask_2: 0.1696  m1_loss_dice_2: 1.29  m1_loss_ce_3: 0.5107  m1_loss_mask_3: 0.1685  m1_loss_dice_3: 1.236  m1_loss_ce_4: 0.5065  m1_loss_mask_4: 0.1696  m1_loss_dice_4: 1.243  m1_loss_ce_5: 0.4882  m1_loss_mask_5: 0.1612  m1_loss_dice_5: 1.265  m1_loss_ce_6: 0.505  m1_loss_mask_6: 0.1624  m1_loss_dice_6: 1.231  m1_loss_ce_7: 0.4994  m1_loss_mask_7: 0.1658  m1_loss_dice_7: 1.228  m1_loss_ce_8: 0.4767  m1_loss_mask_8: 0.1634  m1_loss_dice_8: 1.165  m2_loss_ce: 0.5551  m2_loss_mask: 0.1606  m2_loss_dice: 1.258  m2_loss_ce_0: 0.5804  m2_loss_mask_0: 0.2019  m2_loss_dice_0: 1.499  m2_loss_ce_1: 0.6781  m2_loss_mask_1: 0.1778  m2_loss_dice_1: 1.363  m2_loss_ce_2: 0.6234  m2_loss_mask_2: 0.1712  m2_loss_dice_2: 1.324  m2_loss_ce_3: 0.551  m2_loss_mask_3: 0.1661  m2_loss_dice_3: 1.252  m2_loss_ce_4: 0.5666  m2_loss_mask_4: 0.1675  m2_loss_dice_4: 1.266  m2_loss_ce_5: 0.5863  m2_loss_mask_5: 0.1654  m2_loss_dice_5: 1.228  m2_loss_ce_6: 0.5933  m2_loss_mask_6: 0.1635  m2_loss_dice_6: 1.224  m2_loss_ce_7: 0.5578  m2_loss_mask_7: 0.164  m2_loss_dice_7: 1.227  m2_loss_ce_8: 0.5669  m2_loss_mask_8: 0.1624  m2_loss_dice_8: 1.23    time: 1.4543  last_time: 1.5004  data_time: 0.0639  last_data_time: 0.0457   lr: 0.0001  max_mem: 34498M
[10/07 00:35:25] d2.utils.events INFO:  eta: 0:08:42  iter: 639  total_loss: 40.96  m1_loss_ce: 0.5022  m1_loss_mask: 0.1569  m1_loss_dice: 1.267  m1_loss_ce_0: 0.5412  m1_loss_mask_0: 0.1832  m1_loss_dice_0: 1.525  m1_loss_ce_1: 0.6058  m1_loss_mask_1: 0.167  m1_loss_dice_1: 1.443  m1_loss_ce_2: 0.5781  m1_loss_mask_2: 0.1592  m1_loss_dice_2: 1.358  m1_loss_ce_3: 0.5138  m1_loss_mask_3: 0.1566  m1_loss_dice_3: 1.314  m1_loss_ce_4: 0.4687  m1_loss_mask_4: 0.1573  m1_loss_dice_4: 1.289  m1_loss_ce_5: 0.4657  m1_loss_mask_5: 0.1558  m1_loss_dice_5: 1.283  m1_loss_ce_6: 0.4572  m1_loss_mask_6: 0.1563  m1_loss_dice_6: 1.252  m1_loss_ce_7: 0.4636  m1_loss_mask_7: 0.1579  m1_loss_dice_7: 1.257  m1_loss_ce_8: 0.4454  m1_loss_mask_8: 0.1574  m1_loss_dice_8: 1.251  m2_loss_ce: 0.5232  m2_loss_mask: 0.1612  m2_loss_dice: 1.305  m2_loss_ce_0: 0.5835  m2_loss_mask_0: 0.1901  m2_loss_dice_0: 1.542  m2_loss_ce_1: 0.7029  m2_loss_mask_1: 0.1714  m2_loss_dice_1: 1.421  m2_loss_ce_2: 0.6345  m2_loss_mask_2: 0.1635  m2_loss_dice_2: 1.313  m2_loss_ce_3: 0.5586  m2_loss_mask_3: 0.1638  m2_loss_dice_3: 1.29  m2_loss_ce_4: 0.5672  m2_loss_mask_4: 0.1648  m2_loss_dice_4: 1.34  m2_loss_ce_5: 0.5644  m2_loss_mask_5: 0.159  m2_loss_dice_5: 1.291  m2_loss_ce_6: 0.5248  m2_loss_mask_6: 0.1608  m2_loss_dice_6: 1.267  m2_loss_ce_7: 0.5273  m2_loss_mask_7: 0.1596  m2_loss_dice_7: 1.277  m2_loss_ce_8: 0.5397  m2_loss_mask_8: 0.1582  m2_loss_dice_8: 1.311    time: 1.4535  last_time: 1.3467  data_time: 0.0574  last_data_time: 0.0459   lr: 0.0001  max_mem: 34498M
[10/07 00:35:54] d2.utils.events INFO:  eta: 0:08:12  iter: 659  total_loss: 39.52  m1_loss_ce: 0.5429  m1_loss_mask: 0.1531  m1_loss_dice: 1.143  m1_loss_ce_0: 0.5336  m1_loss_mask_0: 0.1801  m1_loss_dice_0: 1.469  m1_loss_ce_1: 0.6098  m1_loss_mask_1: 0.1676  m1_loss_dice_1: 1.358  m1_loss_ce_2: 0.5527  m1_loss_mask_2: 0.1614  m1_loss_dice_2: 1.285  m1_loss_ce_3: 0.5152  m1_loss_mask_3: 0.1607  m1_loss_dice_3: 1.207  m1_loss_ce_4: 0.4759  m1_loss_mask_4: 0.1577  m1_loss_dice_4: 1.237  m1_loss_ce_5: 0.4779  m1_loss_mask_5: 0.1582  m1_loss_dice_5: 1.214  m1_loss_ce_6: 0.4847  m1_loss_mask_6: 0.1568  m1_loss_dice_6: 1.146  m1_loss_ce_7: 0.4516  m1_loss_mask_7: 0.1554  m1_loss_dice_7: 1.191  m1_loss_ce_8: 0.4862  m1_loss_mask_8: 0.1557  m1_loss_dice_8: 1.198  m2_loss_ce: 0.5405  m2_loss_mask: 0.1578  m2_loss_dice: 1.201  m2_loss_ce_0: 0.5785  m2_loss_mask_0: 0.1913  m2_loss_dice_0: 1.477  m2_loss_ce_1: 0.6771  m2_loss_mask_1: 0.1676  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.5991  m2_loss_mask_2: 0.1595  m2_loss_dice_2: 1.281  m2_loss_ce_3: 0.5837  m2_loss_mask_3: 0.1578  m2_loss_dice_3: 1.237  m2_loss_ce_4: 0.5525  m2_loss_mask_4: 0.1598  m2_loss_dice_4: 1.242  m2_loss_ce_5: 0.5391  m2_loss_mask_5: 0.1571  m2_loss_dice_5: 1.228  m2_loss_ce_6: 0.5484  m2_loss_mask_6: 0.159  m2_loss_dice_6: 1.202  m2_loss_ce_7: 0.5363  m2_loss_mask_7: 0.1583  m2_loss_dice_7: 1.206  m2_loss_ce_8: 0.5367  m2_loss_mask_8: 0.1578  m2_loss_dice_8: 1.181    time: 1.4529  last_time: 1.5168  data_time: 0.0617  last_data_time: 0.0398   lr: 0.0001  max_mem: 34498M
[10/07 00:36:23] d2.utils.events INFO:  eta: 0:07:43  iter: 679  total_loss: 39.93  m1_loss_ce: 0.5087  m1_loss_mask: 0.1546  m1_loss_dice: 1.204  m1_loss_ce_0: 0.5435  m1_loss_mask_0: 0.1836  m1_loss_dice_0: 1.431  m1_loss_ce_1: 0.6135  m1_loss_mask_1: 0.1735  m1_loss_dice_1: 1.338  m1_loss_ce_2: 0.5315  m1_loss_mask_2: 0.1661  m1_loss_dice_2: 1.289  m1_loss_ce_3: 0.5093  m1_loss_mask_3: 0.1642  m1_loss_dice_3: 1.232  m1_loss_ce_4: 0.4653  m1_loss_mask_4: 0.1638  m1_loss_dice_4: 1.234  m1_loss_ce_5: 0.4465  m1_loss_mask_5: 0.1606  m1_loss_dice_5: 1.227  m1_loss_ce_6: 0.4568  m1_loss_mask_6: 0.1586  m1_loss_dice_6: 1.203  m1_loss_ce_7: 0.4717  m1_loss_mask_7: 0.1542  m1_loss_dice_7: 1.197  m1_loss_ce_8: 0.4433  m1_loss_mask_8: 0.1547  m1_loss_dice_8: 1.221  m2_loss_ce: 0.5093  m2_loss_mask: 0.1629  m2_loss_dice: 1.213  m2_loss_ce_0: 0.5968  m2_loss_mask_0: 0.1896  m2_loss_dice_0: 1.474  m2_loss_ce_1: 0.6954  m2_loss_mask_1: 0.1702  m2_loss_dice_1: 1.337  m2_loss_ce_2: 0.6395  m2_loss_mask_2: 0.1627  m2_loss_dice_2: 1.289  m2_loss_ce_3: 0.5865  m2_loss_mask_3: 0.1644  m2_loss_dice_3: 1.226  m2_loss_ce_4: 0.5877  m2_loss_mask_4: 0.1649  m2_loss_dice_4: 1.205  m2_loss_ce_5: 0.5622  m2_loss_mask_5: 0.1626  m2_loss_dice_5: 1.2  m2_loss_ce_6: 0.5425  m2_loss_mask_6: 0.1654  m2_loss_dice_6: 1.199  m2_loss_ce_7: 0.5132  m2_loss_mask_7: 0.1679  m2_loss_dice_7: 1.215  m2_loss_ce_8: 0.5412  m2_loss_mask_8: 0.1654  m2_loss_dice_8: 1.242    time: 1.4534  last_time: 1.4166  data_time: 0.0551  last_data_time: 0.0749   lr: 0.0001  max_mem: 34498M
[10/07 00:36:53] d2.utils.events INFO:  eta: 0:07:14  iter: 699  total_loss: 38.93  m1_loss_ce: 0.5164  m1_loss_mask: 0.1702  m1_loss_dice: 1.219  m1_loss_ce_0: 0.5271  m1_loss_mask_0: 0.2066  m1_loss_dice_0: 1.368  m1_loss_ce_1: 0.6263  m1_loss_mask_1: 0.186  m1_loss_dice_1: 1.311  m1_loss_ce_2: 0.5282  m1_loss_mask_2: 0.1783  m1_loss_dice_2: 1.249  m1_loss_ce_3: 0.4698  m1_loss_mask_3: 0.1764  m1_loss_dice_3: 1.245  m1_loss_ce_4: 0.4589  m1_loss_mask_4: 0.1748  m1_loss_dice_4: 1.205  m1_loss_ce_5: 0.4367  m1_loss_mask_5: 0.1732  m1_loss_dice_5: 1.171  m1_loss_ce_6: 0.4189  m1_loss_mask_6: 0.1724  m1_loss_dice_6: 1.173  m1_loss_ce_7: 0.4599  m1_loss_mask_7: 0.1696  m1_loss_dice_7: 1.204  m1_loss_ce_8: 0.4433  m1_loss_mask_8: 0.1725  m1_loss_dice_8: 1.174  m2_loss_ce: 0.5968  m2_loss_mask: 0.1812  m2_loss_dice: 1.185  m2_loss_ce_0: 0.5731  m2_loss_mask_0: 0.2151  m2_loss_dice_0: 1.514  m2_loss_ce_1: 0.6953  m2_loss_mask_1: 0.1999  m2_loss_dice_1: 1.351  m2_loss_ce_2: 0.6078  m2_loss_mask_2: 0.1895  m2_loss_dice_2: 1.306  m2_loss_ce_3: 0.5785  m2_loss_mask_3: 0.1913  m2_loss_dice_3: 1.259  m2_loss_ce_4: 0.6011  m2_loss_mask_4: 0.1885  m2_loss_dice_4: 1.218  m2_loss_ce_5: 0.5682  m2_loss_mask_5: 0.1835  m2_loss_dice_5: 1.257  m2_loss_ce_6: 0.5385  m2_loss_mask_6: 0.1821  m2_loss_dice_6: 1.222  m2_loss_ce_7: 0.5724  m2_loss_mask_7: 0.1793  m2_loss_dice_7: 1.196  m2_loss_ce_8: 0.5635  m2_loss_mask_8: 0.1805  m2_loss_dice_8: 1.238    time: 1.4534  last_time: 1.3311  data_time: 0.0563  last_data_time: 0.0440   lr: 0.0001  max_mem: 34498M
[10/07 00:37:21] d2.utils.events INFO:  eta: 0:06:45  iter: 719  total_loss: 39.65  m1_loss_ce: 0.4776  m1_loss_mask: 0.1563  m1_loss_dice: 1.221  m1_loss_ce_0: 0.5161  m1_loss_mask_0: 0.1795  m1_loss_dice_0: 1.383  m1_loss_ce_1: 0.5796  m1_loss_mask_1: 0.1679  m1_loss_dice_1: 1.346  m1_loss_ce_2: 0.5117  m1_loss_mask_2: 0.1615  m1_loss_dice_2: 1.282  m1_loss_ce_3: 0.4723  m1_loss_mask_3: 0.1604  m1_loss_dice_3: 1.235  m1_loss_ce_4: 0.4277  m1_loss_mask_4: 0.1618  m1_loss_dice_4: 1.232  m1_loss_ce_5: 0.4309  m1_loss_mask_5: 0.1597  m1_loss_dice_5: 1.221  m1_loss_ce_6: 0.4528  m1_loss_mask_6: 0.1596  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.4428  m1_loss_mask_7: 0.1617  m1_loss_dice_7: 1.225  m1_loss_ce_8: 0.4381  m1_loss_mask_8: 0.1595  m1_loss_dice_8: 1.185  m2_loss_ce: 0.5205  m2_loss_mask: 0.1574  m2_loss_dice: 1.208  m2_loss_ce_0: 0.5372  m2_loss_mask_0: 0.1893  m2_loss_dice_0: 1.444  m2_loss_ce_1: 0.6568  m2_loss_mask_1: 0.1711  m2_loss_dice_1: 1.32  m2_loss_ce_2: 0.6016  m2_loss_mask_2: 0.1625  m2_loss_dice_2: 1.301  m2_loss_ce_3: 0.5711  m2_loss_mask_3: 0.1623  m2_loss_dice_3: 1.209  m2_loss_ce_4: 0.5808  m2_loss_mask_4: 0.164  m2_loss_dice_4: 1.29  m2_loss_ce_5: 0.5566  m2_loss_mask_5: 0.1557  m2_loss_dice_5: 1.248  m2_loss_ce_6: 0.545  m2_loss_mask_6: 0.1583  m2_loss_dice_6: 1.245  m2_loss_ce_7: 0.5034  m2_loss_mask_7: 0.1571  m2_loss_dice_7: 1.218  m2_loss_ce_8: 0.5344  m2_loss_mask_8: 0.1565  m2_loss_dice_8: 1.208    time: 1.4524  last_time: 1.4110  data_time: 0.0543  last_data_time: 0.0735   lr: 0.0001  max_mem: 35045M
[10/07 00:37:50] d2.utils.events INFO:  eta: 0:06:16  iter: 739  total_loss: 37.61  m1_loss_ce: 0.532  m1_loss_mask: 0.1552  m1_loss_dice: 1.127  m1_loss_ce_0: 0.5542  m1_loss_mask_0: 0.1781  m1_loss_dice_0: 1.357  m1_loss_ce_1: 0.6215  m1_loss_mask_1: 0.163  m1_loss_dice_1: 1.253  m1_loss_ce_2: 0.5343  m1_loss_mask_2: 0.1542  m1_loss_dice_2: 1.214  m1_loss_ce_3: 0.5029  m1_loss_mask_3: 0.1584  m1_loss_dice_3: 1.172  m1_loss_ce_4: 0.4674  m1_loss_mask_4: 0.1599  m1_loss_dice_4: 1.163  m1_loss_ce_5: 0.4964  m1_loss_mask_5: 0.155  m1_loss_dice_5: 1.166  m1_loss_ce_6: 0.4767  m1_loss_mask_6: 0.1564  m1_loss_dice_6: 1.13  m1_loss_ce_7: 0.4875  m1_loss_mask_7: 0.1549  m1_loss_dice_7: 1.1  m1_loss_ce_8: 0.497  m1_loss_mask_8: 0.1556  m1_loss_dice_8: 1.162  m2_loss_ce: 0.528  m2_loss_mask: 0.1599  m2_loss_dice: 1.188  m2_loss_ce_0: 0.5679  m2_loss_mask_0: 0.1932  m2_loss_dice_0: 1.42  m2_loss_ce_1: 0.6528  m2_loss_mask_1: 0.1757  m2_loss_dice_1: 1.282  m2_loss_ce_2: 0.5843  m2_loss_mask_2: 0.1649  m2_loss_dice_2: 1.209  m2_loss_ce_3: 0.5225  m2_loss_mask_3: 0.1653  m2_loss_dice_3: 1.182  m2_loss_ce_4: 0.5234  m2_loss_mask_4: 0.1657  m2_loss_dice_4: 1.198  m2_loss_ce_5: 0.5497  m2_loss_mask_5: 0.1589  m2_loss_dice_5: 1.169  m2_loss_ce_6: 0.5274  m2_loss_mask_6: 0.1597  m2_loss_dice_6: 1.15  m2_loss_ce_7: 0.5108  m2_loss_mask_7: 0.1598  m2_loss_dice_7: 1.169  m2_loss_ce_8: 0.5158  m2_loss_mask_8: 0.1614  m2_loss_dice_8: 1.203    time: 1.4518  last_time: 1.5723  data_time: 0.0576  last_data_time: 0.0482   lr: 0.0001  max_mem: 35045M
[10/07 00:38:19] d2.utils.events INFO:  eta: 0:05:47  iter: 759  total_loss: 39.32  m1_loss_ce: 0.5233  m1_loss_mask: 0.1568  m1_loss_dice: 1.221  m1_loss_ce_0: 0.5217  m1_loss_mask_0: 0.1859  m1_loss_dice_0: 1.452  m1_loss_ce_1: 0.5788  m1_loss_mask_1: 0.169  m1_loss_dice_1: 1.371  m1_loss_ce_2: 0.5062  m1_loss_mask_2: 0.1616  m1_loss_dice_2: 1.305  m1_loss_ce_3: 0.444  m1_loss_mask_3: 0.1613  m1_loss_dice_3: 1.257  m1_loss_ce_4: 0.4382  m1_loss_mask_4: 0.1625  m1_loss_dice_4: 1.211  m1_loss_ce_5: 0.4273  m1_loss_mask_5: 0.1593  m1_loss_dice_5: 1.253  m1_loss_ce_6: 0.4252  m1_loss_mask_6: 0.1567  m1_loss_dice_6: 1.233  m1_loss_ce_7: 0.4278  m1_loss_mask_7: 0.1557  m1_loss_dice_7: 1.188  m1_loss_ce_8: 0.4273  m1_loss_mask_8: 0.1566  m1_loss_dice_8: 1.187  m2_loss_ce: 0.5173  m2_loss_mask: 0.1707  m2_loss_dice: 1.267  m2_loss_ce_0: 0.5868  m2_loss_mask_0: 0.2062  m2_loss_dice_0: 1.517  m2_loss_ce_1: 0.6769  m2_loss_mask_1: 0.1827  m2_loss_dice_1: 1.365  m2_loss_ce_2: 0.6347  m2_loss_mask_2: 0.1739  m2_loss_dice_2: 1.308  m2_loss_ce_3: 0.5783  m2_loss_mask_3: 0.1702  m2_loss_dice_3: 1.272  m2_loss_ce_4: 0.5447  m2_loss_mask_4: 0.1737  m2_loss_dice_4: 1.253  m2_loss_ce_5: 0.5449  m2_loss_mask_5: 0.17  m2_loss_dice_5: 1.306  m2_loss_ce_6: 0.5395  m2_loss_mask_6: 0.1697  m2_loss_dice_6: 1.237  m2_loss_ce_7: 0.5259  m2_loss_mask_7: 0.1709  m2_loss_dice_7: 1.259  m2_loss_ce_8: 0.5024  m2_loss_mask_8: 0.1677  m2_loss_dice_8: 1.228    time: 1.4521  last_time: 1.4263  data_time: 0.0613  last_data_time: 0.0430   lr: 0.0001  max_mem: 35045M
[10/07 00:38:48] d2.utils.events INFO:  eta: 0:05:18  iter: 779  total_loss: 36.88  m1_loss_ce: 0.5146  m1_loss_mask: 0.168  m1_loss_dice: 1.153  m1_loss_ce_0: 0.5397  m1_loss_mask_0: 0.2019  m1_loss_dice_0: 1.297  m1_loss_ce_1: 0.5902  m1_loss_mask_1: 0.1881  m1_loss_dice_1: 1.23  m1_loss_ce_2: 0.5214  m1_loss_mask_2: 0.1761  m1_loss_dice_2: 1.177  m1_loss_ce_3: 0.4657  m1_loss_mask_3: 0.175  m1_loss_dice_3: 1.138  m1_loss_ce_4: 0.4454  m1_loss_mask_4: 0.1741  m1_loss_dice_4: 1.14  m1_loss_ce_5: 0.4585  m1_loss_mask_5: 0.1703  m1_loss_dice_5: 1.108  m1_loss_ce_6: 0.4193  m1_loss_mask_6: 0.1715  m1_loss_dice_6: 1.138  m1_loss_ce_7: 0.4155  m1_loss_mask_7: 0.1708  m1_loss_dice_7: 1.088  m1_loss_ce_8: 0.4157  m1_loss_mask_8: 0.169  m1_loss_dice_8: 1.132  m2_loss_ce: 0.5364  m2_loss_mask: 0.1812  m2_loss_dice: 1.133  m2_loss_ce_0: 0.5361  m2_loss_mask_0: 0.2094  m2_loss_dice_0: 1.395  m2_loss_ce_1: 0.6611  m2_loss_mask_1: 0.1866  m2_loss_dice_1: 1.19  m2_loss_ce_2: 0.6076  m2_loss_mask_2: 0.1833  m2_loss_dice_2: 1.177  m2_loss_ce_3: 0.5322  m2_loss_mask_3: 0.1832  m2_loss_dice_3: 1.152  m2_loss_ce_4: 0.5279  m2_loss_mask_4: 0.1817  m2_loss_dice_4: 1.153  m2_loss_ce_5: 0.5381  m2_loss_mask_5: 0.1809  m2_loss_dice_5: 1.102  m2_loss_ce_6: 0.5096  m2_loss_mask_6: 0.1816  m2_loss_dice_6: 1.117  m2_loss_ce_7: 0.5193  m2_loss_mask_7: 0.1816  m2_loss_dice_7: 1.105  m2_loss_ce_8: 0.5142  m2_loss_mask_8: 0.1818  m2_loss_dice_8: 1.14    time: 1.4518  last_time: 1.4396  data_time: 0.0573  last_data_time: 0.1065   lr: 0.0001  max_mem: 35045M
[10/07 00:39:17] d2.utils.events INFO:  eta: 0:04:49  iter: 799  total_loss: 39.48  m1_loss_ce: 0.5318  m1_loss_mask: 0.1597  m1_loss_dice: 1.156  m1_loss_ce_0: 0.5395  m1_loss_mask_0: 0.1794  m1_loss_dice_0: 1.352  m1_loss_ce_1: 0.631  m1_loss_mask_1: 0.1701  m1_loss_dice_1: 1.308  m1_loss_ce_2: 0.5602  m1_loss_mask_2: 0.1637  m1_loss_dice_2: 1.242  m1_loss_ce_3: 0.4678  m1_loss_mask_3: 0.1658  m1_loss_dice_3: 1.211  m1_loss_ce_4: 0.4628  m1_loss_mask_4: 0.1623  m1_loss_dice_4: 1.211  m1_loss_ce_5: 0.4544  m1_loss_mask_5: 0.162  m1_loss_dice_5: 1.225  m1_loss_ce_6: 0.4328  m1_loss_mask_6: 0.1594  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.4405  m1_loss_mask_7: 0.1588  m1_loss_dice_7: 1.181  m1_loss_ce_8: 0.4417  m1_loss_mask_8: 0.1588  m1_loss_dice_8: 1.183  m2_loss_ce: 0.5481  m2_loss_mask: 0.165  m2_loss_dice: 1.173  m2_loss_ce_0: 0.6114  m2_loss_mask_0: 0.1923  m2_loss_dice_0: 1.423  m2_loss_ce_1: 0.6725  m2_loss_mask_1: 0.1749  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.6215  m2_loss_mask_2: 0.1613  m2_loss_dice_2: 1.292  m2_loss_ce_3: 0.5463  m2_loss_mask_3: 0.1657  m2_loss_dice_3: 1.234  m2_loss_ce_4: 0.5523  m2_loss_mask_4: 0.1664  m2_loss_dice_4: 1.228  m2_loss_ce_5: 0.5381  m2_loss_mask_5: 0.1662  m2_loss_dice_5: 1.207  m2_loss_ce_6: 0.5455  m2_loss_mask_6: 0.166  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.5158  m2_loss_mask_7: 0.1668  m2_loss_dice_7: 1.238  m2_loss_ce_8: 0.5406  m2_loss_mask_8: 0.1643  m2_loss_dice_8: 1.203    time: 1.4509  last_time: 1.4211  data_time: 0.0558  last_data_time: 0.0545   lr: 0.0001  max_mem: 35045M
[10/07 00:39:47] d2.utils.events INFO:  eta: 0:04:20  iter: 819  total_loss: 39.63  m1_loss_ce: 0.5332  m1_loss_mask: 0.1707  m1_loss_dice: 1.24  m1_loss_ce_0: 0.5264  m1_loss_mask_0: 0.1955  m1_loss_dice_0: 1.409  m1_loss_ce_1: 0.6054  m1_loss_mask_1: 0.182  m1_loss_dice_1: 1.316  m1_loss_ce_2: 0.5602  m1_loss_mask_2: 0.1739  m1_loss_dice_2: 1.302  m1_loss_ce_3: 0.5086  m1_loss_mask_3: 0.1745  m1_loss_dice_3: 1.279  m1_loss_ce_4: 0.5019  m1_loss_mask_4: 0.1739  m1_loss_dice_4: 1.229  m1_loss_ce_5: 0.4675  m1_loss_mask_5: 0.1701  m1_loss_dice_5: 1.218  m1_loss_ce_6: 0.4565  m1_loss_mask_6: 0.1717  m1_loss_dice_6: 1.204  m1_loss_ce_7: 0.47  m1_loss_mask_7: 0.1697  m1_loss_dice_7: 1.221  m1_loss_ce_8: 0.4616  m1_loss_mask_8: 0.1702  m1_loss_dice_8: 1.206  m2_loss_ce: 0.5181  m2_loss_mask: 0.1799  m2_loss_dice: 1.245  m2_loss_ce_0: 0.5736  m2_loss_mask_0: 0.2061  m2_loss_dice_0: 1.518  m2_loss_ce_1: 0.6809  m2_loss_mask_1: 0.1924  m2_loss_dice_1: 1.352  m2_loss_ce_2: 0.6128  m2_loss_mask_2: 0.1811  m2_loss_dice_2: 1.293  m2_loss_ce_3: 0.5431  m2_loss_mask_3: 0.1825  m2_loss_dice_3: 1.264  m2_loss_ce_4: 0.5513  m2_loss_mask_4: 0.1791  m2_loss_dice_4: 1.26  m2_loss_ce_5: 0.5502  m2_loss_mask_5: 0.1741  m2_loss_dice_5: 1.275  m2_loss_ce_6: 0.5256  m2_loss_mask_6: 0.1798  m2_loss_dice_6: 1.25  m2_loss_ce_7: 0.5327  m2_loss_mask_7: 0.1775  m2_loss_dice_7: 1.257  m2_loss_ce_8: 0.5208  m2_loss_mask_8: 0.1771  m2_loss_dice_8: 1.253    time: 1.4522  last_time: 1.6086  data_time: 0.0744  last_data_time: 0.1552   lr: 0.0001  max_mem: 35045M
[10/07 00:40:17] d2.utils.events INFO:  eta: 0:03:51  iter: 839  total_loss: 38.38  m1_loss_ce: 0.4868  m1_loss_mask: 0.1623  m1_loss_dice: 1.168  m1_loss_ce_0: 0.5168  m1_loss_mask_0: 0.1935  m1_loss_dice_0: 1.346  m1_loss_ce_1: 0.5872  m1_loss_mask_1: 0.178  m1_loss_dice_1: 1.252  m1_loss_ce_2: 0.5009  m1_loss_mask_2: 0.1678  m1_loss_dice_2: 1.208  m1_loss_ce_3: 0.4727  m1_loss_mask_3: 0.1656  m1_loss_dice_3: 1.217  m1_loss_ce_4: 0.4363  m1_loss_mask_4: 0.165  m1_loss_dice_4: 1.193  m1_loss_ce_5: 0.4337  m1_loss_mask_5: 0.1622  m1_loss_dice_5: 1.179  m1_loss_ce_6: 0.416  m1_loss_mask_6: 0.1638  m1_loss_dice_6: 1.143  m1_loss_ce_7: 0.4143  m1_loss_mask_7: 0.1629  m1_loss_dice_7: 1.144  m1_loss_ce_8: 0.461  m1_loss_mask_8: 0.1647  m1_loss_dice_8: 1.135  m2_loss_ce: 0.4892  m2_loss_mask: 0.1753  m2_loss_dice: 1.208  m2_loss_ce_0: 0.5642  m2_loss_mask_0: 0.2063  m2_loss_dice_0: 1.417  m2_loss_ce_1: 0.6435  m2_loss_mask_1: 0.1833  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.6011  m2_loss_mask_2: 0.1756  m2_loss_dice_2: 1.247  m2_loss_ce_3: 0.558  m2_loss_mask_3: 0.1742  m2_loss_dice_3: 1.191  m2_loss_ce_4: 0.5352  m2_loss_mask_4: 0.1749  m2_loss_dice_4: 1.203  m2_loss_ce_5: 0.528  m2_loss_mask_5: 0.1715  m2_loss_dice_5: 1.156  m2_loss_ce_6: 0.5164  m2_loss_mask_6: 0.1746  m2_loss_dice_6: 1.22  m2_loss_ce_7: 0.485  m2_loss_mask_7: 0.1723  m2_loss_dice_7: 1.172  m2_loss_ce_8: 0.4996  m2_loss_mask_8: 0.1747  m2_loss_dice_8: 1.197    time: 1.4529  last_time: 1.4454  data_time: 0.0487  last_data_time: 0.0668   lr: 0.0001  max_mem: 35045M
[10/07 00:40:45] d2.utils.events INFO:  eta: 0:03:22  iter: 859  total_loss: 36.85  m1_loss_ce: 0.5241  m1_loss_mask: 0.1527  m1_loss_dice: 1.134  m1_loss_ce_0: 0.5584  m1_loss_mask_0: 0.1724  m1_loss_dice_0: 1.288  m1_loss_ce_1: 0.5888  m1_loss_mask_1: 0.1704  m1_loss_dice_1: 1.195  m1_loss_ce_2: 0.496  m1_loss_mask_2: 0.1532  m1_loss_dice_2: 1.182  m1_loss_ce_3: 0.4799  m1_loss_mask_3: 0.1534  m1_loss_dice_3: 1.115  m1_loss_ce_4: 0.4692  m1_loss_mask_4: 0.154  m1_loss_dice_4: 1.139  m1_loss_ce_5: 0.4449  m1_loss_mask_5: 0.154  m1_loss_dice_5: 1.112  m1_loss_ce_6: 0.4323  m1_loss_mask_6: 0.1537  m1_loss_dice_6: 1.118  m1_loss_ce_7: 0.4516  m1_loss_mask_7: 0.1543  m1_loss_dice_7: 1.116  m1_loss_ce_8: 0.4626  m1_loss_mask_8: 0.1573  m1_loss_dice_8: 1.099  m2_loss_ce: 0.5134  m2_loss_mask: 0.1502  m2_loss_dice: 1.151  m2_loss_ce_0: 0.584  m2_loss_mask_0: 0.1879  m2_loss_dice_0: 1.384  m2_loss_ce_1: 0.6557  m2_loss_mask_1: 0.1608  m2_loss_dice_1: 1.249  m2_loss_ce_2: 0.6022  m2_loss_mask_2: 0.1517  m2_loss_dice_2: 1.211  m2_loss_ce_3: 0.585  m2_loss_mask_3: 0.1562  m2_loss_dice_3: 1.167  m2_loss_ce_4: 0.5564  m2_loss_mask_4: 0.1554  m2_loss_dice_4: 1.172  m2_loss_ce_5: 0.5428  m2_loss_mask_5: 0.1521  m2_loss_dice_5: 1.125  m2_loss_ce_6: 0.5094  m2_loss_mask_6: 0.1526  m2_loss_dice_6: 1.114  m2_loss_ce_7: 0.5097  m2_loss_mask_7: 0.1523  m2_loss_dice_7: 1.14  m2_loss_ce_8: 0.499  m2_loss_mask_8: 0.1528  m2_loss_dice_8: 1.144    time: 1.4518  last_time: 1.3453  data_time: 0.0532  last_data_time: 0.0360   lr: 0.0001  max_mem: 35045M
[10/07 00:41:14] d2.utils.events INFO:  eta: 0:02:53  iter: 879  total_loss: 38.19  m1_loss_ce: 0.5428  m1_loss_mask: 0.1625  m1_loss_dice: 1.161  m1_loss_ce_0: 0.5518  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.315  m1_loss_ce_1: 0.599  m1_loss_mask_1: 0.1774  m1_loss_dice_1: 1.245  m1_loss_ce_2: 0.5389  m1_loss_mask_2: 0.167  m1_loss_dice_2: 1.247  m1_loss_ce_3: 0.4809  m1_loss_mask_3: 0.1668  m1_loss_dice_3: 1.159  m1_loss_ce_4: 0.4787  m1_loss_mask_4: 0.1633  m1_loss_dice_4: 1.13  m1_loss_ce_5: 0.4604  m1_loss_mask_5: 0.1621  m1_loss_dice_5: 1.142  m1_loss_ce_6: 0.4656  m1_loss_mask_6: 0.1613  m1_loss_dice_6: 1.138  m1_loss_ce_7: 0.4357  m1_loss_mask_7: 0.166  m1_loss_dice_7: 1.147  m1_loss_ce_8: 0.4578  m1_loss_mask_8: 0.1644  m1_loss_dice_8: 1.137  m2_loss_ce: 0.5236  m2_loss_mask: 0.1654  m2_loss_dice: 1.163  m2_loss_ce_0: 0.565  m2_loss_mask_0: 0.1913  m2_loss_dice_0: 1.435  m2_loss_ce_1: 0.694  m2_loss_mask_1: 0.1756  m2_loss_dice_1: 1.291  m2_loss_ce_2: 0.638  m2_loss_mask_2: 0.1695  m2_loss_dice_2: 1.25  m2_loss_ce_3: 0.5536  m2_loss_mask_3: 0.1683  m2_loss_dice_3: 1.212  m2_loss_ce_4: 0.5488  m2_loss_mask_4: 0.1676  m2_loss_dice_4: 1.217  m2_loss_ce_5: 0.5554  m2_loss_mask_5: 0.1655  m2_loss_dice_5: 1.17  m2_loss_ce_6: 0.5174  m2_loss_mask_6: 0.1671  m2_loss_dice_6: 1.193  m2_loss_ce_7: 0.5022  m2_loss_mask_7: 0.167  m2_loss_dice_7: 1.167  m2_loss_ce_8: 0.5103  m2_loss_mask_8: 0.1644  m2_loss_dice_8: 1.173    time: 1.4515  last_time: 1.5584  data_time: 0.0755  last_data_time: 0.0656   lr: 0.0001  max_mem: 35045M
[10/07 00:41:44] d2.utils.events INFO:  eta: 0:02:24  iter: 899  total_loss: 41.39  m1_loss_ce: 0.5496  m1_loss_mask: 0.1497  m1_loss_dice: 1.249  m1_loss_ce_0: 0.5699  m1_loss_mask_0: 0.1786  m1_loss_dice_0: 1.483  m1_loss_ce_1: 0.6221  m1_loss_mask_1: 0.1643  m1_loss_dice_1: 1.375  m1_loss_ce_2: 0.5614  m1_loss_mask_2: 0.1578  m1_loss_dice_2: 1.286  m1_loss_ce_3: 0.5082  m1_loss_mask_3: 0.1521  m1_loss_dice_3: 1.273  m1_loss_ce_4: 0.4835  m1_loss_mask_4: 0.1533  m1_loss_dice_4: 1.231  m1_loss_ce_5: 0.4859  m1_loss_mask_5: 0.1523  m1_loss_dice_5: 1.248  m1_loss_ce_6: 0.456  m1_loss_mask_6: 0.1499  m1_loss_dice_6: 1.247  m1_loss_ce_7: 0.4519  m1_loss_mask_7: 0.1508  m1_loss_dice_7: 1.203  m1_loss_ce_8: 0.4696  m1_loss_mask_8: 0.1501  m1_loss_dice_8: 1.249  m2_loss_ce: 0.5073  m2_loss_mask: 0.1569  m2_loss_dice: 1.279  m2_loss_ce_0: 0.6073  m2_loss_mask_0: 0.1884  m2_loss_dice_0: 1.557  m2_loss_ce_1: 0.6765  m2_loss_mask_1: 0.1731  m2_loss_dice_1: 1.373  m2_loss_ce_2: 0.624  m2_loss_mask_2: 0.1624  m2_loss_dice_2: 1.353  m2_loss_ce_3: 0.5842  m2_loss_mask_3: 0.1615  m2_loss_dice_3: 1.288  m2_loss_ce_4: 0.5573  m2_loss_mask_4: 0.159  m2_loss_dice_4: 1.272  m2_loss_ce_5: 0.5337  m2_loss_mask_5: 0.1554  m2_loss_dice_5: 1.295  m2_loss_ce_6: 0.5473  m2_loss_mask_6: 0.1637  m2_loss_dice_6: 1.265  m2_loss_ce_7: 0.5191  m2_loss_mask_7: 0.1608  m2_loss_dice_7: 1.288  m2_loss_ce_8: 0.5426  m2_loss_mask_8: 0.1607  m2_loss_dice_8: 1.272    time: 1.4525  last_time: 1.4029  data_time: 0.0636  last_data_time: 0.1311   lr: 0.0001  max_mem: 35045M
[10/07 00:42:13] d2.utils.events INFO:  eta: 0:01:55  iter: 919  total_loss: 40.47  m1_loss_ce: 0.5857  m1_loss_mask: 0.1582  m1_loss_dice: 1.256  m1_loss_ce_0: 0.5563  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.426  m1_loss_ce_1: 0.6247  m1_loss_mask_1: 0.1729  m1_loss_dice_1: 1.366  m1_loss_ce_2: 0.5398  m1_loss_mask_2: 0.1607  m1_loss_dice_2: 1.323  m1_loss_ce_3: 0.5137  m1_loss_mask_3: 0.1583  m1_loss_dice_3: 1.266  m1_loss_ce_4: 0.4868  m1_loss_mask_4: 0.1587  m1_loss_dice_4: 1.256  m1_loss_ce_5: 0.4737  m1_loss_mask_5: 0.1589  m1_loss_dice_5: 1.288  m1_loss_ce_6: 0.4709  m1_loss_mask_6: 0.1557  m1_loss_dice_6: 1.223  m1_loss_ce_7: 0.4425  m1_loss_mask_7: 0.1599  m1_loss_dice_7: 1.23  m1_loss_ce_8: 0.4587  m1_loss_mask_8: 0.1605  m1_loss_dice_8: 1.225  m2_loss_ce: 0.5548  m2_loss_mask: 0.1642  m2_loss_dice: 1.246  m2_loss_ce_0: 0.6007  m2_loss_mask_0: 0.1971  m2_loss_dice_0: 1.485  m2_loss_ce_1: 0.7124  m2_loss_mask_1: 0.176  m2_loss_dice_1: 1.367  m2_loss_ce_2: 0.6379  m2_loss_mask_2: 0.1628  m2_loss_dice_2: 1.305  m2_loss_ce_3: 0.5972  m2_loss_mask_3: 0.1659  m2_loss_dice_3: 1.273  m2_loss_ce_4: 0.5497  m2_loss_mask_4: 0.1642  m2_loss_dice_4: 1.266  m2_loss_ce_5: 0.5743  m2_loss_mask_5: 0.1615  m2_loss_dice_5: 1.276  m2_loss_ce_6: 0.5716  m2_loss_mask_6: 0.1657  m2_loss_dice_6: 1.271  m2_loss_ce_7: 0.5673  m2_loss_mask_7: 0.1633  m2_loss_dice_7: 1.263  m2_loss_ce_8: 0.5606  m2_loss_mask_8: 0.1642  m2_loss_dice_8: 1.256    time: 1.4526  last_time: 1.5073  data_time: 0.0708  last_data_time: 0.1229   lr: 0.0001  max_mem: 35045M
[10/07 00:42:41] d2.utils.events INFO:  eta: 0:01:26  iter: 939  total_loss: 39.35  m1_loss_ce: 0.5285  m1_loss_mask: 0.1591  m1_loss_dice: 1.18  m1_loss_ce_0: 0.5745  m1_loss_mask_0: 0.1875  m1_loss_dice_0: 1.362  m1_loss_ce_1: 0.6407  m1_loss_mask_1: 0.1756  m1_loss_dice_1: 1.303  m1_loss_ce_2: 0.5611  m1_loss_mask_2: 0.1608  m1_loss_dice_2: 1.286  m1_loss_ce_3: 0.5376  m1_loss_mask_3: 0.1614  m1_loss_dice_3: 1.23  m1_loss_ce_4: 0.5082  m1_loss_mask_4: 0.1638  m1_loss_dice_4: 1.191  m1_loss_ce_5: 0.4884  m1_loss_mask_5: 0.1629  m1_loss_dice_5: 1.238  m1_loss_ce_6: 0.4693  m1_loss_mask_6: 0.1602  m1_loss_dice_6: 1.172  m1_loss_ce_7: 0.4695  m1_loss_mask_7: 0.1581  m1_loss_dice_7: 1.207  m1_loss_ce_8: 0.4529  m1_loss_mask_8: 0.1597  m1_loss_dice_8: 1.191  m2_loss_ce: 0.5257  m2_loss_mask: 0.1637  m2_loss_dice: 1.185  m2_loss_ce_0: 0.6064  m2_loss_mask_0: 0.1904  m2_loss_dice_0: 1.432  m2_loss_ce_1: 0.7053  m2_loss_mask_1: 0.1773  m2_loss_dice_1: 1.353  m2_loss_ce_2: 0.617  m2_loss_mask_2: 0.1684  m2_loss_dice_2: 1.271  m2_loss_ce_3: 0.6093  m2_loss_mask_3: 0.1651  m2_loss_dice_3: 1.231  m2_loss_ce_4: 0.5773  m2_loss_mask_4: 0.1645  m2_loss_dice_4: 1.196  m2_loss_ce_5: 0.5396  m2_loss_mask_5: 0.1615  m2_loss_dice_5: 1.205  m2_loss_ce_6: 0.5599  m2_loss_mask_6: 0.1612  m2_loss_dice_6: 1.187  m2_loss_ce_7: 0.524  m2_loss_mask_7: 0.163  m2_loss_dice_7: 1.195  m2_loss_ce_8: 0.564  m2_loss_mask_8: 0.1623  m2_loss_dice_8: 1.209    time: 1.4511  last_time: 1.4157  data_time: 0.0519  last_data_time: 0.0502   lr: 0.0001  max_mem: 35045M
[10/07 00:43:10] d2.utils.events INFO:  eta: 0:00:57  iter: 959  total_loss: 40.59  m1_loss_ce: 0.5823  m1_loss_mask: 0.1537  m1_loss_dice: 1.234  m1_loss_ce_0: 0.6117  m1_loss_mask_0: 0.1883  m1_loss_dice_0: 1.446  m1_loss_ce_1: 0.6381  m1_loss_mask_1: 0.1662  m1_loss_dice_1: 1.358  m1_loss_ce_2: 0.6014  m1_loss_mask_2: 0.1549  m1_loss_dice_2: 1.3  m1_loss_ce_3: 0.5219  m1_loss_mask_3: 0.157  m1_loss_dice_3: 1.225  m1_loss_ce_4: 0.5259  m1_loss_mask_4: 0.1546  m1_loss_dice_4: 1.226  m1_loss_ce_5: 0.5215  m1_loss_mask_5: 0.1531  m1_loss_dice_5: 1.269  m1_loss_ce_6: 0.4914  m1_loss_mask_6: 0.1558  m1_loss_dice_6: 1.232  m1_loss_ce_7: 0.4821  m1_loss_mask_7: 0.1525  m1_loss_dice_7: 1.192  m1_loss_ce_8: 0.4826  m1_loss_mask_8: 0.1538  m1_loss_dice_8: 1.231  m2_loss_ce: 0.6034  m2_loss_mask: 0.1619  m2_loss_dice: 1.251  m2_loss_ce_0: 0.6164  m2_loss_mask_0: 0.2027  m2_loss_dice_0: 1.473  m2_loss_ce_1: 0.7369  m2_loss_mask_1: 0.177  m2_loss_dice_1: 1.383  m2_loss_ce_2: 0.6825  m2_loss_mask_2: 0.1734  m2_loss_dice_2: 1.312  m2_loss_ce_3: 0.6365  m2_loss_mask_3: 0.1711  m2_loss_dice_3: 1.272  m2_loss_ce_4: 0.5926  m2_loss_mask_4: 0.1696  m2_loss_dice_4: 1.225  m2_loss_ce_5: 0.6225  m2_loss_mask_5: 0.1672  m2_loss_dice_5: 1.259  m2_loss_ce_6: 0.5979  m2_loss_mask_6: 0.1651  m2_loss_dice_6: 1.251  m2_loss_ce_7: 0.5872  m2_loss_mask_7: 0.1628  m2_loss_dice_7: 1.242  m2_loss_ce_8: 0.5924  m2_loss_mask_8: 0.1649  m2_loss_dice_8: 1.239    time: 1.4513  last_time: 1.5287  data_time: 0.0570  last_data_time: 0.0388   lr: 0.0001  max_mem: 35045M
[10/07 00:43:40] d2.utils.events INFO:  eta: 0:00:28  iter: 979  total_loss: 39.08  m1_loss_ce: 0.5236  m1_loss_mask: 0.1532  m1_loss_dice: 1.156  m1_loss_ce_0: 0.5677  m1_loss_mask_0: 0.1727  m1_loss_dice_0: 1.391  m1_loss_ce_1: 0.6026  m1_loss_mask_1: 0.1642  m1_loss_dice_1: 1.317  m1_loss_ce_2: 0.5253  m1_loss_mask_2: 0.1545  m1_loss_dice_2: 1.255  m1_loss_ce_3: 0.4811  m1_loss_mask_3: 0.1567  m1_loss_dice_3: 1.222  m1_loss_ce_4: 0.4618  m1_loss_mask_4: 0.1564  m1_loss_dice_4: 1.202  m1_loss_ce_5: 0.4631  m1_loss_mask_5: 0.1558  m1_loss_dice_5: 1.259  m1_loss_ce_6: 0.4511  m1_loss_mask_6: 0.1547  m1_loss_dice_6: 1.194  m1_loss_ce_7: 0.4294  m1_loss_mask_7: 0.1576  m1_loss_dice_7: 1.234  m1_loss_ce_8: 0.4277  m1_loss_mask_8: 0.1549  m1_loss_dice_8: 1.185  m2_loss_ce: 0.5504  m2_loss_mask: 0.1608  m2_loss_dice: 1.248  m2_loss_ce_0: 0.6001  m2_loss_mask_0: 0.1883  m2_loss_dice_0: 1.454  m2_loss_ce_1: 0.681  m2_loss_mask_1: 0.1702  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.6453  m2_loss_mask_2: 0.1606  m2_loss_dice_2: 1.283  m2_loss_ce_3: 0.5857  m2_loss_mask_3: 0.1683  m2_loss_dice_3: 1.269  m2_loss_ce_4: 0.5608  m2_loss_mask_4: 0.1614  m2_loss_dice_4: 1.243  m2_loss_ce_5: 0.5477  m2_loss_mask_5: 0.1627  m2_loss_dice_5: 1.238  m2_loss_ce_6: 0.5487  m2_loss_mask_6: 0.1596  m2_loss_dice_6: 1.267  m2_loss_ce_7: 0.552  m2_loss_mask_7: 0.1585  m2_loss_dice_7: 1.234  m2_loss_ce_8: 0.5465  m2_loss_mask_8: 0.158  m2_loss_dice_8: 1.226    time: 1.4519  last_time: 1.4734  data_time: 0.0583  last_data_time: 0.0598   lr: 0.0001  max_mem: 35045M
[10/07 00:44:08] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_Uncertainty/model_final.pth
[10/07 00:44:11] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 39.73  m1_loss_ce: 0.537  m1_loss_mask: 0.157  m1_loss_dice: 1.168  m1_loss_ce_0: 0.5153  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.42  m1_loss_ce_1: 0.5668  m1_loss_mask_1: 0.168  m1_loss_dice_1: 1.312  m1_loss_ce_2: 0.5312  m1_loss_mask_2: 0.1597  m1_loss_dice_2: 1.235  m1_loss_ce_3: 0.4731  m1_loss_mask_3: 0.1588  m1_loss_dice_3: 1.187  m1_loss_ce_4: 0.4406  m1_loss_mask_4: 0.1591  m1_loss_dice_4: 1.205  m1_loss_ce_5: 0.4336  m1_loss_mask_5: 0.1568  m1_loss_dice_5: 1.198  m1_loss_ce_6: 0.4522  m1_loss_mask_6: 0.1582  m1_loss_dice_6: 1.159  m1_loss_ce_7: 0.4131  m1_loss_mask_7: 0.157  m1_loss_dice_7: 1.2  m1_loss_ce_8: 0.4324  m1_loss_mask_8: 0.1565  m1_loss_dice_8: 1.203  m2_loss_ce: 0.5294  m2_loss_mask: 0.1657  m2_loss_dice: 1.238  m2_loss_ce_0: 0.572  m2_loss_mask_0: 0.1969  m2_loss_dice_0: 1.482  m2_loss_ce_1: 0.6767  m2_loss_mask_1: 0.1735  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.6088  m2_loss_mask_2: 0.1683  m2_loss_dice_2: 1.305  m2_loss_ce_3: 0.5462  m2_loss_mask_3: 0.1656  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.5655  m2_loss_mask_4: 0.1667  m2_loss_dice_4: 1.278  m2_loss_ce_5: 0.5263  m2_loss_mask_5: 0.1664  m2_loss_dice_5: 1.267  m2_loss_ce_6: 0.5337  m2_loss_mask_6: 0.166  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.5494  m2_loss_mask_7: 0.1639  m2_loss_dice_7: 1.231  m2_loss_ce_8: 0.5298  m2_loss_mask_8: 0.1649  m2_loss_dice_8: 1.222    time: 1.4511  last_time: 1.3561  data_time: 0.0620  last_data_time: 0.0438   lr: 0.0001  max_mem: 35045M
[10/07 00:44:11] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:24:08 (1.4511 s / it)
[10/07 00:44:11] d2.engine.hooks INFO: Total training time: 0:24:16 (0:00:08 on hooks)
[10/07 00:44:11] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[10/07 00:44:11] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[10/07 00:44:11] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/07 00:44:11] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/07 00:44:11] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[10/07 00:45:38] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval_wem9ju3 ...
[10/07 00:46:41] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 59.452 | 80.891 | 72.423 |      19       |
| Things | 50.957 | 80.181 | 63.254 |       8       |
| Stuff  | 65.629 | 81.407 | 79.091 |      11       |
[10/07 00:46:41] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.318 | 97.621 | 99.690 |     Stuff     |
| class_8  | 73.853 | 83.792 | 88.139 |     Stuff     |
| class_11 | 87.548 | 89.847 | 97.441 |     Stuff     |
| class_12 | 45.977 | 79.255 | 58.011 |     Stuff     |
| class_13 | 39.918 | 75.713 | 52.722 |     Stuff     |
| class_17 | 46.064 | 63.832 | 72.165 |     Stuff     |
| class_19 | 50.221 | 68.995 | 72.790 |     Stuff     |
| class_20 | 66.917 | 78.182 | 85.591 |     Stuff     |
| class_21 | 89.003 | 89.834 | 99.075 |     Stuff     |
| class_22 | 37.354 | 76.675 | 48.718 |     Stuff     |
| class_23 | 87.750 | 91.729 | 95.662 |     Stuff     |
| class_24 | 49.421 | 76.395 | 64.691 |    Things     |
| class_25 | 47.181 | 73.901 | 63.844 |    Things     |
| class_26 | 64.652 | 83.164 | 77.740 |    Things     |
| class_27 | 50.362 | 87.865 | 57.317 |    Things     |
| class_28 | 64.076 | 89.804 | 71.351 |    Things     |
| class_31 | 53.813 | 83.166 | 64.706 |    Things     |
| class_32 | 35.918 | 74.792 | 48.024 |    Things     |
| class_33 | 42.233 | 72.363 | 58.363 |    Things     |
[10/07 00:46:41] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/07 00:46:41] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[10/07 00:46:41] d2.evaluation.testing INFO: copypaste: 59.4516,80.8908,72.4232,50.9570,80.1813,63.2545,65.6295,81.4068,79.0914,97.3177,97.6206,99.6898,73.8534,83.7917,88.1393,87.5475,89.8466,97.4411,45.9769,79.2554,58.0110,39.9177,75.7134,52.7221,46.0645,63.8322,72.1649,50.2214,68.9947,72.7903,66.9174,78.1824,85.5914,89.0035,89.8344,99.0750,37.3544,76.6749,48.7179,87.7497,91.7288,95.6621,49.4206,76.3950,64.6909,47.1812,73.9011,63.8436,64.6517,83.1641,77.7400,50.3615,87.8647,57.3171,64.0762,89.8038,71.3514,53.8134,83.1662,64.7059,35.9183,74.7918,48.0243,42.2332,72.3634,58.3626
