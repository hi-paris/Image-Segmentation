[10/05 11:28:10] detectron2 INFO: Rank of current process: 0. World size: 2
[10/05 11:28:11] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/05 11:28:11] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_L1_L2_GradNorm_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/05 11:28:11] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_L1_L2_GradNorm_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/05 11:28:11] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/05 11:28:11] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm/config.yaml
[10/05 11:28:11] d2.utils.env INFO: Using a generated random seed 14172915
[10/05 11:28:16] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/05 11:28:16] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/05 11:28:16] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/05 11:28:16] d2.data.build INFO: Using training sampler TrainingSampler
[10/05 11:28:17] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/05 11:28:17] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/05 11:28:17] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/05 11:28:17] d2.data.build INFO: Making batched data loader with batch_size=4
[10/05 11:28:17] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/05 11:28:21] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/05 11:28:21] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/05 11:28:21] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/05 11:28:27] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/05 11:28:27] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/05 11:28:39] d2.engine.hooks INFO: Total training time: 0:00:10 (0:00:00 on hooks)
[10/05 11:28:39] d2.utils.events INFO:  iter: 0       lr: N/A  max_mem: 33822M
[10/05 12:01:45] detectron2 INFO: Rank of current process: 0. World size: 2
[10/05 12:01:46] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/05 12:01:46] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_L1_L2_GradNorm_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/05 12:01:46] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_L1_L2_GradNorm_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/05 12:01:46] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/05 12:01:46] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm/config.yaml
[10/05 12:01:46] d2.utils.env INFO: Using a generated random seed 49018957
[10/05 12:01:50] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/05 12:01:50] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/05 12:01:51] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/05 12:01:51] d2.data.build INFO: Using training sampler TrainingSampler
[10/05 12:01:51] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/05 12:01:51] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/05 12:01:51] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/05 12:01:51] d2.data.build INFO: Making batched data loader with batch_size=4
[10/05 12:01:51] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/05 12:01:55] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[10/05 12:01:55] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/05 12:01:55] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/05 12:01:56] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/05 12:01:56] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r50_008_1000_19/model_final.pth ...
[10/05 12:02:32] d2.utils.events INFO:  eta: 0:23:49  iter: 19  total_loss: 39.92  m1_loss_ce: 0.4476  m1_loss_mask: 0.1749  m1_loss_dice: 1.226  m1_loss_ce_0: 0.6151  m1_loss_mask_0: 0.1953  m1_loss_dice_0: 1.451  m1_loss_ce_1: 0.6407  m1_loss_mask_1: 0.1848  m1_loss_dice_1: 1.356  m1_loss_ce_2: 0.5859  m1_loss_mask_2: 0.1789  m1_loss_dice_2: 1.343  m1_loss_ce_3: 0.5229  m1_loss_mask_3: 0.178  m1_loss_dice_3: 1.302  m1_loss_ce_4: 0.4943  m1_loss_mask_4: 0.1752  m1_loss_dice_4: 1.243  m1_loss_ce_5: 0.5047  m1_loss_mask_5: 0.1763  m1_loss_dice_5: 1.264  m1_loss_ce_6: 0.4828  m1_loss_mask_6: 0.1733  m1_loss_dice_6: 1.202  m1_loss_ce_7: 0.4361  m1_loss_mask_7: 0.1762  m1_loss_dice_7: 1.219  m1_loss_ce_8: 0.4622  m1_loss_mask_8: 0.1745  m1_loss_dice_8: 1.227  m2_loss_ce: 0.4542  m2_loss_mask: 0.1785  m2_loss_dice: 1.233  m2_loss_ce_0: 0.5852  m2_loss_mask_0: 0.208  m2_loss_dice_0: 1.427  m2_loss_ce_1: 0.6621  m2_loss_mask_1: 0.1903  m2_loss_dice_1: 1.367  m2_loss_ce_2: 0.5721  m2_loss_mask_2: 0.1811  m2_loss_dice_2: 1.319  m2_loss_ce_3: 0.519  m2_loss_mask_3: 0.1812  m2_loss_dice_3: 1.285  m2_loss_ce_4: 0.5047  m2_loss_mask_4: 0.178  m2_loss_dice_4: 1.272  m2_loss_ce_5: 0.5052  m2_loss_mask_5: 0.1785  m2_loss_dice_5: 1.248  m2_loss_ce_6: 0.5016  m2_loss_mask_6: 0.1773  m2_loss_dice_6: 1.24  m2_loss_ce_7: 0.5012  m2_loss_mask_7: 0.1797  m2_loss_dice_7: 1.239  m2_loss_ce_8: 0.474  m2_loss_mask_8: 0.176  m2_loss_dice_8: 1.23    time: 1.4706  last_time: 1.4984  data_time: 0.2774  last_data_time: 0.0441   lr: 0.0001  max_mem: 33805M
[10/05 12:03:02] d2.utils.events INFO:  eta: 0:23:21  iter: 39  total_loss: 39.61  m1_loss_ce: 0.4582  m1_loss_mask: 0.1734  m1_loss_dice: 1.229  m1_loss_ce_0: 0.5637  m1_loss_mask_0: 0.2  m1_loss_dice_0: 1.468  m1_loss_ce_1: 0.6093  m1_loss_mask_1: 0.1866  m1_loss_dice_1: 1.373  m1_loss_ce_2: 0.5512  m1_loss_mask_2: 0.1746  m1_loss_dice_2: 1.307  m1_loss_ce_3: 0.524  m1_loss_mask_3: 0.1728  m1_loss_dice_3: 1.247  m1_loss_ce_4: 0.4864  m1_loss_mask_4: 0.1731  m1_loss_dice_4: 1.224  m1_loss_ce_5: 0.4838  m1_loss_mask_5: 0.1742  m1_loss_dice_5: 1.245  m1_loss_ce_6: 0.4635  m1_loss_mask_6: 0.1748  m1_loss_dice_6: 1.221  m1_loss_ce_7: 0.4529  m1_loss_mask_7: 0.1748  m1_loss_dice_7: 1.229  m1_loss_ce_8: 0.444  m1_loss_mask_8: 0.1743  m1_loss_dice_8: 1.21  m2_loss_ce: 0.4697  m2_loss_mask: 0.1662  m2_loss_dice: 1.26  m2_loss_ce_0: 0.6018  m2_loss_mask_0: 0.197  m2_loss_dice_0: 1.456  m2_loss_ce_1: 0.6454  m2_loss_mask_1: 0.1863  m2_loss_dice_1: 1.329  m2_loss_ce_2: 0.5855  m2_loss_mask_2: 0.1721  m2_loss_dice_2: 1.308  m2_loss_ce_3: 0.5251  m2_loss_mask_3: 0.1679  m2_loss_dice_3: 1.257  m2_loss_ce_4: 0.5191  m2_loss_mask_4: 0.1642  m2_loss_dice_4: 1.256  m2_loss_ce_5: 0.5034  m2_loss_mask_5: 0.1651  m2_loss_dice_5: 1.246  m2_loss_ce_6: 0.4945  m2_loss_mask_6: 0.169  m2_loss_dice_6: 1.234  m2_loss_ce_7: 0.5019  m2_loss_mask_7: 0.1656  m2_loss_dice_7: 1.244  m2_loss_ce_8: 0.4835  m2_loss_mask_8: 0.1649  m2_loss_dice_8: 1.245    time: 1.4674  last_time: 1.4934  data_time: 0.0565  last_data_time: 0.0540   lr: 0.0001  max_mem: 33947M
[10/05 12:03:32] d2.utils.events INFO:  eta: 0:22:52  iter: 59  total_loss: 41.55  m1_loss_ce: 0.4978  m1_loss_mask: 0.1716  m1_loss_dice: 1.299  m1_loss_ce_0: 0.6333  m1_loss_mask_0: 0.1909  m1_loss_dice_0: 1.472  m1_loss_ce_1: 0.6321  m1_loss_mask_1: 0.1771  m1_loss_dice_1: 1.429  m1_loss_ce_2: 0.5719  m1_loss_mask_2: 0.175  m1_loss_dice_2: 1.359  m1_loss_ce_3: 0.5729  m1_loss_mask_3: 0.1705  m1_loss_dice_3: 1.266  m1_loss_ce_4: 0.5361  m1_loss_mask_4: 0.1686  m1_loss_dice_4: 1.294  m1_loss_ce_5: 0.546  m1_loss_mask_5: 0.1722  m1_loss_dice_5: 1.313  m1_loss_ce_6: 0.5209  m1_loss_mask_6: 0.1724  m1_loss_dice_6: 1.314  m1_loss_ce_7: 0.5159  m1_loss_mask_7: 0.1693  m1_loss_dice_7: 1.305  m1_loss_ce_8: 0.4773  m1_loss_mask_8: 0.1726  m1_loss_dice_8: 1.283  m2_loss_ce: 0.4848  m2_loss_mask: 0.1683  m2_loss_dice: 1.309  m2_loss_ce_0: 0.631  m2_loss_mask_0: 0.1951  m2_loss_dice_0: 1.512  m2_loss_ce_1: 0.6828  m2_loss_mask_1: 0.1847  m2_loss_dice_1: 1.462  m2_loss_ce_2: 0.6192  m2_loss_mask_2: 0.1706  m2_loss_dice_2: 1.346  m2_loss_ce_3: 0.5588  m2_loss_mask_3: 0.1678  m2_loss_dice_3: 1.322  m2_loss_ce_4: 0.5613  m2_loss_mask_4: 0.1678  m2_loss_dice_4: 1.322  m2_loss_ce_5: 0.5184  m2_loss_mask_5: 0.1665  m2_loss_dice_5: 1.314  m2_loss_ce_6: 0.5175  m2_loss_mask_6: 0.1668  m2_loss_dice_6: 1.294  m2_loss_ce_7: 0.5083  m2_loss_mask_7: 0.1674  m2_loss_dice_7: 1.297  m2_loss_ce_8: 0.5034  m2_loss_mask_8: 0.1678  m2_loss_dice_8: 1.301    time: 1.4711  last_time: 1.4503  data_time: 0.0550  last_data_time: 0.0413   lr: 0.0001  max_mem: 33947M
[10/05 12:04:01] d2.utils.events INFO:  eta: 0:22:22  iter: 79  total_loss: 39.3  m1_loss_ce: 0.4871  m1_loss_mask: 0.1722  m1_loss_dice: 1.213  m1_loss_ce_0: 0.5944  m1_loss_mask_0: 0.2059  m1_loss_dice_0: 1.434  m1_loss_ce_1: 0.6456  m1_loss_mask_1: 0.1883  m1_loss_dice_1: 1.324  m1_loss_ce_2: 0.5791  m1_loss_mask_2: 0.1836  m1_loss_dice_2: 1.242  m1_loss_ce_3: 0.5245  m1_loss_mask_3: 0.185  m1_loss_dice_3: 1.22  m1_loss_ce_4: 0.5127  m1_loss_mask_4: 0.1847  m1_loss_dice_4: 1.247  m1_loss_ce_5: 0.527  m1_loss_mask_5: 0.1815  m1_loss_dice_5: 1.224  m1_loss_ce_6: 0.4824  m1_loss_mask_6: 0.1748  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.4982  m1_loss_mask_7: 0.1748  m1_loss_dice_7: 1.186  m1_loss_ce_8: 0.4727  m1_loss_mask_8: 0.1769  m1_loss_dice_8: 1.221  m2_loss_ce: 0.4816  m2_loss_mask: 0.1709  m2_loss_dice: 1.211  m2_loss_ce_0: 0.5944  m2_loss_mask_0: 0.1977  m2_loss_dice_0: 1.442  m2_loss_ce_1: 0.6483  m2_loss_mask_1: 0.1897  m2_loss_dice_1: 1.359  m2_loss_ce_2: 0.5927  m2_loss_mask_2: 0.1747  m2_loss_dice_2: 1.293  m2_loss_ce_3: 0.5288  m2_loss_mask_3: 0.174  m2_loss_dice_3: 1.189  m2_loss_ce_4: 0.5305  m2_loss_mask_4: 0.1734  m2_loss_dice_4: 1.255  m2_loss_ce_5: 0.5133  m2_loss_mask_5: 0.1705  m2_loss_dice_5: 1.204  m2_loss_ce_6: 0.4883  m2_loss_mask_6: 0.171  m2_loss_dice_6: 1.232  m2_loss_ce_7: 0.5019  m2_loss_mask_7: 0.1722  m2_loss_dice_7: 1.194  m2_loss_ce_8: 0.4911  m2_loss_mask_8: 0.1716  m2_loss_dice_8: 1.216    time: 1.4674  last_time: 1.4224  data_time: 0.0523  last_data_time: 0.0788   lr: 0.0001  max_mem: 33947M
[10/05 12:04:31] d2.utils.events INFO:  eta: 0:21:53  iter: 99  total_loss: 40.65  m1_loss_ce: 0.4545  m1_loss_mask: 0.1644  m1_loss_dice: 1.265  m1_loss_ce_0: 0.5826  m1_loss_mask_0: 0.1864  m1_loss_dice_0: 1.536  m1_loss_ce_1: 0.6434  m1_loss_mask_1: 0.1758  m1_loss_dice_1: 1.365  m1_loss_ce_2: 0.5536  m1_loss_mask_2: 0.1724  m1_loss_dice_2: 1.293  m1_loss_ce_3: 0.5331  m1_loss_mask_3: 0.1726  m1_loss_dice_3: 1.242  m1_loss_ce_4: 0.5208  m1_loss_mask_4: 0.1661  m1_loss_dice_4: 1.272  m1_loss_ce_5: 0.4791  m1_loss_mask_5: 0.1658  m1_loss_dice_5: 1.269  m1_loss_ce_6: 0.4799  m1_loss_mask_6: 0.1653  m1_loss_dice_6: 1.245  m1_loss_ce_7: 0.4832  m1_loss_mask_7: 0.164  m1_loss_dice_7: 1.27  m1_loss_ce_8: 0.4719  m1_loss_mask_8: 0.1635  m1_loss_dice_8: 1.252  m2_loss_ce: 0.4893  m2_loss_mask: 0.1574  m2_loss_dice: 1.249  m2_loss_ce_0: 0.5993  m2_loss_mask_0: 0.1865  m2_loss_dice_0: 1.51  m2_loss_ce_1: 0.6716  m2_loss_mask_1: 0.1743  m2_loss_dice_1: 1.403  m2_loss_ce_2: 0.5807  m2_loss_mask_2: 0.1607  m2_loss_dice_2: 1.294  m2_loss_ce_3: 0.5178  m2_loss_mask_3: 0.1577  m2_loss_dice_3: 1.3  m2_loss_ce_4: 0.5307  m2_loss_mask_4: 0.1597  m2_loss_dice_4: 1.292  m2_loss_ce_5: 0.5054  m2_loss_mask_5: 0.1574  m2_loss_dice_5: 1.268  m2_loss_ce_6: 0.4912  m2_loss_mask_6: 0.1579  m2_loss_dice_6: 1.287  m2_loss_ce_7: 0.4782  m2_loss_mask_7: 0.1574  m2_loss_dice_7: 1.29  m2_loss_ce_8: 0.4898  m2_loss_mask_8: 0.1564  m2_loss_dice_8: 1.271    time: 1.4677  last_time: 1.5177  data_time: 0.0550  last_data_time: 0.0367   lr: 0.0001  max_mem: 33947M
[10/05 12:05:00] d2.utils.events INFO:  eta: 0:21:25  iter: 119  total_loss: 38.56  m1_loss_ce: 0.4714  m1_loss_mask: 0.1667  m1_loss_dice: 1.216  m1_loss_ce_0: 0.5642  m1_loss_mask_0: 0.1871  m1_loss_dice_0: 1.407  m1_loss_ce_1: 0.5938  m1_loss_mask_1: 0.1809  m1_loss_dice_1: 1.339  m1_loss_ce_2: 0.5977  m1_loss_mask_2: 0.174  m1_loss_dice_2: 1.261  m1_loss_ce_3: 0.5356  m1_loss_mask_3: 0.1718  m1_loss_dice_3: 1.244  m1_loss_ce_4: 0.4855  m1_loss_mask_4: 0.1673  m1_loss_dice_4: 1.187  m1_loss_ce_5: 0.5035  m1_loss_mask_5: 0.1673  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.4795  m1_loss_mask_6: 0.1656  m1_loss_dice_6: 1.171  m1_loss_ce_7: 0.4882  m1_loss_mask_7: 0.1651  m1_loss_dice_7: 1.172  m1_loss_ce_8: 0.4883  m1_loss_mask_8: 0.1661  m1_loss_dice_8: 1.187  m2_loss_ce: 0.4668  m2_loss_mask: 0.1653  m2_loss_dice: 1.224  m2_loss_ce_0: 0.5844  m2_loss_mask_0: 0.1935  m2_loss_dice_0: 1.389  m2_loss_ce_1: 0.6678  m2_loss_mask_1: 0.1841  m2_loss_dice_1: 1.317  m2_loss_ce_2: 0.5771  m2_loss_mask_2: 0.1729  m2_loss_dice_2: 1.317  m2_loss_ce_3: 0.5229  m2_loss_mask_3: 0.1641  m2_loss_dice_3: 1.257  m2_loss_ce_4: 0.5108  m2_loss_mask_4: 0.1652  m2_loss_dice_4: 1.196  m2_loss_ce_5: 0.5056  m2_loss_mask_5: 0.1639  m2_loss_dice_5: 1.213  m2_loss_ce_6: 0.4881  m2_loss_mask_6: 0.1657  m2_loss_dice_6: 1.224  m2_loss_ce_7: 0.492  m2_loss_mask_7: 0.1644  m2_loss_dice_7: 1.195  m2_loss_ce_8: 0.4696  m2_loss_mask_8: 0.1639  m2_loss_dice_8: 1.252    time: 1.4677  last_time: 1.4129  data_time: 0.0638  last_data_time: 0.0548   lr: 0.0001  max_mem: 34128M
[10/05 12:05:30] d2.utils.events INFO:  eta: 0:20:55  iter: 139  total_loss: 39.5  m1_loss_ce: 0.4713  m1_loss_mask: 0.1733  m1_loss_dice: 1.201  m1_loss_ce_0: 0.5867  m1_loss_mask_0: 0.1978  m1_loss_dice_0: 1.438  m1_loss_ce_1: 0.6569  m1_loss_mask_1: 0.1889  m1_loss_dice_1: 1.325  m1_loss_ce_2: 0.6183  m1_loss_mask_2: 0.1803  m1_loss_dice_2: 1.255  m1_loss_ce_3: 0.5681  m1_loss_mask_3: 0.1786  m1_loss_dice_3: 1.227  m1_loss_ce_4: 0.4944  m1_loss_mask_4: 0.1774  m1_loss_dice_4: 1.248  m1_loss_ce_5: 0.5067  m1_loss_mask_5: 0.1716  m1_loss_dice_5: 1.195  m1_loss_ce_6: 0.4878  m1_loss_mask_6: 0.1771  m1_loss_dice_6: 1.21  m1_loss_ce_7: 0.4974  m1_loss_mask_7: 0.1731  m1_loss_dice_7: 1.203  m1_loss_ce_8: 0.4801  m1_loss_mask_8: 0.1715  m1_loss_dice_8: 1.232  m2_loss_ce: 0.5062  m2_loss_mask: 0.1691  m2_loss_dice: 1.219  m2_loss_ce_0: 0.6301  m2_loss_mask_0: 0.2024  m2_loss_dice_0: 1.448  m2_loss_ce_1: 0.6799  m2_loss_mask_1: 0.1917  m2_loss_dice_1: 1.346  m2_loss_ce_2: 0.5953  m2_loss_mask_2: 0.1796  m2_loss_dice_2: 1.29  m2_loss_ce_3: 0.5366  m2_loss_mask_3: 0.1779  m2_loss_dice_3: 1.231  m2_loss_ce_4: 0.5275  m2_loss_mask_4: 0.1728  m2_loss_dice_4: 1.221  m2_loss_ce_5: 0.493  m2_loss_mask_5: 0.1754  m2_loss_dice_5: 1.237  m2_loss_ce_6: 0.5257  m2_loss_mask_6: 0.1742  m2_loss_dice_6: 1.22  m2_loss_ce_7: 0.4707  m2_loss_mask_7: 0.1734  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.4939  m2_loss_mask_8: 0.1721  m2_loss_dice_8: 1.198    time: 1.4665  last_time: 1.5822  data_time: 0.0567  last_data_time: 0.0406   lr: 0.0001  max_mem: 34128M
[10/05 12:05:59] d2.utils.events INFO:  eta: 0:20:28  iter: 159  total_loss: 38.92  m1_loss_ce: 0.4952  m1_loss_mask: 0.1609  m1_loss_dice: 1.168  m1_loss_ce_0: 0.545  m1_loss_mask_0: 0.1879  m1_loss_dice_0: 1.369  m1_loss_ce_1: 0.6325  m1_loss_mask_1: 0.1769  m1_loss_dice_1: 1.327  m1_loss_ce_2: 0.5933  m1_loss_mask_2: 0.1656  m1_loss_dice_2: 1.247  m1_loss_ce_3: 0.5413  m1_loss_mask_3: 0.1619  m1_loss_dice_3: 1.176  m1_loss_ce_4: 0.5295  m1_loss_mask_4: 0.1614  m1_loss_dice_4: 1.201  m1_loss_ce_5: 0.5082  m1_loss_mask_5: 0.1588  m1_loss_dice_5: 1.206  m1_loss_ce_6: 0.4901  m1_loss_mask_6: 0.1587  m1_loss_dice_6: 1.187  m1_loss_ce_7: 0.4662  m1_loss_mask_7: 0.1591  m1_loss_dice_7: 1.167  m1_loss_ce_8: 0.506  m1_loss_mask_8: 0.1598  m1_loss_dice_8: 1.164  m2_loss_ce: 0.4666  m2_loss_mask: 0.1625  m2_loss_dice: 1.209  m2_loss_ce_0: 0.5773  m2_loss_mask_0: 0.1925  m2_loss_dice_0: 1.382  m2_loss_ce_1: 0.6586  m2_loss_mask_1: 0.1788  m2_loss_dice_1: 1.309  m2_loss_ce_2: 0.5794  m2_loss_mask_2: 0.1675  m2_loss_dice_2: 1.264  m2_loss_ce_3: 0.523  m2_loss_mask_3: 0.163  m2_loss_dice_3: 1.204  m2_loss_ce_4: 0.5102  m2_loss_mask_4: 0.1616  m2_loss_dice_4: 1.189  m2_loss_ce_5: 0.5163  m2_loss_mask_5: 0.1602  m2_loss_dice_5: 1.189  m2_loss_ce_6: 0.4782  m2_loss_mask_6: 0.1618  m2_loss_dice_6: 1.169  m2_loss_ce_7: 0.4872  m2_loss_mask_7: 0.162  m2_loss_dice_7: 1.177  m2_loss_ce_8: 0.4794  m2_loss_mask_8: 0.1632  m2_loss_dice_8: 1.194    time: 1.4674  last_time: 1.4827  data_time: 0.0568  last_data_time: 0.0375   lr: 0.0001  max_mem: 34128M
[10/05 12:06:28] d2.utils.events INFO:  eta: 0:19:58  iter: 179  total_loss: 39.8  m1_loss_ce: 0.4418  m1_loss_mask: 0.1707  m1_loss_dice: 1.276  m1_loss_ce_0: 0.5291  m1_loss_mask_0: 0.2066  m1_loss_dice_0: 1.451  m1_loss_ce_1: 0.6306  m1_loss_mask_1: 0.1908  m1_loss_dice_1: 1.374  m1_loss_ce_2: 0.5663  m1_loss_mask_2: 0.1829  m1_loss_dice_2: 1.332  m1_loss_ce_3: 0.4903  m1_loss_mask_3: 0.1809  m1_loss_dice_3: 1.278  m1_loss_ce_4: 0.4849  m1_loss_mask_4: 0.1759  m1_loss_dice_4: 1.284  m1_loss_ce_5: 0.4385  m1_loss_mask_5: 0.1711  m1_loss_dice_5: 1.254  m1_loss_ce_6: 0.4553  m1_loss_mask_6: 0.1712  m1_loss_dice_6: 1.218  m1_loss_ce_7: 0.4466  m1_loss_mask_7: 0.1706  m1_loss_dice_7: 1.261  m1_loss_ce_8: 0.4363  m1_loss_mask_8: 0.169  m1_loss_dice_8: 1.234  m2_loss_ce: 0.4773  m2_loss_mask: 0.1721  m2_loss_dice: 1.253  m2_loss_ce_0: 0.6027  m2_loss_mask_0: 0.1987  m2_loss_dice_0: 1.454  m2_loss_ce_1: 0.6766  m2_loss_mask_1: 0.195  m2_loss_dice_1: 1.356  m2_loss_ce_2: 0.593  m2_loss_mask_2: 0.1793  m2_loss_dice_2: 1.341  m2_loss_ce_3: 0.5135  m2_loss_mask_3: 0.1733  m2_loss_dice_3: 1.297  m2_loss_ce_4: 0.5011  m2_loss_mask_4: 0.1705  m2_loss_dice_4: 1.274  m2_loss_ce_5: 0.4695  m2_loss_mask_5: 0.1719  m2_loss_dice_5: 1.286  m2_loss_ce_6: 0.4742  m2_loss_mask_6: 0.1729  m2_loss_dice_6: 1.25  m2_loss_ce_7: 0.4758  m2_loss_mask_7: 0.1685  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.4599  m2_loss_mask_8: 0.1706  m2_loss_dice_8: 1.288    time: 1.4654  last_time: 1.4738  data_time: 0.0589  last_data_time: 0.1047   lr: 0.0001  max_mem: 34128M
[10/05 12:06:57] d2.utils.events INFO:  eta: 0:19:27  iter: 199  total_loss: 38.85  m1_loss_ce: 0.4766  m1_loss_mask: 0.1673  m1_loss_dice: 1.18  m1_loss_ce_0: 0.5621  m1_loss_mask_0: 0.1923  m1_loss_dice_0: 1.393  m1_loss_ce_1: 0.6508  m1_loss_mask_1: 0.1805  m1_loss_dice_1: 1.311  m1_loss_ce_2: 0.5879  m1_loss_mask_2: 0.1681  m1_loss_dice_2: 1.283  m1_loss_ce_3: 0.5456  m1_loss_mask_3: 0.1709  m1_loss_dice_3: 1.218  m1_loss_ce_4: 0.4847  m1_loss_mask_4: 0.1698  m1_loss_dice_4: 1.206  m1_loss_ce_5: 0.4662  m1_loss_mask_5: 0.1678  m1_loss_dice_5: 1.237  m1_loss_ce_6: 0.5233  m1_loss_mask_6: 0.1678  m1_loss_dice_6: 1.173  m1_loss_ce_7: 0.47  m1_loss_mask_7: 0.1638  m1_loss_dice_7: 1.177  m1_loss_ce_8: 0.4675  m1_loss_mask_8: 0.1656  m1_loss_dice_8: 1.2  m2_loss_ce: 0.4475  m2_loss_mask: 0.1679  m2_loss_dice: 1.211  m2_loss_ce_0: 0.5964  m2_loss_mask_0: 0.1934  m2_loss_dice_0: 1.423  m2_loss_ce_1: 0.6363  m2_loss_mask_1: 0.1773  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.5642  m2_loss_mask_2: 0.1675  m2_loss_dice_2: 1.266  m2_loss_ce_3: 0.5309  m2_loss_mask_3: 0.173  m2_loss_dice_3: 1.195  m2_loss_ce_4: 0.5042  m2_loss_mask_4: 0.1708  m2_loss_dice_4: 1.199  m2_loss_ce_5: 0.4733  m2_loss_mask_5: 0.1635  m2_loss_dice_5: 1.211  m2_loss_ce_6: 0.4752  m2_loss_mask_6: 0.1664  m2_loss_dice_6: 1.192  m2_loss_ce_7: 0.4402  m2_loss_mask_7: 0.168  m2_loss_dice_7: 1.21  m2_loss_ce_8: 0.4569  m2_loss_mask_8: 0.1665  m2_loss_dice_8: 1.243    time: 1.4623  last_time: 1.3906  data_time: 0.0494  last_data_time: 0.0501   lr: 0.0001  max_mem: 34128M
[10/05 12:07:26] d2.utils.events INFO:  eta: 0:18:57  iter: 219  total_loss: 39.46  m1_loss_ce: 0.4459  m1_loss_mask: 0.1682  m1_loss_dice: 1.283  m1_loss_ce_0: 0.5275  m1_loss_mask_0: 0.1973  m1_loss_dice_0: 1.413  m1_loss_ce_1: 0.583  m1_loss_mask_1: 0.1809  m1_loss_dice_1: 1.368  m1_loss_ce_2: 0.5438  m1_loss_mask_2: 0.1749  m1_loss_dice_2: 1.299  m1_loss_ce_3: 0.4996  m1_loss_mask_3: 0.1709  m1_loss_dice_3: 1.316  m1_loss_ce_4: 0.5068  m1_loss_mask_4: 0.1693  m1_loss_dice_4: 1.31  m1_loss_ce_5: 0.4744  m1_loss_mask_5: 0.1685  m1_loss_dice_5: 1.288  m1_loss_ce_6: 0.4424  m1_loss_mask_6: 0.1665  m1_loss_dice_6: 1.238  m1_loss_ce_7: 0.4807  m1_loss_mask_7: 0.1667  m1_loss_dice_7: 1.215  m1_loss_ce_8: 0.45  m1_loss_mask_8: 0.1693  m1_loss_dice_8: 1.274  m2_loss_ce: 0.4514  m2_loss_mask: 0.1648  m2_loss_dice: 1.292  m2_loss_ce_0: 0.5959  m2_loss_mask_0: 0.201  m2_loss_dice_0: 1.414  m2_loss_ce_1: 0.6295  m2_loss_mask_1: 0.1829  m2_loss_dice_1: 1.369  m2_loss_ce_2: 0.5451  m2_loss_mask_2: 0.1712  m2_loss_dice_2: 1.328  m2_loss_ce_3: 0.5385  m2_loss_mask_3: 0.167  m2_loss_dice_3: 1.315  m2_loss_ce_4: 0.5204  m2_loss_mask_4: 0.1652  m2_loss_dice_4: 1.259  m2_loss_ce_5: 0.4809  m2_loss_mask_5: 0.1653  m2_loss_dice_5: 1.282  m2_loss_ce_6: 0.4696  m2_loss_mask_6: 0.1675  m2_loss_dice_6: 1.312  m2_loss_ce_7: 0.4525  m2_loss_mask_7: 0.1663  m2_loss_dice_7: 1.257  m2_loss_ce_8: 0.4829  m2_loss_mask_8: 0.164  m2_loss_dice_8: 1.272    time: 1.4622  last_time: 1.4215  data_time: 0.0543  last_data_time: 0.0543   lr: 0.0001  max_mem: 34128M
[10/05 12:07:55] d2.utils.events INFO:  eta: 0:18:28  iter: 239  total_loss: 37.44  m1_loss_ce: 0.4177  m1_loss_mask: 0.1739  m1_loss_dice: 1.184  m1_loss_ce_0: 0.5477  m1_loss_mask_0: 0.2041  m1_loss_dice_0: 1.387  m1_loss_ce_1: 0.6031  m1_loss_mask_1: 0.189  m1_loss_dice_1: 1.294  m1_loss_ce_2: 0.5272  m1_loss_mask_2: 0.1792  m1_loss_dice_2: 1.235  m1_loss_ce_3: 0.4941  m1_loss_mask_3: 0.1765  m1_loss_dice_3: 1.214  m1_loss_ce_4: 0.4504  m1_loss_mask_4: 0.1766  m1_loss_dice_4: 1.171  m1_loss_ce_5: 0.4645  m1_loss_mask_5: 0.1732  m1_loss_dice_5: 1.186  m1_loss_ce_6: 0.4551  m1_loss_mask_6: 0.1721  m1_loss_dice_6: 1.166  m1_loss_ce_7: 0.4551  m1_loss_mask_7: 0.1733  m1_loss_dice_7: 1.186  m1_loss_ce_8: 0.4479  m1_loss_mask_8: 0.1719  m1_loss_dice_8: 1.189  m2_loss_ce: 0.4136  m2_loss_mask: 0.1706  m2_loss_dice: 1.164  m2_loss_ce_0: 0.571  m2_loss_mask_0: 0.1984  m2_loss_dice_0: 1.373  m2_loss_ce_1: 0.6227  m2_loss_mask_1: 0.1847  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.5441  m2_loss_mask_2: 0.1762  m2_loss_dice_2: 1.235  m2_loss_ce_3: 0.4778  m2_loss_mask_3: 0.174  m2_loss_dice_3: 1.211  m2_loss_ce_4: 0.4773  m2_loss_mask_4: 0.1682  m2_loss_dice_4: 1.198  m2_loss_ce_5: 0.4531  m2_loss_mask_5: 0.169  m2_loss_dice_5: 1.18  m2_loss_ce_6: 0.4484  m2_loss_mask_6: 0.1716  m2_loss_dice_6: 1.186  m2_loss_ce_7: 0.431  m2_loss_mask_7: 0.1702  m2_loss_dice_7: 1.205  m2_loss_ce_8: 0.4414  m2_loss_mask_8: 0.1699  m2_loss_dice_8: 1.192    time: 1.4607  last_time: 1.5170  data_time: 0.0506  last_data_time: 0.0580   lr: 0.0001  max_mem: 34128M
[10/05 12:08:25] d2.utils.events INFO:  eta: 0:17:59  iter: 259  total_loss: 41.92  m1_loss_ce: 0.4881  m1_loss_mask: 0.1635  m1_loss_dice: 1.33  m1_loss_ce_0: 0.6016  m1_loss_mask_0: 0.1903  m1_loss_dice_0: 1.459  m1_loss_ce_1: 0.626  m1_loss_mask_1: 0.1778  m1_loss_dice_1: 1.434  m1_loss_ce_2: 0.587  m1_loss_mask_2: 0.168  m1_loss_dice_2: 1.322  m1_loss_ce_3: 0.5258  m1_loss_mask_3: 0.172  m1_loss_dice_3: 1.346  m1_loss_ce_4: 0.487  m1_loss_mask_4: 0.1619  m1_loss_dice_4: 1.349  m1_loss_ce_5: 0.4978  m1_loss_mask_5: 0.1642  m1_loss_dice_5: 1.313  m1_loss_ce_6: 0.4883  m1_loss_mask_6: 0.1638  m1_loss_dice_6: 1.301  m1_loss_ce_7: 0.5031  m1_loss_mask_7: 0.1655  m1_loss_dice_7: 1.322  m1_loss_ce_8: 0.4955  m1_loss_mask_8: 0.1637  m1_loss_dice_8: 1.311  m2_loss_ce: 0.467  m2_loss_mask: 0.1651  m2_loss_dice: 1.275  m2_loss_ce_0: 0.617  m2_loss_mask_0: 0.1943  m2_loss_dice_0: 1.507  m2_loss_ce_1: 0.704  m2_loss_mask_1: 0.1873  m2_loss_dice_1: 1.448  m2_loss_ce_2: 0.6081  m2_loss_mask_2: 0.1744  m2_loss_dice_2: 1.371  m2_loss_ce_3: 0.5538  m2_loss_mask_3: 0.1742  m2_loss_dice_3: 1.348  m2_loss_ce_4: 0.5563  m2_loss_mask_4: 0.1674  m2_loss_dice_4: 1.318  m2_loss_ce_5: 0.5342  m2_loss_mask_5: 0.1649  m2_loss_dice_5: 1.317  m2_loss_ce_6: 0.5092  m2_loss_mask_6: 0.1677  m2_loss_dice_6: 1.305  m2_loss_ce_7: 0.5077  m2_loss_mask_7: 0.1636  m2_loss_dice_7: 1.301  m2_loss_ce_8: 0.4861  m2_loss_mask_8: 0.1638  m2_loss_dice_8: 1.315    time: 1.4606  last_time: 1.4170  data_time: 0.0581  last_data_time: 0.0581   lr: 0.0001  max_mem: 34128M
[10/05 12:08:54] d2.utils.events INFO:  eta: 0:17:30  iter: 279  total_loss: 41.84  m1_loss_ce: 0.5336  m1_loss_mask: 0.1631  m1_loss_dice: 1.273  m1_loss_ce_0: 0.5807  m1_loss_mask_0: 0.1938  m1_loss_dice_0: 1.487  m1_loss_ce_1: 0.6688  m1_loss_mask_1: 0.179  m1_loss_dice_1: 1.421  m1_loss_ce_2: 0.6119  m1_loss_mask_2: 0.1655  m1_loss_dice_2: 1.321  m1_loss_ce_3: 0.5706  m1_loss_mask_3: 0.1666  m1_loss_dice_3: 1.266  m1_loss_ce_4: 0.5669  m1_loss_mask_4: 0.1623  m1_loss_dice_4: 1.285  m1_loss_ce_5: 0.5396  m1_loss_mask_5: 0.1612  m1_loss_dice_5: 1.271  m1_loss_ce_6: 0.5564  m1_loss_mask_6: 0.1622  m1_loss_dice_6: 1.267  m1_loss_ce_7: 0.5553  m1_loss_mask_7: 0.1631  m1_loss_dice_7: 1.255  m1_loss_ce_8: 0.5476  m1_loss_mask_8: 0.1618  m1_loss_dice_8: 1.275  m2_loss_ce: 0.4981  m2_loss_mask: 0.1611  m2_loss_dice: 1.278  m2_loss_ce_0: 0.6487  m2_loss_mask_0: 0.1961  m2_loss_dice_0: 1.527  m2_loss_ce_1: 0.6761  m2_loss_mask_1: 0.1802  m2_loss_dice_1: 1.414  m2_loss_ce_2: 0.6208  m2_loss_mask_2: 0.1681  m2_loss_dice_2: 1.321  m2_loss_ce_3: 0.5603  m2_loss_mask_3: 0.1685  m2_loss_dice_3: 1.34  m2_loss_ce_4: 0.572  m2_loss_mask_4: 0.1645  m2_loss_dice_4: 1.286  m2_loss_ce_5: 0.548  m2_loss_mask_5: 0.1602  m2_loss_dice_5: 1.297  m2_loss_ce_6: 0.5234  m2_loss_mask_6: 0.1615  m2_loss_dice_6: 1.27  m2_loss_ce_7: 0.5176  m2_loss_mask_7: 0.1637  m2_loss_dice_7: 1.271  m2_loss_ce_8: 0.5037  m2_loss_mask_8: 0.1602  m2_loss_dice_8: 1.268    time: 1.4604  last_time: 1.4757  data_time: 0.0595  last_data_time: 0.0463   lr: 0.0001  max_mem: 34128M
[10/05 12:09:23] d2.utils.events INFO:  eta: 0:16:59  iter: 299  total_loss: 38.1  m1_loss_ce: 0.4332  m1_loss_mask: 0.1898  m1_loss_dice: 1.133  m1_loss_ce_0: 0.5542  m1_loss_mask_0: 0.2043  m1_loss_dice_0: 1.3  m1_loss_ce_1: 0.5945  m1_loss_mask_1: 0.1982  m1_loss_dice_1: 1.285  m1_loss_ce_2: 0.5898  m1_loss_mask_2: 0.1897  m1_loss_dice_2: 1.219  m1_loss_ce_3: 0.5061  m1_loss_mask_3: 0.1913  m1_loss_dice_3: 1.147  m1_loss_ce_4: 0.4626  m1_loss_mask_4: 0.1864  m1_loss_dice_4: 1.155  m1_loss_ce_5: 0.4887  m1_loss_mask_5: 0.1892  m1_loss_dice_5: 1.122  m1_loss_ce_6: 0.467  m1_loss_mask_6: 0.1859  m1_loss_dice_6: 1.114  m1_loss_ce_7: 0.4429  m1_loss_mask_7: 0.1886  m1_loss_dice_7: 1.132  m1_loss_ce_8: 0.4502  m1_loss_mask_8: 0.1895  m1_loss_dice_8: 1.126  m2_loss_ce: 0.4348  m2_loss_mask: 0.1813  m2_loss_dice: 1.173  m2_loss_ce_0: 0.5898  m2_loss_mask_0: 0.2173  m2_loss_dice_0: 1.36  m2_loss_ce_1: 0.6313  m2_loss_mask_1: 0.1994  m2_loss_dice_1: 1.283  m2_loss_ce_2: 0.5694  m2_loss_mask_2: 0.1884  m2_loss_dice_2: 1.271  m2_loss_ce_3: 0.531  m2_loss_mask_3: 0.1862  m2_loss_dice_3: 1.209  m2_loss_ce_4: 0.5017  m2_loss_mask_4: 0.1804  m2_loss_dice_4: 1.203  m2_loss_ce_5: 0.4849  m2_loss_mask_5: 0.1776  m2_loss_dice_5: 1.211  m2_loss_ce_6: 0.4582  m2_loss_mask_6: 0.1818  m2_loss_dice_6: 1.171  m2_loss_ce_7: 0.4733  m2_loss_mask_7: 0.1799  m2_loss_dice_7: 1.156  m2_loss_ce_8: 0.4357  m2_loss_mask_8: 0.1791  m2_loss_dice_8: 1.182    time: 1.4586  last_time: 1.4260  data_time: 0.0509  last_data_time: 0.0391   lr: 0.0001  max_mem: 34128M
[10/05 12:09:52] d2.utils.events INFO:  eta: 0:16:28  iter: 319  total_loss: 40.47  m1_loss_ce: 0.4519  m1_loss_mask: 0.1615  m1_loss_dice: 1.289  m1_loss_ce_0: 0.5848  m1_loss_mask_0: 0.1949  m1_loss_dice_0: 1.467  m1_loss_ce_1: 0.6224  m1_loss_mask_1: 0.1852  m1_loss_dice_1: 1.383  m1_loss_ce_2: 0.6037  m1_loss_mask_2: 0.1686  m1_loss_dice_2: 1.305  m1_loss_ce_3: 0.5505  m1_loss_mask_3: 0.1648  m1_loss_dice_3: 1.262  m1_loss_ce_4: 0.499  m1_loss_mask_4: 0.1612  m1_loss_dice_4: 1.311  m1_loss_ce_5: 0.5149  m1_loss_mask_5: 0.1604  m1_loss_dice_5: 1.259  m1_loss_ce_6: 0.4703  m1_loss_mask_6: 0.1634  m1_loss_dice_6: 1.243  m1_loss_ce_7: 0.4853  m1_loss_mask_7: 0.1628  m1_loss_dice_7: 1.265  m1_loss_ce_8: 0.4865  m1_loss_mask_8: 0.1633  m1_loss_dice_8: 1.291  m2_loss_ce: 0.4733  m2_loss_mask: 0.1543  m2_loss_dice: 1.312  m2_loss_ce_0: 0.5943  m2_loss_mask_0: 0.191  m2_loss_dice_0: 1.522  m2_loss_ce_1: 0.6529  m2_loss_mask_1: 0.1808  m2_loss_dice_1: 1.442  m2_loss_ce_2: 0.5966  m2_loss_mask_2: 0.1617  m2_loss_dice_2: 1.359  m2_loss_ce_3: 0.5243  m2_loss_mask_3: 0.1604  m2_loss_dice_3: 1.317  m2_loss_ce_4: 0.5252  m2_loss_mask_4: 0.1564  m2_loss_dice_4: 1.31  m2_loss_ce_5: 0.5084  m2_loss_mask_5: 0.1566  m2_loss_dice_5: 1.295  m2_loss_ce_6: 0.4876  m2_loss_mask_6: 0.1559  m2_loss_dice_6: 1.257  m2_loss_ce_7: 0.4855  m2_loss_mask_7: 0.1554  m2_loss_dice_7: 1.302  m2_loss_ce_8: 0.468  m2_loss_mask_8: 0.1529  m2_loss_dice_8: 1.31    time: 1.4575  last_time: 1.4400  data_time: 0.0521  last_data_time: 0.0543   lr: 0.0001  max_mem: 34128M
[10/05 12:10:22] d2.utils.events INFO:  eta: 0:16:02  iter: 339  total_loss: 41.3  m1_loss_ce: 0.4634  m1_loss_mask: 0.1599  m1_loss_dice: 1.268  m1_loss_ce_0: 0.579  m1_loss_mask_0: 0.1836  m1_loss_dice_0: 1.477  m1_loss_ce_1: 0.6218  m1_loss_mask_1: 0.1748  m1_loss_dice_1: 1.418  m1_loss_ce_2: 0.5857  m1_loss_mask_2: 0.1598  m1_loss_dice_2: 1.354  m1_loss_ce_3: 0.542  m1_loss_mask_3: 0.1602  m1_loss_dice_3: 1.283  m1_loss_ce_4: 0.5207  m1_loss_mask_4: 0.1563  m1_loss_dice_4: 1.303  m1_loss_ce_5: 0.5178  m1_loss_mask_5: 0.1561  m1_loss_dice_5: 1.267  m1_loss_ce_6: 0.4771  m1_loss_mask_6: 0.1595  m1_loss_dice_6: 1.267  m1_loss_ce_7: 0.4596  m1_loss_mask_7: 0.1583  m1_loss_dice_7: 1.291  m1_loss_ce_8: 0.4497  m1_loss_mask_8: 0.1607  m1_loss_dice_8: 1.249  m2_loss_ce: 0.4776  m2_loss_mask: 0.1605  m2_loss_dice: 1.258  m2_loss_ce_0: 0.6217  m2_loss_mask_0: 0.1921  m2_loss_dice_0: 1.511  m2_loss_ce_1: 0.6822  m2_loss_mask_1: 0.1798  m2_loss_dice_1: 1.399  m2_loss_ce_2: 0.5921  m2_loss_mask_2: 0.1628  m2_loss_dice_2: 1.318  m2_loss_ce_3: 0.5473  m2_loss_mask_3: 0.1624  m2_loss_dice_3: 1.286  m2_loss_ce_4: 0.509  m2_loss_mask_4: 0.1622  m2_loss_dice_4: 1.269  m2_loss_ce_5: 0.5129  m2_loss_mask_5: 0.1633  m2_loss_dice_5: 1.261  m2_loss_ce_6: 0.4779  m2_loss_mask_6: 0.1604  m2_loss_dice_6: 1.271  m2_loss_ce_7: 0.4966  m2_loss_mask_7: 0.1602  m2_loss_dice_7: 1.282  m2_loss_ce_8: 0.4405  m2_loss_mask_8: 0.1605  m2_loss_dice_8: 1.289    time: 1.4597  last_time: 1.5999  data_time: 0.0538  last_data_time: 0.0940   lr: 0.0001  max_mem: 34128M
[10/05 12:10:51] d2.utils.events INFO:  eta: 0:15:33  iter: 359  total_loss: 38.31  m1_loss_ce: 0.4628  m1_loss_mask: 0.1682  m1_loss_dice: 1.159  m1_loss_ce_0: 0.558  m1_loss_mask_0: 0.1975  m1_loss_dice_0: 1.368  m1_loss_ce_1: 0.6624  m1_loss_mask_1: 0.1912  m1_loss_dice_1: 1.317  m1_loss_ce_2: 0.5608  m1_loss_mask_2: 0.1714  m1_loss_dice_2: 1.26  m1_loss_ce_3: 0.5188  m1_loss_mask_3: 0.174  m1_loss_dice_3: 1.187  m1_loss_ce_4: 0.4932  m1_loss_mask_4: 0.1706  m1_loss_dice_4: 1.215  m1_loss_ce_5: 0.506  m1_loss_mask_5: 0.1712  m1_loss_dice_5: 1.185  m1_loss_ce_6: 0.4556  m1_loss_mask_6: 0.1704  m1_loss_dice_6: 1.173  m1_loss_ce_7: 0.4894  m1_loss_mask_7: 0.1697  m1_loss_dice_7: 1.168  m1_loss_ce_8: 0.4763  m1_loss_mask_8: 0.1694  m1_loss_dice_8: 1.192  m2_loss_ce: 0.5081  m2_loss_mask: 0.1714  m2_loss_dice: 1.178  m2_loss_ce_0: 0.6018  m2_loss_mask_0: 0.2005  m2_loss_dice_0: 1.359  m2_loss_ce_1: 0.6676  m2_loss_mask_1: 0.191  m2_loss_dice_1: 1.32  m2_loss_ce_2: 0.6051  m2_loss_mask_2: 0.1784  m2_loss_dice_2: 1.22  m2_loss_ce_3: 0.5433  m2_loss_mask_3: 0.1741  m2_loss_dice_3: 1.214  m2_loss_ce_4: 0.5162  m2_loss_mask_4: 0.1719  m2_loss_dice_4: 1.181  m2_loss_ce_5: 0.5111  m2_loss_mask_5: 0.1718  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.5012  m2_loss_mask_6: 0.1725  m2_loss_dice_6: 1.167  m2_loss_ce_7: 0.4906  m2_loss_mask_7: 0.1735  m2_loss_dice_7: 1.151  m2_loss_ce_8: 0.5029  m2_loss_mask_8: 0.1718  m2_loss_dice_8: 1.187    time: 1.4600  last_time: 1.4804  data_time: 0.0577  last_data_time: 0.0491   lr: 0.0001  max_mem: 34128M
[10/05 12:11:22] d2.utils.events INFO:  eta: 0:15:05  iter: 379  total_loss: 41.72  m1_loss_ce: 0.5126  m1_loss_mask: 0.1567  m1_loss_dice: 1.298  m1_loss_ce_0: 0.6177  m1_loss_mask_0: 0.1824  m1_loss_dice_0: 1.573  m1_loss_ce_1: 0.6983  m1_loss_mask_1: 0.168  m1_loss_dice_1: 1.476  m1_loss_ce_2: 0.6188  m1_loss_mask_2: 0.1574  m1_loss_dice_2: 1.349  m1_loss_ce_3: 0.5537  m1_loss_mask_3: 0.16  m1_loss_dice_3: 1.36  m1_loss_ce_4: 0.5506  m1_loss_mask_4: 0.1599  m1_loss_dice_4: 1.311  m1_loss_ce_5: 0.5184  m1_loss_mask_5: 0.1562  m1_loss_dice_5: 1.305  m1_loss_ce_6: 0.5137  m1_loss_mask_6: 0.1575  m1_loss_dice_6: 1.314  m1_loss_ce_7: 0.4833  m1_loss_mask_7: 0.1539  m1_loss_dice_7: 1.29  m1_loss_ce_8: 0.5088  m1_loss_mask_8: 0.1554  m1_loss_dice_8: 1.319  m2_loss_ce: 0.5037  m2_loss_mask: 0.1529  m2_loss_dice: 1.303  m2_loss_ce_0: 0.7082  m2_loss_mask_0: 0.1806  m2_loss_dice_0: 1.538  m2_loss_ce_1: 0.7091  m2_loss_mask_1: 0.1672  m2_loss_dice_1: 1.452  m2_loss_ce_2: 0.5989  m2_loss_mask_2: 0.1582  m2_loss_dice_2: 1.408  m2_loss_ce_3: 0.5426  m2_loss_mask_3: 0.157  m2_loss_dice_3: 1.336  m2_loss_ce_4: 0.5507  m2_loss_mask_4: 0.1539  m2_loss_dice_4: 1.334  m2_loss_ce_5: 0.5423  m2_loss_mask_5: 0.1534  m2_loss_dice_5: 1.34  m2_loss_ce_6: 0.5404  m2_loss_mask_6: 0.1534  m2_loss_dice_6: 1.294  m2_loss_ce_7: 0.5206  m2_loss_mask_7: 0.1533  m2_loss_dice_7: 1.34  m2_loss_ce_8: 0.4886  m2_loss_mask_8: 0.1524  m2_loss_dice_8: 1.302    time: 1.4641  last_time: 1.5675  data_time: 0.0605  last_data_time: 0.0552   lr: 0.0001  max_mem: 34442M
[10/05 12:11:52] d2.utils.events INFO:  eta: 0:14:37  iter: 399  total_loss: 39.18  m1_loss_ce: 0.4146  m1_loss_mask: 0.1441  m1_loss_dice: 1.179  m1_loss_ce_0: 0.5687  m1_loss_mask_0: 0.1818  m1_loss_dice_0: 1.43  m1_loss_ce_1: 0.6614  m1_loss_mask_1: 0.1566  m1_loss_dice_1: 1.32  m1_loss_ce_2: 0.5683  m1_loss_mask_2: 0.1541  m1_loss_dice_2: 1.268  m1_loss_ce_3: 0.5014  m1_loss_mask_3: 0.1513  m1_loss_dice_3: 1.192  m1_loss_ce_4: 0.4992  m1_loss_mask_4: 0.15  m1_loss_dice_4: 1.21  m1_loss_ce_5: 0.5044  m1_loss_mask_5: 0.1498  m1_loss_dice_5: 1.182  m1_loss_ce_6: 0.4701  m1_loss_mask_6: 0.1506  m1_loss_dice_6: 1.202  m1_loss_ce_7: 0.4433  m1_loss_mask_7: 0.151  m1_loss_dice_7: 1.182  m1_loss_ce_8: 0.4383  m1_loss_mask_8: 0.1518  m1_loss_dice_8: 1.185  m2_loss_ce: 0.4944  m2_loss_mask: 0.1483  m2_loss_dice: 1.216  m2_loss_ce_0: 0.6193  m2_loss_mask_0: 0.186  m2_loss_dice_0: 1.453  m2_loss_ce_1: 0.7097  m2_loss_mask_1: 0.1673  m2_loss_dice_1: 1.379  m2_loss_ce_2: 0.6426  m2_loss_mask_2: 0.1548  m2_loss_dice_2: 1.302  m2_loss_ce_3: 0.5958  m2_loss_mask_3: 0.1532  m2_loss_dice_3: 1.212  m2_loss_ce_4: 0.5427  m2_loss_mask_4: 0.1545  m2_loss_dice_4: 1.253  m2_loss_ce_5: 0.5378  m2_loss_mask_5: 0.1504  m2_loss_dice_5: 1.229  m2_loss_ce_6: 0.5307  m2_loss_mask_6: 0.1519  m2_loss_dice_6: 1.229  m2_loss_ce_7: 0.5264  m2_loss_mask_7: 0.1493  m2_loss_dice_7: 1.182  m2_loss_ce_8: 0.4932  m2_loss_mask_8: 0.1493  m2_loss_dice_8: 1.212    time: 1.4664  last_time: 1.5007  data_time: 0.0714  last_data_time: 0.0516   lr: 0.0001  max_mem: 34442M
[10/05 12:12:22] d2.utils.events INFO:  eta: 0:14:08  iter: 419  total_loss: 40.12  m1_loss_ce: 0.4817  m1_loss_mask: 0.1629  m1_loss_dice: 1.198  m1_loss_ce_0: 0.621  m1_loss_mask_0: 0.199  m1_loss_dice_0: 1.441  m1_loss_ce_1: 0.662  m1_loss_mask_1: 0.1831  m1_loss_dice_1: 1.34  m1_loss_ce_2: 0.5848  m1_loss_mask_2: 0.1765  m1_loss_dice_2: 1.303  m1_loss_ce_3: 0.5257  m1_loss_mask_3: 0.1727  m1_loss_dice_3: 1.23  m1_loss_ce_4: 0.4949  m1_loss_mask_4: 0.175  m1_loss_dice_4: 1.252  m1_loss_ce_5: 0.5221  m1_loss_mask_5: 0.171  m1_loss_dice_5: 1.215  m1_loss_ce_6: 0.4751  m1_loss_mask_6: 0.168  m1_loss_dice_6: 1.224  m1_loss_ce_7: 0.4808  m1_loss_mask_7: 0.1689  m1_loss_dice_7: 1.236  m1_loss_ce_8: 0.47  m1_loss_mask_8: 0.1636  m1_loss_dice_8: 1.223  m2_loss_ce: 0.4489  m2_loss_mask: 0.1723  m2_loss_dice: 1.266  m2_loss_ce_0: 0.6167  m2_loss_mask_0: 0.2073  m2_loss_dice_0: 1.448  m2_loss_ce_1: 0.682  m2_loss_mask_1: 0.1936  m2_loss_dice_1: 1.397  m2_loss_ce_2: 0.5823  m2_loss_mask_2: 0.181  m2_loss_dice_2: 1.295  m2_loss_ce_3: 0.5303  m2_loss_mask_3: 0.1798  m2_loss_dice_3: 1.291  m2_loss_ce_4: 0.5343  m2_loss_mask_4: 0.1737  m2_loss_dice_4: 1.278  m2_loss_ce_5: 0.4761  m2_loss_mask_5: 0.172  m2_loss_dice_5: 1.275  m2_loss_ce_6: 0.488  m2_loss_mask_6: 0.1737  m2_loss_dice_6: 1.296  m2_loss_ce_7: 0.4815  m2_loss_mask_7: 0.1748  m2_loss_dice_7: 1.262  m2_loss_ce_8: 0.4575  m2_loss_mask_8: 0.1718  m2_loss_dice_8: 1.251    time: 1.4673  last_time: 1.4927  data_time: 0.0638  last_data_time: 0.0789   lr: 0.0001  max_mem: 34442M
[10/05 12:12:53] d2.utils.events INFO:  eta: 0:13:40  iter: 439  total_loss: 39.25  m1_loss_ce: 0.4515  m1_loss_mask: 0.1679  m1_loss_dice: 1.195  m1_loss_ce_0: 0.5612  m1_loss_mask_0: 0.1872  m1_loss_dice_0: 1.407  m1_loss_ce_1: 0.6398  m1_loss_mask_1: 0.1803  m1_loss_dice_1: 1.354  m1_loss_ce_2: 0.5462  m1_loss_mask_2: 0.1685  m1_loss_dice_2: 1.303  m1_loss_ce_3: 0.5009  m1_loss_mask_3: 0.1691  m1_loss_dice_3: 1.26  m1_loss_ce_4: 0.4946  m1_loss_mask_4: 0.1655  m1_loss_dice_4: 1.253  m1_loss_ce_5: 0.4659  m1_loss_mask_5: 0.1675  m1_loss_dice_5: 1.251  m1_loss_ce_6: 0.4637  m1_loss_mask_6: 0.1672  m1_loss_dice_6: 1.224  m1_loss_ce_7: 0.4472  m1_loss_mask_7: 0.1664  m1_loss_dice_7: 1.207  m1_loss_ce_8: 0.4451  m1_loss_mask_8: 0.167  m1_loss_dice_8: 1.202  m2_loss_ce: 0.5119  m2_loss_mask: 0.161  m2_loss_dice: 1.269  m2_loss_ce_0: 0.6228  m2_loss_mask_0: 0.1887  m2_loss_dice_0: 1.483  m2_loss_ce_1: 0.6962  m2_loss_mask_1: 0.1789  m2_loss_dice_1: 1.361  m2_loss_ce_2: 0.5958  m2_loss_mask_2: 0.1649  m2_loss_dice_2: 1.333  m2_loss_ce_3: 0.5513  m2_loss_mask_3: 0.167  m2_loss_dice_3: 1.29  m2_loss_ce_4: 0.5261  m2_loss_mask_4: 0.1632  m2_loss_dice_4: 1.29  m2_loss_ce_5: 0.5027  m2_loss_mask_5: 0.1622  m2_loss_dice_5: 1.252  m2_loss_ce_6: 0.5192  m2_loss_mask_6: 0.1631  m2_loss_dice_6: 1.247  m2_loss_ce_7: 0.5154  m2_loss_mask_7: 0.1624  m2_loss_dice_7: 1.267  m2_loss_ce_8: 0.4783  m2_loss_mask_8: 0.1616  m2_loss_dice_8: 1.239    time: 1.4694  last_time: 1.4158  data_time: 0.0821  last_data_time: 0.0434   lr: 0.0001  max_mem: 34442M
[10/05 12:13:23] d2.utils.events INFO:  eta: 0:13:12  iter: 459  total_loss: 38.09  m1_loss_ce: 0.4326  m1_loss_mask: 0.1704  m1_loss_dice: 1.179  m1_loss_ce_0: 0.5536  m1_loss_mask_0: 0.2035  m1_loss_dice_0: 1.384  m1_loss_ce_1: 0.5958  m1_loss_mask_1: 0.1831  m1_loss_dice_1: 1.269  m1_loss_ce_2: 0.5622  m1_loss_mask_2: 0.1786  m1_loss_dice_2: 1.235  m1_loss_ce_3: 0.4936  m1_loss_mask_3: 0.1809  m1_loss_dice_3: 1.212  m1_loss_ce_4: 0.5027  m1_loss_mask_4: 0.1757  m1_loss_dice_4: 1.209  m1_loss_ce_5: 0.4994  m1_loss_mask_5: 0.1706  m1_loss_dice_5: 1.172  m1_loss_ce_6: 0.4844  m1_loss_mask_6: 0.1728  m1_loss_dice_6: 1.188  m1_loss_ce_7: 0.4426  m1_loss_mask_7: 0.1731  m1_loss_dice_7: 1.184  m1_loss_ce_8: 0.4644  m1_loss_mask_8: 0.1713  m1_loss_dice_8: 1.214  m2_loss_ce: 0.4399  m2_loss_mask: 0.1746  m2_loss_dice: 1.219  m2_loss_ce_0: 0.5793  m2_loss_mask_0: 0.2051  m2_loss_dice_0: 1.413  m2_loss_ce_1: 0.6548  m2_loss_mask_1: 0.1918  m2_loss_dice_1: 1.322  m2_loss_ce_2: 0.5895  m2_loss_mask_2: 0.1762  m2_loss_dice_2: 1.271  m2_loss_ce_3: 0.5254  m2_loss_mask_3: 0.1766  m2_loss_dice_3: 1.22  m2_loss_ce_4: 0.5  m2_loss_mask_4: 0.1753  m2_loss_dice_4: 1.213  m2_loss_ce_5: 0.5075  m2_loss_mask_5: 0.1736  m2_loss_dice_5: 1.189  m2_loss_ce_6: 0.4726  m2_loss_mask_6: 0.1752  m2_loss_dice_6: 1.177  m2_loss_ce_7: 0.4802  m2_loss_mask_7: 0.1771  m2_loss_dice_7: 1.186  m2_loss_ce_8: 0.4816  m2_loss_mask_8: 0.173  m2_loss_dice_8: 1.222    time: 1.4707  last_time: 1.5574  data_time: 0.0612  last_data_time: 0.1038   lr: 0.0001  max_mem: 34442M
[10/05 12:13:53] d2.utils.events INFO:  eta: 0:12:44  iter: 479  total_loss: 41.39  m1_loss_ce: 0.5146  m1_loss_mask: 0.1759  m1_loss_dice: 1.204  m1_loss_ce_0: 0.5923  m1_loss_mask_0: 0.1994  m1_loss_dice_0: 1.371  m1_loss_ce_1: 0.6728  m1_loss_mask_1: 0.1871  m1_loss_dice_1: 1.311  m1_loss_ce_2: 0.6038  m1_loss_mask_2: 0.1804  m1_loss_dice_2: 1.291  m1_loss_ce_3: 0.545  m1_loss_mask_3: 0.176  m1_loss_dice_3: 1.232  m1_loss_ce_4: 0.539  m1_loss_mask_4: 0.179  m1_loss_dice_4: 1.227  m1_loss_ce_5: 0.5022  m1_loss_mask_5: 0.1795  m1_loss_dice_5: 1.221  m1_loss_ce_6: 0.4896  m1_loss_mask_6: 0.1786  m1_loss_dice_6: 1.201  m1_loss_ce_7: 0.5118  m1_loss_mask_7: 0.1783  m1_loss_dice_7: 1.203  m1_loss_ce_8: 0.5136  m1_loss_mask_8: 0.1776  m1_loss_dice_8: 1.225  m2_loss_ce: 0.5193  m2_loss_mask: 0.176  m2_loss_dice: 1.288  m2_loss_ce_0: 0.6796  m2_loss_mask_0: 0.204  m2_loss_dice_0: 1.455  m2_loss_ce_1: 0.7211  m2_loss_mask_1: 0.1964  m2_loss_dice_1: 1.379  m2_loss_ce_2: 0.6356  m2_loss_mask_2: 0.1787  m2_loss_dice_2: 1.32  m2_loss_ce_3: 0.5792  m2_loss_mask_3: 0.1797  m2_loss_dice_3: 1.304  m2_loss_ce_4: 0.5473  m2_loss_mask_4: 0.1751  m2_loss_dice_4: 1.26  m2_loss_ce_5: 0.5677  m2_loss_mask_5: 0.174  m2_loss_dice_5: 1.238  m2_loss_ce_6: 0.5281  m2_loss_mask_6: 0.1749  m2_loss_dice_6: 1.247  m2_loss_ce_7: 0.5284  m2_loss_mask_7: 0.176  m2_loss_dice_7: 1.231  m2_loss_ce_8: 0.5046  m2_loss_mask_8: 0.1758  m2_loss_dice_8: 1.252    time: 1.4716  last_time: 1.5665  data_time: 0.0662  last_data_time: 0.0700   lr: 0.0001  max_mem: 34442M
[10/05 12:14:23] d2.utils.events INFO:  eta: 0:12:15  iter: 499  total_loss: 39.73  m1_loss_ce: 0.4501  m1_loss_mask: 0.1549  m1_loss_dice: 1.229  m1_loss_ce_0: 0.5502  m1_loss_mask_0: 0.1742  m1_loss_dice_0: 1.41  m1_loss_ce_1: 0.5988  m1_loss_mask_1: 0.1638  m1_loss_dice_1: 1.338  m1_loss_ce_2: 0.575  m1_loss_mask_2: 0.1572  m1_loss_dice_2: 1.311  m1_loss_ce_3: 0.489  m1_loss_mask_3: 0.1551  m1_loss_dice_3: 1.185  m1_loss_ce_4: 0.4912  m1_loss_mask_4: 0.1553  m1_loss_dice_4: 1.24  m1_loss_ce_5: 0.4803  m1_loss_mask_5: 0.1539  m1_loss_dice_5: 1.22  m1_loss_ce_6: 0.4993  m1_loss_mask_6: 0.153  m1_loss_dice_6: 1.205  m1_loss_ce_7: 0.4837  m1_loss_mask_7: 0.1535  m1_loss_dice_7: 1.212  m1_loss_ce_8: 0.4859  m1_loss_mask_8: 0.1557  m1_loss_dice_8: 1.186  m2_loss_ce: 0.4668  m2_loss_mask: 0.1568  m2_loss_dice: 1.219  m2_loss_ce_0: 0.5932  m2_loss_mask_0: 0.1913  m2_loss_dice_0: 1.438  m2_loss_ce_1: 0.6534  m2_loss_mask_1: 0.1767  m2_loss_dice_1: 1.408  m2_loss_ce_2: 0.5805  m2_loss_mask_2: 0.162  m2_loss_dice_2: 1.338  m2_loss_ce_3: 0.5433  m2_loss_mask_3: 0.1616  m2_loss_dice_3: 1.277  m2_loss_ce_4: 0.5326  m2_loss_mask_4: 0.1599  m2_loss_dice_4: 1.281  m2_loss_ce_5: 0.5087  m2_loss_mask_5: 0.1571  m2_loss_dice_5: 1.262  m2_loss_ce_6: 0.4819  m2_loss_mask_6: 0.1571  m2_loss_dice_6: 1.258  m2_loss_ce_7: 0.5106  m2_loss_mask_7: 0.1591  m2_loss_dice_7: 1.25  m2_loss_ce_8: 0.479  m2_loss_mask_8: 0.1574  m2_loss_dice_8: 1.244    time: 1.4735  last_time: 1.5788  data_time: 0.0669  last_data_time: 0.0431   lr: 0.0001  max_mem: 34442M
[10/05 12:14:54] d2.utils.events INFO:  eta: 0:11:46  iter: 519  total_loss: 39.58  m1_loss_ce: 0.4285  m1_loss_mask: 0.1575  m1_loss_dice: 1.197  m1_loss_ce_0: 0.5819  m1_loss_mask_0: 0.1811  m1_loss_dice_0: 1.448  m1_loss_ce_1: 0.5792  m1_loss_mask_1: 0.1703  m1_loss_dice_1: 1.323  m1_loss_ce_2: 0.5523  m1_loss_mask_2: 0.1641  m1_loss_dice_2: 1.308  m1_loss_ce_3: 0.4887  m1_loss_mask_3: 0.1599  m1_loss_dice_3: 1.208  m1_loss_ce_4: 0.4394  m1_loss_mask_4: 0.1595  m1_loss_dice_4: 1.243  m1_loss_ce_5: 0.4571  m1_loss_mask_5: 0.1556  m1_loss_dice_5: 1.262  m1_loss_ce_6: 0.4463  m1_loss_mask_6: 0.1574  m1_loss_dice_6: 1.225  m1_loss_ce_7: 0.4462  m1_loss_mask_7: 0.156  m1_loss_dice_7: 1.234  m1_loss_ce_8: 0.4116  m1_loss_mask_8: 0.1562  m1_loss_dice_8: 1.295  m2_loss_ce: 0.459  m2_loss_mask: 0.1599  m2_loss_dice: 1.239  m2_loss_ce_0: 0.5956  m2_loss_mask_0: 0.1822  m2_loss_dice_0: 1.493  m2_loss_ce_1: 0.6479  m2_loss_mask_1: 0.1731  m2_loss_dice_1: 1.406  m2_loss_ce_2: 0.5453  m2_loss_mask_2: 0.1644  m2_loss_dice_2: 1.342  m2_loss_ce_3: 0.5132  m2_loss_mask_3: 0.1611  m2_loss_dice_3: 1.31  m2_loss_ce_4: 0.5065  m2_loss_mask_4: 0.1571  m2_loss_dice_4: 1.307  m2_loss_ce_5: 0.4874  m2_loss_mask_5: 0.1568  m2_loss_dice_5: 1.244  m2_loss_ce_6: 0.4656  m2_loss_mask_6: 0.1569  m2_loss_dice_6: 1.252  m2_loss_ce_7: 0.4533  m2_loss_mask_7: 0.1586  m2_loss_dice_7: 1.242  m2_loss_ce_8: 0.4483  m2_loss_mask_8: 0.1569  m2_loss_dice_8: 1.24    time: 1.4754  last_time: 1.5066  data_time: 0.0800  last_data_time: 0.0897   lr: 0.0001  max_mem: 34442M
[10/05 12:15:24] d2.utils.events INFO:  eta: 0:11:17  iter: 539  total_loss: 39.84  m1_loss_ce: 0.4954  m1_loss_mask: 0.1621  m1_loss_dice: 1.174  m1_loss_ce_0: 0.5863  m1_loss_mask_0: 0.1827  m1_loss_dice_0: 1.431  m1_loss_ce_1: 0.6688  m1_loss_mask_1: 0.1697  m1_loss_dice_1: 1.321  m1_loss_ce_2: 0.6129  m1_loss_mask_2: 0.1687  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.5269  m1_loss_mask_3: 0.1651  m1_loss_dice_3: 1.18  m1_loss_ce_4: 0.5205  m1_loss_mask_4: 0.1649  m1_loss_dice_4: 1.211  m1_loss_ce_5: 0.5106  m1_loss_mask_5: 0.163  m1_loss_dice_5: 1.239  m1_loss_ce_6: 0.4693  m1_loss_mask_6: 0.164  m1_loss_dice_6: 1.17  m1_loss_ce_7: 0.4794  m1_loss_mask_7: 0.1623  m1_loss_dice_7: 1.162  m1_loss_ce_8: 0.4921  m1_loss_mask_8: 0.1583  m1_loss_dice_8: 1.189  m2_loss_ce: 0.4794  m2_loss_mask: 0.161  m2_loss_dice: 1.196  m2_loss_ce_0: 0.5935  m2_loss_mask_0: 0.1914  m2_loss_dice_0: 1.446  m2_loss_ce_1: 0.682  m2_loss_mask_1: 0.1758  m2_loss_dice_1: 1.377  m2_loss_ce_2: 0.6261  m2_loss_mask_2: 0.1663  m2_loss_dice_2: 1.312  m2_loss_ce_3: 0.5487  m2_loss_mask_3: 0.1638  m2_loss_dice_3: 1.2  m2_loss_ce_4: 0.5209  m2_loss_mask_4: 0.1602  m2_loss_dice_4: 1.225  m2_loss_ce_5: 0.4929  m2_loss_mask_5: 0.1656  m2_loss_dice_5: 1.21  m2_loss_ce_6: 0.5227  m2_loss_mask_6: 0.1642  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.4798  m2_loss_mask_7: 0.1628  m2_loss_dice_7: 1.247  m2_loss_ce_8: 0.5062  m2_loss_mask_8: 0.1631  m2_loss_dice_8: 1.168    time: 1.4761  last_time: 1.5097  data_time: 0.0729  last_data_time: 0.0878   lr: 0.0001  max_mem: 34442M
[10/05 12:15:54] d2.utils.events INFO:  eta: 0:10:49  iter: 559  total_loss: 39.96  m1_loss_ce: 0.4697  m1_loss_mask: 0.1606  m1_loss_dice: 1.219  m1_loss_ce_0: 0.5332  m1_loss_mask_0: 0.1844  m1_loss_dice_0: 1.473  m1_loss_ce_1: 0.6152  m1_loss_mask_1: 0.1761  m1_loss_dice_1: 1.389  m1_loss_ce_2: 0.5829  m1_loss_mask_2: 0.169  m1_loss_dice_2: 1.307  m1_loss_ce_3: 0.5179  m1_loss_mask_3: 0.1615  m1_loss_dice_3: 1.286  m1_loss_ce_4: 0.4958  m1_loss_mask_4: 0.1627  m1_loss_dice_4: 1.261  m1_loss_ce_5: 0.4716  m1_loss_mask_5: 0.1628  m1_loss_dice_5: 1.272  m1_loss_ce_6: 0.4743  m1_loss_mask_6: 0.1631  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.4754  m1_loss_mask_7: 0.1624  m1_loss_dice_7: 1.22  m1_loss_ce_8: 0.482  m1_loss_mask_8: 0.1616  m1_loss_dice_8: 1.221  m2_loss_ce: 0.4731  m2_loss_mask: 0.1602  m2_loss_dice: 1.323  m2_loss_ce_0: 0.586  m2_loss_mask_0: 0.1888  m2_loss_dice_0: 1.517  m2_loss_ce_1: 0.6477  m2_loss_mask_1: 0.1765  m2_loss_dice_1: 1.414  m2_loss_ce_2: 0.5779  m2_loss_mask_2: 0.1648  m2_loss_dice_2: 1.361  m2_loss_ce_3: 0.5295  m2_loss_mask_3: 0.1612  m2_loss_dice_3: 1.313  m2_loss_ce_4: 0.5384  m2_loss_mask_4: 0.1631  m2_loss_dice_4: 1.323  m2_loss_ce_5: 0.5021  m2_loss_mask_5: 0.1597  m2_loss_dice_5: 1.349  m2_loss_ce_6: 0.4864  m2_loss_mask_6: 0.1605  m2_loss_dice_6: 1.317  m2_loss_ce_7: 0.4902  m2_loss_mask_7: 0.1608  m2_loss_dice_7: 1.301  m2_loss_ce_8: 0.4897  m2_loss_mask_8: 0.1624  m2_loss_dice_8: 1.333    time: 1.4773  last_time: 1.4905  data_time: 0.0721  last_data_time: 0.0896   lr: 0.0001  max_mem: 34442M
[10/05 12:16:24] d2.utils.events INFO:  eta: 0:10:19  iter: 579  total_loss: 39.77  m1_loss_ce: 0.4328  m1_loss_mask: 0.1651  m1_loss_dice: 1.192  m1_loss_ce_0: 0.5769  m1_loss_mask_0: 0.2048  m1_loss_dice_0: 1.384  m1_loss_ce_1: 0.59  m1_loss_mask_1: 0.1837  m1_loss_dice_1: 1.336  m1_loss_ce_2: 0.5399  m1_loss_mask_2: 0.1719  m1_loss_dice_2: 1.273  m1_loss_ce_3: 0.4937  m1_loss_mask_3: 0.1676  m1_loss_dice_3: 1.213  m1_loss_ce_4: 0.5056  m1_loss_mask_4: 0.172  m1_loss_dice_4: 1.226  m1_loss_ce_5: 0.4802  m1_loss_mask_5: 0.1641  m1_loss_dice_5: 1.221  m1_loss_ce_6: 0.4675  m1_loss_mask_6: 0.1678  m1_loss_dice_6: 1.2  m1_loss_ce_7: 0.46  m1_loss_mask_7: 0.1686  m1_loss_dice_7: 1.178  m1_loss_ce_8: 0.4686  m1_loss_mask_8: 0.1679  m1_loss_dice_8: 1.204  m2_loss_ce: 0.4702  m2_loss_mask: 0.1726  m2_loss_dice: 1.252  m2_loss_ce_0: 0.5997  m2_loss_mask_0: 0.214  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.6576  m2_loss_mask_1: 0.1996  m2_loss_dice_1: 1.369  m2_loss_ce_2: 0.553  m2_loss_mask_2: 0.1857  m2_loss_dice_2: 1.334  m2_loss_ce_3: 0.5312  m2_loss_mask_3: 0.1789  m2_loss_dice_3: 1.267  m2_loss_ce_4: 0.5205  m2_loss_mask_4: 0.1762  m2_loss_dice_4: 1.275  m2_loss_ce_5: 0.4851  m2_loss_mask_5: 0.1735  m2_loss_dice_5: 1.274  m2_loss_ce_6: 0.4877  m2_loss_mask_6: 0.1729  m2_loss_dice_6: 1.235  m2_loss_ce_7: 0.4889  m2_loss_mask_7: 0.174  m2_loss_dice_7: 1.235  m2_loss_ce_8: 0.4679  m2_loss_mask_8: 0.174  m2_loss_dice_8: 1.253    time: 1.4779  last_time: 1.4357  data_time: 0.0767  last_data_time: 0.0639   lr: 0.0001  max_mem: 34442M
[10/05 12:16:54] d2.utils.events INFO:  eta: 0:09:50  iter: 599  total_loss: 39.77  m1_loss_ce: 0.4189  m1_loss_mask: 0.155  m1_loss_dice: 1.226  m1_loss_ce_0: 0.5474  m1_loss_mask_0: 0.1927  m1_loss_dice_0: 1.447  m1_loss_ce_1: 0.5831  m1_loss_mask_1: 0.1798  m1_loss_dice_1: 1.344  m1_loss_ce_2: 0.5637  m1_loss_mask_2: 0.1636  m1_loss_dice_2: 1.298  m1_loss_ce_3: 0.4975  m1_loss_mask_3: 0.1561  m1_loss_dice_3: 1.258  m1_loss_ce_4: 0.4524  m1_loss_mask_4: 0.1595  m1_loss_dice_4: 1.254  m1_loss_ce_5: 0.4441  m1_loss_mask_5: 0.1571  m1_loss_dice_5: 1.246  m1_loss_ce_6: 0.4357  m1_loss_mask_6: 0.1565  m1_loss_dice_6: 1.214  m1_loss_ce_7: 0.4752  m1_loss_mask_7: 0.1551  m1_loss_dice_7: 1.224  m1_loss_ce_8: 0.4564  m1_loss_mask_8: 0.1562  m1_loss_dice_8: 1.222  m2_loss_ce: 0.4757  m2_loss_mask: 0.1674  m2_loss_dice: 1.275  m2_loss_ce_0: 0.6183  m2_loss_mask_0: 0.1939  m2_loss_dice_0: 1.453  m2_loss_ce_1: 0.6597  m2_loss_mask_1: 0.181  m2_loss_dice_1: 1.401  m2_loss_ce_2: 0.5798  m2_loss_mask_2: 0.1712  m2_loss_dice_2: 1.357  m2_loss_ce_3: 0.5293  m2_loss_mask_3: 0.1714  m2_loss_dice_3: 1.29  m2_loss_ce_4: 0.5265  m2_loss_mask_4: 0.1679  m2_loss_dice_4: 1.279  m2_loss_ce_5: 0.4879  m2_loss_mask_5: 0.167  m2_loss_dice_5: 1.282  m2_loss_ce_6: 0.4754  m2_loss_mask_6: 0.168  m2_loss_dice_6: 1.248  m2_loss_ce_7: 0.4844  m2_loss_mask_7: 0.1689  m2_loss_dice_7: 1.253  m2_loss_ce_8: 0.4821  m2_loss_mask_8: 0.168  m2_loss_dice_8: 1.261    time: 1.4785  last_time: 1.5804  data_time: 0.0734  last_data_time: 0.0491   lr: 0.0001  max_mem: 34442M
[10/05 12:17:25] d2.utils.events INFO:  eta: 0:09:21  iter: 619  total_loss: 40.45  m1_loss_ce: 0.46  m1_loss_mask: 0.1546  m1_loss_dice: 1.248  m1_loss_ce_0: 0.5734  m1_loss_mask_0: 0.1805  m1_loss_dice_0: 1.453  m1_loss_ce_1: 0.6091  m1_loss_mask_1: 0.1687  m1_loss_dice_1: 1.325  m1_loss_ce_2: 0.5444  m1_loss_mask_2: 0.1624  m1_loss_dice_2: 1.299  m1_loss_ce_3: 0.4801  m1_loss_mask_3: 0.1588  m1_loss_dice_3: 1.29  m1_loss_ce_4: 0.4477  m1_loss_mask_4: 0.1583  m1_loss_dice_4: 1.226  m1_loss_ce_5: 0.4395  m1_loss_mask_5: 0.1573  m1_loss_dice_5: 1.228  m1_loss_ce_6: 0.4362  m1_loss_mask_6: 0.1552  m1_loss_dice_6: 1.225  m1_loss_ce_7: 0.454  m1_loss_mask_7: 0.1568  m1_loss_dice_7: 1.228  m1_loss_ce_8: 0.4347  m1_loss_mask_8: 0.1553  m1_loss_dice_8: 1.188  m2_loss_ce: 0.4289  m2_loss_mask: 0.16  m2_loss_dice: 1.257  m2_loss_ce_0: 0.6271  m2_loss_mask_0: 0.1923  m2_loss_dice_0: 1.496  m2_loss_ce_1: 0.6303  m2_loss_mask_1: 0.1704  m2_loss_dice_1: 1.414  m2_loss_ce_2: 0.5722  m2_loss_mask_2: 0.1615  m2_loss_dice_2: 1.328  m2_loss_ce_3: 0.5244  m2_loss_mask_3: 0.16  m2_loss_dice_3: 1.288  m2_loss_ce_4: 0.5377  m2_loss_mask_4: 0.1598  m2_loss_dice_4: 1.253  m2_loss_ce_5: 0.4969  m2_loss_mask_5: 0.1584  m2_loss_dice_5: 1.291  m2_loss_ce_6: 0.477  m2_loss_mask_6: 0.1599  m2_loss_dice_6: 1.244  m2_loss_ce_7: 0.4811  m2_loss_mask_7: 0.1594  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.462  m2_loss_mask_8: 0.1606  m2_loss_dice_8: 1.241    time: 1.4796  last_time: 1.5368  data_time: 0.0622  last_data_time: 0.0553   lr: 0.0001  max_mem: 34442M
[10/05 12:17:55] d2.utils.events INFO:  eta: 0:08:51  iter: 639  total_loss: 39.83  m1_loss_ce: 0.4788  m1_loss_mask: 0.1793  m1_loss_dice: 1.21  m1_loss_ce_0: 0.5962  m1_loss_mask_0: 0.2145  m1_loss_dice_0: 1.372  m1_loss_ce_1: 0.6272  m1_loss_mask_1: 0.1929  m1_loss_dice_1: 1.328  m1_loss_ce_2: 0.556  m1_loss_mask_2: 0.1824  m1_loss_dice_2: 1.279  m1_loss_ce_3: 0.5053  m1_loss_mask_3: 0.184  m1_loss_dice_3: 1.199  m1_loss_ce_4: 0.4859  m1_loss_mask_4: 0.1794  m1_loss_dice_4: 1.225  m1_loss_ce_5: 0.4898  m1_loss_mask_5: 0.1786  m1_loss_dice_5: 1.249  m1_loss_ce_6: 0.4551  m1_loss_mask_6: 0.1775  m1_loss_dice_6: 1.203  m1_loss_ce_7: 0.4645  m1_loss_mask_7: 0.1799  m1_loss_dice_7: 1.185  m1_loss_ce_8: 0.4682  m1_loss_mask_8: 0.1797  m1_loss_dice_8: 1.21  m2_loss_ce: 0.4822  m2_loss_mask: 0.1834  m2_loss_dice: 1.273  m2_loss_ce_0: 0.6401  m2_loss_mask_0: 0.218  m2_loss_dice_0: 1.448  m2_loss_ce_1: 0.6561  m2_loss_mask_1: 0.201  m2_loss_dice_1: 1.401  m2_loss_ce_2: 0.5998  m2_loss_mask_2: 0.1932  m2_loss_dice_2: 1.315  m2_loss_ce_3: 0.557  m2_loss_mask_3: 0.1887  m2_loss_dice_3: 1.256  m2_loss_ce_4: 0.5321  m2_loss_mask_4: 0.1827  m2_loss_dice_4: 1.251  m2_loss_ce_5: 0.5321  m2_loss_mask_5: 0.1843  m2_loss_dice_5: 1.284  m2_loss_ce_6: 0.4973  m2_loss_mask_6: 0.1853  m2_loss_dice_6: 1.266  m2_loss_ce_7: 0.5205  m2_loss_mask_7: 0.1835  m2_loss_dice_7: 1.256  m2_loss_ce_8: 0.4798  m2_loss_mask_8: 0.1854  m2_loss_dice_8: 1.269    time: 1.4803  last_time: 1.5809  data_time: 0.0600  last_data_time: 0.0858   lr: 0.0001  max_mem: 34442M
[10/05 12:18:25] d2.utils.events INFO:  eta: 0:08:22  iter: 659  total_loss: 39.63  m1_loss_ce: 0.4214  m1_loss_mask: 0.1638  m1_loss_dice: 1.154  m1_loss_ce_0: 0.5075  m1_loss_mask_0: 0.1934  m1_loss_dice_0: 1.444  m1_loss_ce_1: 0.554  m1_loss_mask_1: 0.1749  m1_loss_dice_1: 1.363  m1_loss_ce_2: 0.5478  m1_loss_mask_2: 0.1716  m1_loss_dice_2: 1.308  m1_loss_ce_3: 0.4678  m1_loss_mask_3: 0.171  m1_loss_dice_3: 1.229  m1_loss_ce_4: 0.4798  m1_loss_mask_4: 0.1637  m1_loss_dice_4: 1.257  m1_loss_ce_5: 0.4368  m1_loss_mask_5: 0.1656  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.4731  m1_loss_mask_6: 0.1636  m1_loss_dice_6: 1.18  m1_loss_ce_7: 0.452  m1_loss_mask_7: 0.1657  m1_loss_dice_7: 1.188  m1_loss_ce_8: 0.4314  m1_loss_mask_8: 0.1623  m1_loss_dice_8: 1.206  m2_loss_ce: 0.4785  m2_loss_mask: 0.1707  m2_loss_dice: 1.248  m2_loss_ce_0: 0.5824  m2_loss_mask_0: 0.1981  m2_loss_dice_0: 1.468  m2_loss_ce_1: 0.6785  m2_loss_mask_1: 0.1819  m2_loss_dice_1: 1.418  m2_loss_ce_2: 0.5531  m2_loss_mask_2: 0.1706  m2_loss_dice_2: 1.336  m2_loss_ce_3: 0.5057  m2_loss_mask_3: 0.1733  m2_loss_dice_3: 1.294  m2_loss_ce_4: 0.5153  m2_loss_mask_4: 0.1707  m2_loss_dice_4: 1.271  m2_loss_ce_5: 0.4773  m2_loss_mask_5: 0.1621  m2_loss_dice_5: 1.268  m2_loss_ce_6: 0.4919  m2_loss_mask_6: 0.17  m2_loss_dice_6: 1.234  m2_loss_ce_7: 0.4827  m2_loss_mask_7: 0.1683  m2_loss_dice_7: 1.256  m2_loss_ce_8: 0.4636  m2_loss_mask_8: 0.1676  m2_loss_dice_8: 1.262    time: 1.4804  last_time: 1.4694  data_time: 0.0645  last_data_time: 0.0426   lr: 0.0001  max_mem: 34442M
[10/05 12:18:55] d2.utils.events INFO:  eta: 0:07:52  iter: 679  total_loss: 38.69  m1_loss_ce: 0.4348  m1_loss_mask: 0.1715  m1_loss_dice: 1.185  m1_loss_ce_0: 0.5618  m1_loss_mask_0: 0.1817  m1_loss_dice_0: 1.4  m1_loss_ce_1: 0.5942  m1_loss_mask_1: 0.1736  m1_loss_dice_1: 1.338  m1_loss_ce_2: 0.521  m1_loss_mask_2: 0.1698  m1_loss_dice_2: 1.264  m1_loss_ce_3: 0.4574  m1_loss_mask_3: 0.1701  m1_loss_dice_3: 1.225  m1_loss_ce_4: 0.4349  m1_loss_mask_4: 0.1696  m1_loss_dice_4: 1.238  m1_loss_ce_5: 0.4272  m1_loss_mask_5: 0.171  m1_loss_dice_5: 1.167  m1_loss_ce_6: 0.4226  m1_loss_mask_6: 0.1738  m1_loss_dice_6: 1.183  m1_loss_ce_7: 0.4202  m1_loss_mask_7: 0.1726  m1_loss_dice_7: 1.17  m1_loss_ce_8: 0.457  m1_loss_mask_8: 0.1742  m1_loss_dice_8: 1.15  m2_loss_ce: 0.4445  m2_loss_mask: 0.1651  m2_loss_dice: 1.201  m2_loss_ce_0: 0.5731  m2_loss_mask_0: 0.1936  m2_loss_dice_0: 1.438  m2_loss_ce_1: 0.6405  m2_loss_mask_1: 0.1813  m2_loss_dice_1: 1.337  m2_loss_ce_2: 0.5748  m2_loss_mask_2: 0.1716  m2_loss_dice_2: 1.339  m2_loss_ce_3: 0.4954  m2_loss_mask_3: 0.1712  m2_loss_dice_3: 1.266  m2_loss_ce_4: 0.4799  m2_loss_mask_4: 0.1669  m2_loss_dice_4: 1.203  m2_loss_ce_5: 0.4869  m2_loss_mask_5: 0.1684  m2_loss_dice_5: 1.207  m2_loss_ce_6: 0.4532  m2_loss_mask_6: 0.1697  m2_loss_dice_6: 1.181  m2_loss_ce_7: 0.4792  m2_loss_mask_7: 0.1671  m2_loss_dice_7: 1.184  m2_loss_ce_8: 0.4303  m2_loss_mask_8: 0.1683  m2_loss_dice_8: 1.194    time: 1.4812  last_time: 1.5057  data_time: 0.0717  last_data_time: 0.0458   lr: 0.0001  max_mem: 34442M
[10/05 12:19:25] d2.utils.events INFO:  eta: 0:07:23  iter: 699  total_loss: 38.66  m1_loss_ce: 0.4436  m1_loss_mask: 0.1735  m1_loss_dice: 1.163  m1_loss_ce_0: 0.554  m1_loss_mask_0: 0.2013  m1_loss_dice_0: 1.358  m1_loss_ce_1: 0.5699  m1_loss_mask_1: 0.1858  m1_loss_dice_1: 1.307  m1_loss_ce_2: 0.541  m1_loss_mask_2: 0.1828  m1_loss_dice_2: 1.248  m1_loss_ce_3: 0.484  m1_loss_mask_3: 0.1801  m1_loss_dice_3: 1.201  m1_loss_ce_4: 0.4838  m1_loss_mask_4: 0.1759  m1_loss_dice_4: 1.208  m1_loss_ce_5: 0.4673  m1_loss_mask_5: 0.1732  m1_loss_dice_5: 1.187  m1_loss_ce_6: 0.4492  m1_loss_mask_6: 0.1761  m1_loss_dice_6: 1.192  m1_loss_ce_7: 0.45  m1_loss_mask_7: 0.1767  m1_loss_dice_7: 1.158  m1_loss_ce_8: 0.4472  m1_loss_mask_8: 0.1748  m1_loss_dice_8: 1.178  m2_loss_ce: 0.4876  m2_loss_mask: 0.1675  m2_loss_dice: 1.228  m2_loss_ce_0: 0.5783  m2_loss_mask_0: 0.2081  m2_loss_dice_0: 1.419  m2_loss_ce_1: 0.6478  m2_loss_mask_1: 0.1924  m2_loss_dice_1: 1.333  m2_loss_ce_2: 0.5674  m2_loss_mask_2: 0.1779  m2_loss_dice_2: 1.285  m2_loss_ce_3: 0.5346  m2_loss_mask_3: 0.1713  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.5009  m2_loss_mask_4: 0.1677  m2_loss_dice_4: 1.216  m2_loss_ce_5: 0.4555  m2_loss_mask_5: 0.1692  m2_loss_dice_5: 1.215  m2_loss_ce_6: 0.4557  m2_loss_mask_6: 0.1684  m2_loss_dice_6: 1.222  m2_loss_ce_7: 0.4859  m2_loss_mask_7: 0.1686  m2_loss_dice_7: 1.204  m2_loss_ce_8: 0.4653  m2_loss_mask_8: 0.1675  m2_loss_dice_8: 1.186    time: 1.4812  last_time: 1.4425  data_time: 0.0680  last_data_time: 0.0418   lr: 0.0001  max_mem: 34442M
[10/05 12:19:54] d2.utils.events INFO:  eta: 0:06:53  iter: 719  total_loss: 36.87  m1_loss_ce: 0.4078  m1_loss_mask: 0.1667  m1_loss_dice: 1.125  m1_loss_ce_0: 0.5493  m1_loss_mask_0: 0.1931  m1_loss_dice_0: 1.332  m1_loss_ce_1: 0.6112  m1_loss_mask_1: 0.1763  m1_loss_dice_1: 1.268  m1_loss_ce_2: 0.5071  m1_loss_mask_2: 0.169  m1_loss_dice_2: 1.231  m1_loss_ce_3: 0.4599  m1_loss_mask_3: 0.1691  m1_loss_dice_3: 1.164  m1_loss_ce_4: 0.4547  m1_loss_mask_4: 0.1659  m1_loss_dice_4: 1.159  m1_loss_ce_5: 0.4438  m1_loss_mask_5: 0.1706  m1_loss_dice_5: 1.166  m1_loss_ce_6: 0.436  m1_loss_mask_6: 0.1705  m1_loss_dice_6: 1.131  m1_loss_ce_7: 0.4272  m1_loss_mask_7: 0.166  m1_loss_dice_7: 1.152  m1_loss_ce_8: 0.4242  m1_loss_mask_8: 0.1669  m1_loss_dice_8: 1.146  m2_loss_ce: 0.4245  m2_loss_mask: 0.1663  m2_loss_dice: 1.174  m2_loss_ce_0: 0.5535  m2_loss_mask_0: 0.1981  m2_loss_dice_0: 1.413  m2_loss_ce_1: 0.6052  m2_loss_mask_1: 0.1843  m2_loss_dice_1: 1.313  m2_loss_ce_2: 0.5434  m2_loss_mask_2: 0.1704  m2_loss_dice_2: 1.273  m2_loss_ce_3: 0.443  m2_loss_mask_3: 0.1696  m2_loss_dice_3: 1.199  m2_loss_ce_4: 0.4586  m2_loss_mask_4: 0.1676  m2_loss_dice_4: 1.198  m2_loss_ce_5: 0.4474  m2_loss_mask_5: 0.1672  m2_loss_dice_5: 1.176  m2_loss_ce_6: 0.438  m2_loss_mask_6: 0.1677  m2_loss_dice_6: 1.204  m2_loss_ce_7: 0.4189  m2_loss_mask_7: 0.1685  m2_loss_dice_7: 1.199  m2_loss_ce_8: 0.435  m2_loss_mask_8: 0.1671  m2_loss_dice_8: 1.183    time: 1.4808  last_time: 1.3877  data_time: 0.0703  last_data_time: 0.0460   lr: 0.0001  max_mem: 34442M
[10/05 12:20:24] d2.utils.events INFO:  eta: 0:06:23  iter: 739  total_loss: 37.87  m1_loss_ce: 0.4401  m1_loss_mask: 0.1688  m1_loss_dice: 1.132  m1_loss_ce_0: 0.5237  m1_loss_mask_0: 0.1932  m1_loss_dice_0: 1.33  m1_loss_ce_1: 0.5551  m1_loss_mask_1: 0.1814  m1_loss_dice_1: 1.279  m1_loss_ce_2: 0.5422  m1_loss_mask_2: 0.1741  m1_loss_dice_2: 1.209  m1_loss_ce_3: 0.4753  m1_loss_mask_3: 0.174  m1_loss_dice_3: 1.14  m1_loss_ce_4: 0.4562  m1_loss_mask_4: 0.1731  m1_loss_dice_4: 1.172  m1_loss_ce_5: 0.4541  m1_loss_mask_5: 0.1715  m1_loss_dice_5: 1.164  m1_loss_ce_6: 0.442  m1_loss_mask_6: 0.1707  m1_loss_dice_6: 1.162  m1_loss_ce_7: 0.438  m1_loss_mask_7: 0.1696  m1_loss_dice_7: 1.179  m1_loss_ce_8: 0.4575  m1_loss_mask_8: 0.1715  m1_loss_dice_8: 1.166  m2_loss_ce: 0.4514  m2_loss_mask: 0.1704  m2_loss_dice: 1.209  m2_loss_ce_0: 0.5954  m2_loss_mask_0: 0.2002  m2_loss_dice_0: 1.403  m2_loss_ce_1: 0.6447  m2_loss_mask_1: 0.1859  m2_loss_dice_1: 1.318  m2_loss_ce_2: 0.553  m2_loss_mask_2: 0.1773  m2_loss_dice_2: 1.25  m2_loss_ce_3: 0.5167  m2_loss_mask_3: 0.1749  m2_loss_dice_3: 1.203  m2_loss_ce_4: 0.4803  m2_loss_mask_4: 0.1709  m2_loss_dice_4: 1.199  m2_loss_ce_5: 0.4776  m2_loss_mask_5: 0.1705  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.4658  m2_loss_mask_6: 0.1718  m2_loss_dice_6: 1.183  m2_loss_ce_7: 0.4523  m2_loss_mask_7: 0.1693  m2_loss_dice_7: 1.196  m2_loss_ce_8: 0.4574  m2_loss_mask_8: 0.1702  m2_loss_dice_8: 1.184    time: 1.4805  last_time: 1.4567  data_time: 0.0753  last_data_time: 0.0454   lr: 0.0001  max_mem: 34442M
[10/05 12:20:54] d2.utils.events INFO:  eta: 0:05:54  iter: 759  total_loss: 40.29  m1_loss_ce: 0.4243  m1_loss_mask: 0.1567  m1_loss_dice: 1.277  m1_loss_ce_0: 0.5677  m1_loss_mask_0: 0.1811  m1_loss_dice_0: 1.456  m1_loss_ce_1: 0.6034  m1_loss_mask_1: 0.1688  m1_loss_dice_1: 1.373  m1_loss_ce_2: 0.5645  m1_loss_mask_2: 0.1596  m1_loss_dice_2: 1.38  m1_loss_ce_3: 0.4995  m1_loss_mask_3: 0.1611  m1_loss_dice_3: 1.274  m1_loss_ce_4: 0.4676  m1_loss_mask_4: 0.1621  m1_loss_dice_4: 1.28  m1_loss_ce_5: 0.4798  m1_loss_mask_5: 0.1555  m1_loss_dice_5: 1.266  m1_loss_ce_6: 0.4257  m1_loss_mask_6: 0.1598  m1_loss_dice_6: 1.273  m1_loss_ce_7: 0.452  m1_loss_mask_7: 0.1547  m1_loss_dice_7: 1.258  m1_loss_ce_8: 0.4323  m1_loss_mask_8: 0.1568  m1_loss_dice_8: 1.259  m2_loss_ce: 0.4774  m2_loss_mask: 0.1658  m2_loss_dice: 1.333  m2_loss_ce_0: 0.608  m2_loss_mask_0: 0.1896  m2_loss_dice_0: 1.501  m2_loss_ce_1: 0.6685  m2_loss_mask_1: 0.1803  m2_loss_dice_1: 1.409  m2_loss_ce_2: 0.6182  m2_loss_mask_2: 0.1689  m2_loss_dice_2: 1.397  m2_loss_ce_3: 0.5414  m2_loss_mask_3: 0.167  m2_loss_dice_3: 1.346  m2_loss_ce_4: 0.514  m2_loss_mask_4: 0.1652  m2_loss_dice_4: 1.292  m2_loss_ce_5: 0.5113  m2_loss_mask_5: 0.1663  m2_loss_dice_5: 1.334  m2_loss_ce_6: 0.4822  m2_loss_mask_6: 0.1635  m2_loss_dice_6: 1.302  m2_loss_ce_7: 0.4971  m2_loss_mask_7: 0.1642  m2_loss_dice_7: 1.302  m2_loss_ce_8: 0.47  m2_loss_mask_8: 0.1655  m2_loss_dice_8: 1.319    time: 1.4811  last_time: 1.4780  data_time: 0.0647  last_data_time: 0.0576   lr: 0.0001  max_mem: 34442M
[10/05 12:21:24] d2.utils.events INFO:  eta: 0:05:25  iter: 779  total_loss: 41.53  m1_loss_ce: 0.4507  m1_loss_mask: 0.1499  m1_loss_dice: 1.265  m1_loss_ce_0: 0.5973  m1_loss_mask_0: 0.1766  m1_loss_dice_0: 1.496  m1_loss_ce_1: 0.6131  m1_loss_mask_1: 0.1648  m1_loss_dice_1: 1.409  m1_loss_ce_2: 0.5729  m1_loss_mask_2: 0.1528  m1_loss_dice_2: 1.347  m1_loss_ce_3: 0.5208  m1_loss_mask_3: 0.1528  m1_loss_dice_3: 1.305  m1_loss_ce_4: 0.4992  m1_loss_mask_4: 0.1496  m1_loss_dice_4: 1.274  m1_loss_ce_5: 0.463  m1_loss_mask_5: 0.1494  m1_loss_dice_5: 1.29  m1_loss_ce_6: 0.4726  m1_loss_mask_6: 0.1476  m1_loss_dice_6: 1.266  m1_loss_ce_7: 0.4809  m1_loss_mask_7: 0.1486  m1_loss_dice_7: 1.286  m1_loss_ce_8: 0.4821  m1_loss_mask_8: 0.1486  m1_loss_dice_8: 1.269  m2_loss_ce: 0.5068  m2_loss_mask: 0.1552  m2_loss_dice: 1.331  m2_loss_ce_0: 0.6394  m2_loss_mask_0: 0.1831  m2_loss_dice_0: 1.538  m2_loss_ce_1: 0.6886  m2_loss_mask_1: 0.1738  m2_loss_dice_1: 1.489  m2_loss_ce_2: 0.6216  m2_loss_mask_2: 0.1621  m2_loss_dice_2: 1.411  m2_loss_ce_3: 0.5422  m2_loss_mask_3: 0.158  m2_loss_dice_3: 1.344  m2_loss_ce_4: 0.5832  m2_loss_mask_4: 0.1549  m2_loss_dice_4: 1.348  m2_loss_ce_5: 0.5258  m2_loss_mask_5: 0.155  m2_loss_dice_5: 1.325  m2_loss_ce_6: 0.5344  m2_loss_mask_6: 0.1562  m2_loss_dice_6: 1.341  m2_loss_ce_7: 0.5017  m2_loss_mask_7: 0.1563  m2_loss_dice_7: 1.344  m2_loss_ce_8: 0.5194  m2_loss_mask_8: 0.1553  m2_loss_dice_8: 1.334    time: 1.4818  last_time: 1.4348  data_time: 0.0725  last_data_time: 0.0583   lr: 0.0001  max_mem: 34442M
[10/05 12:21:54] d2.utils.events INFO:  eta: 0:04:55  iter: 799  total_loss: 40.5  m1_loss_ce: 0.4458  m1_loss_mask: 0.1625  m1_loss_dice: 1.206  m1_loss_ce_0: 0.5602  m1_loss_mask_0: 0.1873  m1_loss_dice_0: 1.462  m1_loss_ce_1: 0.6205  m1_loss_mask_1: 0.1684  m1_loss_dice_1: 1.363  m1_loss_ce_2: 0.5431  m1_loss_mask_2: 0.1642  m1_loss_dice_2: 1.324  m1_loss_ce_3: 0.4932  m1_loss_mask_3: 0.1676  m1_loss_dice_3: 1.255  m1_loss_ce_4: 0.4855  m1_loss_mask_4: 0.1656  m1_loss_dice_4: 1.255  m1_loss_ce_5: 0.4639  m1_loss_mask_5: 0.1632  m1_loss_dice_5: 1.257  m1_loss_ce_6: 0.4359  m1_loss_mask_6: 0.1638  m1_loss_dice_6: 1.249  m1_loss_ce_7: 0.4389  m1_loss_mask_7: 0.1627  m1_loss_dice_7: 1.239  m1_loss_ce_8: 0.4465  m1_loss_mask_8: 0.1622  m1_loss_dice_8: 1.249  m2_loss_ce: 0.5014  m2_loss_mask: 0.1707  m2_loss_dice: 1.284  m2_loss_ce_0: 0.6261  m2_loss_mask_0: 0.2008  m2_loss_dice_0: 1.484  m2_loss_ce_1: 0.6825  m2_loss_mask_1: 0.1877  m2_loss_dice_1: 1.358  m2_loss_ce_2: 0.602  m2_loss_mask_2: 0.172  m2_loss_dice_2: 1.281  m2_loss_ce_3: 0.5645  m2_loss_mask_3: 0.1691  m2_loss_dice_3: 1.237  m2_loss_ce_4: 0.5635  m2_loss_mask_4: 0.1689  m2_loss_dice_4: 1.253  m2_loss_ce_5: 0.4997  m2_loss_mask_5: 0.1676  m2_loss_dice_5: 1.264  m2_loss_ce_6: 0.5197  m2_loss_mask_6: 0.1683  m2_loss_dice_6: 1.255  m2_loss_ce_7: 0.5012  m2_loss_mask_7: 0.1695  m2_loss_dice_7: 1.208  m2_loss_ce_8: 0.492  m2_loss_mask_8: 0.1691  m2_loss_dice_8: 1.294    time: 1.4816  last_time: 1.3699  data_time: 0.0753  last_data_time: 0.0525   lr: 0.0001  max_mem: 34442M
[10/05 12:22:22] d2.utils.events INFO:  eta: 0:04:26  iter: 819  total_loss: 39.81  m1_loss_ce: 0.4457  m1_loss_mask: 0.1653  m1_loss_dice: 1.215  m1_loss_ce_0: 0.5547  m1_loss_mask_0: 0.193  m1_loss_dice_0: 1.478  m1_loss_ce_1: 0.6104  m1_loss_mask_1: 0.1742  m1_loss_dice_1: 1.353  m1_loss_ce_2: 0.5607  m1_loss_mask_2: 0.1631  m1_loss_dice_2: 1.32  m1_loss_ce_3: 0.4799  m1_loss_mask_3: 0.1647  m1_loss_dice_3: 1.272  m1_loss_ce_4: 0.4477  m1_loss_mask_4: 0.1653  m1_loss_dice_4: 1.244  m1_loss_ce_5: 0.4805  m1_loss_mask_5: 0.1652  m1_loss_dice_5: 1.243  m1_loss_ce_6: 0.4515  m1_loss_mask_6: 0.1604  m1_loss_dice_6: 1.282  m1_loss_ce_7: 0.4667  m1_loss_mask_7: 0.1614  m1_loss_dice_7: 1.261  m1_loss_ce_8: 0.453  m1_loss_mask_8: 0.1647  m1_loss_dice_8: 1.237  m2_loss_ce: 0.4419  m2_loss_mask: 0.1689  m2_loss_dice: 1.355  m2_loss_ce_0: 0.6362  m2_loss_mask_0: 0.2001  m2_loss_dice_0: 1.493  m2_loss_ce_1: 0.655  m2_loss_mask_1: 0.1862  m2_loss_dice_1: 1.463  m2_loss_ce_2: 0.5995  m2_loss_mask_2: 0.1713  m2_loss_dice_2: 1.433  m2_loss_ce_3: 0.5463  m2_loss_mask_3: 0.1701  m2_loss_dice_3: 1.365  m2_loss_ce_4: 0.4994  m2_loss_mask_4: 0.169  m2_loss_dice_4: 1.344  m2_loss_ce_5: 0.4935  m2_loss_mask_5: 0.1651  m2_loss_dice_5: 1.348  m2_loss_ce_6: 0.5163  m2_loss_mask_6: 0.1692  m2_loss_dice_6: 1.287  m2_loss_ce_7: 0.4967  m2_loss_mask_7: 0.1687  m2_loss_dice_7: 1.307  m2_loss_ce_8: 0.4948  m2_loss_mask_8: 0.1685  m2_loss_dice_8: 1.333    time: 1.4804  last_time: 1.3639  data_time: 0.0684  last_data_time: 0.0640   lr: 0.0001  max_mem: 34442M
[10/05 12:22:52] d2.utils.events INFO:  eta: 0:03:56  iter: 839  total_loss: 39.71  m1_loss_ce: 0.4632  m1_loss_mask: 0.1555  m1_loss_dice: 1.2  m1_loss_ce_0: 0.5731  m1_loss_mask_0: 0.1832  m1_loss_dice_0: 1.413  m1_loss_ce_1: 0.6287  m1_loss_mask_1: 0.1636  m1_loss_dice_1: 1.332  m1_loss_ce_2: 0.6199  m1_loss_mask_2: 0.1621  m1_loss_dice_2: 1.277  m1_loss_ce_3: 0.5374  m1_loss_mask_3: 0.1602  m1_loss_dice_3: 1.216  m1_loss_ce_4: 0.4887  m1_loss_mask_4: 0.1593  m1_loss_dice_4: 1.237  m1_loss_ce_5: 0.4903  m1_loss_mask_5: 0.1556  m1_loss_dice_5: 1.19  m1_loss_ce_6: 0.4813  m1_loss_mask_6: 0.1584  m1_loss_dice_6: 1.2  m1_loss_ce_7: 0.4589  m1_loss_mask_7: 0.1574  m1_loss_dice_7: 1.21  m1_loss_ce_8: 0.4864  m1_loss_mask_8: 0.156  m1_loss_dice_8: 1.21  m2_loss_ce: 0.4895  m2_loss_mask: 0.1661  m2_loss_dice: 1.284  m2_loss_ce_0: 0.6042  m2_loss_mask_0: 0.1965  m2_loss_dice_0: 1.478  m2_loss_ce_1: 0.669  m2_loss_mask_1: 0.1833  m2_loss_dice_1: 1.383  m2_loss_ce_2: 0.5873  m2_loss_mask_2: 0.1709  m2_loss_dice_2: 1.36  m2_loss_ce_3: 0.588  m2_loss_mask_3: 0.1726  m2_loss_dice_3: 1.271  m2_loss_ce_4: 0.5724  m2_loss_mask_4: 0.1676  m2_loss_dice_4: 1.25  m2_loss_ce_5: 0.5385  m2_loss_mask_5: 0.1674  m2_loss_dice_5: 1.282  m2_loss_ce_6: 0.5086  m2_loss_mask_6: 0.1688  m2_loss_dice_6: 1.267  m2_loss_ce_7: 0.5141  m2_loss_mask_7: 0.1667  m2_loss_dice_7: 1.281  m2_loss_ce_8: 0.4828  m2_loss_mask_8: 0.1677  m2_loss_dice_8: 1.243    time: 1.4800  last_time: 1.4509  data_time: 0.0625  last_data_time: 0.0502   lr: 0.0001  max_mem: 34683M
[10/05 12:23:21] d2.utils.events INFO:  eta: 0:03:26  iter: 859  total_loss: 37.31  m1_loss_ce: 0.3762  m1_loss_mask: 0.1708  m1_loss_dice: 1.141  m1_loss_ce_0: 0.5052  m1_loss_mask_0: 0.2055  m1_loss_dice_0: 1.335  m1_loss_ce_1: 0.5283  m1_loss_mask_1: 0.1901  m1_loss_dice_1: 1.224  m1_loss_ce_2: 0.4904  m1_loss_mask_2: 0.1812  m1_loss_dice_2: 1.194  m1_loss_ce_3: 0.4304  m1_loss_mask_3: 0.1796  m1_loss_dice_3: 1.147  m1_loss_ce_4: 0.4206  m1_loss_mask_4: 0.1714  m1_loss_dice_4: 1.16  m1_loss_ce_5: 0.4197  m1_loss_mask_5: 0.1722  m1_loss_dice_5: 1.152  m1_loss_ce_6: 0.39  m1_loss_mask_6: 0.1691  m1_loss_dice_6: 1.12  m1_loss_ce_7: 0.3954  m1_loss_mask_7: 0.1696  m1_loss_dice_7: 1.183  m1_loss_ce_8: 0.3836  m1_loss_mask_8: 0.1709  m1_loss_dice_8: 1.122  m2_loss_ce: 0.4375  m2_loss_mask: 0.1799  m2_loss_dice: 1.177  m2_loss_ce_0: 0.5318  m2_loss_mask_0: 0.2213  m2_loss_dice_0: 1.371  m2_loss_ce_1: 0.6257  m2_loss_mask_1: 0.1983  m2_loss_dice_1: 1.273  m2_loss_ce_2: 0.5135  m2_loss_mask_2: 0.1825  m2_loss_dice_2: 1.238  m2_loss_ce_3: 0.474  m2_loss_mask_3: 0.1789  m2_loss_dice_3: 1.196  m2_loss_ce_4: 0.4849  m2_loss_mask_4: 0.1792  m2_loss_dice_4: 1.194  m2_loss_ce_5: 0.4565  m2_loss_mask_5: 0.1769  m2_loss_dice_5: 1.188  m2_loss_ce_6: 0.4322  m2_loss_mask_6: 0.1816  m2_loss_dice_6: 1.186  m2_loss_ce_7: 0.4459  m2_loss_mask_7: 0.1803  m2_loss_dice_7: 1.188  m2_loss_ce_8: 0.4165  m2_loss_mask_8: 0.1818  m2_loss_dice_8: 1.202    time: 1.4789  last_time: 1.5114  data_time: 0.0562  last_data_time: 0.0484   lr: 0.0001  max_mem: 34683M
[10/05 12:23:48] d2.utils.events INFO:  eta: 0:02:56  iter: 879  total_loss: 38.81  m1_loss_ce: 0.4398  m1_loss_mask: 0.1644  m1_loss_dice: 1.213  m1_loss_ce_0: 0.5562  m1_loss_mask_0: 0.1874  m1_loss_dice_0: 1.385  m1_loss_ce_1: 0.6089  m1_loss_mask_1: 0.1751  m1_loss_dice_1: 1.327  m1_loss_ce_2: 0.5363  m1_loss_mask_2: 0.1661  m1_loss_dice_2: 1.304  m1_loss_ce_3: 0.4802  m1_loss_mask_3: 0.1665  m1_loss_dice_3: 1.204  m1_loss_ce_4: 0.4654  m1_loss_mask_4: 0.1655  m1_loss_dice_4: 1.19  m1_loss_ce_5: 0.4528  m1_loss_mask_5: 0.164  m1_loss_dice_5: 1.227  m1_loss_ce_6: 0.4384  m1_loss_mask_6: 0.1636  m1_loss_dice_6: 1.216  m1_loss_ce_7: 0.41  m1_loss_mask_7: 0.164  m1_loss_dice_7: 1.223  m1_loss_ce_8: 0.4163  m1_loss_mask_8: 0.164  m1_loss_dice_8: 1.159  m2_loss_ce: 0.5195  m2_loss_mask: 0.169  m2_loss_dice: 1.26  m2_loss_ce_0: 0.6448  m2_loss_mask_0: 0.1991  m2_loss_dice_0: 1.461  m2_loss_ce_1: 0.6955  m2_loss_mask_1: 0.1849  m2_loss_dice_1: 1.405  m2_loss_ce_2: 0.6113  m2_loss_mask_2: 0.1749  m2_loss_dice_2: 1.291  m2_loss_ce_3: 0.5282  m2_loss_mask_3: 0.1701  m2_loss_dice_3: 1.259  m2_loss_ce_4: 0.522  m2_loss_mask_4: 0.1678  m2_loss_dice_4: 1.259  m2_loss_ce_5: 0.5359  m2_loss_mask_5: 0.1693  m2_loss_dice_5: 1.252  m2_loss_ce_6: 0.5007  m2_loss_mask_6: 0.169  m2_loss_dice_6: 1.216  m2_loss_ce_7: 0.5224  m2_loss_mask_7: 0.1691  m2_loss_dice_7: 1.269  m2_loss_ce_8: 0.525  m2_loss_mask_8: 0.1704  m2_loss_dice_8: 1.248    time: 1.4767  last_time: 1.3474  data_time: 0.0516  last_data_time: 0.0444   lr: 0.0001  max_mem: 34683M
[10/05 12:24:17] d2.utils.events INFO:  eta: 0:02:27  iter: 899  total_loss: 38.56  m1_loss_ce: 0.4282  m1_loss_mask: 0.1797  m1_loss_dice: 1.11  m1_loss_ce_0: 0.5562  m1_loss_mask_0: 0.2076  m1_loss_dice_0: 1.324  m1_loss_ce_1: 0.602  m1_loss_mask_1: 0.1916  m1_loss_dice_1: 1.271  m1_loss_ce_2: 0.5235  m1_loss_mask_2: 0.1864  m1_loss_dice_2: 1.218  m1_loss_ce_3: 0.4944  m1_loss_mask_3: 0.187  m1_loss_dice_3: 1.168  m1_loss_ce_4: 0.4698  m1_loss_mask_4: 0.1842  m1_loss_dice_4: 1.165  m1_loss_ce_5: 0.4394  m1_loss_mask_5: 0.1816  m1_loss_dice_5: 1.171  m1_loss_ce_6: 0.4654  m1_loss_mask_6: 0.1803  m1_loss_dice_6: 1.147  m1_loss_ce_7: 0.4229  m1_loss_mask_7: 0.1768  m1_loss_dice_7: 1.163  m1_loss_ce_8: 0.4545  m1_loss_mask_8: 0.1781  m1_loss_dice_8: 1.136  m2_loss_ce: 0.4743  m2_loss_mask: 0.1791  m2_loss_dice: 1.19  m2_loss_ce_0: 0.6005  m2_loss_mask_0: 0.2167  m2_loss_dice_0: 1.436  m2_loss_ce_1: 0.6751  m2_loss_mask_1: 0.2015  m2_loss_dice_1: 1.27  m2_loss_ce_2: 0.5759  m2_loss_mask_2: 0.1858  m2_loss_dice_2: 1.249  m2_loss_ce_3: 0.5362  m2_loss_mask_3: 0.1832  m2_loss_dice_3: 1.234  m2_loss_ce_4: 0.5229  m2_loss_mask_4: 0.181  m2_loss_dice_4: 1.186  m2_loss_ce_5: 0.504  m2_loss_mask_5: 0.1786  m2_loss_dice_5: 1.218  m2_loss_ce_6: 0.4853  m2_loss_mask_6: 0.1838  m2_loss_dice_6: 1.205  m2_loss_ce_7: 0.5016  m2_loss_mask_7: 0.1817  m2_loss_dice_7: 1.203  m2_loss_ce_8: 0.4729  m2_loss_mask_8: 0.1825  m2_loss_dice_8: 1.178    time: 1.4750  last_time: 1.3767  data_time: 0.0550  last_data_time: 0.0646   lr: 0.0001  max_mem: 34683M
[10/05 12:24:45] d2.utils.events INFO:  eta: 0:01:57  iter: 919  total_loss: 39.25  m1_loss_ce: 0.4786  m1_loss_mask: 0.165  m1_loss_dice: 1.181  m1_loss_ce_0: 0.5808  m1_loss_mask_0: 0.1928  m1_loss_dice_0: 1.348  m1_loss_ce_1: 0.581  m1_loss_mask_1: 0.1858  m1_loss_dice_1: 1.287  m1_loss_ce_2: 0.5377  m1_loss_mask_2: 0.168  m1_loss_dice_2: 1.289  m1_loss_ce_3: 0.507  m1_loss_mask_3: 0.1666  m1_loss_dice_3: 1.159  m1_loss_ce_4: 0.4836  m1_loss_mask_4: 0.1666  m1_loss_dice_4: 1.18  m1_loss_ce_5: 0.4535  m1_loss_mask_5: 0.1635  m1_loss_dice_5: 1.214  m1_loss_ce_6: 0.4454  m1_loss_mask_6: 0.1652  m1_loss_dice_6: 1.15  m1_loss_ce_7: 0.4681  m1_loss_mask_7: 0.1637  m1_loss_dice_7: 1.173  m1_loss_ce_8: 0.4352  m1_loss_mask_8: 0.1646  m1_loss_dice_8: 1.181  m2_loss_ce: 0.4705  m2_loss_mask: 0.1702  m2_loss_dice: 1.227  m2_loss_ce_0: 0.5928  m2_loss_mask_0: 0.1979  m2_loss_dice_0: 1.402  m2_loss_ce_1: 0.6811  m2_loss_mask_1: 0.1845  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.5991  m2_loss_mask_2: 0.1717  m2_loss_dice_2: 1.277  m2_loss_ce_3: 0.5471  m2_loss_mask_3: 0.1704  m2_loss_dice_3: 1.26  m2_loss_ce_4: 0.525  m2_loss_mask_4: 0.1698  m2_loss_dice_4: 1.204  m2_loss_ce_5: 0.5123  m2_loss_mask_5: 0.1692  m2_loss_dice_5: 1.235  m2_loss_ce_6: 0.4633  m2_loss_mask_6: 0.1701  m2_loss_dice_6: 1.237  m2_loss_ce_7: 0.4905  m2_loss_mask_7: 0.1699  m2_loss_dice_7: 1.206  m2_loss_ce_8: 0.4931  m2_loss_mask_8: 0.1679  m2_loss_dice_8: 1.201    time: 1.4735  last_time: 1.3885  data_time: 0.0556  last_data_time: 0.0506   lr: 0.0001  max_mem: 34683M
[10/05 12:25:14] d2.utils.events INFO:  eta: 0:01:28  iter: 939  total_loss: 39.87  m1_loss_ce: 0.4412  m1_loss_mask: 0.1516  m1_loss_dice: 1.217  m1_loss_ce_0: 0.5539  m1_loss_mask_0: 0.1783  m1_loss_dice_0: 1.403  m1_loss_ce_1: 0.6363  m1_loss_mask_1: 0.1669  m1_loss_dice_1: 1.354  m1_loss_ce_2: 0.5565  m1_loss_mask_2: 0.156  m1_loss_dice_2: 1.302  m1_loss_ce_3: 0.498  m1_loss_mask_3: 0.1596  m1_loss_dice_3: 1.253  m1_loss_ce_4: 0.4696  m1_loss_mask_4: 0.1551  m1_loss_dice_4: 1.25  m1_loss_ce_5: 0.458  m1_loss_mask_5: 0.1534  m1_loss_dice_5: 1.247  m1_loss_ce_6: 0.4414  m1_loss_mask_6: 0.1522  m1_loss_dice_6: 1.234  m1_loss_ce_7: 0.4284  m1_loss_mask_7: 0.1538  m1_loss_dice_7: 1.222  m1_loss_ce_8: 0.4327  m1_loss_mask_8: 0.1519  m1_loss_dice_8: 1.245  m2_loss_ce: 0.47  m2_loss_mask: 0.1561  m2_loss_dice: 1.297  m2_loss_ce_0: 0.6249  m2_loss_mask_0: 0.192  m2_loss_dice_0: 1.534  m2_loss_ce_1: 0.6874  m2_loss_mask_1: 0.179  m2_loss_dice_1: 1.417  m2_loss_ce_2: 0.6018  m2_loss_mask_2: 0.1606  m2_loss_dice_2: 1.381  m2_loss_ce_3: 0.5362  m2_loss_mask_3: 0.1617  m2_loss_dice_3: 1.32  m2_loss_ce_4: 0.5273  m2_loss_mask_4: 0.1606  m2_loss_dice_4: 1.35  m2_loss_ce_5: 0.5094  m2_loss_mask_5: 0.1581  m2_loss_dice_5: 1.266  m2_loss_ce_6: 0.4856  m2_loss_mask_6: 0.1584  m2_loss_dice_6: 1.318  m2_loss_ce_7: 0.496  m2_loss_mask_7: 0.1581  m2_loss_dice_7: 1.294  m2_loss_ce_8: 0.4753  m2_loss_mask_8: 0.1559  m2_loss_dice_8: 1.289    time: 1.4729  last_time: 1.5221  data_time: 0.0595  last_data_time: 0.0561   lr: 0.0001  max_mem: 34683M
[10/05 12:25:44] d2.utils.events INFO:  eta: 0:00:58  iter: 959  total_loss: 37.78  m1_loss_ce: 0.4054  m1_loss_mask: 0.1652  m1_loss_dice: 1.13  m1_loss_ce_0: 0.5312  m1_loss_mask_0: 0.1959  m1_loss_dice_0: 1.3  m1_loss_ce_1: 0.5601  m1_loss_mask_1: 0.1779  m1_loss_dice_1: 1.233  m1_loss_ce_2: 0.4995  m1_loss_mask_2: 0.1779  m1_loss_dice_2: 1.222  m1_loss_ce_3: 0.457  m1_loss_mask_3: 0.1761  m1_loss_dice_3: 1.165  m1_loss_ce_4: 0.4149  m1_loss_mask_4: 0.1734  m1_loss_dice_4: 1.166  m1_loss_ce_5: 0.4258  m1_loss_mask_5: 0.173  m1_loss_dice_5: 1.164  m1_loss_ce_6: 0.4255  m1_loss_mask_6: 0.1675  m1_loss_dice_6: 1.141  m1_loss_ce_7: 0.4048  m1_loss_mask_7: 0.1676  m1_loss_dice_7: 1.144  m1_loss_ce_8: 0.3865  m1_loss_mask_8: 0.166  m1_loss_dice_8: 1.149  m2_loss_ce: 0.4538  m2_loss_mask: 0.176  m2_loss_dice: 1.173  m2_loss_ce_0: 0.5838  m2_loss_mask_0: 0.2122  m2_loss_dice_0: 1.385  m2_loss_ce_1: 0.6248  m2_loss_mask_1: 0.1885  m2_loss_dice_1: 1.281  m2_loss_ce_2: 0.5391  m2_loss_mask_2: 0.1833  m2_loss_dice_2: 1.22  m2_loss_ce_3: 0.5073  m2_loss_mask_3: 0.179  m2_loss_dice_3: 1.207  m2_loss_ce_4: 0.4997  m2_loss_mask_4: 0.1763  m2_loss_dice_4: 1.19  m2_loss_ce_5: 0.4864  m2_loss_mask_5: 0.1755  m2_loss_dice_5: 1.219  m2_loss_ce_6: 0.4624  m2_loss_mask_6: 0.1769  m2_loss_dice_6: 1.144  m2_loss_ce_7: 0.4803  m2_loss_mask_7: 0.1755  m2_loss_dice_7: 1.15  m2_loss_ce_8: 0.44  m2_loss_mask_8: 0.1745  m2_loss_dice_8: 1.167    time: 1.4735  last_time: 1.3982  data_time: 0.0656  last_data_time: 0.0424   lr: 0.0001  max_mem: 34683M
[10/05 12:26:14] d2.utils.events INFO:  eta: 0:00:29  iter: 979  total_loss: 38.82  m1_loss_ce: 0.4188  m1_loss_mask: 0.1555  m1_loss_dice: 1.172  m1_loss_ce_0: 0.5093  m1_loss_mask_0: 0.1849  m1_loss_dice_0: 1.383  m1_loss_ce_1: 0.567  m1_loss_mask_1: 0.1673  m1_loss_dice_1: 1.284  m1_loss_ce_2: 0.5543  m1_loss_mask_2: 0.1586  m1_loss_dice_2: 1.227  m1_loss_ce_3: 0.4703  m1_loss_mask_3: 0.1564  m1_loss_dice_3: 1.227  m1_loss_ce_4: 0.4407  m1_loss_mask_4: 0.1556  m1_loss_dice_4: 1.245  m1_loss_ce_5: 0.4188  m1_loss_mask_5: 0.1575  m1_loss_dice_5: 1.22  m1_loss_ce_6: 0.4411  m1_loss_mask_6: 0.1542  m1_loss_dice_6: 1.164  m1_loss_ce_7: 0.4267  m1_loss_mask_7: 0.1533  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.4054  m1_loss_mask_8: 0.1521  m1_loss_dice_8: 1.195  m2_loss_ce: 0.4463  m2_loss_mask: 0.1638  m2_loss_dice: 1.247  m2_loss_ce_0: 0.5717  m2_loss_mask_0: 0.1985  m2_loss_dice_0: 1.434  m2_loss_ce_1: 0.6506  m2_loss_mask_1: 0.1815  m2_loss_dice_1: 1.357  m2_loss_ce_2: 0.5581  m2_loss_mask_2: 0.1657  m2_loss_dice_2: 1.325  m2_loss_ce_3: 0.487  m2_loss_mask_3: 0.168  m2_loss_dice_3: 1.253  m2_loss_ce_4: 0.4977  m2_loss_mask_4: 0.1654  m2_loss_dice_4: 1.231  m2_loss_ce_5: 0.4888  m2_loss_mask_5: 0.1616  m2_loss_dice_5: 1.259  m2_loss_ce_6: 0.465  m2_loss_mask_6: 0.1657  m2_loss_dice_6: 1.219  m2_loss_ce_7: 0.4573  m2_loss_mask_7: 0.1654  m2_loss_dice_7: 1.239  m2_loss_ce_8: 0.4691  m2_loss_mask_8: 0.1644  m2_loss_dice_8: 1.225    time: 1.4735  last_time: 1.5012  data_time: 0.0619  last_data_time: 0.0400   lr: 0.0001  max_mem: 34683M
[10/05 12:26:43] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/r50_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm/model_final.pth
[10/05 12:26:46] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 40.62  m1_loss_ce: 0.4693  m1_loss_mask: 0.1562  m1_loss_dice: 1.267  m1_loss_ce_0: 0.5846  m1_loss_mask_0: 0.176  m1_loss_dice_0: 1.482  m1_loss_ce_1: 0.6038  m1_loss_mask_1: 0.1707  m1_loss_dice_1: 1.398  m1_loss_ce_2: 0.5522  m1_loss_mask_2: 0.1613  m1_loss_dice_2: 1.353  m1_loss_ce_3: 0.4951  m1_loss_mask_3: 0.1638  m1_loss_dice_3: 1.299  m1_loss_ce_4: 0.4469  m1_loss_mask_4: 0.1617  m1_loss_dice_4: 1.283  m1_loss_ce_5: 0.4648  m1_loss_mask_5: 0.159  m1_loss_dice_5: 1.277  m1_loss_ce_6: 0.4693  m1_loss_mask_6: 0.1585  m1_loss_dice_6: 1.267  m1_loss_ce_7: 0.4562  m1_loss_mask_7: 0.1561  m1_loss_dice_7: 1.24  m1_loss_ce_8: 0.4611  m1_loss_mask_8: 0.1573  m1_loss_dice_8: 1.25  m2_loss_ce: 0.4706  m2_loss_mask: 0.1614  m2_loss_dice: 1.3  m2_loss_ce_0: 0.613  m2_loss_mask_0: 0.1876  m2_loss_dice_0: 1.554  m2_loss_ce_1: 0.6736  m2_loss_mask_1: 0.1769  m2_loss_dice_1: 1.474  m2_loss_ce_2: 0.6008  m2_loss_mask_2: 0.1622  m2_loss_dice_2: 1.407  m2_loss_ce_3: 0.5447  m2_loss_mask_3: 0.1635  m2_loss_dice_3: 1.347  m2_loss_ce_4: 0.5606  m2_loss_mask_4: 0.1587  m2_loss_dice_4: 1.368  m2_loss_ce_5: 0.5257  m2_loss_mask_5: 0.157  m2_loss_dice_5: 1.316  m2_loss_ce_6: 0.5163  m2_loss_mask_6: 0.158  m2_loss_dice_6: 1.318  m2_loss_ce_7: 0.5241  m2_loss_mask_7: 0.1625  m2_loss_dice_7: 1.331  m2_loss_ce_8: 0.4901  m2_loss_mask_8: 0.1598  m2_loss_dice_8: 1.322    time: 1.4737  last_time: 1.5440  data_time: 0.0771  last_data_time: 0.1471   lr: 0.0001  max_mem: 34683M
[10/05 12:26:46] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:24:30 (1.4737 s / it)
[10/05 12:26:46] d2.engine.hooks INFO: Total training time: 0:24:40 (0:00:09 on hooks)
[10/05 12:26:46] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[10/05 12:26:46] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[10/05 12:26:46] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/05 12:26:46] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/05 12:26:46] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[10/05 12:28:11] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval2h9lbuxd ...
[10/05 12:29:05] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 58.385 | 80.868 | 71.195 |      19       |
| Things | 49.576 | 80.440 | 61.674 |       8       |
| Stuff  | 64.792 | 81.179 | 78.120 |      11       |
[10/05 12:29:05] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.374 | 97.677 | 99.690 |     Stuff     |
| class_8  | 74.080 | 84.358 | 87.816 |     Stuff     |
| class_11 | 86.956 | 89.433 | 97.231 |     Stuff     |
| class_12 | 43.331 | 78.329 | 55.319 |     Stuff     |
| class_13 | 38.323 | 75.776 | 50.575 |     Stuff     |
| class_17 | 43.991 | 63.957 | 68.782 |     Stuff     |
| class_19 | 49.617 | 69.463 | 71.429 |     Stuff     |
| class_20 | 65.022 | 77.317 | 84.098 |     Stuff     |
| class_21 | 88.886 | 90.085 | 98.669 |     Stuff     |
| class_22 | 37.777 | 74.868 | 50.459 |     Stuff     |
| class_23 | 87.356 | 91.713 | 95.249 |     Stuff     |
| class_24 | 50.186 | 76.676 | 65.452 |    Things     |
| class_25 | 49.462 | 73.403 | 67.384 |    Things     |
| class_26 | 65.753 | 83.224 | 79.007 |    Things     |
| class_27 | 49.658 | 87.362 | 56.842 |    Things     |
| class_28 | 62.602 | 89.864 | 69.663 |    Things     |
| class_31 | 37.285 | 87.886 | 42.424 |    Things     |
| class_32 | 40.569 | 74.011 | 54.815 |    Things     |
| class_33 | 41.096 | 71.091 | 57.808 |    Things     |
[10/05 12:29:05] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/05 12:29:05] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[10/05 12:29:05] d2.evaluation.testing INFO: copypaste: 58.3854,80.8679,71.1953,49.5763,80.4395,61.6744,64.7920,81.1795,78.1196,97.3738,97.6769,99.6898,74.0796,84.3581,87.8156,86.9560,89.4326,97.2308,43.3307,78.3285,55.3191,38.3234,75.7757,50.5747,43.9906,63.9566,68.7820,49.6167,69.4634,71.4286,65.0223,77.3171,84.0982,88.8859,90.0845,98.6694,37.7773,74.8678,50.4587,87.3559,91.7131,95.2491,50.1860,76.6761,65.4519,49.4620,73.4029,67.3843,65.7526,83.2237,79.0071,49.6584,87.3619,56.8421,62.6020,89.8641,69.6629,37.2851,87.8864,42.4242,40.5687,74.0105,54.8148,41.0957,71.0905,57.8076
