[10/07 07:46:59] detectron2 INFO: Rank of current process: 0. World size: 2
[10/07 07:47:01] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/07 07:47:01] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_L1_L2_GradNorm_1000_1000_1000.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[10/07 07:47:01] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_Comb_2_L1_L2_GradNorm_1000_1000_1000.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml


INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/07 07:47:01] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/07 07:47:01] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm/config.yaml
[10/07 07:47:01] d2.utils.env INFO: Using a generated random seed 3774246
[10/07 07:47:05] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[10/07 07:47:05] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/07 07:47:05] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/07 07:47:05] d2.data.build INFO: Using training sampler TrainingSampler
[10/07 07:47:05] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/07 07:47:05] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/07 07:47:05] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/07 07:47:05] d2.data.build INFO: Making batched data loader with batch_size=4
[10/07 07:47:06] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/07 07:47:09] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[10/07 07:47:09] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/07 07:47:09] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/07 07:47:28] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/07 07:47:28] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth ...
[10/07 07:48:02] d2.utils.events INFO:  eta: 0:22:42  iter: 19  total_loss: 40.81  m1_loss_ce: 0.4738  m1_loss_mask: 0.1617  m1_loss_dice: 1.243  m1_loss_ce_0: 0.5951  m1_loss_mask_0: 0.1816  m1_loss_dice_0: 1.553  m1_loss_ce_1: 0.6355  m1_loss_mask_1: 0.1706  m1_loss_dice_1: 1.379  m1_loss_ce_2: 0.6237  m1_loss_mask_2: 0.1676  m1_loss_dice_2: 1.319  m1_loss_ce_3: 0.5364  m1_loss_mask_3: 0.1652  m1_loss_dice_3: 1.281  m1_loss_ce_4: 0.5016  m1_loss_mask_4: 0.1615  m1_loss_dice_4: 1.294  m1_loss_ce_5: 0.5068  m1_loss_mask_5: 0.1603  m1_loss_dice_5: 1.277  m1_loss_ce_6: 0.4937  m1_loss_mask_6: 0.1621  m1_loss_dice_6: 1.206  m1_loss_ce_7: 0.4993  m1_loss_mask_7: 0.1628  m1_loss_dice_7: 1.271  m1_loss_ce_8: 0.4952  m1_loss_mask_8: 0.1621  m1_loss_dice_8: 1.288  m2_loss_ce: 0.5159  m2_loss_mask: 0.1619  m2_loss_dice: 1.262  m2_loss_ce_0: 0.571  m2_loss_mask_0: 0.1873  m2_loss_dice_0: 1.544  m2_loss_ce_1: 0.6522  m2_loss_mask_1: 0.1685  m2_loss_dice_1: 1.384  m2_loss_ce_2: 0.6189  m2_loss_mask_2: 0.1579  m2_loss_dice_2: 1.284  m2_loss_ce_3: 0.5552  m2_loss_mask_3: 0.1589  m2_loss_dice_3: 1.273  m2_loss_ce_4: 0.5596  m2_loss_mask_4: 0.1612  m2_loss_dice_4: 1.284  m2_loss_ce_5: 0.5419  m2_loss_mask_5: 0.1576  m2_loss_dice_5: 1.268  m2_loss_ce_6: 0.5248  m2_loss_mask_6: 0.162  m2_loss_dice_6: 1.271  m2_loss_ce_7: 0.5322  m2_loss_mask_7: 0.1599  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.5281  m2_loss_mask_8: 0.1591  m2_loss_dice_8: 1.277    time: 1.4055  last_time: 1.4503  data_time: 0.2419  last_data_time: 0.0413   lr: 0.0001  max_mem: 33816M
[10/07 07:48:31] d2.utils.events INFO:  eta: 0:22:23  iter: 39  total_loss: 40.86  m1_loss_ce: 0.4926  m1_loss_mask: 0.1606  m1_loss_dice: 1.275  m1_loss_ce_0: 0.5884  m1_loss_mask_0: 0.1901  m1_loss_dice_0: 1.5  m1_loss_ce_1: 0.6659  m1_loss_mask_1: 0.1772  m1_loss_dice_1: 1.399  m1_loss_ce_2: 0.566  m1_loss_mask_2: 0.1626  m1_loss_dice_2: 1.367  m1_loss_ce_3: 0.566  m1_loss_mask_3: 0.1629  m1_loss_dice_3: 1.312  m1_loss_ce_4: 0.5383  m1_loss_mask_4: 0.1625  m1_loss_dice_4: 1.299  m1_loss_ce_5: 0.5245  m1_loss_mask_5: 0.1617  m1_loss_dice_5: 1.311  m1_loss_ce_6: 0.4905  m1_loss_mask_6: 0.1614  m1_loss_dice_6: 1.269  m1_loss_ce_7: 0.5268  m1_loss_mask_7: 0.1616  m1_loss_dice_7: 1.249  m1_loss_ce_8: 0.5119  m1_loss_mask_8: 0.1616  m1_loss_dice_8: 1.283  m2_loss_ce: 0.5502  m2_loss_mask: 0.1562  m2_loss_dice: 1.273  m2_loss_ce_0: 0.5697  m2_loss_mask_0: 0.1862  m2_loss_dice_0: 1.532  m2_loss_ce_1: 0.7005  m2_loss_mask_1: 0.1738  m2_loss_dice_1: 1.403  m2_loss_ce_2: 0.6309  m2_loss_mask_2: 0.1612  m2_loss_dice_2: 1.352  m2_loss_ce_3: 0.5699  m2_loss_mask_3: 0.1574  m2_loss_dice_3: 1.308  m2_loss_ce_4: 0.578  m2_loss_mask_4: 0.1599  m2_loss_dice_4: 1.274  m2_loss_ce_5: 0.5442  m2_loss_mask_5: 0.1576  m2_loss_dice_5: 1.274  m2_loss_ce_6: 0.5531  m2_loss_mask_6: 0.1578  m2_loss_dice_6: 1.258  m2_loss_ce_7: 0.5242  m2_loss_mask_7: 0.1557  m2_loss_dice_7: 1.278  m2_loss_ce_8: 0.5413  m2_loss_mask_8: 0.1569  m2_loss_dice_8: 1.278    time: 1.4119  last_time: 1.4806  data_time: 0.0482  last_data_time: 0.0493   lr: 0.0001  max_mem: 33856M
[10/07 07:48:59] d2.utils.events INFO:  eta: 0:22:07  iter: 59  total_loss: 41.01  m1_loss_ce: 0.5031  m1_loss_mask: 0.1617  m1_loss_dice: 1.245  m1_loss_ce_0: 0.5878  m1_loss_mask_0: 0.1935  m1_loss_dice_0: 1.535  m1_loss_ce_1: 0.6699  m1_loss_mask_1: 0.1722  m1_loss_dice_1: 1.367  m1_loss_ce_2: 0.5907  m1_loss_mask_2: 0.1645  m1_loss_dice_2: 1.325  m1_loss_ce_3: 0.5543  m1_loss_mask_3: 0.162  m1_loss_dice_3: 1.279  m1_loss_ce_4: 0.519  m1_loss_mask_4: 0.1645  m1_loss_dice_4: 1.296  m1_loss_ce_5: 0.5258  m1_loss_mask_5: 0.1597  m1_loss_dice_5: 1.29  m1_loss_ce_6: 0.4837  m1_loss_mask_6: 0.1609  m1_loss_dice_6: 1.262  m1_loss_ce_7: 0.4926  m1_loss_mask_7: 0.1598  m1_loss_dice_7: 1.256  m1_loss_ce_8: 0.4898  m1_loss_mask_8: 0.1625  m1_loss_dice_8: 1.257  m2_loss_ce: 0.5262  m2_loss_mask: 0.1661  m2_loss_dice: 1.245  m2_loss_ce_0: 0.5969  m2_loss_mask_0: 0.203  m2_loss_dice_0: 1.541  m2_loss_ce_1: 0.6857  m2_loss_mask_1: 0.1754  m2_loss_dice_1: 1.372  m2_loss_ce_2: 0.6221  m2_loss_mask_2: 0.1693  m2_loss_dice_2: 1.33  m2_loss_ce_3: 0.5792  m2_loss_mask_3: 0.1714  m2_loss_dice_3: 1.264  m2_loss_ce_4: 0.5412  m2_loss_mask_4: 0.17  m2_loss_dice_4: 1.269  m2_loss_ce_5: 0.5499  m2_loss_mask_5: 0.1649  m2_loss_dice_5: 1.267  m2_loss_ce_6: 0.5544  m2_loss_mask_6: 0.1682  m2_loss_dice_6: 1.24  m2_loss_ce_7: 0.5094  m2_loss_mask_7: 0.1676  m2_loss_dice_7: 1.271  m2_loss_ce_8: 0.5212  m2_loss_mask_8: 0.1672  m2_loss_dice_8: 1.257    time: 1.4144  last_time: 1.4161  data_time: 0.0510  last_data_time: 0.0372   lr: 0.0001  max_mem: 33856M
[10/07 07:49:27] d2.utils.events INFO:  eta: 0:21:28  iter: 79  total_loss: 38.73  m1_loss_ce: 0.4503  m1_loss_mask: 0.1654  m1_loss_dice: 1.186  m1_loss_ce_0: 0.5314  m1_loss_mask_0: 0.1966  m1_loss_dice_0: 1.436  m1_loss_ce_1: 0.6228  m1_loss_mask_1: 0.1761  m1_loss_dice_1: 1.334  m1_loss_ce_2: 0.5553  m1_loss_mask_2: 0.1714  m1_loss_dice_2: 1.259  m1_loss_ce_3: 0.483  m1_loss_mask_3: 0.1703  m1_loss_dice_3: 1.196  m1_loss_ce_4: 0.4677  m1_loss_mask_4: 0.1718  m1_loss_dice_4: 1.208  m1_loss_ce_5: 0.4634  m1_loss_mask_5: 0.1669  m1_loss_dice_5: 1.219  m1_loss_ce_6: 0.4439  m1_loss_mask_6: 0.1692  m1_loss_dice_6: 1.204  m1_loss_ce_7: 0.4403  m1_loss_mask_7: 0.167  m1_loss_dice_7: 1.184  m1_loss_ce_8: 0.4553  m1_loss_mask_8: 0.1662  m1_loss_dice_8: 1.186  m2_loss_ce: 0.4969  m2_loss_mask: 0.1622  m2_loss_dice: 1.159  m2_loss_ce_0: 0.5544  m2_loss_mask_0: 0.1858  m2_loss_dice_0: 1.42  m2_loss_ce_1: 0.676  m2_loss_mask_1: 0.1737  m2_loss_dice_1: 1.281  m2_loss_ce_2: 0.5959  m2_loss_mask_2: 0.1631  m2_loss_dice_2: 1.264  m2_loss_ce_3: 0.555  m2_loss_mask_3: 0.1669  m2_loss_dice_3: 1.2  m2_loss_ce_4: 0.5056  m2_loss_mask_4: 0.165  m2_loss_dice_4: 1.223  m2_loss_ce_5: 0.5232  m2_loss_mask_5: 0.16  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.4902  m2_loss_mask_6: 0.1636  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.4994  m2_loss_mask_7: 0.1624  m2_loss_dice_7: 1.199  m2_loss_ce_8: 0.5202  m2_loss_mask_8: 0.1599  m2_loss_dice_8: 1.168    time: 1.4058  last_time: 1.3426  data_time: 0.0444  last_data_time: 0.0429   lr: 0.0001  max_mem: 33856M
[10/07 07:49:55] d2.utils.events INFO:  eta: 0:21:00  iter: 99  total_loss: 38.71  m1_loss_ce: 0.4349  m1_loss_mask: 0.1668  m1_loss_dice: 1.193  m1_loss_ce_0: 0.5867  m1_loss_mask_0: 0.1988  m1_loss_dice_0: 1.418  m1_loss_ce_1: 0.6165  m1_loss_mask_1: 0.1812  m1_loss_dice_1: 1.321  m1_loss_ce_2: 0.5359  m1_loss_mask_2: 0.1733  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.5152  m1_loss_mask_3: 0.1697  m1_loss_dice_3: 1.224  m1_loss_ce_4: 0.4656  m1_loss_mask_4: 0.1698  m1_loss_dice_4: 1.203  m1_loss_ce_5: 0.4255  m1_loss_mask_5: 0.1694  m1_loss_dice_5: 1.202  m1_loss_ce_6: 0.447  m1_loss_mask_6: 0.1671  m1_loss_dice_6: 1.193  m1_loss_ce_7: 0.4404  m1_loss_mask_7: 0.1668  m1_loss_dice_7: 1.184  m1_loss_ce_8: 0.4621  m1_loss_mask_8: 0.1666  m1_loss_dice_8: 1.196  m2_loss_ce: 0.5195  m2_loss_mask: 0.1668  m2_loss_dice: 1.198  m2_loss_ce_0: 0.6004  m2_loss_mask_0: 0.1888  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.6582  m2_loss_mask_1: 0.1763  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.5874  m2_loss_mask_2: 0.167  m2_loss_dice_2: 1.257  m2_loss_ce_3: 0.5308  m2_loss_mask_3: 0.1694  m2_loss_dice_3: 1.194  m2_loss_ce_4: 0.5161  m2_loss_mask_4: 0.1684  m2_loss_dice_4: 1.184  m2_loss_ce_5: 0.5038  m2_loss_mask_5: 0.1668  m2_loss_dice_5: 1.193  m2_loss_ce_6: 0.4935  m2_loss_mask_6: 0.1674  m2_loss_dice_6: 1.177  m2_loss_ce_7: 0.4906  m2_loss_mask_7: 0.168  m2_loss_dice_7: 1.171  m2_loss_ce_8: 0.5081  m2_loss_mask_8: 0.1679  m2_loss_dice_8: 1.182    time: 1.4040  last_time: 1.3590  data_time: 0.0438  last_data_time: 0.0681   lr: 0.0001  max_mem: 33856M
[10/07 07:50:23] d2.utils.events INFO:  eta: 0:20:30  iter: 119  total_loss: 41.91  m1_loss_ce: 0.4723  m1_loss_mask: 0.1714  m1_loss_dice: 1.273  m1_loss_ce_0: 0.5615  m1_loss_mask_0: 0.1969  m1_loss_dice_0: 1.485  m1_loss_ce_1: 0.6724  m1_loss_mask_1: 0.1887  m1_loss_dice_1: 1.388  m1_loss_ce_2: 0.5633  m1_loss_mask_2: 0.1819  m1_loss_dice_2: 1.356  m1_loss_ce_3: 0.5224  m1_loss_mask_3: 0.1824  m1_loss_dice_3: 1.296  m1_loss_ce_4: 0.522  m1_loss_mask_4: 0.1765  m1_loss_dice_4: 1.3  m1_loss_ce_5: 0.526  m1_loss_mask_5: 0.175  m1_loss_dice_5: 1.286  m1_loss_ce_6: 0.4682  m1_loss_mask_6: 0.1704  m1_loss_dice_6: 1.272  m1_loss_ce_7: 0.4779  m1_loss_mask_7: 0.1712  m1_loss_dice_7: 1.247  m1_loss_ce_8: 0.4873  m1_loss_mask_8: 0.1712  m1_loss_dice_8: 1.269  m2_loss_ce: 0.5708  m2_loss_mask: 0.1633  m2_loss_dice: 1.278  m2_loss_ce_0: 0.5727  m2_loss_mask_0: 0.2028  m2_loss_dice_0: 1.509  m2_loss_ce_1: 0.7082  m2_loss_mask_1: 0.1809  m2_loss_dice_1: 1.373  m2_loss_ce_2: 0.6707  m2_loss_mask_2: 0.1719  m2_loss_dice_2: 1.323  m2_loss_ce_3: 0.6133  m2_loss_mask_3: 0.1654  m2_loss_dice_3: 1.302  m2_loss_ce_4: 0.5697  m2_loss_mask_4: 0.1646  m2_loss_dice_4: 1.283  m2_loss_ce_5: 0.59  m2_loss_mask_5: 0.1641  m2_loss_dice_5: 1.293  m2_loss_ce_6: 0.5759  m2_loss_mask_6: 0.1648  m2_loss_dice_6: 1.262  m2_loss_ce_7: 0.5707  m2_loss_mask_7: 0.1628  m2_loss_dice_7: 1.257  m2_loss_ce_8: 0.5543  m2_loss_mask_8: 0.1655  m2_loss_dice_8: 1.279    time: 1.4028  last_time: 1.3487  data_time: 0.0485  last_data_time: 0.0493   lr: 0.0001  max_mem: 33856M
[10/07 07:50:51] d2.utils.events INFO:  eta: 0:20:04  iter: 139  total_loss: 39.3  m1_loss_ce: 0.437  m1_loss_mask: 0.1487  m1_loss_dice: 1.271  m1_loss_ce_0: 0.546  m1_loss_mask_0: 0.1772  m1_loss_dice_0: 1.486  m1_loss_ce_1: 0.6414  m1_loss_mask_1: 0.1634  m1_loss_dice_1: 1.407  m1_loss_ce_2: 0.5733  m1_loss_mask_2: 0.1535  m1_loss_dice_2: 1.327  m1_loss_ce_3: 0.541  m1_loss_mask_3: 0.1518  m1_loss_dice_3: 1.293  m1_loss_ce_4: 0.4788  m1_loss_mask_4: 0.1522  m1_loss_dice_4: 1.297  m1_loss_ce_5: 0.4773  m1_loss_mask_5: 0.1534  m1_loss_dice_5: 1.282  m1_loss_ce_6: 0.4436  m1_loss_mask_6: 0.1507  m1_loss_dice_6: 1.262  m1_loss_ce_7: 0.4625  m1_loss_mask_7: 0.1485  m1_loss_dice_7: 1.269  m1_loss_ce_8: 0.4488  m1_loss_mask_8: 0.1468  m1_loss_dice_8: 1.268  m2_loss_ce: 0.5137  m2_loss_mask: 0.1491  m2_loss_dice: 1.293  m2_loss_ce_0: 0.5589  m2_loss_mask_0: 0.1808  m2_loss_dice_0: 1.557  m2_loss_ce_1: 0.6675  m2_loss_mask_1: 0.1598  m2_loss_dice_1: 1.369  m2_loss_ce_2: 0.604  m2_loss_mask_2: 0.1589  m2_loss_dice_2: 1.362  m2_loss_ce_3: 0.5558  m2_loss_mask_3: 0.1568  m2_loss_dice_3: 1.29  m2_loss_ce_4: 0.5352  m2_loss_mask_4: 0.1558  m2_loss_dice_4: 1.261  m2_loss_ce_5: 0.523  m2_loss_mask_5: 0.1512  m2_loss_dice_5: 1.281  m2_loss_ce_6: 0.5191  m2_loss_mask_6: 0.1521  m2_loss_dice_6: 1.279  m2_loss_ce_7: 0.4847  m2_loss_mask_7: 0.1508  m2_loss_dice_7: 1.274  m2_loss_ce_8: 0.509  m2_loss_mask_8: 0.1505  m2_loss_dice_8: 1.259    time: 1.4045  last_time: 1.4440  data_time: 0.0472  last_data_time: 0.0374   lr: 0.0001  max_mem: 34820M
[10/07 07:51:19] d2.utils.events INFO:  eta: 0:19:35  iter: 159  total_loss: 40.31  m1_loss_ce: 0.5293  m1_loss_mask: 0.1711  m1_loss_dice: 1.179  m1_loss_ce_0: 0.6169  m1_loss_mask_0: 0.195  m1_loss_dice_0: 1.465  m1_loss_ce_1: 0.6944  m1_loss_mask_1: 0.1817  m1_loss_dice_1: 1.342  m1_loss_ce_2: 0.6209  m1_loss_mask_2: 0.177  m1_loss_dice_2: 1.286  m1_loss_ce_3: 0.5637  m1_loss_mask_3: 0.1711  m1_loss_dice_3: 1.241  m1_loss_ce_4: 0.5518  m1_loss_mask_4: 0.1682  m1_loss_dice_4: 1.246  m1_loss_ce_5: 0.513  m1_loss_mask_5: 0.1707  m1_loss_dice_5: 1.217  m1_loss_ce_6: 0.544  m1_loss_mask_6: 0.1698  m1_loss_dice_6: 1.187  m1_loss_ce_7: 0.5209  m1_loss_mask_7: 0.1714  m1_loss_dice_7: 1.177  m1_loss_ce_8: 0.5215  m1_loss_mask_8: 0.1722  m1_loss_dice_8: 1.215  m2_loss_ce: 0.5691  m2_loss_mask: 0.1727  m2_loss_dice: 1.205  m2_loss_ce_0: 0.6307  m2_loss_mask_0: 0.2045  m2_loss_dice_0: 1.51  m2_loss_ce_1: 0.7191  m2_loss_mask_1: 0.1855  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.662  m2_loss_mask_2: 0.1734  m2_loss_dice_2: 1.296  m2_loss_ce_3: 0.6053  m2_loss_mask_3: 0.1731  m2_loss_dice_3: 1.229  m2_loss_ce_4: 0.5906  m2_loss_mask_4: 0.1743  m2_loss_dice_4: 1.232  m2_loss_ce_5: 0.6109  m2_loss_mask_5: 0.173  m2_loss_dice_5: 1.218  m2_loss_ce_6: 0.5712  m2_loss_mask_6: 0.1766  m2_loss_dice_6: 1.198  m2_loss_ce_7: 0.5718  m2_loss_mask_7: 0.1735  m2_loss_dice_7: 1.205  m2_loss_ce_8: 0.585  m2_loss_mask_8: 0.1724  m2_loss_dice_8: 1.205    time: 1.4036  last_time: 1.3451  data_time: 0.0469  last_data_time: 0.0583   lr: 0.0001  max_mem: 34820M
[10/07 07:51:48] d2.utils.events INFO:  eta: 0:19:08  iter: 179  total_loss: 40.04  m1_loss_ce: 0.4763  m1_loss_mask: 0.1593  m1_loss_dice: 1.234  m1_loss_ce_0: 0.5545  m1_loss_mask_0: 0.1906  m1_loss_dice_0: 1.427  m1_loss_ce_1: 0.6374  m1_loss_mask_1: 0.17  m1_loss_dice_1: 1.378  m1_loss_ce_2: 0.5783  m1_loss_mask_2: 0.1646  m1_loss_dice_2: 1.332  m1_loss_ce_3: 0.5357  m1_loss_mask_3: 0.1619  m1_loss_dice_3: 1.286  m1_loss_ce_4: 0.5041  m1_loss_mask_4: 0.1667  m1_loss_dice_4: 1.273  m1_loss_ce_5: 0.5122  m1_loss_mask_5: 0.1622  m1_loss_dice_5: 1.269  m1_loss_ce_6: 0.4845  m1_loss_mask_6: 0.1564  m1_loss_dice_6: 1.24  m1_loss_ce_7: 0.5085  m1_loss_mask_7: 0.1576  m1_loss_dice_7: 1.23  m1_loss_ce_8: 0.4721  m1_loss_mask_8: 0.1577  m1_loss_dice_8: 1.231  m2_loss_ce: 0.5362  m2_loss_mask: 0.1618  m2_loss_dice: 1.249  m2_loss_ce_0: 0.5849  m2_loss_mask_0: 0.1951  m2_loss_dice_0: 1.465  m2_loss_ce_1: 0.6939  m2_loss_mask_1: 0.1731  m2_loss_dice_1: 1.361  m2_loss_ce_2: 0.6693  m2_loss_mask_2: 0.1629  m2_loss_dice_2: 1.286  m2_loss_ce_3: 0.5742  m2_loss_mask_3: 0.1642  m2_loss_dice_3: 1.248  m2_loss_ce_4: 0.5314  m2_loss_mask_4: 0.1626  m2_loss_dice_4: 1.261  m2_loss_ce_5: 0.5645  m2_loss_mask_5: 0.1619  m2_loss_dice_5: 1.243  m2_loss_ce_6: 0.5548  m2_loss_mask_6: 0.1641  m2_loss_dice_6: 1.251  m2_loss_ce_7: 0.551  m2_loss_mask_7: 0.1637  m2_loss_dice_7: 1.234  m2_loss_ce_8: 0.5802  m2_loss_mask_8: 0.1603  m2_loss_dice_8: 1.264    time: 1.4038  last_time: 1.4869  data_time: 0.0454  last_data_time: 0.0422   lr: 0.0001  max_mem: 34820M
[10/07 07:52:16] d2.utils.events INFO:  eta: 0:18:40  iter: 199  total_loss: 39.04  m1_loss_ce: 0.4697  m1_loss_mask: 0.1743  m1_loss_dice: 1.186  m1_loss_ce_0: 0.5654  m1_loss_mask_0: 0.199  m1_loss_dice_0: 1.384  m1_loss_ce_1: 0.63  m1_loss_mask_1: 0.1848  m1_loss_dice_1: 1.273  m1_loss_ce_2: 0.5672  m1_loss_mask_2: 0.1764  m1_loss_dice_2: 1.227  m1_loss_ce_3: 0.5451  m1_loss_mask_3: 0.1784  m1_loss_dice_3: 1.189  m1_loss_ce_4: 0.4942  m1_loss_mask_4: 0.1762  m1_loss_dice_4: 1.212  m1_loss_ce_5: 0.4858  m1_loss_mask_5: 0.176  m1_loss_dice_5: 1.183  m1_loss_ce_6: 0.4975  m1_loss_mask_6: 0.1742  m1_loss_dice_6: 1.18  m1_loss_ce_7: 0.4797  m1_loss_mask_7: 0.1746  m1_loss_dice_7: 1.204  m1_loss_ce_8: 0.4935  m1_loss_mask_8: 0.1759  m1_loss_dice_8: 1.159  m2_loss_ce: 0.5037  m2_loss_mask: 0.1692  m2_loss_dice: 1.19  m2_loss_ce_0: 0.6099  m2_loss_mask_0: 0.2089  m2_loss_dice_0: 1.419  m2_loss_ce_1: 0.6734  m2_loss_mask_1: 0.1861  m2_loss_dice_1: 1.288  m2_loss_ce_2: 0.5896  m2_loss_mask_2: 0.1735  m2_loss_dice_2: 1.253  m2_loss_ce_3: 0.5595  m2_loss_mask_3: 0.1742  m2_loss_dice_3: 1.204  m2_loss_ce_4: 0.5405  m2_loss_mask_4: 0.1722  m2_loss_dice_4: 1.196  m2_loss_ce_5: 0.5726  m2_loss_mask_5: 0.1678  m2_loss_dice_5: 1.217  m2_loss_ce_6: 0.5267  m2_loss_mask_6: 0.1722  m2_loss_dice_6: 1.202  m2_loss_ce_7: 0.536  m2_loss_mask_7: 0.169  m2_loss_dice_7: 1.178  m2_loss_ce_8: 0.5157  m2_loss_mask_8: 0.1687  m2_loss_dice_8: 1.188    time: 1.4038  last_time: 1.4816  data_time: 0.0482  last_data_time: 0.0515   lr: 0.0001  max_mem: 34820M
[10/07 07:52:44] d2.utils.events INFO:  eta: 0:18:12  iter: 219  total_loss: 37.69  m1_loss_ce: 0.4629  m1_loss_mask: 0.1673  m1_loss_dice: 1.154  m1_loss_ce_0: 0.524  m1_loss_mask_0: 0.1851  m1_loss_dice_0: 1.376  m1_loss_ce_1: 0.5671  m1_loss_mask_1: 0.1705  m1_loss_dice_1: 1.28  m1_loss_ce_2: 0.5202  m1_loss_mask_2: 0.1688  m1_loss_dice_2: 1.222  m1_loss_ce_3: 0.4675  m1_loss_mask_3: 0.1721  m1_loss_dice_3: 1.19  m1_loss_ce_4: 0.4564  m1_loss_mask_4: 0.1663  m1_loss_dice_4: 1.178  m1_loss_ce_5: 0.4226  m1_loss_mask_5: 0.1661  m1_loss_dice_5: 1.181  m1_loss_ce_6: 0.4377  m1_loss_mask_6: 0.1683  m1_loss_dice_6: 1.154  m1_loss_ce_7: 0.4483  m1_loss_mask_7: 0.1647  m1_loss_dice_7: 1.145  m1_loss_ce_8: 0.4321  m1_loss_mask_8: 0.1646  m1_loss_dice_8: 1.174  m2_loss_ce: 0.4622  m2_loss_mask: 0.1678  m2_loss_dice: 1.183  m2_loss_ce_0: 0.5688  m2_loss_mask_0: 0.1842  m2_loss_dice_0: 1.389  m2_loss_ce_1: 0.6328  m2_loss_mask_1: 0.1717  m2_loss_dice_1: 1.289  m2_loss_ce_2: 0.5742  m2_loss_mask_2: 0.1627  m2_loss_dice_2: 1.233  m2_loss_ce_3: 0.5147  m2_loss_mask_3: 0.1694  m2_loss_dice_3: 1.183  m2_loss_ce_4: 0.5209  m2_loss_mask_4: 0.169  m2_loss_dice_4: 1.197  m2_loss_ce_5: 0.5221  m2_loss_mask_5: 0.1637  m2_loss_dice_5: 1.165  m2_loss_ce_6: 0.506  m2_loss_mask_6: 0.1699  m2_loss_dice_6: 1.16  m2_loss_ce_7: 0.4648  m2_loss_mask_7: 0.1679  m2_loss_dice_7: 1.182  m2_loss_ce_8: 0.474  m2_loss_mask_8: 0.1694  m2_loss_dice_8: 1.168    time: 1.4038  last_time: 1.4234  data_time: 0.0502  last_data_time: 0.0423   lr: 0.0001  max_mem: 34820M
[10/07 07:53:12] d2.utils.events INFO:  eta: 0:17:44  iter: 239  total_loss: 40.11  m1_loss_ce: 0.4722  m1_loss_mask: 0.1696  m1_loss_dice: 1.246  m1_loss_ce_0: 0.5519  m1_loss_mask_0: 0.2032  m1_loss_dice_0: 1.481  m1_loss_ce_1: 0.6469  m1_loss_mask_1: 0.1828  m1_loss_dice_1: 1.382  m1_loss_ce_2: 0.5754  m1_loss_mask_2: 0.1739  m1_loss_dice_2: 1.31  m1_loss_ce_3: 0.518  m1_loss_mask_3: 0.1729  m1_loss_dice_3: 1.275  m1_loss_ce_4: 0.4868  m1_loss_mask_4: 0.1712  m1_loss_dice_4: 1.284  m1_loss_ce_5: 0.4799  m1_loss_mask_5: 0.1679  m1_loss_dice_5: 1.265  m1_loss_ce_6: 0.4752  m1_loss_mask_6: 0.1697  m1_loss_dice_6: 1.294  m1_loss_ce_7: 0.476  m1_loss_mask_7: 0.1699  m1_loss_dice_7: 1.231  m1_loss_ce_8: 0.4747  m1_loss_mask_8: 0.1694  m1_loss_dice_8: 1.217  m2_loss_ce: 0.5112  m2_loss_mask: 0.1651  m2_loss_dice: 1.207  m2_loss_ce_0: 0.5655  m2_loss_mask_0: 0.1987  m2_loss_dice_0: 1.507  m2_loss_ce_1: 0.6728  m2_loss_mask_1: 0.1824  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.6411  m2_loss_mask_2: 0.1715  m2_loss_dice_2: 1.313  m2_loss_ce_3: 0.5429  m2_loss_mask_3: 0.169  m2_loss_dice_3: 1.282  m2_loss_ce_4: 0.5634  m2_loss_mask_4: 0.1652  m2_loss_dice_4: 1.274  m2_loss_ce_5: 0.5472  m2_loss_mask_5: 0.1662  m2_loss_dice_5: 1.237  m2_loss_ce_6: 0.5498  m2_loss_mask_6: 0.1652  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.5119  m2_loss_mask_7: 0.1648  m2_loss_dice_7: 1.241  m2_loss_ce_8: 0.504  m2_loss_mask_8: 0.1622  m2_loss_dice_8: 1.237    time: 1.4049  last_time: 1.4129  data_time: 0.0459  last_data_time: 0.0407   lr: 0.0001  max_mem: 34820M
[10/07 07:53:41] d2.utils.events INFO:  eta: 0:17:17  iter: 259  total_loss: 39.83  m1_loss_ce: 0.4977  m1_loss_mask: 0.1561  m1_loss_dice: 1.208  m1_loss_ce_0: 0.5794  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.44  m1_loss_ce_1: 0.6105  m1_loss_mask_1: 0.1662  m1_loss_dice_1: 1.344  m1_loss_ce_2: 0.5573  m1_loss_mask_2: 0.1595  m1_loss_dice_2: 1.274  m1_loss_ce_3: 0.5435  m1_loss_mask_3: 0.1608  m1_loss_dice_3: 1.273  m1_loss_ce_4: 0.5038  m1_loss_mask_4: 0.1593  m1_loss_dice_4: 1.255  m1_loss_ce_5: 0.5002  m1_loss_mask_5: 0.1565  m1_loss_dice_5: 1.226  m1_loss_ce_6: 0.5124  m1_loss_mask_6: 0.1564  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.4932  m1_loss_mask_7: 0.1577  m1_loss_dice_7: 1.204  m1_loss_ce_8: 0.4986  m1_loss_mask_8: 0.1563  m1_loss_dice_8: 1.2  m2_loss_ce: 0.5509  m2_loss_mask: 0.1525  m2_loss_dice: 1.217  m2_loss_ce_0: 0.598  m2_loss_mask_0: 0.1862  m2_loss_dice_0: 1.448  m2_loss_ce_1: 0.6874  m2_loss_mask_1: 0.1659  m2_loss_dice_1: 1.326  m2_loss_ce_2: 0.6077  m2_loss_mask_2: 0.1559  m2_loss_dice_2: 1.321  m2_loss_ce_3: 0.5786  m2_loss_mask_3: 0.1572  m2_loss_dice_3: 1.256  m2_loss_ce_4: 0.5553  m2_loss_mask_4: 0.1569  m2_loss_dice_4: 1.241  m2_loss_ce_5: 0.5595  m2_loss_mask_5: 0.1522  m2_loss_dice_5: 1.27  m2_loss_ce_6: 0.5489  m2_loss_mask_6: 0.155  m2_loss_dice_6: 1.245  m2_loss_ce_7: 0.5298  m2_loss_mask_7: 0.1526  m2_loss_dice_7: 1.222  m2_loss_ce_8: 0.5508  m2_loss_mask_8: 0.1531  m2_loss_dice_8: 1.243    time: 1.4063  last_time: 1.4130  data_time: 0.0475  last_data_time: 0.0733   lr: 0.0001  max_mem: 34820M
[10/07 07:54:10] d2.utils.events INFO:  eta: 0:16:49  iter: 279  total_loss: 40.11  m1_loss_ce: 0.4959  m1_loss_mask: 0.171  m1_loss_dice: 1.197  m1_loss_ce_0: 0.5827  m1_loss_mask_0: 0.2014  m1_loss_dice_0: 1.406  m1_loss_ce_1: 0.6155  m1_loss_mask_1: 0.1849  m1_loss_dice_1: 1.274  m1_loss_ce_2: 0.6  m1_loss_mask_2: 0.1772  m1_loss_dice_2: 1.267  m1_loss_ce_3: 0.5486  m1_loss_mask_3: 0.1794  m1_loss_dice_3: 1.238  m1_loss_ce_4: 0.515  m1_loss_mask_4: 0.176  m1_loss_dice_4: 1.22  m1_loss_ce_5: 0.5169  m1_loss_mask_5: 0.176  m1_loss_dice_5: 1.252  m1_loss_ce_6: 0.5311  m1_loss_mask_6: 0.1745  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.519  m1_loss_mask_7: 0.1751  m1_loss_dice_7: 1.229  m1_loss_ce_8: 0.5416  m1_loss_mask_8: 0.1739  m1_loss_dice_8: 1.186  m2_loss_ce: 0.5422  m2_loss_mask: 0.17  m2_loss_dice: 1.18  m2_loss_ce_0: 0.5892  m2_loss_mask_0: 0.2055  m2_loss_dice_0: 1.509  m2_loss_ce_1: 0.6898  m2_loss_mask_1: 0.1804  m2_loss_dice_1: 1.326  m2_loss_ce_2: 0.6244  m2_loss_mask_2: 0.17  m2_loss_dice_2: 1.322  m2_loss_ce_3: 0.5692  m2_loss_mask_3: 0.1708  m2_loss_dice_3: 1.253  m2_loss_ce_4: 0.5324  m2_loss_mask_4: 0.1726  m2_loss_dice_4: 1.25  m2_loss_ce_5: 0.5897  m2_loss_mask_5: 0.1659  m2_loss_dice_5: 1.197  m2_loss_ce_6: 0.545  m2_loss_mask_6: 0.1704  m2_loss_dice_6: 1.229  m2_loss_ce_7: 0.5324  m2_loss_mask_7: 0.17  m2_loss_dice_7: 1.196  m2_loss_ce_8: 0.5361  m2_loss_mask_8: 0.1667  m2_loss_dice_8: 1.24    time: 1.4074  last_time: 1.4993  data_time: 0.0472  last_data_time: 0.0459   lr: 0.0001  max_mem: 34820M
[10/07 07:54:38] d2.utils.events INFO:  eta: 0:16:22  iter: 299  total_loss: 39.32  m1_loss_ce: 0.4818  m1_loss_mask: 0.1671  m1_loss_dice: 1.201  m1_loss_ce_0: 0.5642  m1_loss_mask_0: 0.1841  m1_loss_dice_0: 1.406  m1_loss_ce_1: 0.5974  m1_loss_mask_1: 0.1763  m1_loss_dice_1: 1.343  m1_loss_ce_2: 0.5274  m1_loss_mask_2: 0.1698  m1_loss_dice_2: 1.281  m1_loss_ce_3: 0.4942  m1_loss_mask_3: 0.1702  m1_loss_dice_3: 1.236  m1_loss_ce_4: 0.4687  m1_loss_mask_4: 0.1693  m1_loss_dice_4: 1.236  m1_loss_ce_5: 0.4887  m1_loss_mask_5: 0.1671  m1_loss_dice_5: 1.24  m1_loss_ce_6: 0.489  m1_loss_mask_6: 0.1674  m1_loss_dice_6: 1.211  m1_loss_ce_7: 0.4672  m1_loss_mask_7: 0.1663  m1_loss_dice_7: 1.207  m1_loss_ce_8: 0.4643  m1_loss_mask_8: 0.1672  m1_loss_dice_8: 1.245  m2_loss_ce: 0.5412  m2_loss_mask: 0.165  m2_loss_dice: 1.205  m2_loss_ce_0: 0.5798  m2_loss_mask_0: 0.1942  m2_loss_dice_0: 1.437  m2_loss_ce_1: 0.6765  m2_loss_mask_1: 0.1773  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.6191  m2_loss_mask_2: 0.1698  m2_loss_dice_2: 1.273  m2_loss_ce_3: 0.5658  m2_loss_mask_3: 0.1686  m2_loss_dice_3: 1.253  m2_loss_ce_4: 0.5446  m2_loss_mask_4: 0.1709  m2_loss_dice_4: 1.219  m2_loss_ce_5: 0.5707  m2_loss_mask_5: 0.1678  m2_loss_dice_5: 1.216  m2_loss_ce_6: 0.527  m2_loss_mask_6: 0.1702  m2_loss_dice_6: 1.222  m2_loss_ce_7: 0.5282  m2_loss_mask_7: 0.1691  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.5131  m2_loss_mask_8: 0.1677  m2_loss_dice_8: 1.231    time: 1.4071  last_time: 1.3518  data_time: 0.0482  last_data_time: 0.0470   lr: 0.0001  max_mem: 34820M
[10/07 07:55:06] d2.utils.events INFO:  eta: 0:15:53  iter: 319  total_loss: 40.08  m1_loss_ce: 0.4826  m1_loss_mask: 0.1718  m1_loss_dice: 1.225  m1_loss_ce_0: 0.5934  m1_loss_mask_0: 0.2037  m1_loss_dice_0: 1.376  m1_loss_ce_1: 0.6155  m1_loss_mask_1: 0.1905  m1_loss_dice_1: 1.323  m1_loss_ce_2: 0.5537  m1_loss_mask_2: 0.1868  m1_loss_dice_2: 1.293  m1_loss_ce_3: 0.5084  m1_loss_mask_3: 0.18  m1_loss_dice_3: 1.235  m1_loss_ce_4: 0.4789  m1_loss_mask_4: 0.1781  m1_loss_dice_4: 1.205  m1_loss_ce_5: 0.472  m1_loss_mask_5: 0.1794  m1_loss_dice_5: 1.218  m1_loss_ce_6: 0.5003  m1_loss_mask_6: 0.1812  m1_loss_dice_6: 1.182  m1_loss_ce_7: 0.4552  m1_loss_mask_7: 0.1812  m1_loss_dice_7: 1.193  m1_loss_ce_8: 0.4868  m1_loss_mask_8: 0.1748  m1_loss_dice_8: 1.187  m2_loss_ce: 0.5153  m2_loss_mask: 0.1748  m2_loss_dice: 1.219  m2_loss_ce_0: 0.5805  m2_loss_mask_0: 0.2116  m2_loss_dice_0: 1.437  m2_loss_ce_1: 0.6533  m2_loss_mask_1: 0.1934  m2_loss_dice_1: 1.32  m2_loss_ce_2: 0.5755  m2_loss_mask_2: 0.1757  m2_loss_dice_2: 1.299  m2_loss_ce_3: 0.5585  m2_loss_mask_3: 0.177  m2_loss_dice_3: 1.233  m2_loss_ce_4: 0.5222  m2_loss_mask_4: 0.1805  m2_loss_dice_4: 1.251  m2_loss_ce_5: 0.5336  m2_loss_mask_5: 0.178  m2_loss_dice_5: 1.223  m2_loss_ce_6: 0.4998  m2_loss_mask_6: 0.1771  m2_loss_dice_6: 1.205  m2_loss_ce_7: 0.4937  m2_loss_mask_7: 0.1757  m2_loss_dice_7: 1.215  m2_loss_ce_8: 0.5055  m2_loss_mask_8: 0.1753  m2_loss_dice_8: 1.189    time: 1.4063  last_time: 1.3869  data_time: 0.0459  last_data_time: 0.0408   lr: 0.0001  max_mem: 34820M
[10/07 07:55:34] d2.utils.events INFO:  eta: 0:15:26  iter: 339  total_loss: 40.02  m1_loss_ce: 0.4833  m1_loss_mask: 0.1697  m1_loss_dice: 1.211  m1_loss_ce_0: 0.5627  m1_loss_mask_0: 0.1928  m1_loss_dice_0: 1.459  m1_loss_ce_1: 0.6184  m1_loss_mask_1: 0.1793  m1_loss_dice_1: 1.372  m1_loss_ce_2: 0.5558  m1_loss_mask_2: 0.1748  m1_loss_dice_2: 1.317  m1_loss_ce_3: 0.5223  m1_loss_mask_3: 0.1727  m1_loss_dice_3: 1.27  m1_loss_ce_4: 0.4982  m1_loss_mask_4: 0.1698  m1_loss_dice_4: 1.293  m1_loss_ce_5: 0.4969  m1_loss_mask_5: 0.17  m1_loss_dice_5: 1.278  m1_loss_ce_6: 0.4727  m1_loss_mask_6: 0.1696  m1_loss_dice_6: 1.237  m1_loss_ce_7: 0.4801  m1_loss_mask_7: 0.169  m1_loss_dice_7: 1.25  m1_loss_ce_8: 0.4919  m1_loss_mask_8: 0.1711  m1_loss_dice_8: 1.232  m2_loss_ce: 0.5096  m2_loss_mask: 0.1655  m2_loss_dice: 1.244  m2_loss_ce_0: 0.5921  m2_loss_mask_0: 0.1951  m2_loss_dice_0: 1.503  m2_loss_ce_1: 0.68  m2_loss_mask_1: 0.1811  m2_loss_dice_1: 1.339  m2_loss_ce_2: 0.6219  m2_loss_mask_2: 0.1678  m2_loss_dice_2: 1.33  m2_loss_ce_3: 0.5614  m2_loss_mask_3: 0.1674  m2_loss_dice_3: 1.221  m2_loss_ce_4: 0.5379  m2_loss_mask_4: 0.1704  m2_loss_dice_4: 1.288  m2_loss_ce_5: 0.553  m2_loss_mask_5: 0.1675  m2_loss_dice_5: 1.257  m2_loss_ce_6: 0.5088  m2_loss_mask_6: 0.1688  m2_loss_dice_6: 1.276  m2_loss_ce_7: 0.5084  m2_loss_mask_7: 0.1683  m2_loss_dice_7: 1.274  m2_loss_ce_8: 0.537  m2_loss_mask_8: 0.1652  m2_loss_dice_8: 1.258    time: 1.4071  last_time: 1.4907  data_time: 0.0453  last_data_time: 0.0372   lr: 0.0001  max_mem: 34820M
[10/07 07:56:02] d2.utils.events INFO:  eta: 0:14:58  iter: 359  total_loss: 40.32  m1_loss_ce: 0.494  m1_loss_mask: 0.1689  m1_loss_dice: 1.214  m1_loss_ce_0: 0.5682  m1_loss_mask_0: 0.1918  m1_loss_dice_0: 1.422  m1_loss_ce_1: 0.6254  m1_loss_mask_1: 0.1786  m1_loss_dice_1: 1.352  m1_loss_ce_2: 0.5846  m1_loss_mask_2: 0.1728  m1_loss_dice_2: 1.301  m1_loss_ce_3: 0.5323  m1_loss_mask_3: 0.1694  m1_loss_dice_3: 1.233  m1_loss_ce_4: 0.5086  m1_loss_mask_4: 0.1682  m1_loss_dice_4: 1.212  m1_loss_ce_5: 0.5032  m1_loss_mask_5: 0.1672  m1_loss_dice_5: 1.282  m1_loss_ce_6: 0.4845  m1_loss_mask_6: 0.1691  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.4945  m1_loss_mask_7: 0.1678  m1_loss_dice_7: 1.227  m1_loss_ce_8: 0.4963  m1_loss_mask_8: 0.1688  m1_loss_dice_8: 1.25  m2_loss_ce: 0.574  m2_loss_mask: 0.1711  m2_loss_dice: 1.248  m2_loss_ce_0: 0.6108  m2_loss_mask_0: 0.1996  m2_loss_dice_0: 1.507  m2_loss_ce_1: 0.6892  m2_loss_mask_1: 0.1833  m2_loss_dice_1: 1.348  m2_loss_ce_2: 0.6441  m2_loss_mask_2: 0.1718  m2_loss_dice_2: 1.292  m2_loss_ce_3: 0.5853  m2_loss_mask_3: 0.1736  m2_loss_dice_3: 1.248  m2_loss_ce_4: 0.6087  m2_loss_mask_4: 0.1743  m2_loss_dice_4: 1.24  m2_loss_ce_5: 0.5761  m2_loss_mask_5: 0.1696  m2_loss_dice_5: 1.257  m2_loss_ce_6: 0.5711  m2_loss_mask_6: 0.1737  m2_loss_dice_6: 1.233  m2_loss_ce_7: 0.5699  m2_loss_mask_7: 0.1732  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.583  m2_loss_mask_8: 0.1719  m2_loss_dice_8: 1.268    time: 1.4070  last_time: 1.3433  data_time: 0.0443  last_data_time: 0.0432   lr: 0.0001  max_mem: 34820M
[10/07 07:56:31] d2.utils.events INFO:  eta: 0:14:30  iter: 379  total_loss: 40.2  m1_loss_ce: 0.4895  m1_loss_mask: 0.1818  m1_loss_dice: 1.204  m1_loss_ce_0: 0.5818  m1_loss_mask_0: 0.2187  m1_loss_dice_0: 1.43  m1_loss_ce_1: 0.6288  m1_loss_mask_1: 0.2034  m1_loss_dice_1: 1.326  m1_loss_ce_2: 0.5789  m1_loss_mask_2: 0.1941  m1_loss_dice_2: 1.285  m1_loss_ce_3: 0.5371  m1_loss_mask_3: 0.1877  m1_loss_dice_3: 1.23  m1_loss_ce_4: 0.4877  m1_loss_mask_4: 0.1857  m1_loss_dice_4: 1.231  m1_loss_ce_5: 0.4749  m1_loss_mask_5: 0.1877  m1_loss_dice_5: 1.234  m1_loss_ce_6: 0.4947  m1_loss_mask_6: 0.1828  m1_loss_dice_6: 1.205  m1_loss_ce_7: 0.5054  m1_loss_mask_7: 0.1828  m1_loss_dice_7: 1.201  m1_loss_ce_8: 0.5052  m1_loss_mask_8: 0.1836  m1_loss_dice_8: 1.23  m2_loss_ce: 0.5506  m2_loss_mask: 0.1909  m2_loss_dice: 1.253  m2_loss_ce_0: 0.5803  m2_loss_mask_0: 0.2286  m2_loss_dice_0: 1.469  m2_loss_ce_1: 0.688  m2_loss_mask_1: 0.2025  m2_loss_dice_1: 1.341  m2_loss_ce_2: 0.629  m2_loss_mask_2: 0.195  m2_loss_dice_2: 1.291  m2_loss_ce_3: 0.5662  m2_loss_mask_3: 0.1942  m2_loss_dice_3: 1.227  m2_loss_ce_4: 0.5478  m2_loss_mask_4: 0.1945  m2_loss_dice_4: 1.23  m2_loss_ce_5: 0.5515  m2_loss_mask_5: 0.1929  m2_loss_dice_5: 1.241  m2_loss_ce_6: 0.5526  m2_loss_mask_6: 0.1904  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.5403  m2_loss_mask_7: 0.1917  m2_loss_dice_7: 1.219  m2_loss_ce_8: 0.5522  m2_loss_mask_8: 0.1895  m2_loss_dice_8: 1.22    time: 1.4075  last_time: 1.3799  data_time: 0.0420  last_data_time: 0.0402   lr: 0.0001  max_mem: 34820M
[10/07 07:56:59] d2.utils.events INFO:  eta: 0:14:01  iter: 399  total_loss: 37.34  m1_loss_ce: 0.4336  m1_loss_mask: 0.1726  m1_loss_dice: 1.153  m1_loss_ce_0: 0.5436  m1_loss_mask_0: 0.199  m1_loss_dice_0: 1.313  m1_loss_ce_1: 0.6035  m1_loss_mask_1: 0.1861  m1_loss_dice_1: 1.234  m1_loss_ce_2: 0.5053  m1_loss_mask_2: 0.1839  m1_loss_dice_2: 1.23  m1_loss_ce_3: 0.4582  m1_loss_mask_3: 0.1791  m1_loss_dice_3: 1.194  m1_loss_ce_4: 0.4326  m1_loss_mask_4: 0.1742  m1_loss_dice_4: 1.163  m1_loss_ce_5: 0.4408  m1_loss_mask_5: 0.1714  m1_loss_dice_5: 1.185  m1_loss_ce_6: 0.4251  m1_loss_mask_6: 0.1726  m1_loss_dice_6: 1.148  m1_loss_ce_7: 0.3929  m1_loss_mask_7: 0.1713  m1_loss_dice_7: 1.164  m1_loss_ce_8: 0.4032  m1_loss_mask_8: 0.1728  m1_loss_dice_8: 1.161  m2_loss_ce: 0.5063  m2_loss_mask: 0.1809  m2_loss_dice: 1.17  m2_loss_ce_0: 0.5611  m2_loss_mask_0: 0.2081  m2_loss_dice_0: 1.39  m2_loss_ce_1: 0.6523  m2_loss_mask_1: 0.1946  m2_loss_dice_1: 1.294  m2_loss_ce_2: 0.5868  m2_loss_mask_2: 0.1873  m2_loss_dice_2: 1.237  m2_loss_ce_3: 0.5358  m2_loss_mask_3: 0.1816  m2_loss_dice_3: 1.197  m2_loss_ce_4: 0.4928  m2_loss_mask_4: 0.1822  m2_loss_dice_4: 1.161  m2_loss_ce_5: 0.5246  m2_loss_mask_5: 0.1801  m2_loss_dice_5: 1.191  m2_loss_ce_6: 0.5017  m2_loss_mask_6: 0.1837  m2_loss_dice_6: 1.17  m2_loss_ce_7: 0.5121  m2_loss_mask_7: 0.1808  m2_loss_dice_7: 1.166  m2_loss_ce_8: 0.4899  m2_loss_mask_8: 0.1814  m2_loss_dice_8: 1.19    time: 1.4070  last_time: 1.3722  data_time: 0.0494  last_data_time: 0.0545   lr: 0.0001  max_mem: 34820M
[10/07 07:57:27] d2.utils.events INFO:  eta: 0:13:34  iter: 419  total_loss: 38.6  m1_loss_ce: 0.4816  m1_loss_mask: 0.1604  m1_loss_dice: 1.158  m1_loss_ce_0: 0.5135  m1_loss_mask_0: 0.1892  m1_loss_dice_0: 1.41  m1_loss_ce_1: 0.5977  m1_loss_mask_1: 0.1824  m1_loss_dice_1: 1.309  m1_loss_ce_2: 0.5376  m1_loss_mask_2: 0.1631  m1_loss_dice_2: 1.238  m1_loss_ce_3: 0.4872  m1_loss_mask_3: 0.165  m1_loss_dice_3: 1.186  m1_loss_ce_4: 0.4559  m1_loss_mask_4: 0.1654  m1_loss_dice_4: 1.199  m1_loss_ce_5: 0.4821  m1_loss_mask_5: 0.1609  m1_loss_dice_5: 1.189  m1_loss_ce_6: 0.4401  m1_loss_mask_6: 0.1595  m1_loss_dice_6: 1.191  m1_loss_ce_7: 0.4285  m1_loss_mask_7: 0.1614  m1_loss_dice_7: 1.179  m1_loss_ce_8: 0.441  m1_loss_mask_8: 0.1612  m1_loss_dice_8: 1.166  m2_loss_ce: 0.5173  m2_loss_mask: 0.1708  m2_loss_dice: 1.204  m2_loss_ce_0: 0.5895  m2_loss_mask_0: 0.1997  m2_loss_dice_0: 1.428  m2_loss_ce_1: 0.6506  m2_loss_mask_1: 0.1779  m2_loss_dice_1: 1.339  m2_loss_ce_2: 0.5997  m2_loss_mask_2: 0.1719  m2_loss_dice_2: 1.297  m2_loss_ce_3: 0.5521  m2_loss_mask_3: 0.1751  m2_loss_dice_3: 1.207  m2_loss_ce_4: 0.5702  m2_loss_mask_4: 0.1743  m2_loss_dice_4: 1.227  m2_loss_ce_5: 0.5303  m2_loss_mask_5: 0.1695  m2_loss_dice_5: 1.231  m2_loss_ce_6: 0.5308  m2_loss_mask_6: 0.172  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.518  m2_loss_mask_7: 0.1698  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.5218  m2_loss_mask_8: 0.1704  m2_loss_dice_8: 1.199    time: 1.4076  last_time: 1.4667  data_time: 0.0455  last_data_time: 0.0549   lr: 0.0001  max_mem: 34820M
[10/07 07:57:56] d2.utils.events INFO:  eta: 0:13:06  iter: 439  total_loss: 37.2  m1_loss_ce: 0.4186  m1_loss_mask: 0.1631  m1_loss_dice: 1.117  m1_loss_ce_0: 0.52  m1_loss_mask_0: 0.1871  m1_loss_dice_0: 1.278  m1_loss_ce_1: 0.5848  m1_loss_mask_1: 0.1734  m1_loss_dice_1: 1.254  m1_loss_ce_2: 0.4905  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.179  m1_loss_ce_3: 0.4763  m1_loss_mask_3: 0.1675  m1_loss_dice_3: 1.14  m1_loss_ce_4: 0.4248  m1_loss_mask_4: 0.1658  m1_loss_dice_4: 1.171  m1_loss_ce_5: 0.4248  m1_loss_mask_5: 0.1645  m1_loss_dice_5: 1.097  m1_loss_ce_6: 0.4163  m1_loss_mask_6: 0.1635  m1_loss_dice_6: 1.117  m1_loss_ce_7: 0.4363  m1_loss_mask_7: 0.1622  m1_loss_dice_7: 1.137  m1_loss_ce_8: 0.427  m1_loss_mask_8: 0.162  m1_loss_dice_8: 1.095  m2_loss_ce: 0.4647  m2_loss_mask: 0.1636  m2_loss_dice: 1.148  m2_loss_ce_0: 0.5655  m2_loss_mask_0: 0.1913  m2_loss_dice_0: 1.354  m2_loss_ce_1: 0.6182  m2_loss_mask_1: 0.1824  m2_loss_dice_1: 1.206  m2_loss_ce_2: 0.5657  m2_loss_mask_2: 0.1628  m2_loss_dice_2: 1.169  m2_loss_ce_3: 0.493  m2_loss_mask_3: 0.1668  m2_loss_dice_3: 1.166  m2_loss_ce_4: 0.4554  m2_loss_mask_4: 0.1636  m2_loss_dice_4: 1.15  m2_loss_ce_5: 0.4817  m2_loss_mask_5: 0.1613  m2_loss_dice_5: 1.136  m2_loss_ce_6: 0.469  m2_loss_mask_6: 0.1639  m2_loss_dice_6: 1.158  m2_loss_ce_7: 0.4826  m2_loss_mask_7: 0.1634  m2_loss_dice_7: 1.144  m2_loss_ce_8: 0.4465  m2_loss_mask_8: 0.1594  m2_loss_dice_8: 1.12    time: 1.4075  last_time: 1.3989  data_time: 0.0472  last_data_time: 0.0322   lr: 0.0001  max_mem: 34820M
[10/07 07:58:24] d2.utils.events INFO:  eta: 0:12:37  iter: 459  total_loss: 40.62  m1_loss_ce: 0.4695  m1_loss_mask: 0.1725  m1_loss_dice: 1.192  m1_loss_ce_0: 0.5317  m1_loss_mask_0: 0.2148  m1_loss_dice_0: 1.423  m1_loss_ce_1: 0.5805  m1_loss_mask_1: 0.1857  m1_loss_dice_1: 1.322  m1_loss_ce_2: 0.5602  m1_loss_mask_2: 0.1766  m1_loss_dice_2: 1.273  m1_loss_ce_3: 0.4804  m1_loss_mask_3: 0.1768  m1_loss_dice_3: 1.207  m1_loss_ce_4: 0.4534  m1_loss_mask_4: 0.1755  m1_loss_dice_4: 1.225  m1_loss_ce_5: 0.4609  m1_loss_mask_5: 0.1701  m1_loss_dice_5: 1.201  m1_loss_ce_6: 0.4679  m1_loss_mask_6: 0.1768  m1_loss_dice_6: 1.215  m1_loss_ce_7: 0.4525  m1_loss_mask_7: 0.1725  m1_loss_dice_7: 1.185  m1_loss_ce_8: 0.4496  m1_loss_mask_8: 0.1725  m1_loss_dice_8: 1.194  m2_loss_ce: 0.5772  m2_loss_mask: 0.1707  m2_loss_dice: 1.218  m2_loss_ce_0: 0.5814  m2_loss_mask_0: 0.1996  m2_loss_dice_0: 1.507  m2_loss_ce_1: 0.6899  m2_loss_mask_1: 0.1875  m2_loss_dice_1: 1.329  m2_loss_ce_2: 0.6102  m2_loss_mask_2: 0.177  m2_loss_dice_2: 1.284  m2_loss_ce_3: 0.5835  m2_loss_mask_3: 0.1733  m2_loss_dice_3: 1.262  m2_loss_ce_4: 0.6096  m2_loss_mask_4: 0.1733  m2_loss_dice_4: 1.241  m2_loss_ce_5: 0.5802  m2_loss_mask_5: 0.1704  m2_loss_dice_5: 1.246  m2_loss_ce_6: 0.5486  m2_loss_mask_6: 0.1717  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.5591  m2_loss_mask_7: 0.1723  m2_loss_dice_7: 1.205  m2_loss_ce_8: 0.5659  m2_loss_mask_8: 0.1718  m2_loss_dice_8: 1.231    time: 1.4072  last_time: 1.3643  data_time: 0.0476  last_data_time: 0.0424   lr: 0.0001  max_mem: 34820M
[10/07 07:58:52] d2.utils.events INFO:  eta: 0:12:09  iter: 479  total_loss: 38.11  m1_loss_ce: 0.4511  m1_loss_mask: 0.1479  m1_loss_dice: 1.184  m1_loss_ce_0: 0.5458  m1_loss_mask_0: 0.1766  m1_loss_dice_0: 1.392  m1_loss_ce_1: 0.6066  m1_loss_mask_1: 0.1646  m1_loss_dice_1: 1.303  m1_loss_ce_2: 0.5447  m1_loss_mask_2: 0.1522  m1_loss_dice_2: 1.207  m1_loss_ce_3: 0.5042  m1_loss_mask_3: 0.152  m1_loss_dice_3: 1.187  m1_loss_ce_4: 0.4575  m1_loss_mask_4: 0.1505  m1_loss_dice_4: 1.207  m1_loss_ce_5: 0.4601  m1_loss_mask_5: 0.1523  m1_loss_dice_5: 1.18  m1_loss_ce_6: 0.4523  m1_loss_mask_6: 0.1485  m1_loss_dice_6: 1.163  m1_loss_ce_7: 0.451  m1_loss_mask_7: 0.1488  m1_loss_dice_7: 1.198  m1_loss_ce_8: 0.4638  m1_loss_mask_8: 0.1493  m1_loss_dice_8: 1.142  m2_loss_ce: 0.4875  m2_loss_mask: 0.1471  m2_loss_dice: 1.181  m2_loss_ce_0: 0.5574  m2_loss_mask_0: 0.1759  m2_loss_dice_0: 1.424  m2_loss_ce_1: 0.6493  m2_loss_mask_1: 0.1582  m2_loss_dice_1: 1.288  m2_loss_ce_2: 0.6037  m2_loss_mask_2: 0.1471  m2_loss_dice_2: 1.273  m2_loss_ce_3: 0.5689  m2_loss_mask_3: 0.1487  m2_loss_dice_3: 1.224  m2_loss_ce_4: 0.5355  m2_loss_mask_4: 0.1481  m2_loss_dice_4: 1.208  m2_loss_ce_5: 0.5425  m2_loss_mask_5: 0.147  m2_loss_dice_5: 1.232  m2_loss_ce_6: 0.5182  m2_loss_mask_6: 0.1475  m2_loss_dice_6: 1.181  m2_loss_ce_7: 0.5289  m2_loss_mask_7: 0.1468  m2_loss_dice_7: 1.208  m2_loss_ce_8: 0.5174  m2_loss_mask_8: 0.1445  m2_loss_dice_8: 1.174    time: 1.4076  last_time: 1.3827  data_time: 0.0485  last_data_time: 0.0442   lr: 0.0001  max_mem: 34820M
[10/07 07:59:21] d2.utils.events INFO:  eta: 0:11:41  iter: 499  total_loss: 38.14  m1_loss_ce: 0.4195  m1_loss_mask: 0.1601  m1_loss_dice: 1.16  m1_loss_ce_0: 0.5671  m1_loss_mask_0: 0.1945  m1_loss_dice_0: 1.374  m1_loss_ce_1: 0.5809  m1_loss_mask_1: 0.1717  m1_loss_dice_1: 1.31  m1_loss_ce_2: 0.5314  m1_loss_mask_2: 0.1657  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.5115  m1_loss_mask_3: 0.1664  m1_loss_dice_3: 1.205  m1_loss_ce_4: 0.4645  m1_loss_mask_4: 0.1652  m1_loss_dice_4: 1.21  m1_loss_ce_5: 0.4473  m1_loss_mask_5: 0.1613  m1_loss_dice_5: 1.196  m1_loss_ce_6: 0.4293  m1_loss_mask_6: 0.1625  m1_loss_dice_6: 1.162  m1_loss_ce_7: 0.4761  m1_loss_mask_7: 0.1609  m1_loss_dice_7: 1.158  m1_loss_ce_8: 0.4471  m1_loss_mask_8: 0.1616  m1_loss_dice_8: 1.161  m2_loss_ce: 0.492  m2_loss_mask: 0.1676  m2_loss_dice: 1.189  m2_loss_ce_0: 0.5996  m2_loss_mask_0: 0.2039  m2_loss_dice_0: 1.464  m2_loss_ce_1: 0.6624  m2_loss_mask_1: 0.1781  m2_loss_dice_1: 1.32  m2_loss_ce_2: 0.5814  m2_loss_mask_2: 0.1735  m2_loss_dice_2: 1.27  m2_loss_ce_3: 0.5407  m2_loss_mask_3: 0.171  m2_loss_dice_3: 1.217  m2_loss_ce_4: 0.542  m2_loss_mask_4: 0.1695  m2_loss_dice_4: 1.213  m2_loss_ce_5: 0.5417  m2_loss_mask_5: 0.1672  m2_loss_dice_5: 1.197  m2_loss_ce_6: 0.5354  m2_loss_mask_6: 0.1685  m2_loss_dice_6: 1.179  m2_loss_ce_7: 0.5397  m2_loss_mask_7: 0.167  m2_loss_dice_7: 1.195  m2_loss_ce_8: 0.5186  m2_loss_mask_8: 0.167  m2_loss_dice_8: 1.192    time: 1.4081  last_time: 1.3456  data_time: 0.0551  last_data_time: 0.0386   lr: 0.0001  max_mem: 34820M
[10/07 07:59:49] d2.utils.events INFO:  eta: 0:11:13  iter: 519  total_loss: 39.53  m1_loss_ce: 0.4466  m1_loss_mask: 0.1642  m1_loss_dice: 1.185  m1_loss_ce_0: 0.5796  m1_loss_mask_0: 0.1924  m1_loss_dice_0: 1.358  m1_loss_ce_1: 0.6006  m1_loss_mask_1: 0.1775  m1_loss_dice_1: 1.298  m1_loss_ce_2: 0.546  m1_loss_mask_2: 0.1723  m1_loss_dice_2: 1.261  m1_loss_ce_3: 0.4963  m1_loss_mask_3: 0.1658  m1_loss_dice_3: 1.193  m1_loss_ce_4: 0.4504  m1_loss_mask_4: 0.1663  m1_loss_dice_4: 1.202  m1_loss_ce_5: 0.4408  m1_loss_mask_5: 0.1666  m1_loss_dice_5: 1.189  m1_loss_ce_6: 0.4703  m1_loss_mask_6: 0.1666  m1_loss_dice_6: 1.196  m1_loss_ce_7: 0.4375  m1_loss_mask_7: 0.1638  m1_loss_dice_7: 1.191  m1_loss_ce_8: 0.4321  m1_loss_mask_8: 0.1642  m1_loss_dice_8: 1.185  m2_loss_ce: 0.5213  m2_loss_mask: 0.1673  m2_loss_dice: 1.205  m2_loss_ce_0: 0.549  m2_loss_mask_0: 0.2098  m2_loss_dice_0: 1.492  m2_loss_ce_1: 0.7043  m2_loss_mask_1: 0.1813  m2_loss_dice_1: 1.321  m2_loss_ce_2: 0.624  m2_loss_mask_2: 0.1707  m2_loss_dice_2: 1.257  m2_loss_ce_3: 0.5722  m2_loss_mask_3: 0.1672  m2_loss_dice_3: 1.217  m2_loss_ce_4: 0.5414  m2_loss_mask_4: 0.1699  m2_loss_dice_4: 1.239  m2_loss_ce_5: 0.5447  m2_loss_mask_5: 0.166  m2_loss_dice_5: 1.221  m2_loss_ce_6: 0.5127  m2_loss_mask_6: 0.167  m2_loss_dice_6: 1.218  m2_loss_ce_7: 0.5252  m2_loss_mask_7: 0.1681  m2_loss_dice_7: 1.202  m2_loss_ce_8: 0.521  m2_loss_mask_8: 0.1671  m2_loss_dice_8: 1.219    time: 1.4077  last_time: 1.3369  data_time: 0.0482  last_data_time: 0.0385   lr: 0.0001  max_mem: 34820M
[10/07 08:00:17] d2.utils.events INFO:  eta: 0:10:45  iter: 539  total_loss: 40  m1_loss_ce: 0.4648  m1_loss_mask: 0.1623  m1_loss_dice: 1.194  m1_loss_ce_0: 0.5675  m1_loss_mask_0: 0.1883  m1_loss_dice_0: 1.412  m1_loss_ce_1: 0.6671  m1_loss_mask_1: 0.1778  m1_loss_dice_1: 1.334  m1_loss_ce_2: 0.6017  m1_loss_mask_2: 0.1658  m1_loss_dice_2: 1.294  m1_loss_ce_3: 0.5322  m1_loss_mask_3: 0.1637  m1_loss_dice_3: 1.235  m1_loss_ce_4: 0.5338  m1_loss_mask_4: 0.1628  m1_loss_dice_4: 1.212  m1_loss_ce_5: 0.494  m1_loss_mask_5: 0.1614  m1_loss_dice_5: 1.196  m1_loss_ce_6: 0.5008  m1_loss_mask_6: 0.1619  m1_loss_dice_6: 1.201  m1_loss_ce_7: 0.4902  m1_loss_mask_7: 0.1594  m1_loss_dice_7: 1.231  m1_loss_ce_8: 0.458  m1_loss_mask_8: 0.1622  m1_loss_dice_8: 1.222  m2_loss_ce: 0.5472  m2_loss_mask: 0.1705  m2_loss_dice: 1.24  m2_loss_ce_0: 0.638  m2_loss_mask_0: 0.2026  m2_loss_dice_0: 1.463  m2_loss_ce_1: 0.6981  m2_loss_mask_1: 0.1809  m2_loss_dice_1: 1.336  m2_loss_ce_2: 0.6272  m2_loss_mask_2: 0.1748  m2_loss_dice_2: 1.285  m2_loss_ce_3: 0.5686  m2_loss_mask_3: 0.1716  m2_loss_dice_3: 1.25  m2_loss_ce_4: 0.5723  m2_loss_mask_4: 0.1721  m2_loss_dice_4: 1.233  m2_loss_ce_5: 0.5653  m2_loss_mask_5: 0.1701  m2_loss_dice_5: 1.243  m2_loss_ce_6: 0.5536  m2_loss_mask_6: 0.169  m2_loss_dice_6: 1.197  m2_loss_ce_7: 0.5323  m2_loss_mask_7: 0.1706  m2_loss_dice_7: 1.212  m2_loss_ce_8: 0.55  m2_loss_mask_8: 0.1711  m2_loss_dice_8: 1.207    time: 1.4074  last_time: 1.3824  data_time: 0.0504  last_data_time: 0.0536   lr: 0.0001  max_mem: 34820M
[10/07 08:00:46] d2.utils.events INFO:  eta: 0:10:17  iter: 559  total_loss: 39.58  m1_loss_ce: 0.4864  m1_loss_mask: 0.1544  m1_loss_dice: 1.219  m1_loss_ce_0: 0.5831  m1_loss_mask_0: 0.1816  m1_loss_dice_0: 1.409  m1_loss_ce_1: 0.6362  m1_loss_mask_1: 0.1654  m1_loss_dice_1: 1.272  m1_loss_ce_2: 0.5739  m1_loss_mask_2: 0.1592  m1_loss_dice_2: 1.285  m1_loss_ce_3: 0.5151  m1_loss_mask_3: 0.1555  m1_loss_dice_3: 1.231  m1_loss_ce_4: 0.4698  m1_loss_mask_4: 0.1541  m1_loss_dice_4: 1.218  m1_loss_ce_5: 0.48  m1_loss_mask_5: 0.1551  m1_loss_dice_5: 1.236  m1_loss_ce_6: 0.4493  m1_loss_mask_6: 0.1551  m1_loss_dice_6: 1.217  m1_loss_ce_7: 0.4536  m1_loss_mask_7: 0.1547  m1_loss_dice_7: 1.218  m1_loss_ce_8: 0.4882  m1_loss_mask_8: 0.1543  m1_loss_dice_8: 1.198  m2_loss_ce: 0.5638  m2_loss_mask: 0.1612  m2_loss_dice: 1.238  m2_loss_ce_0: 0.6149  m2_loss_mask_0: 0.1882  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.6697  m2_loss_mask_1: 0.17  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.6482  m2_loss_mask_2: 0.1631  m2_loss_dice_2: 1.234  m2_loss_ce_3: 0.6138  m2_loss_mask_3: 0.1588  m2_loss_dice_3: 1.253  m2_loss_ce_4: 0.5782  m2_loss_mask_4: 0.1616  m2_loss_dice_4: 1.225  m2_loss_ce_5: 0.5651  m2_loss_mask_5: 0.1573  m2_loss_dice_5: 1.208  m2_loss_ce_6: 0.5434  m2_loss_mask_6: 0.1582  m2_loss_dice_6: 1.213  m2_loss_ce_7: 0.5265  m2_loss_mask_7: 0.1602  m2_loss_dice_7: 1.219  m2_loss_ce_8: 0.5545  m2_loss_mask_8: 0.161  m2_loss_dice_8: 1.217    time: 1.4086  last_time: 1.3860  data_time: 0.0546  last_data_time: 0.0654   lr: 0.0001  max_mem: 34820M
[10/07 08:01:14] d2.utils.events INFO:  eta: 0:09:49  iter: 579  total_loss: 39.78  m1_loss_ce: 0.515  m1_loss_mask: 0.1513  m1_loss_dice: 1.17  m1_loss_ce_0: 0.5563  m1_loss_mask_0: 0.174  m1_loss_dice_0: 1.44  m1_loss_ce_1: 0.6028  m1_loss_mask_1: 0.1587  m1_loss_dice_1: 1.36  m1_loss_ce_2: 0.5389  m1_loss_mask_2: 0.1524  m1_loss_dice_2: 1.289  m1_loss_ce_3: 0.5266  m1_loss_mask_3: 0.1527  m1_loss_dice_3: 1.2  m1_loss_ce_4: 0.499  m1_loss_mask_4: 0.1515  m1_loss_dice_4: 1.222  m1_loss_ce_5: 0.4899  m1_loss_mask_5: 0.1464  m1_loss_dice_5: 1.202  m1_loss_ce_6: 0.4991  m1_loss_mask_6: 0.1512  m1_loss_dice_6: 1.197  m1_loss_ce_7: 0.4839  m1_loss_mask_7: 0.1507  m1_loss_dice_7: 1.222  m1_loss_ce_8: 0.4894  m1_loss_mask_8: 0.1534  m1_loss_dice_8: 1.201  m2_loss_ce: 0.5573  m2_loss_mask: 0.1508  m2_loss_dice: 1.239  m2_loss_ce_0: 0.5728  m2_loss_mask_0: 0.1838  m2_loss_dice_0: 1.564  m2_loss_ce_1: 0.6359  m2_loss_mask_1: 0.1659  m2_loss_dice_1: 1.356  m2_loss_ce_2: 0.6245  m2_loss_mask_2: 0.1532  m2_loss_dice_2: 1.328  m2_loss_ce_3: 0.5562  m2_loss_mask_3: 0.155  m2_loss_dice_3: 1.281  m2_loss_ce_4: 0.5947  m2_loss_mask_4: 0.152  m2_loss_dice_4: 1.248  m2_loss_ce_5: 0.551  m2_loss_mask_5: 0.1507  m2_loss_dice_5: 1.284  m2_loss_ce_6: 0.5324  m2_loss_mask_6: 0.1528  m2_loss_dice_6: 1.237  m2_loss_ce_7: 0.5206  m2_loss_mask_7: 0.1515  m2_loss_dice_7: 1.256  m2_loss_ce_8: 0.5463  m2_loss_mask_8: 0.1519  m2_loss_dice_8: 1.258    time: 1.4087  last_time: 1.4710  data_time: 0.0491  last_data_time: 0.0547   lr: 0.0001  max_mem: 34820M
[10/07 08:01:43] d2.utils.events INFO:  eta: 0:09:21  iter: 599  total_loss: 39.12  m1_loss_ce: 0.4484  m1_loss_mask: 0.1588  m1_loss_dice: 1.211  m1_loss_ce_0: 0.518  m1_loss_mask_0: 0.179  m1_loss_dice_0: 1.37  m1_loss_ce_1: 0.5823  m1_loss_mask_1: 0.1674  m1_loss_dice_1: 1.364  m1_loss_ce_2: 0.5543  m1_loss_mask_2: 0.1603  m1_loss_dice_2: 1.282  m1_loss_ce_3: 0.4925  m1_loss_mask_3: 0.1601  m1_loss_dice_3: 1.227  m1_loss_ce_4: 0.4799  m1_loss_mask_4: 0.16  m1_loss_dice_4: 1.247  m1_loss_ce_5: 0.4702  m1_loss_mask_5: 0.1598  m1_loss_dice_5: 1.248  m1_loss_ce_6: 0.4486  m1_loss_mask_6: 0.1574  m1_loss_dice_6: 1.221  m1_loss_ce_7: 0.4457  m1_loss_mask_7: 0.1581  m1_loss_dice_7: 1.216  m1_loss_ce_8: 0.4543  m1_loss_mask_8: 0.1578  m1_loss_dice_8: 1.239  m2_loss_ce: 0.5437  m2_loss_mask: 0.1615  m2_loss_dice: 1.237  m2_loss_ce_0: 0.5818  m2_loss_mask_0: 0.187  m2_loss_dice_0: 1.44  m2_loss_ce_1: 0.6689  m2_loss_mask_1: 0.1712  m2_loss_dice_1: 1.303  m2_loss_ce_2: 0.6393  m2_loss_mask_2: 0.1663  m2_loss_dice_2: 1.298  m2_loss_ce_3: 0.5789  m2_loss_mask_3: 0.165  m2_loss_dice_3: 1.251  m2_loss_ce_4: 0.5732  m2_loss_mask_4: 0.161  m2_loss_dice_4: 1.22  m2_loss_ce_5: 0.5485  m2_loss_mask_5: 0.1601  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.5539  m2_loss_mask_6: 0.1628  m2_loss_dice_6: 1.202  m2_loss_ce_7: 0.5327  m2_loss_mask_7: 0.1618  m2_loss_dice_7: 1.216  m2_loss_ce_8: 0.5234  m2_loss_mask_8: 0.1601  m2_loss_dice_8: 1.227    time: 1.4093  last_time: 1.3957  data_time: 0.0485  last_data_time: 0.0437   lr: 0.0001  max_mem: 34820M
[10/07 08:02:11] d2.utils.events INFO:  eta: 0:08:53  iter: 619  total_loss: 41.78  m1_loss_ce: 0.4956  m1_loss_mask: 0.1603  m1_loss_dice: 1.285  m1_loss_ce_0: 0.542  m1_loss_mask_0: 0.1994  m1_loss_dice_0: 1.463  m1_loss_ce_1: 0.6168  m1_loss_mask_1: 0.1871  m1_loss_dice_1: 1.384  m1_loss_ce_2: 0.5451  m1_loss_mask_2: 0.1727  m1_loss_dice_2: 1.316  m1_loss_ce_3: 0.5326  m1_loss_mask_3: 0.1694  m1_loss_dice_3: 1.305  m1_loss_ce_4: 0.485  m1_loss_mask_4: 0.1669  m1_loss_dice_4: 1.271  m1_loss_ce_5: 0.4759  m1_loss_mask_5: 0.1639  m1_loss_dice_5: 1.28  m1_loss_ce_6: 0.484  m1_loss_mask_6: 0.1619  m1_loss_dice_6: 1.234  m1_loss_ce_7: 0.4675  m1_loss_mask_7: 0.1628  m1_loss_dice_7: 1.238  m1_loss_ce_8: 0.4636  m1_loss_mask_8: 0.16  m1_loss_dice_8: 1.248  m2_loss_ce: 0.5322  m2_loss_mask: 0.1655  m2_loss_dice: 1.258  m2_loss_ce_0: 0.5928  m2_loss_mask_0: 0.2043  m2_loss_dice_0: 1.545  m2_loss_ce_1: 0.6941  m2_loss_mask_1: 0.1849  m2_loss_dice_1: 1.353  m2_loss_ce_2: 0.6049  m2_loss_mask_2: 0.1715  m2_loss_dice_2: 1.365  m2_loss_ce_3: 0.5785  m2_loss_mask_3: 0.172  m2_loss_dice_3: 1.282  m2_loss_ce_4: 0.5732  m2_loss_mask_4: 0.1699  m2_loss_dice_4: 1.27  m2_loss_ce_5: 0.5567  m2_loss_mask_5: 0.1684  m2_loss_dice_5: 1.314  m2_loss_ce_6: 0.5214  m2_loss_mask_6: 0.1682  m2_loss_dice_6: 1.24  m2_loss_ce_7: 0.5043  m2_loss_mask_7: 0.1706  m2_loss_dice_7: 1.278  m2_loss_ce_8: 0.5204  m2_loss_mask_8: 0.1661  m2_loss_dice_8: 1.245    time: 1.4094  last_time: 1.4361  data_time: 0.0510  last_data_time: 0.0342   lr: 0.0001  max_mem: 34820M
[10/07 08:02:39] d2.utils.events INFO:  eta: 0:08:25  iter: 639  total_loss: 38.75  m1_loss_ce: 0.4713  m1_loss_mask: 0.1609  m1_loss_dice: 1.142  m1_loss_ce_0: 0.5718  m1_loss_mask_0: 0.187  m1_loss_dice_0: 1.365  m1_loss_ce_1: 0.6258  m1_loss_mask_1: 0.1743  m1_loss_dice_1: 1.298  m1_loss_ce_2: 0.5824  m1_loss_mask_2: 0.167  m1_loss_dice_2: 1.254  m1_loss_ce_3: 0.5395  m1_loss_mask_3: 0.1654  m1_loss_dice_3: 1.176  m1_loss_ce_4: 0.499  m1_loss_mask_4: 0.1641  m1_loss_dice_4: 1.201  m1_loss_ce_5: 0.4963  m1_loss_mask_5: 0.1606  m1_loss_dice_5: 1.186  m1_loss_ce_6: 0.4774  m1_loss_mask_6: 0.1599  m1_loss_dice_6: 1.186  m1_loss_ce_7: 0.4641  m1_loss_mask_7: 0.1612  m1_loss_dice_7: 1.186  m1_loss_ce_8: 0.4557  m1_loss_mask_8: 0.161  m1_loss_dice_8: 1.19  m2_loss_ce: 0.5371  m2_loss_mask: 0.1697  m2_loss_dice: 1.148  m2_loss_ce_0: 0.594  m2_loss_mask_0: 0.1976  m2_loss_dice_0: 1.425  m2_loss_ce_1: 0.6866  m2_loss_mask_1: 0.1739  m2_loss_dice_1: 1.278  m2_loss_ce_2: 0.5895  m2_loss_mask_2: 0.168  m2_loss_dice_2: 1.234  m2_loss_ce_3: 0.5847  m2_loss_mask_3: 0.1726  m2_loss_dice_3: 1.217  m2_loss_ce_4: 0.5373  m2_loss_mask_4: 0.1711  m2_loss_dice_4: 1.228  m2_loss_ce_5: 0.5315  m2_loss_mask_5: 0.1702  m2_loss_dice_5: 1.207  m2_loss_ce_6: 0.538  m2_loss_mask_6: 0.1694  m2_loss_dice_6: 1.144  m2_loss_ce_7: 0.534  m2_loss_mask_7: 0.1687  m2_loss_dice_7: 1.151  m2_loss_ce_8: 0.5223  m2_loss_mask_8: 0.168  m2_loss_dice_8: 1.194    time: 1.4095  last_time: 1.3296  data_time: 0.0614  last_data_time: 0.0320   lr: 0.0001  max_mem: 34820M
[10/07 08:03:08] d2.utils.events INFO:  eta: 0:07:57  iter: 659  total_loss: 40.16  m1_loss_ce: 0.4841  m1_loss_mask: 0.181  m1_loss_dice: 1.207  m1_loss_ce_0: 0.5909  m1_loss_mask_0: 0.2057  m1_loss_dice_0: 1.44  m1_loss_ce_1: 0.6433  m1_loss_mask_1: 0.1911  m1_loss_dice_1: 1.371  m1_loss_ce_2: 0.5425  m1_loss_mask_2: 0.1843  m1_loss_dice_2: 1.301  m1_loss_ce_3: 0.5134  m1_loss_mask_3: 0.1865  m1_loss_dice_3: 1.21  m1_loss_ce_4: 0.4983  m1_loss_mask_4: 0.1814  m1_loss_dice_4: 1.214  m1_loss_ce_5: 0.5072  m1_loss_mask_5: 0.1792  m1_loss_dice_5: 1.234  m1_loss_ce_6: 0.5126  m1_loss_mask_6: 0.1812  m1_loss_dice_6: 1.21  m1_loss_ce_7: 0.4681  m1_loss_mask_7: 0.1816  m1_loss_dice_7: 1.176  m1_loss_ce_8: 0.4564  m1_loss_mask_8: 0.1807  m1_loss_dice_8: 1.192  m2_loss_ce: 0.495  m2_loss_mask: 0.1783  m2_loss_dice: 1.196  m2_loss_ce_0: 0.5712  m2_loss_mask_0: 0.219  m2_loss_dice_0: 1.494  m2_loss_ce_1: 0.7071  m2_loss_mask_1: 0.1917  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.606  m2_loss_mask_2: 0.1911  m2_loss_dice_2: 1.286  m2_loss_ce_3: 0.5813  m2_loss_mask_3: 0.1847  m2_loss_dice_3: 1.224  m2_loss_ce_4: 0.5485  m2_loss_mask_4: 0.1835  m2_loss_dice_4: 1.226  m2_loss_ce_5: 0.5575  m2_loss_mask_5: 0.1811  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.5415  m2_loss_mask_6: 0.1817  m2_loss_dice_6: 1.179  m2_loss_ce_7: 0.5283  m2_loss_mask_7: 0.1804  m2_loss_dice_7: 1.195  m2_loss_ce_8: 0.5271  m2_loss_mask_8: 0.1789  m2_loss_dice_8: 1.207    time: 1.4095  last_time: 1.4229  data_time: 0.0548  last_data_time: 0.0760   lr: 0.0001  max_mem: 34820M
[10/07 08:03:36] d2.utils.events INFO:  eta: 0:07:29  iter: 679  total_loss: 40.24  m1_loss_ce: 0.4744  m1_loss_mask: 0.157  m1_loss_dice: 1.252  m1_loss_ce_0: 0.5756  m1_loss_mask_0: 0.1768  m1_loss_dice_0: 1.467  m1_loss_ce_1: 0.6559  m1_loss_mask_1: 0.1685  m1_loss_dice_1: 1.355  m1_loss_ce_2: 0.5876  m1_loss_mask_2: 0.1669  m1_loss_dice_2: 1.318  m1_loss_ce_3: 0.5258  m1_loss_mask_3: 0.1639  m1_loss_dice_3: 1.285  m1_loss_ce_4: 0.5226  m1_loss_mask_4: 0.158  m1_loss_dice_4: 1.26  m1_loss_ce_5: 0.4653  m1_loss_mask_5: 0.1617  m1_loss_dice_5: 1.26  m1_loss_ce_6: 0.5168  m1_loss_mask_6: 0.1569  m1_loss_dice_6: 1.241  m1_loss_ce_7: 0.471  m1_loss_mask_7: 0.1563  m1_loss_dice_7: 1.208  m1_loss_ce_8: 0.4645  m1_loss_mask_8: 0.1574  m1_loss_dice_8: 1.211  m2_loss_ce: 0.5222  m2_loss_mask: 0.169  m2_loss_dice: 1.236  m2_loss_ce_0: 0.6744  m2_loss_mask_0: 0.1897  m2_loss_dice_0: 1.492  m2_loss_ce_1: 0.7182  m2_loss_mask_1: 0.1721  m2_loss_dice_1: 1.378  m2_loss_ce_2: 0.6404  m2_loss_mask_2: 0.1768  m2_loss_dice_2: 1.312  m2_loss_ce_3: 0.6151  m2_loss_mask_3: 0.1742  m2_loss_dice_3: 1.277  m2_loss_ce_4: 0.5929  m2_loss_mask_4: 0.1737  m2_loss_dice_4: 1.241  m2_loss_ce_5: 0.5636  m2_loss_mask_5: 0.1687  m2_loss_dice_5: 1.246  m2_loss_ce_6: 0.5414  m2_loss_mask_6: 0.1702  m2_loss_dice_6: 1.224  m2_loss_ce_7: 0.5218  m2_loss_mask_7: 0.1679  m2_loss_dice_7: 1.246  m2_loss_ce_8: 0.5275  m2_loss_mask_8: 0.1692  m2_loss_dice_8: 1.247    time: 1.4097  last_time: 1.5222  data_time: 0.0502  last_data_time: 0.0444   lr: 0.0001  max_mem: 34820M
[10/07 08:04:05] d2.utils.events INFO:  eta: 0:07:01  iter: 699  total_loss: 39.69  m1_loss_ce: 0.475  m1_loss_mask: 0.1553  m1_loss_dice: 1.183  m1_loss_ce_0: 0.5396  m1_loss_mask_0: 0.1881  m1_loss_dice_0: 1.378  m1_loss_ce_1: 0.6118  m1_loss_mask_1: 0.171  m1_loss_dice_1: 1.294  m1_loss_ce_2: 0.5486  m1_loss_mask_2: 0.1603  m1_loss_dice_2: 1.296  m1_loss_ce_3: 0.5176  m1_loss_mask_3: 0.1618  m1_loss_dice_3: 1.243  m1_loss_ce_4: 0.4986  m1_loss_mask_4: 0.1582  m1_loss_dice_4: 1.247  m1_loss_ce_5: 0.4755  m1_loss_mask_5: 0.1582  m1_loss_dice_5: 1.25  m1_loss_ce_6: 0.4843  m1_loss_mask_6: 0.1565  m1_loss_dice_6: 1.209  m1_loss_ce_7: 0.4779  m1_loss_mask_7: 0.1554  m1_loss_dice_7: 1.183  m1_loss_ce_8: 0.4668  m1_loss_mask_8: 0.1565  m1_loss_dice_8: 1.2  m2_loss_ce: 0.54  m2_loss_mask: 0.162  m2_loss_dice: 1.243  m2_loss_ce_0: 0.6082  m2_loss_mask_0: 0.1939  m2_loss_dice_0: 1.477  m2_loss_ce_1: 0.6867  m2_loss_mask_1: 0.1774  m2_loss_dice_1: 1.308  m2_loss_ce_2: 0.6251  m2_loss_mask_2: 0.1688  m2_loss_dice_2: 1.279  m2_loss_ce_3: 0.5665  m2_loss_mask_3: 0.1708  m2_loss_dice_3: 1.23  m2_loss_ce_4: 0.5525  m2_loss_mask_4: 0.173  m2_loss_dice_4: 1.232  m2_loss_ce_5: 0.5703  m2_loss_mask_5: 0.1657  m2_loss_dice_5: 1.239  m2_loss_ce_6: 0.5311  m2_loss_mask_6: 0.1647  m2_loss_dice_6: 1.216  m2_loss_ce_7: 0.5396  m2_loss_mask_7: 0.1607  m2_loss_dice_7: 1.232  m2_loss_ce_8: 0.5343  m2_loss_mask_8: 0.1613  m2_loss_dice_8: 1.213    time: 1.4102  last_time: 1.4002  data_time: 0.0468  last_data_time: 0.0527   lr: 0.0001  max_mem: 34820M
[10/07 08:04:33] d2.utils.events INFO:  eta: 0:06:34  iter: 719  total_loss: 41.46  m1_loss_ce: 0.4821  m1_loss_mask: 0.1535  m1_loss_dice: 1.253  m1_loss_ce_0: 0.5646  m1_loss_mask_0: 0.1782  m1_loss_dice_0: 1.45  m1_loss_ce_1: 0.6613  m1_loss_mask_1: 0.1623  m1_loss_dice_1: 1.343  m1_loss_ce_2: 0.6092  m1_loss_mask_2: 0.1584  m1_loss_dice_2: 1.282  m1_loss_ce_3: 0.5535  m1_loss_mask_3: 0.1562  m1_loss_dice_3: 1.303  m1_loss_ce_4: 0.5013  m1_loss_mask_4: 0.1568  m1_loss_dice_4: 1.293  m1_loss_ce_5: 0.5137  m1_loss_mask_5: 0.1534  m1_loss_dice_5: 1.266  m1_loss_ce_6: 0.5067  m1_loss_mask_6: 0.1564  m1_loss_dice_6: 1.283  m1_loss_ce_7: 0.4848  m1_loss_mask_7: 0.1535  m1_loss_dice_7: 1.266  m1_loss_ce_8: 0.477  m1_loss_mask_8: 0.1529  m1_loss_dice_8: 1.231  m2_loss_ce: 0.5506  m2_loss_mask: 0.1571  m2_loss_dice: 1.261  m2_loss_ce_0: 0.6052  m2_loss_mask_0: 0.1954  m2_loss_dice_0: 1.617  m2_loss_ce_1: 0.7327  m2_loss_mask_1: 0.1745  m2_loss_dice_1: 1.402  m2_loss_ce_2: 0.6177  m2_loss_mask_2: 0.1643  m2_loss_dice_2: 1.314  m2_loss_ce_3: 0.6252  m2_loss_mask_3: 0.1607  m2_loss_dice_3: 1.281  m2_loss_ce_4: 0.5617  m2_loss_mask_4: 0.1631  m2_loss_dice_4: 1.325  m2_loss_ce_5: 0.5658  m2_loss_mask_5: 0.1571  m2_loss_dice_5: 1.274  m2_loss_ce_6: 0.5671  m2_loss_mask_6: 0.1605  m2_loss_dice_6: 1.262  m2_loss_ce_7: 0.5441  m2_loss_mask_7: 0.16  m2_loss_dice_7: 1.265  m2_loss_ce_8: 0.5389  m2_loss_mask_8: 0.1563  m2_loss_dice_8: 1.256    time: 1.4106  last_time: 1.4921  data_time: 0.0515  last_data_time: 0.0422   lr: 0.0001  max_mem: 34820M
[10/07 08:05:02] d2.utils.events INFO:  eta: 0:06:05  iter: 739  total_loss: 39.98  m1_loss_ce: 0.4614  m1_loss_mask: 0.1587  m1_loss_dice: 1.202  m1_loss_ce_0: 0.5367  m1_loss_mask_0: 0.1849  m1_loss_dice_0: 1.373  m1_loss_ce_1: 0.6049  m1_loss_mask_1: 0.1703  m1_loss_dice_1: 1.341  m1_loss_ce_2: 0.5614  m1_loss_mask_2: 0.1668  m1_loss_dice_2: 1.298  m1_loss_ce_3: 0.5161  m1_loss_mask_3: 0.1617  m1_loss_dice_3: 1.19  m1_loss_ce_4: 0.4724  m1_loss_mask_4: 0.1606  m1_loss_dice_4: 1.215  m1_loss_ce_5: 0.4645  m1_loss_mask_5: 0.1606  m1_loss_dice_5: 1.219  m1_loss_ce_6: 0.4581  m1_loss_mask_6: 0.1594  m1_loss_dice_6: 1.196  m1_loss_ce_7: 0.4577  m1_loss_mask_7: 0.1647  m1_loss_dice_7: 1.22  m1_loss_ce_8: 0.4677  m1_loss_mask_8: 0.1598  m1_loss_dice_8: 1.211  m2_loss_ce: 0.5134  m2_loss_mask: 0.1637  m2_loss_dice: 1.231  m2_loss_ce_0: 0.6008  m2_loss_mask_0: 0.1949  m2_loss_dice_0: 1.475  m2_loss_ce_1: 0.6614  m2_loss_mask_1: 0.1767  m2_loss_dice_1: 1.346  m2_loss_ce_2: 0.6228  m2_loss_mask_2: 0.1686  m2_loss_dice_2: 1.304  m2_loss_ce_3: 0.5572  m2_loss_mask_3: 0.1677  m2_loss_dice_3: 1.227  m2_loss_ce_4: 0.5345  m2_loss_mask_4: 0.1682  m2_loss_dice_4: 1.228  m2_loss_ce_5: 0.5362  m2_loss_mask_5: 0.1667  m2_loss_dice_5: 1.25  m2_loss_ce_6: 0.5261  m2_loss_mask_6: 0.1684  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.5257  m2_loss_mask_7: 0.1671  m2_loss_dice_7: 1.192  m2_loss_ce_8: 0.5228  m2_loss_mask_8: 0.1622  m2_loss_dice_8: 1.209    time: 1.4107  last_time: 1.4042  data_time: 0.0551  last_data_time: 0.0447   lr: 0.0001  max_mem: 34820M
[10/07 08:05:30] d2.utils.events INFO:  eta: 0:05:37  iter: 759  total_loss: 39.24  m1_loss_ce: 0.4456  m1_loss_mask: 0.1687  m1_loss_dice: 1.24  m1_loss_ce_0: 0.5476  m1_loss_mask_0: 0.1893  m1_loss_dice_0: 1.357  m1_loss_ce_1: 0.6045  m1_loss_mask_1: 0.1813  m1_loss_dice_1: 1.363  m1_loss_ce_2: 0.5619  m1_loss_mask_2: 0.173  m1_loss_dice_2: 1.34  m1_loss_ce_3: 0.492  m1_loss_mask_3: 0.1722  m1_loss_dice_3: 1.241  m1_loss_ce_4: 0.4902  m1_loss_mask_4: 0.1712  m1_loss_dice_4: 1.257  m1_loss_ce_5: 0.4487  m1_loss_mask_5: 0.1683  m1_loss_dice_5: 1.231  m1_loss_ce_6: 0.4014  m1_loss_mask_6: 0.1709  m1_loss_dice_6: 1.251  m1_loss_ce_7: 0.4168  m1_loss_mask_7: 0.1673  m1_loss_dice_7: 1.256  m1_loss_ce_8: 0.459  m1_loss_mask_8: 0.1679  m1_loss_dice_8: 1.221  m2_loss_ce: 0.517  m2_loss_mask: 0.1825  m2_loss_dice: 1.274  m2_loss_ce_0: 0.5839  m2_loss_mask_0: 0.2063  m2_loss_dice_0: 1.508  m2_loss_ce_1: 0.71  m2_loss_mask_1: 0.1956  m2_loss_dice_1: 1.39  m2_loss_ce_2: 0.623  m2_loss_mask_2: 0.1899  m2_loss_dice_2: 1.335  m2_loss_ce_3: 0.5844  m2_loss_mask_3: 0.1894  m2_loss_dice_3: 1.274  m2_loss_ce_4: 0.5457  m2_loss_mask_4: 0.1876  m2_loss_dice_4: 1.282  m2_loss_ce_5: 0.5452  m2_loss_mask_5: 0.1845  m2_loss_dice_5: 1.263  m2_loss_ce_6: 0.535  m2_loss_mask_6: 0.1833  m2_loss_dice_6: 1.252  m2_loss_ce_7: 0.5239  m2_loss_mask_7: 0.1812  m2_loss_dice_7: 1.264  m2_loss_ce_8: 0.5385  m2_loss_mask_8: 0.1843  m2_loss_dice_8: 1.3    time: 1.4110  last_time: 1.4011  data_time: 0.0488  last_data_time: 0.0355   lr: 0.0001  max_mem: 34820M
[10/07 08:05:59] d2.utils.events INFO:  eta: 0:05:09  iter: 779  total_loss: 37.89  m1_loss_ce: 0.4358  m1_loss_mask: 0.151  m1_loss_dice: 1.17  m1_loss_ce_0: 0.555  m1_loss_mask_0: 0.1805  m1_loss_dice_0: 1.405  m1_loss_ce_1: 0.5841  m1_loss_mask_1: 0.1646  m1_loss_dice_1: 1.296  m1_loss_ce_2: 0.5373  m1_loss_mask_2: 0.1584  m1_loss_dice_2: 1.24  m1_loss_ce_3: 0.4629  m1_loss_mask_3: 0.1554  m1_loss_dice_3: 1.181  m1_loss_ce_4: 0.4611  m1_loss_mask_4: 0.1536  m1_loss_dice_4: 1.142  m1_loss_ce_5: 0.4422  m1_loss_mask_5: 0.1523  m1_loss_dice_5: 1.19  m1_loss_ce_6: 0.4244  m1_loss_mask_6: 0.1537  m1_loss_dice_6: 1.17  m1_loss_ce_7: 0.4436  m1_loss_mask_7: 0.1524  m1_loss_dice_7: 1.181  m1_loss_ce_8: 0.4395  m1_loss_mask_8: 0.1529  m1_loss_dice_8: 1.158  m2_loss_ce: 0.5162  m2_loss_mask: 0.1594  m2_loss_dice: 1.207  m2_loss_ce_0: 0.5626  m2_loss_mask_0: 0.1953  m2_loss_dice_0: 1.495  m2_loss_ce_1: 0.6741  m2_loss_mask_1: 0.1727  m2_loss_dice_1: 1.329  m2_loss_ce_2: 0.6034  m2_loss_mask_2: 0.1642  m2_loss_dice_2: 1.271  m2_loss_ce_3: 0.5796  m2_loss_mask_3: 0.1643  m2_loss_dice_3: 1.217  m2_loss_ce_4: 0.5504  m2_loss_mask_4: 0.1623  m2_loss_dice_4: 1.23  m2_loss_ce_5: 0.5461  m2_loss_mask_5: 0.1594  m2_loss_dice_5: 1.266  m2_loss_ce_6: 0.5452  m2_loss_mask_6: 0.1625  m2_loss_dice_6: 1.188  m2_loss_ce_7: 0.5208  m2_loss_mask_7: 0.1604  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.5461  m2_loss_mask_8: 0.1587  m2_loss_dice_8: 1.207    time: 1.4110  last_time: 1.3878  data_time: 0.0534  last_data_time: 0.0438   lr: 0.0001  max_mem: 34820M
[10/07 08:06:27] d2.utils.events INFO:  eta: 0:04:41  iter: 799  total_loss: 38.43  m1_loss_ce: 0.4813  m1_loss_mask: 0.161  m1_loss_dice: 1.098  m1_loss_ce_0: 0.5551  m1_loss_mask_0: 0.1897  m1_loss_dice_0: 1.338  m1_loss_ce_1: 0.5908  m1_loss_mask_1: 0.1777  m1_loss_dice_1: 1.285  m1_loss_ce_2: 0.5441  m1_loss_mask_2: 0.1683  m1_loss_dice_2: 1.213  m1_loss_ce_3: 0.4988  m1_loss_mask_3: 0.1646  m1_loss_dice_3: 1.141  m1_loss_ce_4: 0.4794  m1_loss_mask_4: 0.1638  m1_loss_dice_4: 1.15  m1_loss_ce_5: 0.4853  m1_loss_mask_5: 0.1616  m1_loss_dice_5: 1.149  m1_loss_ce_6: 0.4537  m1_loss_mask_6: 0.1609  m1_loss_dice_6: 1.117  m1_loss_ce_7: 0.4908  m1_loss_mask_7: 0.1599  m1_loss_dice_7: 1.134  m1_loss_ce_8: 0.4547  m1_loss_mask_8: 0.1625  m1_loss_dice_8: 1.104  m2_loss_ce: 0.5414  m2_loss_mask: 0.1665  m2_loss_dice: 1.163  m2_loss_ce_0: 0.6021  m2_loss_mask_0: 0.2069  m2_loss_dice_0: 1.453  m2_loss_ce_1: 0.7186  m2_loss_mask_1: 0.1854  m2_loss_dice_1: 1.262  m2_loss_ce_2: 0.623  m2_loss_mask_2: 0.1729  m2_loss_dice_2: 1.255  m2_loss_ce_3: 0.6029  m2_loss_mask_3: 0.1707  m2_loss_dice_3: 1.207  m2_loss_ce_4: 0.5792  m2_loss_mask_4: 0.1715  m2_loss_dice_4: 1.198  m2_loss_ce_5: 0.5755  m2_loss_mask_5: 0.1679  m2_loss_dice_5: 1.182  m2_loss_ce_6: 0.5601  m2_loss_mask_6: 0.1695  m2_loss_dice_6: 1.154  m2_loss_ce_7: 0.5714  m2_loss_mask_7: 0.1664  m2_loss_dice_7: 1.144  m2_loss_ce_8: 0.5573  m2_loss_mask_8: 0.1666  m2_loss_dice_8: 1.156    time: 1.4109  last_time: 1.4164  data_time: 0.0549  last_data_time: 0.1219   lr: 0.0001  max_mem: 34820M
[10/07 08:06:55] d2.utils.events INFO:  eta: 0:04:13  iter: 819  total_loss: 38.56  m1_loss_ce: 0.4783  m1_loss_mask: 0.1559  m1_loss_dice: 1.192  m1_loss_ce_0: 0.5381  m1_loss_mask_0: 0.1809  m1_loss_dice_0: 1.393  m1_loss_ce_1: 0.5895  m1_loss_mask_1: 0.1673  m1_loss_dice_1: 1.268  m1_loss_ce_2: 0.5663  m1_loss_mask_2: 0.163  m1_loss_dice_2: 1.2  m1_loss_ce_3: 0.5006  m1_loss_mask_3: 0.1605  m1_loss_dice_3: 1.172  m1_loss_ce_4: 0.4343  m1_loss_mask_4: 0.157  m1_loss_dice_4: 1.159  m1_loss_ce_5: 0.4501  m1_loss_mask_5: 0.1544  m1_loss_dice_5: 1.168  m1_loss_ce_6: 0.4682  m1_loss_mask_6: 0.1569  m1_loss_dice_6: 1.178  m1_loss_ce_7: 0.4677  m1_loss_mask_7: 0.1555  m1_loss_dice_7: 1.165  m1_loss_ce_8: 0.4446  m1_loss_mask_8: 0.1574  m1_loss_dice_8: 1.162  m2_loss_ce: 0.5585  m2_loss_mask: 0.1626  m2_loss_dice: 1.223  m2_loss_ce_0: 0.5859  m2_loss_mask_0: 0.1943  m2_loss_dice_0: 1.468  m2_loss_ce_1: 0.6647  m2_loss_mask_1: 0.1772  m2_loss_dice_1: 1.305  m2_loss_ce_2: 0.6051  m2_loss_mask_2: 0.1706  m2_loss_dice_2: 1.277  m2_loss_ce_3: 0.5924  m2_loss_mask_3: 0.1678  m2_loss_dice_3: 1.239  m2_loss_ce_4: 0.5486  m2_loss_mask_4: 0.1663  m2_loss_dice_4: 1.213  m2_loss_ce_5: 0.5747  m2_loss_mask_5: 0.1672  m2_loss_dice_5: 1.221  m2_loss_ce_6: 0.5478  m2_loss_mask_6: 0.1677  m2_loss_dice_6: 1.225  m2_loss_ce_7: 0.5266  m2_loss_mask_7: 0.1666  m2_loss_dice_7: 1.235  m2_loss_ce_8: 0.564  m2_loss_mask_8: 0.1676  m2_loss_dice_8: 1.237    time: 1.4111  last_time: 1.3958  data_time: 0.0583  last_data_time: 0.0394   lr: 0.0001  max_mem: 34820M
[10/07 08:07:24] d2.utils.events INFO:  eta: 0:03:45  iter: 839  total_loss: 40.13  m1_loss_ce: 0.4401  m1_loss_mask: 0.1533  m1_loss_dice: 1.202  m1_loss_ce_0: 0.5372  m1_loss_mask_0: 0.1811  m1_loss_dice_0: 1.397  m1_loss_ce_1: 0.6345  m1_loss_mask_1: 0.1657  m1_loss_dice_1: 1.327  m1_loss_ce_2: 0.5418  m1_loss_mask_2: 0.1572  m1_loss_dice_2: 1.268  m1_loss_ce_3: 0.5274  m1_loss_mask_3: 0.1608  m1_loss_dice_3: 1.244  m1_loss_ce_4: 0.4841  m1_loss_mask_4: 0.157  m1_loss_dice_4: 1.212  m1_loss_ce_5: 0.4767  m1_loss_mask_5: 0.1541  m1_loss_dice_5: 1.204  m1_loss_ce_6: 0.4723  m1_loss_mask_6: 0.1529  m1_loss_dice_6: 1.231  m1_loss_ce_7: 0.4441  m1_loss_mask_7: 0.156  m1_loss_dice_7: 1.24  m1_loss_ce_8: 0.4746  m1_loss_mask_8: 0.1527  m1_loss_dice_8: 1.208  m2_loss_ce: 0.5473  m2_loss_mask: 0.162  m2_loss_dice: 1.244  m2_loss_ce_0: 0.5662  m2_loss_mask_0: 0.191  m2_loss_dice_0: 1.491  m2_loss_ce_1: 0.7061  m2_loss_mask_1: 0.1721  m2_loss_dice_1: 1.349  m2_loss_ce_2: 0.6363  m2_loss_mask_2: 0.1676  m2_loss_dice_2: 1.335  m2_loss_ce_3: 0.5939  m2_loss_mask_3: 0.1653  m2_loss_dice_3: 1.269  m2_loss_ce_4: 0.5649  m2_loss_mask_4: 0.1643  m2_loss_dice_4: 1.266  m2_loss_ce_5: 0.5767  m2_loss_mask_5: 0.1621  m2_loss_dice_5: 1.253  m2_loss_ce_6: 0.5571  m2_loss_mask_6: 0.165  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.5739  m2_loss_mask_7: 0.1631  m2_loss_dice_7: 1.214  m2_loss_ce_8: 0.562  m2_loss_mask_8: 0.1625  m2_loss_dice_8: 1.245    time: 1.4111  last_time: 1.3773  data_time: 0.0450  last_data_time: 0.0483   lr: 0.0001  max_mem: 34820M
[10/07 08:07:52] d2.utils.events INFO:  eta: 0:03:16  iter: 859  total_loss: 36.51  m1_loss_ce: 0.3941  m1_loss_mask: 0.1652  m1_loss_dice: 1.125  m1_loss_ce_0: 0.5552  m1_loss_mask_0: 0.1965  m1_loss_dice_0: 1.349  m1_loss_ce_1: 0.5693  m1_loss_mask_1: 0.178  m1_loss_dice_1: 1.237  m1_loss_ce_2: 0.4988  m1_loss_mask_2: 0.1703  m1_loss_dice_2: 1.198  m1_loss_ce_3: 0.4649  m1_loss_mask_3: 0.1683  m1_loss_dice_3: 1.126  m1_loss_ce_4: 0.4474  m1_loss_mask_4: 0.169  m1_loss_dice_4: 1.132  m1_loss_ce_5: 0.4255  m1_loss_mask_5: 0.1664  m1_loss_dice_5: 1.115  m1_loss_ce_6: 0.4109  m1_loss_mask_6: 0.1656  m1_loss_dice_6: 1.098  m1_loss_ce_7: 0.4243  m1_loss_mask_7: 0.1664  m1_loss_dice_7: 1.108  m1_loss_ce_8: 0.4  m1_loss_mask_8: 0.1648  m1_loss_dice_8: 1.13  m2_loss_ce: 0.4788  m2_loss_mask: 0.1742  m2_loss_dice: 1.166  m2_loss_ce_0: 0.5663  m2_loss_mask_0: 0.2033  m2_loss_dice_0: 1.385  m2_loss_ce_1: 0.6642  m2_loss_mask_1: 0.1899  m2_loss_dice_1: 1.242  m2_loss_ce_2: 0.5536  m2_loss_mask_2: 0.1787  m2_loss_dice_2: 1.225  m2_loss_ce_3: 0.5371  m2_loss_mask_3: 0.1746  m2_loss_dice_3: 1.182  m2_loss_ce_4: 0.5057  m2_loss_mask_4: 0.1749  m2_loss_dice_4: 1.207  m2_loss_ce_5: 0.5371  m2_loss_mask_5: 0.1719  m2_loss_dice_5: 1.199  m2_loss_ce_6: 0.5352  m2_loss_mask_6: 0.1734  m2_loss_dice_6: 1.179  m2_loss_ce_7: 0.5023  m2_loss_mask_7: 0.1721  m2_loss_dice_7: 1.159  m2_loss_ce_8: 0.518  m2_loss_mask_8: 0.1721  m2_loss_dice_8: 1.192    time: 1.4110  last_time: 1.3900  data_time: 0.0462  last_data_time: 0.0550   lr: 0.0001  max_mem: 34820M
[10/07 08:08:21] d2.utils.events INFO:  eta: 0:02:48  iter: 879  total_loss: 38.98  m1_loss_ce: 0.4245  m1_loss_mask: 0.1486  m1_loss_dice: 1.189  m1_loss_ce_0: 0.5205  m1_loss_mask_0: 0.173  m1_loss_dice_0: 1.411  m1_loss_ce_1: 0.5888  m1_loss_mask_1: 0.1577  m1_loss_dice_1: 1.347  m1_loss_ce_2: 0.5526  m1_loss_mask_2: 0.152  m1_loss_dice_2: 1.272  m1_loss_ce_3: 0.5117  m1_loss_mask_3: 0.1498  m1_loss_dice_3: 1.239  m1_loss_ce_4: 0.4794  m1_loss_mask_4: 0.1481  m1_loss_dice_4: 1.237  m1_loss_ce_5: 0.4683  m1_loss_mask_5: 0.1491  m1_loss_dice_5: 1.23  m1_loss_ce_6: 0.4309  m1_loss_mask_6: 0.1493  m1_loss_dice_6: 1.183  m1_loss_ce_7: 0.4711  m1_loss_mask_7: 0.1494  m1_loss_dice_7: 1.196  m1_loss_ce_8: 0.4681  m1_loss_mask_8: 0.1485  m1_loss_dice_8: 1.195  m2_loss_ce: 0.5189  m2_loss_mask: 0.1549  m2_loss_dice: 1.227  m2_loss_ce_0: 0.5891  m2_loss_mask_0: 0.1882  m2_loss_dice_0: 1.494  m2_loss_ce_1: 0.6667  m2_loss_mask_1: 0.1683  m2_loss_dice_1: 1.381  m2_loss_ce_2: 0.6169  m2_loss_mask_2: 0.1616  m2_loss_dice_2: 1.293  m2_loss_ce_3: 0.5954  m2_loss_mask_3: 0.1596  m2_loss_dice_3: 1.253  m2_loss_ce_4: 0.559  m2_loss_mask_4: 0.1601  m2_loss_dice_4: 1.299  m2_loss_ce_5: 0.5281  m2_loss_mask_5: 0.157  m2_loss_dice_5: 1.257  m2_loss_ce_6: 0.5272  m2_loss_mask_6: 0.1559  m2_loss_dice_6: 1.251  m2_loss_ce_7: 0.5323  m2_loss_mask_7: 0.1553  m2_loss_dice_7: 1.245  m2_loss_ce_8: 0.5228  m2_loss_mask_8: 0.1539  m2_loss_dice_8: 1.264    time: 1.4118  last_time: 1.5660  data_time: 0.0552  last_data_time: 0.0474   lr: 0.0001  max_mem: 34820M
[10/07 08:08:49] d2.utils.events INFO:  eta: 0:02:20  iter: 899  total_loss: 40.09  m1_loss_ce: 0.4545  m1_loss_mask: 0.1577  m1_loss_dice: 1.212  m1_loss_ce_0: 0.5361  m1_loss_mask_0: 0.1897  m1_loss_dice_0: 1.434  m1_loss_ce_1: 0.5815  m1_loss_mask_1: 0.1766  m1_loss_dice_1: 1.335  m1_loss_ce_2: 0.542  m1_loss_mask_2: 0.1647  m1_loss_dice_2: 1.245  m1_loss_ce_3: 0.4771  m1_loss_mask_3: 0.1625  m1_loss_dice_3: 1.265  m1_loss_ce_4: 0.4589  m1_loss_mask_4: 0.1603  m1_loss_dice_4: 1.248  m1_loss_ce_5: 0.4682  m1_loss_mask_5: 0.1578  m1_loss_dice_5: 1.253  m1_loss_ce_6: 0.4551  m1_loss_mask_6: 0.1583  m1_loss_dice_6: 1.222  m1_loss_ce_7: 0.4675  m1_loss_mask_7: 0.1587  m1_loss_dice_7: 1.212  m1_loss_ce_8: 0.4585  m1_loss_mask_8: 0.1579  m1_loss_dice_8: 1.218  m2_loss_ce: 0.4992  m2_loss_mask: 0.163  m2_loss_dice: 1.252  m2_loss_ce_0: 0.58  m2_loss_mask_0: 0.1979  m2_loss_dice_0: 1.488  m2_loss_ce_1: 0.6765  m2_loss_mask_1: 0.1794  m2_loss_dice_1: 1.353  m2_loss_ce_2: 0.6272  m2_loss_mask_2: 0.1668  m2_loss_dice_2: 1.341  m2_loss_ce_3: 0.5563  m2_loss_mask_3: 0.1695  m2_loss_dice_3: 1.282  m2_loss_ce_4: 0.5669  m2_loss_mask_4: 0.1673  m2_loss_dice_4: 1.249  m2_loss_ce_5: 0.5477  m2_loss_mask_5: 0.1663  m2_loss_dice_5: 1.254  m2_loss_ce_6: 0.499  m2_loss_mask_6: 0.164  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.5266  m2_loss_mask_7: 0.1615  m2_loss_dice_7: 1.253  m2_loss_ce_8: 0.5015  m2_loss_mask_8: 0.1644  m2_loss_dice_8: 1.27    time: 1.4116  last_time: 1.4935  data_time: 0.0526  last_data_time: 0.1071   lr: 0.0001  max_mem: 34820M
[10/07 08:09:18] d2.utils.events INFO:  eta: 0:01:52  iter: 919  total_loss: 39.1  m1_loss_ce: 0.4624  m1_loss_mask: 0.1489  m1_loss_dice: 1.165  m1_loss_ce_0: 0.552  m1_loss_mask_0: 0.1773  m1_loss_dice_0: 1.379  m1_loss_ce_1: 0.615  m1_loss_mask_1: 0.1657  m1_loss_dice_1: 1.279  m1_loss_ce_2: 0.535  m1_loss_mask_2: 0.1549  m1_loss_dice_2: 1.242  m1_loss_ce_3: 0.4872  m1_loss_mask_3: 0.1536  m1_loss_dice_3: 1.196  m1_loss_ce_4: 0.4873  m1_loss_mask_4: 0.1522  m1_loss_dice_4: 1.195  m1_loss_ce_5: 0.4662  m1_loss_mask_5: 0.1486  m1_loss_dice_5: 1.182  m1_loss_ce_6: 0.4646  m1_loss_mask_6: 0.1484  m1_loss_dice_6: 1.183  m1_loss_ce_7: 0.4484  m1_loss_mask_7: 0.1505  m1_loss_dice_7: 1.202  m1_loss_ce_8: 0.461  m1_loss_mask_8: 0.1488  m1_loss_dice_8: 1.187  m2_loss_ce: 0.5255  m2_loss_mask: 0.1593  m2_loss_dice: 1.216  m2_loss_ce_0: 0.5983  m2_loss_mask_0: 0.1841  m2_loss_dice_0: 1.472  m2_loss_ce_1: 0.6948  m2_loss_mask_1: 0.1668  m2_loss_dice_1: 1.327  m2_loss_ce_2: 0.6227  m2_loss_mask_2: 0.1632  m2_loss_dice_2: 1.283  m2_loss_ce_3: 0.5986  m2_loss_mask_3: 0.1614  m2_loss_dice_3: 1.221  m2_loss_ce_4: 0.562  m2_loss_mask_4: 0.1607  m2_loss_dice_4: 1.214  m2_loss_ce_5: 0.538  m2_loss_mask_5: 0.1592  m2_loss_dice_5: 1.218  m2_loss_ce_6: 0.5664  m2_loss_mask_6: 0.1612  m2_loss_dice_6: 1.212  m2_loss_ce_7: 0.5272  m2_loss_mask_7: 0.1617  m2_loss_dice_7: 1.233  m2_loss_ce_8: 0.5381  m2_loss_mask_8: 0.1595  m2_loss_dice_8: 1.187    time: 1.4117  last_time: 1.3409  data_time: 0.0524  last_data_time: 0.0352   lr: 0.0001  max_mem: 34820M
[10/07 08:09:46] d2.utils.events INFO:  eta: 0:01:24  iter: 939  total_loss: 37.87  m1_loss_ce: 0.4436  m1_loss_mask: 0.1619  m1_loss_dice: 1.123  m1_loss_ce_0: 0.5229  m1_loss_mask_0: 0.1887  m1_loss_dice_0: 1.325  m1_loss_ce_1: 0.5845  m1_loss_mask_1: 0.1698  m1_loss_dice_1: 1.256  m1_loss_ce_2: 0.551  m1_loss_mask_2: 0.1614  m1_loss_dice_2: 1.188  m1_loss_ce_3: 0.4778  m1_loss_mask_3: 0.1603  m1_loss_dice_3: 1.206  m1_loss_ce_4: 0.4439  m1_loss_mask_4: 0.1595  m1_loss_dice_4: 1.162  m1_loss_ce_5: 0.4653  m1_loss_mask_5: 0.1608  m1_loss_dice_5: 1.184  m1_loss_ce_6: 0.4542  m1_loss_mask_6: 0.1615  m1_loss_dice_6: 1.118  m1_loss_ce_7: 0.447  m1_loss_mask_7: 0.162  m1_loss_dice_7: 1.135  m1_loss_ce_8: 0.4616  m1_loss_mask_8: 0.1623  m1_loss_dice_8: 1.133  m2_loss_ce: 0.5061  m2_loss_mask: 0.1605  m2_loss_dice: 1.181  m2_loss_ce_0: 0.5407  m2_loss_mask_0: 0.2024  m2_loss_dice_0: 1.396  m2_loss_ce_1: 0.6687  m2_loss_mask_1: 0.1714  m2_loss_dice_1: 1.293  m2_loss_ce_2: 0.5736  m2_loss_mask_2: 0.1623  m2_loss_dice_2: 1.29  m2_loss_ce_3: 0.544  m2_loss_mask_3: 0.1622  m2_loss_dice_3: 1.211  m2_loss_ce_4: 0.5225  m2_loss_mask_4: 0.1654  m2_loss_dice_4: 1.222  m2_loss_ce_5: 0.5182  m2_loss_mask_5: 0.1609  m2_loss_dice_5: 1.176  m2_loss_ce_6: 0.5093  m2_loss_mask_6: 0.1656  m2_loss_dice_6: 1.195  m2_loss_ce_7: 0.5137  m2_loss_mask_7: 0.165  m2_loss_dice_7: 1.181  m2_loss_ce_8: 0.5325  m2_loss_mask_8: 0.1619  m2_loss_dice_8: 1.207    time: 1.4114  last_time: 1.3296  data_time: 0.0482  last_data_time: 0.0389   lr: 0.0001  max_mem: 34820M
[10/07 08:10:15] d2.utils.events INFO:  eta: 0:00:56  iter: 959  total_loss: 39.57  m1_loss_ce: 0.466  m1_loss_mask: 0.1562  m1_loss_dice: 1.188  m1_loss_ce_0: 0.5472  m1_loss_mask_0: 0.1825  m1_loss_dice_0: 1.406  m1_loss_ce_1: 0.6285  m1_loss_mask_1: 0.1615  m1_loss_dice_1: 1.329  m1_loss_ce_2: 0.5783  m1_loss_mask_2: 0.1539  m1_loss_dice_2: 1.28  m1_loss_ce_3: 0.5021  m1_loss_mask_3: 0.1588  m1_loss_dice_3: 1.263  m1_loss_ce_4: 0.4874  m1_loss_mask_4: 0.1591  m1_loss_dice_4: 1.248  m1_loss_ce_5: 0.4731  m1_loss_mask_5: 0.1598  m1_loss_dice_5: 1.227  m1_loss_ce_6: 0.4418  m1_loss_mask_6: 0.1578  m1_loss_dice_6: 1.222  m1_loss_ce_7: 0.4637  m1_loss_mask_7: 0.1586  m1_loss_dice_7: 1.249  m1_loss_ce_8: 0.4502  m1_loss_mask_8: 0.1575  m1_loss_dice_8: 1.222  m2_loss_ce: 0.5579  m2_loss_mask: 0.1636  m2_loss_dice: 1.236  m2_loss_ce_0: 0.5781  m2_loss_mask_0: 0.1992  m2_loss_dice_0: 1.543  m2_loss_ce_1: 0.7232  m2_loss_mask_1: 0.1754  m2_loss_dice_1: 1.393  m2_loss_ce_2: 0.6546  m2_loss_mask_2: 0.1671  m2_loss_dice_2: 1.355  m2_loss_ce_3: 0.6144  m2_loss_mask_3: 0.1696  m2_loss_dice_3: 1.296  m2_loss_ce_4: 0.598  m2_loss_mask_4: 0.1664  m2_loss_dice_4: 1.233  m2_loss_ce_5: 0.5865  m2_loss_mask_5: 0.1621  m2_loss_dice_5: 1.228  m2_loss_ce_6: 0.5258  m2_loss_mask_6: 0.1666  m2_loss_dice_6: 1.254  m2_loss_ce_7: 0.5466  m2_loss_mask_7: 0.1646  m2_loss_dice_7: 1.23  m2_loss_ce_8: 0.5298  m2_loss_mask_8: 0.1629  m2_loss_dice_8: 1.224    time: 1.4120  last_time: 1.3989  data_time: 0.0495  last_data_time: 0.0552   lr: 0.0001  max_mem: 34820M
[10/07 08:10:43] d2.utils.events INFO:  eta: 0:00:28  iter: 979  total_loss: 40.72  m1_loss_ce: 0.4907  m1_loss_mask: 0.1514  m1_loss_dice: 1.201  m1_loss_ce_0: 0.5787  m1_loss_mask_0: 0.1832  m1_loss_dice_0: 1.465  m1_loss_ce_1: 0.6506  m1_loss_mask_1: 0.1644  m1_loss_dice_1: 1.35  m1_loss_ce_2: 0.5991  m1_loss_mask_2: 0.1572  m1_loss_dice_2: 1.328  m1_loss_ce_3: 0.5418  m1_loss_mask_3: 0.157  m1_loss_dice_3: 1.254  m1_loss_ce_4: 0.4956  m1_loss_mask_4: 0.156  m1_loss_dice_4: 1.248  m1_loss_ce_5: 0.4996  m1_loss_mask_5: 0.1529  m1_loss_dice_5: 1.262  m1_loss_ce_6: 0.5109  m1_loss_mask_6: 0.1531  m1_loss_dice_6: 1.207  m1_loss_ce_7: 0.5165  m1_loss_mask_7: 0.152  m1_loss_dice_7: 1.213  m1_loss_ce_8: 0.5133  m1_loss_mask_8: 0.1516  m1_loss_dice_8: 1.206  m2_loss_ce: 0.547  m2_loss_mask: 0.1635  m2_loss_dice: 1.26  m2_loss_ce_0: 0.5655  m2_loss_mask_0: 0.199  m2_loss_dice_0: 1.568  m2_loss_ce_1: 0.6901  m2_loss_mask_1: 0.1734  m2_loss_dice_1: 1.389  m2_loss_ce_2: 0.618  m2_loss_mask_2: 0.1674  m2_loss_dice_2: 1.33  m2_loss_ce_3: 0.5978  m2_loss_mask_3: 0.1654  m2_loss_dice_3: 1.289  m2_loss_ce_4: 0.5862  m2_loss_mask_4: 0.1664  m2_loss_dice_4: 1.283  m2_loss_ce_5: 0.577  m2_loss_mask_5: 0.1617  m2_loss_dice_5: 1.285  m2_loss_ce_6: 0.53  m2_loss_mask_6: 0.163  m2_loss_dice_6: 1.274  m2_loss_ce_7: 0.5398  m2_loss_mask_7: 0.1638  m2_loss_dice_7: 1.254  m2_loss_ce_8: 0.5363  m2_loss_mask_8: 0.1623  m2_loss_dice_8: 1.251    time: 1.4122  last_time: 1.4455  data_time: 0.0484  last_data_time: 0.0438   lr: 0.0001  max_mem: 34820M
[10/07 08:11:12] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/r101_6_9_i_n_008_1000_2_1000_1000_L1_L2_GradNorm/model_final.pth
[10/07 08:11:14] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 37.88  m1_loss_ce: 0.4153  m1_loss_mask: 0.1652  m1_loss_dice: 1.142  m1_loss_ce_0: 0.5135  m1_loss_mask_0: 0.1828  m1_loss_dice_0: 1.365  m1_loss_ce_1: 0.5615  m1_loss_mask_1: 0.1786  m1_loss_dice_1: 1.308  m1_loss_ce_2: 0.5465  m1_loss_mask_2: 0.1665  m1_loss_dice_2: 1.222  m1_loss_ce_3: 0.4755  m1_loss_mask_3: 0.1685  m1_loss_dice_3: 1.209  m1_loss_ce_4: 0.4475  m1_loss_mask_4: 0.1665  m1_loss_dice_4: 1.18  m1_loss_ce_5: 0.4437  m1_loss_mask_5: 0.1674  m1_loss_dice_5: 1.156  m1_loss_ce_6: 0.4094  m1_loss_mask_6: 0.1646  m1_loss_dice_6: 1.213  m1_loss_ce_7: 0.4029  m1_loss_mask_7: 0.1654  m1_loss_dice_7: 1.141  m1_loss_ce_8: 0.419  m1_loss_mask_8: 0.1645  m1_loss_dice_8: 1.2  m2_loss_ce: 0.5129  m2_loss_mask: 0.1691  m2_loss_dice: 1.187  m2_loss_ce_0: 0.5646  m2_loss_mask_0: 0.2014  m2_loss_dice_0: 1.48  m2_loss_ce_1: 0.6701  m2_loss_mask_1: 0.1829  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.5733  m2_loss_mask_2: 0.1708  m2_loss_dice_2: 1.273  m2_loss_ce_3: 0.5078  m2_loss_mask_3: 0.171  m2_loss_dice_3: 1.239  m2_loss_ce_4: 0.5419  m2_loss_mask_4: 0.1709  m2_loss_dice_4: 1.194  m2_loss_ce_5: 0.5351  m2_loss_mask_5: 0.1683  m2_loss_dice_5: 1.205  m2_loss_ce_6: 0.5123  m2_loss_mask_6: 0.1711  m2_loss_dice_6: 1.193  m2_loss_ce_7: 0.5283  m2_loss_mask_7: 0.1716  m2_loss_dice_7: 1.187  m2_loss_ce_8: 0.4992  m2_loss_mask_8: 0.1693  m2_loss_dice_8: 1.174    time: 1.4122  last_time: 1.3872  data_time: 0.0514  last_data_time: 0.0402   lr: 0.0001  max_mem: 34820M
[10/07 08:11:14] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:23:29 (1.4122 s / it)
[10/07 08:11:14] d2.engine.hooks INFO: Total training time: 0:23:37 (0:00:08 on hooks)
[10/07 08:11:14] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[10/07 08:11:14] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[10/07 08:11:14] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/07 08:11:14] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/07 08:11:14] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[10/07 08:12:39] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval7u8gngam ...
[10/07 08:13:42] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 58.013 | 80.845 | 70.659 |      19       |
| Things | 50.578 | 80.531 | 62.704 |       8       |
| Stuff  | 63.421 | 81.073 | 76.445 |      11       |
[10/07 08:13:42] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.136 | 97.642 | 99.482 |     Stuff     |
| class_8  | 73.761 | 84.154 | 87.650 |     Stuff     |
| class_11 | 87.176 | 89.369 | 97.546 |     Stuff     |
| class_12 | 43.150 | 79.500 | 54.277 |     Stuff     |
| class_13 | 37.306 | 75.802 | 49.215 |     Stuff     |
| class_17 | 40.656 | 63.345 | 64.182 |     Stuff     |
| class_19 | 48.817 | 68.155 | 71.626 |     Stuff     |
| class_20 | 56.465 | 74.752 | 75.536 |     Stuff     |
| class_21 | 89.080 | 90.384 | 98.557 |     Stuff     |
| class_22 | 37.410 | 76.309 | 49.024 |     Stuff     |
| class_23 | 86.669 | 92.396 | 93.801 |     Stuff     |
| class_24 | 53.485 | 77.239 | 69.246 |    Things     |
| class_25 | 50.005 | 74.760 | 66.888 |    Things     |
| class_26 | 66.000 | 83.486 | 79.056 |    Things     |
| class_27 | 49.297 | 88.850 | 55.484 |    Things     |
| class_28 | 65.453 | 89.642 | 73.016 |    Things     |
| class_31 | 37.771 | 83.636 | 45.161 |    Things     |
| class_32 | 40.549 | 75.016 | 54.054 |    Things     |
| class_33 | 42.059 | 71.619 | 58.726 |    Things     |
[10/07 08:13:42] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/07 08:13:42] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[10/07 08:13:42] d2.evaluation.testing INFO: copypaste: 58.0129,80.8450,70.6594,50.5775,80.5309,62.7039,63.4205,81.0735,76.4452,97.1363,97.6422,99.4819,73.7610,84.1537,87.6503,87.1759,89.3690,97.5460,43.1504,79.4999,54.2773,37.3059,75.8023,49.2147,40.6560,63.3446,64.1822,48.8168,68.1548,71.6263,56.4652,74.7523,75.5365,89.0795,90.3840,98.5567,37.4097,76.3091,49.0239,86.6689,92.3964,93.8012,53.4850,77.2393,69.2458,50.0054,74.7598,66.8882,66.0002,83.4855,79.0559,49.2972,88.8495,55.4839,65.4531,89.6423,73.0159,37.7710,83.6357,45.1613,40.5493,75.0162,54.0541,42.0590,71.6188,58.7263
