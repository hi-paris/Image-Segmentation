[08/30 07:31:18] detectron2 INFO: Rank of current process: 0. World size: 2
[08/30 07:31:19] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/30 07:31:19] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/cl_Comb_2_softmax_entropy.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/30 07:31:19] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/cl_Comb_2_softmax_entropy.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_softmax_entropy
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/30 07:31:19] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: convnext_large_d_320
    CLIP_PRETRAINED_WEIGHTS: laion2b_s29b_b131k_ft_soup
    EMBED_DIM: 768
    ENSEMBLE_ON_VALID_MASK: false
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_1000_19/model_final.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_softmax_entropy
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/30 07:31:19] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_softmax_entropy/config.yaml
[08/30 07:31:19] d2.utils.env INFO: Using a generated random seed 22577330
[08/30 07:31:31] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): TimmModel(
        (trunk): ConvNeXt(
          (stem): Sequential(
            (0): Conv2d(3, 192, kernel_size=(4, 4), stride=(4, 4))
            (1): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          )
          (stages): Sequential(
            (0): ConvNeXtStage(
              (downsample): Identity()
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): Identity()
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.003)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.006)
                )
              )
            )
            (1): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.009)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.011)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.014)
                )
              )
            )
            (2): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.017)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.020)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.023)
                )
                (3): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.026)
                )
                (4): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.029)
                )
                (5): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.031)
                )
                (6): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.034)
                )
                (7): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.037)
                )
                (8): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.040)
                )
                (9): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.043)
                )
                (10): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.046)
                )
                (11): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.049)
                )
                (12): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.051)
                )
                (13): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.054)
                )
                (14): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.057)
                )
                (15): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.060)
                )
                (16): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.063)
                )
                (17): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.066)
                )
                (18): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.069)
                )
                (19): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.071)
                )
                (20): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.074)
                )
                (21): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.077)
                )
                (22): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.080)
                )
                (23): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.083)
                )
                (24): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.086)
                )
                (25): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.089)
                )
                (26): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.091)
                )
              )
            )
            (3): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(768, 1536, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.094)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.097)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.100)
                )
              )
            )
          )
          (norm_pre): Identity()
          (head): NormMlpClassifierHead(
            (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Identity())
            (norm): LayerNorm2d((1536,), eps=1e-06, elementwise_affine=True)
            (flatten): Flatten(start_dim=1, end_dim=-1)
            (pre_logits): Identity()
            (drop): Dropout(p=0.0, inplace=False)
            (fc): Identity()
          )
        )
        (head): Sequential(
          (mlp): Mlp(
            (fc1): Linear(in_features=1536, out_features=1536, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (norm): Identity()
            (fc2): Linear(in_features=1536, out_features=768, bias=False)
            (drop2): Dropout(p=0, inplace=False)
          )
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-15): 16 x ResidualAttentionBlock(
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): GELU(approximate='none')
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 768)
      (ln_final): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(1536, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=768, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 768)
)
[08/30 07:31:31] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/30 07:31:31] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/30 07:31:31] d2.data.build INFO: Using training sampler TrainingSampler
[08/30 07:31:33] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/30 07:31:33] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/30 07:31:33] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/30 07:31:33] d2.data.build INFO: Making batched data loader with batch_size=4
[08/30 07:31:33] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/30 07:31:44] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): TimmModel(
        (trunk): ConvNeXt(
          (stem): Sequential(
            (0): Conv2d(3, 192, kernel_size=(4, 4), stride=(4, 4))
            (1): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          )
          (stages): Sequential(
            (0): ConvNeXtStage(
              (downsample): Identity()
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): Identity()
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.003)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.006)
                )
              )
            )
            (1): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.009)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.011)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.014)
                )
              )
            )
            (2): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.017)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.020)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.023)
                )
                (3): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.026)
                )
                (4): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.029)
                )
                (5): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.031)
                )
                (6): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.034)
                )
                (7): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.037)
                )
                (8): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.040)
                )
                (9): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.043)
                )
                (10): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.046)
                )
                (11): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.049)
                )
                (12): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.051)
                )
                (13): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.054)
                )
                (14): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.057)
                )
                (15): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.060)
                )
                (16): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.063)
                )
                (17): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.066)
                )
                (18): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.069)
                )
                (19): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.071)
                )
                (20): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.074)
                )
                (21): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.077)
                )
                (22): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.080)
                )
                (23): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.083)
                )
                (24): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.086)
                )
                (25): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.089)
                )
                (26): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.091)
                )
              )
            )
            (3): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(768, 1536, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.094)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.097)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.100)
                )
              )
            )
          )
          (norm_pre): Identity()
          (head): NormMlpClassifierHead(
            (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Identity())
            (norm): LayerNorm2d((1536,), eps=1e-06, elementwise_affine=True)
            (flatten): Flatten(start_dim=1, end_dim=-1)
            (pre_logits): Identity()
            (drop): Dropout(p=0.0, inplace=False)
            (fc): Identity()
          )
        )
        (head): Sequential(
          (mlp): Mlp(
            (fc1): Linear(in_features=1536, out_features=1536, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (norm): Identity()
            (fc2): Linear(in_features=1536, out_features=768, bias=False)
            (drop2): Dropout(p=0, inplace=False)
          )
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-15): 16 x ResidualAttentionBlock(
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): GELU(approximate='none')
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 768)
      (ln_final): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(1536, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=768, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 768)
)
[08/30 07:31:44] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[08/30 07:31:44] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[08/30 07:31:58] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[08/30 07:31:58] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth ...
[08/30 07:32:41] d2.utils.events INFO:  eta: 0:27:50  iter: 19  total_loss: 42.43  m1_loss_ce: 0.51  m1_loss_mask: 0.1694  m1_loss_dice: 1.144  m1_loss_ce_0: 0.6249  m1_loss_mask_0: 0.1921  m1_loss_dice_0: 1.298  m1_loss_ce_1: 0.7163  m1_loss_mask_1: 0.1831  m1_loss_dice_1: 1.302  m1_loss_ce_2: 0.5785  m1_loss_mask_2: 0.1766  m1_loss_dice_2: 1.245  m1_loss_ce_3: 0.5735  m1_loss_mask_3: 0.1742  m1_loss_dice_3: 1.166  m1_loss_ce_4: 0.5386  m1_loss_mask_4: 0.1745  m1_loss_dice_4: 1.163  m1_loss_ce_5: 0.5256  m1_loss_mask_5: 0.1705  m1_loss_dice_5: 1.193  m1_loss_ce_6: 0.5153  m1_loss_mask_6: 0.1701  m1_loss_dice_6: 1.16  m1_loss_ce_7: 0.4925  m1_loss_mask_7: 0.1707  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.5237  m1_loss_mask_8: 0.1714  m1_loss_dice_8: 1.154  m2_loss_ce: 0.4924  m2_loss_mask: 0.157  m2_loss_dice: 1.13  m2_loss_ce_0: 0.6045  m2_loss_mask_0: 0.1811  m2_loss_dice_0: 1.363  m2_loss_ce_1: 0.6721  m2_loss_mask_1: 0.1723  m2_loss_dice_1: 1.31  m2_loss_ce_2: 0.6301  m2_loss_mask_2: 0.1593  m2_loss_dice_2: 1.232  m2_loss_ce_3: 0.5589  m2_loss_mask_3: 0.162  m2_loss_dice_3: 1.196  m2_loss_ce_4: 0.5033  m2_loss_mask_4: 0.1588  m2_loss_dice_4: 1.166  m2_loss_ce_5: 0.5158  m2_loss_mask_5: 0.1596  m2_loss_dice_5: 1.196  m2_loss_ce_6: 0.5327  m2_loss_mask_6: 0.1611  m2_loss_dice_6: 1.144  m2_loss_ce_7: 0.4933  m2_loss_mask_7: 0.1576  m2_loss_dice_7: 1.17  m2_loss_ce_8: 0.4978  m2_loss_mask_8: 0.1564  m2_loss_dice_8: 1.128  com_loss_ce: 1.815  com_loss_mask: 0.6926  com_loss_dice: 0.9722    time: 1.7302  last_time: 1.7399  data_time: 0.2288  last_data_time: 0.0380   lr: 0.0001  max_mem: 36224M
[08/30 07:33:16] d2.utils.events INFO:  eta: 0:27:12  iter: 39  total_loss: 41.46  m1_loss_ce: 0.5079  m1_loss_mask: 0.1455  m1_loss_dice: 1.15  m1_loss_ce_0: 0.6053  m1_loss_mask_0: 0.1687  m1_loss_dice_0: 1.329  m1_loss_ce_1: 0.6484  m1_loss_mask_1: 0.1605  m1_loss_dice_1: 1.31  m1_loss_ce_2: 0.6299  m1_loss_mask_2: 0.1564  m1_loss_dice_2: 1.227  m1_loss_ce_3: 0.5372  m1_loss_mask_3: 0.1528  m1_loss_dice_3: 1.176  m1_loss_ce_4: 0.5191  m1_loss_mask_4: 0.1483  m1_loss_dice_4: 1.166  m1_loss_ce_5: 0.5242  m1_loss_mask_5: 0.1468  m1_loss_dice_5: 1.17  m1_loss_ce_6: 0.5066  m1_loss_mask_6: 0.1465  m1_loss_dice_6: 1.162  m1_loss_ce_7: 0.512  m1_loss_mask_7: 0.146  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.514  m1_loss_mask_8: 0.1494  m1_loss_dice_8: 1.152  m2_loss_ce: 0.5007  m2_loss_mask: 0.1493  m2_loss_dice: 1.145  m2_loss_ce_0: 0.6068  m2_loss_mask_0: 0.1671  m2_loss_dice_0: 1.31  m2_loss_ce_1: 0.6855  m2_loss_mask_1: 0.1567  m2_loss_dice_1: 1.312  m2_loss_ce_2: 0.6042  m2_loss_mask_2: 0.1541  m2_loss_dice_2: 1.23  m2_loss_ce_3: 0.5713  m2_loss_mask_3: 0.1539  m2_loss_dice_3: 1.157  m2_loss_ce_4: 0.4953  m2_loss_mask_4: 0.154  m2_loss_dice_4: 1.173  m2_loss_ce_5: 0.4839  m2_loss_mask_5: 0.1509  m2_loss_dice_5: 1.164  m2_loss_ce_6: 0.4894  m2_loss_mask_6: 0.1532  m2_loss_dice_6: 1.129  m2_loss_ce_7: 0.485  m2_loss_mask_7: 0.1529  m2_loss_dice_7: 1.141  m2_loss_ce_8: 0.4893  m2_loss_mask_8: 0.1516  m2_loss_dice_8: 1.135  com_loss_ce: 1.805  com_loss_mask: 0.6926  com_loss_dice: 0.9725    time: 1.7238  last_time: 1.7875  data_time: 0.0400  last_data_time: 0.0391   lr: 0.0001  max_mem: 36350M
[08/30 07:33:50] d2.utils.events INFO:  eta: 0:26:55  iter: 59  total_loss: 42.55  m1_loss_ce: 0.5144  m1_loss_mask: 0.1409  m1_loss_dice: 1.196  m1_loss_ce_0: 0.5859  m1_loss_mask_0: 0.1582  m1_loss_dice_0: 1.376  m1_loss_ce_1: 0.6967  m1_loss_mask_1: 0.1514  m1_loss_dice_1: 1.338  m1_loss_ce_2: 0.6216  m1_loss_mask_2: 0.1423  m1_loss_dice_2: 1.3  m1_loss_ce_3: 0.5681  m1_loss_mask_3: 0.1449  m1_loss_dice_3: 1.214  m1_loss_ce_4: 0.5336  m1_loss_mask_4: 0.1425  m1_loss_dice_4: 1.183  m1_loss_ce_5: 0.5288  m1_loss_mask_5: 0.1398  m1_loss_dice_5: 1.205  m1_loss_ce_6: 0.5059  m1_loss_mask_6: 0.1444  m1_loss_dice_6: 1.221  m1_loss_ce_7: 0.5134  m1_loss_mask_7: 0.1408  m1_loss_dice_7: 1.178  m1_loss_ce_8: 0.4934  m1_loss_mask_8: 0.1406  m1_loss_dice_8: 1.153  m2_loss_ce: 0.4799  m2_loss_mask: 0.1429  m2_loss_dice: 1.182  m2_loss_ce_0: 0.6019  m2_loss_mask_0: 0.1636  m2_loss_dice_0: 1.385  m2_loss_ce_1: 0.699  m2_loss_mask_1: 0.1497  m2_loss_dice_1: 1.341  m2_loss_ce_2: 0.6101  m2_loss_mask_2: 0.1436  m2_loss_dice_2: 1.238  m2_loss_ce_3: 0.5544  m2_loss_mask_3: 0.1462  m2_loss_dice_3: 1.176  m2_loss_ce_4: 0.5047  m2_loss_mask_4: 0.1456  m2_loss_dice_4: 1.204  m2_loss_ce_5: 0.5257  m2_loss_mask_5: 0.1433  m2_loss_dice_5: 1.192  m2_loss_ce_6: 0.4588  m2_loss_mask_6: 0.1442  m2_loss_dice_6: 1.188  m2_loss_ce_7: 0.5113  m2_loss_mask_7: 0.143  m2_loss_dice_7: 1.168  m2_loss_ce_8: 0.513  m2_loss_mask_8: 0.1437  m2_loss_dice_8: 1.17  com_loss_ce: 1.814  com_loss_mask: 0.6926  com_loss_dice: 0.9708    time: 1.7268  last_time: 1.7458  data_time: 0.0403  last_data_time: 0.0411   lr: 0.0001  max_mem: 36350M
[08/30 07:34:25] d2.utils.events INFO:  eta: 0:26:27  iter: 79  total_loss: 42.27  m1_loss_ce: 0.4825  m1_loss_mask: 0.151  m1_loss_dice: 1.243  m1_loss_ce_0: 0.5256  m1_loss_mask_0: 0.1717  m1_loss_dice_0: 1.428  m1_loss_ce_1: 0.5925  m1_loss_mask_1: 0.1604  m1_loss_dice_1: 1.354  m1_loss_ce_2: 0.5951  m1_loss_mask_2: 0.1597  m1_loss_dice_2: 1.314  m1_loss_ce_3: 0.555  m1_loss_mask_3: 0.1596  m1_loss_dice_3: 1.24  m1_loss_ce_4: 0.4974  m1_loss_mask_4: 0.1564  m1_loss_dice_4: 1.237  m1_loss_ce_5: 0.4831  m1_loss_mask_5: 0.1548  m1_loss_dice_5: 1.193  m1_loss_ce_6: 0.4443  m1_loss_mask_6: 0.1539  m1_loss_dice_6: 1.196  m1_loss_ce_7: 0.4735  m1_loss_mask_7: 0.152  m1_loss_dice_7: 1.213  m1_loss_ce_8: 0.4792  m1_loss_mask_8: 0.1529  m1_loss_dice_8: 1.203  m2_loss_ce: 0.4873  m2_loss_mask: 0.151  m2_loss_dice: 1.201  m2_loss_ce_0: 0.5555  m2_loss_mask_0: 0.1751  m2_loss_dice_0: 1.395  m2_loss_ce_1: 0.6691  m2_loss_mask_1: 0.1594  m2_loss_dice_1: 1.332  m2_loss_ce_2: 0.5973  m2_loss_mask_2: 0.1552  m2_loss_dice_2: 1.249  m2_loss_ce_3: 0.5251  m2_loss_mask_3: 0.1517  m2_loss_dice_3: 1.25  m2_loss_ce_4: 0.4999  m2_loss_mask_4: 0.15  m2_loss_dice_4: 1.181  m2_loss_ce_5: 0.4842  m2_loss_mask_5: 0.1509  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.4609  m2_loss_mask_6: 0.1512  m2_loss_dice_6: 1.176  m2_loss_ce_7: 0.4884  m2_loss_mask_7: 0.1512  m2_loss_dice_7: 1.179  m2_loss_ce_8: 0.485  m2_loss_mask_8: 0.1502  m2_loss_dice_8: 1.222  com_loss_ce: 1.814  com_loss_mask: 0.6926  com_loss_dice: 0.9739    time: 1.7285  last_time: 1.7228  data_time: 0.0410  last_data_time: 0.0433   lr: 0.0001  max_mem: 36350M
[08/30 07:35:00] d2.utils.events INFO:  eta: 0:25:58  iter: 99  total_loss: 40.33  m1_loss_ce: 0.5008  m1_loss_mask: 0.1579  m1_loss_dice: 1.14  m1_loss_ce_0: 0.5984  m1_loss_mask_0: 0.1797  m1_loss_dice_0: 1.324  m1_loss_ce_1: 0.6676  m1_loss_mask_1: 0.1734  m1_loss_dice_1: 1.315  m1_loss_ce_2: 0.6015  m1_loss_mask_2: 0.1644  m1_loss_dice_2: 1.222  m1_loss_ce_3: 0.5359  m1_loss_mask_3: 0.1641  m1_loss_dice_3: 1.174  m1_loss_ce_4: 0.4984  m1_loss_mask_4: 0.1617  m1_loss_dice_4: 1.159  m1_loss_ce_5: 0.4952  m1_loss_mask_5: 0.1627  m1_loss_dice_5: 1.143  m1_loss_ce_6: 0.476  m1_loss_mask_6: 0.1584  m1_loss_dice_6: 1.111  m1_loss_ce_7: 0.4814  m1_loss_mask_7: 0.1599  m1_loss_dice_7: 1.115  m1_loss_ce_8: 0.4732  m1_loss_mask_8: 0.1596  m1_loss_dice_8: 1.125  m2_loss_ce: 0.4999  m2_loss_mask: 0.1628  m2_loss_dice: 1.107  m2_loss_ce_0: 0.603  m2_loss_mask_0: 0.1857  m2_loss_dice_0: 1.34  m2_loss_ce_1: 0.6851  m2_loss_mask_1: 0.1785  m2_loss_dice_1: 1.23  m2_loss_ce_2: 0.5858  m2_loss_mask_2: 0.1741  m2_loss_dice_2: 1.202  m2_loss_ce_3: 0.5468  m2_loss_mask_3: 0.1689  m2_loss_dice_3: 1.137  m2_loss_ce_4: 0.5032  m2_loss_mask_4: 0.168  m2_loss_dice_4: 1.17  m2_loss_ce_5: 0.4885  m2_loss_mask_5: 0.1647  m2_loss_dice_5: 1.113  m2_loss_ce_6: 0.4762  m2_loss_mask_6: 0.1655  m2_loss_dice_6: 1.108  m2_loss_ce_7: 0.495  m2_loss_mask_7: 0.1646  m2_loss_dice_7: 1.101  m2_loss_ce_8: 0.465  m2_loss_mask_8: 0.1659  m2_loss_dice_8: 1.096  com_loss_ce: 1.811  com_loss_mask: 0.6925  com_loss_dice: 0.9717    time: 1.7338  last_time: 1.7434  data_time: 0.0401  last_data_time: 0.0419   lr: 0.0001  max_mem: 36356M
[08/30 07:35:36] d2.utils.events INFO:  eta: 0:25:24  iter: 119  total_loss: 44.08  m1_loss_ce: 0.5093  m1_loss_mask: 0.1514  m1_loss_dice: 1.242  m1_loss_ce_0: 0.6243  m1_loss_mask_0: 0.1712  m1_loss_dice_0: 1.401  m1_loss_ce_1: 0.6812  m1_loss_mask_1: 0.1617  m1_loss_dice_1: 1.384  m1_loss_ce_2: 0.5902  m1_loss_mask_2: 0.155  m1_loss_dice_2: 1.323  m1_loss_ce_3: 0.5763  m1_loss_mask_3: 0.153  m1_loss_dice_3: 1.241  m1_loss_ce_4: 0.5237  m1_loss_mask_4: 0.1515  m1_loss_dice_4: 1.267  m1_loss_ce_5: 0.5321  m1_loss_mask_5: 0.1488  m1_loss_dice_5: 1.233  m1_loss_ce_6: 0.5125  m1_loss_mask_6: 0.148  m1_loss_dice_6: 1.222  m1_loss_ce_7: 0.4882  m1_loss_mask_7: 0.1494  m1_loss_dice_7: 1.237  m1_loss_ce_8: 0.5047  m1_loss_mask_8: 0.1499  m1_loss_dice_8: 1.239  m2_loss_ce: 0.4883  m2_loss_mask: 0.1559  m2_loss_dice: 1.289  m2_loss_ce_0: 0.5892  m2_loss_mask_0: 0.1754  m2_loss_dice_0: 1.436  m2_loss_ce_1: 0.6912  m2_loss_mask_1: 0.1645  m2_loss_dice_1: 1.41  m2_loss_ce_2: 0.5664  m2_loss_mask_2: 0.1596  m2_loss_dice_2: 1.323  m2_loss_ce_3: 0.538  m2_loss_mask_3: 0.1563  m2_loss_dice_3: 1.271  m2_loss_ce_4: 0.5242  m2_loss_mask_4: 0.1553  m2_loss_dice_4: 1.265  m2_loss_ce_5: 0.5045  m2_loss_mask_5: 0.1533  m2_loss_dice_5: 1.254  m2_loss_ce_6: 0.497  m2_loss_mask_6: 0.1561  m2_loss_dice_6: 1.265  m2_loss_ce_7: 0.5128  m2_loss_mask_7: 0.1548  m2_loss_dice_7: 1.234  m2_loss_ce_8: 0.4819  m2_loss_mask_8: 0.1552  m2_loss_dice_8: 1.281  com_loss_ce: 1.802  com_loss_mask: 0.6925  com_loss_dice: 0.972    time: 1.7380  last_time: 1.9862  data_time: 0.0408  last_data_time: 0.0424   lr: 0.0001  max_mem: 36566M
[08/30 07:36:11] d2.utils.events INFO:  eta: 0:24:51  iter: 139  total_loss: 40.35  m1_loss_ce: 0.5192  m1_loss_mask: 0.164  m1_loss_dice: 1.156  m1_loss_ce_0: 0.6384  m1_loss_mask_0: 0.1768  m1_loss_dice_0: 1.311  m1_loss_ce_1: 0.6631  m1_loss_mask_1: 0.1716  m1_loss_dice_1: 1.213  m1_loss_ce_2: 0.627  m1_loss_mask_2: 0.1661  m1_loss_dice_2: 1.186  m1_loss_ce_3: 0.5599  m1_loss_mask_3: 0.1646  m1_loss_dice_3: 1.129  m1_loss_ce_4: 0.5195  m1_loss_mask_4: 0.1675  m1_loss_dice_4: 1.158  m1_loss_ce_5: 0.517  m1_loss_mask_5: 0.1651  m1_loss_dice_5: 1.167  m1_loss_ce_6: 0.4845  m1_loss_mask_6: 0.1646  m1_loss_dice_6: 1.138  m1_loss_ce_7: 0.4963  m1_loss_mask_7: 0.1642  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.4943  m1_loss_mask_8: 0.1659  m1_loss_dice_8: 1.131  m2_loss_ce: 0.4929  m2_loss_mask: 0.1612  m2_loss_dice: 1.112  m2_loss_ce_0: 0.596  m2_loss_mask_0: 0.1857  m2_loss_dice_0: 1.3  m2_loss_ce_1: 0.6767  m2_loss_mask_1: 0.1648  m2_loss_dice_1: 1.258  m2_loss_ce_2: 0.5897  m2_loss_mask_2: 0.1663  m2_loss_dice_2: 1.191  m2_loss_ce_3: 0.5618  m2_loss_mask_3: 0.1643  m2_loss_dice_3: 1.141  m2_loss_ce_4: 0.5142  m2_loss_mask_4: 0.1664  m2_loss_dice_4: 1.164  m2_loss_ce_5: 0.5176  m2_loss_mask_5: 0.163  m2_loss_dice_5: 1.129  m2_loss_ce_6: 0.4988  m2_loss_mask_6: 0.1648  m2_loss_dice_6: 1.127  m2_loss_ce_7: 0.5205  m2_loss_mask_7: 0.1604  m2_loss_dice_7: 1.13  m2_loss_ce_8: 0.4982  m2_loss_mask_8: 0.162  m2_loss_dice_8: 1.147  com_loss_ce: 1.777  com_loss_mask: 0.6925  com_loss_dice: 0.9706    time: 1.7409  last_time: 1.7707  data_time: 0.0400  last_data_time: 0.0390   lr: 0.0001  max_mem: 36566M
[08/30 07:36:46] d2.utils.events INFO:  eta: 0:24:17  iter: 159  total_loss: 41.87  m1_loss_ce: 0.4838  m1_loss_mask: 0.1534  m1_loss_dice: 1.099  m1_loss_ce_0: 0.5841  m1_loss_mask_0: 0.1804  m1_loss_dice_0: 1.334  m1_loss_ce_1: 0.6486  m1_loss_mask_1: 0.1616  m1_loss_dice_1: 1.287  m1_loss_ce_2: 0.5985  m1_loss_mask_2: 0.1569  m1_loss_dice_2: 1.218  m1_loss_ce_3: 0.5452  m1_loss_mask_3: 0.1575  m1_loss_dice_3: 1.176  m1_loss_ce_4: 0.5054  m1_loss_mask_4: 0.1568  m1_loss_dice_4: 1.172  m1_loss_ce_5: 0.4976  m1_loss_mask_5: 0.154  m1_loss_dice_5: 1.174  m1_loss_ce_6: 0.5067  m1_loss_mask_6: 0.1526  m1_loss_dice_6: 1.156  m1_loss_ce_7: 0.5048  m1_loss_mask_7: 0.1561  m1_loss_dice_7: 1.155  m1_loss_ce_8: 0.482  m1_loss_mask_8: 0.1559  m1_loss_dice_8: 1.172  m2_loss_ce: 0.4608  m2_loss_mask: 0.1552  m2_loss_dice: 1.132  m2_loss_ce_0: 0.6037  m2_loss_mask_0: 0.175  m2_loss_dice_0: 1.325  m2_loss_ce_1: 0.663  m2_loss_mask_1: 0.1632  m2_loss_dice_1: 1.273  m2_loss_ce_2: 0.5796  m2_loss_mask_2: 0.1597  m2_loss_dice_2: 1.224  m2_loss_ce_3: 0.5356  m2_loss_mask_3: 0.1568  m2_loss_dice_3: 1.147  m2_loss_ce_4: 0.5089  m2_loss_mask_4: 0.1586  m2_loss_dice_4: 1.15  m2_loss_ce_5: 0.486  m2_loss_mask_5: 0.1547  m2_loss_dice_5: 1.136  m2_loss_ce_6: 0.4861  m2_loss_mask_6: 0.1564  m2_loss_dice_6: 1.148  m2_loss_ce_7: 0.4804  m2_loss_mask_7: 0.1547  m2_loss_dice_7: 1.148  m2_loss_ce_8: 0.4976  m2_loss_mask_8: 0.1558  m2_loss_dice_8: 1.147  com_loss_ce: 1.766  com_loss_mask: 0.6925  com_loss_dice: 0.971    time: 1.7430  last_time: 1.7774  data_time: 0.0386  last_data_time: 0.0423   lr: 0.0001  max_mem: 37226M
[08/30 07:37:21] d2.utils.events INFO:  eta: 0:23:45  iter: 179  total_loss: 42.48  m1_loss_ce: 0.5012  m1_loss_mask: 0.1456  m1_loss_dice: 1.164  m1_loss_ce_0: 0.6137  m1_loss_mask_0: 0.1704  m1_loss_dice_0: 1.349  m1_loss_ce_1: 0.6577  m1_loss_mask_1: 0.1603  m1_loss_dice_1: 1.301  m1_loss_ce_2: 0.6155  m1_loss_mask_2: 0.1528  m1_loss_dice_2: 1.226  m1_loss_ce_3: 0.5595  m1_loss_mask_3: 0.1491  m1_loss_dice_3: 1.208  m1_loss_ce_4: 0.5065  m1_loss_mask_4: 0.1524  m1_loss_dice_4: 1.204  m1_loss_ce_5: 0.4978  m1_loss_mask_5: 0.1511  m1_loss_dice_5: 1.191  m1_loss_ce_6: 0.5115  m1_loss_mask_6: 0.1464  m1_loss_dice_6: 1.2  m1_loss_ce_7: 0.5089  m1_loss_mask_7: 0.1522  m1_loss_dice_7: 1.181  m1_loss_ce_8: 0.4972  m1_loss_mask_8: 0.1453  m1_loss_dice_8: 1.163  m2_loss_ce: 0.5278  m2_loss_mask: 0.1454  m2_loss_dice: 1.147  m2_loss_ce_0: 0.611  m2_loss_mask_0: 0.1677  m2_loss_dice_0: 1.329  m2_loss_ce_1: 0.6879  m2_loss_mask_1: 0.1596  m2_loss_dice_1: 1.266  m2_loss_ce_2: 0.6023  m2_loss_mask_2: 0.1542  m2_loss_dice_2: 1.247  m2_loss_ce_3: 0.6117  m2_loss_mask_3: 0.1483  m2_loss_dice_3: 1.205  m2_loss_ce_4: 0.5326  m2_loss_mask_4: 0.1511  m2_loss_dice_4: 1.197  m2_loss_ce_5: 0.5133  m2_loss_mask_5: 0.1464  m2_loss_dice_5: 1.156  m2_loss_ce_6: 0.5241  m2_loss_mask_6: 0.151  m2_loss_dice_6: 1.125  m2_loss_ce_7: 0.5461  m2_loss_mask_7: 0.1446  m2_loss_dice_7: 1.143  m2_loss_ce_8: 0.5317  m2_loss_mask_8: 0.1457  m2_loss_dice_8: 1.167  com_loss_ce: 1.787  com_loss_mask: 0.6925  com_loss_dice: 0.9721    time: 1.7447  last_time: 1.7718  data_time: 0.0391  last_data_time: 0.0407   lr: 0.0001  max_mem: 37226M
[08/30 07:37:57] d2.utils.events INFO:  eta: 0:23:11  iter: 199  total_loss: 42.92  m1_loss_ce: 0.5359  m1_loss_mask: 0.1591  m1_loss_dice: 1.215  m1_loss_ce_0: 0.6001  m1_loss_mask_0: 0.1816  m1_loss_dice_0: 1.356  m1_loss_ce_1: 0.6565  m1_loss_mask_1: 0.1723  m1_loss_dice_1: 1.329  m1_loss_ce_2: 0.5918  m1_loss_mask_2: 0.1705  m1_loss_dice_2: 1.276  m1_loss_ce_3: 0.5345  m1_loss_mask_3: 0.1664  m1_loss_dice_3: 1.233  m1_loss_ce_4: 0.5306  m1_loss_mask_4: 0.1664  m1_loss_dice_4: 1.235  m1_loss_ce_5: 0.4916  m1_loss_mask_5: 0.1633  m1_loss_dice_5: 1.23  m1_loss_ce_6: 0.483  m1_loss_mask_6: 0.1597  m1_loss_dice_6: 1.216  m1_loss_ce_7: 0.4972  m1_loss_mask_7: 0.1574  m1_loss_dice_7: 1.195  m1_loss_ce_8: 0.485  m1_loss_mask_8: 0.1648  m1_loss_dice_8: 1.191  m2_loss_ce: 0.4691  m2_loss_mask: 0.1581  m2_loss_dice: 1.22  m2_loss_ce_0: 0.5988  m2_loss_mask_0: 0.1815  m2_loss_dice_0: 1.37  m2_loss_ce_1: 0.6898  m2_loss_mask_1: 0.1679  m2_loss_dice_1: 1.341  m2_loss_ce_2: 0.6165  m2_loss_mask_2: 0.1634  m2_loss_dice_2: 1.278  m2_loss_ce_3: 0.5481  m2_loss_mask_3: 0.1605  m2_loss_dice_3: 1.235  m2_loss_ce_4: 0.5328  m2_loss_mask_4: 0.1606  m2_loss_dice_4: 1.218  m2_loss_ce_5: 0.5081  m2_loss_mask_5: 0.1597  m2_loss_dice_5: 1.248  m2_loss_ce_6: 0.506  m2_loss_mask_6: 0.159  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.5099  m2_loss_mask_7: 0.157  m2_loss_dice_7: 1.166  m2_loss_ce_8: 0.5202  m2_loss_mask_8: 0.158  m2_loss_dice_8: 1.175  com_loss_ce: 1.779  com_loss_mask: 0.6925  com_loss_dice: 0.9729    time: 1.7464  last_time: 1.7387  data_time: 0.0399  last_data_time: 0.0442   lr: 0.0001  max_mem: 37226M
[08/30 07:38:32] d2.utils.events INFO:  eta: 0:22:40  iter: 219  total_loss: 39.96  m1_loss_ce: 0.4983  m1_loss_mask: 0.1526  m1_loss_dice: 1.096  m1_loss_ce_0: 0.5797  m1_loss_mask_0: 0.1764  m1_loss_dice_0: 1.279  m1_loss_ce_1: 0.6371  m1_loss_mask_1: 0.1671  m1_loss_dice_1: 1.249  m1_loss_ce_2: 0.5594  m1_loss_mask_2: 0.1623  m1_loss_dice_2: 1.203  m1_loss_ce_3: 0.5156  m1_loss_mask_3: 0.1599  m1_loss_dice_3: 1.163  m1_loss_ce_4: 0.5094  m1_loss_mask_4: 0.158  m1_loss_dice_4: 1.13  m1_loss_ce_5: 0.4632  m1_loss_mask_5: 0.1556  m1_loss_dice_5: 1.145  m1_loss_ce_6: 0.4868  m1_loss_mask_6: 0.1531  m1_loss_dice_6: 1.124  m1_loss_ce_7: 0.4424  m1_loss_mask_7: 0.1545  m1_loss_dice_7: 1.115  m1_loss_ce_8: 0.466  m1_loss_mask_8: 0.1541  m1_loss_dice_8: 1.131  m2_loss_ce: 0.4646  m2_loss_mask: 0.1484  m2_loss_dice: 1.109  m2_loss_ce_0: 0.5528  m2_loss_mask_0: 0.1674  m2_loss_dice_0: 1.3  m2_loss_ce_1: 0.6526  m2_loss_mask_1: 0.1558  m2_loss_dice_1: 1.25  m2_loss_ce_2: 0.5698  m2_loss_mask_2: 0.1528  m2_loss_dice_2: 1.175  m2_loss_ce_3: 0.5288  m2_loss_mask_3: 0.1487  m2_loss_dice_3: 1.161  m2_loss_ce_4: 0.4952  m2_loss_mask_4: 0.149  m2_loss_dice_4: 1.113  m2_loss_ce_5: 0.4745  m2_loss_mask_5: 0.1474  m2_loss_dice_5: 1.128  m2_loss_ce_6: 0.4703  m2_loss_mask_6: 0.1488  m2_loss_dice_6: 1.106  m2_loss_ce_7: 0.483  m2_loss_mask_7: 0.1477  m2_loss_dice_7: 1.12  m2_loss_ce_8: 0.484  m2_loss_mask_8: 0.148  m2_loss_dice_8: 1.086  com_loss_ce: 1.776  com_loss_mask: 0.6925  com_loss_dice: 0.9707    time: 1.7490  last_time: 1.7752  data_time: 0.0400  last_data_time: 0.0380   lr: 0.0001  max_mem: 37226M
[08/30 07:39:08] d2.utils.events INFO:  eta: 0:22:06  iter: 239  total_loss: 42.69  m1_loss_ce: 0.5247  m1_loss_mask: 0.1531  m1_loss_dice: 1.168  m1_loss_ce_0: 0.6384  m1_loss_mask_0: 0.1759  m1_loss_dice_0: 1.372  m1_loss_ce_1: 0.7227  m1_loss_mask_1: 0.1668  m1_loss_dice_1: 1.316  m1_loss_ce_2: 0.6057  m1_loss_mask_2: 0.1556  m1_loss_dice_2: 1.284  m1_loss_ce_3: 0.5635  m1_loss_mask_3: 0.159  m1_loss_dice_3: 1.196  m1_loss_ce_4: 0.5404  m1_loss_mask_4: 0.1562  m1_loss_dice_4: 1.185  m1_loss_ce_5: 0.5477  m1_loss_mask_5: 0.1506  m1_loss_dice_5: 1.225  m1_loss_ce_6: 0.5113  m1_loss_mask_6: 0.1547  m1_loss_dice_6: 1.129  m1_loss_ce_7: 0.5323  m1_loss_mask_7: 0.1533  m1_loss_dice_7: 1.167  m1_loss_ce_8: 0.5208  m1_loss_mask_8: 0.1539  m1_loss_dice_8: 1.163  m2_loss_ce: 0.5415  m2_loss_mask: 0.1504  m2_loss_dice: 1.157  m2_loss_ce_0: 0.6135  m2_loss_mask_0: 0.1716  m2_loss_dice_0: 1.387  m2_loss_ce_1: 0.7087  m2_loss_mask_1: 0.1607  m2_loss_dice_1: 1.328  m2_loss_ce_2: 0.6193  m2_loss_mask_2: 0.156  m2_loss_dice_2: 1.255  m2_loss_ce_3: 0.5695  m2_loss_mask_3: 0.1547  m2_loss_dice_3: 1.225  m2_loss_ce_4: 0.5386  m2_loss_mask_4: 0.1536  m2_loss_dice_4: 1.2  m2_loss_ce_5: 0.5333  m2_loss_mask_5: 0.1486  m2_loss_dice_5: 1.213  m2_loss_ce_6: 0.5098  m2_loss_mask_6: 0.1518  m2_loss_dice_6: 1.177  m2_loss_ce_7: 0.5096  m2_loss_mask_7: 0.1508  m2_loss_dice_7: 1.167  m2_loss_ce_8: 0.5321  m2_loss_mask_8: 0.1504  m2_loss_dice_8: 1.165  com_loss_ce: 1.824  com_loss_mask: 0.6925  com_loss_dice: 0.9728    time: 1.7515  last_time: 1.7684  data_time: 0.0411  last_data_time: 0.0426   lr: 0.0001  max_mem: 37226M
[08/30 07:39:44] d2.utils.events INFO:  eta: 0:21:32  iter: 259  total_loss: 40.55  m1_loss_ce: 0.5318  m1_loss_mask: 0.1494  m1_loss_dice: 1.127  m1_loss_ce_0: 0.6427  m1_loss_mask_0: 0.1821  m1_loss_dice_0: 1.283  m1_loss_ce_1: 0.6673  m1_loss_mask_1: 0.1644  m1_loss_dice_1: 1.256  m1_loss_ce_2: 0.6088  m1_loss_mask_2: 0.1553  m1_loss_dice_2: 1.22  m1_loss_ce_3: 0.5602  m1_loss_mask_3: 0.1533  m1_loss_dice_3: 1.146  m1_loss_ce_4: 0.5419  m1_loss_mask_4: 0.1532  m1_loss_dice_4: 1.161  m1_loss_ce_5: 0.5139  m1_loss_mask_5: 0.1508  m1_loss_dice_5: 1.129  m1_loss_ce_6: 0.5185  m1_loss_mask_6: 0.1505  m1_loss_dice_6: 1.097  m1_loss_ce_7: 0.5077  m1_loss_mask_7: 0.1518  m1_loss_dice_7: 1.137  m1_loss_ce_8: 0.497  m1_loss_mask_8: 0.1499  m1_loss_dice_8: 1.124  m2_loss_ce: 0.4732  m2_loss_mask: 0.1526  m2_loss_dice: 1.103  m2_loss_ce_0: 0.6158  m2_loss_mask_0: 0.1795  m2_loss_dice_0: 1.306  m2_loss_ce_1: 0.6554  m2_loss_mask_1: 0.1685  m2_loss_dice_1: 1.232  m2_loss_ce_2: 0.5808  m2_loss_mask_2: 0.1628  m2_loss_dice_2: 1.167  m2_loss_ce_3: 0.5724  m2_loss_mask_3: 0.1549  m2_loss_dice_3: 1.128  m2_loss_ce_4: 0.4845  m2_loss_mask_4: 0.1557  m2_loss_dice_4: 1.136  m2_loss_ce_5: 0.4966  m2_loss_mask_5: 0.1547  m2_loss_dice_5: 1.124  m2_loss_ce_6: 0.4487  m2_loss_mask_6: 0.1535  m2_loss_dice_6: 1.103  m2_loss_ce_7: 0.4872  m2_loss_mask_7: 0.152  m2_loss_dice_7: 1.103  m2_loss_ce_8: 0.4991  m2_loss_mask_8: 0.1535  m2_loss_dice_8: 1.123  com_loss_ce: 1.816  com_loss_mask: 0.6926  com_loss_dice: 0.9717    time: 1.7535  last_time: 1.7928  data_time: 0.0390  last_data_time: 0.0486   lr: 0.0001  max_mem: 37226M
[08/30 07:40:19] d2.utils.events INFO:  eta: 0:20:58  iter: 279  total_loss: 43.51  m1_loss_ce: 0.5445  m1_loss_mask: 0.1543  m1_loss_dice: 1.201  m1_loss_ce_0: 0.6719  m1_loss_mask_0: 0.1849  m1_loss_dice_0: 1.383  m1_loss_ce_1: 0.6765  m1_loss_mask_1: 0.1751  m1_loss_dice_1: 1.348  m1_loss_ce_2: 0.6382  m1_loss_mask_2: 0.1596  m1_loss_dice_2: 1.263  m1_loss_ce_3: 0.6066  m1_loss_mask_3: 0.1585  m1_loss_dice_3: 1.229  m1_loss_ce_4: 0.5644  m1_loss_mask_4: 0.1604  m1_loss_dice_4: 1.242  m1_loss_ce_5: 0.5495  m1_loss_mask_5: 0.156  m1_loss_dice_5: 1.18  m1_loss_ce_6: 0.5235  m1_loss_mask_6: 0.1541  m1_loss_dice_6: 1.194  m1_loss_ce_7: 0.5252  m1_loss_mask_7: 0.1539  m1_loss_dice_7: 1.166  m1_loss_ce_8: 0.5513  m1_loss_mask_8: 0.1551  m1_loss_dice_8: 1.223  m2_loss_ce: 0.5137  m2_loss_mask: 0.1579  m2_loss_dice: 1.201  m2_loss_ce_0: 0.6145  m2_loss_mask_0: 0.1821  m2_loss_dice_0: 1.391  m2_loss_ce_1: 0.7067  m2_loss_mask_1: 0.1681  m2_loss_dice_1: 1.339  m2_loss_ce_2: 0.6357  m2_loss_mask_2: 0.1602  m2_loss_dice_2: 1.272  m2_loss_ce_3: 0.6084  m2_loss_mask_3: 0.1574  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.5359  m2_loss_mask_4: 0.1581  m2_loss_dice_4: 1.241  m2_loss_ce_5: 0.539  m2_loss_mask_5: 0.1581  m2_loss_dice_5: 1.211  m2_loss_ce_6: 0.539  m2_loss_mask_6: 0.1588  m2_loss_dice_6: 1.21  m2_loss_ce_7: 0.5211  m2_loss_mask_7: 0.1594  m2_loss_dice_7: 1.195  m2_loss_ce_8: 0.5367  m2_loss_mask_8: 0.1592  m2_loss_dice_8: 1.175  com_loss_ce: 1.84  com_loss_mask: 0.6925  com_loss_dice: 0.9722    time: 1.7556  last_time: 1.7456  data_time: 0.0413  last_data_time: 0.0396   lr: 0.0001  max_mem: 37226M
[08/30 07:40:55] d2.utils.events INFO:  eta: 0:20:25  iter: 299  total_loss: 43.02  m1_loss_ce: 0.5634  m1_loss_mask: 0.1586  m1_loss_dice: 1.149  m1_loss_ce_0: 0.5755  m1_loss_mask_0: 0.183  m1_loss_dice_0: 1.334  m1_loss_ce_1: 0.6557  m1_loss_mask_1: 0.1675  m1_loss_dice_1: 1.309  m1_loss_ce_2: 0.5852  m1_loss_mask_2: 0.1615  m1_loss_dice_2: 1.259  m1_loss_ce_3: 0.5713  m1_loss_mask_3: 0.161  m1_loss_dice_3: 1.188  m1_loss_ce_4: 0.5708  m1_loss_mask_4: 0.1599  m1_loss_dice_4: 1.172  m1_loss_ce_5: 0.5288  m1_loss_mask_5: 0.1573  m1_loss_dice_5: 1.183  m1_loss_ce_6: 0.5156  m1_loss_mask_6: 0.1583  m1_loss_dice_6: 1.141  m1_loss_ce_7: 0.5187  m1_loss_mask_7: 0.1563  m1_loss_dice_7: 1.137  m1_loss_ce_8: 0.5328  m1_loss_mask_8: 0.1569  m1_loss_dice_8: 1.151  m2_loss_ce: 0.5185  m2_loss_mask: 0.1561  m2_loss_dice: 1.151  m2_loss_ce_0: 0.6225  m2_loss_mask_0: 0.1857  m2_loss_dice_0: 1.34  m2_loss_ce_1: 0.6868  m2_loss_mask_1: 0.1623  m2_loss_dice_1: 1.289  m2_loss_ce_2: 0.6  m2_loss_mask_2: 0.1618  m2_loss_dice_2: 1.281  m2_loss_ce_3: 0.5519  m2_loss_mask_3: 0.1607  m2_loss_dice_3: 1.205  m2_loss_ce_4: 0.5689  m2_loss_mask_4: 0.1604  m2_loss_dice_4: 1.204  m2_loss_ce_5: 0.5426  m2_loss_mask_5: 0.1587  m2_loss_dice_5: 1.18  m2_loss_ce_6: 0.5435  m2_loss_mask_6: 0.1577  m2_loss_dice_6: 1.161  m2_loss_ce_7: 0.5621  m2_loss_mask_7: 0.1573  m2_loss_dice_7: 1.141  m2_loss_ce_8: 0.5306  m2_loss_mask_8: 0.1556  m2_loss_dice_8: 1.189  com_loss_ce: 1.802  com_loss_mask: 0.6926  com_loss_dice: 0.9718    time: 1.7568  last_time: 1.7585  data_time: 0.0401  last_data_time: 0.0352   lr: 0.0001  max_mem: 37226M
[08/30 07:41:31] d2.utils.events INFO:  eta: 0:19:51  iter: 319  total_loss: 41.25  m1_loss_ce: 0.5339  m1_loss_mask: 0.1461  m1_loss_dice: 1.096  m1_loss_ce_0: 0.6012  m1_loss_mask_0: 0.1743  m1_loss_dice_0: 1.26  m1_loss_ce_1: 0.6405  m1_loss_mask_1: 0.1604  m1_loss_dice_1: 1.228  m1_loss_ce_2: 0.5669  m1_loss_mask_2: 0.1454  m1_loss_dice_2: 1.203  m1_loss_ce_3: 0.5362  m1_loss_mask_3: 0.1478  m1_loss_dice_3: 1.127  m1_loss_ce_4: 0.5047  m1_loss_mask_4: 0.151  m1_loss_dice_4: 1.14  m1_loss_ce_5: 0.4959  m1_loss_mask_5: 0.1469  m1_loss_dice_5: 1.113  m1_loss_ce_6: 0.5066  m1_loss_mask_6: 0.1465  m1_loss_dice_6: 1.118  m1_loss_ce_7: 0.4955  m1_loss_mask_7: 0.1465  m1_loss_dice_7: 1.104  m1_loss_ce_8: 0.5011  m1_loss_mask_8: 0.1456  m1_loss_dice_8: 1.118  m2_loss_ce: 0.4545  m2_loss_mask: 0.1465  m2_loss_dice: 1.123  m2_loss_ce_0: 0.5946  m2_loss_mask_0: 0.1709  m2_loss_dice_0: 1.278  m2_loss_ce_1: 0.6582  m2_loss_mask_1: 0.1569  m2_loss_dice_1: 1.265  m2_loss_ce_2: 0.5993  m2_loss_mask_2: 0.1498  m2_loss_dice_2: 1.174  m2_loss_ce_3: 0.5437  m2_loss_mask_3: 0.1471  m2_loss_dice_3: 1.145  m2_loss_ce_4: 0.503  m2_loss_mask_4: 0.1485  m2_loss_dice_4: 1.154  m2_loss_ce_5: 0.4984  m2_loss_mask_5: 0.144  m2_loss_dice_5: 1.168  m2_loss_ce_6: 0.4671  m2_loss_mask_6: 0.1458  m2_loss_dice_6: 1.09  m2_loss_ce_7: 0.4865  m2_loss_mask_7: 0.1454  m2_loss_dice_7: 1.123  m2_loss_ce_8: 0.4786  m2_loss_mask_8: 0.1461  m2_loss_dice_8: 1.127  com_loss_ce: 1.786  com_loss_mask: 0.6926  com_loss_dice: 0.9716    time: 1.7582  last_time: 1.7406  data_time: 0.0408  last_data_time: 0.0523   lr: 0.0001  max_mem: 37226M
[08/30 07:42:06] d2.utils.events INFO:  eta: 0:19:19  iter: 339  total_loss: 42.5  m1_loss_ce: 0.5325  m1_loss_mask: 0.1619  m1_loss_dice: 1.141  m1_loss_ce_0: 0.5878  m1_loss_mask_0: 0.1895  m1_loss_dice_0: 1.391  m1_loss_ce_1: 0.695  m1_loss_mask_1: 0.1708  m1_loss_dice_1: 1.329  m1_loss_ce_2: 0.6135  m1_loss_mask_2: 0.1657  m1_loss_dice_2: 1.244  m1_loss_ce_3: 0.5537  m1_loss_mask_3: 0.1635  m1_loss_dice_3: 1.176  m1_loss_ce_4: 0.5529  m1_loss_mask_4: 0.1644  m1_loss_dice_4: 1.154  m1_loss_ce_5: 0.531  m1_loss_mask_5: 0.165  m1_loss_dice_5: 1.163  m1_loss_ce_6: 0.5302  m1_loss_mask_6: 0.1648  m1_loss_dice_6: 1.154  m1_loss_ce_7: 0.5558  m1_loss_mask_7: 0.1644  m1_loss_dice_7: 1.156  m1_loss_ce_8: 0.526  m1_loss_mask_8: 0.1646  m1_loss_dice_8: 1.153  m2_loss_ce: 0.5416  m2_loss_mask: 0.1615  m2_loss_dice: 1.154  m2_loss_ce_0: 0.6228  m2_loss_mask_0: 0.1824  m2_loss_dice_0: 1.357  m2_loss_ce_1: 0.7228  m2_loss_mask_1: 0.1746  m2_loss_dice_1: 1.286  m2_loss_ce_2: 0.6209  m2_loss_mask_2: 0.169  m2_loss_dice_2: 1.236  m2_loss_ce_3: 0.5857  m2_loss_mask_3: 0.1675  m2_loss_dice_3: 1.21  m2_loss_ce_4: 0.5318  m2_loss_mask_4: 0.1667  m2_loss_dice_4: 1.188  m2_loss_ce_5: 0.5555  m2_loss_mask_5: 0.1654  m2_loss_dice_5: 1.198  m2_loss_ce_6: 0.5314  m2_loss_mask_6: 0.1687  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.5106  m2_loss_mask_7: 0.1635  m2_loss_dice_7: 1.165  m2_loss_ce_8: 0.5201  m2_loss_mask_8: 0.1628  m2_loss_dice_8: 1.203  com_loss_ce: 1.816  com_loss_mask: 0.6925  com_loss_dice: 0.9733    time: 1.7591  last_time: 1.7794  data_time: 0.0385  last_data_time: 0.0358   lr: 0.0001  max_mem: 37226M
[08/30 07:42:42] d2.utils.events INFO:  eta: 0:18:43  iter: 359  total_loss: 41.98  m1_loss_ce: 0.5234  m1_loss_mask: 0.1574  m1_loss_dice: 1.122  m1_loss_ce_0: 0.5941  m1_loss_mask_0: 0.1837  m1_loss_dice_0: 1.316  m1_loss_ce_1: 0.6817  m1_loss_mask_1: 0.1695  m1_loss_dice_1: 1.254  m1_loss_ce_2: 0.6199  m1_loss_mask_2: 0.1589  m1_loss_dice_2: 1.243  m1_loss_ce_3: 0.5708  m1_loss_mask_3: 0.1636  m1_loss_dice_3: 1.135  m1_loss_ce_4: 0.5267  m1_loss_mask_4: 0.1593  m1_loss_dice_4: 1.13  m1_loss_ce_5: 0.5503  m1_loss_mask_5: 0.1582  m1_loss_dice_5: 1.135  m1_loss_ce_6: 0.5269  m1_loss_mask_6: 0.1589  m1_loss_dice_6: 1.134  m1_loss_ce_7: 0.5489  m1_loss_mask_7: 0.1571  m1_loss_dice_7: 1.116  m1_loss_ce_8: 0.4814  m1_loss_mask_8: 0.1579  m1_loss_dice_8: 1.138  m2_loss_ce: 0.5286  m2_loss_mask: 0.1538  m2_loss_dice: 1.11  m2_loss_ce_0: 0.6116  m2_loss_mask_0: 0.1855  m2_loss_dice_0: 1.333  m2_loss_ce_1: 0.6994  m2_loss_mask_1: 0.1701  m2_loss_dice_1: 1.261  m2_loss_ce_2: 0.6196  m2_loss_mask_2: 0.1695  m2_loss_dice_2: 1.211  m2_loss_ce_3: 0.5933  m2_loss_mask_3: 0.16  m2_loss_dice_3: 1.151  m2_loss_ce_4: 0.5462  m2_loss_mask_4: 0.1584  m2_loss_dice_4: 1.148  m2_loss_ce_5: 0.5248  m2_loss_mask_5: 0.1542  m2_loss_dice_5: 1.151  m2_loss_ce_6: 0.5523  m2_loss_mask_6: 0.1563  m2_loss_dice_6: 1.127  m2_loss_ce_7: 0.5289  m2_loss_mask_7: 0.1563  m2_loss_dice_7: 1.145  m2_loss_ce_8: 0.5306  m2_loss_mask_8: 0.1534  m2_loss_dice_8: 1.105  com_loss_ce: 1.808  com_loss_mask: 0.6925  com_loss_dice: 0.9716    time: 1.7600  last_time: 1.7445  data_time: 0.0391  last_data_time: 0.0340   lr: 0.0001  max_mem: 37226M
[08/30 07:43:18] d2.utils.events INFO:  eta: 0:18:10  iter: 379  total_loss: 43.24  m1_loss_ce: 0.5648  m1_loss_mask: 0.1503  m1_loss_dice: 1.209  m1_loss_ce_0: 0.6234  m1_loss_mask_0: 0.1764  m1_loss_dice_0: 1.38  m1_loss_ce_1: 0.7295  m1_loss_mask_1: 0.1604  m1_loss_dice_1: 1.32  m1_loss_ce_2: 0.6435  m1_loss_mask_2: 0.1536  m1_loss_dice_2: 1.245  m1_loss_ce_3: 0.5908  m1_loss_mask_3: 0.156  m1_loss_dice_3: 1.22  m1_loss_ce_4: 0.557  m1_loss_mask_4: 0.1503  m1_loss_dice_4: 1.197  m1_loss_ce_5: 0.5441  m1_loss_mask_5: 0.1473  m1_loss_dice_5: 1.208  m1_loss_ce_6: 0.5722  m1_loss_mask_6: 0.1504  m1_loss_dice_6: 1.188  m1_loss_ce_7: 0.559  m1_loss_mask_7: 0.1483  m1_loss_dice_7: 1.175  m1_loss_ce_8: 0.5413  m1_loss_mask_8: 0.1508  m1_loss_dice_8: 1.185  m2_loss_ce: 0.5203  m2_loss_mask: 0.1586  m2_loss_dice: 1.166  m2_loss_ce_0: 0.6491  m2_loss_mask_0: 0.1819  m2_loss_dice_0: 1.381  m2_loss_ce_1: 0.6853  m2_loss_mask_1: 0.1673  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.6159  m2_loss_mask_2: 0.1667  m2_loss_dice_2: 1.279  m2_loss_ce_3: 0.5964  m2_loss_mask_3: 0.1577  m2_loss_dice_3: 1.224  m2_loss_ce_4: 0.5796  m2_loss_mask_4: 0.1563  m2_loss_dice_4: 1.188  m2_loss_ce_5: 0.5336  m2_loss_mask_5: 0.1582  m2_loss_dice_5: 1.198  m2_loss_ce_6: 0.5092  m2_loss_mask_6: 0.1577  m2_loss_dice_6: 1.184  m2_loss_ce_7: 0.5412  m2_loss_mask_7: 0.1581  m2_loss_dice_7: 1.178  m2_loss_ce_8: 0.534  m2_loss_mask_8: 0.1566  m2_loss_dice_8: 1.178  com_loss_ce: 1.831  com_loss_mask: 0.6925  com_loss_dice: 0.9727    time: 1.7611  last_time: 1.7675  data_time: 0.0393  last_data_time: 0.0378   lr: 0.0001  max_mem: 37226M
[08/30 07:43:54] d2.utils.events INFO:  eta: 0:17:35  iter: 399  total_loss: 41.93  m1_loss_ce: 0.4928  m1_loss_mask: 0.1541  m1_loss_dice: 1.151  m1_loss_ce_0: 0.6059  m1_loss_mask_0: 0.1848  m1_loss_dice_0: 1.329  m1_loss_ce_1: 0.6623  m1_loss_mask_1: 0.1721  m1_loss_dice_1: 1.282  m1_loss_ce_2: 0.5822  m1_loss_mask_2: 0.1602  m1_loss_dice_2: 1.269  m1_loss_ce_3: 0.5544  m1_loss_mask_3: 0.1584  m1_loss_dice_3: 1.165  m1_loss_ce_4: 0.5136  m1_loss_mask_4: 0.1599  m1_loss_dice_4: 1.151  m1_loss_ce_5: 0.5063  m1_loss_mask_5: 0.157  m1_loss_dice_5: 1.175  m1_loss_ce_6: 0.4938  m1_loss_mask_6: 0.1562  m1_loss_dice_6: 1.192  m1_loss_ce_7: 0.4724  m1_loss_mask_7: 0.155  m1_loss_dice_7: 1.161  m1_loss_ce_8: 0.4811  m1_loss_mask_8: 0.1538  m1_loss_dice_8: 1.123  m2_loss_ce: 0.487  m2_loss_mask: 0.1643  m2_loss_dice: 1.184  m2_loss_ce_0: 0.5971  m2_loss_mask_0: 0.1833  m2_loss_dice_0: 1.345  m2_loss_ce_1: 0.6843  m2_loss_mask_1: 0.1805  m2_loss_dice_1: 1.315  m2_loss_ce_2: 0.5945  m2_loss_mask_2: 0.1731  m2_loss_dice_2: 1.256  m2_loss_ce_3: 0.5641  m2_loss_mask_3: 0.1666  m2_loss_dice_3: 1.218  m2_loss_ce_4: 0.5052  m2_loss_mask_4: 0.1641  m2_loss_dice_4: 1.214  m2_loss_ce_5: 0.505  m2_loss_mask_5: 0.1636  m2_loss_dice_5: 1.193  m2_loss_ce_6: 0.5068  m2_loss_mask_6: 0.1623  m2_loss_dice_6: 1.146  m2_loss_ce_7: 0.4917  m2_loss_mask_7: 0.1635  m2_loss_dice_7: 1.144  m2_loss_ce_8: 0.4908  m2_loss_mask_8: 0.1634  m2_loss_dice_8: 1.194  com_loss_ce: 1.804  com_loss_mask: 0.6925  com_loss_dice: 0.9719    time: 1.7637  last_time: 1.7779  data_time: 0.0389  last_data_time: 0.0368   lr: 0.0001  max_mem: 37545M
[08/30 07:44:30] d2.utils.events INFO:  eta: 0:17:01  iter: 419  total_loss: 39.92  m1_loss_ce: 0.5022  m1_loss_mask: 0.1455  m1_loss_dice: 1.13  m1_loss_ce_0: 0.5696  m1_loss_mask_0: 0.166  m1_loss_dice_0: 1.303  m1_loss_ce_1: 0.6206  m1_loss_mask_1: 0.16  m1_loss_dice_1: 1.251  m1_loss_ce_2: 0.5641  m1_loss_mask_2: 0.1526  m1_loss_dice_2: 1.188  m1_loss_ce_3: 0.53  m1_loss_mask_3: 0.1502  m1_loss_dice_3: 1.145  m1_loss_ce_4: 0.5101  m1_loss_mask_4: 0.1486  m1_loss_dice_4: 1.13  m1_loss_ce_5: 0.4928  m1_loss_mask_5: 0.1474  m1_loss_dice_5: 1.136  m1_loss_ce_6: 0.4492  m1_loss_mask_6: 0.1466  m1_loss_dice_6: 1.078  m1_loss_ce_7: 0.4745  m1_loss_mask_7: 0.1465  m1_loss_dice_7: 1.099  m1_loss_ce_8: 0.4578  m1_loss_mask_8: 0.1481  m1_loss_dice_8: 1.094  m2_loss_ce: 0.4482  m2_loss_mask: 0.1498  m2_loss_dice: 1.101  m2_loss_ce_0: 0.5631  m2_loss_mask_0: 0.1743  m2_loss_dice_0: 1.311  m2_loss_ce_1: 0.6408  m2_loss_mask_1: 0.1597  m2_loss_dice_1: 1.251  m2_loss_ce_2: 0.5734  m2_loss_mask_2: 0.156  m2_loss_dice_2: 1.176  m2_loss_ce_3: 0.5218  m2_loss_mask_3: 0.1501  m2_loss_dice_3: 1.147  m2_loss_ce_4: 0.4797  m2_loss_mask_4: 0.1514  m2_loss_dice_4: 1.15  m2_loss_ce_5: 0.5031  m2_loss_mask_5: 0.1513  m2_loss_dice_5: 1.117  m2_loss_ce_6: 0.4644  m2_loss_mask_6: 0.1524  m2_loss_dice_6: 1.105  m2_loss_ce_7: 0.4878  m2_loss_mask_7: 0.151  m2_loss_dice_7: 1.125  m2_loss_ce_8: 0.4903  m2_loss_mask_8: 0.1519  m2_loss_dice_8: 1.088  com_loss_ce: 1.796  com_loss_mask: 0.6926  com_loss_dice: 0.9722    time: 1.7648  last_time: 1.7884  data_time: 0.0391  last_data_time: 0.0317   lr: 0.0001  max_mem: 37545M
[08/30 07:45:06] d2.utils.events INFO:  eta: 0:16:26  iter: 439  total_loss: 42.53  m1_loss_ce: 0.5213  m1_loss_mask: 0.1525  m1_loss_dice: 1.136  m1_loss_ce_0: 0.6105  m1_loss_mask_0: 0.1707  m1_loss_dice_0: 1.355  m1_loss_ce_1: 0.6543  m1_loss_mask_1: 0.1679  m1_loss_dice_1: 1.273  m1_loss_ce_2: 0.567  m1_loss_mask_2: 0.1581  m1_loss_dice_2: 1.21  m1_loss_ce_3: 0.5682  m1_loss_mask_3: 0.1535  m1_loss_dice_3: 1.146  m1_loss_ce_4: 0.5217  m1_loss_mask_4: 0.1546  m1_loss_dice_4: 1.157  m1_loss_ce_5: 0.5006  m1_loss_mask_5: 0.1512  m1_loss_dice_5: 1.172  m1_loss_ce_6: 0.4866  m1_loss_mask_6: 0.1517  m1_loss_dice_6: 1.169  m1_loss_ce_7: 0.4978  m1_loss_mask_7: 0.1508  m1_loss_dice_7: 1.127  m1_loss_ce_8: 0.5052  m1_loss_mask_8: 0.1508  m1_loss_dice_8: 1.12  m2_loss_ce: 0.514  m2_loss_mask: 0.1501  m2_loss_dice: 1.154  m2_loss_ce_0: 0.6286  m2_loss_mask_0: 0.177  m2_loss_dice_0: 1.363  m2_loss_ce_1: 0.6768  m2_loss_mask_1: 0.171  m2_loss_dice_1: 1.305  m2_loss_ce_2: 0.6247  m2_loss_mask_2: 0.16  m2_loss_dice_2: 1.218  m2_loss_ce_3: 0.5718  m2_loss_mask_3: 0.1547  m2_loss_dice_3: 1.176  m2_loss_ce_4: 0.5422  m2_loss_mask_4: 0.1591  m2_loss_dice_4: 1.189  m2_loss_ce_5: 0.5412  m2_loss_mask_5: 0.1531  m2_loss_dice_5: 1.149  m2_loss_ce_6: 0.5243  m2_loss_mask_6: 0.1531  m2_loss_dice_6: 1.16  m2_loss_ce_7: 0.4789  m2_loss_mask_7: 0.1519  m2_loss_dice_7: 1.139  m2_loss_ce_8: 0.4891  m2_loss_mask_8: 0.1533  m2_loss_dice_8: 1.16  com_loss_ce: 1.806  com_loss_mask: 0.6926  com_loss_dice: 0.9721    time: 1.7657  last_time: 1.7670  data_time: 0.0387  last_data_time: 0.0415   lr: 0.0001  max_mem: 37545M
[08/30 07:45:41] d2.utils.events INFO:  eta: 0:15:52  iter: 459  total_loss: 40.74  m1_loss_ce: 0.4587  m1_loss_mask: 0.1502  m1_loss_dice: 1.154  m1_loss_ce_0: 0.5965  m1_loss_mask_0: 0.1739  m1_loss_dice_0: 1.31  m1_loss_ce_1: 0.6519  m1_loss_mask_1: 0.1715  m1_loss_dice_1: 1.219  m1_loss_ce_2: 0.5648  m1_loss_mask_2: 0.1601  m1_loss_dice_2: 1.231  m1_loss_ce_3: 0.5564  m1_loss_mask_3: 0.1568  m1_loss_dice_3: 1.152  m1_loss_ce_4: 0.5109  m1_loss_mask_4: 0.156  m1_loss_dice_4: 1.128  m1_loss_ce_5: 0.481  m1_loss_mask_5: 0.1531  m1_loss_dice_5: 1.144  m1_loss_ce_6: 0.4873  m1_loss_mask_6: 0.1532  m1_loss_dice_6: 1.117  m1_loss_ce_7: 0.4553  m1_loss_mask_7: 0.1501  m1_loss_dice_7: 1.095  m1_loss_ce_8: 0.4576  m1_loss_mask_8: 0.1524  m1_loss_dice_8: 1.127  m2_loss_ce: 0.5012  m2_loss_mask: 0.1533  m2_loss_dice: 1.119  m2_loss_ce_0: 0.6091  m2_loss_mask_0: 0.1733  m2_loss_dice_0: 1.324  m2_loss_ce_1: 0.7076  m2_loss_mask_1: 0.1617  m2_loss_dice_1: 1.256  m2_loss_ce_2: 0.6154  m2_loss_mask_2: 0.1547  m2_loss_dice_2: 1.17  m2_loss_ce_3: 0.5642  m2_loss_mask_3: 0.1548  m2_loss_dice_3: 1.16  m2_loss_ce_4: 0.5191  m2_loss_mask_4: 0.1564  m2_loss_dice_4: 1.141  m2_loss_ce_5: 0.5321  m2_loss_mask_5: 0.1571  m2_loss_dice_5: 1.131  m2_loss_ce_6: 0.5162  m2_loss_mask_6: 0.1545  m2_loss_dice_6: 1.141  m2_loss_ce_7: 0.5171  m2_loss_mask_7: 0.1529  m2_loss_dice_7: 1.137  m2_loss_ce_8: 0.5  m2_loss_mask_8: 0.1542  m2_loss_dice_8: 1.129  com_loss_ce: 1.805  com_loss_mask: 0.6926  com_loss_dice: 0.9726    time: 1.7667  last_time: 1.8182  data_time: 0.0398  last_data_time: 0.0421   lr: 0.0001  max_mem: 37545M
[08/30 07:46:17] d2.utils.events INFO:  eta: 0:15:17  iter: 479  total_loss: 41.85  m1_loss_ce: 0.5389  m1_loss_mask: 0.1398  m1_loss_dice: 1.16  m1_loss_ce_0: 0.5794  m1_loss_mask_0: 0.1618  m1_loss_dice_0: 1.33  m1_loss_ce_1: 0.6874  m1_loss_mask_1: 0.1503  m1_loss_dice_1: 1.257  m1_loss_ce_2: 0.6217  m1_loss_mask_2: 0.1432  m1_loss_dice_2: 1.237  m1_loss_ce_3: 0.5529  m1_loss_mask_3: 0.1405  m1_loss_dice_3: 1.17  m1_loss_ce_4: 0.5632  m1_loss_mask_4: 0.141  m1_loss_dice_4: 1.175  m1_loss_ce_5: 0.5188  m1_loss_mask_5: 0.1398  m1_loss_dice_5: 1.17  m1_loss_ce_6: 0.5048  m1_loss_mask_6: 0.1386  m1_loss_dice_6: 1.15  m1_loss_ce_7: 0.4945  m1_loss_mask_7: 0.1417  m1_loss_dice_7: 1.14  m1_loss_ce_8: 0.5121  m1_loss_mask_8: 0.1402  m1_loss_dice_8: 1.153  m2_loss_ce: 0.5381  m2_loss_mask: 0.146  m2_loss_dice: 1.151  m2_loss_ce_0: 0.611  m2_loss_mask_0: 0.1636  m2_loss_dice_0: 1.325  m2_loss_ce_1: 0.6772  m2_loss_mask_1: 0.1527  m2_loss_dice_1: 1.294  m2_loss_ce_2: 0.6271  m2_loss_mask_2: 0.1502  m2_loss_dice_2: 1.258  m2_loss_ce_3: 0.5897  m2_loss_mask_3: 0.1474  m2_loss_dice_3: 1.193  m2_loss_ce_4: 0.5572  m2_loss_mask_4: 0.1481  m2_loss_dice_4: 1.182  m2_loss_ce_5: 0.5156  m2_loss_mask_5: 0.147  m2_loss_dice_5: 1.156  m2_loss_ce_6: 0.5291  m2_loss_mask_6: 0.1461  m2_loss_dice_6: 1.157  m2_loss_ce_7: 0.5225  m2_loss_mask_7: 0.1453  m2_loss_dice_7: 1.114  m2_loss_ce_8: 0.5208  m2_loss_mask_8: 0.1463  m2_loss_dice_8: 1.164  com_loss_ce: 1.793  com_loss_mask: 0.6926  com_loss_dice: 0.9745    time: 1.7674  last_time: 1.7843  data_time: 0.0395  last_data_time: 0.0377   lr: 0.0001  max_mem: 37545M
[08/30 07:46:53] d2.utils.events INFO:  eta: 0:14:42  iter: 499  total_loss: 40.87  m1_loss_ce: 0.5186  m1_loss_mask: 0.1567  m1_loss_dice: 1.12  m1_loss_ce_0: 0.5667  m1_loss_mask_0: 0.176  m1_loss_dice_0: 1.371  m1_loss_ce_1: 0.653  m1_loss_mask_1: 0.1671  m1_loss_dice_1: 1.299  m1_loss_ce_2: 0.5865  m1_loss_mask_2: 0.1617  m1_loss_dice_2: 1.215  m1_loss_ce_3: 0.552  m1_loss_mask_3: 0.158  m1_loss_dice_3: 1.154  m1_loss_ce_4: 0.5079  m1_loss_mask_4: 0.1628  m1_loss_dice_4: 1.158  m1_loss_ce_5: 0.4818  m1_loss_mask_5: 0.1586  m1_loss_dice_5: 1.141  m1_loss_ce_6: 0.4741  m1_loss_mask_6: 0.1576  m1_loss_dice_6: 1.133  m1_loss_ce_7: 0.4733  m1_loss_mask_7: 0.1596  m1_loss_dice_7: 1.16  m1_loss_ce_8: 0.4594  m1_loss_mask_8: 0.1569  m1_loss_dice_8: 1.138  m2_loss_ce: 0.4877  m2_loss_mask: 0.157  m2_loss_dice: 1.156  m2_loss_ce_0: 0.6169  m2_loss_mask_0: 0.1819  m2_loss_dice_0: 1.356  m2_loss_ce_1: 0.6842  m2_loss_mask_1: 0.164  m2_loss_dice_1: 1.271  m2_loss_ce_2: 0.5959  m2_loss_mask_2: 0.1598  m2_loss_dice_2: 1.223  m2_loss_ce_3: 0.5721  m2_loss_mask_3: 0.1574  m2_loss_dice_3: 1.195  m2_loss_ce_4: 0.5298  m2_loss_mask_4: 0.1599  m2_loss_dice_4: 1.18  m2_loss_ce_5: 0.5066  m2_loss_mask_5: 0.1568  m2_loss_dice_5: 1.193  m2_loss_ce_6: 0.5026  m2_loss_mask_6: 0.1605  m2_loss_dice_6: 1.171  m2_loss_ce_7: 0.5036  m2_loss_mask_7: 0.1582  m2_loss_dice_7: 1.134  m2_loss_ce_8: 0.4861  m2_loss_mask_8: 0.1577  m2_loss_dice_8: 1.127  com_loss_ce: 1.794  com_loss_mask: 0.6926  com_loss_dice: 0.9708    time: 1.7680  last_time: 1.7435  data_time: 0.0403  last_data_time: 0.0426   lr: 0.0001  max_mem: 37545M
[08/30 07:47:29] d2.utils.events INFO:  eta: 0:14:07  iter: 519  total_loss: 39.29  m1_loss_ce: 0.4693  m1_loss_mask: 0.1415  m1_loss_dice: 1.066  m1_loss_ce_0: 0.6042  m1_loss_mask_0: 0.1719  m1_loss_dice_0: 1.233  m1_loss_ce_1: 0.6427  m1_loss_mask_1: 0.1605  m1_loss_dice_1: 1.19  m1_loss_ce_2: 0.5779  m1_loss_mask_2: 0.1601  m1_loss_dice_2: 1.162  m1_loss_ce_3: 0.5275  m1_loss_mask_3: 0.1568  m1_loss_dice_3: 1.101  m1_loss_ce_4: 0.4844  m1_loss_mask_4: 0.1523  m1_loss_dice_4: 1.084  m1_loss_ce_5: 0.4808  m1_loss_mask_5: 0.1469  m1_loss_dice_5: 1.091  m1_loss_ce_6: 0.4668  m1_loss_mask_6: 0.1475  m1_loss_dice_6: 1.053  m1_loss_ce_7: 0.4564  m1_loss_mask_7: 0.1478  m1_loss_dice_7: 1.063  m1_loss_ce_8: 0.4677  m1_loss_mask_8: 0.144  m1_loss_dice_8: 1.058  m2_loss_ce: 0.4717  m2_loss_mask: 0.1515  m2_loss_dice: 1.067  m2_loss_ce_0: 0.5772  m2_loss_mask_0: 0.1823  m2_loss_dice_0: 1.281  m2_loss_ce_1: 0.6714  m2_loss_mask_1: 0.1602  m2_loss_dice_1: 1.226  m2_loss_ce_2: 0.5773  m2_loss_mask_2: 0.1584  m2_loss_dice_2: 1.139  m2_loss_ce_3: 0.574  m2_loss_mask_3: 0.1573  m2_loss_dice_3: 1.114  m2_loss_ce_4: 0.5057  m2_loss_mask_4: 0.1562  m2_loss_dice_4: 1.115  m2_loss_ce_5: 0.4677  m2_loss_mask_5: 0.1527  m2_loss_dice_5: 1.123  m2_loss_ce_6: 0.4851  m2_loss_mask_6: 0.1541  m2_loss_dice_6: 1.102  m2_loss_ce_7: 0.4956  m2_loss_mask_7: 0.1518  m2_loss_dice_7: 1.098  m2_loss_ce_8: 0.4835  m2_loss_mask_8: 0.1523  m2_loss_dice_8: 1.093  com_loss_ce: 1.787  com_loss_mask: 0.6926  com_loss_dice: 0.9702    time: 1.7688  last_time: 1.8353  data_time: 0.0414  last_data_time: 0.0391   lr: 0.0001  max_mem: 37545M
[08/30 07:48:05] d2.utils.events INFO:  eta: 0:13:32  iter: 539  total_loss: 42.26  m1_loss_ce: 0.5295  m1_loss_mask: 0.1556  m1_loss_dice: 1.115  m1_loss_ce_0: 0.5943  m1_loss_mask_0: 0.1806  m1_loss_dice_0: 1.341  m1_loss_ce_1: 0.6694  m1_loss_mask_1: 0.1652  m1_loss_dice_1: 1.277  m1_loss_ce_2: 0.6092  m1_loss_mask_2: 0.1581  m1_loss_dice_2: 1.189  m1_loss_ce_3: 0.5653  m1_loss_mask_3: 0.1588  m1_loss_dice_3: 1.177  m1_loss_ce_4: 0.5006  m1_loss_mask_4: 0.1588  m1_loss_dice_4: 1.149  m1_loss_ce_5: 0.521  m1_loss_mask_5: 0.1566  m1_loss_dice_5: 1.156  m1_loss_ce_6: 0.5317  m1_loss_mask_6: 0.158  m1_loss_dice_6: 1.132  m1_loss_ce_7: 0.5165  m1_loss_mask_7: 0.1556  m1_loss_dice_7: 1.153  m1_loss_ce_8: 0.5135  m1_loss_mask_8: 0.157  m1_loss_dice_8: 1.145  m2_loss_ce: 0.5372  m2_loss_mask: 0.1614  m2_loss_dice: 1.15  m2_loss_ce_0: 0.636  m2_loss_mask_0: 0.179  m2_loss_dice_0: 1.344  m2_loss_ce_1: 0.7354  m2_loss_mask_1: 0.1701  m2_loss_dice_1: 1.283  m2_loss_ce_2: 0.6188  m2_loss_mask_2: 0.1643  m2_loss_dice_2: 1.256  m2_loss_ce_3: 0.5727  m2_loss_mask_3: 0.1653  m2_loss_dice_3: 1.231  m2_loss_ce_4: 0.5445  m2_loss_mask_4: 0.165  m2_loss_dice_4: 1.204  m2_loss_ce_5: 0.53  m2_loss_mask_5: 0.1632  m2_loss_dice_5: 1.182  m2_loss_ce_6: 0.5265  m2_loss_mask_6: 0.1614  m2_loss_dice_6: 1.187  m2_loss_ce_7: 0.5194  m2_loss_mask_7: 0.1605  m2_loss_dice_7: 1.165  m2_loss_ce_8: 0.5163  m2_loss_mask_8: 0.1615  m2_loss_dice_8: 1.168  com_loss_ce: 1.808  com_loss_mask: 0.6925  com_loss_dice: 0.9725    time: 1.7692  last_time: 1.7365  data_time: 0.0403  last_data_time: 0.0340   lr: 0.0001  max_mem: 37545M
[08/30 07:48:40] d2.utils.events INFO:  eta: 0:12:56  iter: 559  total_loss: 40.96  m1_loss_ce: 0.4667  m1_loss_mask: 0.1647  m1_loss_dice: 1.129  m1_loss_ce_0: 0.5733  m1_loss_mask_0: 0.1846  m1_loss_dice_0: 1.289  m1_loss_ce_1: 0.6149  m1_loss_mask_1: 0.1745  m1_loss_dice_1: 1.281  m1_loss_ce_2: 0.5997  m1_loss_mask_2: 0.1717  m1_loss_dice_2: 1.19  m1_loss_ce_3: 0.5435  m1_loss_mask_3: 0.1689  m1_loss_dice_3: 1.155  m1_loss_ce_4: 0.5007  m1_loss_mask_4: 0.1683  m1_loss_dice_4: 1.148  m1_loss_ce_5: 0.4804  m1_loss_mask_5: 0.1631  m1_loss_dice_5: 1.157  m1_loss_ce_6: 0.471  m1_loss_mask_6: 0.1654  m1_loss_dice_6: 1.138  m1_loss_ce_7: 0.4651  m1_loss_mask_7: 0.1654  m1_loss_dice_7: 1.104  m1_loss_ce_8: 0.4718  m1_loss_mask_8: 0.1652  m1_loss_dice_8: 1.085  m2_loss_ce: 0.4798  m2_loss_mask: 0.1649  m2_loss_dice: 1.158  m2_loss_ce_0: 0.5675  m2_loss_mask_0: 0.1848  m2_loss_dice_0: 1.356  m2_loss_ce_1: 0.656  m2_loss_mask_1: 0.1709  m2_loss_dice_1: 1.273  m2_loss_ce_2: 0.5706  m2_loss_mask_2: 0.1678  m2_loss_dice_2: 1.238  m2_loss_ce_3: 0.5678  m2_loss_mask_3: 0.1692  m2_loss_dice_3: 1.172  m2_loss_ce_4: 0.509  m2_loss_mask_4: 0.1641  m2_loss_dice_4: 1.175  m2_loss_ce_5: 0.5071  m2_loss_mask_5: 0.1647  m2_loss_dice_5: 1.141  m2_loss_ce_6: 0.4851  m2_loss_mask_6: 0.1661  m2_loss_dice_6: 1.169  m2_loss_ce_7: 0.5036  m2_loss_mask_7: 0.1661  m2_loss_dice_7: 1.141  m2_loss_ce_8: 0.4546  m2_loss_mask_8: 0.1646  m2_loss_dice_8: 1.144  com_loss_ce: 1.791  com_loss_mask: 0.6926  com_loss_dice: 0.9716    time: 1.7690  last_time: 1.7251  data_time: 0.0378  last_data_time: 0.0385   lr: 0.0001  max_mem: 37545M
[08/30 07:49:16] d2.utils.events INFO:  eta: 0:12:21  iter: 579  total_loss: 43.96  m1_loss_ce: 0.5285  m1_loss_mask: 0.1549  m1_loss_dice: 1.212  m1_loss_ce_0: 0.6064  m1_loss_mask_0: 0.1725  m1_loss_dice_0: 1.396  m1_loss_ce_1: 0.6889  m1_loss_mask_1: 0.1638  m1_loss_dice_1: 1.324  m1_loss_ce_2: 0.6088  m1_loss_mask_2: 0.1557  m1_loss_dice_2: 1.281  m1_loss_ce_3: 0.576  m1_loss_mask_3: 0.1532  m1_loss_dice_3: 1.249  m1_loss_ce_4: 0.5362  m1_loss_mask_4: 0.154  m1_loss_dice_4: 1.241  m1_loss_ce_5: 0.5455  m1_loss_mask_5: 0.154  m1_loss_dice_5: 1.235  m1_loss_ce_6: 0.5203  m1_loss_mask_6: 0.1563  m1_loss_dice_6: 1.201  m1_loss_ce_7: 0.5263  m1_loss_mask_7: 0.155  m1_loss_dice_7: 1.231  m1_loss_ce_8: 0.5347  m1_loss_mask_8: 0.1553  m1_loss_dice_8: 1.19  m2_loss_ce: 0.5431  m2_loss_mask: 0.1565  m2_loss_dice: 1.217  m2_loss_ce_0: 0.6279  m2_loss_mask_0: 0.1804  m2_loss_dice_0: 1.45  m2_loss_ce_1: 0.7283  m2_loss_mask_1: 0.1697  m2_loss_dice_1: 1.395  m2_loss_ce_2: 0.6815  m2_loss_mask_2: 0.1632  m2_loss_dice_2: 1.321  m2_loss_ce_3: 0.6052  m2_loss_mask_3: 0.16  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.5674  m2_loss_mask_4: 0.16  m2_loss_dice_4: 1.234  m2_loss_ce_5: 0.5656  m2_loss_mask_5: 0.1581  m2_loss_dice_5: 1.263  m2_loss_ce_6: 0.5484  m2_loss_mask_6: 0.1606  m2_loss_dice_6: 1.222  m2_loss_ce_7: 0.5725  m2_loss_mask_7: 0.1575  m2_loss_dice_7: 1.22  m2_loss_ce_8: 0.5593  m2_loss_mask_8: 0.1569  m2_loss_dice_8: 1.232  com_loss_ce: 1.837  com_loss_mask: 0.6925  com_loss_dice: 0.9732    time: 1.7696  last_time: 1.8130  data_time: 0.0412  last_data_time: 0.0411   lr: 0.0001  max_mem: 37545M
[08/30 07:49:52] d2.utils.events INFO:  eta: 0:11:46  iter: 599  total_loss: 44.04  m1_loss_ce: 0.5046  m1_loss_mask: 0.1481  m1_loss_dice: 1.218  m1_loss_ce_0: 0.6085  m1_loss_mask_0: 0.1729  m1_loss_dice_0: 1.416  m1_loss_ce_1: 0.6543  m1_loss_mask_1: 0.1603  m1_loss_dice_1: 1.348  m1_loss_ce_2: 0.6044  m1_loss_mask_2: 0.1539  m1_loss_dice_2: 1.303  m1_loss_ce_3: 0.5297  m1_loss_mask_3: 0.1513  m1_loss_dice_3: 1.251  m1_loss_ce_4: 0.5316  m1_loss_mask_4: 0.1497  m1_loss_dice_4: 1.225  m1_loss_ce_5: 0.4993  m1_loss_mask_5: 0.1498  m1_loss_dice_5: 1.233  m1_loss_ce_6: 0.5062  m1_loss_mask_6: 0.1487  m1_loss_dice_6: 1.232  m1_loss_ce_7: 0.4875  m1_loss_mask_7: 0.1484  m1_loss_dice_7: 1.227  m1_loss_ce_8: 0.4852  m1_loss_mask_8: 0.1496  m1_loss_dice_8: 1.233  m2_loss_ce: 0.5383  m2_loss_mask: 0.1537  m2_loss_dice: 1.269  m2_loss_ce_0: 0.5966  m2_loss_mask_0: 0.186  m2_loss_dice_0: 1.458  m2_loss_ce_1: 0.7326  m2_loss_mask_1: 0.1666  m2_loss_dice_1: 1.399  m2_loss_ce_2: 0.6528  m2_loss_mask_2: 0.1603  m2_loss_dice_2: 1.342  m2_loss_ce_3: 0.6136  m2_loss_mask_3: 0.1591  m2_loss_dice_3: 1.297  m2_loss_ce_4: 0.5742  m2_loss_mask_4: 0.16  m2_loss_dice_4: 1.254  m2_loss_ce_5: 0.5702  m2_loss_mask_5: 0.1605  m2_loss_dice_5: 1.259  m2_loss_ce_6: 0.5381  m2_loss_mask_6: 0.1584  m2_loss_dice_6: 1.218  m2_loss_ce_7: 0.4927  m2_loss_mask_7: 0.1569  m2_loss_dice_7: 1.234  m2_loss_ce_8: 0.5304  m2_loss_mask_8: 0.155  m2_loss_dice_8: 1.227  com_loss_ce: 1.803  com_loss_mask: 0.6925  com_loss_dice: 0.9738    time: 1.7702  last_time: 1.7971  data_time: 0.0404  last_data_time: 0.0423   lr: 0.0001  max_mem: 37545M
[08/30 07:50:28] d2.utils.events INFO:  eta: 0:11:11  iter: 619  total_loss: 41.97  m1_loss_ce: 0.5171  m1_loss_mask: 0.1451  m1_loss_dice: 1.2  m1_loss_ce_0: 0.5974  m1_loss_mask_0: 0.1697  m1_loss_dice_0: 1.338  m1_loss_ce_1: 0.678  m1_loss_mask_1: 0.1594  m1_loss_dice_1: 1.262  m1_loss_ce_2: 0.6024  m1_loss_mask_2: 0.1489  m1_loss_dice_2: 1.227  m1_loss_ce_3: 0.5598  m1_loss_mask_3: 0.1491  m1_loss_dice_3: 1.187  m1_loss_ce_4: 0.5215  m1_loss_mask_4: 0.151  m1_loss_dice_4: 1.203  m1_loss_ce_5: 0.5387  m1_loss_mask_5: 0.1487  m1_loss_dice_5: 1.162  m1_loss_ce_6: 0.457  m1_loss_mask_6: 0.1465  m1_loss_dice_6: 1.19  m1_loss_ce_7: 0.4923  m1_loss_mask_7: 0.146  m1_loss_dice_7: 1.165  m1_loss_ce_8: 0.4573  m1_loss_mask_8: 0.1473  m1_loss_dice_8: 1.178  m2_loss_ce: 0.5008  m2_loss_mask: 0.1533  m2_loss_dice: 1.183  m2_loss_ce_0: 0.603  m2_loss_mask_0: 0.182  m2_loss_dice_0: 1.353  m2_loss_ce_1: 0.6762  m2_loss_mask_1: 0.165  m2_loss_dice_1: 1.281  m2_loss_ce_2: 0.6184  m2_loss_mask_2: 0.1582  m2_loss_dice_2: 1.28  m2_loss_ce_3: 0.5829  m2_loss_mask_3: 0.1549  m2_loss_dice_3: 1.205  m2_loss_ce_4: 0.5119  m2_loss_mask_4: 0.156  m2_loss_dice_4: 1.209  m2_loss_ce_5: 0.5069  m2_loss_mask_5: 0.1557  m2_loss_dice_5: 1.194  m2_loss_ce_6: 0.4808  m2_loss_mask_6: 0.1579  m2_loss_dice_6: 1.19  m2_loss_ce_7: 0.4959  m2_loss_mask_7: 0.1553  m2_loss_dice_7: 1.201  m2_loss_ce_8: 0.4802  m2_loss_mask_8: 0.1526  m2_loss_dice_8: 1.19  com_loss_ce: 1.787  com_loss_mask: 0.6926  com_loss_dice: 0.9724    time: 1.7704  last_time: 1.7911  data_time: 0.0417  last_data_time: 0.0493   lr: 0.0001  max_mem: 37545M
[08/30 07:51:03] d2.utils.events INFO:  eta: 0:10:35  iter: 639  total_loss: 40.81  m1_loss_ce: 0.4812  m1_loss_mask: 0.1515  m1_loss_dice: 1.158  m1_loss_ce_0: 0.6049  m1_loss_mask_0: 0.1785  m1_loss_dice_0: 1.315  m1_loss_ce_1: 0.6486  m1_loss_mask_1: 0.1624  m1_loss_dice_1: 1.255  m1_loss_ce_2: 0.611  m1_loss_mask_2: 0.1581  m1_loss_dice_2: 1.21  m1_loss_ce_3: 0.5472  m1_loss_mask_3: 0.1561  m1_loss_dice_3: 1.145  m1_loss_ce_4: 0.4845  m1_loss_mask_4: 0.1575  m1_loss_dice_4: 1.162  m1_loss_ce_5: 0.4689  m1_loss_mask_5: 0.1538  m1_loss_dice_5: 1.174  m1_loss_ce_6: 0.4724  m1_loss_mask_6: 0.1565  m1_loss_dice_6: 1.113  m1_loss_ce_7: 0.4564  m1_loss_mask_7: 0.1535  m1_loss_dice_7: 1.163  m1_loss_ce_8: 0.4496  m1_loss_mask_8: 0.1528  m1_loss_dice_8: 1.182  m2_loss_ce: 0.4893  m2_loss_mask: 0.1551  m2_loss_dice: 1.144  m2_loss_ce_0: 0.608  m2_loss_mask_0: 0.1814  m2_loss_dice_0: 1.312  m2_loss_ce_1: 0.6875  m2_loss_mask_1: 0.167  m2_loss_dice_1: 1.26  m2_loss_ce_2: 0.5968  m2_loss_mask_2: 0.1605  m2_loss_dice_2: 1.161  m2_loss_ce_3: 0.5748  m2_loss_mask_3: 0.1599  m2_loss_dice_3: 1.17  m2_loss_ce_4: 0.5496  m2_loss_mask_4: 0.1586  m2_loss_dice_4: 1.158  m2_loss_ce_5: 0.4937  m2_loss_mask_5: 0.1569  m2_loss_dice_5: 1.173  m2_loss_ce_6: 0.5205  m2_loss_mask_6: 0.1563  m2_loss_dice_6: 1.142  m2_loss_ce_7: 0.4928  m2_loss_mask_7: 0.1552  m2_loss_dice_7: 1.146  m2_loss_ce_8: 0.5198  m2_loss_mask_8: 0.1556  m2_loss_dice_8: 1.145  com_loss_ce: 1.805  com_loss_mask: 0.6926  com_loss_dice: 0.9712    time: 1.7703  last_time: 1.7822  data_time: 0.0391  last_data_time: 0.0493   lr: 0.0001  max_mem: 37545M
[08/30 07:51:39] d2.utils.events INFO:  eta: 0:10:00  iter: 659  total_loss: 42.32  m1_loss_ce: 0.5046  m1_loss_mask: 0.1397  m1_loss_dice: 1.218  m1_loss_ce_0: 0.6208  m1_loss_mask_0: 0.1699  m1_loss_dice_0: 1.371  m1_loss_ce_1: 0.7053  m1_loss_mask_1: 0.1598  m1_loss_dice_1: 1.28  m1_loss_ce_2: 0.5653  m1_loss_mask_2: 0.1511  m1_loss_dice_2: 1.241  m1_loss_ce_3: 0.5321  m1_loss_mask_3: 0.1475  m1_loss_dice_3: 1.195  m1_loss_ce_4: 0.4934  m1_loss_mask_4: 0.1493  m1_loss_dice_4: 1.181  m1_loss_ce_5: 0.4912  m1_loss_mask_5: 0.1396  m1_loss_dice_5: 1.173  m1_loss_ce_6: 0.4763  m1_loss_mask_6: 0.1424  m1_loss_dice_6: 1.171  m1_loss_ce_7: 0.4889  m1_loss_mask_7: 0.1428  m1_loss_dice_7: 1.183  m1_loss_ce_8: 0.4877  m1_loss_mask_8: 0.1386  m1_loss_dice_8: 1.193  m2_loss_ce: 0.4841  m2_loss_mask: 0.1485  m2_loss_dice: 1.175  m2_loss_ce_0: 0.635  m2_loss_mask_0: 0.1732  m2_loss_dice_0: 1.402  m2_loss_ce_1: 0.6714  m2_loss_mask_1: 0.1568  m2_loss_dice_1: 1.307  m2_loss_ce_2: 0.5973  m2_loss_mask_2: 0.1526  m2_loss_dice_2: 1.312  m2_loss_ce_3: 0.555  m2_loss_mask_3: 0.1465  m2_loss_dice_3: 1.241  m2_loss_ce_4: 0.5182  m2_loss_mask_4: 0.1473  m2_loss_dice_4: 1.23  m2_loss_ce_5: 0.5044  m2_loss_mask_5: 0.1454  m2_loss_dice_5: 1.22  m2_loss_ce_6: 0.5102  m2_loss_mask_6: 0.1484  m2_loss_dice_6: 1.212  m2_loss_ce_7: 0.5022  m2_loss_mask_7: 0.1481  m2_loss_dice_7: 1.201  m2_loss_ce_8: 0.4926  m2_loss_mask_8: 0.1466  m2_loss_dice_8: 1.189  com_loss_ce: 1.806  com_loss_mask: 0.6925  com_loss_dice: 0.9731    time: 1.7708  last_time: 1.7829  data_time: 0.0401  last_data_time: 0.0331   lr: 0.0001  max_mem: 37545M
[08/30 07:52:14] d2.utils.events INFO:  eta: 0:09:25  iter: 679  total_loss: 42.41  m1_loss_ce: 0.4707  m1_loss_mask: 0.1496  m1_loss_dice: 1.085  m1_loss_ce_0: 0.599  m1_loss_mask_0: 0.1789  m1_loss_dice_0: 1.321  m1_loss_ce_1: 0.6499  m1_loss_mask_1: 0.163  m1_loss_dice_1: 1.24  m1_loss_ce_2: 0.5618  m1_loss_mask_2: 0.1574  m1_loss_dice_2: 1.249  m1_loss_ce_3: 0.5155  m1_loss_mask_3: 0.1484  m1_loss_dice_3: 1.202  m1_loss_ce_4: 0.4734  m1_loss_mask_4: 0.1503  m1_loss_dice_4: 1.121  m1_loss_ce_5: 0.4879  m1_loss_mask_5: 0.15  m1_loss_dice_5: 1.146  m1_loss_ce_6: 0.4698  m1_loss_mask_6: 0.1504  m1_loss_dice_6: 1.108  m1_loss_ce_7: 0.4564  m1_loss_mask_7: 0.15  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.4505  m1_loss_mask_8: 0.1498  m1_loss_dice_8: 1.21  m2_loss_ce: 0.5235  m2_loss_mask: 0.1521  m2_loss_dice: 1.187  m2_loss_ce_0: 0.5899  m2_loss_mask_0: 0.1757  m2_loss_dice_0: 1.351  m2_loss_ce_1: 0.6647  m2_loss_mask_1: 0.1636  m2_loss_dice_1: 1.266  m2_loss_ce_2: 0.6045  m2_loss_mask_2: 0.1588  m2_loss_dice_2: 1.225  m2_loss_ce_3: 0.5641  m2_loss_mask_3: 0.1574  m2_loss_dice_3: 1.193  m2_loss_ce_4: 0.5277  m2_loss_mask_4: 0.1564  m2_loss_dice_4: 1.172  m2_loss_ce_5: 0.5002  m2_loss_mask_5: 0.1528  m2_loss_dice_5: 1.205  m2_loss_ce_6: 0.4692  m2_loss_mask_6: 0.1529  m2_loss_dice_6: 1.186  m2_loss_ce_7: 0.4976  m2_loss_mask_7: 0.1516  m2_loss_dice_7: 1.17  m2_loss_ce_8: 0.5026  m2_loss_mask_8: 0.1531  m2_loss_dice_8: 1.157  com_loss_ce: 1.796  com_loss_mask: 0.6925  com_loss_dice: 0.9708    time: 1.7707  last_time: 1.8224  data_time: 0.0382  last_data_time: 0.0478   lr: 0.0001  max_mem: 37545M
[08/30 07:52:50] d2.utils.events INFO:  eta: 0:08:49  iter: 699  total_loss: 39.51  m1_loss_ce: 0.5078  m1_loss_mask: 0.1521  m1_loss_dice: 1.094  m1_loss_ce_0: 0.5572  m1_loss_mask_0: 0.1716  m1_loss_dice_0: 1.249  m1_loss_ce_1: 0.6551  m1_loss_mask_1: 0.1605  m1_loss_dice_1: 1.209  m1_loss_ce_2: 0.5837  m1_loss_mask_2: 0.1549  m1_loss_dice_2: 1.121  m1_loss_ce_3: 0.5493  m1_loss_mask_3: 0.1556  m1_loss_dice_3: 1.095  m1_loss_ce_4: 0.5272  m1_loss_mask_4: 0.1554  m1_loss_dice_4: 1.096  m1_loss_ce_5: 0.4736  m1_loss_mask_5: 0.1555  m1_loss_dice_5: 1.087  m1_loss_ce_6: 0.4692  m1_loss_mask_6: 0.1545  m1_loss_dice_6: 1.08  m1_loss_ce_7: 0.4717  m1_loss_mask_7: 0.1531  m1_loss_dice_7: 1.084  m1_loss_ce_8: 0.467  m1_loss_mask_8: 0.1526  m1_loss_dice_8: 1.056  m2_loss_ce: 0.4746  m2_loss_mask: 0.1566  m2_loss_dice: 1.105  m2_loss_ce_0: 0.596  m2_loss_mask_0: 0.1767  m2_loss_dice_0: 1.304  m2_loss_ce_1: 0.6969  m2_loss_mask_1: 0.1604  m2_loss_dice_1: 1.224  m2_loss_ce_2: 0.5932  m2_loss_mask_2: 0.1562  m2_loss_dice_2: 1.162  m2_loss_ce_3: 0.5587  m2_loss_mask_3: 0.1557  m2_loss_dice_3: 1.119  m2_loss_ce_4: 0.5212  m2_loss_mask_4: 0.1575  m2_loss_dice_4: 1.095  m2_loss_ce_5: 0.4745  m2_loss_mask_5: 0.1568  m2_loss_dice_5: 1.097  m2_loss_ce_6: 0.4952  m2_loss_mask_6: 0.1554  m2_loss_dice_6: 1.104  m2_loss_ce_7: 0.4903  m2_loss_mask_7: 0.1573  m2_loss_dice_7: 1.107  m2_loss_ce_8: 0.4946  m2_loss_mask_8: 0.159  m2_loss_dice_8: 1.088  com_loss_ce: 1.786  com_loss_mask: 0.6926  com_loss_dice: 0.9713    time: 1.7706  last_time: 1.7638  data_time: 0.0382  last_data_time: 0.0364   lr: 0.0001  max_mem: 37545M
[08/30 07:53:25] d2.utils.events INFO:  eta: 0:08:14  iter: 719  total_loss: 38.4  m1_loss_ce: 0.4735  m1_loss_mask: 0.1431  m1_loss_dice: 1.063  m1_loss_ce_0: 0.527  m1_loss_mask_0: 0.1758  m1_loss_dice_0: 1.257  m1_loss_ce_1: 0.5799  m1_loss_mask_1: 0.1656  m1_loss_dice_1: 1.185  m1_loss_ce_2: 0.5423  m1_loss_mask_2: 0.1543  m1_loss_dice_2: 1.145  m1_loss_ce_3: 0.472  m1_loss_mask_3: 0.1482  m1_loss_dice_3: 1.075  m1_loss_ce_4: 0.43  m1_loss_mask_4: 0.1456  m1_loss_dice_4: 1.092  m1_loss_ce_5: 0.4604  m1_loss_mask_5: 0.1462  m1_loss_dice_5: 1.099  m1_loss_ce_6: 0.4481  m1_loss_mask_6: 0.1449  m1_loss_dice_6: 1.068  m1_loss_ce_7: 0.442  m1_loss_mask_7: 0.1436  m1_loss_dice_7: 1.067  m1_loss_ce_8: 0.428  m1_loss_mask_8: 0.1443  m1_loss_dice_8: 1.031  m2_loss_ce: 0.4487  m2_loss_mask: 0.151  m2_loss_dice: 1.052  m2_loss_ce_0: 0.5462  m2_loss_mask_0: 0.1806  m2_loss_dice_0: 1.286  m2_loss_ce_1: 0.6218  m2_loss_mask_1: 0.163  m2_loss_dice_1: 1.213  m2_loss_ce_2: 0.5798  m2_loss_mask_2: 0.1563  m2_loss_dice_2: 1.16  m2_loss_ce_3: 0.5389  m2_loss_mask_3: 0.1519  m2_loss_dice_3: 1.099  m2_loss_ce_4: 0.4892  m2_loss_mask_4: 0.1522  m2_loss_dice_4: 1.058  m2_loss_ce_5: 0.4455  m2_loss_mask_5: 0.1511  m2_loss_dice_5: 1.081  m2_loss_ce_6: 0.4754  m2_loss_mask_6: 0.1536  m2_loss_dice_6: 1.049  m2_loss_ce_7: 0.4468  m2_loss_mask_7: 0.1537  m2_loss_dice_7: 1.078  m2_loss_ce_8: 0.4321  m2_loss_mask_8: 0.1488  m2_loss_dice_8: 1.059  com_loss_ce: 1.76  com_loss_mask: 0.6926  com_loss_dice: 0.97    time: 1.7703  last_time: 1.7543  data_time: 0.0368  last_data_time: 0.0388   lr: 0.0001  max_mem: 37545M
[08/30 07:54:00] d2.utils.events INFO:  eta: 0:07:39  iter: 739  total_loss: 41.83  m1_loss_ce: 0.5084  m1_loss_mask: 0.1515  m1_loss_dice: 1.148  m1_loss_ce_0: 0.5887  m1_loss_mask_0: 0.1712  m1_loss_dice_0: 1.326  m1_loss_ce_1: 0.6491  m1_loss_mask_1: 0.1646  m1_loss_dice_1: 1.315  m1_loss_ce_2: 0.5826  m1_loss_mask_2: 0.1547  m1_loss_dice_2: 1.235  m1_loss_ce_3: 0.5746  m1_loss_mask_3: 0.1532  m1_loss_dice_3: 1.183  m1_loss_ce_4: 0.5294  m1_loss_mask_4: 0.1543  m1_loss_dice_4: 1.201  m1_loss_ce_5: 0.5084  m1_loss_mask_5: 0.1555  m1_loss_dice_5: 1.177  m1_loss_ce_6: 0.479  m1_loss_mask_6: 0.1546  m1_loss_dice_6: 1.135  m1_loss_ce_7: 0.4777  m1_loss_mask_7: 0.1538  m1_loss_dice_7: 1.134  m1_loss_ce_8: 0.4903  m1_loss_mask_8: 0.1542  m1_loss_dice_8: 1.163  m2_loss_ce: 0.5168  m2_loss_mask: 0.1526  m2_loss_dice: 1.151  m2_loss_ce_0: 0.6173  m2_loss_mask_0: 0.1731  m2_loss_dice_0: 1.338  m2_loss_ce_1: 0.6739  m2_loss_mask_1: 0.1608  m2_loss_dice_1: 1.304  m2_loss_ce_2: 0.6014  m2_loss_mask_2: 0.1585  m2_loss_dice_2: 1.231  m2_loss_ce_3: 0.5709  m2_loss_mask_3: 0.155  m2_loss_dice_3: 1.185  m2_loss_ce_4: 0.5226  m2_loss_mask_4: 0.1545  m2_loss_dice_4: 1.19  m2_loss_ce_5: 0.5066  m2_loss_mask_5: 0.152  m2_loss_dice_5: 1.195  m2_loss_ce_6: 0.5239  m2_loss_mask_6: 0.1543  m2_loss_dice_6: 1.143  m2_loss_ce_7: 0.5197  m2_loss_mask_7: 0.1534  m2_loss_dice_7: 1.14  m2_loss_ce_8: 0.5179  m2_loss_mask_8: 0.1498  m2_loss_dice_8: 1.133  com_loss_ce: 1.797  com_loss_mask: 0.6926  com_loss_dice: 0.9719    time: 1.7703  last_time: 1.7376  data_time: 0.0381  last_data_time: 0.0385   lr: 0.0001  max_mem: 37545M
[08/30 07:54:36] d2.utils.events INFO:  eta: 0:07:03  iter: 759  total_loss: 44.37  m1_loss_ce: 0.5318  m1_loss_mask: 0.1483  m1_loss_dice: 1.199  m1_loss_ce_0: 0.6119  m1_loss_mask_0: 0.173  m1_loss_dice_0: 1.391  m1_loss_ce_1: 0.6569  m1_loss_mask_1: 0.1603  m1_loss_dice_1: 1.344  m1_loss_ce_2: 0.6433  m1_loss_mask_2: 0.152  m1_loss_dice_2: 1.313  m1_loss_ce_3: 0.609  m1_loss_mask_3: 0.1521  m1_loss_dice_3: 1.281  m1_loss_ce_4: 0.5249  m1_loss_mask_4: 0.151  m1_loss_dice_4: 1.23  m1_loss_ce_5: 0.5438  m1_loss_mask_5: 0.1524  m1_loss_dice_5: 1.214  m1_loss_ce_6: 0.55  m1_loss_mask_6: 0.1494  m1_loss_dice_6: 1.202  m1_loss_ce_7: 0.5176  m1_loss_mask_7: 0.1509  m1_loss_dice_7: 1.224  m1_loss_ce_8: 0.5092  m1_loss_mask_8: 0.1505  m1_loss_dice_8: 1.186  m2_loss_ce: 0.5799  m2_loss_mask: 0.1553  m2_loss_dice: 1.209  m2_loss_ce_0: 0.6648  m2_loss_mask_0: 0.1745  m2_loss_dice_0: 1.412  m2_loss_ce_1: 0.75  m2_loss_mask_1: 0.1609  m2_loss_dice_1: 1.405  m2_loss_ce_2: 0.6986  m2_loss_mask_2: 0.1573  m2_loss_dice_2: 1.29  m2_loss_ce_3: 0.6262  m2_loss_mask_3: 0.1559  m2_loss_dice_3: 1.248  m2_loss_ce_4: 0.5545  m2_loss_mask_4: 0.1557  m2_loss_dice_4: 1.207  m2_loss_ce_5: 0.5881  m2_loss_mask_5: 0.1558  m2_loss_dice_5: 1.248  m2_loss_ce_6: 0.5607  m2_loss_mask_6: 0.1567  m2_loss_dice_6: 1.223  m2_loss_ce_7: 0.557  m2_loss_mask_7: 0.1558  m2_loss_dice_7: 1.224  m2_loss_ce_8: 0.5557  m2_loss_mask_8: 0.1544  m2_loss_dice_8: 1.221  com_loss_ce: 1.82  com_loss_mask: 0.6926  com_loss_dice: 0.9735    time: 1.7707  last_time: 1.8489  data_time: 0.0402  last_data_time: 0.0398   lr: 0.0001  max_mem: 37545M
[08/30 07:55:12] d2.utils.events INFO:  eta: 0:06:28  iter: 779  total_loss: 41.13  m1_loss_ce: 0.4688  m1_loss_mask: 0.1473  m1_loss_dice: 1.123  m1_loss_ce_0: 0.5534  m1_loss_mask_0: 0.1722  m1_loss_dice_0: 1.35  m1_loss_ce_1: 0.6519  m1_loss_mask_1: 0.1621  m1_loss_dice_1: 1.258  m1_loss_ce_2: 0.5836  m1_loss_mask_2: 0.1557  m1_loss_dice_2: 1.185  m1_loss_ce_3: 0.5172  m1_loss_mask_3: 0.1549  m1_loss_dice_3: 1.166  m1_loss_ce_4: 0.457  m1_loss_mask_4: 0.1522  m1_loss_dice_4: 1.158  m1_loss_ce_5: 0.4617  m1_loss_mask_5: 0.1508  m1_loss_dice_5: 1.15  m1_loss_ce_6: 0.4487  m1_loss_mask_6: 0.1504  m1_loss_dice_6: 1.156  m1_loss_ce_7: 0.4332  m1_loss_mask_7: 0.1484  m1_loss_dice_7: 1.169  m1_loss_ce_8: 0.441  m1_loss_mask_8: 0.1465  m1_loss_dice_8: 1.129  m2_loss_ce: 0.4775  m2_loss_mask: 0.1519  m2_loss_dice: 1.163  m2_loss_ce_0: 0.6091  m2_loss_mask_0: 0.1825  m2_loss_dice_0: 1.374  m2_loss_ce_1: 0.649  m2_loss_mask_1: 0.1723  m2_loss_dice_1: 1.294  m2_loss_ce_2: 0.5808  m2_loss_mask_2: 0.1657  m2_loss_dice_2: 1.246  m2_loss_ce_3: 0.5209  m2_loss_mask_3: 0.1574  m2_loss_dice_3: 1.213  m2_loss_ce_4: 0.5174  m2_loss_mask_4: 0.1558  m2_loss_dice_4: 1.199  m2_loss_ce_5: 0.5187  m2_loss_mask_5: 0.1546  m2_loss_dice_5: 1.186  m2_loss_ce_6: 0.4986  m2_loss_mask_6: 0.1547  m2_loss_dice_6: 1.187  m2_loss_ce_7: 0.4781  m2_loss_mask_7: 0.1527  m2_loss_dice_7: 1.174  m2_loss_ce_8: 0.4864  m2_loss_mask_8: 0.1532  m2_loss_dice_8: 1.17  com_loss_ce: 1.78  com_loss_mask: 0.6926  com_loss_dice: 0.9722    time: 1.7711  last_time: 1.8125  data_time: 0.0384  last_data_time: 0.0295   lr: 0.0001  max_mem: 37545M
[08/30 07:55:48] d2.utils.events INFO:  eta: 0:05:53  iter: 799  total_loss: 39.08  m1_loss_ce: 0.4536  m1_loss_mask: 0.1559  m1_loss_dice: 1.035  m1_loss_ce_0: 0.5428  m1_loss_mask_0: 0.1687  m1_loss_dice_0: 1.228  m1_loss_ce_1: 0.6219  m1_loss_mask_1: 0.1678  m1_loss_dice_1: 1.137  m1_loss_ce_2: 0.5659  m1_loss_mask_2: 0.1624  m1_loss_dice_2: 1.133  m1_loss_ce_3: 0.5026  m1_loss_mask_3: 0.1601  m1_loss_dice_3: 1.073  m1_loss_ce_4: 0.47  m1_loss_mask_4: 0.1602  m1_loss_dice_4: 1.063  m1_loss_ce_5: 0.4437  m1_loss_mask_5: 0.1577  m1_loss_dice_5: 1.071  m1_loss_ce_6: 0.4703  m1_loss_mask_6: 0.1551  m1_loss_dice_6: 1.048  m1_loss_ce_7: 0.4704  m1_loss_mask_7: 0.1564  m1_loss_dice_7: 1.029  m1_loss_ce_8: 0.4418  m1_loss_mask_8: 0.1555  m1_loss_dice_8: 1.066  m2_loss_ce: 0.4786  m2_loss_mask: 0.1615  m2_loss_dice: 1.08  m2_loss_ce_0: 0.5836  m2_loss_mask_0: 0.1869  m2_loss_dice_0: 1.25  m2_loss_ce_1: 0.6711  m2_loss_mask_1: 0.1734  m2_loss_dice_1: 1.189  m2_loss_ce_2: 0.5718  m2_loss_mask_2: 0.1664  m2_loss_dice_2: 1.131  m2_loss_ce_3: 0.5409  m2_loss_mask_3: 0.1635  m2_loss_dice_3: 1.08  m2_loss_ce_4: 0.4994  m2_loss_mask_4: 0.1662  m2_loss_dice_4: 1.085  m2_loss_ce_5: 0.4936  m2_loss_mask_5: 0.1629  m2_loss_dice_5: 1.094  m2_loss_ce_6: 0.4697  m2_loss_mask_6: 0.1628  m2_loss_dice_6: 1.061  m2_loss_ce_7: 0.4931  m2_loss_mask_7: 0.1617  m2_loss_dice_7: 1.078  m2_loss_ce_8: 0.5085  m2_loss_mask_8: 0.1599  m2_loss_dice_8: 1.051  com_loss_ce: 1.778  com_loss_mask: 0.6926  com_loss_dice: 0.9713    time: 1.7711  last_time: 1.7545  data_time: 0.0383  last_data_time: 0.0354   lr: 0.0001  max_mem: 37545M
[08/30 07:56:23] d2.utils.events INFO:  eta: 0:05:18  iter: 819  total_loss: 40.81  m1_loss_ce: 0.4878  m1_loss_mask: 0.1473  m1_loss_dice: 1.112  m1_loss_ce_0: 0.5727  m1_loss_mask_0: 0.1707  m1_loss_dice_0: 1.316  m1_loss_ce_1: 0.6402  m1_loss_mask_1: 0.1536  m1_loss_dice_1: 1.227  m1_loss_ce_2: 0.5904  m1_loss_mask_2: 0.149  m1_loss_dice_2: 1.22  m1_loss_ce_3: 0.5425  m1_loss_mask_3: 0.1494  m1_loss_dice_3: 1.166  m1_loss_ce_4: 0.502  m1_loss_mask_4: 0.1483  m1_loss_dice_4: 1.139  m1_loss_ce_5: 0.4697  m1_loss_mask_5: 0.1473  m1_loss_dice_5: 1.143  m1_loss_ce_6: 0.434  m1_loss_mask_6: 0.1442  m1_loss_dice_6: 1.134  m1_loss_ce_7: 0.4488  m1_loss_mask_7: 0.1469  m1_loss_dice_7: 1.108  m1_loss_ce_8: 0.4452  m1_loss_mask_8: 0.1521  m1_loss_dice_8: 1.104  m2_loss_ce: 0.4831  m2_loss_mask: 0.1521  m2_loss_dice: 1.138  m2_loss_ce_0: 0.5761  m2_loss_mask_0: 0.1785  m2_loss_dice_0: 1.392  m2_loss_ce_1: 0.7167  m2_loss_mask_1: 0.1567  m2_loss_dice_1: 1.271  m2_loss_ce_2: 0.615  m2_loss_mask_2: 0.1547  m2_loss_dice_2: 1.195  m2_loss_ce_3: 0.5152  m2_loss_mask_3: 0.1519  m2_loss_dice_3: 1.161  m2_loss_ce_4: 0.5125  m2_loss_mask_4: 0.1516  m2_loss_dice_4: 1.196  m2_loss_ce_5: 0.5202  m2_loss_mask_5: 0.148  m2_loss_dice_5: 1.166  m2_loss_ce_6: 0.4862  m2_loss_mask_6: 0.1503  m2_loss_dice_6: 1.14  m2_loss_ce_7: 0.484  m2_loss_mask_7: 0.1488  m2_loss_dice_7: 1.166  m2_loss_ce_8: 0.4886  m2_loss_mask_8: 0.1517  m2_loss_dice_8: 1.174  com_loss_ce: 1.797  com_loss_mask: 0.6926  com_loss_dice: 0.972    time: 1.7708  last_time: 1.7398  data_time: 0.0370  last_data_time: 0.0326   lr: 0.0001  max_mem: 37545M
[08/30 07:56:59] d2.utils.events INFO:  eta: 0:04:42  iter: 839  total_loss: 41.96  m1_loss_ce: 0.4717  m1_loss_mask: 0.1489  m1_loss_dice: 1.148  m1_loss_ce_0: 0.5639  m1_loss_mask_0: 0.1721  m1_loss_dice_0: 1.351  m1_loss_ce_1: 0.6351  m1_loss_mask_1: 0.1538  m1_loss_dice_1: 1.247  m1_loss_ce_2: 0.5793  m1_loss_mask_2: 0.1508  m1_loss_dice_2: 1.227  m1_loss_ce_3: 0.5546  m1_loss_mask_3: 0.1509  m1_loss_dice_3: 1.171  m1_loss_ce_4: 0.4984  m1_loss_mask_4: 0.1532  m1_loss_dice_4: 1.186  m1_loss_ce_5: 0.5002  m1_loss_mask_5: 0.1493  m1_loss_dice_5: 1.194  m1_loss_ce_6: 0.4773  m1_loss_mask_6: 0.1502  m1_loss_dice_6: 1.152  m1_loss_ce_7: 0.4915  m1_loss_mask_7: 0.1497  m1_loss_dice_7: 1.131  m1_loss_ce_8: 0.476  m1_loss_mask_8: 0.1488  m1_loss_dice_8: 1.165  m2_loss_ce: 0.517  m2_loss_mask: 0.1526  m2_loss_dice: 1.181  m2_loss_ce_0: 0.6132  m2_loss_mask_0: 0.1703  m2_loss_dice_0: 1.387  m2_loss_ce_1: 0.7206  m2_loss_mask_1: 0.1644  m2_loss_dice_1: 1.305  m2_loss_ce_2: 0.6213  m2_loss_mask_2: 0.1591  m2_loss_dice_2: 1.24  m2_loss_ce_3: 0.5777  m2_loss_mask_3: 0.1581  m2_loss_dice_3: 1.205  m2_loss_ce_4: 0.5364  m2_loss_mask_4: 0.1561  m2_loss_dice_4: 1.243  m2_loss_ce_5: 0.5149  m2_loss_mask_5: 0.155  m2_loss_dice_5: 1.188  m2_loss_ce_6: 0.4969  m2_loss_mask_6: 0.1572  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.5386  m2_loss_mask_7: 0.1549  m2_loss_dice_7: 1.189  m2_loss_ce_8: 0.5332  m2_loss_mask_8: 0.1565  m2_loss_dice_8: 1.204  com_loss_ce: 1.81  com_loss_mask: 0.6925  com_loss_dice: 0.9716    time: 1.7710  last_time: 1.7935  data_time: 0.0392  last_data_time: 0.0318   lr: 0.0001  max_mem: 37665M
[08/30 07:57:35] d2.utils.events INFO:  eta: 0:04:07  iter: 859  total_loss: 42.79  m1_loss_ce: 0.4522  m1_loss_mask: 0.1454  m1_loss_dice: 1.211  m1_loss_ce_0: 0.5392  m1_loss_mask_0: 0.1669  m1_loss_dice_0: 1.373  m1_loss_ce_1: 0.6007  m1_loss_mask_1: 0.1548  m1_loss_dice_1: 1.277  m1_loss_ce_2: 0.5335  m1_loss_mask_2: 0.1577  m1_loss_dice_2: 1.257  m1_loss_ce_3: 0.5054  m1_loss_mask_3: 0.1525  m1_loss_dice_3: 1.213  m1_loss_ce_4: 0.4749  m1_loss_mask_4: 0.1531  m1_loss_dice_4: 1.21  m1_loss_ce_5: 0.4693  m1_loss_mask_5: 0.1524  m1_loss_dice_5: 1.235  m1_loss_ce_6: 0.4594  m1_loss_mask_6: 0.1528  m1_loss_dice_6: 1.2  m1_loss_ce_7: 0.4491  m1_loss_mask_7: 0.1482  m1_loss_dice_7: 1.211  m1_loss_ce_8: 0.455  m1_loss_mask_8: 0.1467  m1_loss_dice_8: 1.209  m2_loss_ce: 0.4854  m2_loss_mask: 0.1561  m2_loss_dice: 1.195  m2_loss_ce_0: 0.5835  m2_loss_mask_0: 0.1779  m2_loss_dice_0: 1.402  m2_loss_ce_1: 0.6593  m2_loss_mask_1: 0.1599  m2_loss_dice_1: 1.351  m2_loss_ce_2: 0.6076  m2_loss_mask_2: 0.1562  m2_loss_dice_2: 1.304  m2_loss_ce_3: 0.536  m2_loss_mask_3: 0.1551  m2_loss_dice_3: 1.247  m2_loss_ce_4: 0.5207  m2_loss_mask_4: 0.1531  m2_loss_dice_4: 1.255  m2_loss_ce_5: 0.5087  m2_loss_mask_5: 0.1513  m2_loss_dice_5: 1.255  m2_loss_ce_6: 0.4858  m2_loss_mask_6: 0.154  m2_loss_dice_6: 1.185  m2_loss_ce_7: 0.5258  m2_loss_mask_7: 0.1537  m2_loss_dice_7: 1.196  m2_loss_ce_8: 0.5016  m2_loss_mask_8: 0.1523  m2_loss_dice_8: 1.223  com_loss_ce: 1.807  com_loss_mask: 0.6926  com_loss_dice: 0.9741    time: 1.7715  last_time: 1.7572  data_time: 0.0386  last_data_time: 0.0426   lr: 0.0001  max_mem: 37665M
[08/30 07:58:10] d2.utils.events INFO:  eta: 0:03:32  iter: 879  total_loss: 42.2  m1_loss_ce: 0.5026  m1_loss_mask: 0.1373  m1_loss_dice: 1.148  m1_loss_ce_0: 0.6125  m1_loss_mask_0: 0.164  m1_loss_dice_0: 1.359  m1_loss_ce_1: 0.6627  m1_loss_mask_1: 0.1509  m1_loss_dice_1: 1.258  m1_loss_ce_2: 0.6264  m1_loss_mask_2: 0.1461  m1_loss_dice_2: 1.262  m1_loss_ce_3: 0.5475  m1_loss_mask_3: 0.1433  m1_loss_dice_3: 1.203  m1_loss_ce_4: 0.5052  m1_loss_mask_4: 0.1404  m1_loss_dice_4: 1.192  m1_loss_ce_5: 0.51  m1_loss_mask_5: 0.1368  m1_loss_dice_5: 1.177  m1_loss_ce_6: 0.5118  m1_loss_mask_6: 0.1356  m1_loss_dice_6: 1.16  m1_loss_ce_7: 0.5083  m1_loss_mask_7: 0.1373  m1_loss_dice_7: 1.176  m1_loss_ce_8: 0.5138  m1_loss_mask_8: 0.1383  m1_loss_dice_8: 1.179  m2_loss_ce: 0.5114  m2_loss_mask: 0.1407  m2_loss_dice: 1.15  m2_loss_ce_0: 0.6315  m2_loss_mask_0: 0.161  m2_loss_dice_0: 1.408  m2_loss_ce_1: 0.7111  m2_loss_mask_1: 0.1517  m2_loss_dice_1: 1.295  m2_loss_ce_2: 0.6423  m2_loss_mask_2: 0.1443  m2_loss_dice_2: 1.247  m2_loss_ce_3: 0.564  m2_loss_mask_3: 0.1415  m2_loss_dice_3: 1.194  m2_loss_ce_4: 0.55  m2_loss_mask_4: 0.1435  m2_loss_dice_4: 1.198  m2_loss_ce_5: 0.567  m2_loss_mask_5: 0.1405  m2_loss_dice_5: 1.202  m2_loss_ce_6: 0.5371  m2_loss_mask_6: 0.1415  m2_loss_dice_6: 1.176  m2_loss_ce_7: 0.5449  m2_loss_mask_7: 0.1406  m2_loss_dice_7: 1.175  m2_loss_ce_8: 0.5167  m2_loss_mask_8: 0.1397  m2_loss_dice_8: 1.179  com_loss_ce: 1.808  com_loss_mask: 0.6926  com_loss_dice: 0.9718    time: 1.7718  last_time: 1.7737  data_time: 0.0393  last_data_time: 0.0312   lr: 0.0001  max_mem: 38099M
[08/30 07:58:46] d2.utils.events INFO:  eta: 0:02:56  iter: 899  total_loss: 41.88  m1_loss_ce: 0.4586  m1_loss_mask: 0.1577  m1_loss_dice: 1.102  m1_loss_ce_0: 0.5609  m1_loss_mask_0: 0.1764  m1_loss_dice_0: 1.264  m1_loss_ce_1: 0.5783  m1_loss_mask_1: 0.1647  m1_loss_dice_1: 1.23  m1_loss_ce_2: 0.5537  m1_loss_mask_2: 0.1635  m1_loss_dice_2: 1.183  m1_loss_ce_3: 0.505  m1_loss_mask_3: 0.162  m1_loss_dice_3: 1.153  m1_loss_ce_4: 0.4572  m1_loss_mask_4: 0.162  m1_loss_dice_4: 1.145  m1_loss_ce_5: 0.4441  m1_loss_mask_5: 0.1584  m1_loss_dice_5: 1.132  m1_loss_ce_6: 0.4209  m1_loss_mask_6: 0.1595  m1_loss_dice_6: 1.126  m1_loss_ce_7: 0.4534  m1_loss_mask_7: 0.159  m1_loss_dice_7: 1.119  m1_loss_ce_8: 0.4348  m1_loss_mask_8: 0.1594  m1_loss_dice_8: 1.11  m2_loss_ce: 0.4861  m2_loss_mask: 0.1708  m2_loss_dice: 1.168  m2_loss_ce_0: 0.6037  m2_loss_mask_0: 0.189  m2_loss_dice_0: 1.342  m2_loss_ce_1: 0.6446  m2_loss_mask_1: 0.1762  m2_loss_dice_1: 1.274  m2_loss_ce_2: 0.5643  m2_loss_mask_2: 0.1733  m2_loss_dice_2: 1.208  m2_loss_ce_3: 0.5611  m2_loss_mask_3: 0.1732  m2_loss_dice_3: 1.213  m2_loss_ce_4: 0.5402  m2_loss_mask_4: 0.1742  m2_loss_dice_4: 1.217  m2_loss_ce_5: 0.5124  m2_loss_mask_5: 0.1775  m2_loss_dice_5: 1.181  m2_loss_ce_6: 0.5003  m2_loss_mask_6: 0.1728  m2_loss_dice_6: 1.151  m2_loss_ce_7: 0.5414  m2_loss_mask_7: 0.1727  m2_loss_dice_7: 1.166  m2_loss_ce_8: 0.4782  m2_loss_mask_8: 0.1714  m2_loss_dice_8: 1.146  com_loss_ce: 1.777  com_loss_mask: 0.6926  com_loss_dice: 0.9726    time: 1.7722  last_time: 1.7801  data_time: 0.0382  last_data_time: 0.0332   lr: 0.0001  max_mem: 38099M
[08/30 07:59:22] d2.utils.events INFO:  eta: 0:02:21  iter: 919  total_loss: 40.96  m1_loss_ce: 0.4815  m1_loss_mask: 0.1462  m1_loss_dice: 1.122  m1_loss_ce_0: 0.5768  m1_loss_mask_0: 0.1685  m1_loss_dice_0: 1.291  m1_loss_ce_1: 0.6382  m1_loss_mask_1: 0.1601  m1_loss_dice_1: 1.23  m1_loss_ce_2: 0.5715  m1_loss_mask_2: 0.152  m1_loss_dice_2: 1.199  m1_loss_ce_3: 0.5623  m1_loss_mask_3: 0.1526  m1_loss_dice_3: 1.163  m1_loss_ce_4: 0.5219  m1_loss_mask_4: 0.1497  m1_loss_dice_4: 1.114  m1_loss_ce_5: 0.5055  m1_loss_mask_5: 0.1487  m1_loss_dice_5: 1.131  m1_loss_ce_6: 0.4977  m1_loss_mask_6: 0.1479  m1_loss_dice_6: 1.12  m1_loss_ce_7: 0.5078  m1_loss_mask_7: 0.1464  m1_loss_dice_7: 1.111  m1_loss_ce_8: 0.5048  m1_loss_mask_8: 0.1469  m1_loss_dice_8: 1.127  m2_loss_ce: 0.5424  m2_loss_mask: 0.154  m2_loss_dice: 1.134  m2_loss_ce_0: 0.6141  m2_loss_mask_0: 0.1759  m2_loss_dice_0: 1.325  m2_loss_ce_1: 0.6791  m2_loss_mask_1: 0.1724  m2_loss_dice_1: 1.303  m2_loss_ce_2: 0.5912  m2_loss_mask_2: 0.1628  m2_loss_dice_2: 1.19  m2_loss_ce_3: 0.5469  m2_loss_mask_3: 0.1589  m2_loss_dice_3: 1.185  m2_loss_ce_4: 0.5328  m2_loss_mask_4: 0.1578  m2_loss_dice_4: 1.163  m2_loss_ce_5: 0.5351  m2_loss_mask_5: 0.1533  m2_loss_dice_5: 1.141  m2_loss_ce_6: 0.4979  m2_loss_mask_6: 0.1521  m2_loss_dice_6: 1.112  m2_loss_ce_7: 0.521  m2_loss_mask_7: 0.1522  m2_loss_dice_7: 1.117  m2_loss_ce_8: 0.5121  m2_loss_mask_8: 0.152  m2_loss_dice_8: 1.129  com_loss_ce: 1.82  com_loss_mask: 0.6926  com_loss_dice: 0.971    time: 1.7724  last_time: 1.7934  data_time: 0.0371  last_data_time: 0.0380   lr: 0.0001  max_mem: 38099M
[08/30 07:59:58] d2.utils.events INFO:  eta: 0:01:46  iter: 939  total_loss: 40.17  m1_loss_ce: 0.4402  m1_loss_mask: 0.1343  m1_loss_dice: 1.099  m1_loss_ce_0: 0.5743  m1_loss_mask_0: 0.1534  m1_loss_dice_0: 1.318  m1_loss_ce_1: 0.6574  m1_loss_mask_1: 0.1414  m1_loss_dice_1: 1.234  m1_loss_ce_2: 0.5798  m1_loss_mask_2: 0.1396  m1_loss_dice_2: 1.202  m1_loss_ce_3: 0.5537  m1_loss_mask_3: 0.1371  m1_loss_dice_3: 1.12  m1_loss_ce_4: 0.5063  m1_loss_mask_4: 0.1375  m1_loss_dice_4: 1.139  m1_loss_ce_5: 0.5001  m1_loss_mask_5: 0.1394  m1_loss_dice_5: 1.122  m1_loss_ce_6: 0.4585  m1_loss_mask_6: 0.1347  m1_loss_dice_6: 1.099  m1_loss_ce_7: 0.4535  m1_loss_mask_7: 0.1352  m1_loss_dice_7: 1.113  m1_loss_ce_8: 0.4747  m1_loss_mask_8: 0.1335  m1_loss_dice_8: 1.103  m2_loss_ce: 0.4734  m2_loss_mask: 0.1403  m2_loss_dice: 1.139  m2_loss_ce_0: 0.6076  m2_loss_mask_0: 0.162  m2_loss_dice_0: 1.324  m2_loss_ce_1: 0.6693  m2_loss_mask_1: 0.1479  m2_loss_dice_1: 1.259  m2_loss_ce_2: 0.5831  m2_loss_mask_2: 0.1398  m2_loss_dice_2: 1.213  m2_loss_ce_3: 0.5403  m2_loss_mask_3: 0.1407  m2_loss_dice_3: 1.158  m2_loss_ce_4: 0.5415  m2_loss_mask_4: 0.1422  m2_loss_dice_4: 1.156  m2_loss_ce_5: 0.4913  m2_loss_mask_5: 0.1391  m2_loss_dice_5: 1.161  m2_loss_ce_6: 0.4915  m2_loss_mask_6: 0.1418  m2_loss_dice_6: 1.132  m2_loss_ce_7: 0.4908  m2_loss_mask_7: 0.14  m2_loss_dice_7: 1.118  m2_loss_ce_8: 0.4968  m2_loss_mask_8: 0.1408  m2_loss_dice_8: 1.107  com_loss_ce: 1.818  com_loss_mask: 0.6926  com_loss_dice: 0.9728    time: 1.7726  last_time: 1.8440  data_time: 0.0388  last_data_time: 0.0380   lr: 0.0001  max_mem: 38099M
[08/30 08:00:33] d2.utils.events INFO:  eta: 0:01:10  iter: 959  total_loss: 41.95  m1_loss_ce: 0.4974  m1_loss_mask: 0.1488  m1_loss_dice: 1.11  m1_loss_ce_0: 0.6173  m1_loss_mask_0: 0.17  m1_loss_dice_0: 1.332  m1_loss_ce_1: 0.6532  m1_loss_mask_1: 0.1596  m1_loss_dice_1: 1.247  m1_loss_ce_2: 0.6115  m1_loss_mask_2: 0.1532  m1_loss_dice_2: 1.194  m1_loss_ce_3: 0.5852  m1_loss_mask_3: 0.153  m1_loss_dice_3: 1.124  m1_loss_ce_4: 0.5319  m1_loss_mask_4: 0.1525  m1_loss_dice_4: 1.14  m1_loss_ce_5: 0.5053  m1_loss_mask_5: 0.1495  m1_loss_dice_5: 1.135  m1_loss_ce_6: 0.5037  m1_loss_mask_6: 0.1501  m1_loss_dice_6: 1.118  m1_loss_ce_7: 0.4811  m1_loss_mask_7: 0.1485  m1_loss_dice_7: 1.15  m1_loss_ce_8: 0.4907  m1_loss_mask_8: 0.147  m1_loss_dice_8: 1.1  m2_loss_ce: 0.4942  m2_loss_mask: 0.1511  m2_loss_dice: 1.123  m2_loss_ce_0: 0.6029  m2_loss_mask_0: 0.166  m2_loss_dice_0: 1.313  m2_loss_ce_1: 0.6758  m2_loss_mask_1: 0.1596  m2_loss_dice_1: 1.31  m2_loss_ce_2: 0.6223  m2_loss_mask_2: 0.1574  m2_loss_dice_2: 1.207  m2_loss_ce_3: 0.5386  m2_loss_mask_3: 0.1547  m2_loss_dice_3: 1.151  m2_loss_ce_4: 0.4995  m2_loss_mask_4: 0.1538  m2_loss_dice_4: 1.148  m2_loss_ce_5: 0.495  m2_loss_mask_5: 0.1545  m2_loss_dice_5: 1.154  m2_loss_ce_6: 0.4972  m2_loss_mask_6: 0.1526  m2_loss_dice_6: 1.143  m2_loss_ce_7: 0.5005  m2_loss_mask_7: 0.1505  m2_loss_dice_7: 1.152  m2_loss_ce_8: 0.5036  m2_loss_mask_8: 0.1527  m2_loss_dice_8: 1.14  com_loss_ce: 1.825  com_loss_mask: 0.6926  com_loss_dice: 0.9716    time: 1.7728  last_time: 1.7728  data_time: 0.0372  last_data_time: 0.0426   lr: 0.0001  max_mem: 38099M
[08/30 08:01:09] d2.utils.events INFO:  eta: 0:00:35  iter: 979  total_loss: 41.83  m1_loss_ce: 0.488  m1_loss_mask: 0.1444  m1_loss_dice: 1.171  m1_loss_ce_0: 0.5866  m1_loss_mask_0: 0.1673  m1_loss_dice_0: 1.305  m1_loss_ce_1: 0.6276  m1_loss_mask_1: 0.1563  m1_loss_dice_1: 1.289  m1_loss_ce_2: 0.5866  m1_loss_mask_2: 0.1478  m1_loss_dice_2: 1.188  m1_loss_ce_3: 0.5351  m1_loss_mask_3: 0.1465  m1_loss_dice_3: 1.162  m1_loss_ce_4: 0.5077  m1_loss_mask_4: 0.1492  m1_loss_dice_4: 1.148  m1_loss_ce_5: 0.4877  m1_loss_mask_5: 0.1444  m1_loss_dice_5: 1.181  m1_loss_ce_6: 0.4664  m1_loss_mask_6: 0.1454  m1_loss_dice_6: 1.173  m1_loss_ce_7: 0.46  m1_loss_mask_7: 0.1448  m1_loss_dice_7: 1.147  m1_loss_ce_8: 0.4595  m1_loss_mask_8: 0.1446  m1_loss_dice_8: 1.152  m2_loss_ce: 0.4907  m2_loss_mask: 0.1455  m2_loss_dice: 1.185  m2_loss_ce_0: 0.5986  m2_loss_mask_0: 0.1789  m2_loss_dice_0: 1.391  m2_loss_ce_1: 0.6852  m2_loss_mask_1: 0.1648  m2_loss_dice_1: 1.303  m2_loss_ce_2: 0.602  m2_loss_mask_2: 0.1539  m2_loss_dice_2: 1.229  m2_loss_ce_3: 0.5639  m2_loss_mask_3: 0.1506  m2_loss_dice_3: 1.184  m2_loss_ce_4: 0.4939  m2_loss_mask_4: 0.1517  m2_loss_dice_4: 1.167  m2_loss_ce_5: 0.5137  m2_loss_mask_5: 0.1468  m2_loss_dice_5: 1.203  m2_loss_ce_6: 0.4806  m2_loss_mask_6: 0.1484  m2_loss_dice_6: 1.17  m2_loss_ce_7: 0.5016  m2_loss_mask_7: 0.1465  m2_loss_dice_7: 1.213  m2_loss_ce_8: 0.4851  m2_loss_mask_8: 0.1451  m2_loss_dice_8: 1.184  com_loss_ce: 1.807  com_loss_mask: 0.6926  com_loss_dice: 0.9734    time: 1.7733  last_time: 1.7939  data_time: 0.0387  last_data_time: 0.0399   lr: 0.0001  max_mem: 38099M
[08/30 08:01:45] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/cl_6_9_i_n_008_1000_2_softmax_entropy/model_final.pth
[08/30 08:01:51] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 40.45  m1_loss_ce: 0.4624  m1_loss_mask: 0.1572  m1_loss_dice: 1.069  m1_loss_ce_0: 0.5495  m1_loss_mask_0: 0.1736  m1_loss_dice_0: 1.219  m1_loss_ce_1: 0.6047  m1_loss_mask_1: 0.1615  m1_loss_dice_1: 1.179  m1_loss_ce_2: 0.5334  m1_loss_mask_2: 0.1551  m1_loss_dice_2: 1.123  m1_loss_ce_3: 0.5113  m1_loss_mask_3: 0.1555  m1_loss_dice_3: 1.092  m1_loss_ce_4: 0.5047  m1_loss_mask_4: 0.1547  m1_loss_dice_4: 1.074  m1_loss_ce_5: 0.4641  m1_loss_mask_5: 0.1561  m1_loss_dice_5: 1.076  m1_loss_ce_6: 0.4759  m1_loss_mask_6: 0.1564  m1_loss_dice_6: 1.081  m1_loss_ce_7: 0.4643  m1_loss_mask_7: 0.1559  m1_loss_dice_7: 1.078  m1_loss_ce_8: 0.4566  m1_loss_mask_8: 0.1545  m1_loss_dice_8: 1.061  m2_loss_ce: 0.4757  m2_loss_mask: 0.1565  m2_loss_dice: 1.081  m2_loss_ce_0: 0.553  m2_loss_mask_0: 0.1799  m2_loss_dice_0: 1.313  m2_loss_ce_1: 0.6467  m2_loss_mask_1: 0.1608  m2_loss_dice_1: 1.236  m2_loss_ce_2: 0.5678  m2_loss_mask_2: 0.162  m2_loss_dice_2: 1.15  m2_loss_ce_3: 0.5365  m2_loss_mask_3: 0.1611  m2_loss_dice_3: 1.135  m2_loss_ce_4: 0.4852  m2_loss_mask_4: 0.1597  m2_loss_dice_4: 1.12  m2_loss_ce_5: 0.4795  m2_loss_mask_5: 0.1577  m2_loss_dice_5: 1.118  m2_loss_ce_6: 0.4904  m2_loss_mask_6: 0.1597  m2_loss_dice_6: 1.102  m2_loss_ce_7: 0.4658  m2_loss_mask_7: 0.1581  m2_loss_dice_7: 1.1  m2_loss_ce_8: 0.475  m2_loss_mask_8: 0.1563  m2_loss_dice_8: 1.095  com_loss_ce: 1.778  com_loss_mask: 0.6926  com_loss_dice: 0.9706    time: 1.7733  last_time: 1.7742  data_time: 0.0363  last_data_time: 0.0327   lr: 0.0001  max_mem: 38099M
[08/30 08:01:51] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:29:29 (1.7733 s / it)
[08/30 08:01:51] d2.engine.hooks INFO: Total training time: 0:29:41 (0:00:11 on hooks)
[08/30 08:01:51] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/30 08:01:51] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/30 08:01:51] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/30 08:01:51] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/30 08:01:51] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/30 08:03:38] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evalt2lyn72y ...
[08/30 08:03:55] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 62.536 | 81.637 | 75.697 |      19       |
| Things | 55.196 | 80.944 | 67.879 |       8       |
| Stuff  | 67.873 | 82.141 | 81.382 |      11       |
[08/30 08:03:55] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.397 | 97.904 | 99.482 |     Stuff     |
| class_8  | 75.748 | 84.643 | 89.491 |     Stuff     |
| class_11 | 88.379 | 90.224 | 97.955 |     Stuff     |
| class_12 | 47.879 | 80.283 | 59.639 |     Stuff     |
| class_13 | 43.658 | 75.212 | 58.046 |     Stuff     |
| class_17 | 54.420 | 65.640 | 82.907 |     Stuff     |
| class_19 | 53.856 | 71.074 | 75.774 |     Stuff     |
| class_20 | 69.256 | 78.815 | 87.872 |     Stuff     |
| class_21 | 89.958 | 90.891 | 98.973 |     Stuff     |
| class_22 | 37.395 | 76.954 | 48.594 |     Stuff     |
| class_23 | 88.664 | 91.912 | 96.465 |     Stuff     |
| class_24 | 53.172 | 77.438 | 68.664 |    Things     |
| class_25 | 47.935 | 74.067 | 64.718 |    Things     |
| class_26 | 66.506 | 83.078 | 80.052 |    Things     |
| class_27 | 54.797 | 88.284 | 62.069 |    Things     |
| class_28 | 69.814 | 90.400 | 77.228 |    Things     |
| class_31 | 60.532 | 86.141 | 70.270 |    Things     |
| class_32 | 43.165 | 75.666 | 57.047 |    Things     |
| class_33 | 45.650 | 72.474 | 62.988 |    Things     |
[08/30 08:03:55] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/30 08:03:55] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/30 08:03:55] d2.evaluation.testing INFO: copypaste: 62.5357,81.6368,75.6965,55.1963,80.9436,67.8795,67.8735,82.1410,81.3817,97.3969,97.9042,99.4819,75.7475,84.6428,89.4908,88.3786,90.2237,97.9550,47.8794,80.2826,59.6386,43.6575,75.2120,58.0460,54.4199,65.6398,82.9069,53.8557,71.0739,75.7741,69.2562,78.8146,87.8723,89.9579,90.8911,98.9733,37.3952,76.9537,48.5944,88.6636,91.9125,96.4652,53.1720,77.4383,68.6638,47.9346,74.0671,64.7177,66.5059,83.0779,80.0524,54.7973,88.2845,62.0690,69.8137,90.3997,77.2277,60.5316,86.1412,70.2703,43.1651,75.6660,57.0470,45.6499,72.4741,62.9879
