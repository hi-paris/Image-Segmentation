[08/20 09:40:06] detectron2 INFO: Rank of current process: 0. World size: 2
[08/20 09:40:07] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/20 09:40:07] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/20 09:40:07] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/20 09:40:07] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/20 09:40:07] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy/config.yaml
[08/20 09:40:07] d2.utils.env INFO: Using a generated random seed 9736869
[08/20 09:40:11] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/20 09:40:11] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/20 09:40:12] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/20 09:40:12] d2.data.build INFO: Using training sampler TrainingSampler
[08/20 09:40:12] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/20 09:40:12] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/20 09:40:12] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/20 09:40:12] d2.data.build INFO: Making batched data loader with batch_size=4
[08/20 09:40:12] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/20 09:40:16] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/20 09:40:16] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 09:40:16] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 09:40:31] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 09:40:31] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 09:40:38] d2.engine.hooks INFO: Total training time: 0:00:06 (0:00:00 on hooks)
[08/20 09:40:38] d2.utils.events INFO:  iter: 0       lr: N/A  max_mem: 32206M
[08/20 11:42:34] detectron2 INFO: Rank of current process: 0. World size: 2
[08/20 11:42:35] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/20 11:42:35] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/20 11:42:35] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/20 11:42:35] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/20 11:42:35] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy/config.yaml
[08/20 11:42:35] d2.utils.env INFO: Using a generated random seed 38179492
[08/20 11:42:39] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/20 11:42:40] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/20 11:42:40] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/20 11:42:40] d2.data.build INFO: Using training sampler TrainingSampler
[08/20 11:42:40] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/20 11:42:40] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/20 11:42:40] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/20 11:42:40] d2.data.build INFO: Making batched data loader with batch_size=4
[08/20 11:42:40] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/20 11:42:44] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/20 11:42:44] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 11:42:44] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 11:42:45] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 11:42:45] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 11:42:52] d2.engine.hooks INFO: Total training time: 0:00:06 (0:00:00 on hooks)
[08/20 11:42:52] d2.utils.events INFO:  iter: 0       lr: N/A  max_mem: 31762M
[08/20 11:43:57] detectron2 INFO: Rank of current process: 0. World size: 2
[08/20 11:43:58] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/20 11:43:58] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/20 11:43:58] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/20 11:43:58] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/20 11:43:58] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy/config.yaml
[08/20 11:43:58] d2.utils.env INFO: Using a generated random seed 60976874
[08/20 11:44:02] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/20 11:44:02] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/20 11:44:03] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/20 11:44:03] d2.data.build INFO: Using training sampler TrainingSampler
[08/20 11:44:03] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/20 11:44:03] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/20 11:44:03] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/20 11:44:03] d2.data.build INFO: Making batched data loader with batch_size=4
[08/20 11:44:03] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/20 11:44:07] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/20 11:44:07] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 11:44:07] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 11:44:07] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 11:44:07] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 11:44:15] d2.engine.hooks INFO: Total training time: 0:00:06 (0:00:00 on hooks)
[08/20 11:44:15] d2.utils.events INFO:  iter: 0       lr: N/A  max_mem: 32432M
[08/20 12:38:17] detectron2 INFO: Rank of current process: 0. World size: 2
[08/20 12:38:19] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/20 12:38:19] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/20 12:38:19] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_Comb_2_softmax_entropy.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One : /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/20 12:38:19] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/invocab.pth
  WEIGHTS_One: /tsi/hi-paris/GB/segmentation/models/normal.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/20 12:38:19] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy/config.yaml
[08/20 12:38:19] d2.utils.env INFO: Using a generated random seed 21943480
[08/20 12:38:23] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/20 12:38:23] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/20 12:38:24] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/20 12:38:24] d2.data.build INFO: Using training sampler TrainingSampler
[08/20 12:38:24] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/20 12:38:24] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/20 12:38:24] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/20 12:38:24] d2.data.build INFO: Making batched data loader with batch_size=4
[08/20 12:38:24] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/20 12:38:28] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/20 12:38:28] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 12:38:28] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 12:38:28] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 12:38:28] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/invocab.pth ...
[08/20 12:39:04] d2.utils.events INFO:  eta: 0:23:54  iter: 19  total_loss: 46.57  m1_loss_ce: 0.6031  m1_loss_mask: 0.1574  m1_loss_dice: 1.275  m1_loss_ce_0: 0.685  m1_loss_mask_0: 0.1921  m1_loss_dice_0: 1.49  m1_loss_ce_1: 0.7133  m1_loss_mask_1: 0.1752  m1_loss_dice_1: 1.412  m1_loss_ce_2: 0.6814  m1_loss_mask_2: 0.1683  m1_loss_dice_2: 1.353  m1_loss_ce_3: 0.6011  m1_loss_mask_3: 0.1675  m1_loss_dice_3: 1.279  m1_loss_ce_4: 0.6037  m1_loss_mask_4: 0.1635  m1_loss_dice_4: 1.288  m1_loss_ce_5: 0.5933  m1_loss_mask_5: 0.1552  m1_loss_dice_5: 1.294  m1_loss_ce_6: 0.577  m1_loss_mask_6: 0.1591  m1_loss_dice_6: 1.31  m1_loss_ce_7: 0.5437  m1_loss_mask_7: 0.1594  m1_loss_dice_7: 1.259  m1_loss_ce_8: 0.5656  m1_loss_mask_8: 0.1568  m1_loss_dice_8: 1.294  m2_loss_ce: 0.5544  m2_loss_mask: 0.1538  m2_loss_dice: 1.243  m2_loss_ce_0: 0.6409  m2_loss_mask_0: 0.185  m2_loss_dice_0: 1.504  m2_loss_ce_1: 0.6669  m2_loss_mask_1: 0.1663  m2_loss_dice_1: 1.383  m2_loss_ce_2: 0.6357  m2_loss_mask_2: 0.1606  m2_loss_dice_2: 1.341  m2_loss_ce_3: 0.5866  m2_loss_mask_3: 0.1578  m2_loss_dice_3: 1.286  m2_loss_ce_4: 0.565  m2_loss_mask_4: 0.1572  m2_loss_dice_4: 1.288  m2_loss_ce_5: 0.5818  m2_loss_mask_5: 0.1559  m2_loss_dice_5: 1.263  m2_loss_ce_6: 0.5629  m2_loss_mask_6: 0.1543  m2_loss_dice_6: 1.272  m2_loss_ce_7: 0.5583  m2_loss_mask_7: 0.1537  m2_loss_dice_7: 1.281  m2_loss_ce_8: 0.5196  m2_loss_mask_8: 0.1542  m2_loss_dice_8: 1.278  com_loss_ce: 1.806  com_loss_mask: 0.6924  com_loss_dice: 0.9722    time: 1.4692  last_time: 1.4124  data_time: 0.2228  last_data_time: 0.0487   lr: 0.0001  max_mem: 34743M
[08/20 12:39:33] d2.utils.events INFO:  eta: 0:23:20  iter: 39  total_loss: 44.68  m1_loss_ce: 0.5793  m1_loss_mask: 0.1508  m1_loss_dice: 1.297  m1_loss_ce_0: 0.6441  m1_loss_mask_0: 0.181  m1_loss_dice_0: 1.46  m1_loss_ce_1: 0.7289  m1_loss_mask_1: 0.1614  m1_loss_dice_1: 1.363  m1_loss_ce_2: 0.664  m1_loss_mask_2: 0.1566  m1_loss_dice_2: 1.342  m1_loss_ce_3: 0.6355  m1_loss_mask_3: 0.1516  m1_loss_dice_3: 1.257  m1_loss_ce_4: 0.6022  m1_loss_mask_4: 0.1539  m1_loss_dice_4: 1.248  m1_loss_ce_5: 0.5711  m1_loss_mask_5: 0.1526  m1_loss_dice_5: 1.28  m1_loss_ce_6: 0.5477  m1_loss_mask_6: 0.1526  m1_loss_dice_6: 1.262  m1_loss_ce_7: 0.5466  m1_loss_mask_7: 0.1544  m1_loss_dice_7: 1.248  m1_loss_ce_8: 0.5733  m1_loss_mask_8: 0.1541  m1_loss_dice_8: 1.229  m2_loss_ce: 0.5434  m2_loss_mask: 0.1515  m2_loss_dice: 1.254  m2_loss_ce_0: 0.6552  m2_loss_mask_0: 0.1848  m2_loss_dice_0: 1.454  m2_loss_ce_1: 0.7004  m2_loss_mask_1: 0.1604  m2_loss_dice_1: 1.39  m2_loss_ce_2: 0.6738  m2_loss_mask_2: 0.1529  m2_loss_dice_2: 1.306  m2_loss_ce_3: 0.6163  m2_loss_mask_3: 0.1514  m2_loss_dice_3: 1.288  m2_loss_ce_4: 0.5974  m2_loss_mask_4: 0.1527  m2_loss_dice_4: 1.331  m2_loss_ce_5: 0.6015  m2_loss_mask_5: 0.1495  m2_loss_dice_5: 1.235  m2_loss_ce_6: 0.5558  m2_loss_mask_6: 0.1524  m2_loss_dice_6: 1.273  m2_loss_ce_7: 0.5826  m2_loss_mask_7: 0.1513  m2_loss_dice_7: 1.231  m2_loss_ce_8: 0.5623  m2_loss_mask_8: 0.1499  m2_loss_dice_8: 1.248  com_loss_ce: 1.803  com_loss_mask: 0.6924  com_loss_dice: 0.9718    time: 1.4577  last_time: 1.4467  data_time: 0.0522  last_data_time: 0.0435   lr: 0.0001  max_mem: 34743M
[08/20 12:40:02] d2.utils.events INFO:  eta: 0:22:37  iter: 59  total_loss: 43.82  m1_loss_ce: 0.5996  m1_loss_mask: 0.1705  m1_loss_dice: 1.181  m1_loss_ce_0: 0.6442  m1_loss_mask_0: 0.1992  m1_loss_dice_0: 1.368  m1_loss_ce_1: 0.7021  m1_loss_mask_1: 0.1763  m1_loss_dice_1: 1.294  m1_loss_ce_2: 0.6434  m1_loss_mask_2: 0.1733  m1_loss_dice_2: 1.261  m1_loss_ce_3: 0.6391  m1_loss_mask_3: 0.1737  m1_loss_dice_3: 1.192  m1_loss_ce_4: 0.6045  m1_loss_mask_4: 0.1761  m1_loss_dice_4: 1.186  m1_loss_ce_5: 0.5869  m1_loss_mask_5: 0.1747  m1_loss_dice_5: 1.226  m1_loss_ce_6: 0.5569  m1_loss_mask_6: 0.1737  m1_loss_dice_6: 1.171  m1_loss_ce_7: 0.5969  m1_loss_mask_7: 0.1719  m1_loss_dice_7: 1.155  m1_loss_ce_8: 0.5587  m1_loss_mask_8: 0.1748  m1_loss_dice_8: 1.171  m2_loss_ce: 0.5593  m2_loss_mask: 0.1722  m2_loss_dice: 1.138  m2_loss_ce_0: 0.6464  m2_loss_mask_0: 0.1999  m2_loss_dice_0: 1.399  m2_loss_ce_1: 0.7017  m2_loss_mask_1: 0.1819  m2_loss_dice_1: 1.291  m2_loss_ce_2: 0.6365  m2_loss_mask_2: 0.1735  m2_loss_dice_2: 1.194  m2_loss_ce_3: 0.6087  m2_loss_mask_3: 0.1721  m2_loss_dice_3: 1.188  m2_loss_ce_4: 0.5658  m2_loss_mask_4: 0.1737  m2_loss_dice_4: 1.157  m2_loss_ce_5: 0.5569  m2_loss_mask_5: 0.175  m2_loss_dice_5: 1.159  m2_loss_ce_6: 0.5303  m2_loss_mask_6: 0.1744  m2_loss_dice_6: 1.159  m2_loss_ce_7: 0.544  m2_loss_mask_7: 0.1734  m2_loss_dice_7: 1.138  m2_loss_ce_8: 0.5315  m2_loss_mask_8: 0.1727  m2_loss_dice_8: 1.182  com_loss_ce: 1.777  com_loss_mask: 0.6924  com_loss_dice: 0.9678    time: 1.4471  last_time: 1.4245  data_time: 0.0460  last_data_time: 0.0385   lr: 0.0001  max_mem: 34743M
[08/20 12:40:31] d2.utils.events INFO:  eta: 0:21:57  iter: 79  total_loss: 45.16  m1_loss_ce: 0.6075  m1_loss_mask: 0.1784  m1_loss_dice: 1.232  m1_loss_ce_0: 0.6717  m1_loss_mask_0: 0.1982  m1_loss_dice_0: 1.468  m1_loss_ce_1: 0.6884  m1_loss_mask_1: 0.1868  m1_loss_dice_1: 1.403  m1_loss_ce_2: 0.6657  m1_loss_mask_2: 0.1875  m1_loss_dice_2: 1.339  m1_loss_ce_3: 0.6255  m1_loss_mask_3: 0.1787  m1_loss_dice_3: 1.271  m1_loss_ce_4: 0.6066  m1_loss_mask_4: 0.184  m1_loss_dice_4: 1.28  m1_loss_ce_5: 0.6045  m1_loss_mask_5: 0.1773  m1_loss_dice_5: 1.267  m1_loss_ce_6: 0.5618  m1_loss_mask_6: 0.181  m1_loss_dice_6: 1.254  m1_loss_ce_7: 0.5917  m1_loss_mask_7: 0.1794  m1_loss_dice_7: 1.249  m1_loss_ce_8: 0.5483  m1_loss_mask_8: 0.1803  m1_loss_dice_8: 1.241  m2_loss_ce: 0.5431  m2_loss_mask: 0.1705  m2_loss_dice: 1.212  m2_loss_ce_0: 0.6257  m2_loss_mask_0: 0.2056  m2_loss_dice_0: 1.469  m2_loss_ce_1: 0.6733  m2_loss_mask_1: 0.185  m2_loss_dice_1: 1.415  m2_loss_ce_2: 0.6465  m2_loss_mask_2: 0.178  m2_loss_dice_2: 1.302  m2_loss_ce_3: 0.5875  m2_loss_mask_3: 0.1755  m2_loss_dice_3: 1.283  m2_loss_ce_4: 0.5833  m2_loss_mask_4: 0.1739  m2_loss_dice_4: 1.28  m2_loss_ce_5: 0.6057  m2_loss_mask_5: 0.171  m2_loss_dice_5: 1.258  m2_loss_ce_6: 0.5476  m2_loss_mask_6: 0.169  m2_loss_dice_6: 1.239  m2_loss_ce_7: 0.51  m2_loss_mask_7: 0.1694  m2_loss_dice_7: 1.256  m2_loss_ce_8: 0.5545  m2_loss_mask_8: 0.1678  m2_loss_dice_8: 1.225  com_loss_ce: 1.781  com_loss_mask: 0.6924  com_loss_dice: 0.9703    time: 1.4395  last_time: 1.4238  data_time: 0.0436  last_data_time: 0.0436   lr: 0.0001  max_mem: 34743M
[08/20 12:41:00] d2.utils.events INFO:  eta: 0:21:34  iter: 99  total_loss: 43.7  m1_loss_ce: 0.5384  m1_loss_mask: 0.1596  m1_loss_dice: 1.226  m1_loss_ce_0: 0.683  m1_loss_mask_0: 0.1929  m1_loss_dice_0: 1.425  m1_loss_ce_1: 0.7219  m1_loss_mask_1: 0.1756  m1_loss_dice_1: 1.383  m1_loss_ce_2: 0.6368  m1_loss_mask_2: 0.1663  m1_loss_dice_2: 1.274  m1_loss_ce_3: 0.6345  m1_loss_mask_3: 0.166  m1_loss_dice_3: 1.241  m1_loss_ce_4: 0.6251  m1_loss_mask_4: 0.1613  m1_loss_dice_4: 1.281  m1_loss_ce_5: 0.5864  m1_loss_mask_5: 0.1589  m1_loss_dice_5: 1.262  m1_loss_ce_6: 0.5707  m1_loss_mask_6: 0.1627  m1_loss_dice_6: 1.177  m1_loss_ce_7: 0.585  m1_loss_mask_7: 0.161  m1_loss_dice_7: 1.204  m1_loss_ce_8: 0.5601  m1_loss_mask_8: 0.1624  m1_loss_dice_8: 1.233  m2_loss_ce: 0.5196  m2_loss_mask: 0.1647  m2_loss_dice: 1.233  m2_loss_ce_0: 0.6261  m2_loss_mask_0: 0.1917  m2_loss_dice_0: 1.452  m2_loss_ce_1: 0.6757  m2_loss_mask_1: 0.1731  m2_loss_dice_1: 1.383  m2_loss_ce_2: 0.6601  m2_loss_mask_2: 0.1683  m2_loss_dice_2: 1.32  m2_loss_ce_3: 0.5878  m2_loss_mask_3: 0.1682  m2_loss_dice_3: 1.221  m2_loss_ce_4: 0.6072  m2_loss_mask_4: 0.166  m2_loss_dice_4: 1.247  m2_loss_ce_5: 0.5838  m2_loss_mask_5: 0.1648  m2_loss_dice_5: 1.214  m2_loss_ce_6: 0.5814  m2_loss_mask_6: 0.1641  m2_loss_dice_6: 1.228  m2_loss_ce_7: 0.522  m2_loss_mask_7: 0.1659  m2_loss_dice_7: 1.228  m2_loss_ce_8: 0.5675  m2_loss_mask_8: 0.1634  m2_loss_dice_8: 1.198  com_loss_ce: 1.786  com_loss_mask: 0.6924  com_loss_dice: 0.9717    time: 1.4408  last_time: 1.4028  data_time: 0.0437  last_data_time: 0.0452   lr: 0.0001  max_mem: 35283M
[08/20 12:41:29] d2.utils.events INFO:  eta: 0:21:09  iter: 119  total_loss: 44.46  m1_loss_ce: 0.5833  m1_loss_mask: 0.1714  m1_loss_dice: 1.171  m1_loss_ce_0: 0.6701  m1_loss_mask_0: 0.1944  m1_loss_dice_0: 1.386  m1_loss_ce_1: 0.7137  m1_loss_mask_1: 0.1855  m1_loss_dice_1: 1.34  m1_loss_ce_2: 0.6478  m1_loss_mask_2: 0.1761  m1_loss_dice_2: 1.218  m1_loss_ce_3: 0.5666  m1_loss_mask_3: 0.1712  m1_loss_dice_3: 1.196  m1_loss_ce_4: 0.5862  m1_loss_mask_4: 0.1696  m1_loss_dice_4: 1.215  m1_loss_ce_5: 0.5531  m1_loss_mask_5: 0.1703  m1_loss_dice_5: 1.197  m1_loss_ce_6: 0.5805  m1_loss_mask_6: 0.1733  m1_loss_dice_6: 1.16  m1_loss_ce_7: 0.5786  m1_loss_mask_7: 0.1702  m1_loss_dice_7: 1.167  m1_loss_ce_8: 0.574  m1_loss_mask_8: 0.1738  m1_loss_dice_8: 1.19  m2_loss_ce: 0.5413  m2_loss_mask: 0.1699  m2_loss_dice: 1.163  m2_loss_ce_0: 0.6649  m2_loss_mask_0: 0.1952  m2_loss_dice_0: 1.41  m2_loss_ce_1: 0.7362  m2_loss_mask_1: 0.1806  m2_loss_dice_1: 1.296  m2_loss_ce_2: 0.6664  m2_loss_mask_2: 0.1726  m2_loss_dice_2: 1.242  m2_loss_ce_3: 0.6114  m2_loss_mask_3: 0.1718  m2_loss_dice_3: 1.23  m2_loss_ce_4: 0.5749  m2_loss_mask_4: 0.1685  m2_loss_dice_4: 1.205  m2_loss_ce_5: 0.6019  m2_loss_mask_5: 0.1696  m2_loss_dice_5: 1.209  m2_loss_ce_6: 0.5433  m2_loss_mask_6: 0.1674  m2_loss_dice_6: 1.137  m2_loss_ce_7: 0.5385  m2_loss_mask_7: 0.1696  m2_loss_dice_7: 1.151  m2_loss_ce_8: 0.5539  m2_loss_mask_8: 0.1698  m2_loss_dice_8: 1.195  com_loss_ce: 1.77  com_loss_mask: 0.6923  com_loss_dice: 0.9689    time: 1.4420  last_time: 1.4850  data_time: 0.0389  last_data_time: 0.0346   lr: 0.0001  max_mem: 35283M
[08/20 12:41:58] d2.utils.events INFO:  eta: 0:20:42  iter: 139  total_loss: 42.7  m1_loss_ce: 0.5275  m1_loss_mask: 0.1668  m1_loss_dice: 1.198  m1_loss_ce_0: 0.6629  m1_loss_mask_0: 0.2036  m1_loss_dice_0: 1.381  m1_loss_ce_1: 0.657  m1_loss_mask_1: 0.188  m1_loss_dice_1: 1.372  m1_loss_ce_2: 0.6335  m1_loss_mask_2: 0.1755  m1_loss_dice_2: 1.267  m1_loss_ce_3: 0.5649  m1_loss_mask_3: 0.1677  m1_loss_dice_3: 1.238  m1_loss_ce_4: 0.5159  m1_loss_mask_4: 0.1681  m1_loss_dice_4: 1.231  m1_loss_ce_5: 0.5352  m1_loss_mask_5: 0.1661  m1_loss_dice_5: 1.214  m1_loss_ce_6: 0.5013  m1_loss_mask_6: 0.1661  m1_loss_dice_6: 1.233  m1_loss_ce_7: 0.5013  m1_loss_mask_7: 0.1675  m1_loss_dice_7: 1.213  m1_loss_ce_8: 0.5034  m1_loss_mask_8: 0.1674  m1_loss_dice_8: 1.233  m2_loss_ce: 0.4843  m2_loss_mask: 0.1686  m2_loss_dice: 1.214  m2_loss_ce_0: 0.6133  m2_loss_mask_0: 0.2037  m2_loss_dice_0: 1.444  m2_loss_ce_1: 0.6397  m2_loss_mask_1: 0.1816  m2_loss_dice_1: 1.331  m2_loss_ce_2: 0.5997  m2_loss_mask_2: 0.1733  m2_loss_dice_2: 1.268  m2_loss_ce_3: 0.5568  m2_loss_mask_3: 0.1695  m2_loss_dice_3: 1.242  m2_loss_ce_4: 0.5258  m2_loss_mask_4: 0.1709  m2_loss_dice_4: 1.195  m2_loss_ce_5: 0.5067  m2_loss_mask_5: 0.1669  m2_loss_dice_5: 1.204  m2_loss_ce_6: 0.4994  m2_loss_mask_6: 0.1698  m2_loss_dice_6: 1.217  m2_loss_ce_7: 0.4965  m2_loss_mask_7: 0.169  m2_loss_dice_7: 1.227  m2_loss_ce_8: 0.5081  m2_loss_mask_8: 0.1673  m2_loss_dice_8: 1.208  com_loss_ce: 1.767  com_loss_mask: 0.6924  com_loss_dice: 0.9698    time: 1.4443  last_time: 1.4346  data_time: 0.0419  last_data_time: 0.0379   lr: 0.0001  max_mem: 35283M
[08/20 12:42:27] d2.utils.events INFO:  eta: 0:20:13  iter: 159  total_loss: 45.91  m1_loss_ce: 0.6087  m1_loss_mask: 0.1656  m1_loss_dice: 1.292  m1_loss_ce_0: 0.7097  m1_loss_mask_0: 0.1906  m1_loss_dice_0: 1.514  m1_loss_ce_1: 0.7469  m1_loss_mask_1: 0.1762  m1_loss_dice_1: 1.418  m1_loss_ce_2: 0.699  m1_loss_mask_2: 0.1697  m1_loss_dice_2: 1.357  m1_loss_ce_3: 0.6277  m1_loss_mask_3: 0.1679  m1_loss_dice_3: 1.314  m1_loss_ce_4: 0.5996  m1_loss_mask_4: 0.1698  m1_loss_dice_4: 1.346  m1_loss_ce_5: 0.6041  m1_loss_mask_5: 0.1696  m1_loss_dice_5: 1.32  m1_loss_ce_6: 0.5902  m1_loss_mask_6: 0.1703  m1_loss_dice_6: 1.311  m1_loss_ce_7: 0.5745  m1_loss_mask_7: 0.1716  m1_loss_dice_7: 1.284  m1_loss_ce_8: 0.588  m1_loss_mask_8: 0.1712  m1_loss_dice_8: 1.307  m2_loss_ce: 0.5522  m2_loss_mask: 0.1583  m2_loss_dice: 1.315  m2_loss_ce_0: 0.7015  m2_loss_mask_0: 0.1967  m2_loss_dice_0: 1.499  m2_loss_ce_1: 0.7193  m2_loss_mask_1: 0.1789  m2_loss_dice_1: 1.453  m2_loss_ce_2: 0.6616  m2_loss_mask_2: 0.1616  m2_loss_dice_2: 1.379  m2_loss_ce_3: 0.6286  m2_loss_mask_3: 0.1622  m2_loss_dice_3: 1.315  m2_loss_ce_4: 0.5687  m2_loss_mask_4: 0.163  m2_loss_dice_4: 1.304  m2_loss_ce_5: 0.5945  m2_loss_mask_5: 0.1623  m2_loss_dice_5: 1.319  m2_loss_ce_6: 0.5624  m2_loss_mask_6: 0.1615  m2_loss_dice_6: 1.281  m2_loss_ce_7: 0.5839  m2_loss_mask_7: 0.1613  m2_loss_dice_7: 1.308  m2_loss_ce_8: 0.5753  m2_loss_mask_8: 0.1585  m2_loss_dice_8: 1.316  com_loss_ce: 1.79  com_loss_mask: 0.6924  com_loss_dice: 0.9707    time: 1.4455  last_time: 1.4858  data_time: 0.0406  last_data_time: 0.0387   lr: 0.0001  max_mem: 35283M
[08/20 12:42:57] d2.utils.events INFO:  eta: 0:19:45  iter: 179  total_loss: 43.64  m1_loss_ce: 0.5786  m1_loss_mask: 0.1749  m1_loss_dice: 1.188  m1_loss_ce_0: 0.6492  m1_loss_mask_0: 0.2014  m1_loss_dice_0: 1.433  m1_loss_ce_1: 0.732  m1_loss_mask_1: 0.1928  m1_loss_dice_1: 1.346  m1_loss_ce_2: 0.6392  m1_loss_mask_2: 0.1819  m1_loss_dice_2: 1.291  m1_loss_ce_3: 0.6187  m1_loss_mask_3: 0.1808  m1_loss_dice_3: 1.23  m1_loss_ce_4: 0.579  m1_loss_mask_4: 0.1801  m1_loss_dice_4: 1.239  m1_loss_ce_5: 0.5711  m1_loss_mask_5: 0.1779  m1_loss_dice_5: 1.243  m1_loss_ce_6: 0.5924  m1_loss_mask_6: 0.1771  m1_loss_dice_6: 1.198  m1_loss_ce_7: 0.5692  m1_loss_mask_7: 0.1755  m1_loss_dice_7: 1.219  m1_loss_ce_8: 0.5742  m1_loss_mask_8: 0.1777  m1_loss_dice_8: 1.228  m2_loss_ce: 0.527  m2_loss_mask: 0.1634  m2_loss_dice: 1.21  m2_loss_ce_0: 0.6234  m2_loss_mask_0: 0.2005  m2_loss_dice_0: 1.456  m2_loss_ce_1: 0.6772  m2_loss_mask_1: 0.1817  m2_loss_dice_1: 1.403  m2_loss_ce_2: 0.6509  m2_loss_mask_2: 0.1677  m2_loss_dice_2: 1.301  m2_loss_ce_3: 0.6143  m2_loss_mask_3: 0.1686  m2_loss_dice_3: 1.251  m2_loss_ce_4: 0.5777  m2_loss_mask_4: 0.1666  m2_loss_dice_4: 1.232  m2_loss_ce_5: 0.5997  m2_loss_mask_5: 0.1662  m2_loss_dice_5: 1.253  m2_loss_ce_6: 0.5738  m2_loss_mask_6: 0.1636  m2_loss_dice_6: 1.23  m2_loss_ce_7: 0.5786  m2_loss_mask_7: 0.1638  m2_loss_dice_7: 1.222  m2_loss_ce_8: 0.5578  m2_loss_mask_8: 0.1644  m2_loss_dice_8: 1.222  com_loss_ce: 1.784  com_loss_mask: 0.6924  com_loss_dice: 0.9701    time: 1.4480  last_time: 1.4734  data_time: 0.0406  last_data_time: 0.0430   lr: 0.0001  max_mem: 35283M
[08/20 12:43:26] d2.utils.events INFO:  eta: 0:19:16  iter: 199  total_loss: 43.49  m1_loss_ce: 0.5673  m1_loss_mask: 0.174  m1_loss_dice: 1.2  m1_loss_ce_0: 0.6383  m1_loss_mask_0: 0.2065  m1_loss_dice_0: 1.401  m1_loss_ce_1: 0.6693  m1_loss_mask_1: 0.187  m1_loss_dice_1: 1.321  m1_loss_ce_2: 0.6325  m1_loss_mask_2: 0.1808  m1_loss_dice_2: 1.291  m1_loss_ce_3: 0.5694  m1_loss_mask_3: 0.1802  m1_loss_dice_3: 1.223  m1_loss_ce_4: 0.5355  m1_loss_mask_4: 0.1772  m1_loss_dice_4: 1.264  m1_loss_ce_5: 0.5333  m1_loss_mask_5: 0.176  m1_loss_dice_5: 1.224  m1_loss_ce_6: 0.5517  m1_loss_mask_6: 0.1764  m1_loss_dice_6: 1.209  m1_loss_ce_7: 0.5287  m1_loss_mask_7: 0.1744  m1_loss_dice_7: 1.236  m1_loss_ce_8: 0.5295  m1_loss_mask_8: 0.1752  m1_loss_dice_8: 1.184  m2_loss_ce: 0.5176  m2_loss_mask: 0.1663  m2_loss_dice: 1.177  m2_loss_ce_0: 0.6363  m2_loss_mask_0: 0.2088  m2_loss_dice_0: 1.411  m2_loss_ce_1: 0.6649  m2_loss_mask_1: 0.1809  m2_loss_dice_1: 1.329  m2_loss_ce_2: 0.6138  m2_loss_mask_2: 0.1727  m2_loss_dice_2: 1.268  m2_loss_ce_3: 0.5806  m2_loss_mask_3: 0.1687  m2_loss_dice_3: 1.228  m2_loss_ce_4: 0.545  m2_loss_mask_4: 0.1719  m2_loss_dice_4: 1.267  m2_loss_ce_5: 0.5296  m2_loss_mask_5: 0.1712  m2_loss_dice_5: 1.245  m2_loss_ce_6: 0.5354  m2_loss_mask_6: 0.1705  m2_loss_dice_6: 1.242  m2_loss_ce_7: 0.531  m2_loss_mask_7: 0.1688  m2_loss_dice_7: 1.186  m2_loss_ce_8: 0.5373  m2_loss_mask_8: 0.1706  m2_loss_dice_8: 1.206  com_loss_ce: 1.769  com_loss_mask: 0.6924  com_loss_dice: 0.9703    time: 1.4476  last_time: 1.3588  data_time: 0.0401  last_data_time: 0.0403   lr: 0.0001  max_mem: 35283M
[08/20 12:43:55] d2.utils.events INFO:  eta: 0:18:47  iter: 219  total_loss: 42.96  m1_loss_ce: 0.5666  m1_loss_mask: 0.1722  m1_loss_dice: 1.233  m1_loss_ce_0: 0.6529  m1_loss_mask_0: 0.1931  m1_loss_dice_0: 1.402  m1_loss_ce_1: 0.6981  m1_loss_mask_1: 0.1792  m1_loss_dice_1: 1.266  m1_loss_ce_2: 0.6436  m1_loss_mask_2: 0.1727  m1_loss_dice_2: 1.272  m1_loss_ce_3: 0.5928  m1_loss_mask_3: 0.1728  m1_loss_dice_3: 1.199  m1_loss_ce_4: 0.5622  m1_loss_mask_4: 0.1718  m1_loss_dice_4: 1.202  m1_loss_ce_5: 0.5949  m1_loss_mask_5: 0.1705  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.5423  m1_loss_mask_6: 0.1711  m1_loss_dice_6: 1.167  m1_loss_ce_7: 0.5469  m1_loss_mask_7: 0.1717  m1_loss_dice_7: 1.201  m1_loss_ce_8: 0.5484  m1_loss_mask_8: 0.1739  m1_loss_dice_8: 1.208  m2_loss_ce: 0.5069  m2_loss_mask: 0.1646  m2_loss_dice: 1.17  m2_loss_ce_0: 0.6429  m2_loss_mask_0: 0.1923  m2_loss_dice_0: 1.386  m2_loss_ce_1: 0.6832  m2_loss_mask_1: 0.1753  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.6744  m2_loss_mask_2: 0.1706  m2_loss_dice_2: 1.224  m2_loss_ce_3: 0.5832  m2_loss_mask_3: 0.1708  m2_loss_dice_3: 1.19  m2_loss_ce_4: 0.5556  m2_loss_mask_4: 0.1702  m2_loss_dice_4: 1.222  m2_loss_ce_5: 0.5492  m2_loss_mask_5: 0.1671  m2_loss_dice_5: 1.209  m2_loss_ce_6: 0.5637  m2_loss_mask_6: 0.1666  m2_loss_dice_6: 1.188  m2_loss_ce_7: 0.5332  m2_loss_mask_7: 0.167  m2_loss_dice_7: 1.185  m2_loss_ce_8: 0.5438  m2_loss_mask_8: 0.1659  m2_loss_dice_8: 1.174  com_loss_ce: 1.773  com_loss_mask: 0.6924  com_loss_dice: 0.9686    time: 1.4472  last_time: 1.4416  data_time: 0.0399  last_data_time: 0.0473   lr: 0.0001  max_mem: 36231M
[08/20 12:44:24] d2.utils.events INFO:  eta: 0:18:18  iter: 239  total_loss: 44.71  m1_loss_ce: 0.5664  m1_loss_mask: 0.1745  m1_loss_dice: 1.287  m1_loss_ce_0: 0.6463  m1_loss_mask_0: 0.2034  m1_loss_dice_0: 1.438  m1_loss_ce_1: 0.697  m1_loss_mask_1: 0.189  m1_loss_dice_1: 1.425  m1_loss_ce_2: 0.6662  m1_loss_mask_2: 0.1774  m1_loss_dice_2: 1.351  m1_loss_ce_3: 0.5994  m1_loss_mask_3: 0.1778  m1_loss_dice_3: 1.285  m1_loss_ce_4: 0.5792  m1_loss_mask_4: 0.1791  m1_loss_dice_4: 1.283  m1_loss_ce_5: 0.586  m1_loss_mask_5: 0.1751  m1_loss_dice_5: 1.267  m1_loss_ce_6: 0.5696  m1_loss_mask_6: 0.1761  m1_loss_dice_6: 1.271  m1_loss_ce_7: 0.564  m1_loss_mask_7: 0.1739  m1_loss_dice_7: 1.255  m1_loss_ce_8: 0.5737  m1_loss_mask_8: 0.1759  m1_loss_dice_8: 1.281  m2_loss_ce: 0.5459  m2_loss_mask: 0.1682  m2_loss_dice: 1.272  m2_loss_ce_0: 0.6051  m2_loss_mask_0: 0.205  m2_loss_dice_0: 1.487  m2_loss_ce_1: 0.6509  m2_loss_mask_1: 0.179  m2_loss_dice_1: 1.385  m2_loss_ce_2: 0.6168  m2_loss_mask_2: 0.1725  m2_loss_dice_2: 1.329  m2_loss_ce_3: 0.5527  m2_loss_mask_3: 0.1698  m2_loss_dice_3: 1.278  m2_loss_ce_4: 0.547  m2_loss_mask_4: 0.172  m2_loss_dice_4: 1.295  m2_loss_ce_5: 0.5649  m2_loss_mask_5: 0.169  m2_loss_dice_5: 1.269  m2_loss_ce_6: 0.5467  m2_loss_mask_6: 0.1692  m2_loss_dice_6: 1.212  m2_loss_ce_7: 0.5569  m2_loss_mask_7: 0.1724  m2_loss_dice_7: 1.277  m2_loss_ce_8: 0.5233  m2_loss_mask_8: 0.1688  m2_loss_dice_8: 1.258  com_loss_ce: 1.776  com_loss_mask: 0.6924  com_loss_dice: 0.9717    time: 1.4482  last_time: 1.4079  data_time: 0.0414  last_data_time: 0.0474   lr: 0.0001  max_mem: 36231M
[08/20 12:44:53] d2.utils.events INFO:  eta: 0:17:49  iter: 259  total_loss: 44.98  m1_loss_ce: 0.592  m1_loss_mask: 0.1722  m1_loss_dice: 1.264  m1_loss_ce_0: 0.6338  m1_loss_mask_0: 0.1947  m1_loss_dice_0: 1.481  m1_loss_ce_1: 0.6929  m1_loss_mask_1: 0.1737  m1_loss_dice_1: 1.376  m1_loss_ce_2: 0.634  m1_loss_mask_2: 0.1719  m1_loss_dice_2: 1.324  m1_loss_ce_3: 0.6037  m1_loss_mask_3: 0.1769  m1_loss_dice_3: 1.281  m1_loss_ce_4: 0.5649  m1_loss_mask_4: 0.1768  m1_loss_dice_4: 1.259  m1_loss_ce_5: 0.5746  m1_loss_mask_5: 0.1741  m1_loss_dice_5: 1.277  m1_loss_ce_6: 0.5529  m1_loss_mask_6: 0.1723  m1_loss_dice_6: 1.238  m1_loss_ce_7: 0.5673  m1_loss_mask_7: 0.1683  m1_loss_dice_7: 1.243  m1_loss_ce_8: 0.5629  m1_loss_mask_8: 0.1706  m1_loss_dice_8: 1.218  m2_loss_ce: 0.5655  m2_loss_mask: 0.1601  m2_loss_dice: 1.228  m2_loss_ce_0: 0.6414  m2_loss_mask_0: 0.191  m2_loss_dice_0: 1.51  m2_loss_ce_1: 0.6737  m2_loss_mask_1: 0.1722  m2_loss_dice_1: 1.372  m2_loss_ce_2: 0.655  m2_loss_mask_2: 0.1686  m2_loss_dice_2: 1.33  m2_loss_ce_3: 0.5817  m2_loss_mask_3: 0.1713  m2_loss_dice_3: 1.279  m2_loss_ce_4: 0.5805  m2_loss_mask_4: 0.1678  m2_loss_dice_4: 1.257  m2_loss_ce_5: 0.544  m2_loss_mask_5: 0.1695  m2_loss_dice_5: 1.267  m2_loss_ce_6: 0.5469  m2_loss_mask_6: 0.1622  m2_loss_dice_6: 1.222  m2_loss_ce_7: 0.5578  m2_loss_mask_7: 0.1597  m2_loss_dice_7: 1.221  m2_loss_ce_8: 0.5461  m2_loss_mask_8: 0.1637  m2_loss_dice_8: 1.23  com_loss_ce: 1.793  com_loss_mask: 0.6924  com_loss_dice: 0.9695    time: 1.4472  last_time: 1.4377  data_time: 0.0404  last_data_time: 0.0399   lr: 0.0001  max_mem: 36231M
[08/20 12:45:22] d2.utils.events INFO:  eta: 0:17:20  iter: 279  total_loss: 44.51  m1_loss_ce: 0.5681  m1_loss_mask: 0.1816  m1_loss_dice: 1.233  m1_loss_ce_0: 0.6071  m1_loss_mask_0: 0.2029  m1_loss_dice_0: 1.417  m1_loss_ce_1: 0.6863  m1_loss_mask_1: 0.1901  m1_loss_dice_1: 1.335  m1_loss_ce_2: 0.6475  m1_loss_mask_2: 0.1832  m1_loss_dice_2: 1.263  m1_loss_ce_3: 0.5664  m1_loss_mask_3: 0.1851  m1_loss_dice_3: 1.234  m1_loss_ce_4: 0.558  m1_loss_mask_4: 0.1823  m1_loss_dice_4: 1.251  m1_loss_ce_5: 0.5487  m1_loss_mask_5: 0.1822  m1_loss_dice_5: 1.23  m1_loss_ce_6: 0.5249  m1_loss_mask_6: 0.1797  m1_loss_dice_6: 1.212  m1_loss_ce_7: 0.5455  m1_loss_mask_7: 0.1817  m1_loss_dice_7: 1.214  m1_loss_ce_8: 0.5379  m1_loss_mask_8: 0.1823  m1_loss_dice_8: 1.217  m2_loss_ce: 0.527  m2_loss_mask: 0.179  m2_loss_dice: 1.21  m2_loss_ce_0: 0.6185  m2_loss_mask_0: 0.2081  m2_loss_dice_0: 1.467  m2_loss_ce_1: 0.6998  m2_loss_mask_1: 0.1884  m2_loss_dice_1: 1.367  m2_loss_ce_2: 0.6311  m2_loss_mask_2: 0.1806  m2_loss_dice_2: 1.309  m2_loss_ce_3: 0.5717  m2_loss_mask_3: 0.1764  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.5714  m2_loss_mask_4: 0.1783  m2_loss_dice_4: 1.253  m2_loss_ce_5: 0.5427  m2_loss_mask_5: 0.1782  m2_loss_dice_5: 1.241  m2_loss_ce_6: 0.5346  m2_loss_mask_6: 0.1793  m2_loss_dice_6: 1.229  m2_loss_ce_7: 0.5336  m2_loss_mask_7: 0.1798  m2_loss_dice_7: 1.237  m2_loss_ce_8: 0.5176  m2_loss_mask_8: 0.1772  m2_loss_dice_8: 1.225  com_loss_ce: 1.78  com_loss_mask: 0.6924  com_loss_dice: 0.9716    time: 1.4470  last_time: 1.4562  data_time: 0.0382  last_data_time: 0.0315   lr: 0.0001  max_mem: 36231M
[08/20 12:45:51] d2.utils.events INFO:  eta: 0:16:51  iter: 299  total_loss: 44.39  m1_loss_ce: 0.5813  m1_loss_mask: 0.1781  m1_loss_dice: 1.201  m1_loss_ce_0: 0.6741  m1_loss_mask_0: 0.1974  m1_loss_dice_0: 1.427  m1_loss_ce_1: 0.703  m1_loss_mask_1: 0.1838  m1_loss_dice_1: 1.35  m1_loss_ce_2: 0.6663  m1_loss_mask_2: 0.18  m1_loss_dice_2: 1.306  m1_loss_ce_3: 0.6152  m1_loss_mask_3: 0.1777  m1_loss_dice_3: 1.223  m1_loss_ce_4: 0.5989  m1_loss_mask_4: 0.1786  m1_loss_dice_4: 1.262  m1_loss_ce_5: 0.5729  m1_loss_mask_5: 0.1785  m1_loss_dice_5: 1.248  m1_loss_ce_6: 0.5606  m1_loss_mask_6: 0.178  m1_loss_dice_6: 1.219  m1_loss_ce_7: 0.5759  m1_loss_mask_7: 0.1754  m1_loss_dice_7: 1.18  m1_loss_ce_8: 0.5604  m1_loss_mask_8: 0.1789  m1_loss_dice_8: 1.221  m2_loss_ce: 0.5419  m2_loss_mask: 0.1683  m2_loss_dice: 1.211  m2_loss_ce_0: 0.6451  m2_loss_mask_0: 0.1978  m2_loss_dice_0: 1.42  m2_loss_ce_1: 0.6877  m2_loss_mask_1: 0.1811  m2_loss_dice_1: 1.314  m2_loss_ce_2: 0.6186  m2_loss_mask_2: 0.1723  m2_loss_dice_2: 1.272  m2_loss_ce_3: 0.599  m2_loss_mask_3: 0.1706  m2_loss_dice_3: 1.236  m2_loss_ce_4: 0.5657  m2_loss_mask_4: 0.1723  m2_loss_dice_4: 1.225  m2_loss_ce_5: 0.5736  m2_loss_mask_5: 0.1722  m2_loss_dice_5: 1.208  m2_loss_ce_6: 0.5533  m2_loss_mask_6: 0.1711  m2_loss_dice_6: 1.193  m2_loss_ce_7: 0.5329  m2_loss_mask_7: 0.1702  m2_loss_dice_7: 1.214  m2_loss_ce_8: 0.5415  m2_loss_mask_8: 0.1684  m2_loss_dice_8: 1.211  com_loss_ce: 1.785  com_loss_mask: 0.6924  com_loss_dice: 0.97    time: 1.4474  last_time: 1.4312  data_time: 0.0383  last_data_time: 0.0410   lr: 0.0001  max_mem: 36231M
[08/20 12:46:20] d2.utils.events INFO:  eta: 0:16:22  iter: 319  total_loss: 45.03  m1_loss_ce: 0.5722  m1_loss_mask: 0.1782  m1_loss_dice: 1.266  m1_loss_ce_0: 0.674  m1_loss_mask_0: 0.2056  m1_loss_dice_0: 1.486  m1_loss_ce_1: 0.6677  m1_loss_mask_1: 0.1806  m1_loss_dice_1: 1.372  m1_loss_ce_2: 0.6299  m1_loss_mask_2: 0.1791  m1_loss_dice_2: 1.325  m1_loss_ce_3: 0.5801  m1_loss_mask_3: 0.182  m1_loss_dice_3: 1.293  m1_loss_ce_4: 0.5479  m1_loss_mask_4: 0.1797  m1_loss_dice_4: 1.284  m1_loss_ce_5: 0.5427  m1_loss_mask_5: 0.1829  m1_loss_dice_5: 1.309  m1_loss_ce_6: 0.5539  m1_loss_mask_6: 0.1815  m1_loss_dice_6: 1.292  m1_loss_ce_7: 0.5329  m1_loss_mask_7: 0.1792  m1_loss_dice_7: 1.258  m1_loss_ce_8: 0.5377  m1_loss_mask_8: 0.1788  m1_loss_dice_8: 1.278  m2_loss_ce: 0.5474  m2_loss_mask: 0.1704  m2_loss_dice: 1.231  m2_loss_ce_0: 0.6593  m2_loss_mask_0: 0.2053  m2_loss_dice_0: 1.466  m2_loss_ce_1: 0.6934  m2_loss_mask_1: 0.1842  m2_loss_dice_1: 1.385  m2_loss_ce_2: 0.6578  m2_loss_mask_2: 0.1773  m2_loss_dice_2: 1.351  m2_loss_ce_3: 0.5819  m2_loss_mask_3: 0.1759  m2_loss_dice_3: 1.295  m2_loss_ce_4: 0.5977  m2_loss_mask_4: 0.1761  m2_loss_dice_4: 1.278  m2_loss_ce_5: 0.5769  m2_loss_mask_5: 0.1748  m2_loss_dice_5: 1.262  m2_loss_ce_6: 0.5515  m2_loss_mask_6: 0.1743  m2_loss_dice_6: 1.225  m2_loss_ce_7: 0.5743  m2_loss_mask_7: 0.1727  m2_loss_dice_7: 1.229  m2_loss_ce_8: 0.5544  m2_loss_mask_8: 0.1732  m2_loss_dice_8: 1.218  com_loss_ce: 1.805  com_loss_mask: 0.6924  com_loss_dice: 0.9698    time: 1.4471  last_time: 1.3661  data_time: 0.0410  last_data_time: 0.0442   lr: 0.0001  max_mem: 36231M
[08/20 12:46:50] d2.utils.events INFO:  eta: 0:15:54  iter: 339  total_loss: 45.2  m1_loss_ce: 0.5299  m1_loss_mask: 0.1644  m1_loss_dice: 1.297  m1_loss_ce_0: 0.6255  m1_loss_mask_0: 0.1889  m1_loss_dice_0: 1.539  m1_loss_ce_1: 0.641  m1_loss_mask_1: 0.172  m1_loss_dice_1: 1.448  m1_loss_ce_2: 0.5936  m1_loss_mask_2: 0.1621  m1_loss_dice_2: 1.372  m1_loss_ce_3: 0.5536  m1_loss_mask_3: 0.166  m1_loss_dice_3: 1.345  m1_loss_ce_4: 0.5022  m1_loss_mask_4: 0.1656  m1_loss_dice_4: 1.361  m1_loss_ce_5: 0.5118  m1_loss_mask_5: 0.1624  m1_loss_dice_5: 1.329  m1_loss_ce_6: 0.501  m1_loss_mask_6: 0.1664  m1_loss_dice_6: 1.309  m1_loss_ce_7: 0.4993  m1_loss_mask_7: 0.1669  m1_loss_dice_7: 1.341  m1_loss_ce_8: 0.5116  m1_loss_mask_8: 0.1646  m1_loss_dice_8: 1.336  m2_loss_ce: 0.5358  m2_loss_mask: 0.1634  m2_loss_dice: 1.347  m2_loss_ce_0: 0.605  m2_loss_mask_0: 0.1886  m2_loss_dice_0: 1.488  m2_loss_ce_1: 0.6809  m2_loss_mask_1: 0.1779  m2_loss_dice_1: 1.465  m2_loss_ce_2: 0.6116  m2_loss_mask_2: 0.1665  m2_loss_dice_2: 1.391  m2_loss_ce_3: 0.5554  m2_loss_mask_3: 0.1665  m2_loss_dice_3: 1.333  m2_loss_ce_4: 0.5378  m2_loss_mask_4: 0.1683  m2_loss_dice_4: 1.317  m2_loss_ce_5: 0.5554  m2_loss_mask_5: 0.1674  m2_loss_dice_5: 1.337  m2_loss_ce_6: 0.5403  m2_loss_mask_6: 0.1665  m2_loss_dice_6: 1.324  m2_loss_ce_7: 0.5611  m2_loss_mask_7: 0.1632  m2_loss_dice_7: 1.331  m2_loss_ce_8: 0.5238  m2_loss_mask_8: 0.1635  m2_loss_dice_8: 1.299  com_loss_ce: 1.801  com_loss_mask: 0.6924  com_loss_dice: 0.9714    time: 1.4488  last_time: 1.4796  data_time: 0.0445  last_data_time: 0.0363   lr: 0.0001  max_mem: 36231M
[08/20 12:47:19] d2.utils.events INFO:  eta: 0:15:26  iter: 359  total_loss: 44.89  m1_loss_ce: 0.5663  m1_loss_mask: 0.1845  m1_loss_dice: 1.218  m1_loss_ce_0: 0.6662  m1_loss_mask_0: 0.2077  m1_loss_dice_0: 1.415  m1_loss_ce_1: 0.6733  m1_loss_mask_1: 0.1921  m1_loss_dice_1: 1.344  m1_loss_ce_2: 0.5949  m1_loss_mask_2: 0.1825  m1_loss_dice_2: 1.288  m1_loss_ce_3: 0.5562  m1_loss_mask_3: 0.1853  m1_loss_dice_3: 1.236  m1_loss_ce_4: 0.5429  m1_loss_mask_4: 0.186  m1_loss_dice_4: 1.245  m1_loss_ce_5: 0.5457  m1_loss_mask_5: 0.182  m1_loss_dice_5: 1.206  m1_loss_ce_6: 0.5064  m1_loss_mask_6: 0.1871  m1_loss_dice_6: 1.17  m1_loss_ce_7: 0.5254  m1_loss_mask_7: 0.185  m1_loss_dice_7: 1.232  m1_loss_ce_8: 0.537  m1_loss_mask_8: 0.1848  m1_loss_dice_8: 1.192  m2_loss_ce: 0.5001  m2_loss_mask: 0.1805  m2_loss_dice: 1.185  m2_loss_ce_0: 0.6254  m2_loss_mask_0: 0.2055  m2_loss_dice_0: 1.459  m2_loss_ce_1: 0.6641  m2_loss_mask_1: 0.1887  m2_loss_dice_1: 1.408  m2_loss_ce_2: 0.61  m2_loss_mask_2: 0.1847  m2_loss_dice_2: 1.297  m2_loss_ce_3: 0.5578  m2_loss_mask_3: 0.185  m2_loss_dice_3: 1.245  m2_loss_ce_4: 0.5187  m2_loss_mask_4: 0.1853  m2_loss_dice_4: 1.233  m2_loss_ce_5: 0.5206  m2_loss_mask_5: 0.1819  m2_loss_dice_5: 1.244  m2_loss_ce_6: 0.4999  m2_loss_mask_6: 0.1812  m2_loss_dice_6: 1.204  m2_loss_ce_7: 0.5023  m2_loss_mask_7: 0.1791  m2_loss_dice_7: 1.203  m2_loss_ce_8: 0.4726  m2_loss_mask_8: 0.1809  m2_loss_dice_8: 1.213  com_loss_ce: 1.775  com_loss_mask: 0.6924  com_loss_dice: 0.9703    time: 1.4498  last_time: 1.3753  data_time: 0.0387  last_data_time: 0.0411   lr: 0.0001  max_mem: 36231M
[08/20 12:47:49] d2.utils.events INFO:  eta: 0:14:58  iter: 379  total_loss: 44.77  m1_loss_ce: 0.564  m1_loss_mask: 0.1717  m1_loss_dice: 1.205  m1_loss_ce_0: 0.6528  m1_loss_mask_0: 0.1972  m1_loss_dice_0: 1.464  m1_loss_ce_1: 0.6992  m1_loss_mask_1: 0.1794  m1_loss_dice_1: 1.366  m1_loss_ce_2: 0.6719  m1_loss_mask_2: 0.1783  m1_loss_dice_2: 1.299  m1_loss_ce_3: 0.5766  m1_loss_mask_3: 0.1776  m1_loss_dice_3: 1.255  m1_loss_ce_4: 0.573  m1_loss_mask_4: 0.1724  m1_loss_dice_4: 1.218  m1_loss_ce_5: 0.5712  m1_loss_mask_5: 0.1727  m1_loss_dice_5: 1.242  m1_loss_ce_6: 0.5557  m1_loss_mask_6: 0.1729  m1_loss_dice_6: 1.202  m1_loss_ce_7: 0.5303  m1_loss_mask_7: 0.1741  m1_loss_dice_7: 1.227  m1_loss_ce_8: 0.5293  m1_loss_mask_8: 0.1727  m1_loss_dice_8: 1.217  m2_loss_ce: 0.5375  m2_loss_mask: 0.1765  m2_loss_dice: 1.187  m2_loss_ce_0: 0.6221  m2_loss_mask_0: 0.2012  m2_loss_dice_0: 1.439  m2_loss_ce_1: 0.6804  m2_loss_mask_1: 0.177  m2_loss_dice_1: 1.359  m2_loss_ce_2: 0.6341  m2_loss_mask_2: 0.1765  m2_loss_dice_2: 1.272  m2_loss_ce_3: 0.586  m2_loss_mask_3: 0.1738  m2_loss_dice_3: 1.261  m2_loss_ce_4: 0.5417  m2_loss_mask_4: 0.1731  m2_loss_dice_4: 1.241  m2_loss_ce_5: 0.545  m2_loss_mask_5: 0.1739  m2_loss_dice_5: 1.241  m2_loss_ce_6: 0.5668  m2_loss_mask_6: 0.1737  m2_loss_dice_6: 1.207  m2_loss_ce_7: 0.5305  m2_loss_mask_7: 0.1713  m2_loss_dice_7: 1.183  m2_loss_ce_8: 0.552  m2_loss_mask_8: 0.1717  m2_loss_dice_8: 1.219  com_loss_ce: 1.793  com_loss_mask: 0.6924  com_loss_dice: 0.969    time: 1.4505  last_time: 1.4545  data_time: 0.0373  last_data_time: 0.0376   lr: 0.0001  max_mem: 36231M
[08/20 12:48:18] d2.utils.events INFO:  eta: 0:14:29  iter: 399  total_loss: 44.24  m1_loss_ce: 0.5474  m1_loss_mask: 0.1609  m1_loss_dice: 1.204  m1_loss_ce_0: 0.6336  m1_loss_mask_0: 0.1894  m1_loss_dice_0: 1.409  m1_loss_ce_1: 0.6929  m1_loss_mask_1: 0.1749  m1_loss_dice_1: 1.341  m1_loss_ce_2: 0.6397  m1_loss_mask_2: 0.1699  m1_loss_dice_2: 1.264  m1_loss_ce_3: 0.5854  m1_loss_mask_3: 0.1626  m1_loss_dice_3: 1.257  m1_loss_ce_4: 0.559  m1_loss_mask_4: 0.1619  m1_loss_dice_4: 1.261  m1_loss_ce_5: 0.5159  m1_loss_mask_5: 0.162  m1_loss_dice_5: 1.225  m1_loss_ce_6: 0.546  m1_loss_mask_6: 0.161  m1_loss_dice_6: 1.179  m1_loss_ce_7: 0.5185  m1_loss_mask_7: 0.161  m1_loss_dice_7: 1.227  m1_loss_ce_8: 0.5263  m1_loss_mask_8: 0.1634  m1_loss_dice_8: 1.226  m2_loss_ce: 0.5544  m2_loss_mask: 0.1679  m2_loss_dice: 1.265  m2_loss_ce_0: 0.6213  m2_loss_mask_0: 0.1967  m2_loss_dice_0: 1.406  m2_loss_ce_1: 0.6958  m2_loss_mask_1: 0.1745  m2_loss_dice_1: 1.347  m2_loss_ce_2: 0.6254  m2_loss_mask_2: 0.1699  m2_loss_dice_2: 1.296  m2_loss_ce_3: 0.5904  m2_loss_mask_3: 0.1717  m2_loss_dice_3: 1.235  m2_loss_ce_4: 0.5761  m2_loss_mask_4: 0.1717  m2_loss_dice_4: 1.263  m2_loss_ce_5: 0.5478  m2_loss_mask_5: 0.1724  m2_loss_dice_5: 1.266  m2_loss_ce_6: 0.5718  m2_loss_mask_6: 0.1704  m2_loss_dice_6: 1.232  m2_loss_ce_7: 0.562  m2_loss_mask_7: 0.1702  m2_loss_dice_7: 1.243  m2_loss_ce_8: 0.5508  m2_loss_mask_8: 0.1674  m2_loss_dice_8: 1.243  com_loss_ce: 1.789  com_loss_mask: 0.6924  com_loss_dice: 0.9703    time: 1.4504  last_time: 1.4297  data_time: 0.0383  last_data_time: 0.0412   lr: 0.0001  max_mem: 36231M
[08/20 12:48:47] d2.utils.events INFO:  eta: 0:14:00  iter: 419  total_loss: 43.3  m1_loss_ce: 0.5226  m1_loss_mask: 0.1683  m1_loss_dice: 1.238  m1_loss_ce_0: 0.6455  m1_loss_mask_0: 0.1847  m1_loss_dice_0: 1.436  m1_loss_ce_1: 0.6966  m1_loss_mask_1: 0.174  m1_loss_dice_1: 1.322  m1_loss_ce_2: 0.6006  m1_loss_mask_2: 0.1667  m1_loss_dice_2: 1.276  m1_loss_ce_3: 0.5359  m1_loss_mask_3: 0.1607  m1_loss_dice_3: 1.25  m1_loss_ce_4: 0.5113  m1_loss_mask_4: 0.1644  m1_loss_dice_4: 1.228  m1_loss_ce_5: 0.5391  m1_loss_mask_5: 0.165  m1_loss_dice_5: 1.234  m1_loss_ce_6: 0.5109  m1_loss_mask_6: 0.1652  m1_loss_dice_6: 1.236  m1_loss_ce_7: 0.5031  m1_loss_mask_7: 0.1668  m1_loss_dice_7: 1.235  m1_loss_ce_8: 0.5152  m1_loss_mask_8: 0.1685  m1_loss_dice_8: 1.217  m2_loss_ce: 0.5014  m2_loss_mask: 0.1699  m2_loss_dice: 1.212  m2_loss_ce_0: 0.5744  m2_loss_mask_0: 0.1922  m2_loss_dice_0: 1.539  m2_loss_ce_1: 0.6491  m2_loss_mask_1: 0.1734  m2_loss_dice_1: 1.376  m2_loss_ce_2: 0.5872  m2_loss_mask_2: 0.1688  m2_loss_dice_2: 1.284  m2_loss_ce_3: 0.5649  m2_loss_mask_3: 0.1677  m2_loss_dice_3: 1.255  m2_loss_ce_4: 0.534  m2_loss_mask_4: 0.1696  m2_loss_dice_4: 1.252  m2_loss_ce_5: 0.5143  m2_loss_mask_5: 0.1716  m2_loss_dice_5: 1.244  m2_loss_ce_6: 0.5228  m2_loss_mask_6: 0.1708  m2_loss_dice_6: 1.238  m2_loss_ce_7: 0.5164  m2_loss_mask_7: 0.1717  m2_loss_dice_7: 1.239  m2_loss_ce_8: 0.5107  m2_loss_mask_8: 0.1703  m2_loss_dice_8: 1.183  com_loss_ce: 1.779  com_loss_mask: 0.6924  com_loss_dice: 0.97    time: 1.4515  last_time: 1.5254  data_time: 0.0423  last_data_time: 0.0447   lr: 0.0001  max_mem: 36231M
[08/20 12:49:16] d2.utils.events INFO:  eta: 0:13:31  iter: 439  total_loss: 43.75  m1_loss_ce: 0.5399  m1_loss_mask: 0.1658  m1_loss_dice: 1.194  m1_loss_ce_0: 0.6316  m1_loss_mask_0: 0.1882  m1_loss_dice_0: 1.342  m1_loss_ce_1: 0.6945  m1_loss_mask_1: 0.1781  m1_loss_dice_1: 1.336  m1_loss_ce_2: 0.6179  m1_loss_mask_2: 0.1715  m1_loss_dice_2: 1.228  m1_loss_ce_3: 0.5754  m1_loss_mask_3: 0.1708  m1_loss_dice_3: 1.201  m1_loss_ce_4: 0.5787  m1_loss_mask_4: 0.1704  m1_loss_dice_4: 1.183  m1_loss_ce_5: 0.5586  m1_loss_mask_5: 0.1694  m1_loss_dice_5: 1.193  m1_loss_ce_6: 0.5301  m1_loss_mask_6: 0.1712  m1_loss_dice_6: 1.18  m1_loss_ce_7: 0.5342  m1_loss_mask_7: 0.1717  m1_loss_dice_7: 1.154  m1_loss_ce_8: 0.5227  m1_loss_mask_8: 0.1707  m1_loss_dice_8: 1.177  m2_loss_ce: 0.5337  m2_loss_mask: 0.1611  m2_loss_dice: 1.192  m2_loss_ce_0: 0.6339  m2_loss_mask_0: 0.1881  m2_loss_dice_0: 1.41  m2_loss_ce_1: 0.6902  m2_loss_mask_1: 0.1719  m2_loss_dice_1: 1.324  m2_loss_ce_2: 0.6667  m2_loss_mask_2: 0.1647  m2_loss_dice_2: 1.275  m2_loss_ce_3: 0.6034  m2_loss_mask_3: 0.1618  m2_loss_dice_3: 1.253  m2_loss_ce_4: 0.5885  m2_loss_mask_4: 0.1639  m2_loss_dice_4: 1.219  m2_loss_ce_5: 0.5786  m2_loss_mask_5: 0.1637  m2_loss_dice_5: 1.214  m2_loss_ce_6: 0.5553  m2_loss_mask_6: 0.1615  m2_loss_dice_6: 1.222  m2_loss_ce_7: 0.5535  m2_loss_mask_7: 0.1626  m2_loss_dice_7: 1.176  m2_loss_ce_8: 0.5578  m2_loss_mask_8: 0.1626  m2_loss_dice_8: 1.205  com_loss_ce: 1.78  com_loss_mask: 0.6924  com_loss_dice: 0.9703    time: 1.4509  last_time: 1.5043  data_time: 0.0377  last_data_time: 0.0460   lr: 0.0001  max_mem: 36231M
[08/20 12:49:45] d2.utils.events INFO:  eta: 0:13:01  iter: 459  total_loss: 44.99  m1_loss_ce: 0.5579  m1_loss_mask: 0.1628  m1_loss_dice: 1.252  m1_loss_ce_0: 0.6569  m1_loss_mask_0: 0.1959  m1_loss_dice_0: 1.423  m1_loss_ce_1: 0.6954  m1_loss_mask_1: 0.1809  m1_loss_dice_1: 1.372  m1_loss_ce_2: 0.6465  m1_loss_mask_2: 0.1744  m1_loss_dice_2: 1.31  m1_loss_ce_3: 0.5821  m1_loss_mask_3: 0.1686  m1_loss_dice_3: 1.276  m1_loss_ce_4: 0.5669  m1_loss_mask_4: 0.1709  m1_loss_dice_4: 1.264  m1_loss_ce_5: 0.5295  m1_loss_mask_5: 0.1685  m1_loss_dice_5: 1.285  m1_loss_ce_6: 0.5374  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.261  m1_loss_ce_7: 0.5342  m1_loss_mask_7: 0.1669  m1_loss_dice_7: 1.259  m1_loss_ce_8: 0.5074  m1_loss_mask_8: 0.1653  m1_loss_dice_8: 1.248  m2_loss_ce: 0.5492  m2_loss_mask: 0.1622  m2_loss_dice: 1.222  m2_loss_ce_0: 0.6514  m2_loss_mask_0: 0.19  m2_loss_dice_0: 1.482  m2_loss_ce_1: 0.6847  m2_loss_mask_1: 0.1757  m2_loss_dice_1: 1.411  m2_loss_ce_2: 0.6202  m2_loss_mask_2: 0.1683  m2_loss_dice_2: 1.303  m2_loss_ce_3: 0.5661  m2_loss_mask_3: 0.1645  m2_loss_dice_3: 1.308  m2_loss_ce_4: 0.555  m2_loss_mask_4: 0.1659  m2_loss_dice_4: 1.294  m2_loss_ce_5: 0.5621  m2_loss_mask_5: 0.166  m2_loss_dice_5: 1.266  m2_loss_ce_6: 0.5698  m2_loss_mask_6: 0.1623  m2_loss_dice_6: 1.225  m2_loss_ce_7: 0.523  m2_loss_mask_7: 0.1629  m2_loss_dice_7: 1.297  m2_loss_ce_8: 0.5338  m2_loss_mask_8: 0.1632  m2_loss_dice_8: 1.255  com_loss_ce: 1.786  com_loss_mask: 0.6924  com_loss_dice: 0.9708    time: 1.4508  last_time: 1.3785  data_time: 0.0403  last_data_time: 0.0347   lr: 0.0001  max_mem: 36231M
[08/20 12:50:14] d2.utils.events INFO:  eta: 0:12:32  iter: 479  total_loss: 41.67  m1_loss_ce: 0.5204  m1_loss_mask: 0.1668  m1_loss_dice: 1.139  m1_loss_ce_0: 0.6171  m1_loss_mask_0: 0.1848  m1_loss_dice_0: 1.341  m1_loss_ce_1: 0.6942  m1_loss_mask_1: 0.1774  m1_loss_dice_1: 1.258  m1_loss_ce_2: 0.6258  m1_loss_mask_2: 0.1684  m1_loss_dice_2: 1.244  m1_loss_ce_3: 0.5467  m1_loss_mask_3: 0.1684  m1_loss_dice_3: 1.178  m1_loss_ce_4: 0.5114  m1_loss_mask_4: 0.1686  m1_loss_dice_4: 1.171  m1_loss_ce_5: 0.5053  m1_loss_mask_5: 0.1621  m1_loss_dice_5: 1.189  m1_loss_ce_6: 0.5042  m1_loss_mask_6: 0.1626  m1_loss_dice_6: 1.157  m1_loss_ce_7: 0.4739  m1_loss_mask_7: 0.1646  m1_loss_dice_7: 1.148  m1_loss_ce_8: 0.5125  m1_loss_mask_8: 0.1638  m1_loss_dice_8: 1.134  m2_loss_ce: 0.5069  m2_loss_mask: 0.1656  m2_loss_dice: 1.152  m2_loss_ce_0: 0.6287  m2_loss_mask_0: 0.193  m2_loss_dice_0: 1.385  m2_loss_ce_1: 0.6595  m2_loss_mask_1: 0.1789  m2_loss_dice_1: 1.324  m2_loss_ce_2: 0.6318  m2_loss_mask_2: 0.1732  m2_loss_dice_2: 1.277  m2_loss_ce_3: 0.5603  m2_loss_mask_3: 0.1692  m2_loss_dice_3: 1.219  m2_loss_ce_4: 0.5398  m2_loss_mask_4: 0.171  m2_loss_dice_4: 1.199  m2_loss_ce_5: 0.5317  m2_loss_mask_5: 0.1685  m2_loss_dice_5: 1.191  m2_loss_ce_6: 0.5224  m2_loss_mask_6: 0.1669  m2_loss_dice_6: 1.181  m2_loss_ce_7: 0.5163  m2_loss_mask_7: 0.1671  m2_loss_dice_7: 1.19  m2_loss_ce_8: 0.5066  m2_loss_mask_8: 0.166  m2_loss_dice_8: 1.171  com_loss_ce: 1.774  com_loss_mask: 0.6924  com_loss_dice: 0.9687    time: 1.4508  last_time: 1.4388  data_time: 0.0362  last_data_time: 0.0383   lr: 0.0001  max_mem: 36231M
[08/20 12:50:44] d2.utils.events INFO:  eta: 0:12:04  iter: 499  total_loss: 44.6  m1_loss_ce: 0.552  m1_loss_mask: 0.1669  m1_loss_dice: 1.268  m1_loss_ce_0: 0.6632  m1_loss_mask_0: 0.1899  m1_loss_dice_0: 1.485  m1_loss_ce_1: 0.7123  m1_loss_mask_1: 0.1763  m1_loss_dice_1: 1.438  m1_loss_ce_2: 0.6576  m1_loss_mask_2: 0.1701  m1_loss_dice_2: 1.339  m1_loss_ce_3: 0.5967  m1_loss_mask_3: 0.1666  m1_loss_dice_3: 1.294  m1_loss_ce_4: 0.5607  m1_loss_mask_4: 0.1681  m1_loss_dice_4: 1.282  m1_loss_ce_5: 0.558  m1_loss_mask_5: 0.1662  m1_loss_dice_5: 1.291  m1_loss_ce_6: 0.5858  m1_loss_mask_6: 0.1655  m1_loss_dice_6: 1.25  m1_loss_ce_7: 0.532  m1_loss_mask_7: 0.165  m1_loss_dice_7: 1.254  m1_loss_ce_8: 0.5399  m1_loss_mask_8: 0.1647  m1_loss_dice_8: 1.258  m2_loss_ce: 0.5485  m2_loss_mask: 0.167  m2_loss_dice: 1.243  m2_loss_ce_0: 0.6393  m2_loss_mask_0: 0.1917  m2_loss_dice_0: 1.529  m2_loss_ce_1: 0.7234  m2_loss_mask_1: 0.1793  m2_loss_dice_1: 1.444  m2_loss_ce_2: 0.675  m2_loss_mask_2: 0.1695  m2_loss_dice_2: 1.33  m2_loss_ce_3: 0.627  m2_loss_mask_3: 0.1696  m2_loss_dice_3: 1.332  m2_loss_ce_4: 0.568  m2_loss_mask_4: 0.1717  m2_loss_dice_4: 1.313  m2_loss_ce_5: 0.5782  m2_loss_mask_5: 0.1674  m2_loss_dice_5: 1.311  m2_loss_ce_6: 0.5849  m2_loss_mask_6: 0.1692  m2_loss_dice_6: 1.286  m2_loss_ce_7: 0.5571  m2_loss_mask_7: 0.168  m2_loss_dice_7: 1.268  m2_loss_ce_8: 0.5332  m2_loss_mask_8: 0.1674  m2_loss_dice_8: 1.267  com_loss_ce: 1.821  com_loss_mask: 0.6924  com_loss_dice: 0.9733    time: 1.4515  last_time: 1.5173  data_time: 0.0401  last_data_time: 0.0342   lr: 0.0001  max_mem: 36231M
[08/20 12:51:13] d2.utils.events INFO:  eta: 0:11:35  iter: 519  total_loss: 42.05  m1_loss_ce: 0.5374  m1_loss_mask: 0.1643  m1_loss_dice: 1.161  m1_loss_ce_0: 0.6026  m1_loss_mask_0: 0.1893  m1_loss_dice_0: 1.363  m1_loss_ce_1: 0.6779  m1_loss_mask_1: 0.1767  m1_loss_dice_1: 1.3  m1_loss_ce_2: 0.6253  m1_loss_mask_2: 0.1766  m1_loss_dice_2: 1.25  m1_loss_ce_3: 0.5489  m1_loss_mask_3: 0.168  m1_loss_dice_3: 1.205  m1_loss_ce_4: 0.5701  m1_loss_mask_4: 0.1693  m1_loss_dice_4: 1.217  m1_loss_ce_5: 0.534  m1_loss_mask_5: 0.1662  m1_loss_dice_5: 1.203  m1_loss_ce_6: 0.5342  m1_loss_mask_6: 0.1688  m1_loss_dice_6: 1.172  m1_loss_ce_7: 0.4946  m1_loss_mask_7: 0.1682  m1_loss_dice_7: 1.164  m1_loss_ce_8: 0.522  m1_loss_mask_8: 0.165  m1_loss_dice_8: 1.183  m2_loss_ce: 0.5055  m2_loss_mask: 0.1606  m2_loss_dice: 1.141  m2_loss_ce_0: 0.6176  m2_loss_mask_0: 0.1899  m2_loss_dice_0: 1.403  m2_loss_ce_1: 0.6931  m2_loss_mask_1: 0.1778  m2_loss_dice_1: 1.327  m2_loss_ce_2: 0.6096  m2_loss_mask_2: 0.166  m2_loss_dice_2: 1.225  m2_loss_ce_3: 0.5775  m2_loss_mask_3: 0.1649  m2_loss_dice_3: 1.211  m2_loss_ce_4: 0.5603  m2_loss_mask_4: 0.1643  m2_loss_dice_4: 1.201  m2_loss_ce_5: 0.5479  m2_loss_mask_5: 0.1616  m2_loss_dice_5: 1.196  m2_loss_ce_6: 0.5565  m2_loss_mask_6: 0.1608  m2_loss_dice_6: 1.193  m2_loss_ce_7: 0.5345  m2_loss_mask_7: 0.1637  m2_loss_dice_7: 1.173  m2_loss_ce_8: 0.5638  m2_loss_mask_8: 0.1622  m2_loss_dice_8: 1.201  com_loss_ce: 1.775  com_loss_mask: 0.6923  com_loss_dice: 0.9691    time: 1.4510  last_time: 1.3751  data_time: 0.0412  last_data_time: 0.0414   lr: 0.0001  max_mem: 36231M
[08/20 12:51:42] d2.utils.events INFO:  eta: 0:11:06  iter: 539  total_loss: 44.84  m1_loss_ce: 0.544  m1_loss_mask: 0.1645  m1_loss_dice: 1.226  m1_loss_ce_0: 0.6193  m1_loss_mask_0: 0.1945  m1_loss_dice_0: 1.494  m1_loss_ce_1: 0.6518  m1_loss_mask_1: 0.1769  m1_loss_dice_1: 1.338  m1_loss_ce_2: 0.629  m1_loss_mask_2: 0.1705  m1_loss_dice_2: 1.307  m1_loss_ce_3: 0.532  m1_loss_mask_3: 0.1687  m1_loss_dice_3: 1.239  m1_loss_ce_4: 0.5158  m1_loss_mask_4: 0.1661  m1_loss_dice_4: 1.233  m1_loss_ce_5: 0.4993  m1_loss_mask_5: 0.1685  m1_loss_dice_5: 1.27  m1_loss_ce_6: 0.5211  m1_loss_mask_6: 0.1657  m1_loss_dice_6: 1.211  m1_loss_ce_7: 0.5136  m1_loss_mask_7: 0.1647  m1_loss_dice_7: 1.22  m1_loss_ce_8: 0.5247  m1_loss_mask_8: 0.1635  m1_loss_dice_8: 1.232  m2_loss_ce: 0.5161  m2_loss_mask: 0.1624  m2_loss_dice: 1.247  m2_loss_ce_0: 0.6162  m2_loss_mask_0: 0.1958  m2_loss_dice_0: 1.527  m2_loss_ce_1: 0.6888  m2_loss_mask_1: 0.1757  m2_loss_dice_1: 1.376  m2_loss_ce_2: 0.6434  m2_loss_mask_2: 0.1674  m2_loss_dice_2: 1.338  m2_loss_ce_3: 0.5452  m2_loss_mask_3: 0.1682  m2_loss_dice_3: 1.262  m2_loss_ce_4: 0.5541  m2_loss_mask_4: 0.17  m2_loss_dice_4: 1.248  m2_loss_ce_5: 0.5046  m2_loss_mask_5: 0.1704  m2_loss_dice_5: 1.288  m2_loss_ce_6: 0.5246  m2_loss_mask_6: 0.1639  m2_loss_dice_6: 1.289  m2_loss_ce_7: 0.5073  m2_loss_mask_7: 0.1662  m2_loss_dice_7: 1.262  m2_loss_ce_8: 0.5068  m2_loss_mask_8: 0.1626  m2_loss_dice_8: 1.236  com_loss_ce: 1.781  com_loss_mask: 0.6924  com_loss_dice: 0.9709    time: 1.4515  last_time: 1.6162  data_time: 0.0427  last_data_time: 0.0469   lr: 0.0001  max_mem: 36231M
[08/20 12:52:11] d2.utils.events INFO:  eta: 0:10:37  iter: 559  total_loss: 43.52  m1_loss_ce: 0.5346  m1_loss_mask: 0.1652  m1_loss_dice: 1.191  m1_loss_ce_0: 0.6115  m1_loss_mask_0: 0.19  m1_loss_dice_0: 1.378  m1_loss_ce_1: 0.6529  m1_loss_mask_1: 0.1734  m1_loss_dice_1: 1.308  m1_loss_ce_2: 0.6189  m1_loss_mask_2: 0.1677  m1_loss_dice_2: 1.252  m1_loss_ce_3: 0.5192  m1_loss_mask_3: 0.1703  m1_loss_dice_3: 1.23  m1_loss_ce_4: 0.5456  m1_loss_mask_4: 0.1684  m1_loss_dice_4: 1.232  m1_loss_ce_5: 0.5358  m1_loss_mask_5: 0.1678  m1_loss_dice_5: 1.202  m1_loss_ce_6: 0.5233  m1_loss_mask_6: 0.1645  m1_loss_dice_6: 1.205  m1_loss_ce_7: 0.51  m1_loss_mask_7: 0.1678  m1_loss_dice_7: 1.191  m1_loss_ce_8: 0.532  m1_loss_mask_8: 0.1658  m1_loss_dice_8: 1.211  m2_loss_ce: 0.5067  m2_loss_mask: 0.1635  m2_loss_dice: 1.201  m2_loss_ce_0: 0.6089  m2_loss_mask_0: 0.1904  m2_loss_dice_0: 1.389  m2_loss_ce_1: 0.6779  m2_loss_mask_1: 0.1774  m2_loss_dice_1: 1.308  m2_loss_ce_2: 0.6159  m2_loss_mask_2: 0.1671  m2_loss_dice_2: 1.267  m2_loss_ce_3: 0.6056  m2_loss_mask_3: 0.1717  m2_loss_dice_3: 1.205  m2_loss_ce_4: 0.5691  m2_loss_mask_4: 0.1697  m2_loss_dice_4: 1.179  m2_loss_ce_5: 0.5388  m2_loss_mask_5: 0.1691  m2_loss_dice_5: 1.213  m2_loss_ce_6: 0.5341  m2_loss_mask_6: 0.1675  m2_loss_dice_6: 1.161  m2_loss_ce_7: 0.5118  m2_loss_mask_7: 0.1671  m2_loss_dice_7: 1.18  m2_loss_ce_8: 0.5037  m2_loss_mask_8: 0.1645  m2_loss_dice_8: 1.163  com_loss_ce: 1.787  com_loss_mask: 0.6924  com_loss_dice: 0.9673    time: 1.4509  last_time: 1.5088  data_time: 0.0374  last_data_time: 0.0371   lr: 0.0001  max_mem: 36231M
[08/20 12:52:40] d2.utils.events INFO:  eta: 0:10:08  iter: 579  total_loss: 43.37  m1_loss_ce: 0.5155  m1_loss_mask: 0.1665  m1_loss_dice: 1.204  m1_loss_ce_0: 0.6007  m1_loss_mask_0: 0.1889  m1_loss_dice_0: 1.378  m1_loss_ce_1: 0.6736  m1_loss_mask_1: 0.1759  m1_loss_dice_1: 1.292  m1_loss_ce_2: 0.6392  m1_loss_mask_2: 0.1678  m1_loss_dice_2: 1.239  m1_loss_ce_3: 0.5874  m1_loss_mask_3: 0.173  m1_loss_dice_3: 1.214  m1_loss_ce_4: 0.5295  m1_loss_mask_4: 0.1709  m1_loss_dice_4: 1.26  m1_loss_ce_5: 0.5293  m1_loss_mask_5: 0.1674  m1_loss_dice_5: 1.222  m1_loss_ce_6: 0.503  m1_loss_mask_6: 0.1654  m1_loss_dice_6: 1.204  m1_loss_ce_7: 0.4915  m1_loss_mask_7: 0.1659  m1_loss_dice_7: 1.176  m1_loss_ce_8: 0.5098  m1_loss_mask_8: 0.167  m1_loss_dice_8: 1.19  m2_loss_ce: 0.5735  m2_loss_mask: 0.1598  m2_loss_dice: 1.205  m2_loss_ce_0: 0.6074  m2_loss_mask_0: 0.1944  m2_loss_dice_0: 1.39  m2_loss_ce_1: 0.6893  m2_loss_mask_1: 0.175  m2_loss_dice_1: 1.322  m2_loss_ce_2: 0.6312  m2_loss_mask_2: 0.1654  m2_loss_dice_2: 1.229  m2_loss_ce_3: 0.5889  m2_loss_mask_3: 0.1669  m2_loss_dice_3: 1.19  m2_loss_ce_4: 0.5544  m2_loss_mask_4: 0.1648  m2_loss_dice_4: 1.237  m2_loss_ce_5: 0.5673  m2_loss_mask_5: 0.1648  m2_loss_dice_5: 1.211  m2_loss_ce_6: 0.5405  m2_loss_mask_6: 0.1606  m2_loss_dice_6: 1.178  m2_loss_ce_7: 0.5491  m2_loss_mask_7: 0.1616  m2_loss_dice_7: 1.206  m2_loss_ce_8: 0.5561  m2_loss_mask_8: 0.1607  m2_loss_dice_8: 1.178  com_loss_ce: 1.786  com_loss_mask: 0.6924  com_loss_dice: 0.9697    time: 1.4502  last_time: 1.4352  data_time: 0.0382  last_data_time: 0.0317   lr: 0.0001  max_mem: 36231M
[08/20 12:53:09] d2.utils.events INFO:  eta: 0:09:39  iter: 599  total_loss: 42.17  m1_loss_ce: 0.5426  m1_loss_mask: 0.1722  m1_loss_dice: 1.187  m1_loss_ce_0: 0.6389  m1_loss_mask_0: 0.2049  m1_loss_dice_0: 1.436  m1_loss_ce_1: 0.6715  m1_loss_mask_1: 0.1866  m1_loss_dice_1: 1.325  m1_loss_ce_2: 0.572  m1_loss_mask_2: 0.1766  m1_loss_dice_2: 1.21  m1_loss_ce_3: 0.5243  m1_loss_mask_3: 0.177  m1_loss_dice_3: 1.211  m1_loss_ce_4: 0.5164  m1_loss_mask_4: 0.1765  m1_loss_dice_4: 1.226  m1_loss_ce_5: 0.5019  m1_loss_mask_5: 0.1755  m1_loss_dice_5: 1.235  m1_loss_ce_6: 0.4634  m1_loss_mask_6: 0.1745  m1_loss_dice_6: 1.208  m1_loss_ce_7: 0.4824  m1_loss_mask_7: 0.1731  m1_loss_dice_7: 1.162  m1_loss_ce_8: 0.4738  m1_loss_mask_8: 0.1734  m1_loss_dice_8: 1.194  m2_loss_ce: 0.4822  m2_loss_mask: 0.1726  m2_loss_dice: 1.143  m2_loss_ce_0: 0.5947  m2_loss_mask_0: 0.2036  m2_loss_dice_0: 1.424  m2_loss_ce_1: 0.6261  m2_loss_mask_1: 0.1838  m2_loss_dice_1: 1.329  m2_loss_ce_2: 0.6061  m2_loss_mask_2: 0.1773  m2_loss_dice_2: 1.252  m2_loss_ce_3: 0.5631  m2_loss_mask_3: 0.1754  m2_loss_dice_3: 1.19  m2_loss_ce_4: 0.5359  m2_loss_mask_4: 0.1761  m2_loss_dice_4: 1.181  m2_loss_ce_5: 0.5098  m2_loss_mask_5: 0.1761  m2_loss_dice_5: 1.194  m2_loss_ce_6: 0.5082  m2_loss_mask_6: 0.1741  m2_loss_dice_6: 1.163  m2_loss_ce_7: 0.5049  m2_loss_mask_7: 0.1726  m2_loss_dice_7: 1.173  m2_loss_ce_8: 0.4994  m2_loss_mask_8: 0.1745  m2_loss_dice_8: 1.149  com_loss_ce: 1.761  com_loss_mask: 0.6924  com_loss_dice: 0.9691    time: 1.4498  last_time: 1.4587  data_time: 0.0377  last_data_time: 0.0341   lr: 0.0001  max_mem: 36231M
[08/20 12:53:38] d2.utils.events INFO:  eta: 0:09:10  iter: 619  total_loss: 46.21  m1_loss_ce: 0.605  m1_loss_mask: 0.161  m1_loss_dice: 1.248  m1_loss_ce_0: 0.678  m1_loss_mask_0: 0.1855  m1_loss_dice_0: 1.462  m1_loss_ce_1: 0.6695  m1_loss_mask_1: 0.1708  m1_loss_dice_1: 1.398  m1_loss_ce_2: 0.6332  m1_loss_mask_2: 0.1646  m1_loss_dice_2: 1.373  m1_loss_ce_3: 0.6155  m1_loss_mask_3: 0.1649  m1_loss_dice_3: 1.273  m1_loss_ce_4: 0.5818  m1_loss_mask_4: 0.1624  m1_loss_dice_4: 1.318  m1_loss_ce_5: 0.5605  m1_loss_mask_5: 0.1615  m1_loss_dice_5: 1.319  m1_loss_ce_6: 0.5774  m1_loss_mask_6: 0.1601  m1_loss_dice_6: 1.245  m1_loss_ce_7: 0.575  m1_loss_mask_7: 0.1591  m1_loss_dice_7: 1.265  m1_loss_ce_8: 0.5496  m1_loss_mask_8: 0.1616  m1_loss_dice_8: 1.242  m2_loss_ce: 0.5674  m2_loss_mask: 0.1525  m2_loss_dice: 1.29  m2_loss_ce_0: 0.6375  m2_loss_mask_0: 0.1857  m2_loss_dice_0: 1.545  m2_loss_ce_1: 0.701  m2_loss_mask_1: 0.1679  m2_loss_dice_1: 1.413  m2_loss_ce_2: 0.6511  m2_loss_mask_2: 0.1569  m2_loss_dice_2: 1.377  m2_loss_ce_3: 0.6178  m2_loss_mask_3: 0.1572  m2_loss_dice_3: 1.289  m2_loss_ce_4: 0.5846  m2_loss_mask_4: 0.1577  m2_loss_dice_4: 1.287  m2_loss_ce_5: 0.6163  m2_loss_mask_5: 0.1574  m2_loss_dice_5: 1.269  m2_loss_ce_6: 0.5478  m2_loss_mask_6: 0.153  m2_loss_dice_6: 1.252  m2_loss_ce_7: 0.5513  m2_loss_mask_7: 0.1546  m2_loss_dice_7: 1.282  m2_loss_ce_8: 0.5547  m2_loss_mask_8: 0.1524  m2_loss_dice_8: 1.281  com_loss_ce: 1.791  com_loss_mask: 0.6924  com_loss_dice: 0.9712    time: 1.4497  last_time: 1.5161  data_time: 0.0390  last_data_time: 0.0333   lr: 0.0001  max_mem: 36231M
[08/20 12:54:07] d2.utils.events INFO:  eta: 0:08:41  iter: 639  total_loss: 44.96  m1_loss_ce: 0.535  m1_loss_mask: 0.1523  m1_loss_dice: 1.268  m1_loss_ce_0: 0.6588  m1_loss_mask_0: 0.184  m1_loss_dice_0: 1.431  m1_loss_ce_1: 0.6818  m1_loss_mask_1: 0.1641  m1_loss_dice_1: 1.357  m1_loss_ce_2: 0.6415  m1_loss_mask_2: 0.1562  m1_loss_dice_2: 1.356  m1_loss_ce_3: 0.6247  m1_loss_mask_3: 0.1568  m1_loss_dice_3: 1.261  m1_loss_ce_4: 0.6129  m1_loss_mask_4: 0.1527  m1_loss_dice_4: 1.302  m1_loss_ce_5: 0.5758  m1_loss_mask_5: 0.1514  m1_loss_dice_5: 1.252  m1_loss_ce_6: 0.5438  m1_loss_mask_6: 0.153  m1_loss_dice_6: 1.263  m1_loss_ce_7: 0.5202  m1_loss_mask_7: 0.154  m1_loss_dice_7: 1.257  m1_loss_ce_8: 0.5421  m1_loss_mask_8: 0.153  m1_loss_dice_8: 1.269  m2_loss_ce: 0.5568  m2_loss_mask: 0.1577  m2_loss_dice: 1.278  m2_loss_ce_0: 0.6804  m2_loss_mask_0: 0.1896  m2_loss_dice_0: 1.463  m2_loss_ce_1: 0.7016  m2_loss_mask_1: 0.1694  m2_loss_dice_1: 1.378  m2_loss_ce_2: 0.655  m2_loss_mask_2: 0.1581  m2_loss_dice_2: 1.33  m2_loss_ce_3: 0.6148  m2_loss_mask_3: 0.1586  m2_loss_dice_3: 1.284  m2_loss_ce_4: 0.5783  m2_loss_mask_4: 0.16  m2_loss_dice_4: 1.289  m2_loss_ce_5: 0.6013  m2_loss_mask_5: 0.1596  m2_loss_dice_5: 1.292  m2_loss_ce_6: 0.5777  m2_loss_mask_6: 0.1569  m2_loss_dice_6: 1.249  m2_loss_ce_7: 0.5726  m2_loss_mask_7: 0.1594  m2_loss_dice_7: 1.267  m2_loss_ce_8: 0.5528  m2_loss_mask_8: 0.1572  m2_loss_dice_8: 1.238  com_loss_ce: 1.797  com_loss_mask: 0.6924  com_loss_dice: 0.9732    time: 1.4502  last_time: 1.4197  data_time: 0.0434  last_data_time: 0.0458   lr: 0.0001  max_mem: 36231M
[08/20 12:54:36] d2.utils.events INFO:  eta: 0:08:12  iter: 659  total_loss: 46.37  m1_loss_ce: 0.5549  m1_loss_mask: 0.1558  m1_loss_dice: 1.3  m1_loss_ce_0: 0.6395  m1_loss_mask_0: 0.1859  m1_loss_dice_0: 1.465  m1_loss_ce_1: 0.7154  m1_loss_mask_1: 0.1691  m1_loss_dice_1: 1.435  m1_loss_ce_2: 0.6627  m1_loss_mask_2: 0.1599  m1_loss_dice_2: 1.363  m1_loss_ce_3: 0.5951  m1_loss_mask_3: 0.1613  m1_loss_dice_3: 1.316  m1_loss_ce_4: 0.5883  m1_loss_mask_4: 0.1619  m1_loss_dice_4: 1.317  m1_loss_ce_5: 0.5344  m1_loss_mask_5: 0.1595  m1_loss_dice_5: 1.343  m1_loss_ce_6: 0.5369  m1_loss_mask_6: 0.159  m1_loss_dice_6: 1.3  m1_loss_ce_7: 0.5198  m1_loss_mask_7: 0.1576  m1_loss_dice_7: 1.31  m1_loss_ce_8: 0.5648  m1_loss_mask_8: 0.1591  m1_loss_dice_8: 1.306  m2_loss_ce: 0.5486  m2_loss_mask: 0.1571  m2_loss_dice: 1.295  m2_loss_ce_0: 0.6486  m2_loss_mask_0: 0.187  m2_loss_dice_0: 1.536  m2_loss_ce_1: 0.6974  m2_loss_mask_1: 0.1661  m2_loss_dice_1: 1.495  m2_loss_ce_2: 0.6308  m2_loss_mask_2: 0.1556  m2_loss_dice_2: 1.416  m2_loss_ce_3: 0.5936  m2_loss_mask_3: 0.1547  m2_loss_dice_3: 1.353  m2_loss_ce_4: 0.5842  m2_loss_mask_4: 0.1576  m2_loss_dice_4: 1.362  m2_loss_ce_5: 0.5679  m2_loss_mask_5: 0.1575  m2_loss_dice_5: 1.367  m2_loss_ce_6: 0.566  m2_loss_mask_6: 0.1522  m2_loss_dice_6: 1.3  m2_loss_ce_7: 0.5271  m2_loss_mask_7: 0.155  m2_loss_dice_7: 1.325  m2_loss_ce_8: 0.5297  m2_loss_mask_8: 0.1535  m2_loss_dice_8: 1.329  com_loss_ce: 1.805  com_loss_mask: 0.6924  com_loss_dice: 0.9718    time: 1.4500  last_time: 1.4270  data_time: 0.0405  last_data_time: 0.0365   lr: 0.0001  max_mem: 36231M
[08/20 12:55:05] d2.utils.events INFO:  eta: 0:07:43  iter: 679  total_loss: 46.25  m1_loss_ce: 0.5521  m1_loss_mask: 0.162  m1_loss_dice: 1.326  m1_loss_ce_0: 0.6348  m1_loss_mask_0: 0.1857  m1_loss_dice_0: 1.547  m1_loss_ce_1: 0.618  m1_loss_mask_1: 0.1755  m1_loss_dice_1: 1.446  m1_loss_ce_2: 0.6126  m1_loss_mask_2: 0.1655  m1_loss_dice_2: 1.413  m1_loss_ce_3: 0.5411  m1_loss_mask_3: 0.164  m1_loss_dice_3: 1.365  m1_loss_ce_4: 0.5436  m1_loss_mask_4: 0.1627  m1_loss_dice_4: 1.327  m1_loss_ce_5: 0.5155  m1_loss_mask_5: 0.1612  m1_loss_dice_5: 1.332  m1_loss_ce_6: 0.4918  m1_loss_mask_6: 0.1628  m1_loss_dice_6: 1.293  m1_loss_ce_7: 0.4931  m1_loss_mask_7: 0.1609  m1_loss_dice_7: 1.338  m1_loss_ce_8: 0.5128  m1_loss_mask_8: 0.1613  m1_loss_dice_8: 1.337  m2_loss_ce: 0.5275  m2_loss_mask: 0.1603  m2_loss_dice: 1.259  m2_loss_ce_0: 0.6858  m2_loss_mask_0: 0.1944  m2_loss_dice_0: 1.563  m2_loss_ce_1: 0.6884  m2_loss_mask_1: 0.1766  m2_loss_dice_1: 1.462  m2_loss_ce_2: 0.633  m2_loss_mask_2: 0.1677  m2_loss_dice_2: 1.394  m2_loss_ce_3: 0.59  m2_loss_mask_3: 0.1648  m2_loss_dice_3: 1.356  m2_loss_ce_4: 0.5543  m2_loss_mask_4: 0.1652  m2_loss_dice_4: 1.319  m2_loss_ce_5: 0.5741  m2_loss_mask_5: 0.1608  m2_loss_dice_5: 1.355  m2_loss_ce_6: 0.5727  m2_loss_mask_6: 0.1607  m2_loss_dice_6: 1.314  m2_loss_ce_7: 0.536  m2_loss_mask_7: 0.1605  m2_loss_dice_7: 1.315  m2_loss_ce_8: 0.5472  m2_loss_mask_8: 0.1604  m2_loss_dice_8: 1.319  com_loss_ce: 1.804  com_loss_mask: 0.6924  com_loss_dice: 0.9729    time: 1.4501  last_time: 1.5403  data_time: 0.0402  last_data_time: 0.0357   lr: 0.0001  max_mem: 36231M
[08/20 12:55:35] d2.utils.events INFO:  eta: 0:07:14  iter: 699  total_loss: 43.74  m1_loss_ce: 0.5551  m1_loss_mask: 0.1727  m1_loss_dice: 1.191  m1_loss_ce_0: 0.6734  m1_loss_mask_0: 0.1899  m1_loss_dice_0: 1.403  m1_loss_ce_1: 0.7134  m1_loss_mask_1: 0.1735  m1_loss_dice_1: 1.291  m1_loss_ce_2: 0.6503  m1_loss_mask_2: 0.1734  m1_loss_dice_2: 1.265  m1_loss_ce_3: 0.6054  m1_loss_mask_3: 0.1753  m1_loss_dice_3: 1.244  m1_loss_ce_4: 0.5557  m1_loss_mask_4: 0.1723  m1_loss_dice_4: 1.225  m1_loss_ce_5: 0.5542  m1_loss_mask_5: 0.1646  m1_loss_dice_5: 1.234  m1_loss_ce_6: 0.5393  m1_loss_mask_6: 0.1734  m1_loss_dice_6: 1.216  m1_loss_ce_7: 0.5427  m1_loss_mask_7: 0.1709  m1_loss_dice_7: 1.202  m1_loss_ce_8: 0.5281  m1_loss_mask_8: 0.173  m1_loss_dice_8: 1.197  m2_loss_ce: 0.53  m2_loss_mask: 0.1694  m2_loss_dice: 1.213  m2_loss_ce_0: 0.6265  m2_loss_mask_0: 0.1963  m2_loss_dice_0: 1.397  m2_loss_ce_1: 0.6917  m2_loss_mask_1: 0.1805  m2_loss_dice_1: 1.347  m2_loss_ce_2: 0.6223  m2_loss_mask_2: 0.1712  m2_loss_dice_2: 1.283  m2_loss_ce_3: 0.5685  m2_loss_mask_3: 0.1644  m2_loss_dice_3: 1.228  m2_loss_ce_4: 0.5466  m2_loss_mask_4: 0.1671  m2_loss_dice_4: 1.219  m2_loss_ce_5: 0.5502  m2_loss_mask_5: 0.1708  m2_loss_dice_5: 1.228  m2_loss_ce_6: 0.5518  m2_loss_mask_6: 0.1693  m2_loss_dice_6: 1.205  m2_loss_ce_7: 0.5277  m2_loss_mask_7: 0.1675  m2_loss_dice_7: 1.198  m2_loss_ce_8: 0.5198  m2_loss_mask_8: 0.1684  m2_loss_dice_8: 1.18  com_loss_ce: 1.794  com_loss_mask: 0.6924  com_loss_dice: 0.97    time: 1.4503  last_time: 1.4031  data_time: 0.0392  last_data_time: 0.0365   lr: 0.0001  max_mem: 36231M
[08/20 12:56:04] d2.utils.events INFO:  eta: 0:06:45  iter: 719  total_loss: 43.56  m1_loss_ce: 0.5439  m1_loss_mask: 0.1643  m1_loss_dice: 1.199  m1_loss_ce_0: 0.6339  m1_loss_mask_0: 0.1889  m1_loss_dice_0: 1.375  m1_loss_ce_1: 0.7124  m1_loss_mask_1: 0.1836  m1_loss_dice_1: 1.286  m1_loss_ce_2: 0.6616  m1_loss_mask_2: 0.168  m1_loss_dice_2: 1.278  m1_loss_ce_3: 0.591  m1_loss_mask_3: 0.1675  m1_loss_dice_3: 1.221  m1_loss_ce_4: 0.5459  m1_loss_mask_4: 0.165  m1_loss_dice_4: 1.186  m1_loss_ce_5: 0.5606  m1_loss_mask_5: 0.166  m1_loss_dice_5: 1.214  m1_loss_ce_6: 0.551  m1_loss_mask_6: 0.1659  m1_loss_dice_6: 1.225  m1_loss_ce_7: 0.5543  m1_loss_mask_7: 0.1652  m1_loss_dice_7: 1.189  m1_loss_ce_8: 0.545  m1_loss_mask_8: 0.1645  m1_loss_dice_8: 1.215  m2_loss_ce: 0.567  m2_loss_mask: 0.1657  m2_loss_dice: 1.216  m2_loss_ce_0: 0.6636  m2_loss_mask_0: 0.1942  m2_loss_dice_0: 1.442  m2_loss_ce_1: 0.7017  m2_loss_mask_1: 0.1762  m2_loss_dice_1: 1.302  m2_loss_ce_2: 0.65  m2_loss_mask_2: 0.1682  m2_loss_dice_2: 1.287  m2_loss_ce_3: 0.5821  m2_loss_mask_3: 0.1644  m2_loss_dice_3: 1.256  m2_loss_ce_4: 0.5927  m2_loss_mask_4: 0.1649  m2_loss_dice_4: 1.207  m2_loss_ce_5: 0.559  m2_loss_mask_5: 0.1677  m2_loss_dice_5: 1.206  m2_loss_ce_6: 0.5536  m2_loss_mask_6: 0.1665  m2_loss_dice_6: 1.22  m2_loss_ce_7: 0.549  m2_loss_mask_7: 0.1651  m2_loss_dice_7: 1.179  m2_loss_ce_8: 0.5381  m2_loss_mask_8: 0.164  m2_loss_dice_8: 1.217  com_loss_ce: 1.768  com_loss_mask: 0.6924  com_loss_dice: 0.9691    time: 1.4500  last_time: 1.4010  data_time: 0.0382  last_data_time: 0.0334   lr: 0.0001  max_mem: 36231M
[08/20 12:56:33] d2.utils.events INFO:  eta: 0:06:16  iter: 739  total_loss: 42.08  m1_loss_ce: 0.5193  m1_loss_mask: 0.1775  m1_loss_dice: 1.145  m1_loss_ce_0: 0.6366  m1_loss_mask_0: 0.1954  m1_loss_dice_0: 1.325  m1_loss_ce_1: 0.6889  m1_loss_mask_1: 0.1811  m1_loss_dice_1: 1.245  m1_loss_ce_2: 0.6318  m1_loss_mask_2: 0.179  m1_loss_dice_2: 1.214  m1_loss_ce_3: 0.5819  m1_loss_mask_3: 0.178  m1_loss_dice_3: 1.166  m1_loss_ce_4: 0.5412  m1_loss_mask_4: 0.1758  m1_loss_dice_4: 1.159  m1_loss_ce_5: 0.5392  m1_loss_mask_5: 0.1767  m1_loss_dice_5: 1.144  m1_loss_ce_6: 0.5298  m1_loss_mask_6: 0.1777  m1_loss_dice_6: 1.176  m1_loss_ce_7: 0.5457  m1_loss_mask_7: 0.1772  m1_loss_dice_7: 1.156  m1_loss_ce_8: 0.518  m1_loss_mask_8: 0.1788  m1_loss_dice_8: 1.154  m2_loss_ce: 0.5221  m2_loss_mask: 0.1751  m2_loss_dice: 1.156  m2_loss_ce_0: 0.6242  m2_loss_mask_0: 0.2018  m2_loss_dice_0: 1.405  m2_loss_ce_1: 0.6658  m2_loss_mask_1: 0.1815  m2_loss_dice_1: 1.326  m2_loss_ce_2: 0.5994  m2_loss_mask_2: 0.1794  m2_loss_dice_2: 1.214  m2_loss_ce_3: 0.5409  m2_loss_mask_3: 0.1788  m2_loss_dice_3: 1.168  m2_loss_ce_4: 0.5372  m2_loss_mask_4: 0.1758  m2_loss_dice_4: 1.171  m2_loss_ce_5: 0.5384  m2_loss_mask_5: 0.1744  m2_loss_dice_5: 1.212  m2_loss_ce_6: 0.5263  m2_loss_mask_6: 0.1743  m2_loss_dice_6: 1.148  m2_loss_ce_7: 0.5237  m2_loss_mask_7: 0.1729  m2_loss_dice_7: 1.159  m2_loss_ce_8: 0.5343  m2_loss_mask_8: 0.1759  m2_loss_dice_8: 1.158  com_loss_ce: 1.782  com_loss_mask: 0.6924  com_loss_dice: 0.9697    time: 1.4501  last_time: 1.5251  data_time: 0.0366  last_data_time: 0.0348   lr: 0.0001  max_mem: 36231M
[08/20 12:57:02] d2.utils.events INFO:  eta: 0:05:47  iter: 759  total_loss: 45.25  m1_loss_ce: 0.5288  m1_loss_mask: 0.155  m1_loss_dice: 1.227  m1_loss_ce_0: 0.6322  m1_loss_mask_0: 0.1821  m1_loss_dice_0: 1.429  m1_loss_ce_1: 0.6816  m1_loss_mask_1: 0.1698  m1_loss_dice_1: 1.373  m1_loss_ce_2: 0.6425  m1_loss_mask_2: 0.1587  m1_loss_dice_2: 1.335  m1_loss_ce_3: 0.5722  m1_loss_mask_3: 0.1574  m1_loss_dice_3: 1.233  m1_loss_ce_4: 0.5567  m1_loss_mask_4: 0.1546  m1_loss_dice_4: 1.254  m1_loss_ce_5: 0.5435  m1_loss_mask_5: 0.1547  m1_loss_dice_5: 1.255  m1_loss_ce_6: 0.511  m1_loss_mask_6: 0.1592  m1_loss_dice_6: 1.22  m1_loss_ce_7: 0.5113  m1_loss_mask_7: 0.1544  m1_loss_dice_7: 1.202  m1_loss_ce_8: 0.5078  m1_loss_mask_8: 0.1543  m1_loss_dice_8: 1.233  m2_loss_ce: 0.5583  m2_loss_mask: 0.1602  m2_loss_dice: 1.251  m2_loss_ce_0: 0.6615  m2_loss_mask_0: 0.1954  m2_loss_dice_0: 1.568  m2_loss_ce_1: 0.7071  m2_loss_mask_1: 0.178  m2_loss_dice_1: 1.434  m2_loss_ce_2: 0.6499  m2_loss_mask_2: 0.1664  m2_loss_dice_2: 1.332  m2_loss_ce_3: 0.63  m2_loss_mask_3: 0.165  m2_loss_dice_3: 1.289  m2_loss_ce_4: 0.5697  m2_loss_mask_4: 0.1641  m2_loss_dice_4: 1.297  m2_loss_ce_5: 0.5648  m2_loss_mask_5: 0.1643  m2_loss_dice_5: 1.28  m2_loss_ce_6: 0.5568  m2_loss_mask_6: 0.161  m2_loss_dice_6: 1.254  m2_loss_ce_7: 0.5716  m2_loss_mask_7: 0.1599  m2_loss_dice_7: 1.306  m2_loss_ce_8: 0.521  m2_loss_mask_8: 0.1609  m2_loss_dice_8: 1.285  com_loss_ce: 1.774  com_loss_mask: 0.6924  com_loss_dice: 0.9707    time: 1.4503  last_time: 1.4501  data_time: 0.0396  last_data_time: 0.0392   lr: 0.0001  max_mem: 36231M
[08/20 12:57:32] d2.utils.events INFO:  eta: 0:05:18  iter: 779  total_loss: 43.77  m1_loss_ce: 0.5617  m1_loss_mask: 0.1612  m1_loss_dice: 1.201  m1_loss_ce_0: 0.6221  m1_loss_mask_0: 0.1845  m1_loss_dice_0: 1.362  m1_loss_ce_1: 0.638  m1_loss_mask_1: 0.1686  m1_loss_dice_1: 1.305  m1_loss_ce_2: 0.6039  m1_loss_mask_2: 0.1691  m1_loss_dice_2: 1.246  m1_loss_ce_3: 0.5835  m1_loss_mask_3: 0.1684  m1_loss_dice_3: 1.233  m1_loss_ce_4: 0.5051  m1_loss_mask_4: 0.1673  m1_loss_dice_4: 1.213  m1_loss_ce_5: 0.506  m1_loss_mask_5: 0.1658  m1_loss_dice_5: 1.206  m1_loss_ce_6: 0.527  m1_loss_mask_6: 0.167  m1_loss_dice_6: 1.191  m1_loss_ce_7: 0.5434  m1_loss_mask_7: 0.1656  m1_loss_dice_7: 1.189  m1_loss_ce_8: 0.5447  m1_loss_mask_8: 0.164  m1_loss_dice_8: 1.176  m2_loss_ce: 0.5294  m2_loss_mask: 0.1681  m2_loss_dice: 1.203  m2_loss_ce_0: 0.6688  m2_loss_mask_0: 0.1959  m2_loss_dice_0: 1.442  m2_loss_ce_1: 0.7062  m2_loss_mask_1: 0.1833  m2_loss_dice_1: 1.363  m2_loss_ce_2: 0.6219  m2_loss_mask_2: 0.1787  m2_loss_dice_2: 1.266  m2_loss_ce_3: 0.5503  m2_loss_mask_3: 0.1727  m2_loss_dice_3: 1.234  m2_loss_ce_4: 0.5404  m2_loss_mask_4: 0.1718  m2_loss_dice_4: 1.209  m2_loss_ce_5: 0.5444  m2_loss_mask_5: 0.1686  m2_loss_dice_5: 1.197  m2_loss_ce_6: 0.5281  m2_loss_mask_6: 0.1666  m2_loss_dice_6: 1.213  m2_loss_ce_7: 0.5311  m2_loss_mask_7: 0.1699  m2_loss_dice_7: 1.197  m2_loss_ce_8: 0.5126  m2_loss_mask_8: 0.1699  m2_loss_dice_8: 1.212  com_loss_ce: 1.783  com_loss_mask: 0.6924  com_loss_dice: 0.9697    time: 1.4507  last_time: 1.4491  data_time: 0.0389  last_data_time: 0.0340   lr: 0.0001  max_mem: 36231M
[08/20 12:58:01] d2.utils.events INFO:  eta: 0:04:49  iter: 799  total_loss: 44.98  m1_loss_ce: 0.5799  m1_loss_mask: 0.1676  m1_loss_dice: 1.261  m1_loss_ce_0: 0.6533  m1_loss_mask_0: 0.1898  m1_loss_dice_0: 1.461  m1_loss_ce_1: 0.6996  m1_loss_mask_1: 0.1802  m1_loss_dice_1: 1.422  m1_loss_ce_2: 0.6682  m1_loss_mask_2: 0.1731  m1_loss_dice_2: 1.31  m1_loss_ce_3: 0.5993  m1_loss_mask_3: 0.1738  m1_loss_dice_3: 1.27  m1_loss_ce_4: 0.5668  m1_loss_mask_4: 0.1707  m1_loss_dice_4: 1.291  m1_loss_ce_5: 0.5305  m1_loss_mask_5: 0.169  m1_loss_dice_5: 1.272  m1_loss_ce_6: 0.5795  m1_loss_mask_6: 0.1706  m1_loss_dice_6: 1.287  m1_loss_ce_7: 0.5515  m1_loss_mask_7: 0.17  m1_loss_dice_7: 1.287  m1_loss_ce_8: 0.5489  m1_loss_mask_8: 0.1673  m1_loss_dice_8: 1.234  m2_loss_ce: 0.5466  m2_loss_mask: 0.1745  m2_loss_dice: 1.281  m2_loss_ce_0: 0.6777  m2_loss_mask_0: 0.2016  m2_loss_dice_0: 1.469  m2_loss_ce_1: 0.7482  m2_loss_mask_1: 0.1874  m2_loss_dice_1: 1.394  m2_loss_ce_2: 0.6889  m2_loss_mask_2: 0.1782  m2_loss_dice_2: 1.35  m2_loss_ce_3: 0.6366  m2_loss_mask_3: 0.1772  m2_loss_dice_3: 1.295  m2_loss_ce_4: 0.5993  m2_loss_mask_4: 0.1772  m2_loss_dice_4: 1.286  m2_loss_ce_5: 0.5583  m2_loss_mask_5: 0.1746  m2_loss_dice_5: 1.31  m2_loss_ce_6: 0.5614  m2_loss_mask_6: 0.1771  m2_loss_dice_6: 1.239  m2_loss_ce_7: 0.5503  m2_loss_mask_7: 0.1743  m2_loss_dice_7: 1.261  m2_loss_ce_8: 0.5495  m2_loss_mask_8: 0.1749  m2_loss_dice_8: 1.291  com_loss_ce: 1.799  com_loss_mask: 0.6924  com_loss_dice: 0.9703    time: 1.4507  last_time: 1.3516  data_time: 0.0369  last_data_time: 0.0424   lr: 0.0001  max_mem: 36231M
[08/20 12:58:30] d2.utils.events INFO:  eta: 0:04:20  iter: 819  total_loss: 45.22  m1_loss_ce: 0.6077  m1_loss_mask: 0.165  m1_loss_dice: 1.192  m1_loss_ce_0: 0.6785  m1_loss_mask_0: 0.1902  m1_loss_dice_0: 1.474  m1_loss_ce_1: 0.7173  m1_loss_mask_1: 0.1812  m1_loss_dice_1: 1.382  m1_loss_ce_2: 0.6611  m1_loss_mask_2: 0.173  m1_loss_dice_2: 1.291  m1_loss_ce_3: 0.612  m1_loss_mask_3: 0.1708  m1_loss_dice_3: 1.252  m1_loss_ce_4: 0.5845  m1_loss_mask_4: 0.1701  m1_loss_dice_4: 1.251  m1_loss_ce_5: 0.6072  m1_loss_mask_5: 0.1678  m1_loss_dice_5: 1.278  m1_loss_ce_6: 0.5813  m1_loss_mask_6: 0.1668  m1_loss_dice_6: 1.27  m1_loss_ce_7: 0.5934  m1_loss_mask_7: 0.1682  m1_loss_dice_7: 1.255  m1_loss_ce_8: 0.5885  m1_loss_mask_8: 0.166  m1_loss_dice_8: 1.229  m2_loss_ce: 0.548  m2_loss_mask: 0.1762  m2_loss_dice: 1.233  m2_loss_ce_0: 0.6564  m2_loss_mask_0: 0.1935  m2_loss_dice_0: 1.539  m2_loss_ce_1: 0.7248  m2_loss_mask_1: 0.1797  m2_loss_dice_1: 1.422  m2_loss_ce_2: 0.697  m2_loss_mask_2: 0.1803  m2_loss_dice_2: 1.364  m2_loss_ce_3: 0.6319  m2_loss_mask_3: 0.1759  m2_loss_dice_3: 1.257  m2_loss_ce_4: 0.6243  m2_loss_mask_4: 0.1807  m2_loss_dice_4: 1.273  m2_loss_ce_5: 0.5968  m2_loss_mask_5: 0.1802  m2_loss_dice_5: 1.3  m2_loss_ce_6: 0.5888  m2_loss_mask_6: 0.1761  m2_loss_dice_6: 1.26  m2_loss_ce_7: 0.6008  m2_loss_mask_7: 0.1767  m2_loss_dice_7: 1.245  m2_loss_ce_8: 0.5777  m2_loss_mask_8: 0.175  m2_loss_dice_8: 1.254  com_loss_ce: 1.801  com_loss_mask: 0.6925  com_loss_dice: 0.9725    time: 1.4510  last_time: 1.5124  data_time: 0.0383  last_data_time: 0.0420   lr: 0.0001  max_mem: 36231M
[08/20 12:59:00] d2.utils.events INFO:  eta: 0:03:51  iter: 839  total_loss: 45.07  m1_loss_ce: 0.541  m1_loss_mask: 0.1585  m1_loss_dice: 1.212  m1_loss_ce_0: 0.6215  m1_loss_mask_0: 0.1851  m1_loss_dice_0: 1.473  m1_loss_ce_1: 0.698  m1_loss_mask_1: 0.1792  m1_loss_dice_1: 1.377  m1_loss_ce_2: 0.637  m1_loss_mask_2: 0.1645  m1_loss_dice_2: 1.319  m1_loss_ce_3: 0.5554  m1_loss_mask_3: 0.1644  m1_loss_dice_3: 1.259  m1_loss_ce_4: 0.5277  m1_loss_mask_4: 0.162  m1_loss_dice_4: 1.233  m1_loss_ce_5: 0.5046  m1_loss_mask_5: 0.1625  m1_loss_dice_5: 1.256  m1_loss_ce_6: 0.5234  m1_loss_mask_6: 0.1619  m1_loss_dice_6: 1.25  m1_loss_ce_7: 0.4978  m1_loss_mask_7: 0.1624  m1_loss_dice_7: 1.223  m1_loss_ce_8: 0.4949  m1_loss_mask_8: 0.1575  m1_loss_dice_8: 1.237  m2_loss_ce: 0.5347  m2_loss_mask: 0.1611  m2_loss_dice: 1.257  m2_loss_ce_0: 0.6127  m2_loss_mask_0: 0.1983  m2_loss_dice_0: 1.508  m2_loss_ce_1: 0.6802  m2_loss_mask_1: 0.1736  m2_loss_dice_1: 1.454  m2_loss_ce_2: 0.6529  m2_loss_mask_2: 0.1687  m2_loss_dice_2: 1.339  m2_loss_ce_3: 0.5664  m2_loss_mask_3: 0.1647  m2_loss_dice_3: 1.298  m2_loss_ce_4: 0.5595  m2_loss_mask_4: 0.1636  m2_loss_dice_4: 1.292  m2_loss_ce_5: 0.5831  m2_loss_mask_5: 0.1618  m2_loss_dice_5: 1.287  m2_loss_ce_6: 0.5563  m2_loss_mask_6: 0.1633  m2_loss_dice_6: 1.298  m2_loss_ce_7: 0.5134  m2_loss_mask_7: 0.1641  m2_loss_dice_7: 1.276  m2_loss_ce_8: 0.5491  m2_loss_mask_8: 0.1608  m2_loss_dice_8: 1.285  com_loss_ce: 1.789  com_loss_mask: 0.6924  com_loss_dice: 0.9709    time: 1.4515  last_time: 1.5423  data_time: 0.0405  last_data_time: 0.0451   lr: 0.0001  max_mem: 36231M
[08/20 12:59:29] d2.utils.events INFO:  eta: 0:03:22  iter: 859  total_loss: 43.27  m1_loss_ce: 0.513  m1_loss_mask: 0.1531  m1_loss_dice: 1.176  m1_loss_ce_0: 0.6356  m1_loss_mask_0: 0.1782  m1_loss_dice_0: 1.395  m1_loss_ce_1: 0.6335  m1_loss_mask_1: 0.1612  m1_loss_dice_1: 1.338  m1_loss_ce_2: 0.5995  m1_loss_mask_2: 0.1575  m1_loss_dice_2: 1.24  m1_loss_ce_3: 0.5231  m1_loss_mask_3: 0.159  m1_loss_dice_3: 1.224  m1_loss_ce_4: 0.5129  m1_loss_mask_4: 0.1551  m1_loss_dice_4: 1.214  m1_loss_ce_5: 0.4923  m1_loss_mask_5: 0.155  m1_loss_dice_5: 1.216  m1_loss_ce_6: 0.5088  m1_loss_mask_6: 0.1558  m1_loss_dice_6: 1.236  m1_loss_ce_7: 0.4928  m1_loss_mask_7: 0.1552  m1_loss_dice_7: 1.197  m1_loss_ce_8: 0.5255  m1_loss_mask_8: 0.1535  m1_loss_dice_8: 1.167  m2_loss_ce: 0.525  m2_loss_mask: 0.1543  m2_loss_dice: 1.227  m2_loss_ce_0: 0.6343  m2_loss_mask_0: 0.1786  m2_loss_dice_0: 1.436  m2_loss_ce_1: 0.6884  m2_loss_mask_1: 0.1658  m2_loss_dice_1: 1.391  m2_loss_ce_2: 0.6344  m2_loss_mask_2: 0.1537  m2_loss_dice_2: 1.291  m2_loss_ce_3: 0.5796  m2_loss_mask_3: 0.1531  m2_loss_dice_3: 1.242  m2_loss_ce_4: 0.5406  m2_loss_mask_4: 0.1566  m2_loss_dice_4: 1.239  m2_loss_ce_5: 0.5674  m2_loss_mask_5: 0.1531  m2_loss_dice_5: 1.247  m2_loss_ce_6: 0.5325  m2_loss_mask_6: 0.1519  m2_loss_dice_6: 1.221  m2_loss_ce_7: 0.5187  m2_loss_mask_7: 0.1537  m2_loss_dice_7: 1.249  m2_loss_ce_8: 0.5249  m2_loss_mask_8: 0.1537  m2_loss_dice_8: 1.23  com_loss_ce: 1.79  com_loss_mask: 0.6924  com_loss_dice: 0.9711    time: 1.4517  last_time: 1.4639  data_time: 0.0395  last_data_time: 0.0368   lr: 0.0001  max_mem: 36231M
[08/20 12:59:59] d2.utils.events INFO:  eta: 0:02:53  iter: 879  total_loss: 44.69  m1_loss_ce: 0.5685  m1_loss_mask: 0.1627  m1_loss_dice: 1.254  m1_loss_ce_0: 0.5776  m1_loss_mask_0: 0.1852  m1_loss_dice_0: 1.433  m1_loss_ce_1: 0.6417  m1_loss_mask_1: 0.1727  m1_loss_dice_1: 1.302  m1_loss_ce_2: 0.6405  m1_loss_mask_2: 0.1664  m1_loss_dice_2: 1.298  m1_loss_ce_3: 0.5553  m1_loss_mask_3: 0.1661  m1_loss_dice_3: 1.264  m1_loss_ce_4: 0.5565  m1_loss_mask_4: 0.163  m1_loss_dice_4: 1.274  m1_loss_ce_5: 0.5384  m1_loss_mask_5: 0.1639  m1_loss_dice_5: 1.248  m1_loss_ce_6: 0.54  m1_loss_mask_6: 0.1628  m1_loss_dice_6: 1.196  m1_loss_ce_7: 0.5084  m1_loss_mask_7: 0.1629  m1_loss_dice_7: 1.19  m1_loss_ce_8: 0.5204  m1_loss_mask_8: 0.1623  m1_loss_dice_8: 1.214  m2_loss_ce: 0.5537  m2_loss_mask: 0.1611  m2_loss_dice: 1.279  m2_loss_ce_0: 0.6227  m2_loss_mask_0: 0.1922  m2_loss_dice_0: 1.474  m2_loss_ce_1: 0.7156  m2_loss_mask_1: 0.175  m2_loss_dice_1: 1.383  m2_loss_ce_2: 0.6642  m2_loss_mask_2: 0.1679  m2_loss_dice_2: 1.337  m2_loss_ce_3: 0.6041  m2_loss_mask_3: 0.1666  m2_loss_dice_3: 1.278  m2_loss_ce_4: 0.5661  m2_loss_mask_4: 0.1676  m2_loss_dice_4: 1.274  m2_loss_ce_5: 0.5412  m2_loss_mask_5: 0.1678  m2_loss_dice_5: 1.279  m2_loss_ce_6: 0.5684  m2_loss_mask_6: 0.1648  m2_loss_dice_6: 1.275  m2_loss_ce_7: 0.5753  m2_loss_mask_7: 0.1652  m2_loss_dice_7: 1.256  m2_loss_ce_8: 0.5509  m2_loss_mask_8: 0.163  m2_loss_dice_8: 1.252  com_loss_ce: 1.788  com_loss_mask: 0.6924  com_loss_dice: 0.9722    time: 1.4522  last_time: 1.4259  data_time: 0.0395  last_data_time: 0.0473   lr: 0.0001  max_mem: 36231M
[08/20 13:00:28] d2.utils.events INFO:  eta: 0:02:24  iter: 899  total_loss: 42.46  m1_loss_ce: 0.513  m1_loss_mask: 0.1675  m1_loss_dice: 1.208  m1_loss_ce_0: 0.5683  m1_loss_mask_0: 0.1931  m1_loss_dice_0: 1.395  m1_loss_ce_1: 0.6087  m1_loss_mask_1: 0.1815  m1_loss_dice_1: 1.347  m1_loss_ce_2: 0.5918  m1_loss_mask_2: 0.1742  m1_loss_dice_2: 1.263  m1_loss_ce_3: 0.4899  m1_loss_mask_3: 0.1777  m1_loss_dice_3: 1.209  m1_loss_ce_4: 0.5003  m1_loss_mask_4: 0.1765  m1_loss_dice_4: 1.223  m1_loss_ce_5: 0.4918  m1_loss_mask_5: 0.1722  m1_loss_dice_5: 1.208  m1_loss_ce_6: 0.4911  m1_loss_mask_6: 0.1734  m1_loss_dice_6: 1.181  m1_loss_ce_7: 0.4479  m1_loss_mask_7: 0.1725  m1_loss_dice_7: 1.208  m1_loss_ce_8: 0.4817  m1_loss_mask_8: 0.1695  m1_loss_dice_8: 1.2  m2_loss_ce: 0.5155  m2_loss_mask: 0.1765  m2_loss_dice: 1.223  m2_loss_ce_0: 0.5858  m2_loss_mask_0: 0.2068  m2_loss_dice_0: 1.424  m2_loss_ce_1: 0.6719  m2_loss_mask_1: 0.1881  m2_loss_dice_1: 1.345  m2_loss_ce_2: 0.612  m2_loss_mask_2: 0.1804  m2_loss_dice_2: 1.286  m2_loss_ce_3: 0.5812  m2_loss_mask_3: 0.1811  m2_loss_dice_3: 1.225  m2_loss_ce_4: 0.5481  m2_loss_mask_4: 0.18  m2_loss_dice_4: 1.235  m2_loss_ce_5: 0.5076  m2_loss_mask_5: 0.1784  m2_loss_dice_5: 1.225  m2_loss_ce_6: 0.5179  m2_loss_mask_6: 0.1808  m2_loss_dice_6: 1.236  m2_loss_ce_7: 0.4831  m2_loss_mask_7: 0.1763  m2_loss_dice_7: 1.211  m2_loss_ce_8: 0.5032  m2_loss_mask_8: 0.1767  m2_loss_dice_8: 1.236  com_loss_ce: 1.771  com_loss_mask: 0.6924  com_loss_dice: 0.9695    time: 1.4519  last_time: 1.4298  data_time: 0.0386  last_data_time: 0.0357   lr: 0.0001  max_mem: 36231M
[08/20 13:00:57] d2.utils.events INFO:  eta: 0:01:55  iter: 919  total_loss: 44.31  m1_loss_ce: 0.5558  m1_loss_mask: 0.1646  m1_loss_dice: 1.194  m1_loss_ce_0: 0.6707  m1_loss_mask_0: 0.1881  m1_loss_dice_0: 1.406  m1_loss_ce_1: 0.6434  m1_loss_mask_1: 0.1755  m1_loss_dice_1: 1.313  m1_loss_ce_2: 0.6533  m1_loss_mask_2: 0.1691  m1_loss_dice_2: 1.26  m1_loss_ce_3: 0.5828  m1_loss_mask_3: 0.1687  m1_loss_dice_3: 1.214  m1_loss_ce_4: 0.5504  m1_loss_mask_4: 0.1652  m1_loss_dice_4: 1.22  m1_loss_ce_5: 0.5409  m1_loss_mask_5: 0.1643  m1_loss_dice_5: 1.188  m1_loss_ce_6: 0.5268  m1_loss_mask_6: 0.1663  m1_loss_dice_6: 1.195  m1_loss_ce_7: 0.5565  m1_loss_mask_7: 0.1649  m1_loss_dice_7: 1.163  m1_loss_ce_8: 0.5531  m1_loss_mask_8: 0.165  m1_loss_dice_8: 1.203  m2_loss_ce: 0.566  m2_loss_mask: 0.1679  m2_loss_dice: 1.196  m2_loss_ce_0: 0.6663  m2_loss_mask_0: 0.1922  m2_loss_dice_0: 1.452  m2_loss_ce_1: 0.6797  m2_loss_mask_1: 0.1728  m2_loss_dice_1: 1.333  m2_loss_ce_2: 0.6636  m2_loss_mask_2: 0.1702  m2_loss_dice_2: 1.277  m2_loss_ce_3: 0.607  m2_loss_mask_3: 0.1694  m2_loss_dice_3: 1.245  m2_loss_ce_4: 0.5675  m2_loss_mask_4: 0.1707  m2_loss_dice_4: 1.243  m2_loss_ce_5: 0.5928  m2_loss_mask_5: 0.1716  m2_loss_dice_5: 1.222  m2_loss_ce_6: 0.5551  m2_loss_mask_6: 0.1677  m2_loss_dice_6: 1.196  m2_loss_ce_7: 0.5443  m2_loss_mask_7: 0.1669  m2_loss_dice_7: 1.199  m2_loss_ce_8: 0.5685  m2_loss_mask_8: 0.1656  m2_loss_dice_8: 1.201  com_loss_ce: 1.797  com_loss_mask: 0.6924  com_loss_dice: 0.9683    time: 1.4519  last_time: 1.4359  data_time: 0.0375  last_data_time: 0.0348   lr: 0.0001  max_mem: 36231M
[08/20 13:01:26] d2.utils.events INFO:  eta: 0:01:26  iter: 939  total_loss: 43.41  m1_loss_ce: 0.5248  m1_loss_mask: 0.1674  m1_loss_dice: 1.197  m1_loss_ce_0: 0.5973  m1_loss_mask_0: 0.2002  m1_loss_dice_0: 1.371  m1_loss_ce_1: 0.6667  m1_loss_mask_1: 0.181  m1_loss_dice_1: 1.348  m1_loss_ce_2: 0.5759  m1_loss_mask_2: 0.1723  m1_loss_dice_2: 1.265  m1_loss_ce_3: 0.5598  m1_loss_mask_3: 0.1722  m1_loss_dice_3: 1.204  m1_loss_ce_4: 0.5614  m1_loss_mask_4: 0.1675  m1_loss_dice_4: 1.216  m1_loss_ce_5: 0.5228  m1_loss_mask_5: 0.1671  m1_loss_dice_5: 1.22  m1_loss_ce_6: 0.5377  m1_loss_mask_6: 0.1681  m1_loss_dice_6: 1.179  m1_loss_ce_7: 0.5103  m1_loss_mask_7: 0.1669  m1_loss_dice_7: 1.156  m1_loss_ce_8: 0.5182  m1_loss_mask_8: 0.166  m1_loss_dice_8: 1.191  m2_loss_ce: 0.5328  m2_loss_mask: 0.1704  m2_loss_dice: 1.173  m2_loss_ce_0: 0.6348  m2_loss_mask_0: 0.1991  m2_loss_dice_0: 1.475  m2_loss_ce_1: 0.6639  m2_loss_mask_1: 0.1796  m2_loss_dice_1: 1.362  m2_loss_ce_2: 0.5973  m2_loss_mask_2: 0.1728  m2_loss_dice_2: 1.274  m2_loss_ce_3: 0.6025  m2_loss_mask_3: 0.1717  m2_loss_dice_3: 1.257  m2_loss_ce_4: 0.5806  m2_loss_mask_4: 0.1689  m2_loss_dice_4: 1.212  m2_loss_ce_5: 0.5449  m2_loss_mask_5: 0.1705  m2_loss_dice_5: 1.207  m2_loss_ce_6: 0.523  m2_loss_mask_6: 0.1698  m2_loss_dice_6: 1.219  m2_loss_ce_7: 0.5617  m2_loss_mask_7: 0.1703  m2_loss_dice_7: 1.222  m2_loss_ce_8: 0.5277  m2_loss_mask_8: 0.1705  m2_loss_dice_8: 1.222  com_loss_ce: 1.774  com_loss_mask: 0.6924  com_loss_dice: 0.9705    time: 1.4518  last_time: 1.4735  data_time: 0.0375  last_data_time: 0.0368   lr: 0.0001  max_mem: 36231M
[08/20 13:01:55] d2.utils.events INFO:  eta: 0:00:57  iter: 959  total_loss: 43.3  m1_loss_ce: 0.5106  m1_loss_mask: 0.1551  m1_loss_dice: 1.194  m1_loss_ce_0: 0.5737  m1_loss_mask_0: 0.1744  m1_loss_dice_0: 1.378  m1_loss_ce_1: 0.6301  m1_loss_mask_1: 0.1693  m1_loss_dice_1: 1.328  m1_loss_ce_2: 0.6109  m1_loss_mask_2: 0.1623  m1_loss_dice_2: 1.269  m1_loss_ce_3: 0.5217  m1_loss_mask_3: 0.1578  m1_loss_dice_3: 1.27  m1_loss_ce_4: 0.5008  m1_loss_mask_4: 0.1586  m1_loss_dice_4: 1.209  m1_loss_ce_5: 0.4734  m1_loss_mask_5: 0.1528  m1_loss_dice_5: 1.205  m1_loss_ce_6: 0.468  m1_loss_mask_6: 0.1521  m1_loss_dice_6: 1.25  m1_loss_ce_7: 0.4721  m1_loss_mask_7: 0.1519  m1_loss_dice_7: 1.235  m1_loss_ce_8: 0.4865  m1_loss_mask_8: 0.152  m1_loss_dice_8: 1.235  m2_loss_ce: 0.5017  m2_loss_mask: 0.1532  m2_loss_dice: 1.229  m2_loss_ce_0: 0.6013  m2_loss_mask_0: 0.1949  m2_loss_dice_0: 1.408  m2_loss_ce_1: 0.6468  m2_loss_mask_1: 0.1713  m2_loss_dice_1: 1.334  m2_loss_ce_2: 0.6084  m2_loss_mask_2: 0.1636  m2_loss_dice_2: 1.303  m2_loss_ce_3: 0.5596  m2_loss_mask_3: 0.1594  m2_loss_dice_3: 1.24  m2_loss_ce_4: 0.5212  m2_loss_mask_4: 0.1606  m2_loss_dice_4: 1.274  m2_loss_ce_5: 0.5088  m2_loss_mask_5: 0.1569  m2_loss_dice_5: 1.261  m2_loss_ce_6: 0.4905  m2_loss_mask_6: 0.1558  m2_loss_dice_6: 1.229  m2_loss_ce_7: 0.4935  m2_loss_mask_7: 0.1547  m2_loss_dice_7: 1.267  m2_loss_ce_8: 0.4896  m2_loss_mask_8: 0.1555  m2_loss_dice_8: 1.25  com_loss_ce: 1.793  com_loss_mask: 0.6924  com_loss_dice: 0.9682    time: 1.4514  last_time: 1.4107  data_time: 0.0381  last_data_time: 0.0394   lr: 0.0001  max_mem: 36231M
[08/20 13:02:23] d2.utils.events INFO:  eta: 0:00:28  iter: 979  total_loss: 43.88  m1_loss_ce: 0.5153  m1_loss_mask: 0.1608  m1_loss_dice: 1.227  m1_loss_ce_0: 0.6185  m1_loss_mask_0: 0.1787  m1_loss_dice_0: 1.464  m1_loss_ce_1: 0.7004  m1_loss_mask_1: 0.1682  m1_loss_dice_1: 1.365  m1_loss_ce_2: 0.6437  m1_loss_mask_2: 0.1665  m1_loss_dice_2: 1.31  m1_loss_ce_3: 0.5674  m1_loss_mask_3: 0.164  m1_loss_dice_3: 1.245  m1_loss_ce_4: 0.54  m1_loss_mask_4: 0.1632  m1_loss_dice_4: 1.25  m1_loss_ce_5: 0.5116  m1_loss_mask_5: 0.162  m1_loss_dice_5: 1.278  m1_loss_ce_6: 0.5027  m1_loss_mask_6: 0.1625  m1_loss_dice_6: 1.225  m1_loss_ce_7: 0.5035  m1_loss_mask_7: 0.1609  m1_loss_dice_7: 1.209  m1_loss_ce_8: 0.503  m1_loss_mask_8: 0.1612  m1_loss_dice_8: 1.222  m2_loss_ce: 0.5162  m2_loss_mask: 0.1584  m2_loss_dice: 1.234  m2_loss_ce_0: 0.6147  m2_loss_mask_0: 0.1853  m2_loss_dice_0: 1.474  m2_loss_ce_1: 0.6747  m2_loss_mask_1: 0.1689  m2_loss_dice_1: 1.354  m2_loss_ce_2: 0.6587  m2_loss_mask_2: 0.1603  m2_loss_dice_2: 1.312  m2_loss_ce_3: 0.5667  m2_loss_mask_3: 0.1599  m2_loss_dice_3: 1.264  m2_loss_ce_4: 0.5586  m2_loss_mask_4: 0.1617  m2_loss_dice_4: 1.259  m2_loss_ce_5: 0.5308  m2_loss_mask_5: 0.1601  m2_loss_dice_5: 1.266  m2_loss_ce_6: 0.534  m2_loss_mask_6: 0.1608  m2_loss_dice_6: 1.259  m2_loss_ce_7: 0.5359  m2_loss_mask_7: 0.1598  m2_loss_dice_7: 1.265  m2_loss_ce_8: 0.5145  m2_loss_mask_8: 0.1587  m2_loss_dice_8: 1.23  com_loss_ce: 1.798  com_loss_mask: 0.6924  com_loss_dice: 0.9722    time: 1.4505  last_time: 1.3741  data_time: 0.0374  last_data_time: 0.0322   lr: 0.0001  max_mem: 36231M
[08/20 13:02:52] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Combined/6_9_i_n_008_1000_2_softmax_entropy/model_final.pth
[08/20 13:02:56] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 41.7  m1_loss_ce: 0.4867  m1_loss_mask: 0.1521  m1_loss_dice: 1.188  m1_loss_ce_0: 0.5948  m1_loss_mask_0: 0.1804  m1_loss_dice_0: 1.364  m1_loss_ce_1: 0.675  m1_loss_mask_1: 0.1637  m1_loss_dice_1: 1.28  m1_loss_ce_2: 0.5791  m1_loss_mask_2: 0.1583  m1_loss_dice_2: 1.241  m1_loss_ce_3: 0.5267  m1_loss_mask_3: 0.1567  m1_loss_dice_3: 1.204  m1_loss_ce_4: 0.4831  m1_loss_mask_4: 0.1569  m1_loss_dice_4: 1.202  m1_loss_ce_5: 0.4678  m1_loss_mask_5: 0.1525  m1_loss_dice_5: 1.175  m1_loss_ce_6: 0.4843  m1_loss_mask_6: 0.1536  m1_loss_dice_6: 1.163  m1_loss_ce_7: 0.4696  m1_loss_mask_7: 0.1503  m1_loss_dice_7: 1.149  m1_loss_ce_8: 0.4929  m1_loss_mask_8: 0.1506  m1_loss_dice_8: 1.175  m2_loss_ce: 0.5091  m2_loss_mask: 0.1572  m2_loss_dice: 1.172  m2_loss_ce_0: 0.6048  m2_loss_mask_0: 0.1938  m2_loss_dice_0: 1.384  m2_loss_ce_1: 0.6516  m2_loss_mask_1: 0.1711  m2_loss_dice_1: 1.354  m2_loss_ce_2: 0.5961  m2_loss_mask_2: 0.1594  m2_loss_dice_2: 1.231  m2_loss_ce_3: 0.5379  m2_loss_mask_3: 0.1597  m2_loss_dice_3: 1.184  m2_loss_ce_4: 0.5217  m2_loss_mask_4: 0.1604  m2_loss_dice_4: 1.199  m2_loss_ce_5: 0.5231  m2_loss_mask_5: 0.1604  m2_loss_dice_5: 1.197  m2_loss_ce_6: 0.5235  m2_loss_mask_6: 0.1607  m2_loss_dice_6: 1.2  m2_loss_ce_7: 0.512  m2_loss_mask_7: 0.1575  m2_loss_dice_7: 1.168  m2_loss_ce_8: 0.5055  m2_loss_mask_8: 0.1581  m2_loss_dice_8: 1.197  com_loss_ce: 1.773  com_loss_mask: 0.6924  com_loss_dice: 0.9702    time: 1.4502  last_time: 1.3556  data_time: 0.0385  last_data_time: 0.0356   lr: 0.0001  max_mem: 36231M
[08/20 13:02:56] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:24:07 (1.4502 s / it)
[08/20 13:02:56] d2.engine.hooks INFO: Total training time: 0:24:17 (0:00:10 on hooks)
[08/20 13:02:56] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/20 13:02:56] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/20 13:02:56] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/20 13:02:56] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/20 13:02:56] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/20 13:04:26] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evaly8cvxd5s ...
[08/20 13:04:45] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 58.227 | 81.068 | 70.799 |      19       |
| Things | 49.962 | 80.587 | 62.014 |       8       |
| Stuff  | 64.238 | 81.418 | 77.188 |      11       |
[08/20 13:04:45] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.311 | 97.614 | 99.690 |     Stuff     |
| class_8  | 75.025 | 84.009 | 89.305 |     Stuff     |
| class_11 | 86.912 | 89.387 | 97.231 |     Stuff     |
| class_12 | 39.432 | 79.643 | 49.511 |     Stuff     |
| class_13 | 38.286 | 76.809 | 49.846 |     Stuff     |
| class_17 | 41.595 | 63.906 | 65.088 |     Stuff     |
| class_19 | 49.313 | 68.918 | 71.553 |     Stuff     |
| class_20 | 65.610 | 77.320 | 84.855 |     Stuff     |
| class_21 | 89.393 | 90.039 | 99.282 |     Stuff     |
| class_22 | 35.871 | 75.895 | 47.265 |     Stuff     |
| class_23 | 87.869 | 92.064 | 95.444 |     Stuff     |
| class_24 | 51.479 | 76.893 | 66.949 |    Things     |
| class_25 | 47.259 | 73.622 | 64.192 |    Things     |
| class_26 | 65.517 | 83.242 | 78.707 |    Things     |
| class_27 | 52.534 | 88.861 | 59.119 |    Things     |
| class_28 | 60.525 | 89.609 | 67.544 |    Things     |
| class_31 | 37.688 | 86.144 | 43.750 |    Things     |
| class_32 | 42.080 | 75.012 | 56.098 |    Things     |
| class_33 | 42.614 | 71.316 | 59.754 |    Things     |
[08/20 13:04:45] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/20 13:04:45] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/20 13:04:45] d2.evaluation.testing INFO: copypaste: 58.2271,81.0685,70.7991,49.9621,80.5873,62.0141,64.2380,81.4185,77.1882,97.3110,97.6139,99.6898,75.0250,84.0094,89.3054,86.9117,89.3870,97.2308,39.4322,79.6428,49.5114,38.2861,76.8085,49.8462,41.5947,63.9058,65.0875,49.3131,68.9180,71.5532,65.6097,77.3198,84.8550,89.3930,90.0395,99.2821,35.8715,75.8948,47.2648,87.8694,92.0637,95.4442,51.4791,76.8926,66.9493,47.2593,73.6216,64.1921,65.5170,83.2421,78.7066,52.5344,88.8613,59.1195,60.5253,89.6090,67.5439,37.6878,86.1436,43.7500,42.0801,75.0123,56.0976,42.6138,71.3157,59.7538
