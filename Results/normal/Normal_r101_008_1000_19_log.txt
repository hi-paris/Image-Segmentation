[08/29 13:58:38] detectron2 INFO: Rank of current process: 0. World size: 1
[08/29 13:58:39] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/29 13:58:39] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_exp_008_19.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/29 13:58:39] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_exp_008_19.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r101_000_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/29 13:58:39] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r101_000_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/29 13:58:39] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/r101_000_1000/config.yaml
[08/29 13:58:39] d2.utils.env INFO: Using a generated random seed 42646756
[08/29 13:58:44] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[08/29 13:58:44] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/29 13:58:44] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/29 13:58:44] d2.data.build INFO: Using training sampler TrainingSampler
[08/29 13:58:44] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/29 13:58:44] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/29 13:58:44] d2.data.common INFO: Serialized dataset takes 2.16 MiB
[08/29 13:58:44] d2.data.build INFO: Making batched data loader with batch_size=8
[08/29 13:58:44] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/29 13:58:44] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[08/29 13:58:44] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[08/29 13:58:46] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[08/29 13:58:46] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.10.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.11.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.12.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.13.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.14.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.15.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.16.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.17.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.18.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.19.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.20.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.21.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.22.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.6.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.7.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.8.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.9.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mcriterion.empty_weight[0m
[08/29 13:58:46] d2.engine.train_loop INFO: Starting training from iteration 0
[08/29 13:59:08] d2.utils.events INFO:  eta: 0:15:15  iter: 19  total_loss: 25.75  loss_ce: 0.5574  loss_mask: 0.6183  loss_dice: 1.41  loss_ce_0: 0.5581  loss_mask_0: 0.6624  loss_dice_0: 1.617  loss_ce_1: 0.6039  loss_mask_1: 0.6713  loss_dice_1: 1.532  loss_ce_2: 0.6218  loss_mask_2: 0.6625  loss_dice_2: 1.46  loss_ce_3: 0.6215  loss_mask_3: 0.6345  loss_dice_3: 1.468  loss_ce_4: 0.5764  loss_mask_4: 0.6269  loss_dice_4: 1.452  loss_ce_5: 0.5725  loss_mask_5: 0.6152  loss_dice_5: 1.467  loss_ce_6: 0.5637  loss_mask_6: 0.6152  loss_dice_6: 1.412  loss_ce_7: 0.597  loss_mask_7: 0.6195  loss_dice_7: 1.405  loss_ce_8: 0.5917  loss_mask_8: 0.6257  loss_dice_8: 1.426    time: 0.9455  last_time: 0.9409  data_time: 0.0712  last_data_time: 0.0415   lr: 0.0001  max_mem: 29890M
[08/29 13:59:27] d2.utils.events INFO:  eta: 0:14:52  iter: 39  total_loss: 21.97  loss_ce: 0.328  loss_mask: 0.5491  loss_dice: 1.263  loss_ce_0: 0.3739  loss_mask_0: 0.6224  loss_dice_0: 1.498  loss_ce_1: 0.4075  loss_mask_1: 0.5735  loss_dice_1: 1.394  loss_ce_2: 0.3848  loss_mask_2: 0.5645  loss_dice_2: 1.33  loss_ce_3: 0.3749  loss_mask_3: 0.5457  loss_dice_3: 1.298  loss_ce_4: 0.3582  loss_mask_4: 0.5428  loss_dice_4: 1.298  loss_ce_5: 0.3528  loss_mask_5: 0.544  loss_dice_5: 1.277  loss_ce_6: 0.3384  loss_mask_6: 0.5354  loss_dice_6: 1.274  loss_ce_7: 0.3186  loss_mask_7: 0.5393  loss_dice_7: 1.278  loss_ce_8: 0.3392  loss_mask_8: 0.5412  loss_dice_8: 1.273    time: 0.9372  last_time: 0.9258  data_time: 0.0374  last_data_time: 0.0305   lr: 0.0001  max_mem: 29890M
[08/29 13:59:46] d2.utils.events INFO:  eta: 0:14:33  iter: 59  total_loss: 18.89  loss_ce: 0.2093  loss_mask: 0.4907  loss_dice: 1.125  loss_ce_0: 0.2671  loss_mask_0: 0.5305  loss_dice_0: 1.324  loss_ce_1: 0.3088  loss_mask_1: 0.5226  loss_dice_1: 1.223  loss_ce_2: 0.2943  loss_mask_2: 0.501  loss_dice_2: 1.154  loss_ce_3: 0.2716  loss_mask_3: 0.49  loss_dice_3: 1.118  loss_ce_4: 0.2555  loss_mask_4: 0.5007  loss_dice_4: 1.106  loss_ce_5: 0.2369  loss_mask_5: 0.4998  loss_dice_5: 1.115  loss_ce_6: 0.2495  loss_mask_6: 0.5027  loss_dice_6: 1.096  loss_ce_7: 0.219  loss_mask_7: 0.5014  loss_dice_7: 1.111  loss_ce_8: 0.2309  loss_mask_8: 0.4886  loss_dice_8: 1.106    time: 0.9386  last_time: 0.9304  data_time: 0.0356  last_data_time: 0.0316   lr: 0.0001  max_mem: 29890M
[08/29 14:00:05] d2.utils.events INFO:  eta: 0:14:13  iter: 79  total_loss: 19.46  loss_ce: 0.2567  loss_mask: 0.4425  loss_dice: 1.16  loss_ce_0: 0.245  loss_mask_0: 0.5023  loss_dice_0: 1.387  loss_ce_1: 0.307  loss_mask_1: 0.4685  loss_dice_1: 1.238  loss_ce_2: 0.2975  loss_mask_2: 0.4582  loss_dice_2: 1.216  loss_ce_3: 0.2879  loss_mask_3: 0.4566  loss_dice_3: 1.194  loss_ce_4: 0.2405  loss_mask_4: 0.4627  loss_dice_4: 1.169  loss_ce_5: 0.2248  loss_mask_5: 0.4621  loss_dice_5: 1.192  loss_ce_6: 0.2423  loss_mask_6: 0.4609  loss_dice_6: 1.138  loss_ce_7: 0.2369  loss_mask_7: 0.4515  loss_dice_7: 1.186  loss_ce_8: 0.2464  loss_mask_8: 0.4451  loss_dice_8: 1.177    time: 0.9355  last_time: 0.9249  data_time: 0.0349  last_data_time: 0.0389   lr: 0.0001  max_mem: 29890M
[08/29 14:00:23] d2.utils.events INFO:  eta: 0:13:54  iter: 99  total_loss: 18.9  loss_ce: 0.2049  loss_mask: 0.4698  loss_dice: 1.109  loss_ce_0: 0.1934  loss_mask_0: 0.5058  loss_dice_0: 1.269  loss_ce_1: 0.2828  loss_mask_1: 0.4812  loss_dice_1: 1.221  loss_ce_2: 0.2698  loss_mask_2: 0.4623  loss_dice_2: 1.133  loss_ce_3: 0.2553  loss_mask_3: 0.4588  loss_dice_3: 1.12  loss_ce_4: 0.2103  loss_mask_4: 0.4605  loss_dice_4: 1.131  loss_ce_5: 0.2218  loss_mask_5: 0.4709  loss_dice_5: 1.107  loss_ce_6: 0.2137  loss_mask_6: 0.4645  loss_dice_6: 1.124  loss_ce_7: 0.2123  loss_mask_7: 0.4673  loss_dice_7: 1.128  loss_ce_8: 0.2258  loss_mask_8: 0.4716  loss_dice_8: 1.118    time: 0.9339  last_time: 0.9267  data_time: 0.0374  last_data_time: 0.0357   lr: 0.0001  max_mem: 29890M
[08/29 14:00:42] d2.utils.events INFO:  eta: 0:13:36  iter: 119  total_loss: 18.43  loss_ce: 0.2485  loss_mask: 0.4201  loss_dice: 1.104  loss_ce_0: 0.2479  loss_mask_0: 0.4696  loss_dice_0: 1.251  loss_ce_1: 0.2904  loss_mask_1: 0.4496  loss_dice_1: 1.223  loss_ce_2: 0.2743  loss_mask_2: 0.4262  loss_dice_2: 1.144  loss_ce_3: 0.2722  loss_mask_3: 0.4327  loss_dice_3: 1.142  loss_ce_4: 0.247  loss_mask_4: 0.4397  loss_dice_4: 1.133  loss_ce_5: 0.2533  loss_mask_5: 0.4224  loss_dice_5: 1.129  loss_ce_6: 0.2509  loss_mask_6: 0.426  loss_dice_6: 1.095  loss_ce_7: 0.2498  loss_mask_7: 0.4399  loss_dice_7: 1.096  loss_ce_8: 0.2413  loss_mask_8: 0.4315  loss_dice_8: 1.12    time: 0.9333  last_time: 0.9367  data_time: 0.0373  last_data_time: 0.0381   lr: 0.0001  max_mem: 29890M
[08/29 14:01:01] d2.utils.events INFO:  eta: 0:13:17  iter: 139  total_loss: 18.53  loss_ce: 0.2118  loss_mask: 0.4548  loss_dice: 1.122  loss_ce_0: 0.2022  loss_mask_0: 0.4969  loss_dice_0: 1.278  loss_ce_1: 0.2755  loss_mask_1: 0.4805  loss_dice_1: 1.173  loss_ce_2: 0.2371  loss_mask_2: 0.4521  loss_dice_2: 1.139  loss_ce_3: 0.2592  loss_mask_3: 0.4631  loss_dice_3: 1.117  loss_ce_4: 0.2235  loss_mask_4: 0.4564  loss_dice_4: 1.111  loss_ce_5: 0.1843  loss_mask_5: 0.4521  loss_dice_5: 1.157  loss_ce_6: 0.2109  loss_mask_6: 0.4533  loss_dice_6: 1.105  loss_ce_7: 0.2048  loss_mask_7: 0.4559  loss_dice_7: 1.14  loss_ce_8: 0.2128  loss_mask_8: 0.4553  loss_dice_8: 1.123    time: 0.9333  last_time: 0.9402  data_time: 0.0385  last_data_time: 0.0386   lr: 0.0001  max_mem: 29890M
[08/29 14:01:19] d2.utils.events INFO:  eta: 0:12:59  iter: 159  total_loss: 18.02  loss_ce: 0.2256  loss_mask: 0.4387  loss_dice: 1.076  loss_ce_0: 0.2115  loss_mask_0: 0.4937  loss_dice_0: 1.233  loss_ce_1: 0.2524  loss_mask_1: 0.4747  loss_dice_1: 1.174  loss_ce_2: 0.2443  loss_mask_2: 0.4622  loss_dice_2: 1.118  loss_ce_3: 0.2473  loss_mask_3: 0.453  loss_dice_3: 1.092  loss_ce_4: 0.2378  loss_mask_4: 0.4572  loss_dice_4: 1.068  loss_ce_5: 0.2187  loss_mask_5: 0.4461  loss_dice_5: 1.082  loss_ce_6: 0.2235  loss_mask_6: 0.4482  loss_dice_6: 1.06  loss_ce_7: 0.2136  loss_mask_7: 0.4502  loss_dice_7: 1.075  loss_ce_8: 0.228  loss_mask_8: 0.4447  loss_dice_8: 1.079    time: 0.9326  last_time: 0.9365  data_time: 0.0349  last_data_time: 0.0346   lr: 0.0001  max_mem: 29890M
[08/29 14:01:38] d2.utils.events INFO:  eta: 0:12:42  iter: 179  total_loss: 18.01  loss_ce: 0.2283  loss_mask: 0.4472  loss_dice: 1.107  loss_ce_0: 0.1953  loss_mask_0: 0.5174  loss_dice_0: 1.206  loss_ce_1: 0.2401  loss_mask_1: 0.4749  loss_dice_1: 1.141  loss_ce_2: 0.2367  loss_mask_2: 0.4739  loss_dice_2: 1.132  loss_ce_3: 0.2282  loss_mask_3: 0.4755  loss_dice_3: 1.101  loss_ce_4: 0.2539  loss_mask_4: 0.4751  loss_dice_4: 1.116  loss_ce_5: 0.2334  loss_mask_5: 0.4663  loss_dice_5: 1.098  loss_ce_6: 0.2454  loss_mask_6: 0.4586  loss_dice_6: 1.091  loss_ce_7: 0.2222  loss_mask_7: 0.4551  loss_dice_7: 1.089  loss_ce_8: 0.2131  loss_mask_8: 0.4542  loss_dice_8: 1.092    time: 0.9334  last_time: 0.9352  data_time: 0.0402  last_data_time: 0.0373   lr: 0.0001  max_mem: 29890M
[08/29 14:01:57] d2.utils.events INFO:  eta: 0:12:23  iter: 199  total_loss: 17.42  loss_ce: 0.2129  loss_mask: 0.4423  loss_dice: 1.021  loss_ce_0: 0.2138  loss_mask_0: 0.4903  loss_dice_0: 1.153  loss_ce_1: 0.2786  loss_mask_1: 0.4624  loss_dice_1: 1.111  loss_ce_2: 0.2528  loss_mask_2: 0.4543  loss_dice_2: 1.059  loss_ce_3: 0.2435  loss_mask_3: 0.4481  loss_dice_3: 1.034  loss_ce_4: 0.217  loss_mask_4: 0.4545  loss_dice_4: 1.039  loss_ce_5: 0.2197  loss_mask_5: 0.454  loss_dice_5: 1.045  loss_ce_6: 0.2149  loss_mask_6: 0.4384  loss_dice_6: 1.052  loss_ce_7: 0.2179  loss_mask_7: 0.4385  loss_dice_7: 1.05  loss_ce_8: 0.2155  loss_mask_8: 0.4465  loss_dice_8: 1.037    time: 0.9329  last_time: 0.9244  data_time: 0.0354  last_data_time: 0.0318   lr: 0.0001  max_mem: 29890M
[08/29 14:02:15] d2.utils.events INFO:  eta: 0:12:04  iter: 219  total_loss: 18.29  loss_ce: 0.1847  loss_mask: 0.4306  loss_dice: 1.061  loss_ce_0: 0.195  loss_mask_0: 0.4853  loss_dice_0: 1.224  loss_ce_1: 0.2296  loss_mask_1: 0.4524  loss_dice_1: 1.169  loss_ce_2: 0.2291  loss_mask_2: 0.4445  loss_dice_2: 1.125  loss_ce_3: 0.214  loss_mask_3: 0.44  loss_dice_3: 1.109  loss_ce_4: 0.1978  loss_mask_4: 0.4459  loss_dice_4: 1.105  loss_ce_5: 0.1913  loss_mask_5: 0.4317  loss_dice_5: 1.118  loss_ce_6: 0.1795  loss_mask_6: 0.4314  loss_dice_6: 1.082  loss_ce_7: 0.1871  loss_mask_7: 0.4312  loss_dice_7: 1.082  loss_ce_8: 0.1904  loss_mask_8: 0.4243  loss_dice_8: 1.096    time: 0.9326  last_time: 0.9449  data_time: 0.0365  last_data_time: 0.0391   lr: 0.0001  max_mem: 29890M
[08/29 14:02:34] d2.utils.events INFO:  eta: 0:11:46  iter: 239  total_loss: 17.08  loss_ce: 0.1702  loss_mask: 0.4462  loss_dice: 1.024  loss_ce_0: 0.1642  loss_mask_0: 0.4779  loss_dice_0: 1.16  loss_ce_1: 0.1983  loss_mask_1: 0.4649  loss_dice_1: 1.11  loss_ce_2: 0.1638  loss_mask_2: 0.4522  loss_dice_2: 1.088  loss_ce_3: 0.164  loss_mask_3: 0.442  loss_dice_3: 1.087  loss_ce_4: 0.1592  loss_mask_4: 0.4405  loss_dice_4: 1.071  loss_ce_5: 0.1502  loss_mask_5: 0.4487  loss_dice_5: 1.057  loss_ce_6: 0.1478  loss_mask_6: 0.4518  loss_dice_6: 1.054  loss_ce_7: 0.1352  loss_mask_7: 0.4486  loss_dice_7: 1.051  loss_ce_8: 0.1953  loss_mask_8: 0.447  loss_dice_8: 1.071    time: 0.9326  last_time: 0.9317  data_time: 0.0379  last_data_time: 0.0392   lr: 0.0001  max_mem: 29890M
[08/29 14:02:53] d2.utils.events INFO:  eta: 0:11:27  iter: 259  total_loss: 16.8  loss_ce: 0.1988  loss_mask: 0.4201  loss_dice: 1.044  loss_ce_0: 0.1765  loss_mask_0: 0.4559  loss_dice_0: 1.211  loss_ce_1: 0.1894  loss_mask_1: 0.4396  loss_dice_1: 1.138  loss_ce_2: 0.2013  loss_mask_2: 0.4306  loss_dice_2: 1.079  loss_ce_3: 0.2257  loss_mask_3: 0.4217  loss_dice_3: 1.052  loss_ce_4: 0.205  loss_mask_4: 0.4278  loss_dice_4: 1.055  loss_ce_5: 0.1803  loss_mask_5: 0.4226  loss_dice_5: 1.057  loss_ce_6: 0.1991  loss_mask_6: 0.4217  loss_dice_6: 1.028  loss_ce_7: 0.1779  loss_mask_7: 0.4225  loss_dice_7: 1.05  loss_ce_8: 0.1648  loss_mask_8: 0.4218  loss_dice_8: 1.041    time: 0.9328  last_time: 0.9249  data_time: 0.0402  last_data_time: 0.0372   lr: 0.0001  max_mem: 29890M
[08/29 14:03:12] d2.utils.events INFO:  eta: 0:11:09  iter: 279  total_loss: 17.88  loss_ce: 0.2326  loss_mask: 0.4184  loss_dice: 1.084  loss_ce_0: 0.2247  loss_mask_0: 0.4866  loss_dice_0: 1.22  loss_ce_1: 0.2435  loss_mask_1: 0.4478  loss_dice_1: 1.159  loss_ce_2: 0.2267  loss_mask_2: 0.4369  loss_dice_2: 1.127  loss_ce_3: 0.2331  loss_mask_3: 0.4358  loss_dice_3: 1.084  loss_ce_4: 0.23  loss_mask_4: 0.4366  loss_dice_4: 1.088  loss_ce_5: 0.2103  loss_mask_5: 0.4272  loss_dice_5: 1.094  loss_ce_6: 0.2277  loss_mask_6: 0.4325  loss_dice_6: 1.093  loss_ce_7: 0.2306  loss_mask_7: 0.4294  loss_dice_7: 1.091  loss_ce_8: 0.2059  loss_mask_8: 0.4186  loss_dice_8: 1.078    time: 0.9332  last_time: 0.9335  data_time: 0.0392  last_data_time: 0.0406   lr: 0.0001  max_mem: 29890M
[08/29 14:03:30] d2.utils.events INFO:  eta: 0:10:51  iter: 299  total_loss: 16.2  loss_ce: 0.1839  loss_mask: 0.408  loss_dice: 1.002  loss_ce_0: 0.1742  loss_mask_0: 0.4658  loss_dice_0: 1.158  loss_ce_1: 0.2277  loss_mask_1: 0.4435  loss_dice_1: 1.097  loss_ce_2: 0.223  loss_mask_2: 0.4163  loss_dice_2: 1.034  loss_ce_3: 0.2188  loss_mask_3: 0.4199  loss_dice_3: 1.018  loss_ce_4: 0.1828  loss_mask_4: 0.4121  loss_dice_4: 1.021  loss_ce_5: 0.1842  loss_mask_5: 0.4044  loss_dice_5: 1.029  loss_ce_6: 0.1798  loss_mask_6: 0.4036  loss_dice_6: 1.031  loss_ce_7: 0.1896  loss_mask_7: 0.4115  loss_dice_7: 1.041  loss_ce_8: 0.1802  loss_mask_8: 0.4034  loss_dice_8: 1.013    time: 0.9336  last_time: 0.9471  data_time: 0.0391  last_data_time: 0.0403   lr: 0.0001  max_mem: 29890M
[08/29 14:03:49] d2.utils.events INFO:  eta: 0:10:32  iter: 319  total_loss: 17.77  loss_ce: 0.2287  loss_mask: 0.4357  loss_dice: 1.06  loss_ce_0: 0.1974  loss_mask_0: 0.4831  loss_dice_0: 1.224  loss_ce_1: 0.2693  loss_mask_1: 0.4547  loss_dice_1: 1.128  loss_ce_2: 0.2377  loss_mask_2: 0.4364  loss_dice_2: 1.1  loss_ce_3: 0.208  loss_mask_3: 0.4397  loss_dice_3: 1.095  loss_ce_4: 0.2203  loss_mask_4: 0.4298  loss_dice_4: 1.094  loss_ce_5: 0.1908  loss_mask_5: 0.4458  loss_dice_5: 1.073  loss_ce_6: 0.2064  loss_mask_6: 0.4418  loss_dice_6: 1.067  loss_ce_7: 0.2023  loss_mask_7: 0.4405  loss_dice_7: 1.071  loss_ce_8: 0.1998  loss_mask_8: 0.4383  loss_dice_8: 1.061    time: 0.9337  last_time: 0.9370  data_time: 0.0398  last_data_time: 0.0421   lr: 0.0001  max_mem: 29890M
[08/29 14:04:08] d2.utils.events INFO:  eta: 0:10:14  iter: 339  total_loss: 17.59  loss_ce: 0.2023  loss_mask: 0.4196  loss_dice: 1.067  loss_ce_0: 0.1718  loss_mask_0: 0.4637  loss_dice_0: 1.178  loss_ce_1: 0.2123  loss_mask_1: 0.4513  loss_dice_1: 1.142  loss_ce_2: 0.2262  loss_mask_2: 0.4354  loss_dice_2: 1.097  loss_ce_3: 0.211  loss_mask_3: 0.4327  loss_dice_3: 1.085  loss_ce_4: 0.2009  loss_mask_4: 0.4286  loss_dice_4: 1.103  loss_ce_5: 0.168  loss_mask_5: 0.4295  loss_dice_5: 1.075  loss_ce_6: 0.1733  loss_mask_6: 0.42  loss_dice_6: 1.074  loss_ce_7: 0.1761  loss_mask_7: 0.4206  loss_dice_7: 1.096  loss_ce_8: 0.2073  loss_mask_8: 0.4195  loss_dice_8: 1.051    time: 0.9337  last_time: 0.9318  data_time: 0.0381  last_data_time: 0.0384   lr: 0.0001  max_mem: 29892M
[08/29 14:04:27] d2.utils.events INFO:  eta: 0:09:56  iter: 359  total_loss: 16.6  loss_ce: 0.2045  loss_mask: 0.4231  loss_dice: 0.9987  loss_ce_0: 0.1674  loss_mask_0: 0.4559  loss_dice_0: 1.175  loss_ce_1: 0.2248  loss_mask_1: 0.4247  loss_dice_1: 1.093  loss_ce_2: 0.2233  loss_mask_2: 0.4214  loss_dice_2: 1.052  loss_ce_3: 0.2199  loss_mask_3: 0.4311  loss_dice_3: 1.036  loss_ce_4: 0.2158  loss_mask_4: 0.4263  loss_dice_4: 1.05  loss_ce_5: 0.1977  loss_mask_5: 0.4242  loss_dice_5: 1.006  loss_ce_6: 0.207  loss_mask_6: 0.4259  loss_dice_6: 0.9932  loss_ce_7: 0.2042  loss_mask_7: 0.4271  loss_dice_7: 1.009  loss_ce_8: 0.1871  loss_mask_8: 0.4282  loss_dice_8: 1.013    time: 0.9339  last_time: 0.9353  data_time: 0.0369  last_data_time: 0.0375   lr: 0.0001  max_mem: 29892M
[08/29 14:04:46] d2.utils.events INFO:  eta: 0:09:37  iter: 379  total_loss: 17.12  loss_ce: 0.1837  loss_mask: 0.393  loss_dice: 1.017  loss_ce_0: 0.1866  loss_mask_0: 0.4643  loss_dice_0: 1.163  loss_ce_1: 0.2209  loss_mask_1: 0.4219  loss_dice_1: 1.095  loss_ce_2: 0.2317  loss_mask_2: 0.4139  loss_dice_2: 1.058  loss_ce_3: 0.186  loss_mask_3: 0.4023  loss_dice_3: 1.058  loss_ce_4: 0.1899  loss_mask_4: 0.4038  loss_dice_4: 1.048  loss_ce_5: 0.1696  loss_mask_5: 0.3957  loss_dice_5: 1.037  loss_ce_6: 0.1766  loss_mask_6: 0.4013  loss_dice_6: 1.023  loss_ce_7: 0.1887  loss_mask_7: 0.4027  loss_dice_7: 1.025  loss_ce_8: 0.1863  loss_mask_8: 0.3987  loss_dice_8: 1.022    time: 0.9344  last_time: 0.9485  data_time: 0.0401  last_data_time: 0.0413   lr: 0.0001  max_mem: 29892M
[08/29 14:05:05] d2.utils.events INFO:  eta: 0:09:19  iter: 399  total_loss: 16.76  loss_ce: 0.1794  loss_mask: 0.4084  loss_dice: 1.043  loss_ce_0: 0.1355  loss_mask_0: 0.4729  loss_dice_0: 1.14  loss_ce_1: 0.1979  loss_mask_1: 0.4292  loss_dice_1: 1.101  loss_ce_2: 0.1951  loss_mask_2: 0.4165  loss_dice_2: 1.063  loss_ce_3: 0.186  loss_mask_3: 0.4167  loss_dice_3: 1.065  loss_ce_4: 0.1977  loss_mask_4: 0.4158  loss_dice_4: 1.032  loss_ce_5: 0.1693  loss_mask_5: 0.4143  loss_dice_5: 1.04  loss_ce_6: 0.1925  loss_mask_6: 0.4129  loss_dice_6: 1.012  loss_ce_7: 0.1964  loss_mask_7: 0.4087  loss_dice_7: 1.037  loss_ce_8: 0.1743  loss_mask_8: 0.4025  loss_dice_8: 1.024    time: 0.9352  last_time: 0.9413  data_time: 0.0383  last_data_time: 0.0361   lr: 0.0001  max_mem: 29892M
[08/29 14:05:24] d2.utils.events INFO:  eta: 0:09:00  iter: 419  total_loss: 16.35  loss_ce: 0.1823  loss_mask: 0.4027  loss_dice: 0.9858  loss_ce_0: 0.1758  loss_mask_0: 0.4342  loss_dice_0: 1.1  loss_ce_1: 0.1951  loss_mask_1: 0.4081  loss_dice_1: 1.04  loss_ce_2: 0.1785  loss_mask_2: 0.4044  loss_dice_2: 1.014  loss_ce_3: 0.1955  loss_mask_3: 0.4067  loss_dice_3: 0.9892  loss_ce_4: 0.1854  loss_mask_4: 0.4055  loss_dice_4: 0.9975  loss_ce_5: 0.1831  loss_mask_5: 0.4032  loss_dice_5: 1.005  loss_ce_6: 0.1816  loss_mask_6: 0.4037  loss_dice_6: 0.998  loss_ce_7: 0.1702  loss_mask_7: 0.3997  loss_dice_7: 0.9986  loss_ce_8: 0.1733  loss_mask_8: 0.4057  loss_dice_8: 1.001    time: 0.9357  last_time: 0.9454  data_time: 0.0395  last_data_time: 0.0405   lr: 0.0001  max_mem: 29892M
[08/29 14:05:43] d2.utils.events INFO:  eta: 0:08:42  iter: 439  total_loss: 16.95  loss_ce: 0.1948  loss_mask: 0.3908  loss_dice: 1.03  loss_ce_0: 0.203  loss_mask_0: 0.449  loss_dice_0: 1.182  loss_ce_1: 0.2373  loss_mask_1: 0.4078  loss_dice_1: 1.099  loss_ce_2: 0.2005  loss_mask_2: 0.3968  loss_dice_2: 1.055  loss_ce_3: 0.2365  loss_mask_3: 0.3946  loss_dice_3: 1.043  loss_ce_4: 0.2164  loss_mask_4: 0.3905  loss_dice_4: 1.04  loss_ce_5: 0.2262  loss_mask_5: 0.3928  loss_dice_5: 1.044  loss_ce_6: 0.2271  loss_mask_6: 0.3921  loss_dice_6: 1.026  loss_ce_7: 0.203  loss_mask_7: 0.3868  loss_dice_7: 1.028  loss_ce_8: 0.2055  loss_mask_8: 0.3854  loss_dice_8: 1.025    time: 0.9362  last_time: 0.9443  data_time: 0.0426  last_data_time: 0.0467   lr: 0.0001  max_mem: 29892M
[08/29 14:06:01] d2.utils.events INFO:  eta: 0:08:24  iter: 459  total_loss: 16.78  loss_ce: 0.1667  loss_mask: 0.3987  loss_dice: 0.9964  loss_ce_0: 0.2005  loss_mask_0: 0.4361  loss_dice_0: 1.124  loss_ce_1: 0.2107  loss_mask_1: 0.4089  loss_dice_1: 1.098  loss_ce_2: 0.2082  loss_mask_2: 0.4029  loss_dice_2: 1.049  loss_ce_3: 0.2085  loss_mask_3: 0.4029  loss_dice_3: 1.065  loss_ce_4: 0.1985  loss_mask_4: 0.3995  loss_dice_4: 1.049  loss_ce_5: 0.1779  loss_mask_5: 0.404  loss_dice_5: 1.049  loss_ce_6: 0.1794  loss_mask_6: 0.4046  loss_dice_6: 1.024  loss_ce_7: 0.169  loss_mask_7: 0.3994  loss_dice_7: 1.017  loss_ce_8: 0.1648  loss_mask_8: 0.3979  loss_dice_8: 1.023    time: 0.9364  last_time: 0.9425  data_time: 0.0391  last_data_time: 0.0332   lr: 0.0001  max_mem: 29892M
[08/29 14:06:20] d2.utils.events INFO:  eta: 0:08:05  iter: 479  total_loss: 16.43  loss_ce: 0.183  loss_mask: 0.3857  loss_dice: 0.9883  loss_ce_0: 0.1847  loss_mask_0: 0.443  loss_dice_0: 1.157  loss_ce_1: 0.2072  loss_mask_1: 0.4299  loss_dice_1: 1.067  loss_ce_2: 0.2143  loss_mask_2: 0.3998  loss_dice_2: 1.052  loss_ce_3: 0.1971  loss_mask_3: 0.3932  loss_dice_3: 1.024  loss_ce_4: 0.2036  loss_mask_4: 0.383  loss_dice_4: 1.02  loss_ce_5: 0.1842  loss_mask_5: 0.3777  loss_dice_5: 1.034  loss_ce_6: 0.1987  loss_mask_6: 0.3867  loss_dice_6: 1.015  loss_ce_7: 0.1825  loss_mask_7: 0.3874  loss_dice_7: 0.9877  loss_ce_8: 0.1938  loss_mask_8: 0.3837  loss_dice_8: 1.001    time: 0.9366  last_time: 0.9508  data_time: 0.0366  last_data_time: 0.0403   lr: 0.0001  max_mem: 29892M
[08/29 14:06:39] d2.utils.events INFO:  eta: 0:07:47  iter: 499  total_loss: 15.78  loss_ce: 0.1834  loss_mask: 0.3779  loss_dice: 0.9556  loss_ce_0: 0.1924  loss_mask_0: 0.415  loss_dice_0: 1.055  loss_ce_1: 0.2256  loss_mask_1: 0.3981  loss_dice_1: 1.012  loss_ce_2: 0.2225  loss_mask_2: 0.3858  loss_dice_2: 0.9742  loss_ce_3: 0.1931  loss_mask_3: 0.3855  loss_dice_3: 0.9636  loss_ce_4: 0.1995  loss_mask_4: 0.3798  loss_dice_4: 0.9609  loss_ce_5: 0.1853  loss_mask_5: 0.3753  loss_dice_5: 0.9642  loss_ce_6: 0.202  loss_mask_6: 0.3769  loss_dice_6: 0.9638  loss_ce_7: 0.1858  loss_mask_7: 0.3741  loss_dice_7: 0.9232  loss_ce_8: 0.1819  loss_mask_8: 0.3774  loss_dice_8: 0.9544    time: 0.9372  last_time: 0.9389  data_time: 0.0424  last_data_time: 0.0352   lr: 0.0001  max_mem: 29892M
[08/29 14:06:58] d2.utils.events INFO:  eta: 0:07:28  iter: 519  total_loss: 16.82  loss_ce: 0.179  loss_mask: 0.4169  loss_dice: 1.045  loss_ce_0: 0.1913  loss_mask_0: 0.4723  loss_dice_0: 1.149  loss_ce_1: 0.2111  loss_mask_1: 0.4286  loss_dice_1: 1.093  loss_ce_2: 0.2131  loss_mask_2: 0.4303  loss_dice_2: 1.06  loss_ce_3: 0.1737  loss_mask_3: 0.4212  loss_dice_3: 1.019  loss_ce_4: 0.1733  loss_mask_4: 0.4253  loss_dice_4: 1.037  loss_ce_5: 0.1509  loss_mask_5: 0.4109  loss_dice_5: 1.02  loss_ce_6: 0.182  loss_mask_6: 0.4015  loss_dice_6: 1.01  loss_ce_7: 0.1749  loss_mask_7: 0.4124  loss_dice_7: 1.026  loss_ce_8: 0.1737  loss_mask_8: 0.4109  loss_dice_8: 1.014    time: 0.9377  last_time: 0.9596  data_time: 0.0405  last_data_time: 0.0395   lr: 0.0001  max_mem: 29892M
[08/29 14:07:17] d2.utils.events INFO:  eta: 0:07:10  iter: 539  total_loss: 16.32  loss_ce: 0.1959  loss_mask: 0.3911  loss_dice: 1.023  loss_ce_0: 0.1807  loss_mask_0: 0.4294  loss_dice_0: 1.13  loss_ce_1: 0.2457  loss_mask_1: 0.3982  loss_dice_1: 1.078  loss_ce_2: 0.2072  loss_mask_2: 0.3988  loss_dice_2: 1.082  loss_ce_3: 0.1971  loss_mask_3: 0.3902  loss_dice_3: 1.015  loss_ce_4: 0.1859  loss_mask_4: 0.3912  loss_dice_4: 1.043  loss_ce_5: 0.1813  loss_mask_5: 0.3858  loss_dice_5: 1.029  loss_ce_6: 0.212  loss_mask_6: 0.3918  loss_dice_6: 1.015  loss_ce_7: 0.2086  loss_mask_7: 0.3824  loss_dice_7: 1.023  loss_ce_8: 0.2044  loss_mask_8: 0.3887  loss_dice_8: 1.01    time: 0.9380  last_time: 0.9253  data_time: 0.0394  last_data_time: 0.0362   lr: 0.0001  max_mem: 29892M
[08/29 14:07:36] d2.utils.events INFO:  eta: 0:06:51  iter: 559  total_loss: 16  loss_ce: 0.196  loss_mask: 0.4121  loss_dice: 0.9499  loss_ce_0: 0.1886  loss_mask_0: 0.4406  loss_dice_0: 1.075  loss_ce_1: 0.2206  loss_mask_1: 0.4258  loss_dice_1: 0.9909  loss_ce_2: 0.2047  loss_mask_2: 0.4155  loss_dice_2: 0.9791  loss_ce_3: 0.1932  loss_mask_3: 0.4163  loss_dice_3: 0.971  loss_ce_4: 0.1991  loss_mask_4: 0.4148  loss_dice_4: 0.9577  loss_ce_5: 0.1629  loss_mask_5: 0.4058  loss_dice_5: 0.963  loss_ce_6: 0.1815  loss_mask_6: 0.4118  loss_dice_6: 0.9709  loss_ce_7: 0.1934  loss_mask_7: 0.4132  loss_dice_7: 0.9829  loss_ce_8: 0.2133  loss_mask_8: 0.4065  loss_dice_8: 0.9596    time: 0.9379  last_time: 0.9563  data_time: 0.0379  last_data_time: 0.0482   lr: 0.0001  max_mem: 29892M
[08/29 14:07:55] d2.utils.events INFO:  eta: 0:06:32  iter: 579  total_loss: 16.31  loss_ce: 0.2253  loss_mask: 0.3837  loss_dice: 0.9951  loss_ce_0: 0.2175  loss_mask_0: 0.4271  loss_dice_0: 1.098  loss_ce_1: 0.2518  loss_mask_1: 0.4048  loss_dice_1: 1.05  loss_ce_2: 0.2381  loss_mask_2: 0.398  loss_dice_2: 1.038  loss_ce_3: 0.245  loss_mask_3: 0.3857  loss_dice_3: 1.014  loss_ce_4: 0.2239  loss_mask_4: 0.387  loss_dice_4: 1.006  loss_ce_5: 0.2098  loss_mask_5: 0.3852  loss_dice_5: 1.003  loss_ce_6: 0.2455  loss_mask_6: 0.3863  loss_dice_6: 0.9618  loss_ce_7: 0.2199  loss_mask_7: 0.3827  loss_dice_7: 0.9822  loss_ce_8: 0.2173  loss_mask_8: 0.379  loss_dice_8: 0.957    time: 0.9381  last_time: 0.9527  data_time: 0.0388  last_data_time: 0.0471   lr: 0.0001  max_mem: 29892M
[08/29 14:08:14] d2.utils.events INFO:  eta: 0:06:14  iter: 599  total_loss: 15.42  loss_ce: 0.1679  loss_mask: 0.3552  loss_dice: 0.9268  loss_ce_0: 0.196  loss_mask_0: 0.3827  loss_dice_0: 1.045  loss_ce_1: 0.2173  loss_mask_1: 0.3682  loss_dice_1: 0.9969  loss_ce_2: 0.2106  loss_mask_2: 0.3599  loss_dice_2: 0.9646  loss_ce_3: 0.1868  loss_mask_3: 0.3631  loss_dice_3: 0.945  loss_ce_4: 0.1969  loss_mask_4: 0.3586  loss_dice_4: 0.9221  loss_ce_5: 0.1964  loss_mask_5: 0.3509  loss_dice_5: 0.9279  loss_ce_6: 0.1694  loss_mask_6: 0.3554  loss_dice_6: 0.8956  loss_ce_7: 0.1656  loss_mask_7: 0.3563  loss_dice_7: 0.9053  loss_ce_8: 0.1724  loss_mask_8: 0.3568  loss_dice_8: 0.9306    time: 0.9381  last_time: 0.9391  data_time: 0.0366  last_data_time: 0.0328   lr: 0.0001  max_mem: 29892M
[08/29 14:08:33] d2.utils.events INFO:  eta: 0:05:55  iter: 619  total_loss: 16.48  loss_ce: 0.1894  loss_mask: 0.3978  loss_dice: 1.012  loss_ce_0: 0.2049  loss_mask_0: 0.4333  loss_dice_0: 1.141  loss_ce_1: 0.2065  loss_mask_1: 0.4087  loss_dice_1: 1.087  loss_ce_2: 0.1975  loss_mask_2: 0.407  loss_dice_2: 1.048  loss_ce_3: 0.1975  loss_mask_3: 0.4097  loss_dice_3: 1.045  loss_ce_4: 0.2031  loss_mask_4: 0.4081  loss_dice_4: 1.026  loss_ce_5: 0.2079  loss_mask_5: 0.4035  loss_dice_5: 1.039  loss_ce_6: 0.2004  loss_mask_6: 0.4065  loss_dice_6: 0.9998  loss_ce_7: 0.2028  loss_mask_7: 0.4029  loss_dice_7: 1.024  loss_ce_8: 0.1877  loss_mask_8: 0.4011  loss_dice_8: 1.032    time: 0.9380  last_time: 0.9205  data_time: 0.0351  last_data_time: 0.0342   lr: 0.0001  max_mem: 29892M
[08/29 14:08:52] d2.utils.events INFO:  eta: 0:05:36  iter: 639  total_loss: 15.1  loss_ce: 0.1443  loss_mask: 0.3905  loss_dice: 0.9536  loss_ce_0: 0.1468  loss_mask_0: 0.4525  loss_dice_0: 1.056  loss_ce_1: 0.1854  loss_mask_1: 0.4088  loss_dice_1: 0.9983  loss_ce_2: 0.1637  loss_mask_2: 0.4097  loss_dice_2: 0.961  loss_ce_3: 0.1726  loss_mask_3: 0.3985  loss_dice_3: 0.9553  loss_ce_4: 0.1359  loss_mask_4: 0.3994  loss_dice_4: 0.971  loss_ce_5: 0.1578  loss_mask_5: 0.4002  loss_dice_5: 0.9485  loss_ce_6: 0.1506  loss_mask_6: 0.3942  loss_dice_6: 0.948  loss_ce_7: 0.1436  loss_mask_7: 0.3957  loss_dice_7: 0.9398  loss_ce_8: 0.1348  loss_mask_8: 0.3951  loss_dice_8: 0.9468    time: 0.9382  last_time: 0.9266  data_time: 0.0356  last_data_time: 0.0330   lr: 0.0001  max_mem: 29892M
[08/29 14:09:10] d2.utils.events INFO:  eta: 0:05:17  iter: 659  total_loss: 16.63  loss_ce: 0.1927  loss_mask: 0.3916  loss_dice: 0.9957  loss_ce_0: 0.2154  loss_mask_0: 0.4058  loss_dice_0: 1.13  loss_ce_1: 0.2137  loss_mask_1: 0.3977  loss_dice_1: 1.096  loss_ce_2: 0.2329  loss_mask_2: 0.394  loss_dice_2: 1.049  loss_ce_3: 0.2161  loss_mask_3: 0.3932  loss_dice_3: 1.005  loss_ce_4: 0.216  loss_mask_4: 0.392  loss_dice_4: 1.011  loss_ce_5: 0.1999  loss_mask_5: 0.395  loss_dice_5: 0.9998  loss_ce_6: 0.2036  loss_mask_6: 0.3941  loss_dice_6: 1.011  loss_ce_7: 0.2044  loss_mask_7: 0.399  loss_dice_7: 1.026  loss_ce_8: 0.1953  loss_mask_8: 0.3927  loss_dice_8: 1.006    time: 0.9382  last_time: 0.9200  data_time: 0.0354  last_data_time: 0.0333   lr: 0.0001  max_mem: 29892M
[08/29 14:09:29] d2.utils.events INFO:  eta: 0:04:59  iter: 679  total_loss: 16.23  loss_ce: 0.1805  loss_mask: 0.3986  loss_dice: 0.9787  loss_ce_0: 0.1808  loss_mask_0: 0.4362  loss_dice_0: 1.099  loss_ce_1: 0.2032  loss_mask_1: 0.416  loss_dice_1: 1.063  loss_ce_2: 0.2156  loss_mask_2: 0.41  loss_dice_2: 1.028  loss_ce_3: 0.2138  loss_mask_3: 0.4085  loss_dice_3: 1.025  loss_ce_4: 0.1962  loss_mask_4: 0.4049  loss_dice_4: 1.026  loss_ce_5: 0.2058  loss_mask_5: 0.403  loss_dice_5: 1.001  loss_ce_6: 0.1765  loss_mask_6: 0.4016  loss_dice_6: 0.9904  loss_ce_7: 0.1935  loss_mask_7: 0.3981  loss_dice_7: 1.007  loss_ce_8: 0.2088  loss_mask_8: 0.3971  loss_dice_8: 0.989    time: 0.9383  last_time: 0.9339  data_time: 0.0362  last_data_time: 0.0414   lr: 0.0001  max_mem: 29892M
[08/29 14:09:48] d2.utils.events INFO:  eta: 0:04:40  iter: 699  total_loss: 16.01  loss_ce: 0.1511  loss_mask: 0.3803  loss_dice: 0.9667  loss_ce_0: 0.1556  loss_mask_0: 0.4165  loss_dice_0: 1.067  loss_ce_1: 0.2034  loss_mask_1: 0.4009  loss_dice_1: 1.029  loss_ce_2: 0.1614  loss_mask_2: 0.3902  loss_dice_2: 1.001  loss_ce_3: 0.1934  loss_mask_3: 0.3814  loss_dice_3: 0.9886  loss_ce_4: 0.1832  loss_mask_4: 0.3872  loss_dice_4: 0.9829  loss_ce_5: 0.1812  loss_mask_5: 0.3826  loss_dice_5: 1  loss_ce_6: 0.17  loss_mask_6: 0.3885  loss_dice_6: 0.976  loss_ce_7: 0.1807  loss_mask_7: 0.3832  loss_dice_7: 0.9701  loss_ce_8: 0.1498  loss_mask_8: 0.3801  loss_dice_8: 0.9708    time: 0.9383  last_time: 0.9273  data_time: 0.0349  last_data_time: 0.0337   lr: 0.0001  max_mem: 29892M
[08/29 14:10:07] d2.utils.events INFO:  eta: 0:04:21  iter: 719  total_loss: 15.98  loss_ce: 0.1763  loss_mask: 0.3941  loss_dice: 1.03  loss_ce_0: 0.15  loss_mask_0: 0.4457  loss_dice_0: 1.119  loss_ce_1: 0.2017  loss_mask_1: 0.418  loss_dice_1: 1.055  loss_ce_2: 0.1835  loss_mask_2: 0.4037  loss_dice_2: 1.025  loss_ce_3: 0.2191  loss_mask_3: 0.4033  loss_dice_3: 1.006  loss_ce_4: 0.2115  loss_mask_4: 0.4058  loss_dice_4: 1.013  loss_ce_5: 0.1926  loss_mask_5: 0.3842  loss_dice_5: 1.011  loss_ce_6: 0.1833  loss_mask_6: 0.3969  loss_dice_6: 1.018  loss_ce_7: 0.1608  loss_mask_7: 0.3878  loss_dice_7: 1.012  loss_ce_8: 0.1933  loss_mask_8: 0.3898  loss_dice_8: 0.997    time: 0.9383  last_time: 0.9507  data_time: 0.0355  last_data_time: 0.0340   lr: 0.0001  max_mem: 29892M
[08/29 14:10:26] d2.utils.events INFO:  eta: 0:04:03  iter: 739  total_loss: 14.73  loss_ce: 0.1557  loss_mask: 0.3807  loss_dice: 0.9208  loss_ce_0: 0.1655  loss_mask_0: 0.3967  loss_dice_0: 1.002  loss_ce_1: 0.1778  loss_mask_1: 0.3861  loss_dice_1: 0.9768  loss_ce_2: 0.181  loss_mask_2: 0.3763  loss_dice_2: 0.943  loss_ce_3: 0.1861  loss_mask_3: 0.3759  loss_dice_3: 0.939  loss_ce_4: 0.1624  loss_mask_4: 0.3774  loss_dice_4: 0.9338  loss_ce_5: 0.1652  loss_mask_5: 0.3821  loss_dice_5: 0.9185  loss_ce_6: 0.1705  loss_mask_6: 0.3824  loss_dice_6: 0.9231  loss_ce_7: 0.1521  loss_mask_7: 0.3882  loss_dice_7: 0.9227  loss_ce_8: 0.1733  loss_mask_8: 0.3862  loss_dice_8: 0.9109    time: 0.9383  last_time: 0.9362  data_time: 0.0343  last_data_time: 0.0324   lr: 0.0001  max_mem: 29892M
[08/29 14:10:45] d2.utils.events INFO:  eta: 0:03:44  iter: 759  total_loss: 15.03  loss_ce: 0.1321  loss_mask: 0.3868  loss_dice: 0.9349  loss_ce_0: 0.1406  loss_mask_0: 0.405  loss_dice_0: 1.058  loss_ce_1: 0.1703  loss_mask_1: 0.4041  loss_dice_1: 0.9956  loss_ce_2: 0.1693  loss_mask_2: 0.3937  loss_dice_2: 0.9782  loss_ce_3: 0.1528  loss_mask_3: 0.3893  loss_dice_3: 0.9509  loss_ce_4: 0.1496  loss_mask_4: 0.3914  loss_dice_4: 0.9577  loss_ce_5: 0.1468  loss_mask_5: 0.3918  loss_dice_5: 0.9404  loss_ce_6: 0.1469  loss_mask_6: 0.3873  loss_dice_6: 0.9525  loss_ce_7: 0.1429  loss_mask_7: 0.3859  loss_dice_7: 0.948  loss_ce_8: 0.1378  loss_mask_8: 0.3871  loss_dice_8: 0.9452    time: 0.9382  last_time: 0.9514  data_time: 0.0348  last_data_time: 0.0408   lr: 0.0001  max_mem: 29892M
[08/29 14:11:03] d2.utils.events INFO:  eta: 0:03:25  iter: 779  total_loss: 15.3  loss_ce: 0.13  loss_mask: 0.3705  loss_dice: 0.9744  loss_ce_0: 0.151  loss_mask_0: 0.416  loss_dice_0: 1.081  loss_ce_1: 0.1849  loss_mask_1: 0.384  loss_dice_1: 1.047  loss_ce_2: 0.1775  loss_mask_2: 0.3696  loss_dice_2: 1.015  loss_ce_3: 0.1853  loss_mask_3: 0.3668  loss_dice_3: 0.9748  loss_ce_4: 0.1916  loss_mask_4: 0.3728  loss_dice_4: 0.9625  loss_ce_5: 0.1569  loss_mask_5: 0.3749  loss_dice_5: 0.9745  loss_ce_6: 0.1561  loss_mask_6: 0.3698  loss_dice_6: 0.9553  loss_ce_7: 0.1265  loss_mask_7: 0.3692  loss_dice_7: 0.9796  loss_ce_8: 0.1483  loss_mask_8: 0.3722  loss_dice_8: 0.9588    time: 0.9382  last_time: 0.9275  data_time: 0.0351  last_data_time: 0.0335   lr: 0.0001  max_mem: 29892M
[08/29 14:11:22] d2.utils.events INFO:  eta: 0:03:07  iter: 799  total_loss: 14.89  loss_ce: 0.1521  loss_mask: 0.3631  loss_dice: 0.9325  loss_ce_0: 0.1328  loss_mask_0: 0.4038  loss_dice_0: 1.043  loss_ce_1: 0.1677  loss_mask_1: 0.3808  loss_dice_1: 0.9992  loss_ce_2: 0.1754  loss_mask_2: 0.3728  loss_dice_2: 0.9857  loss_ce_3: 0.1463  loss_mask_3: 0.3715  loss_dice_3: 0.9566  loss_ce_4: 0.1439  loss_mask_4: 0.3766  loss_dice_4: 0.9406  loss_ce_5: 0.1477  loss_mask_5: 0.3741  loss_dice_5: 0.9757  loss_ce_6: 0.143  loss_mask_6: 0.3771  loss_dice_6: 0.9388  loss_ce_7: 0.1618  loss_mask_7: 0.3722  loss_dice_7: 0.9542  loss_ce_8: 0.151  loss_mask_8: 0.3674  loss_dice_8: 0.977    time: 0.9381  last_time: 0.9241  data_time: 0.0374  last_data_time: 0.0369   lr: 0.0001  max_mem: 29892M
[08/29 14:11:41] d2.utils.events INFO:  eta: 0:02:48  iter: 819  total_loss: 15.06  loss_ce: 0.174  loss_mask: 0.3838  loss_dice: 0.9196  loss_ce_0: 0.1433  loss_mask_0: 0.408  loss_dice_0: 1.013  loss_ce_1: 0.1483  loss_mask_1: 0.39  loss_dice_1: 0.9714  loss_ce_2: 0.1463  loss_mask_2: 0.382  loss_dice_2: 0.9405  loss_ce_3: 0.1605  loss_mask_3: 0.3771  loss_dice_3: 0.9196  loss_ce_4: 0.1447  loss_mask_4: 0.3779  loss_dice_4: 0.9335  loss_ce_5: 0.1587  loss_mask_5: 0.3793  loss_dice_5: 0.9191  loss_ce_6: 0.1511  loss_mask_6: 0.3803  loss_dice_6: 0.9366  loss_ce_7: 0.1311  loss_mask_7: 0.3777  loss_dice_7: 0.9074  loss_ce_8: 0.1293  loss_mask_8: 0.3836  loss_dice_8: 0.9162    time: 0.9379  last_time: 0.9257  data_time: 0.0342  last_data_time: 0.0360   lr: 0.0001  max_mem: 29892M
[08/29 14:12:00] d2.utils.events INFO:  eta: 0:02:29  iter: 839  total_loss: 15.5  loss_ce: 0.1893  loss_mask: 0.3789  loss_dice: 0.9855  loss_ce_0: 0.1835  loss_mask_0: 0.4123  loss_dice_0: 1.071  loss_ce_1: 0.242  loss_mask_1: 0.4017  loss_dice_1: 1.021  loss_ce_2: 0.2134  loss_mask_2: 0.3863  loss_dice_2: 1.006  loss_ce_3: 0.2035  loss_mask_3: 0.3839  loss_dice_3: 0.9981  loss_ce_4: 0.197  loss_mask_4: 0.3864  loss_dice_4: 0.9874  loss_ce_5: 0.1814  loss_mask_5: 0.3868  loss_dice_5: 0.9844  loss_ce_6: 0.1913  loss_mask_6: 0.3792  loss_dice_6: 0.9713  loss_ce_7: 0.1773  loss_mask_7: 0.3803  loss_dice_7: 0.9884  loss_ce_8: 0.1888  loss_mask_8: 0.3798  loss_dice_8: 0.9683    time: 0.9378  last_time: 0.9254  data_time: 0.0358  last_data_time: 0.0335   lr: 0.0001  max_mem: 29892M
[08/29 14:12:18] d2.utils.events INFO:  eta: 0:02:10  iter: 859  total_loss: 15.53  loss_ce: 0.1558  loss_mask: 0.3809  loss_dice: 0.9769  loss_ce_0: 0.1847  loss_mask_0: 0.4106  loss_dice_0: 1.072  loss_ce_1: 0.2326  loss_mask_1: 0.3886  loss_dice_1: 1.038  loss_ce_2: 0.2035  loss_mask_2: 0.3839  loss_dice_2: 1.026  loss_ce_3: 0.1862  loss_mask_3: 0.3886  loss_dice_3: 0.9812  loss_ce_4: 0.1911  loss_mask_4: 0.3852  loss_dice_4: 0.9851  loss_ce_5: 0.1779  loss_mask_5: 0.377  loss_dice_5: 0.977  loss_ce_6: 0.1871  loss_mask_6: 0.3831  loss_dice_6: 0.9618  loss_ce_7: 0.1561  loss_mask_7: 0.3796  loss_dice_7: 0.9687  loss_ce_8: 0.1805  loss_mask_8: 0.3811  loss_dice_8: 0.9615    time: 0.9377  last_time: 0.9419  data_time: 0.0362  last_data_time: 0.0347   lr: 0.0001  max_mem: 29892M
[08/29 14:12:37] d2.utils.events INFO:  eta: 0:01:52  iter: 879  total_loss: 15.57  loss_ce: 0.1363  loss_mask: 0.3751  loss_dice: 0.9679  loss_ce_0: 0.1705  loss_mask_0: 0.4028  loss_dice_0: 1.08  loss_ce_1: 0.2084  loss_mask_1: 0.3903  loss_dice_1: 1.006  loss_ce_2: 0.1921  loss_mask_2: 0.3814  loss_dice_2: 0.9883  loss_ce_3: 0.1756  loss_mask_3: 0.3797  loss_dice_3: 0.9812  loss_ce_4: 0.1789  loss_mask_4: 0.3812  loss_dice_4: 0.9845  loss_ce_5: 0.1646  loss_mask_5: 0.3745  loss_dice_5: 0.9585  loss_ce_6: 0.1468  loss_mask_6: 0.3771  loss_dice_6: 0.9731  loss_ce_7: 0.1312  loss_mask_7: 0.3747  loss_dice_7: 0.956  loss_ce_8: 0.1597  loss_mask_8: 0.372  loss_dice_8: 0.9382    time: 0.9378  last_time: 0.9289  data_time: 0.0371  last_data_time: 0.0346   lr: 0.0001  max_mem: 29892M
[08/29 14:12:56] d2.utils.events INFO:  eta: 0:01:33  iter: 899  total_loss: 15.72  loss_ce: 0.1509  loss_mask: 0.3863  loss_dice: 0.9647  loss_ce_0: 0.1729  loss_mask_0: 0.4225  loss_dice_0: 1.069  loss_ce_1: 0.1899  loss_mask_1: 0.3968  loss_dice_1: 1.017  loss_ce_2: 0.1733  loss_mask_2: 0.3928  loss_dice_2: 0.996  loss_ce_3: 0.1964  loss_mask_3: 0.3833  loss_dice_3: 0.9669  loss_ce_4: 0.1603  loss_mask_4: 0.3807  loss_dice_4: 0.9873  loss_ce_5: 0.1742  loss_mask_5: 0.3875  loss_dice_5: 0.9892  loss_ce_6: 0.1571  loss_mask_6: 0.3858  loss_dice_6: 0.9518  loss_ce_7: 0.1596  loss_mask_7: 0.3785  loss_dice_7: 0.9582  loss_ce_8: 0.1665  loss_mask_8: 0.3789  loss_dice_8: 0.9526    time: 0.9377  last_time: 0.9274  data_time: 0.0348  last_data_time: 0.0338   lr: 0.0001  max_mem: 29892M
[08/29 14:13:15] d2.utils.events INFO:  eta: 0:01:14  iter: 919  total_loss: 15.25  loss_ce: 0.1671  loss_mask: 0.3825  loss_dice: 0.9386  loss_ce_0: 0.168  loss_mask_0: 0.4208  loss_dice_0: 1.051  loss_ce_1: 0.2082  loss_mask_1: 0.3964  loss_dice_1: 0.9895  loss_ce_2: 0.1828  loss_mask_2: 0.3863  loss_dice_2: 0.9605  loss_ce_3: 0.1835  loss_mask_3: 0.3878  loss_dice_3: 0.9236  loss_ce_4: 0.1531  loss_mask_4: 0.3832  loss_dice_4: 0.9283  loss_ce_5: 0.1903  loss_mask_5: 0.3784  loss_dice_5: 0.931  loss_ce_6: 0.1723  loss_mask_6: 0.3809  loss_dice_6: 0.9337  loss_ce_7: 0.1519  loss_mask_7: 0.383  loss_dice_7: 0.9455  loss_ce_8: 0.1639  loss_mask_8: 0.3804  loss_dice_8: 0.9233    time: 0.9377  last_time: 0.9507  data_time: 0.0355  last_data_time: 0.0471   lr: 0.0001  max_mem: 29892M
[08/29 14:13:34] d2.utils.events INFO:  eta: 0:00:56  iter: 939  total_loss: 15.63  loss_ce: 0.1588  loss_mask: 0.3832  loss_dice: 0.9668  loss_ce_0: 0.1662  loss_mask_0: 0.4211  loss_dice_0: 1.086  loss_ce_1: 0.2183  loss_mask_1: 0.3948  loss_dice_1: 1.028  loss_ce_2: 0.1949  loss_mask_2: 0.3811  loss_dice_2: 0.9997  loss_ce_3: 0.1999  loss_mask_3: 0.3746  loss_dice_3: 0.9727  loss_ce_4: 0.1808  loss_mask_4: 0.3786  loss_dice_4: 0.9656  loss_ce_5: 0.1723  loss_mask_5: 0.3786  loss_dice_5: 0.97  loss_ce_6: 0.1841  loss_mask_6: 0.3812  loss_dice_6: 0.9752  loss_ce_7: 0.1746  loss_mask_7: 0.3791  loss_dice_7: 0.9663  loss_ce_8: 0.1713  loss_mask_8: 0.3773  loss_dice_8: 0.958    time: 0.9378  last_time: 0.9361  data_time: 0.0400  last_data_time: 0.0411   lr: 0.0001  max_mem: 29892M
[08/29 14:13:52] d2.utils.events INFO:  eta: 0:00:37  iter: 959  total_loss: 14.83  loss_ce: 0.1522  loss_mask: 0.364  loss_dice: 0.9223  loss_ce_0: 0.1561  loss_mask_0: 0.3896  loss_dice_0: 1.031  loss_ce_1: 0.1971  loss_mask_1: 0.3714  loss_dice_1: 0.9978  loss_ce_2: 0.1444  loss_mask_2: 0.3671  loss_dice_2: 0.9569  loss_ce_3: 0.181  loss_mask_3: 0.3679  loss_dice_3: 0.9436  loss_ce_4: 0.157  loss_mask_4: 0.3684  loss_dice_4: 0.9529  loss_ce_5: 0.1535  loss_mask_5: 0.3613  loss_dice_5: 0.9316  loss_ce_6: 0.151  loss_mask_6: 0.364  loss_dice_6: 0.9141  loss_ce_7: 0.1603  loss_mask_7: 0.3613  loss_dice_7: 0.923  loss_ce_8: 0.1688  loss_mask_8: 0.3685  loss_dice_8: 0.9273    time: 0.9378  last_time: 0.9366  data_time: 0.0400  last_data_time: 0.0409   lr: 0.0001  max_mem: 29892M
[08/29 14:14:12] d2.utils.events INFO:  eta: 0:00:18  iter: 979  total_loss: 15.26  loss_ce: 0.1679  loss_mask: 0.3547  loss_dice: 0.9543  loss_ce_0: 0.1772  loss_mask_0: 0.3895  loss_dice_0: 1.064  loss_ce_1: 0.2113  loss_mask_1: 0.3739  loss_dice_1: 1.04  loss_ce_2: 0.2093  loss_mask_2: 0.3659  loss_dice_2: 0.984  loss_ce_3: 0.2099  loss_mask_3: 0.3679  loss_dice_3: 0.9559  loss_ce_4: 0.2049  loss_mask_4: 0.3651  loss_dice_4: 0.9459  loss_ce_5: 0.193  loss_mask_5: 0.3646  loss_dice_5: 0.9574  loss_ce_6: 0.202  loss_mask_6: 0.3597  loss_dice_6: 0.9307  loss_ce_7: 0.1878  loss_mask_7: 0.3554  loss_dice_7: 0.9319  loss_ce_8: 0.1878  loss_mask_8: 0.3589  loss_dice_8: 0.9308    time: 0.9380  last_time: 0.9418  data_time: 0.0416  last_data_time: 0.0468   lr: 0.0001  max_mem: 29892M
[08/29 14:14:31] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Normal/r101_000_1000/model_final.pth
[08/29 14:14:34] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 15.43  loss_ce: 0.1956  loss_mask: 0.394  loss_dice: 0.9303  loss_ce_0: 0.1776  loss_mask_0: 0.4507  loss_dice_0: 1.033  loss_ce_1: 0.1898  loss_mask_1: 0.4105  loss_dice_1: 0.9929  loss_ce_2: 0.1885  loss_mask_2: 0.4119  loss_dice_2: 0.9423  loss_ce_3: 0.1872  loss_mask_3: 0.4107  loss_dice_3: 0.9503  loss_ce_4: 0.2073  loss_mask_4: 0.4027  loss_dice_4: 0.9435  loss_ce_5: 0.1733  loss_mask_5: 0.3958  loss_dice_5: 0.9485  loss_ce_6: 0.1639  loss_mask_6: 0.3976  loss_dice_6: 0.9277  loss_ce_7: 0.1722  loss_mask_7: 0.3947  loss_dice_7: 0.9356  loss_ce_8: 0.1722  loss_mask_8: 0.3931  loss_dice_8: 0.9228    time: 0.9380  last_time: 0.9470  data_time: 0.0403  last_data_time: 0.0463   lr: 0.0001  max_mem: 29892M
[08/29 14:14:34] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:15:36 (0.9380 s / it)
[08/29 14:14:34] d2.engine.hooks INFO: Total training time: 0:15:42 (0:00:06 on hooks)
[08/29 14:14:34] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/29 14:14:34] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/29 14:14:34] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/29 14:14:34] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/29 14:14:34] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/29 14:14:34] d2.evaluation.evaluator INFO: Start inference on 500 batches
[08/29 14:14:38] d2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0047 s/iter. Inference: 0.1928 s/iter. Eval: 0.0656 s/iter. Total: 0.2631 s/iter. ETA=0:02:08
[08/29 14:14:43] d2.evaluation.evaluator INFO: Inference done 30/500. Dataloading: 0.0052 s/iter. Inference: 0.1968 s/iter. Eval: 0.0666 s/iter. Total: 0.2687 s/iter. ETA=0:02:06
[08/29 14:14:48] d2.evaluation.evaluator INFO: Inference done 49/500. Dataloading: 0.0054 s/iter. Inference: 0.1968 s/iter. Eval: 0.0663 s/iter. Total: 0.2685 s/iter. ETA=0:02:01
[08/29 14:14:53] d2.evaluation.evaluator INFO: Inference done 68/500. Dataloading: 0.0054 s/iter. Inference: 0.1980 s/iter. Eval: 0.0665 s/iter. Total: 0.2700 s/iter. ETA=0:01:56
[08/29 14:14:58] d2.evaluation.evaluator INFO: Inference done 87/500. Dataloading: 0.0055 s/iter. Inference: 0.1972 s/iter. Eval: 0.0667 s/iter. Total: 0.2695 s/iter. ETA=0:01:51
[08/29 14:15:03] d2.evaluation.evaluator INFO: Inference done 106/500. Dataloading: 0.0055 s/iter. Inference: 0.1975 s/iter. Eval: 0.0668 s/iter. Total: 0.2699 s/iter. ETA=0:01:46
[08/29 14:15:08] d2.evaluation.evaluator INFO: Inference done 125/500. Dataloading: 0.0056 s/iter. Inference: 0.1977 s/iter. Eval: 0.0670 s/iter. Total: 0.2703 s/iter. ETA=0:01:41
[08/29 14:15:13] d2.evaluation.evaluator INFO: Inference done 144/500. Dataloading: 0.0055 s/iter. Inference: 0.1973 s/iter. Eval: 0.0668 s/iter. Total: 0.2696 s/iter. ETA=0:01:35
[08/29 14:15:19] d2.evaluation.evaluator INFO: Inference done 163/500. Dataloading: 0.0055 s/iter. Inference: 0.1976 s/iter. Eval: 0.0666 s/iter. Total: 0.2698 s/iter. ETA=0:01:30
[08/29 14:15:24] d2.evaluation.evaluator INFO: Inference done 182/500. Dataloading: 0.0054 s/iter. Inference: 0.1976 s/iter. Eval: 0.0665 s/iter. Total: 0.2696 s/iter. ETA=0:01:25
[08/29 14:15:29] d2.evaluation.evaluator INFO: Inference done 201/500. Dataloading: 0.0054 s/iter. Inference: 0.1974 s/iter. Eval: 0.0664 s/iter. Total: 0.2692 s/iter. ETA=0:01:20
[08/29 14:15:34] d2.evaluation.evaluator INFO: Inference done 220/500. Dataloading: 0.0054 s/iter. Inference: 0.1972 s/iter. Eval: 0.0662 s/iter. Total: 0.2688 s/iter. ETA=0:01:15
[08/29 14:15:39] d2.evaluation.evaluator INFO: Inference done 239/500. Dataloading: 0.0054 s/iter. Inference: 0.1970 s/iter. Eval: 0.0662 s/iter. Total: 0.2686 s/iter. ETA=0:01:10
[08/29 14:15:44] d2.evaluation.evaluator INFO: Inference done 258/500. Dataloading: 0.0054 s/iter. Inference: 0.1968 s/iter. Eval: 0.0662 s/iter. Total: 0.2685 s/iter. ETA=0:01:04
[08/29 14:15:49] d2.evaluation.evaluator INFO: Inference done 277/500. Dataloading: 0.0054 s/iter. Inference: 0.1967 s/iter. Eval: 0.0662 s/iter. Total: 0.2683 s/iter. ETA=0:00:59
[08/29 14:15:54] d2.evaluation.evaluator INFO: Inference done 296/500. Dataloading: 0.0054 s/iter. Inference: 0.1965 s/iter. Eval: 0.0662 s/iter. Total: 0.2682 s/iter. ETA=0:00:54
[08/29 14:15:59] d2.evaluation.evaluator INFO: Inference done 315/500. Dataloading: 0.0054 s/iter. Inference: 0.1963 s/iter. Eval: 0.0661 s/iter. Total: 0.2679 s/iter. ETA=0:00:49
[08/29 14:16:04] d2.evaluation.evaluator INFO: Inference done 334/500. Dataloading: 0.0054 s/iter. Inference: 0.1962 s/iter. Eval: 0.0661 s/iter. Total: 0.2678 s/iter. ETA=0:00:44
[08/29 14:16:09] d2.evaluation.evaluator INFO: Inference done 353/500. Dataloading: 0.0054 s/iter. Inference: 0.1961 s/iter. Eval: 0.0662 s/iter. Total: 0.2677 s/iter. ETA=0:00:39
[08/29 14:16:14] d2.evaluation.evaluator INFO: Inference done 372/500. Dataloading: 0.0053 s/iter. Inference: 0.1960 s/iter. Eval: 0.0662 s/iter. Total: 0.2676 s/iter. ETA=0:00:34
[08/29 14:16:19] d2.evaluation.evaluator INFO: Inference done 391/500. Dataloading: 0.0053 s/iter. Inference: 0.1958 s/iter. Eval: 0.0663 s/iter. Total: 0.2675 s/iter. ETA=0:00:29
[08/29 14:16:24] d2.evaluation.evaluator INFO: Inference done 410/500. Dataloading: 0.0053 s/iter. Inference: 0.1958 s/iter. Eval: 0.0663 s/iter. Total: 0.2675 s/iter. ETA=0:00:24
[08/29 14:16:29] d2.evaluation.evaluator INFO: Inference done 429/500. Dataloading: 0.0053 s/iter. Inference: 0.1957 s/iter. Eval: 0.0664 s/iter. Total: 0.2674 s/iter. ETA=0:00:18
[08/29 14:16:34] d2.evaluation.evaluator INFO: Inference done 448/500. Dataloading: 0.0052 s/iter. Inference: 0.1957 s/iter. Eval: 0.0664 s/iter. Total: 0.2674 s/iter. ETA=0:00:13
[08/29 14:16:40] d2.evaluation.evaluator INFO: Inference done 467/500. Dataloading: 0.0052 s/iter. Inference: 0.1957 s/iter. Eval: 0.0664 s/iter. Total: 0.2674 s/iter. ETA=0:00:08
[08/29 14:16:45] d2.evaluation.evaluator INFO: Inference done 486/500. Dataloading: 0.0052 s/iter. Inference: 0.1956 s/iter. Eval: 0.0664 s/iter. Total: 0.2673 s/iter. ETA=0:00:03
[08/29 14:16:48] d2.evaluation.evaluator INFO: Total inference time: 0:02:12.396866 (0.267468 s / iter per device, on 1 devices)
[08/29 14:16:48] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:01:36 (0.195590 s / iter per device, on 1 devices)
[08/29 14:16:48] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evali_yhhoj0 ...
[08/29 14:17:04] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 37.954 | 47.169 | 45.659 |      19       |
| Things | 0.000  | 0.000  | 0.000  |       8       |
| Stuff  | 65.557 | 81.474 | 78.865 |      11       |
[08/29 14:17:04] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.593 | 97.896 | 99.690 |     Stuff     |
| class_8  | 74.848 | 84.273 | 88.816 |     Stuff     |
| class_11 | 86.953 | 89.785 | 96.846 |     Stuff     |
| class_12 | 43.147 | 76.585 | 56.338 |     Stuff     |
| class_13 | 37.591 | 75.751 | 49.624 |     Stuff     |
| class_17 | 48.512 | 65.020 | 74.611 |     Stuff     |
| class_19 | 51.261 | 69.498 | 73.759 |     Stuff     |
| class_20 | 68.979 | 78.461 | 87.914 |     Stuff     |
| class_21 | 89.360 | 90.382 | 98.869 |     Stuff     |
| class_22 | 35.367 | 75.906 | 46.593 |     Stuff     |
| class_23 | 87.518 | 92.654 | 94.457 |     Stuff     |
| class_24 | 0.000  | 0.000  | 0.000  |    Things     |
| class_25 | 0.000  | 0.000  | 0.000  |    Things     |
| class_26 | 0.000  | 0.000  | 0.000  |    Things     |
| class_27 | 0.000  | 0.000  | 0.000  |    Things     |
| class_28 | 0.000  | 0.000  | 0.000  |    Things     |
| class_31 | 0.000  | 0.000  | 0.000  |    Things     |
| class_32 | 0.000  | 0.000  | 0.000  |    Things     |
| class_33 | 0.000  | 0.000  | 0.000  |    Things     |
[08/29 14:17:04] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[08/29 14:17:04] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/29 14:17:04] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/29 14:17:04] d2.evaluation.testing INFO: copypaste: 37.9542,47.1691,45.6589,0.0000,0.0000,0.0000,65.5572,81.4738,78.8654,97.5928,97.8965,99.6898,74.8480,84.2733,88.8158,86.9533,89.7848,96.8464,43.1466,76.5852,56.3380,37.5908,75.7511,49.6241,48.5123,65.0200,74.6114,51.2606,69.4976,73.7589,68.9787,78.4611,87.9144,89.3604,90.3822,98.8695,35.3674,75.9064,46.5934,87.5185,92.6540,94.4573,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000
