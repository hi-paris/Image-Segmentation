[08/28 22:36:08] detectron2 INFO: Rank of current process: 0. World size: 1
[08/28 22:36:09] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/28 22:36:09] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_exp.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/28 22:36:09] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_exp.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r101_000_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/28 22:36:09] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r101_000_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/28 22:36:09] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/r101_000_1000/config.yaml
[08/28 22:36:09] d2.utils.env INFO: Using a generated random seed 11524400
[08/28 22:37:48] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[08/28 22:37:48] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/28 22:37:48] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/28 22:37:48] d2.data.build INFO: Using training sampler TrainingSampler
[08/28 22:37:48] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/28 22:37:48] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/28 22:37:48] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/28 22:37:48] d2.data.build INFO: Making batched data loader with batch_size=8
[08/28 22:37:48] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/28 22:37:48] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[08/28 22:37:48] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[08/28 22:37:50] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[08/28 22:37:50] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.10.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.11.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.12.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.13.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.14.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.15.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.16.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.17.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.18.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.19.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.20.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.21.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.22.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.6.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.7.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.8.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.9.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mcriterion.empty_weight[0m
[08/28 22:37:50] d2.engine.train_loop INFO: Starting training from iteration 0
[08/28 22:38:15] d2.utils.events INFO:  eta: 0:17:30  iter: 19  total_loss: 29.93  loss_ce: 1.132  loss_mask: 0.2514  loss_dice: 1.444  loss_ce_0: 1.291  loss_mask_0: 0.2711  loss_dice_0: 1.722  loss_ce_1: 1.371  loss_mask_1: 0.2705  loss_dice_1: 1.609  loss_ce_2: 1.237  loss_mask_2: 0.2614  loss_dice_2: 1.528  loss_ce_3: 1.142  loss_mask_3: 0.2532  loss_dice_3: 1.505  loss_ce_4: 1.143  loss_mask_4: 0.2546  loss_dice_4: 1.46  loss_ce_5: 1.161  loss_mask_5: 0.2513  loss_dice_5: 1.461  loss_ce_6: 1.144  loss_mask_6: 0.2517  loss_dice_6: 1.445  loss_ce_7: 1.15  loss_mask_7: 0.2505  loss_dice_7: 1.427  loss_ce_8: 1.155  loss_mask_8: 0.2475  loss_dice_8: 1.41    time: 1.0800  last_time: 1.0833  data_time: 0.1037  last_data_time: 0.0682   lr: 0.0001  max_mem: 31302M
[08/28 22:38:36] d2.utils.events INFO:  eta: 0:17:06  iter: 39  total_loss: 24.14  loss_ce: 0.7045  loss_mask: 0.25  loss_dice: 1.344  loss_ce_0: 0.7948  loss_mask_0: 0.293  loss_dice_0: 1.62  loss_ce_1: 0.8387  loss_mask_1: 0.275  loss_dice_1: 1.524  loss_ce_2: 0.7599  loss_mask_2: 0.2618  loss_dice_2: 1.429  loss_ce_3: 0.7677  loss_mask_3: 0.2526  loss_dice_3: 1.386  loss_ce_4: 0.7092  loss_mask_4: 0.2519  loss_dice_4: 1.343  loss_ce_5: 0.6921  loss_mask_5: 0.2513  loss_dice_5: 1.387  loss_ce_6: 0.7038  loss_mask_6: 0.2488  loss_dice_6: 1.339  loss_ce_7: 0.6891  loss_mask_7: 0.252  loss_dice_7: 1.38  loss_ce_8: 0.6852  loss_mask_8: 0.2501  loss_dice_8: 1.386    time: 1.0758  last_time: 1.1220  data_time: 0.0718  last_data_time: 0.0552   lr: 0.0001  max_mem: 31302M
[08/28 22:38:58] d2.utils.events INFO:  eta: 0:16:40  iter: 59  total_loss: 24.13  loss_ce: 0.697  loss_mask: 0.213  loss_dice: 1.336  loss_ce_0: 0.7783  loss_mask_0: 0.2471  loss_dice_0: 1.671  loss_ce_1: 0.8492  loss_mask_1: 0.2256  loss_dice_1: 1.502  loss_ce_2: 0.82  loss_mask_2: 0.2178  loss_dice_2: 1.436  loss_ce_3: 0.7483  loss_mask_3: 0.2087  loss_dice_3: 1.39  loss_ce_4: 0.7181  loss_mask_4: 0.2114  loss_dice_4: 1.374  loss_ce_5: 0.7231  loss_mask_5: 0.2124  loss_dice_5: 1.369  loss_ce_6: 0.6981  loss_mask_6: 0.2135  loss_dice_6: 1.339  loss_ce_7: 0.6973  loss_mask_7: 0.2125  loss_dice_7: 1.362  loss_ce_8: 0.7001  loss_mask_8: 0.2178  loss_dice_8: 1.339    time: 1.0726  last_time: 1.1248  data_time: 0.0705  last_data_time: 0.0792   lr: 0.0001  max_mem: 31414M
[08/28 22:39:20] d2.utils.events INFO:  eta: 0:16:23  iter: 79  total_loss: 23.37  loss_ce: 0.6259  loss_mask: 0.2007  loss_dice: 1.373  loss_ce_0: 0.7309  loss_mask_0: 0.2298  loss_dice_0: 1.644  loss_ce_1: 0.7925  loss_mask_1: 0.2112  loss_dice_1: 1.503  loss_ce_2: 0.72  loss_mask_2: 0.2147  loss_dice_2: 1.446  loss_ce_3: 0.7384  loss_mask_3: 0.2101  loss_dice_3: 1.396  loss_ce_4: 0.7067  loss_mask_4: 0.2052  loss_dice_4: 1.358  loss_ce_5: 0.6794  loss_mask_5: 0.205  loss_dice_5: 1.392  loss_ce_6: 0.6458  loss_mask_6: 0.2046  loss_dice_6: 1.347  loss_ce_7: 0.6527  loss_mask_7: 0.2114  loss_dice_7: 1.372  loss_ce_8: 0.6842  loss_mask_8: 0.2061  loss_dice_8: 1.375    time: 1.0783  last_time: 1.1339  data_time: 0.0763  last_data_time: 0.0945   lr: 0.0001  max_mem: 31874M
[08/28 22:39:42] d2.utils.events INFO:  eta: 0:16:12  iter: 99  total_loss: 22.53  loss_ce: 0.5739  loss_mask: 0.1852  loss_dice: 1.365  loss_ce_0: 0.6841  loss_mask_0: 0.2128  loss_dice_0: 1.633  loss_ce_1: 0.7836  loss_mask_1: 0.2027  loss_dice_1: 1.548  loss_ce_2: 0.6946  loss_mask_2: 0.1993  loss_dice_2: 1.445  loss_ce_3: 0.6676  loss_mask_3: 0.1934  loss_dice_3: 1.375  loss_ce_4: 0.6313  loss_mask_4: 0.1921  loss_dice_4: 1.406  loss_ce_5: 0.597  loss_mask_5: 0.1902  loss_dice_5: 1.356  loss_ce_6: 0.601  loss_mask_6: 0.1889  loss_dice_6: 1.37  loss_ce_7: 0.5998  loss_mask_7: 0.1883  loss_dice_7: 1.363  loss_ce_8: 0.5895  loss_mask_8: 0.1864  loss_dice_8: 1.333    time: 1.0846  last_time: 1.1249  data_time: 0.0829  last_data_time: 0.0790   lr: 0.0001  max_mem: 31874M
[08/28 22:40:03] d2.utils.events INFO:  eta: 0:15:49  iter: 119  total_loss: 21.83  loss_ce: 0.6289  loss_mask: 0.2025  loss_dice: 1.281  loss_ce_0: 0.7159  loss_mask_0: 0.2316  loss_dice_0: 1.546  loss_ce_1: 0.7632  loss_mask_1: 0.2099  loss_dice_1: 1.423  loss_ce_2: 0.7021  loss_mask_2: 0.2015  loss_dice_2: 1.356  loss_ce_3: 0.667  loss_mask_3: 0.1975  loss_dice_3: 1.305  loss_ce_4: 0.6513  loss_mask_4: 0.199  loss_dice_4: 1.274  loss_ce_5: 0.6389  loss_mask_5: 0.1998  loss_dice_5: 1.263  loss_ce_6: 0.6032  loss_mask_6: 0.2025  loss_dice_6: 1.259  loss_ce_7: 0.6079  loss_mask_7: 0.2038  loss_dice_7: 1.274  loss_ce_8: 0.6427  loss_mask_8: 0.2014  loss_dice_8: 1.24    time: 1.0829  last_time: 1.0959  data_time: 0.0762  last_data_time: 0.0632   lr: 0.0001  max_mem: 31874M
[08/28 22:40:25] d2.utils.events INFO:  eta: 0:15:28  iter: 139  total_loss: 22.59  loss_ce: 0.5717  loss_mask: 0.1967  loss_dice: 1.376  loss_ce_0: 0.6638  loss_mask_0: 0.2263  loss_dice_0: 1.626  loss_ce_1: 0.7853  loss_mask_1: 0.2123  loss_dice_1: 1.486  loss_ce_2: 0.7164  loss_mask_2: 0.2074  loss_dice_2: 1.413  loss_ce_3: 0.6574  loss_mask_3: 0.1999  loss_dice_3: 1.379  loss_ce_4: 0.6185  loss_mask_4: 0.1998  loss_dice_4: 1.377  loss_ce_5: 0.6232  loss_mask_5: 0.196  loss_dice_5: 1.355  loss_ce_6: 0.6028  loss_mask_6: 0.1978  loss_dice_6: 1.37  loss_ce_7: 0.6034  loss_mask_7: 0.2029  loss_dice_7: 1.358  loss_ce_8: 0.588  loss_mask_8: 0.1974  loss_dice_8: 1.387    time: 1.0819  last_time: 1.1254  data_time: 0.0739  last_data_time: 0.0873   lr: 0.0001  max_mem: 31874M
[08/28 22:40:47] d2.utils.events INFO:  eta: 0:15:08  iter: 159  total_loss: 21.06  loss_ce: 0.5587  loss_mask: 0.1847  loss_dice: 1.317  loss_ce_0: 0.6214  loss_mask_0: 0.2109  loss_dice_0: 1.54  loss_ce_1: 0.7208  loss_mask_1: 0.2014  loss_dice_1: 1.451  loss_ce_2: 0.6272  loss_mask_2: 0.1913  loss_dice_2: 1.34  loss_ce_3: 0.604  loss_mask_3: 0.1872  loss_dice_3: 1.348  loss_ce_4: 0.6142  loss_mask_4: 0.1859  loss_dice_4: 1.324  loss_ce_5: 0.5627  loss_mask_5: 0.1865  loss_dice_5: 1.307  loss_ce_6: 0.5684  loss_mask_6: 0.1898  loss_dice_6: 1.305  loss_ce_7: 0.5769  loss_mask_7: 0.1892  loss_dice_7: 1.318  loss_ce_8: 0.5945  loss_mask_8: 0.1847  loss_dice_8: 1.288    time: 1.0827  last_time: 1.0937  data_time: 0.0750  last_data_time: 0.0723   lr: 0.0001  max_mem: 31874M
[08/28 22:41:09] d2.utils.events INFO:  eta: 0:14:47  iter: 179  total_loss: 22.17  loss_ce: 0.5999  loss_mask: 0.1962  loss_dice: 1.294  loss_ce_0: 0.6246  loss_mask_0: 0.2225  loss_dice_0: 1.659  loss_ce_1: 0.7064  loss_mask_1: 0.2091  loss_dice_1: 1.486  loss_ce_2: 0.6483  loss_mask_2: 0.2018  loss_dice_2: 1.412  loss_ce_3: 0.5949  loss_mask_3: 0.2  loss_dice_3: 1.365  loss_ce_4: 0.5683  loss_mask_4: 0.2021  loss_dice_4: 1.36  loss_ce_5: 0.5648  loss_mask_5: 0.2023  loss_dice_5: 1.352  loss_ce_6: 0.5887  loss_mask_6: 0.1982  loss_dice_6: 1.333  loss_ce_7: 0.5873  loss_mask_7: 0.1964  loss_dice_7: 1.345  loss_ce_8: 0.5596  loss_mask_8: 0.1898  loss_dice_8: 1.319    time: 1.0838  last_time: 1.1250  data_time: 0.0786  last_data_time: 0.0744   lr: 0.0001  max_mem: 31874M
[08/28 22:41:31] d2.utils.events INFO:  eta: 0:14:26  iter: 199  total_loss: 21.73  loss_ce: 0.5982  loss_mask: 0.194  loss_dice: 1.252  loss_ce_0: 0.6642  loss_mask_0: 0.2153  loss_dice_0: 1.541  loss_ce_1: 0.72  loss_mask_1: 0.1975  loss_dice_1: 1.417  loss_ce_2: 0.6866  loss_mask_2: 0.1908  loss_dice_2: 1.341  loss_ce_3: 0.6275  loss_mask_3: 0.1877  loss_dice_3: 1.352  loss_ce_4: 0.5784  loss_mask_4: 0.1911  loss_dice_4: 1.288  loss_ce_5: 0.5857  loss_mask_5: 0.193  loss_dice_5: 1.329  loss_ce_6: 0.5909  loss_mask_6: 0.1923  loss_dice_6: 1.267  loss_ce_7: 0.5847  loss_mask_7: 0.1905  loss_dice_7: 1.285  loss_ce_8: 0.5599  loss_mask_8: 0.1906  loss_dice_8: 1.269    time: 1.0850  last_time: 1.0701  data_time: 0.0900  last_data_time: 0.0670   lr: 0.0001  max_mem: 31874M
[08/28 22:41:53] d2.utils.events INFO:  eta: 0:14:05  iter: 219  total_loss: 21.54  loss_ce: 0.5366  loss_mask: 0.1939  loss_dice: 1.298  loss_ce_0: 0.6312  loss_mask_0: 0.2201  loss_dice_0: 1.575  loss_ce_1: 0.6597  loss_mask_1: 0.2095  loss_dice_1: 1.433  loss_ce_2: 0.6129  loss_mask_2: 0.2017  loss_dice_2: 1.395  loss_ce_3: 0.5874  loss_mask_3: 0.2039  loss_dice_3: 1.335  loss_ce_4: 0.5738  loss_mask_4: 0.2027  loss_dice_4: 1.327  loss_ce_5: 0.5639  loss_mask_5: 0.1989  loss_dice_5: 1.325  loss_ce_6: 0.5123  loss_mask_6: 0.1982  loss_dice_6: 1.289  loss_ce_7: 0.5307  loss_mask_7: 0.1952  loss_dice_7: 1.344  loss_ce_8: 0.5626  loss_mask_8: 0.1932  loss_dice_8: 1.315    time: 1.0859  last_time: 1.0792  data_time: 0.0779  last_data_time: 0.0822   lr: 0.0001  max_mem: 31874M
[08/28 22:42:15] d2.utils.events INFO:  eta: 0:13:45  iter: 239  total_loss: 21.91  loss_ce: 0.6399  loss_mask: 0.1841  loss_dice: 1.302  loss_ce_0: 0.6794  loss_mask_0: 0.2084  loss_dice_0: 1.554  loss_ce_1: 0.7813  loss_mask_1: 0.1989  loss_dice_1: 1.449  loss_ce_2: 0.7027  loss_mask_2: 0.1904  loss_dice_2: 1.388  loss_ce_3: 0.6907  loss_mask_3: 0.1894  loss_dice_3: 1.357  loss_ce_4: 0.6619  loss_mask_4: 0.1834  loss_dice_4: 1.318  loss_ce_5: 0.6551  loss_mask_5: 0.1808  loss_dice_5: 1.359  loss_ce_6: 0.6629  loss_mask_6: 0.1815  loss_dice_6: 1.295  loss_ce_7: 0.6407  loss_mask_7: 0.1821  loss_dice_7: 1.301  loss_ce_8: 0.6392  loss_mask_8: 0.1831  loss_dice_8: 1.316    time: 1.0874  last_time: 1.0914  data_time: 0.0789  last_data_time: 0.0943   lr: 0.0001  max_mem: 32341M
[08/28 22:42:37] d2.utils.events INFO:  eta: 0:13:24  iter: 259  total_loss: 21.7  loss_ce: 0.5658  loss_mask: 0.1935  loss_dice: 1.297  loss_ce_0: 0.6358  loss_mask_0: 0.2247  loss_dice_0: 1.493  loss_ce_1: 0.702  loss_mask_1: 0.2154  loss_dice_1: 1.401  loss_ce_2: 0.6497  loss_mask_2: 0.2028  loss_dice_2: 1.366  loss_ce_3: 0.6029  loss_mask_3: 0.1983  loss_dice_3: 1.315  loss_ce_4: 0.5608  loss_mask_4: 0.1946  loss_dice_4: 1.338  loss_ce_5: 0.6076  loss_mask_5: 0.1928  loss_dice_5: 1.343  loss_ce_6: 0.5597  loss_mask_6: 0.1927  loss_dice_6: 1.27  loss_ce_7: 0.5621  loss_mask_7: 0.1937  loss_dice_7: 1.286  loss_ce_8: 0.5703  loss_mask_8: 0.1915  loss_dice_8: 1.284    time: 1.0885  last_time: 1.1230  data_time: 0.0768  last_data_time: 0.0869   lr: 0.0001  max_mem: 32341M
[08/28 22:42:59] d2.utils.events INFO:  eta: 0:13:02  iter: 279  total_loss: 21.48  loss_ce: 0.5662  loss_mask: 0.179  loss_dice: 1.28  loss_ce_0: 0.6212  loss_mask_0: 0.2037  loss_dice_0: 1.533  loss_ce_1: 0.7204  loss_mask_1: 0.1895  loss_dice_1: 1.429  loss_ce_2: 0.6104  loss_mask_2: 0.1892  loss_dice_2: 1.387  loss_ce_3: 0.5932  loss_mask_3: 0.1834  loss_dice_3: 1.312  loss_ce_4: 0.5348  loss_mask_4: 0.1762  loss_dice_4: 1.315  loss_ce_5: 0.5683  loss_mask_5: 0.1799  loss_dice_5: 1.301  loss_ce_6: 0.5625  loss_mask_6: 0.1771  loss_dice_6: 1.258  loss_ce_7: 0.5408  loss_mask_7: 0.181  loss_dice_7: 1.3  loss_ce_8: 0.5667  loss_mask_8: 0.1807  loss_dice_8: 1.288    time: 1.0896  last_time: 1.0586  data_time: 0.0833  last_data_time: 0.0717   lr: 0.0001  max_mem: 32689M
[08/28 22:43:21] d2.utils.events INFO:  eta: 0:12:41  iter: 299  total_loss: 21.85  loss_ce: 0.5891  loss_mask: 0.1921  loss_dice: 1.29  loss_ce_0: 0.667  loss_mask_0: 0.221  loss_dice_0: 1.496  loss_ce_1: 0.7116  loss_mask_1: 0.2136  loss_dice_1: 1.436  loss_ce_2: 0.6351  loss_mask_2: 0.1952  loss_dice_2: 1.389  loss_ce_3: 0.6234  loss_mask_3: 0.1933  loss_dice_3: 1.352  loss_ce_4: 0.5827  loss_mask_4: 0.1954  loss_dice_4: 1.364  loss_ce_5: 0.5823  loss_mask_5: 0.1919  loss_dice_5: 1.335  loss_ce_6: 0.566  loss_mask_6: 0.1939  loss_dice_6: 1.274  loss_ce_7: 0.5764  loss_mask_7: 0.194  loss_dice_7: 1.324  loss_ce_8: 0.5667  loss_mask_8: 0.192  loss_dice_8: 1.338    time: 1.0905  last_time: 1.1040  data_time: 0.0803  last_data_time: 0.0920   lr: 0.0001  max_mem: 32689M
[08/28 22:43:43] d2.utils.events INFO:  eta: 0:12:18  iter: 319  total_loss: 20.33  loss_ce: 0.4919  loss_mask: 0.2068  loss_dice: 1.219  loss_ce_0: 0.5827  loss_mask_0: 0.2324  loss_dice_0: 1.396  loss_ce_1: 0.6504  loss_mask_1: 0.2155  loss_dice_1: 1.335  loss_ce_2: 0.5681  loss_mask_2: 0.2071  loss_dice_2: 1.256  loss_ce_3: 0.5469  loss_mask_3: 0.2051  loss_dice_3: 1.224  loss_ce_4: 0.5234  loss_mask_4: 0.2037  loss_dice_4: 1.224  loss_ce_5: 0.5066  loss_mask_5: 0.2084  loss_dice_5: 1.246  loss_ce_6: 0.521  loss_mask_6: 0.2056  loss_dice_6: 1.207  loss_ce_7: 0.5009  loss_mask_7: 0.2085  loss_dice_7: 1.213  loss_ce_8: 0.5031  loss_mask_8: 0.203  loss_dice_8: 1.223    time: 1.0893  last_time: 1.0405  data_time: 0.0747  last_data_time: 0.0636   lr: 0.0001  max_mem: 32689M
[08/28 22:44:05] d2.utils.events INFO:  eta: 0:11:57  iter: 339  total_loss: 22.42  loss_ce: 0.5738  loss_mask: 0.1892  loss_dice: 1.318  loss_ce_0: 0.6786  loss_mask_0: 0.2294  loss_dice_0: 1.545  loss_ce_1: 0.7224  loss_mask_1: 0.2049  loss_dice_1: 1.479  loss_ce_2: 0.6531  loss_mask_2: 0.1906  loss_dice_2: 1.424  loss_ce_3: 0.6637  loss_mask_3: 0.192  loss_dice_3: 1.325  loss_ce_4: 0.6164  loss_mask_4: 0.1935  loss_dice_4: 1.347  loss_ce_5: 0.5854  loss_mask_5: 0.1909  loss_dice_5: 1.363  loss_ce_6: 0.5779  loss_mask_6: 0.1932  loss_dice_6: 1.318  loss_ce_7: 0.5979  loss_mask_7: 0.1923  loss_dice_7: 1.348  loss_ce_8: 0.5743  loss_mask_8: 0.1888  loss_dice_8: 1.343    time: 1.0900  last_time: 1.1442  data_time: 0.0764  last_data_time: 0.0861   lr: 0.0001  max_mem: 32689M
[08/28 22:44:27] d2.utils.events INFO:  eta: 0:11:35  iter: 359  total_loss: 21.05  loss_ce: 0.5746  loss_mask: 0.1777  loss_dice: 1.253  loss_ce_0: 0.6525  loss_mask_0: 0.211  loss_dice_0: 1.503  loss_ce_1: 0.7197  loss_mask_1: 0.1876  loss_dice_1: 1.399  loss_ce_2: 0.6622  loss_mask_2: 0.1818  loss_dice_2: 1.275  loss_ce_3: 0.6088  loss_mask_3: 0.1819  loss_dice_3: 1.293  loss_ce_4: 0.5727  loss_mask_4: 0.1781  loss_dice_4: 1.283  loss_ce_5: 0.5705  loss_mask_5: 0.1785  loss_dice_5: 1.261  loss_ce_6: 0.5782  loss_mask_6: 0.1793  loss_dice_6: 1.264  loss_ce_7: 0.5719  loss_mask_7: 0.1756  loss_dice_7: 1.268  loss_ce_8: 0.5747  loss_mask_8: 0.1752  loss_dice_8: 1.25    time: 1.0907  last_time: 1.1007  data_time: 0.0791  last_data_time: 0.0736   lr: 0.0001  max_mem: 32689M
[08/28 22:44:49] d2.utils.events INFO:  eta: 0:11:14  iter: 379  total_loss: 21.33  loss_ce: 0.5942  loss_mask: 0.1775  loss_dice: 1.267  loss_ce_0: 0.6317  loss_mask_0: 0.2099  loss_dice_0: 1.563  loss_ce_1: 0.7109  loss_mask_1: 0.1974  loss_dice_1: 1.446  loss_ce_2: 0.6648  loss_mask_2: 0.1888  loss_dice_2: 1.37  loss_ce_3: 0.604  loss_mask_3: 0.1865  loss_dice_3: 1.308  loss_ce_4: 0.5903  loss_mask_4: 0.1838  loss_dice_4: 1.291  loss_ce_5: 0.5826  loss_mask_5: 0.1817  loss_dice_5: 1.311  loss_ce_6: 0.5698  loss_mask_6: 0.1797  loss_dice_6: 1.305  loss_ce_7: 0.5546  loss_mask_7: 0.177  loss_dice_7: 1.327  loss_ce_8: 0.5752  loss_mask_8: 0.1781  loss_dice_8: 1.274    time: 1.0909  last_time: 1.1317  data_time: 0.0756  last_data_time: 0.0703   lr: 0.0001  max_mem: 32689M
[08/28 22:45:11] d2.utils.events INFO:  eta: 0:10:52  iter: 399  total_loss: 20.4  loss_ce: 0.5189  loss_mask: 0.1756  loss_dice: 1.233  loss_ce_0: 0.5976  loss_mask_0: 0.2127  loss_dice_0: 1.461  loss_ce_1: 0.6557  loss_mask_1: 0.1851  loss_dice_1: 1.365  loss_ce_2: 0.6182  loss_mask_2: 0.1842  loss_dice_2: 1.335  loss_ce_3: 0.566  loss_mask_3: 0.181  loss_dice_3: 1.271  loss_ce_4: 0.5184  loss_mask_4: 0.1804  loss_dice_4: 1.251  loss_ce_5: 0.5432  loss_mask_5: 0.1768  loss_dice_5: 1.237  loss_ce_6: 0.5125  loss_mask_6: 0.1761  loss_dice_6: 1.208  loss_ce_7: 0.5119  loss_mask_7: 0.1786  loss_dice_7: 1.265  loss_ce_8: 0.5313  loss_mask_8: 0.1756  loss_dice_8: 1.244    time: 1.0912  last_time: 1.0964  data_time: 0.0768  last_data_time: 0.0654   lr: 0.0001  max_mem: 32689M
[08/28 22:45:32] d2.utils.events INFO:  eta: 0:10:30  iter: 419  total_loss: 21.03  loss_ce: 0.5092  loss_mask: 0.1815  loss_dice: 1.31  loss_ce_0: 0.5796  loss_mask_0: 0.2001  loss_dice_0: 1.495  loss_ce_1: 0.6796  loss_mask_1: 0.1946  loss_dice_1: 1.452  loss_ce_2: 0.6108  loss_mask_2: 0.1803  loss_dice_2: 1.349  loss_ce_3: 0.5604  loss_mask_3: 0.1797  loss_dice_3: 1.274  loss_ce_4: 0.5391  loss_mask_4: 0.1798  loss_dice_4: 1.319  loss_ce_5: 0.5331  loss_mask_5: 0.1783  loss_dice_5: 1.309  loss_ce_6: 0.5224  loss_mask_6: 0.1829  loss_dice_6: 1.272  loss_ce_7: 0.5162  loss_mask_7: 0.1824  loss_dice_7: 1.291  loss_ce_8: 0.5222  loss_mask_8: 0.1837  loss_dice_8: 1.3    time: 1.0910  last_time: 1.0572  data_time: 0.0751  last_data_time: 0.0776   lr: 0.0001  max_mem: 32689M
[08/28 22:45:54] d2.utils.events INFO:  eta: 0:10:09  iter: 439  total_loss: 20.07  loss_ce: 0.4816  loss_mask: 0.1762  loss_dice: 1.233  loss_ce_0: 0.5741  loss_mask_0: 0.2028  loss_dice_0: 1.487  loss_ce_1: 0.6392  loss_mask_1: 0.1958  loss_dice_1: 1.371  loss_ce_2: 0.5362  loss_mask_2: 0.1907  loss_dice_2: 1.307  loss_ce_3: 0.5157  loss_mask_3: 0.1812  loss_dice_3: 1.317  loss_ce_4: 0.4724  loss_mask_4: 0.1828  loss_dice_4: 1.261  loss_ce_5: 0.5022  loss_mask_5: 0.1776  loss_dice_5: 1.248  loss_ce_6: 0.4806  loss_mask_6: 0.1767  loss_dice_6: 1.227  loss_ce_7: 0.4948  loss_mask_7: 0.1784  loss_dice_7: 1.214  loss_ce_8: 0.4877  loss_mask_8: 0.1759  loss_dice_8: 1.224    time: 1.0911  last_time: 1.0920  data_time: 0.0773  last_data_time: 0.0981   lr: 0.0001  max_mem: 32689M
[08/28 22:46:16] d2.utils.events INFO:  eta: 0:09:47  iter: 459  total_loss: 20.77  loss_ce: 0.5521  loss_mask: 0.1727  loss_dice: 1.237  loss_ce_0: 0.6226  loss_mask_0: 0.1979  loss_dice_0: 1.456  loss_ce_1: 0.6747  loss_mask_1: 0.1825  loss_dice_1: 1.361  loss_ce_2: 0.6379  loss_mask_2: 0.1794  loss_dice_2: 1.32  loss_ce_3: 0.5844  loss_mask_3: 0.1731  loss_dice_3: 1.25  loss_ce_4: 0.5785  loss_mask_4: 0.1764  loss_dice_4: 1.263  loss_ce_5: 0.5778  loss_mask_5: 0.173  loss_dice_5: 1.292  loss_ce_6: 0.53  loss_mask_6: 0.1735  loss_dice_6: 1.227  loss_ce_7: 0.5269  loss_mask_7: 0.1709  loss_dice_7: 1.26  loss_ce_8: 0.5357  loss_mask_8: 0.1701  loss_dice_8: 1.252    time: 1.0907  last_time: 1.1489  data_time: 0.0728  last_data_time: 0.0657   lr: 0.0001  max_mem: 32689M
[08/28 22:46:38] d2.utils.events INFO:  eta: 0:09:25  iter: 479  total_loss: 20.6  loss_ce: 0.5748  loss_mask: 0.1773  loss_dice: 1.188  loss_ce_0: 0.5928  loss_mask_0: 0.2079  loss_dice_0: 1.437  loss_ce_1: 0.6805  loss_mask_1: 0.1919  loss_dice_1: 1.34  loss_ce_2: 0.6498  loss_mask_2: 0.1827  loss_dice_2: 1.266  loss_ce_3: 0.5981  loss_mask_3: 0.1799  loss_dice_3: 1.213  loss_ce_4: 0.5678  loss_mask_4: 0.1806  loss_dice_4: 1.219  loss_ce_5: 0.5574  loss_mask_5: 0.1779  loss_dice_5: 1.247  loss_ce_6: 0.5555  loss_mask_6: 0.1776  loss_dice_6: 1.205  loss_ce_7: 0.5744  loss_mask_7: 0.1795  loss_dice_7: 1.223  loss_ce_8: 0.5676  loss_mask_8: 0.1789  loss_dice_8: 1.182    time: 1.0902  last_time: 1.0683  data_time: 0.0750  last_data_time: 0.0669   lr: 0.0001  max_mem: 32689M
[08/28 22:46:59] d2.utils.events INFO:  eta: 0:09:03  iter: 499  total_loss: 20.76  loss_ce: 0.5002  loss_mask: 0.1715  loss_dice: 1.212  loss_ce_0: 0.5962  loss_mask_0: 0.1931  loss_dice_0: 1.428  loss_ce_1: 0.7039  loss_mask_1: 0.1773  loss_dice_1: 1.357  loss_ce_2: 0.6403  loss_mask_2: 0.1794  loss_dice_2: 1.293  loss_ce_3: 0.5641  loss_mask_3: 0.1756  loss_dice_3: 1.239  loss_ce_4: 0.5235  loss_mask_4: 0.1759  loss_dice_4: 1.23  loss_ce_5: 0.5341  loss_mask_5: 0.173  loss_dice_5: 1.243  loss_ce_6: 0.4868  loss_mask_6: 0.1753  loss_dice_6: 1.237  loss_ce_7: 0.5031  loss_mask_7: 0.1737  loss_dice_7: 1.24  loss_ce_8: 0.5426  loss_mask_8: 0.1741  loss_dice_8: 1.224    time: 1.0900  last_time: 1.0812  data_time: 0.0726  last_data_time: 0.0675   lr: 0.0001  max_mem: 32689M
[08/28 22:47:22] d2.utils.events INFO:  eta: 0:08:41  iter: 519  total_loss: 21.02  loss_ce: 0.5502  loss_mask: 0.1775  loss_dice: 1.264  loss_ce_0: 0.6099  loss_mask_0: 0.1987  loss_dice_0: 1.508  loss_ce_1: 0.7069  loss_mask_1: 0.1798  loss_dice_1: 1.399  loss_ce_2: 0.6498  loss_mask_2: 0.1829  loss_dice_2: 1.321  loss_ce_3: 0.6029  loss_mask_3: 0.1793  loss_dice_3: 1.298  loss_ce_4: 0.5656  loss_mask_4: 0.1815  loss_dice_4: 1.29  loss_ce_5: 0.5533  loss_mask_5: 0.181  loss_dice_5: 1.296  loss_ce_6: 0.5752  loss_mask_6: 0.1784  loss_dice_6: 1.257  loss_ce_7: 0.5522  loss_mask_7: 0.1789  loss_dice_7: 1.262  loss_ce_8: 0.5456  loss_mask_8: 0.1786  loss_dice_8: 1.259    time: 1.0906  last_time: 1.1936  data_time: 0.0793  last_data_time: 0.0790   lr: 0.0001  max_mem: 32689M
[08/28 22:47:44] d2.utils.events INFO:  eta: 0:08:20  iter: 539  total_loss: 21.24  loss_ce: 0.5436  loss_mask: 0.1768  loss_dice: 1.261  loss_ce_0: 0.6496  loss_mask_0: 0.1967  loss_dice_0: 1.512  loss_ce_1: 0.7015  loss_mask_1: 0.1864  loss_dice_1: 1.447  loss_ce_2: 0.6242  loss_mask_2: 0.1794  loss_dice_2: 1.34  loss_ce_3: 0.5812  loss_mask_3: 0.1802  loss_dice_3: 1.278  loss_ce_4: 0.5813  loss_mask_4: 0.1797  loss_dice_4: 1.297  loss_ce_5: 0.5692  loss_mask_5: 0.1797  loss_dice_5: 1.261  loss_ce_6: 0.5384  loss_mask_6: 0.1802  loss_dice_6: 1.267  loss_ce_7: 0.5464  loss_mask_7: 0.1813  loss_dice_7: 1.246  loss_ce_8: 0.5566  loss_mask_8: 0.1794  loss_dice_8: 1.25    time: 1.0913  last_time: 1.0910  data_time: 0.0770  last_data_time: 0.0792   lr: 0.0001  max_mem: 32689M
[08/28 22:48:06] d2.utils.events INFO:  eta: 0:07:58  iter: 559  total_loss: 20.63  loss_ce: 0.5236  loss_mask: 0.1787  loss_dice: 1.26  loss_ce_0: 0.5645  loss_mask_0: 0.2125  loss_dice_0: 1.444  loss_ce_1: 0.6685  loss_mask_1: 0.1927  loss_dice_1: 1.355  loss_ce_2: 0.6146  loss_mask_2: 0.1845  loss_dice_2: 1.325  loss_ce_3: 0.5564  loss_mask_3: 0.1796  loss_dice_3: 1.288  loss_ce_4: 0.5553  loss_mask_4: 0.1782  loss_dice_4: 1.273  loss_ce_5: 0.5326  loss_mask_5: 0.1791  loss_dice_5: 1.249  loss_ce_6: 0.4935  loss_mask_6: 0.1803  loss_dice_6: 1.28  loss_ce_7: 0.5234  loss_mask_7: 0.1791  loss_dice_7: 1.284  loss_ce_8: 0.5014  loss_mask_8: 0.1798  loss_dice_8: 1.266    time: 1.0911  last_time: 1.1271  data_time: 0.0733  last_data_time: 0.0707   lr: 0.0001  max_mem: 32689M
[08/28 22:48:28] d2.utils.events INFO:  eta: 0:07:37  iter: 579  total_loss: 19.4  loss_ce: 0.494  loss_mask: 0.1795  loss_dice: 1.21  loss_ce_0: 0.5955  loss_mask_0: 0.2045  loss_dice_0: 1.438  loss_ce_1: 0.6066  loss_mask_1: 0.1834  loss_dice_1: 1.361  loss_ce_2: 0.5721  loss_mask_2: 0.1793  loss_dice_2: 1.277  loss_ce_3: 0.5429  loss_mask_3: 0.1812  loss_dice_3: 1.219  loss_ce_4: 0.5231  loss_mask_4: 0.1777  loss_dice_4: 1.239  loss_ce_5: 0.4981  loss_mask_5: 0.1815  loss_dice_5: 1.235  loss_ce_6: 0.4772  loss_mask_6: 0.1774  loss_dice_6: 1.213  loss_ce_7: 0.5134  loss_mask_7: 0.1749  loss_dice_7: 1.202  loss_ce_8: 0.5079  loss_mask_8: 0.175  loss_dice_8: 1.21    time: 1.0913  last_time: 1.0832  data_time: 0.0761  last_data_time: 0.0641   lr: 0.0001  max_mem: 32689M
[08/28 22:48:50] d2.utils.events INFO:  eta: 0:07:15  iter: 599  total_loss: 21.14  loss_ce: 0.5172  loss_mask: 0.1741  loss_dice: 1.276  loss_ce_0: 0.5676  loss_mask_0: 0.202  loss_dice_0: 1.549  loss_ce_1: 0.6628  loss_mask_1: 0.1895  loss_dice_1: 1.436  loss_ce_2: 0.6309  loss_mask_2: 0.1815  loss_dice_2: 1.374  loss_ce_3: 0.5437  loss_mask_3: 0.1791  loss_dice_3: 1.31  loss_ce_4: 0.5454  loss_mask_4: 0.1782  loss_dice_4: 1.331  loss_ce_5: 0.5194  loss_mask_5: 0.1761  loss_dice_5: 1.323  loss_ce_6: 0.506  loss_mask_6: 0.1752  loss_dice_6: 1.306  loss_ce_7: 0.543  loss_mask_7: 0.1757  loss_dice_7: 1.315  loss_ce_8: 0.5337  loss_mask_8: 0.1758  loss_dice_8: 1.322    time: 1.0914  last_time: 1.0764  data_time: 0.0746  last_data_time: 0.0602   lr: 0.0001  max_mem: 32689M
[08/28 22:49:12] d2.utils.events INFO:  eta: 0:06:53  iter: 619  total_loss: 20.33  loss_ce: 0.5475  loss_mask: 0.1691  loss_dice: 1.244  loss_ce_0: 0.6172  loss_mask_0: 0.2058  loss_dice_0: 1.466  loss_ce_1: 0.6681  loss_mask_1: 0.176  loss_dice_1: 1.406  loss_ce_2: 0.6035  loss_mask_2: 0.1744  loss_dice_2: 1.332  loss_ce_3: 0.5792  loss_mask_3: 0.1735  loss_dice_3: 1.276  loss_ce_4: 0.5338  loss_mask_4: 0.1731  loss_dice_4: 1.254  loss_ce_5: 0.4714  loss_mask_5: 0.174  loss_dice_5: 1.249  loss_ce_6: 0.5101  loss_mask_6: 0.1656  loss_dice_6: 1.258  loss_ce_7: 0.5105  loss_mask_7: 0.1696  loss_dice_7: 1.218  loss_ce_8: 0.5034  loss_mask_8: 0.1717  loss_dice_8: 1.246    time: 1.0918  last_time: 1.0664  data_time: 0.0767  last_data_time: 0.0715   lr: 0.0001  max_mem: 32689M
[08/28 22:49:34] d2.utils.events INFO:  eta: 0:06:32  iter: 639  total_loss: 19.4  loss_ce: 0.4956  loss_mask: 0.1875  loss_dice: 1.207  loss_ce_0: 0.6098  loss_mask_0: 0.2182  loss_dice_0: 1.452  loss_ce_1: 0.6645  loss_mask_1: 0.192  loss_dice_1: 1.34  loss_ce_2: 0.5915  loss_mask_2: 0.1878  loss_dice_2: 1.284  loss_ce_3: 0.5228  loss_mask_3: 0.1903  loss_dice_3: 1.238  loss_ce_4: 0.5495  loss_mask_4: 0.1893  loss_dice_4: 1.216  loss_ce_5: 0.5136  loss_mask_5: 0.189  loss_dice_5: 1.227  loss_ce_6: 0.512  loss_mask_6: 0.1896  loss_dice_6: 1.221  loss_ce_7: 0.501  loss_mask_7: 0.1878  loss_dice_7: 1.196  loss_ce_8: 0.5089  loss_mask_8: 0.187  loss_dice_8: 1.197    time: 1.0918  last_time: 1.1012  data_time: 0.0769  last_data_time: 0.0830   lr: 0.0001  max_mem: 32689M
[08/28 22:49:56] d2.utils.events INFO:  eta: 0:06:10  iter: 659  total_loss: 20.43  loss_ce: 0.4719  loss_mask: 0.175  loss_dice: 1.213  loss_ce_0: 0.6351  loss_mask_0: 0.2008  loss_dice_0: 1.42  loss_ce_1: 0.6957  loss_mask_1: 0.1814  loss_dice_1: 1.377  loss_ce_2: 0.5907  loss_mask_2: 0.1753  loss_dice_2: 1.329  loss_ce_3: 0.5513  loss_mask_3: 0.1752  loss_dice_3: 1.246  loss_ce_4: 0.5534  loss_mask_4: 0.1733  loss_dice_4: 1.27  loss_ce_5: 0.4808  loss_mask_5: 0.1761  loss_dice_5: 1.237  loss_ce_6: 0.501  loss_mask_6: 0.1756  loss_dice_6: 1.235  loss_ce_7: 0.4831  loss_mask_7: 0.1741  loss_dice_7: 1.257  loss_ce_8: 0.495  loss_mask_8: 0.1756  loss_dice_8: 1.253    time: 1.0922  last_time: 1.0692  data_time: 0.0805  last_data_time: 0.0709   lr: 0.0001  max_mem: 32689M
[08/28 22:50:18] d2.utils.events INFO:  eta: 0:05:48  iter: 679  total_loss: 20.46  loss_ce: 0.5311  loss_mask: 0.163  loss_dice: 1.258  loss_ce_0: 0.6254  loss_mask_0: 0.1874  loss_dice_0: 1.475  loss_ce_1: 0.7125  loss_mask_1: 0.1741  loss_dice_1: 1.355  loss_ce_2: 0.6136  loss_mask_2: 0.164  loss_dice_2: 1.357  loss_ce_3: 0.5681  loss_mask_3: 0.1647  loss_dice_3: 1.288  loss_ce_4: 0.5278  loss_mask_4: 0.1653  loss_dice_4: 1.25  loss_ce_5: 0.5156  loss_mask_5: 0.1663  loss_dice_5: 1.297  loss_ce_6: 0.5269  loss_mask_6: 0.1655  loss_dice_6: 1.228  loss_ce_7: 0.5228  loss_mask_7: 0.1663  loss_dice_7: 1.275  loss_ce_8: 0.5369  loss_mask_8: 0.1667  loss_dice_8: 1.27    time: 1.0927  last_time: 1.0628  data_time: 0.0773  last_data_time: 0.0637   lr: 0.0001  max_mem: 32689M
[08/28 22:50:40] d2.utils.events INFO:  eta: 0:05:27  iter: 699  total_loss: 20.76  loss_ce: 0.5225  loss_mask: 0.1848  loss_dice: 1.287  loss_ce_0: 0.6113  loss_mask_0: 0.2034  loss_dice_0: 1.488  loss_ce_1: 0.6792  loss_mask_1: 0.1902  loss_dice_1: 1.405  loss_ce_2: 0.6114  loss_mask_2: 0.188  loss_dice_2: 1.307  loss_ce_3: 0.5818  loss_mask_3: 0.1887  loss_dice_3: 1.297  loss_ce_4: 0.5378  loss_mask_4: 0.1891  loss_dice_4: 1.275  loss_ce_5: 0.5493  loss_mask_5: 0.1888  loss_dice_5: 1.257  loss_ce_6: 0.5433  loss_mask_6: 0.1855  loss_dice_6: 1.274  loss_ce_7: 0.5001  loss_mask_7: 0.1876  loss_dice_7: 1.257  loss_ce_8: 0.5165  loss_mask_8: 0.1857  loss_dice_8: 1.27    time: 1.0930  last_time: 1.0827  data_time: 0.0773  last_data_time: 0.0615   lr: 0.0001  max_mem: 32689M
[08/28 22:51:02] d2.utils.events INFO:  eta: 0:05:05  iter: 719  total_loss: 20.19  loss_ce: 0.4792  loss_mask: 0.1744  loss_dice: 1.266  loss_ce_0: 0.5494  loss_mask_0: 0.2152  loss_dice_0: 1.458  loss_ce_1: 0.6035  loss_mask_1: 0.189  loss_dice_1: 1.35  loss_ce_2: 0.5484  loss_mask_2: 0.18  loss_dice_2: 1.321  loss_ce_3: 0.5573  loss_mask_3: 0.1746  loss_dice_3: 1.268  loss_ce_4: 0.476  loss_mask_4: 0.1758  loss_dice_4: 1.263  loss_ce_5: 0.4878  loss_mask_5: 0.1737  loss_dice_5: 1.225  loss_ce_6: 0.4819  loss_mask_6: 0.1723  loss_dice_6: 1.26  loss_ce_7: 0.4937  loss_mask_7: 0.1749  loss_dice_7: 1.264  loss_ce_8: 0.4989  loss_mask_8: 0.1739  loss_dice_8: 1.244    time: 1.0929  last_time: 1.0822  data_time: 0.0724  last_data_time: 0.0681   lr: 0.0001  max_mem: 32689M
[08/28 22:51:24] d2.utils.events INFO:  eta: 0:04:43  iter: 739  total_loss: 20.3  loss_ce: 0.5453  loss_mask: 0.1678  loss_dice: 1.241  loss_ce_0: 0.5722  loss_mask_0: 0.1967  loss_dice_0: 1.519  loss_ce_1: 0.6402  loss_mask_1: 0.1812  loss_dice_1: 1.403  loss_ce_2: 0.5941  loss_mask_2: 0.1762  loss_dice_2: 1.336  loss_ce_3: 0.546  loss_mask_3: 0.1728  loss_dice_3: 1.302  loss_ce_4: 0.5292  loss_mask_4: 0.1721  loss_dice_4: 1.335  loss_ce_5: 0.5192  loss_mask_5: 0.1668  loss_dice_5: 1.281  loss_ce_6: 0.531  loss_mask_6: 0.1693  loss_dice_6: 1.242  loss_ce_7: 0.5285  loss_mask_7: 0.1689  loss_dice_7: 1.278  loss_ce_8: 0.5258  loss_mask_8: 0.1669  loss_dice_8: 1.282    time: 1.0933  last_time: 1.1010  data_time: 0.0806  last_data_time: 0.0998   lr: 0.0001  max_mem: 32689M
[08/28 22:51:46] d2.utils.events INFO:  eta: 0:04:21  iter: 759  total_loss: 21.13  loss_ce: 0.5469  loss_mask: 0.1639  loss_dice: 1.247  loss_ce_0: 0.6709  loss_mask_0: 0.1927  loss_dice_0: 1.538  loss_ce_1: 0.6887  loss_mask_1: 0.1747  loss_dice_1: 1.413  loss_ce_2: 0.6669  loss_mask_2: 0.1687  loss_dice_2: 1.327  loss_ce_3: 0.5888  loss_mask_3: 0.1657  loss_dice_3: 1.329  loss_ce_4: 0.5702  loss_mask_4: 0.1628  loss_dice_4: 1.324  loss_ce_5: 0.5506  loss_mask_5: 0.1601  loss_dice_5: 1.278  loss_ce_6: 0.5627  loss_mask_6: 0.1625  loss_dice_6: 1.273  loss_ce_7: 0.5497  loss_mask_7: 0.1629  loss_dice_7: 1.292  loss_ce_8: 0.5396  loss_mask_8: 0.1623  loss_dice_8: 1.29    time: 1.0939  last_time: 1.1236  data_time: 0.0792  last_data_time: 0.0754   lr: 0.0001  max_mem: 32689M
[08/28 22:52:09] d2.utils.events INFO:  eta: 0:04:00  iter: 779  total_loss: 19.68  loss_ce: 0.4845  loss_mask: 0.1651  loss_dice: 1.185  loss_ce_0: 0.5649  loss_mask_0: 0.1959  loss_dice_0: 1.408  loss_ce_1: 0.6518  loss_mask_1: 0.1754  loss_dice_1: 1.359  loss_ce_2: 0.5785  loss_mask_2: 0.1683  loss_dice_2: 1.269  loss_ce_3: 0.5446  loss_mask_3: 0.1663  loss_dice_3: 1.251  loss_ce_4: 0.4945  loss_mask_4: 0.1661  loss_dice_4: 1.225  loss_ce_5: 0.4866  loss_mask_5: 0.1652  loss_dice_5: 1.248  loss_ce_6: 0.5058  loss_mask_6: 0.1646  loss_dice_6: 1.226  loss_ce_7: 0.4907  loss_mask_7: 0.1644  loss_dice_7: 1.233  loss_ce_8: 0.5009  loss_mask_8: 0.1651  loss_dice_8: 1.204    time: 1.0943  last_time: 1.1139  data_time: 0.0807  last_data_time: 0.0712   lr: 0.0001  max_mem: 32689M
[08/28 22:52:31] d2.utils.events INFO:  eta: 0:03:38  iter: 799  total_loss: 19.67  loss_ce: 0.5  loss_mask: 0.1604  loss_dice: 1.195  loss_ce_0: 0.5602  loss_mask_0: 0.1864  loss_dice_0: 1.458  loss_ce_1: 0.6537  loss_mask_1: 0.1719  loss_dice_1: 1.348  loss_ce_2: 0.5873  loss_mask_2: 0.1675  loss_dice_2: 1.302  loss_ce_3: 0.5112  loss_mask_3: 0.1654  loss_dice_3: 1.235  loss_ce_4: 0.5141  loss_mask_4: 0.1634  loss_dice_4: 1.236  loss_ce_5: 0.5134  loss_mask_5: 0.1589  loss_dice_5: 1.211  loss_ce_6: 0.5152  loss_mask_6: 0.1642  loss_dice_6: 1.186  loss_ce_7: 0.5067  loss_mask_7: 0.1625  loss_dice_7: 1.173  loss_ce_8: 0.51  loss_mask_8: 0.1605  loss_dice_8: 1.194    time: 1.0942  last_time: 1.0653  data_time: 0.0748  last_data_time: 0.0695   lr: 0.0001  max_mem: 32689M
[08/28 22:52:53] d2.utils.events INFO:  eta: 0:03:16  iter: 819  total_loss: 19.22  loss_ce: 0.4562  loss_mask: 0.1805  loss_dice: 1.175  loss_ce_0: 0.5511  loss_mask_0: 0.203  loss_dice_0: 1.35  loss_ce_1: 0.6474  loss_mask_1: 0.1971  loss_dice_1: 1.271  loss_ce_2: 0.5512  loss_mask_2: 0.1866  loss_dice_2: 1.211  loss_ce_3: 0.5097  loss_mask_3: 0.1791  loss_dice_3: 1.208  loss_ce_4: 0.4763  loss_mask_4: 0.1826  loss_dice_4: 1.181  loss_ce_5: 0.4703  loss_mask_5: 0.182  loss_dice_5: 1.172  loss_ce_6: 0.4556  loss_mask_6: 0.1826  loss_dice_6: 1.18  loss_ce_7: 0.4388  loss_mask_7: 0.1819  loss_dice_7: 1.157  loss_ce_8: 0.4518  loss_mask_8: 0.1804  loss_dice_8: 1.175    time: 1.0944  last_time: 1.0618  data_time: 0.0803  last_data_time: 0.0630   lr: 0.0001  max_mem: 32689M
[08/28 22:53:15] d2.utils.events INFO:  eta: 0:02:54  iter: 839  total_loss: 20.67  loss_ce: 0.5228  loss_mask: 0.1799  loss_dice: 1.221  loss_ce_0: 0.5971  loss_mask_0: 0.2002  loss_dice_0: 1.446  loss_ce_1: 0.6938  loss_mask_1: 0.192  loss_dice_1: 1.358  loss_ce_2: 0.6185  loss_mask_2: 0.1882  loss_dice_2: 1.351  loss_ce_3: 0.5738  loss_mask_3: 0.1799  loss_dice_3: 1.29  loss_ce_4: 0.5431  loss_mask_4: 0.1844  loss_dice_4: 1.27  loss_ce_5: 0.5504  loss_mask_5: 0.1815  loss_dice_5: 1.242  loss_ce_6: 0.531  loss_mask_6: 0.1835  loss_dice_6: 1.251  loss_ce_7: 0.5196  loss_mask_7: 0.1821  loss_dice_7: 1.241  loss_ce_8: 0.5299  loss_mask_8: 0.1846  loss_dice_8: 1.237    time: 1.0947  last_time: 1.1788  data_time: 0.0790  last_data_time: 0.0735   lr: 0.0001  max_mem: 32689M
[08/28 22:53:37] d2.utils.events INFO:  eta: 0:02:32  iter: 859  total_loss: 19.35  loss_ce: 0.4925  loss_mask: 0.1673  loss_dice: 1.211  loss_ce_0: 0.5374  loss_mask_0: 0.1925  loss_dice_0: 1.475  loss_ce_1: 0.5907  loss_mask_1: 0.1846  loss_dice_1: 1.379  loss_ce_2: 0.5778  loss_mask_2: 0.1741  loss_dice_2: 1.281  loss_ce_3: 0.5239  loss_mask_3: 0.1711  loss_dice_3: 1.274  loss_ce_4: 0.493  loss_mask_4: 0.1673  loss_dice_4: 1.277  loss_ce_5: 0.4566  loss_mask_5: 0.1714  loss_dice_5: 1.254  loss_ce_6: 0.4689  loss_mask_6: 0.1649  loss_dice_6: 1.231  loss_ce_7: 0.4749  loss_mask_7: 0.1724  loss_dice_7: 1.23  loss_ce_8: 0.4649  loss_mask_8: 0.1706  loss_dice_8: 1.214    time: 1.0949  last_time: 1.1070  data_time: 0.0821  last_data_time: 0.0829   lr: 0.0001  max_mem: 32689M
[08/28 22:54:00] d2.utils.events INFO:  eta: 0:02:11  iter: 879  total_loss: 20.35  loss_ce: 0.5184  loss_mask: 0.167  loss_dice: 1.234  loss_ce_0: 0.5809  loss_mask_0: 0.1953  loss_dice_0: 1.468  loss_ce_1: 0.6717  loss_mask_1: 0.1752  loss_dice_1: 1.368  loss_ce_2: 0.5832  loss_mask_2: 0.1691  loss_dice_2: 1.304  loss_ce_3: 0.5474  loss_mask_3: 0.1711  loss_dice_3: 1.258  loss_ce_4: 0.5349  loss_mask_4: 0.1728  loss_dice_4: 1.286  loss_ce_5: 0.5061  loss_mask_5: 0.1712  loss_dice_5: 1.273  loss_ce_6: 0.5109  loss_mask_6: 0.1702  loss_dice_6: 1.241  loss_ce_7: 0.4917  loss_mask_7: 0.1707  loss_dice_7: 1.246  loss_ce_8: 0.5206  loss_mask_8: 0.1663  loss_dice_8: 1.206    time: 1.0957  last_time: 1.1371  data_time: 0.0932  last_data_time: 0.0791   lr: 0.0001  max_mem: 32689M
[08/28 22:54:22] d2.utils.events INFO:  eta: 0:01:49  iter: 899  total_loss: 20.14  loss_ce: 0.466  loss_mask: 0.1684  loss_dice: 1.23  loss_ce_0: 0.5619  loss_mask_0: 0.192  loss_dice_0: 1.459  loss_ce_1: 0.6392  loss_mask_1: 0.1818  loss_dice_1: 1.371  loss_ce_2: 0.5539  loss_mask_2: 0.1743  loss_dice_2: 1.293  loss_ce_3: 0.4979  loss_mask_3: 0.1771  loss_dice_3: 1.266  loss_ce_4: 0.4994  loss_mask_4: 0.1686  loss_dice_4: 1.253  loss_ce_5: 0.5002  loss_mask_5: 0.1725  loss_dice_5: 1.25  loss_ce_6: 0.471  loss_mask_6: 0.1714  loss_dice_6: 1.255  loss_ce_7: 0.4732  loss_mask_7: 0.1682  loss_dice_7: 1.255  loss_ce_8: 0.4879  loss_mask_8: 0.1693  loss_dice_8: 1.274    time: 1.0959  last_time: 1.1499  data_time: 0.0805  last_data_time: 0.0863   lr: 0.0001  max_mem: 32689M
[08/28 22:54:44] d2.utils.events INFO:  eta: 0:01:27  iter: 919  total_loss: 19.58  loss_ce: 0.4911  loss_mask: 0.1688  loss_dice: 1.211  loss_ce_0: 0.5313  loss_mask_0: 0.1936  loss_dice_0: 1.409  loss_ce_1: 0.598  loss_mask_1: 0.1818  loss_dice_1: 1.348  loss_ce_2: 0.5725  loss_mask_2: 0.1768  loss_dice_2: 1.254  loss_ce_3: 0.4944  loss_mask_3: 0.1715  loss_dice_3: 1.246  loss_ce_4: 0.4823  loss_mask_4: 0.1727  loss_dice_4: 1.225  loss_ce_5: 0.4773  loss_mask_5: 0.1703  loss_dice_5: 1.205  loss_ce_6: 0.4638  loss_mask_6: 0.1705  loss_dice_6: 1.205  loss_ce_7: 0.4661  loss_mask_7: 0.1693  loss_dice_7: 1.202  loss_ce_8: 0.4616  loss_mask_8: 0.1685  loss_dice_8: 1.212    time: 1.0960  last_time: 1.0834  data_time: 0.0794  last_data_time: 0.0651   lr: 0.0001  max_mem: 32689M
[08/28 22:55:06] d2.utils.events INFO:  eta: 0:01:05  iter: 939  total_loss: 19.97  loss_ce: 0.5203  loss_mask: 0.1622  loss_dice: 1.234  loss_ce_0: 0.5954  loss_mask_0: 0.1935  loss_dice_0: 1.427  loss_ce_1: 0.6669  loss_mask_1: 0.1728  loss_dice_1: 1.385  loss_ce_2: 0.5942  loss_mask_2: 0.166  loss_dice_2: 1.327  loss_ce_3: 0.5301  loss_mask_3: 0.1642  loss_dice_3: 1.254  loss_ce_4: 0.5064  loss_mask_4: 0.164  loss_dice_4: 1.258  loss_ce_5: 0.5042  loss_mask_5: 0.1633  loss_dice_5: 1.22  loss_ce_6: 0.476  loss_mask_6: 0.1614  loss_dice_6: 1.208  loss_ce_7: 0.5192  loss_mask_7: 0.1593  loss_dice_7: 1.209  loss_ce_8: 0.4923  loss_mask_8: 0.1601  loss_dice_8: 1.218    time: 1.0964  last_time: 1.1277  data_time: 0.0788  last_data_time: 0.0819   lr: 0.0001  max_mem: 32689M
[08/28 22:55:28] d2.utils.events INFO:  eta: 0:00:43  iter: 959  total_loss: 20.04  loss_ce: 0.4869  loss_mask: 0.1687  loss_dice: 1.277  loss_ce_0: 0.5867  loss_mask_0: 0.1992  loss_dice_0: 1.471  loss_ce_1: 0.647  loss_mask_1: 0.1826  loss_dice_1: 1.348  loss_ce_2: 0.5883  loss_mask_2: 0.1742  loss_dice_2: 1.337  loss_ce_3: 0.5266  loss_mask_3: 0.1672  loss_dice_3: 1.281  loss_ce_4: 0.5119  loss_mask_4: 0.1679  loss_dice_4: 1.253  loss_ce_5: 0.4916  loss_mask_5: 0.1708  loss_dice_5: 1.28  loss_ce_6: 0.4885  loss_mask_6: 0.1701  loss_dice_6: 1.23  loss_ce_7: 0.4863  loss_mask_7: 0.1696  loss_dice_7: 1.24  loss_ce_8: 0.5056  loss_mask_8: 0.1676  loss_dice_8: 1.211    time: 1.0967  last_time: 1.1235  data_time: 0.0778  last_data_time: 0.0908   lr: 0.0001  max_mem: 32689M
[08/28 22:55:51] d2.utils.events INFO:  eta: 0:00:21  iter: 979  total_loss: 19.44  loss_ce: 0.4554  loss_mask: 0.1596  loss_dice: 1.224  loss_ce_0: 0.5633  loss_mask_0: 0.1878  loss_dice_0: 1.425  loss_ce_1: 0.6634  loss_mask_1: 0.1739  loss_dice_1: 1.342  loss_ce_2: 0.5975  loss_mask_2: 0.1641  loss_dice_2: 1.243  loss_ce_3: 0.5377  loss_mask_3: 0.1624  loss_dice_3: 1.241  loss_ce_4: 0.4672  loss_mask_4: 0.158  loss_dice_4: 1.23  loss_ce_5: 0.4579  loss_mask_5: 0.1585  loss_dice_5: 1.163  loss_ce_6: 0.4534  loss_mask_6: 0.1563  loss_dice_6: 1.195  loss_ce_7: 0.4883  loss_mask_7: 0.1595  loss_dice_7: 1.177  loss_ce_8: 0.4703  loss_mask_8: 0.1592  loss_dice_8: 1.204    time: 1.0971  last_time: 1.1309  data_time: 0.0830  last_data_time: 0.0918   lr: 0.0001  max_mem: 32689M
[08/28 22:56:13] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Normal/r101_000_1000/model_final.pth
[08/28 22:56:16] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 19.98  loss_ce: 0.5243  loss_mask: 0.1744  loss_dice: 1.187  loss_ce_0: 0.6031  loss_mask_0: 0.2063  loss_dice_0: 1.394  loss_ce_1: 0.6776  loss_mask_1: 0.1853  loss_dice_1: 1.33  loss_ce_2: 0.6329  loss_mask_2: 0.1774  loss_dice_2: 1.249  loss_ce_3: 0.5597  loss_mask_3: 0.1777  loss_dice_3: 1.21  loss_ce_4: 0.5606  loss_mask_4: 0.1768  loss_dice_4: 1.196  loss_ce_5: 0.5295  loss_mask_5: 0.176  loss_dice_5: 1.218  loss_ce_6: 0.5174  loss_mask_6: 0.1751  loss_dice_6: 1.175  loss_ce_7: 0.5171  loss_mask_7: 0.1756  loss_dice_7: 1.181  loss_ce_8: 0.484  loss_mask_8: 0.1756  loss_dice_8: 1.204    time: 1.0974  last_time: 1.1196  data_time: 0.0839  last_data_time: 0.0971   lr: 0.0001  max_mem: 32689M
[08/28 22:56:16] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:18:15 (1.0974 s / it)
[08/28 22:56:16] d2.engine.hooks INFO: Total training time: 0:18:20 (0:00:05 on hooks)
[08/28 22:56:16] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/28 22:56:16] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/28 22:56:16] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/28 22:56:16] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/28 22:56:16] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/28 22:56:16] d2.evaluation.evaluator INFO: Start inference on 500 batches
[08/28 22:56:20] d2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0051 s/iter. Inference: 0.2455 s/iter. Eval: 0.0649 s/iter. Total: 0.3155 s/iter. ETA=0:02:34
[08/28 22:56:26] d2.evaluation.evaluator INFO: Inference done 29/500. Dataloading: 0.0059 s/iter. Inference: 0.2296 s/iter. Eval: 0.0655 s/iter. Total: 0.3010 s/iter. ETA=0:02:21
[08/28 22:56:31] d2.evaluation.evaluator INFO: Inference done 46/500. Dataloading: 0.0058 s/iter. Inference: 0.2300 s/iter. Eval: 0.0656 s/iter. Total: 0.3015 s/iter. ETA=0:02:16
[08/28 22:56:36] d2.evaluation.evaluator INFO: Inference done 62/500. Dataloading: 0.0059 s/iter. Inference: 0.2348 s/iter. Eval: 0.0659 s/iter. Total: 0.3067 s/iter. ETA=0:02:14
[08/28 22:56:41] d2.evaluation.evaluator INFO: Inference done 78/500. Dataloading: 0.0059 s/iter. Inference: 0.2374 s/iter. Eval: 0.0659 s/iter. Total: 0.3094 s/iter. ETA=0:02:10
[08/28 22:56:46] d2.evaluation.evaluator INFO: Inference done 94/500. Dataloading: 0.0059 s/iter. Inference: 0.2395 s/iter. Eval: 0.0661 s/iter. Total: 0.3116 s/iter. ETA=0:02:06
[08/28 22:56:51] d2.evaluation.evaluator INFO: Inference done 112/500. Dataloading: 0.0059 s/iter. Inference: 0.2360 s/iter. Eval: 0.0661 s/iter. Total: 0.3081 s/iter. ETA=0:01:59
[08/28 22:56:57] d2.evaluation.evaluator INFO: Inference done 129/500. Dataloading: 0.0060 s/iter. Inference: 0.2355 s/iter. Eval: 0.0661 s/iter. Total: 0.3077 s/iter. ETA=0:01:54
[08/28 22:57:02] d2.evaluation.evaluator INFO: Inference done 146/500. Dataloading: 0.0060 s/iter. Inference: 0.2360 s/iter. Eval: 0.0661 s/iter. Total: 0.3081 s/iter. ETA=0:01:49
[08/28 22:57:07] d2.evaluation.evaluator INFO: Inference done 163/500. Dataloading: 0.0060 s/iter. Inference: 0.2351 s/iter. Eval: 0.0659 s/iter. Total: 0.3071 s/iter. ETA=0:01:43
[08/28 22:57:12] d2.evaluation.evaluator INFO: Inference done 181/500. Dataloading: 0.0060 s/iter. Inference: 0.2328 s/iter. Eval: 0.0659 s/iter. Total: 0.3047 s/iter. ETA=0:01:37
[08/28 22:57:17] d2.evaluation.evaluator INFO: Inference done 198/500. Dataloading: 0.0060 s/iter. Inference: 0.2335 s/iter. Eval: 0.0659 s/iter. Total: 0.3054 s/iter. ETA=0:01:32
[08/28 22:57:23] d2.evaluation.evaluator INFO: Inference done 214/500. Dataloading: 0.0060 s/iter. Inference: 0.2348 s/iter. Eval: 0.0658 s/iter. Total: 0.3067 s/iter. ETA=0:01:27
[08/28 22:57:28] d2.evaluation.evaluator INFO: Inference done 231/500. Dataloading: 0.0060 s/iter. Inference: 0.2340 s/iter. Eval: 0.0657 s/iter. Total: 0.3057 s/iter. ETA=0:01:22
[08/28 22:57:33] d2.evaluation.evaluator INFO: Inference done 248/500. Dataloading: 0.0060 s/iter. Inference: 0.2337 s/iter. Eval: 0.0657 s/iter. Total: 0.3055 s/iter. ETA=0:01:16
[08/28 22:57:38] d2.evaluation.evaluator INFO: Inference done 264/500. Dataloading: 0.0060 s/iter. Inference: 0.2344 s/iter. Eval: 0.0657 s/iter. Total: 0.3062 s/iter. ETA=0:01:12
[08/28 22:57:43] d2.evaluation.evaluator INFO: Inference done 282/500. Dataloading: 0.0060 s/iter. Inference: 0.2335 s/iter. Eval: 0.0657 s/iter. Total: 0.3053 s/iter. ETA=0:01:06
[08/28 22:57:48] d2.evaluation.evaluator INFO: Inference done 300/500. Dataloading: 0.0060 s/iter. Inference: 0.2325 s/iter. Eval: 0.0657 s/iter. Total: 0.3042 s/iter. ETA=0:01:00
[08/28 22:57:53] d2.evaluation.evaluator INFO: Inference done 318/500. Dataloading: 0.0060 s/iter. Inference: 0.2314 s/iter. Eval: 0.0656 s/iter. Total: 0.3030 s/iter. ETA=0:00:55
[08/28 22:57:58] d2.evaluation.evaluator INFO: Inference done 335/500. Dataloading: 0.0060 s/iter. Inference: 0.2316 s/iter. Eval: 0.0656 s/iter. Total: 0.3032 s/iter. ETA=0:00:50
[08/28 22:58:04] d2.evaluation.evaluator INFO: Inference done 352/500. Dataloading: 0.0060 s/iter. Inference: 0.2315 s/iter. Eval: 0.0657 s/iter. Total: 0.3032 s/iter. ETA=0:00:44
[08/28 22:58:09] d2.evaluation.evaluator INFO: Inference done 370/500. Dataloading: 0.0060 s/iter. Inference: 0.2310 s/iter. Eval: 0.0657 s/iter. Total: 0.3027 s/iter. ETA=0:00:39
[08/28 22:58:14] d2.evaluation.evaluator INFO: Inference done 387/500. Dataloading: 0.0060 s/iter. Inference: 0.2306 s/iter. Eval: 0.0658 s/iter. Total: 0.3024 s/iter. ETA=0:00:34
[08/28 22:58:19] d2.evaluation.evaluator INFO: Inference done 404/500. Dataloading: 0.0060 s/iter. Inference: 0.2303 s/iter. Eval: 0.0659 s/iter. Total: 0.3022 s/iter. ETA=0:00:29
[08/28 22:58:24] d2.evaluation.evaluator INFO: Inference done 421/500. Dataloading: 0.0059 s/iter. Inference: 0.2302 s/iter. Eval: 0.0659 s/iter. Total: 0.3021 s/iter. ETA=0:00:23
[08/28 22:58:29] d2.evaluation.evaluator INFO: Inference done 439/500. Dataloading: 0.0059 s/iter. Inference: 0.2296 s/iter. Eval: 0.0660 s/iter. Total: 0.3016 s/iter. ETA=0:00:18
[08/28 22:58:34] d2.evaluation.evaluator INFO: Inference done 457/500. Dataloading: 0.0059 s/iter. Inference: 0.2290 s/iter. Eval: 0.0660 s/iter. Total: 0.3009 s/iter. ETA=0:00:12
[08/28 22:58:40] d2.evaluation.evaluator INFO: Inference done 475/500. Dataloading: 0.0059 s/iter. Inference: 0.2288 s/iter. Eval: 0.0660 s/iter. Total: 0.3007 s/iter. ETA=0:00:07
[08/28 22:58:45] d2.evaluation.evaluator INFO: Inference done 492/500. Dataloading: 0.0059 s/iter. Inference: 0.2285 s/iter. Eval: 0.0660 s/iter. Total: 0.3005 s/iter. ETA=0:00:02
[08/28 22:58:47] d2.evaluation.evaluator INFO: Total inference time: 0:02:28.689411 (0.300383 s / iter per device, on 1 devices)
[08/28 22:58:47] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:01:52 (0.228167 s / iter per device, on 1 devices)
[08/28 22:58:47] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval7zx8isf3 ...
[08/28 22:59:08] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 58.047 | 80.510 | 70.899 |      19       |
| Things | 50.563 | 79.810 | 63.101 |       8       |
| Stuff  | 63.490 | 81.018 | 76.571 |      11       |
[08/28 22:59:08] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.304 | 97.607 | 99.690 |     Stuff     |
| class_8  | 72.115 | 83.497 | 86.369 |     Stuff     |
| class_11 | 86.673 | 89.126 | 97.248 |     Stuff     |
| class_12 | 45.527 | 79.449 | 57.303 |     Stuff     |
| class_13 | 35.790 | 76.053 | 47.059 |     Stuff     |
| class_17 | 42.855 | 63.491 | 67.497 |     Stuff     |
| class_19 | 44.807 | 67.573 | 66.310 |     Stuff     |
| class_20 | 64.597 | 76.626 | 84.301 |     Stuff     |
| class_21 | 88.747 | 89.949 | 98.664 |     Stuff     |
| class_22 | 32.389 | 75.688 | 42.793 |     Stuff     |
| class_23 | 87.583 | 92.143 | 95.052 |     Stuff     |
| class_24 | 52.962 | 77.284 | 68.530 |    Things     |
| class_25 | 47.028 | 73.693 | 63.816 |    Things     |
| class_26 | 64.872 | 83.509 | 77.682 |    Things     |
| class_27 | 50.162 | 87.074 | 57.609 |    Things     |
| class_28 | 64.371 | 90.026 | 71.503 |    Things     |
| class_31 | 43.445 | 79.649 | 54.545 |    Things     |
| class_32 | 38.787 | 75.419 | 51.429 |    Things     |
| class_33 | 42.875 | 71.828 | 59.692 |    Things     |
[08/28 22:59:08] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[08/28 22:59:08] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/28 22:59:08] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/28 22:59:08] d2.evaluation.testing INFO: copypaste: 58.0468,80.5097,70.8995,50.5628,79.8103,63.1006,63.4898,81.0183,76.5714,97.3039,97.6067,99.6898,72.1152,83.4970,86.3686,86.6730,89.1260,97.2477,45.5272,79.4495,57.3034,35.7896,76.0529,47.0588,42.8549,63.4912,67.4974,44.8075,67.5726,66.3102,64.5967,76.6262,84.3011,88.7470,89.9488,98.6639,32.3891,75.6882,42.7928,87.5832,92.1427,95.0518,52.9620,77.2835,68.5295,47.0284,73.6932,63.8165,64.8716,83.5095,77.6818,50.1619,87.0736,57.6087,64.3709,90.0260,71.5026,43.4451,79.6493,54.5455,38.7872,75.4195,51.4286,42.8753,71.8276,59.6920
