[09/22 11:46:19] detectron2 INFO: Rank of current process: 0. World size: 2
[09/22 11:46:20] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   560.35.03
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[09/22 11:46:20] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_exp_008_19_500.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[09/22 11:46:20] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_exp_008_19_500.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_500_19
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 500
TEST:
  EVAL_PERIOD: 500


[09/22 11:46:20] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_500_19
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 500
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 500
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[09/22 11:46:20] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_500_19/config.yaml
[09/22 11:46:20] d2.utils.env INFO: Using a generated random seed 20883475
[09/22 11:46:23] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[09/22 11:46:23] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[09/22 11:46:23] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[09/22 11:46:23] d2.data.build INFO: Using training sampler TrainingSampler
[09/22 11:46:24] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/22 11:46:24] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[09/22 11:46:24] d2.data.common INFO: Serialized dataset takes 2.16 MiB
[09/22 11:46:24] d2.data.build INFO: Making batched data loader with batch_size=4
[09/22 11:46:24] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[09/22 11:46:24] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth ...
[09/22 11:46:24] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth ...
[09/22 11:46:24] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[09/22 11:46:24] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mcriterion.empty_weight[0m
[09/22 11:46:24] d2.engine.train_loop INFO: Starting training from iteration 0
[09/22 11:46:43] d2.utils.events INFO:  eta: 0:04:42  iter: 19  total_loss: 29.01  loss_ce: 0.6011  loss_mask: 0.659  loss_dice: 1.531  loss_ce_0: 0.6402  loss_mask_0: 0.7538  loss_dice_0: 1.803  loss_ce_1: 0.705  loss_mask_1: 0.7035  loss_dice_1: 1.704  loss_ce_2: 0.6608  loss_mask_2: 0.6944  loss_dice_2: 1.651  loss_ce_3: 0.6467  loss_mask_3: 0.6524  loss_dice_3: 1.61  loss_ce_4: 0.6197  loss_mask_4: 0.6601  loss_dice_4: 1.596  loss_ce_5: 0.6003  loss_mask_5: 0.6605  loss_dice_5: 1.585  loss_ce_6: 0.6088  loss_mask_6: 0.6545  loss_dice_6: 1.529  loss_ce_7: 0.6389  loss_mask_7: 0.6624  loss_dice_7: 1.518  loss_ce_8: 0.6676  loss_mask_8: 0.6559  loss_dice_8: 1.514    time: 0.5976  last_time: 0.6197  data_time: 0.2198  last_data_time: 0.0252   lr: 0.0001  max_mem: 15465M
[09/22 11:46:54] d2.utils.events INFO:  eta: 0:04:27  iter: 39  total_loss: 22.36  loss_ce: 0.278  loss_mask: 0.5639  loss_dice: 1.307  loss_ce_0: 0.2872  loss_mask_0: 0.6348  loss_dice_0: 1.565  loss_ce_1: 0.366  loss_mask_1: 0.6089  loss_dice_1: 1.451  loss_ce_2: 0.3374  loss_mask_2: 0.5819  loss_dice_2: 1.404  loss_ce_3: 0.3336  loss_mask_3: 0.5743  loss_dice_3: 1.308  loss_ce_4: 0.2859  loss_mask_4: 0.5702  loss_dice_4: 1.328  loss_ce_5: 0.2753  loss_mask_5: 0.569  loss_dice_5: 1.35  loss_ce_6: 0.3016  loss_mask_6: 0.5642  loss_dice_6: 1.288  loss_ce_7: 0.2736  loss_mask_7: 0.548  loss_dice_7: 1.324  loss_ce_8: 0.2669  loss_mask_8: 0.5669  loss_dice_8: 1.296    time: 0.5822  last_time: 0.5366  data_time: 0.0224  last_data_time: 0.0224   lr: 0.0001  max_mem: 15466M
[09/22 11:47:06] d2.utils.events INFO:  eta: 0:04:17  iter: 59  total_loss: 20.44  loss_ce: 0.2154  loss_mask: 0.4985  loss_dice: 1.151  loss_ce_0: 0.225  loss_mask_0: 0.5351  loss_dice_0: 1.32  loss_ce_1: 0.3163  loss_mask_1: 0.5241  loss_dice_1: 1.254  loss_ce_2: 0.2742  loss_mask_2: 0.5015  loss_dice_2: 1.192  loss_ce_3: 0.2625  loss_mask_3: 0.5077  loss_dice_3: 1.167  loss_ce_4: 0.2413  loss_mask_4: 0.5165  loss_dice_4: 1.152  loss_ce_5: 0.2206  loss_mask_5: 0.5174  loss_dice_5: 1.181  loss_ce_6: 0.2152  loss_mask_6: 0.5018  loss_dice_6: 1.146  loss_ce_7: 0.231  loss_mask_7: 0.4971  loss_dice_7: 1.18  loss_ce_8: 0.2205  loss_mask_8: 0.5027  loss_dice_8: 1.195    time: 0.5837  last_time: 0.5894  data_time: 0.0218  last_data_time: 0.0227   lr: 0.0001  max_mem: 15466M
[09/22 11:47:17] d2.utils.events INFO:  eta: 0:04:01  iter: 79  total_loss: 19.5  loss_ce: 0.2486  loss_mask: 0.4912  loss_dice: 1.1  loss_ce_0: 0.2525  loss_mask_0: 0.5481  loss_dice_0: 1.3  loss_ce_1: 0.3157  loss_mask_1: 0.528  loss_dice_1: 1.207  loss_ce_2: 0.2892  loss_mask_2: 0.5246  loss_dice_2: 1.185  loss_ce_3: 0.2975  loss_mask_3: 0.5261  loss_dice_3: 1.16  loss_ce_4: 0.293  loss_mask_4: 0.4941  loss_dice_4: 1.147  loss_ce_5: 0.2681  loss_mask_5: 0.5077  loss_dice_5: 1.148  loss_ce_6: 0.2566  loss_mask_6: 0.4942  loss_dice_6: 1.119  loss_ce_7: 0.2735  loss_mask_7: 0.4967  loss_dice_7: 1.116  loss_ce_8: 0.2656  loss_mask_8: 0.4885  loss_dice_8: 1.13    time: 0.5743  last_time: 0.5174  data_time: 0.0208  last_data_time: 0.0228   lr: 0.0001  max_mem: 15466M
[09/22 11:47:28] d2.utils.events INFO:  eta: 0:03:48  iter: 99  total_loss: 19.02  loss_ce: 0.2467  loss_mask: 0.4845  loss_dice: 1.129  loss_ce_0: 0.2097  loss_mask_0: 0.5271  loss_dice_0: 1.299  loss_ce_1: 0.2636  loss_mask_1: 0.4979  loss_dice_1: 1.201  loss_ce_2: 0.2683  loss_mask_2: 0.4788  loss_dice_2: 1.167  loss_ce_3: 0.2562  loss_mask_3: 0.4774  loss_dice_3: 1.148  loss_ce_4: 0.2229  loss_mask_4: 0.4881  loss_dice_4: 1.166  loss_ce_5: 0.2196  loss_mask_5: 0.4778  loss_dice_5: 1.175  loss_ce_6: 0.2108  loss_mask_6: 0.4701  loss_dice_6: 1.135  loss_ce_7: 0.2075  loss_mask_7: 0.4726  loss_dice_7: 1.132  loss_ce_8: 0.2279  loss_mask_8: 0.4767  loss_dice_8: 1.147    time: 0.5729  last_time: 0.5719  data_time: 0.0211  last_data_time: 0.0216   lr: 0.0001  max_mem: 15466M
[09/22 11:47:40] d2.utils.events INFO:  eta: 0:03:37  iter: 119  total_loss: 18.48  loss_ce: 0.1848  loss_mask: 0.4882  loss_dice: 1.121  loss_ce_0: 0.1869  loss_mask_0: 0.5132  loss_dice_0: 1.256  loss_ce_1: 0.2306  loss_mask_1: 0.4837  loss_dice_1: 1.203  loss_ce_2: 0.2193  loss_mask_2: 0.4903  loss_dice_2: 1.157  loss_ce_3: 0.2123  loss_mask_3: 0.4882  loss_dice_3: 1.141  loss_ce_4: 0.2003  loss_mask_4: 0.4949  loss_dice_4: 1.139  loss_ce_5: 0.1986  loss_mask_5: 0.4797  loss_dice_5: 1.124  loss_ce_6: 0.1982  loss_mask_6: 0.4875  loss_dice_6: 1.121  loss_ce_7: 0.2142  loss_mask_7: 0.4837  loss_dice_7: 1.124  loss_ce_8: 0.1943  loss_mask_8: 0.4854  loss_dice_8: 1.126    time: 0.5745  last_time: 0.6027  data_time: 0.0223  last_data_time: 0.0224   lr: 0.0001  max_mem: 15466M
[09/22 11:47:52] d2.utils.events INFO:  eta: 0:03:26  iter: 139  total_loss: 18.23  loss_ce: 0.1843  loss_mask: 0.457  loss_dice: 1.108  loss_ce_0: 0.1826  loss_mask_0: 0.4956  loss_dice_0: 1.269  loss_ce_1: 0.2232  loss_mask_1: 0.4657  loss_dice_1: 1.222  loss_ce_2: 0.2228  loss_mask_2: 0.4546  loss_dice_2: 1.151  loss_ce_3: 0.226  loss_mask_3: 0.4587  loss_dice_3: 1.106  loss_ce_4: 0.2169  loss_mask_4: 0.4548  loss_dice_4: 1.115  loss_ce_5: 0.2055  loss_mask_5: 0.4458  loss_dice_5: 1.111  loss_ce_6: 0.2056  loss_mask_6: 0.4509  loss_dice_6: 1.111  loss_ce_7: 0.2032  loss_mask_7: 0.4572  loss_dice_7: 1.104  loss_ce_8: 0.1923  loss_mask_8: 0.4599  loss_dice_8: 1.114    time: 0.5766  last_time: 0.5561  data_time: 0.0227  last_data_time: 0.0210   lr: 0.0001  max_mem: 15466M
[09/22 11:48:03] d2.utils.events INFO:  eta: 0:03:14  iter: 159  total_loss: 18.05  loss_ce: 0.2237  loss_mask: 0.4458  loss_dice: 1.061  loss_ce_0: 0.225  loss_mask_0: 0.498  loss_dice_0: 1.265  loss_ce_1: 0.2971  loss_mask_1: 0.4524  loss_dice_1: 1.189  loss_ce_2: 0.249  loss_mask_2: 0.4385  loss_dice_2: 1.137  loss_ce_3: 0.2521  loss_mask_3: 0.4401  loss_dice_3: 1.112  loss_ce_4: 0.2522  loss_mask_4: 0.4301  loss_dice_4: 1.098  loss_ce_5: 0.2388  loss_mask_5: 0.4339  loss_dice_5: 1.076  loss_ce_6: 0.2407  loss_mask_6: 0.4379  loss_dice_6: 1.065  loss_ce_7: 0.2309  loss_mask_7: 0.428  loss_dice_7: 1.089  loss_ce_8: 0.2371  loss_mask_8: 0.4445  loss_dice_8: 1.05    time: 0.5740  last_time: 0.5145  data_time: 0.0199  last_data_time: 0.0168   lr: 0.0001  max_mem: 15466M
[09/22 11:48:15] d2.utils.events INFO:  eta: 0:03:03  iter: 179  total_loss: 18.81  loss_ce: 0.2259  loss_mask: 0.4279  loss_dice: 1.13  loss_ce_0: 0.2179  loss_mask_0: 0.4669  loss_dice_0: 1.309  loss_ce_1: 0.2733  loss_mask_1: 0.4523  loss_dice_1: 1.219  loss_ce_2: 0.2515  loss_mask_2: 0.4333  loss_dice_2: 1.174  loss_ce_3: 0.2604  loss_mask_3: 0.4366  loss_dice_3: 1.109  loss_ce_4: 0.2489  loss_mask_4: 0.437  loss_dice_4: 1.128  loss_ce_5: 0.2308  loss_mask_5: 0.4344  loss_dice_5: 1.132  loss_ce_6: 0.2264  loss_mask_6: 0.4328  loss_dice_6: 1.098  loss_ce_7: 0.2389  loss_mask_7: 0.4276  loss_dice_7: 1.108  loss_ce_8: 0.2333  loss_mask_8: 0.4282  loss_dice_8: 1.116    time: 0.5749  last_time: 0.5853  data_time: 0.0217  last_data_time: 0.0230   lr: 0.0001  max_mem: 15466M
[09/22 11:48:27] d2.utils.events INFO:  eta: 0:02:52  iter: 199  total_loss: 17.87  loss_ce: 0.2016  loss_mask: 0.4337  loss_dice: 1.106  loss_ce_0: 0.1991  loss_mask_0: 0.4827  loss_dice_0: 1.253  loss_ce_1: 0.2453  loss_mask_1: 0.4671  loss_dice_1: 1.17  loss_ce_2: 0.2428  loss_mask_2: 0.4538  loss_dice_2: 1.115  loss_ce_3: 0.2452  loss_mask_3: 0.4363  loss_dice_3: 1.097  loss_ce_4: 0.2285  loss_mask_4: 0.4406  loss_dice_4: 1.103  loss_ce_5: 0.2288  loss_mask_5: 0.436  loss_dice_5: 1.096  loss_ce_6: 0.232  loss_mask_6: 0.4278  loss_dice_6: 1.087  loss_ce_7: 0.2095  loss_mask_7: 0.4327  loss_dice_7: 1.104  loss_ce_8: 0.2115  loss_mask_8: 0.4329  loss_dice_8: 1.09    time: 0.5761  last_time: 0.5504  data_time: 0.0222  last_data_time: 0.0249   lr: 0.0001  max_mem: 15466M
[09/22 11:48:38] d2.utils.events INFO:  eta: 0:02:41  iter: 219  total_loss: 17.6  loss_ce: 0.1837  loss_mask: 0.4608  loss_dice: 1.067  loss_ce_0: 0.1765  loss_mask_0: 0.508  loss_dice_0: 1.217  loss_ce_1: 0.2135  loss_mask_1: 0.4764  loss_dice_1: 1.182  loss_ce_2: 0.2165  loss_mask_2: 0.4596  loss_dice_2: 1.129  loss_ce_3: 0.2233  loss_mask_3: 0.4584  loss_dice_3: 1.083  loss_ce_4: 0.206  loss_mask_4: 0.4574  loss_dice_4: 1.075  loss_ce_5: 0.1846  loss_mask_5: 0.4582  loss_dice_5: 1.086  loss_ce_6: 0.1863  loss_mask_6: 0.4615  loss_dice_6: 1.084  loss_ce_7: 0.1974  loss_mask_7: 0.4588  loss_dice_7: 1.033  loss_ce_8: 0.1965  loss_mask_8: 0.4551  loss_dice_8: 1.053    time: 0.5774  last_time: 0.6019  data_time: 0.0264  last_data_time: 0.0276   lr: 0.0001  max_mem: 15466M
[09/22 11:48:50] d2.utils.events INFO:  eta: 0:02:30  iter: 239  total_loss: 17.64  loss_ce: 0.235  loss_mask: 0.4485  loss_dice: 1.068  loss_ce_0: 0.2168  loss_mask_0: 0.4815  loss_dice_0: 1.204  loss_ce_1: 0.2634  loss_mask_1: 0.4626  loss_dice_1: 1.129  loss_ce_2: 0.2593  loss_mask_2: 0.4601  loss_dice_2: 1.066  loss_ce_3: 0.2591  loss_mask_3: 0.4618  loss_dice_3: 1.062  loss_ce_4: 0.2715  loss_mask_4: 0.4567  loss_dice_4: 1.06  loss_ce_5: 0.2402  loss_mask_5: 0.4551  loss_dice_5: 1.068  loss_ce_6: 0.2392  loss_mask_6: 0.4477  loss_dice_6: 1.074  loss_ce_7: 0.237  loss_mask_7: 0.4451  loss_dice_7: 1.033  loss_ce_8: 0.221  loss_mask_8: 0.4445  loss_dice_8: 1.032    time: 0.5780  last_time: 0.5820  data_time: 0.0266  last_data_time: 0.0278   lr: 0.0001  max_mem: 15466M
[09/22 11:49:02] d2.utils.events INFO:  eta: 0:02:19  iter: 259  total_loss: 17.52  loss_ce: 0.1971  loss_mask: 0.4256  loss_dice: 1.036  loss_ce_0: 0.1921  loss_mask_0: 0.484  loss_dice_0: 1.219  loss_ce_1: 0.2543  loss_mask_1: 0.4556  loss_dice_1: 1.149  loss_ce_2: 0.2494  loss_mask_2: 0.4299  loss_dice_2: 1.111  loss_ce_3: 0.2226  loss_mask_3: 0.4302  loss_dice_3: 1.076  loss_ce_4: 0.2227  loss_mask_4: 0.4263  loss_dice_4: 1.081  loss_ce_5: 0.181  loss_mask_5: 0.422  loss_dice_5: 1.075  loss_ce_6: 0.2213  loss_mask_6: 0.4296  loss_dice_6: 1.066  loss_ce_7: 0.2019  loss_mask_7: 0.4242  loss_dice_7: 1.088  loss_ce_8: 0.1936  loss_mask_8: 0.4284  loss_dice_8: 1.061    time: 0.5802  last_time: 0.6599  data_time: 0.0310  last_data_time: 0.0862   lr: 0.0001  max_mem: 15466M
[09/22 11:49:14] d2.utils.events INFO:  eta: 0:02:07  iter: 279  total_loss: 18  loss_ce: 0.2147  loss_mask: 0.4356  loss_dice: 1.06  loss_ce_0: 0.1967  loss_mask_0: 0.4788  loss_dice_0: 1.273  loss_ce_1: 0.24  loss_mask_1: 0.4749  loss_dice_1: 1.24  loss_ce_2: 0.2256  loss_mask_2: 0.4527  loss_dice_2: 1.154  loss_ce_3: 0.2422  loss_mask_3: 0.4465  loss_dice_3: 1.122  loss_ce_4: 0.2171  loss_mask_4: 0.4359  loss_dice_4: 1.12  loss_ce_5: 0.2409  loss_mask_5: 0.4405  loss_dice_5: 1.113  loss_ce_6: 0.2553  loss_mask_6: 0.4398  loss_dice_6: 1.082  loss_ce_7: 0.2286  loss_mask_7: 0.4367  loss_dice_7: 1.104  loss_ce_8: 0.2297  loss_mask_8: 0.4368  loss_dice_8: 1.123    time: 0.5808  last_time: 0.6111  data_time: 0.0281  last_data_time: 0.0260   lr: 0.0001  max_mem: 15466M
[09/22 11:49:26] d2.utils.events INFO:  eta: 0:01:56  iter: 299  total_loss: 17.3  loss_ce: 0.1937  loss_mask: 0.4181  loss_dice: 1.06  loss_ce_0: 0.1627  loss_mask_0: 0.4616  loss_dice_0: 1.171  loss_ce_1: 0.1893  loss_mask_1: 0.4535  loss_dice_1: 1.148  loss_ce_2: 0.2052  loss_mask_2: 0.4357  loss_dice_2: 1.129  loss_ce_3: 0.2194  loss_mask_3: 0.4265  loss_dice_3: 1.078  loss_ce_4: 0.2013  loss_mask_4: 0.4258  loss_dice_4: 1.067  loss_ce_5: 0.2367  loss_mask_5: 0.4238  loss_dice_5: 1.066  loss_ce_6: 0.1972  loss_mask_6: 0.4146  loss_dice_6: 1.025  loss_ce_7: 0.1922  loss_mask_7: 0.4232  loss_dice_7: 1.057  loss_ce_8: 0.2  loss_mask_8: 0.4209  loss_dice_8: 1.05    time: 0.5818  last_time: 0.5912  data_time: 0.0306  last_data_time: 0.0214   lr: 0.0001  max_mem: 15466M
[09/22 11:49:38] d2.utils.events INFO:  eta: 0:01:44  iter: 319  total_loss: 17.6  loss_ce: 0.198  loss_mask: 0.4336  loss_dice: 1.02  loss_ce_0: 0.191  loss_mask_0: 0.4819  loss_dice_0: 1.187  loss_ce_1: 0.2077  loss_mask_1: 0.4423  loss_dice_1: 1.134  loss_ce_2: 0.2243  loss_mask_2: 0.4415  loss_dice_2: 1.116  loss_ce_3: 0.2144  loss_mask_3: 0.4454  loss_dice_3: 1.088  loss_ce_4: 0.1942  loss_mask_4: 0.4456  loss_dice_4: 1.046  loss_ce_5: 0.1646  loss_mask_5: 0.4493  loss_dice_5: 1.032  loss_ce_6: 0.1816  loss_mask_6: 0.4407  loss_dice_6: 1.045  loss_ce_7: 0.1759  loss_mask_7: 0.4423  loss_dice_7: 1.034  loss_ce_8: 0.1868  loss_mask_8: 0.4396  loss_dice_8: 1.03    time: 0.5823  last_time: 0.6431  data_time: 0.0305  last_data_time: 0.0285   lr: 0.0001  max_mem: 15466M
[09/22 11:49:50] d2.utils.events INFO:  eta: 0:01:33  iter: 339  total_loss: 17.32  loss_ce: 0.2275  loss_mask: 0.4316  loss_dice: 1.005  loss_ce_0: 0.2143  loss_mask_0: 0.4634  loss_dice_0: 1.179  loss_ce_1: 0.2657  loss_mask_1: 0.4581  loss_dice_1: 1.115  loss_ce_2: 0.2358  loss_mask_2: 0.4354  loss_dice_2: 1.098  loss_ce_3: 0.2475  loss_mask_3: 0.4175  loss_dice_3: 1.044  loss_ce_4: 0.2246  loss_mask_4: 0.4235  loss_dice_4: 1.027  loss_ce_5: 0.2046  loss_mask_5: 0.4221  loss_dice_5: 1.037  loss_ce_6: 0.2048  loss_mask_6: 0.4063  loss_dice_6: 1.039  loss_ce_7: 0.2111  loss_mask_7: 0.421  loss_dice_7: 1.014  loss_ce_8: 0.2111  loss_mask_8: 0.4253  loss_dice_8: 1.033    time: 0.5817  last_time: 0.5287  data_time: 0.0260  last_data_time: 0.0208   lr: 0.0001  max_mem: 15466M
[09/22 11:50:01] d2.utils.events INFO:  eta: 0:01:21  iter: 359  total_loss: 17.44  loss_ce: 0.2065  loss_mask: 0.4175  loss_dice: 1.046  loss_ce_0: 0.1713  loss_mask_0: 0.45  loss_dice_0: 1.203  loss_ce_1: 0.2408  loss_mask_1: 0.4502  loss_dice_1: 1.149  loss_ce_2: 0.2639  loss_mask_2: 0.4202  loss_dice_2: 1.086  loss_ce_3: 0.2119  loss_mask_3: 0.4248  loss_dice_3: 1.087  loss_ce_4: 0.2078  loss_mask_4: 0.4196  loss_dice_4: 1.058  loss_ce_5: 0.2145  loss_mask_5: 0.4139  loss_dice_5: 1.078  loss_ce_6: 0.1726  loss_mask_6: 0.4138  loss_dice_6: 1.051  loss_ce_7: 0.2046  loss_mask_7: 0.4224  loss_dice_7: 1.054  loss_ce_8: 0.1939  loss_mask_8: 0.4178  loss_dice_8: 1.062    time: 0.5818  last_time: 0.6043  data_time: 0.0266  last_data_time: 0.0271   lr: 0.0001  max_mem: 15466M
[09/22 11:50:13] d2.utils.events INFO:  eta: 0:01:10  iter: 379  total_loss: 16.64  loss_ce: 0.2277  loss_mask: 0.421  loss_dice: 1.021  loss_ce_0: 0.2037  loss_mask_0: 0.4561  loss_dice_0: 1.157  loss_ce_1: 0.2555  loss_mask_1: 0.4395  loss_dice_1: 1.082  loss_ce_2: 0.2395  loss_mask_2: 0.4161  loss_dice_2: 1.058  loss_ce_3: 0.2304  loss_mask_3: 0.425  loss_dice_3: 1.042  loss_ce_4: 0.2126  loss_mask_4: 0.419  loss_dice_4: 1.012  loss_ce_5: 0.1862  loss_mask_5: 0.4226  loss_dice_5: 1.023  loss_ce_6: 0.2195  loss_mask_6: 0.4212  loss_dice_6: 1.004  loss_ce_7: 0.1943  loss_mask_7: 0.4163  loss_dice_7: 1.007  loss_ce_8: 0.215  loss_mask_8: 0.4188  loss_dice_8: 0.9951    time: 0.5828  last_time: 0.5864  data_time: 0.0320  last_data_time: 0.0274   lr: 0.0001  max_mem: 15466M
[09/22 11:50:25] d2.utils.events INFO:  eta: 0:00:58  iter: 399  total_loss: 17.33  loss_ce: 0.1985  loss_mask: 0.4391  loss_dice: 1.056  loss_ce_0: 0.1991  loss_mask_0: 0.4805  loss_dice_0: 1.21  loss_ce_1: 0.2487  loss_mask_1: 0.4736  loss_dice_1: 1.129  loss_ce_2: 0.2137  loss_mask_2: 0.4485  loss_dice_2: 1.07  loss_ce_3: 0.2462  loss_mask_3: 0.4389  loss_dice_3: 1.066  loss_ce_4: 0.1784  loss_mask_4: 0.4389  loss_dice_4: 1.074  loss_ce_5: 0.2268  loss_mask_5: 0.4314  loss_dice_5: 1.051  loss_ce_6: 0.2042  loss_mask_6: 0.4419  loss_dice_6: 1.06  loss_ce_7: 0.1929  loss_mask_7: 0.4407  loss_dice_7: 1.042  loss_ce_8: 0.2062  loss_mask_8: 0.4424  loss_dice_8: 1.065    time: 0.5833  last_time: 0.5639  data_time: 0.0373  last_data_time: 0.0270   lr: 0.0001  max_mem: 15466M
[09/22 11:50:37] d2.utils.events INFO:  eta: 0:00:46  iter: 419  total_loss: 16.96  loss_ce: 0.2136  loss_mask: 0.3926  loss_dice: 1.017  loss_ce_0: 0.2207  loss_mask_0: 0.4468  loss_dice_0: 1.172  loss_ce_1: 0.2382  loss_mask_1: 0.4274  loss_dice_1: 1.1  loss_ce_2: 0.2409  loss_mask_2: 0.4049  loss_dice_2: 1.072  loss_ce_3: 0.2305  loss_mask_3: 0.3946  loss_dice_3: 1.031  loss_ce_4: 0.2146  loss_mask_4: 0.401  loss_dice_4: 1.055  loss_ce_5: 0.2098  loss_mask_5: 0.4028  loss_dice_5: 1.042  loss_ce_6: 0.2053  loss_mask_6: 0.3985  loss_dice_6: 1.016  loss_ce_7: 0.2202  loss_mask_7: 0.3974  loss_dice_7: 1.025  loss_ce_8: 0.1901  loss_mask_8: 0.3933  loss_dice_8: 1.016    time: 0.5832  last_time: 0.5523  data_time: 0.0309  last_data_time: 0.0256   lr: 0.0001  max_mem: 15466M
[09/22 11:50:49] d2.utils.events INFO:  eta: 0:00:34  iter: 439  total_loss: 16.45  loss_ce: 0.1593  loss_mask: 0.3896  loss_dice: 1.019  loss_ce_0: 0.1718  loss_mask_0: 0.4403  loss_dice_0: 1.13  loss_ce_1: 0.1939  loss_mask_1: 0.4258  loss_dice_1: 1.071  loss_ce_2: 0.1855  loss_mask_2: 0.4014  loss_dice_2: 1.05  loss_ce_3: 0.1809  loss_mask_3: 0.3959  loss_dice_3: 1.034  loss_ce_4: 0.1646  loss_mask_4: 0.3957  loss_dice_4: 1.008  loss_ce_5: 0.1403  loss_mask_5: 0.3951  loss_dice_5: 1.012  loss_ce_6: 0.1658  loss_mask_6: 0.3962  loss_dice_6: 1.008  loss_ce_7: 0.1672  loss_mask_7: 0.3909  loss_dice_7: 1.022  loss_ce_8: 0.1577  loss_mask_8: 0.3843  loss_dice_8: 1.005    time: 0.5832  last_time: 0.5350  data_time: 0.0309  last_data_time: 0.0259   lr: 0.0001  max_mem: 15466M
[09/22 11:51:00] d2.utils.events INFO:  eta: 0:00:23  iter: 459  total_loss: 16.62  loss_ce: 0.1935  loss_mask: 0.4024  loss_dice: 1.012  loss_ce_0: 0.1679  loss_mask_0: 0.4284  loss_dice_0: 1.155  loss_ce_1: 0.2302  loss_mask_1: 0.422  loss_dice_1: 1.079  loss_ce_2: 0.2109  loss_mask_2: 0.4162  loss_dice_2: 1.052  loss_ce_3: 0.2004  loss_mask_3: 0.4097  loss_dice_3: 1.028  loss_ce_4: 0.2093  loss_mask_4: 0.4038  loss_dice_4: 1.036  loss_ce_5: 0.1998  loss_mask_5: 0.4027  loss_dice_5: 1.041  loss_ce_6: 0.2021  loss_mask_6: 0.4015  loss_dice_6: 1.022  loss_ce_7: 0.2047  loss_mask_7: 0.4025  loss_dice_7: 1.047  loss_ce_8: 0.1827  loss_mask_8: 0.3969  loss_dice_8: 1.012    time: 0.5833  last_time: 0.5932  data_time: 0.0270  last_data_time: 0.0240   lr: 0.0001  max_mem: 15466M
[09/22 11:51:12] d2.utils.events INFO:  eta: 0:00:11  iter: 479  total_loss: 17.05  loss_ce: 0.2332  loss_mask: 0.4105  loss_dice: 0.9613  loss_ce_0: 0.2277  loss_mask_0: 0.454  loss_dice_0: 1.133  loss_ce_1: 0.25  loss_mask_1: 0.4322  loss_dice_1: 1.082  loss_ce_2: 0.2609  loss_mask_2: 0.4181  loss_dice_2: 1.03  loss_ce_3: 0.2654  loss_mask_3: 0.4148  loss_dice_3: 1.004  loss_ce_4: 0.2403  loss_mask_4: 0.4279  loss_dice_4: 0.9919  loss_ce_5: 0.2306  loss_mask_5: 0.4104  loss_dice_5: 1.001  loss_ce_6: 0.2346  loss_mask_6: 0.4194  loss_dice_6: 0.9787  loss_ce_7: 0.2335  loss_mask_7: 0.4171  loss_dice_7: 0.9871  loss_ce_8: 0.2286  loss_mask_8: 0.4097  loss_dice_8: 0.9644    time: 0.5839  last_time: 0.5783  data_time: 0.0311  last_data_time: 0.0271   lr: 0.0001  max_mem: 15466M
[09/22 11:51:24] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_500_19/model_final.pth
[09/22 11:51:27] d2.utils.events INFO:  eta: 0:00:00  iter: 499  total_loss: 16.34  loss_ce: 0.1927  loss_mask: 0.4041  loss_dice: 0.9864  loss_ce_0: 0.2079  loss_mask_0: 0.4369  loss_dice_0: 1.151  loss_ce_1: 0.2227  loss_mask_1: 0.4129  loss_dice_1: 1.095  loss_ce_2: 0.2366  loss_mask_2: 0.4114  loss_dice_2: 1.019  loss_ce_3: 0.225  loss_mask_3: 0.4153  loss_dice_3: 1.015  loss_ce_4: 0.1972  loss_mask_4: 0.3987  loss_dice_4: 1.017  loss_ce_5: 0.2037  loss_mask_5: 0.4127  loss_dice_5: 1.026  loss_ce_6: 0.1945  loss_mask_6: 0.4102  loss_dice_6: 0.9969  loss_ce_7: 0.1689  loss_mask_7: 0.4065  loss_dice_7: 0.9961  loss_ce_8: 0.195  loss_mask_8: 0.4086  loss_dice_8: 1.007    time: 0.5843  last_time: 0.6048  data_time: 0.0320  last_data_time: 0.0400   lr: 0.0001  max_mem: 15466M
[09/22 11:51:27] d2.engine.hooks INFO: Overall training speed: 498 iterations in 0:04:50 (0.5843 s / it)
[09/22 11:51:27] d2.engine.hooks INFO: Total training time: 0:04:55 (0:00:04 on hooks)
[09/22 11:51:27] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[09/22 11:51:27] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[09/22 11:51:27] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/22 11:51:27] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[09/22 11:51:27] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[09/22 11:51:27] d2.evaluation.evaluator INFO: Start inference on 250 batches
[09/22 11:51:35] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0081 s/iter. Inference: 0.2194 s/iter. Eval: 0.0877 s/iter. Total: 0.3152 s/iter. ETA=0:01:15
[09/22 11:51:40] d2.evaluation.evaluator INFO: Inference done 28/250. Dataloading: 0.0078 s/iter. Inference: 0.2241 s/iter. Eval: 0.0710 s/iter. Total: 0.3031 s/iter. ETA=0:01:07
[09/22 11:51:46] d2.evaluation.evaluator INFO: Inference done 44/250. Dataloading: 0.0080 s/iter. Inference: 0.2267 s/iter. Eval: 0.0771 s/iter. Total: 0.3118 s/iter. ETA=0:01:04
[09/22 11:51:51] d2.evaluation.evaluator INFO: Inference done 60/250. Dataloading: 0.0087 s/iter. Inference: 0.2264 s/iter. Eval: 0.0801 s/iter. Total: 0.3153 s/iter. ETA=0:00:59
[09/22 11:51:56] d2.evaluation.evaluator INFO: Inference done 78/250. Dataloading: 0.0087 s/iter. Inference: 0.2189 s/iter. Eval: 0.0798 s/iter. Total: 0.3074 s/iter. ETA=0:00:52
[09/22 11:52:01] d2.evaluation.evaluator INFO: Inference done 95/250. Dataloading: 0.0087 s/iter. Inference: 0.2157 s/iter. Eval: 0.0804 s/iter. Total: 0.3050 s/iter. ETA=0:00:47
[09/22 11:52:06] d2.evaluation.evaluator INFO: Inference done 111/250. Dataloading: 0.0087 s/iter. Inference: 0.2186 s/iter. Eval: 0.0810 s/iter. Total: 0.3083 s/iter. ETA=0:00:42
[09/22 11:52:12] d2.evaluation.evaluator INFO: Inference done 127/250. Dataloading: 0.0091 s/iter. Inference: 0.2201 s/iter. Eval: 0.0826 s/iter. Total: 0.3119 s/iter. ETA=0:00:38
[09/22 11:52:17] d2.evaluation.evaluator INFO: Inference done 144/250. Dataloading: 0.0089 s/iter. Inference: 0.2198 s/iter. Eval: 0.0819 s/iter. Total: 0.3108 s/iter. ETA=0:00:32
[09/22 11:52:22] d2.evaluation.evaluator INFO: Inference done 161/250. Dataloading: 0.0088 s/iter. Inference: 0.2197 s/iter. Eval: 0.0812 s/iter. Total: 0.3098 s/iter. ETA=0:00:27
[09/22 11:52:27] d2.evaluation.evaluator INFO: Inference done 178/250. Dataloading: 0.0089 s/iter. Inference: 0.2198 s/iter. Eval: 0.0807 s/iter. Total: 0.3095 s/iter. ETA=0:00:22
[09/22 11:52:32] d2.evaluation.evaluator INFO: Inference done 195/250. Dataloading: 0.0088 s/iter. Inference: 0.2201 s/iter. Eval: 0.0799 s/iter. Total: 0.3088 s/iter. ETA=0:00:16
[09/22 11:52:38] d2.evaluation.evaluator INFO: Inference done 212/250. Dataloading: 0.0088 s/iter. Inference: 0.2202 s/iter. Eval: 0.0802 s/iter. Total: 0.3093 s/iter. ETA=0:00:11
[09/22 11:52:43] d2.evaluation.evaluator INFO: Inference done 228/250. Dataloading: 0.0088 s/iter. Inference: 0.2217 s/iter. Eval: 0.0799 s/iter. Total: 0.3104 s/iter. ETA=0:00:06
[09/22 11:52:48] d2.evaluation.evaluator INFO: Inference done 246/250. Dataloading: 0.0087 s/iter. Inference: 0.2206 s/iter. Eval: 0.0786 s/iter. Total: 0.3080 s/iter. ETA=0:00:01
[09/22 11:52:50] d2.evaluation.evaluator INFO: Total inference time: 0:01:16.210826 (0.311065 s / iter per device, on 2 devices)
[09/22 11:52:50] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:53 (0.220059 s / iter per device, on 2 devices)
[09/22 11:52:50] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evalc55rie19 ...
[09/22 11:54:05] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 36.753 | 46.992 | 44.378 |      19       |
| Things | 0.000  | 0.000  | 0.000  |       8       |
| Stuff  | 63.482 | 81.168 | 76.653 |      11       |
[09/22 11:54:05] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.269 | 97.674 | 99.586 |     Stuff     |
| class_8  | 69.208 | 83.680 | 82.705 |     Stuff     |
| class_11 | 85.393 | 87.815 | 97.242 |     Stuff     |
| class_12 | 44.844 | 80.012 | 56.047 |     Stuff     |
| class_13 | 34.999 | 76.085 | 46.000 |     Stuff     |
| class_17 | 48.412 | 64.682 | 74.847 |     Stuff     |
| class_19 | 46.851 | 68.690 | 68.206 |     Stuff     |
| class_20 | 62.205 | 76.110 | 81.730 |     Stuff     |
| class_21 | 88.997 | 90.105 | 98.770 |     Stuff     |
| class_22 | 32.209 | 76.218 | 42.259 |     Stuff     |
| class_23 | 87.911 | 91.774 | 95.791 |     Stuff     |
| class_24 | 0.000  | 0.000  | 0.000  |    Things     |
| class_25 | 0.000  | 0.000  | 0.000  |    Things     |
| class_26 | 0.000  | 0.000  | 0.000  |    Things     |
| class_27 | 0.000  | 0.000  | 0.000  |    Things     |
| class_28 | 0.000  | 0.000  | 0.000  |    Things     |
| class_31 | 0.000  | 0.000  | 0.000  |    Things     |
| class_32 | 0.000  | 0.000  | 0.000  |    Things     |
| class_33 | 0.000  | 0.000  | 0.000  |    Things     |
[09/22 11:54:05] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[09/22 11:54:05] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[09/22 11:54:05] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[09/22 11:54:05] d2.evaluation.testing INFO: copypaste: 36.7526,46.9918,44.3781,0.0000,0.0000,0.0000,63.4817,81.1677,76.6530,97.2691,97.6735,99.5859,69.2076,83.6799,82.7051,85.3932,87.8150,97.2421,44.8445,80.0120,56.0472,34.9990,76.0849,46.0000,48.4121,64.6818,74.8466,46.8511,68.6905,68.2060,62.2049,76.1105,81.7297,88.9972,90.1050,98.7705,32.2092,76.2177,42.2594,87.9108,91.7738,95.7907,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000
