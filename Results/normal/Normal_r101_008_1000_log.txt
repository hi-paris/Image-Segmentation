[09/04 18:09:59] detectron2 INFO: Rank of current process: 0. World size: 1
[09/04 18:10:00] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[09/04 18:10:00] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_exp_008_19.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[09/04 18:10:00] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_exp_008_19.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[09/04 18:10:00] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[09/04 18:10:00] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000/config.yaml
[09/04 18:10:00] d2.utils.env INFO: Using a generated random seed 3709162
[09/04 18:10:04] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[09/04 18:10:04] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[09/04 18:10:04] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[09/04 18:10:05] d2.data.build INFO: Using training sampler TrainingSampler
[09/04 18:10:05] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/04 18:10:05] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[09/04 18:10:05] d2.data.common INFO: Serialized dataset takes 2.16 MiB
[09/04 18:10:05] d2.data.build INFO: Making batched data loader with batch_size=8
[09/04 18:10:05] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[09/04 18:10:05] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[09/04 18:10:05] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[09/04 18:10:06] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[09/04 18:10:06] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.10.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.11.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.12.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.13.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.14.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.15.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.16.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.17.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.18.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.19.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.20.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.21.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.22.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.6.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.7.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.8.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.9.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mcriterion.empty_weight[0m
[09/04 18:10:06] d2.engine.train_loop INFO: Starting training from iteration 0
[09/04 18:10:28] d2.utils.events INFO:  eta: 0:15:27  iter: 19  total_loss: 26.07  loss_ce: 0.5667  loss_mask: 0.6139  loss_dice: 1.362  loss_ce_0: 0.6095  loss_mask_0: 0.7009  loss_dice_0: 1.526  loss_ce_1: 0.6406  loss_mask_1: 0.7071  loss_dice_1: 1.548  loss_ce_2: 0.6316  loss_mask_2: 0.6542  loss_dice_2: 1.439  loss_ce_3: 0.5465  loss_mask_3: 0.6268  loss_dice_3: 1.418  loss_ce_4: 0.5843  loss_mask_4: 0.6166  loss_dice_4: 1.41  loss_ce_5: 0.5581  loss_mask_5: 0.6196  loss_dice_5: 1.377  loss_ce_6: 0.5863  loss_mask_6: 0.6146  loss_dice_6: 1.386  loss_ce_7: 0.58  loss_mask_7: 0.6267  loss_dice_7: 1.352  loss_ce_8: 0.6043  loss_mask_8: 0.6065  loss_dice_8: 1.366    time: 0.9572  last_time: 0.9596  data_time: 0.0728  last_data_time: 0.0353   lr: 0.0001  max_mem: 29889M
[09/04 18:10:47] d2.utils.events INFO:  eta: 0:14:59  iter: 39  total_loss: 21.14  loss_ce: 0.2836  loss_mask: 0.4957  loss_dice: 1.174  loss_ce_0: 0.3765  loss_mask_0: 0.5542  loss_dice_0: 1.406  loss_ce_1: 0.4098  loss_mask_1: 0.5359  loss_dice_1: 1.32  loss_ce_2: 0.3914  loss_mask_2: 0.5109  loss_dice_2: 1.263  loss_ce_3: 0.377  loss_mask_3: 0.5069  loss_dice_3: 1.204  loss_ce_4: 0.3464  loss_mask_4: 0.5111  loss_dice_4: 1.207  loss_ce_5: 0.3272  loss_mask_5: 0.496  loss_dice_5: 1.214  loss_ce_6: 0.3034  loss_mask_6: 0.5067  loss_dice_6: 1.199  loss_ce_7: 0.2844  loss_mask_7: 0.5135  loss_dice_7: 1.196  loss_ce_8: 0.2962  loss_mask_8: 0.5065  loss_dice_8: 1.2    time: 0.9443  last_time: 0.9107  data_time: 0.0372  last_data_time: 0.0343   lr: 0.0001  max_mem: 29889M
[09/04 18:11:06] d2.utils.events INFO:  eta: 0:14:41  iter: 59  total_loss: 20.3  loss_ce: 0.2624  loss_mask: 0.4748  loss_dice: 1.154  loss_ce_0: 0.2944  loss_mask_0: 0.5198  loss_dice_0: 1.398  loss_ce_1: 0.2706  loss_mask_1: 0.4948  loss_dice_1: 1.303  loss_ce_2: 0.3075  loss_mask_2: 0.4898  loss_dice_2: 1.214  loss_ce_3: 0.3298  loss_mask_3: 0.483  loss_dice_3: 1.186  loss_ce_4: 0.2899  loss_mask_4: 0.481  loss_dice_4: 1.195  loss_ce_5: 0.3103  loss_mask_5: 0.4809  loss_dice_5: 1.208  loss_ce_6: 0.2707  loss_mask_6: 0.4821  loss_dice_6: 1.187  loss_ce_7: 0.2761  loss_mask_7: 0.4793  loss_dice_7: 1.177  loss_ce_8: 0.2647  loss_mask_8: 0.4738  loss_dice_8: 1.16    time: 0.9470  last_time: 0.9248  data_time: 0.0375  last_data_time: 0.0389   lr: 0.0001  max_mem: 29891M
[09/04 18:11:25] d2.utils.events INFO:  eta: 0:14:22  iter: 79  total_loss: 19.78  loss_ce: 0.2201  loss_mask: 0.4877  loss_dice: 1.168  loss_ce_0: 0.2117  loss_mask_0: 0.5234  loss_dice_0: 1.329  loss_ce_1: 0.2628  loss_mask_1: 0.4952  loss_dice_1: 1.305  loss_ce_2: 0.269  loss_mask_2: 0.4951  loss_dice_2: 1.249  loss_ce_3: 0.289  loss_mask_3: 0.48  loss_dice_3: 1.221  loss_ce_4: 0.2478  loss_mask_4: 0.4734  loss_dice_4: 1.221  loss_ce_5: 0.2466  loss_mask_5: 0.4737  loss_dice_5: 1.205  loss_ce_6: 0.228  loss_mask_6: 0.4797  loss_dice_6: 1.188  loss_ce_7: 0.2333  loss_mask_7: 0.4882  loss_dice_7: 1.18  loss_ce_8: 0.2247  loss_mask_8: 0.4939  loss_dice_8: 1.179    time: 0.9455  last_time: 0.9318  data_time: 0.0388  last_data_time: 0.0431   lr: 0.0001  max_mem: 29891M
[09/04 18:11:44] d2.utils.events INFO:  eta: 0:14:04  iter: 99  total_loss: 19.57  loss_ce: 0.2304  loss_mask: 0.4617  loss_dice: 1.134  loss_ce_0: 0.2115  loss_mask_0: 0.5027  loss_dice_0: 1.343  loss_ce_1: 0.2854  loss_mask_1: 0.4853  loss_dice_1: 1.294  loss_ce_2: 0.2528  loss_mask_2: 0.4691  loss_dice_2: 1.237  loss_ce_3: 0.2594  loss_mask_3: 0.4623  loss_dice_3: 1.221  loss_ce_4: 0.2342  loss_mask_4: 0.4714  loss_dice_4: 1.204  loss_ce_5: 0.2291  loss_mask_5: 0.4662  loss_dice_5: 1.194  loss_ce_6: 0.2336  loss_mask_6: 0.4661  loss_dice_6: 1.147  loss_ce_7: 0.2354  loss_mask_7: 0.47  loss_dice_7: 1.159  loss_ce_8: 0.2153  loss_mask_8: 0.4658  loss_dice_8: 1.18    time: 0.9440  last_time: 0.9485  data_time: 0.0386  last_data_time: 0.0376   lr: 0.0001  max_mem: 29891M
[09/04 18:12:03] d2.utils.events INFO:  eta: 0:13:46  iter: 119  total_loss: 18.64  loss_ce: 0.2212  loss_mask: 0.4717  loss_dice: 1.113  loss_ce_0: 0.2115  loss_mask_0: 0.4929  loss_dice_0: 1.247  loss_ce_1: 0.2699  loss_mask_1: 0.4989  loss_dice_1: 1.188  loss_ce_2: 0.2761  loss_mask_2: 0.4613  loss_dice_2: 1.121  loss_ce_3: 0.2542  loss_mask_3: 0.466  loss_dice_3: 1.113  loss_ce_4: 0.2523  loss_mask_4: 0.4721  loss_dice_4: 1.118  loss_ce_5: 0.2302  loss_mask_5: 0.4814  loss_dice_5: 1.138  loss_ce_6: 0.2377  loss_mask_6: 0.4791  loss_dice_6: 1.093  loss_ce_7: 0.2186  loss_mask_7: 0.4769  loss_dice_7: 1.12  loss_ce_8: 0.2035  loss_mask_8: 0.4736  loss_dice_8: 1.107    time: 0.9445  last_time: 0.9695  data_time: 0.0403  last_data_time: 0.0374   lr: 0.0001  max_mem: 29891M
[09/04 18:12:22] d2.utils.events INFO:  eta: 0:13:28  iter: 139  total_loss: 18.28  loss_ce: 0.2213  loss_mask: 0.4245  loss_dice: 1.074  loss_ce_0: 0.1842  loss_mask_0: 0.4814  loss_dice_0: 1.22  loss_ce_1: 0.277  loss_mask_1: 0.4433  loss_dice_1: 1.147  loss_ce_2: 0.2661  loss_mask_2: 0.4283  loss_dice_2: 1.137  loss_ce_3: 0.2579  loss_mask_3: 0.4404  loss_dice_3: 1.096  loss_ce_4: 0.2291  loss_mask_4: 0.4386  loss_dice_4: 1.124  loss_ce_5: 0.2319  loss_mask_5: 0.4245  loss_dice_5: 1.091  loss_ce_6: 0.2157  loss_mask_6: 0.4273  loss_dice_6: 1.089  loss_ce_7: 0.2165  loss_mask_7: 0.4258  loss_dice_7: 1.067  loss_ce_8: 0.2222  loss_mask_8: 0.4253  loss_dice_8: 1.055    time: 0.9452  last_time: 0.9162  data_time: 0.0406  last_data_time: 0.0342   lr: 0.0001  max_mem: 29891M
[09/04 18:12:41] d2.utils.events INFO:  eta: 0:13:09  iter: 159  total_loss: 18.75  loss_ce: 0.2263  loss_mask: 0.4511  loss_dice: 1.11  loss_ce_0: 0.2083  loss_mask_0: 0.4843  loss_dice_0: 1.255  loss_ce_1: 0.2497  loss_mask_1: 0.4623  loss_dice_1: 1.196  loss_ce_2: 0.2361  loss_mask_2: 0.4669  loss_dice_2: 1.176  loss_ce_3: 0.2611  loss_mask_3: 0.4535  loss_dice_3: 1.119  loss_ce_4: 0.2515  loss_mask_4: 0.4576  loss_dice_4: 1.144  loss_ce_5: 0.2547  loss_mask_5: 0.4525  loss_dice_5: 1.137  loss_ce_6: 0.2154  loss_mask_6: 0.4566  loss_dice_6: 1.132  loss_ce_7: 0.2259  loss_mask_7: 0.4518  loss_dice_7: 1.133  loss_ce_8: 0.2347  loss_mask_8: 0.4479  loss_dice_8: 1.132    time: 0.9442  last_time: 0.9264  data_time: 0.0382  last_data_time: 0.0352   lr: 0.0001  max_mem: 29891M
[09/04 18:13:00] d2.utils.events INFO:  eta: 0:12:51  iter: 179  total_loss: 18.7  loss_ce: 0.2101  loss_mask: 0.4395  loss_dice: 1.142  loss_ce_0: 0.1993  loss_mask_0: 0.5208  loss_dice_0: 1.279  loss_ce_1: 0.2986  loss_mask_1: 0.4642  loss_dice_1: 1.235  loss_ce_2: 0.254  loss_mask_2: 0.4479  loss_dice_2: 1.198  loss_ce_3: 0.28  loss_mask_3: 0.4584  loss_dice_3: 1.164  loss_ce_4: 0.232  loss_mask_4: 0.4567  loss_dice_4: 1.178  loss_ce_5: 0.2285  loss_mask_5: 0.4694  loss_dice_5: 1.164  loss_ce_6: 0.2245  loss_mask_6: 0.4419  loss_dice_6: 1.101  loss_ce_7: 0.2209  loss_mask_7: 0.4456  loss_dice_7: 1.148  loss_ce_8: 0.205  loss_mask_8: 0.4382  loss_dice_8: 1.125    time: 0.9440  last_time: 0.9770  data_time: 0.0376  last_data_time: 0.0372   lr: 0.0001  max_mem: 29891M
[09/04 18:13:18] d2.utils.events INFO:  eta: 0:12:32  iter: 199  total_loss: 18.13  loss_ce: 0.2588  loss_mask: 0.4364  loss_dice: 1.088  loss_ce_0: 0.2283  loss_mask_0: 0.4767  loss_dice_0: 1.207  loss_ce_1: 0.2844  loss_mask_1: 0.4607  loss_dice_1: 1.138  loss_ce_2: 0.278  loss_mask_2: 0.4454  loss_dice_2: 1.158  loss_ce_3: 0.3004  loss_mask_3: 0.4488  loss_dice_3: 1.121  loss_ce_4: 0.2526  loss_mask_4: 0.4444  loss_dice_4: 1.128  loss_ce_5: 0.2611  loss_mask_5: 0.4449  loss_dice_5: 1.116  loss_ce_6: 0.2563  loss_mask_6: 0.4382  loss_dice_6: 1.123  loss_ce_7: 0.2601  loss_mask_7: 0.4333  loss_dice_7: 1.1  loss_ce_8: 0.2433  loss_mask_8: 0.4359  loss_dice_8: 1.132    time: 0.9436  last_time: 0.9431  data_time: 0.0410  last_data_time: 0.0408   lr: 0.0001  max_mem: 29891M
[09/04 18:13:37] d2.utils.events INFO:  eta: 0:12:12  iter: 219  total_loss: 17.77  loss_ce: 0.2226  loss_mask: 0.4635  loss_dice: 1.042  loss_ce_0: 0.2074  loss_mask_0: 0.5056  loss_dice_0: 1.244  loss_ce_1: 0.2364  loss_mask_1: 0.4841  loss_dice_1: 1.162  loss_ce_2: 0.2695  loss_mask_2: 0.4622  loss_dice_2: 1.112  loss_ce_3: 0.2672  loss_mask_3: 0.4666  loss_dice_3: 1.095  loss_ce_4: 0.244  loss_mask_4: 0.4611  loss_dice_4: 1.096  loss_ce_5: 0.2205  loss_mask_5: 0.4635  loss_dice_5: 1.078  loss_ce_6: 0.2251  loss_mask_6: 0.4649  loss_dice_6: 1.061  loss_ce_7: 0.2102  loss_mask_7: 0.4663  loss_dice_7: 1.062  loss_ce_8: 0.1957  loss_mask_8: 0.4661  loss_dice_8: 1.061    time: 0.9432  last_time: 0.9388  data_time: 0.0399  last_data_time: 0.0377   lr: 0.0001  max_mem: 29891M
[09/04 18:13:56] d2.utils.events INFO:  eta: 0:11:54  iter: 239  total_loss: 17.74  loss_ce: 0.2358  loss_mask: 0.4538  loss_dice: 1.058  loss_ce_0: 0.1981  loss_mask_0: 0.4957  loss_dice_0: 1.202  loss_ce_1: 0.2596  loss_mask_1: 0.4735  loss_dice_1: 1.151  loss_ce_2: 0.2599  loss_mask_2: 0.4582  loss_dice_2: 1.08  loss_ce_3: 0.2752  loss_mask_3: 0.4546  loss_dice_3: 1.083  loss_ce_4: 0.2633  loss_mask_4: 0.4584  loss_dice_4: 1.081  loss_ce_5: 0.2372  loss_mask_5: 0.452  loss_dice_5: 1.063  loss_ce_6: 0.2399  loss_mask_6: 0.454  loss_dice_6: 1.071  loss_ce_7: 0.2466  loss_mask_7: 0.4567  loss_dice_7: 1.084  loss_ce_8: 0.2337  loss_mask_8: 0.4517  loss_dice_8: 1.059    time: 0.9430  last_time: 0.9215  data_time: 0.0381  last_data_time: 0.0359   lr: 0.0001  max_mem: 29891M
[09/04 18:14:15] d2.utils.events INFO:  eta: 0:11:35  iter: 259  total_loss: 16.74  loss_ce: 0.1962  loss_mask: 0.4036  loss_dice: 1.032  loss_ce_0: 0.1696  loss_mask_0: 0.4426  loss_dice_0: 1.141  loss_ce_1: 0.232  loss_mask_1: 0.4132  loss_dice_1: 1.1  loss_ce_2: 0.2305  loss_mask_2: 0.4052  loss_dice_2: 1.081  loss_ce_3: 0.2378  loss_mask_3: 0.3989  loss_dice_3: 1.055  loss_ce_4: 0.1946  loss_mask_4: 0.4052  loss_dice_4: 1.058  loss_ce_5: 0.2117  loss_mask_5: 0.4001  loss_dice_5: 1.033  loss_ce_6: 0.1973  loss_mask_6: 0.4019  loss_dice_6: 1.049  loss_ce_7: 0.2074  loss_mask_7: 0.4051  loss_dice_7: 1.052  loss_ce_8: 0.1851  loss_mask_8: 0.4017  loss_dice_8: 1.019    time: 0.9436  last_time: 0.9534  data_time: 0.0404  last_data_time: 0.0382   lr: 0.0001  max_mem: 29891M
[09/04 18:14:34] d2.utils.events INFO:  eta: 0:11:17  iter: 279  total_loss: 17.55  loss_ce: 0.2099  loss_mask: 0.4544  loss_dice: 1.056  loss_ce_0: 0.1866  loss_mask_0: 0.4871  loss_dice_0: 1.194  loss_ce_1: 0.2516  loss_mask_1: 0.4739  loss_dice_1: 1.124  loss_ce_2: 0.235  loss_mask_2: 0.4728  loss_dice_2: 1.097  loss_ce_3: 0.2385  loss_mask_3: 0.4697  loss_dice_3: 1.087  loss_ce_4: 0.2248  loss_mask_4: 0.4616  loss_dice_4: 1.059  loss_ce_5: 0.2199  loss_mask_5: 0.4573  loss_dice_5: 1.053  loss_ce_6: 0.2025  loss_mask_6: 0.4628  loss_dice_6: 1.055  loss_ce_7: 0.2009  loss_mask_7: 0.4616  loss_dice_7: 1.081  loss_ce_8: 0.1879  loss_mask_8: 0.4551  loss_dice_8: 1.072    time: 0.9438  last_time: 0.9695  data_time: 0.0412  last_data_time: 0.0459   lr: 0.0001  max_mem: 29891M
[09/04 18:14:53] d2.utils.events INFO:  eta: 0:10:58  iter: 299  total_loss: 17.01  loss_ce: 0.2088  loss_mask: 0.4426  loss_dice: 1.009  loss_ce_0: 0.1884  loss_mask_0: 0.48  loss_dice_0: 1.172  loss_ce_1: 0.2438  loss_mask_1: 0.4801  loss_dice_1: 1.095  loss_ce_2: 0.2175  loss_mask_2: 0.4544  loss_dice_2: 1.06  loss_ce_3: 0.2592  loss_mask_3: 0.4545  loss_dice_3: 1.022  loss_ce_4: 0.221  loss_mask_4: 0.4499  loss_dice_4: 1.025  loss_ce_5: 0.2218  loss_mask_5: 0.4359  loss_dice_5: 1.018  loss_ce_6: 0.2259  loss_mask_6: 0.4471  loss_dice_6: 1.01  loss_ce_7: 0.2075  loss_mask_7: 0.4383  loss_dice_7: 1.032  loss_ce_8: 0.2016  loss_mask_8: 0.4441  loss_dice_8: 0.9927    time: 0.9441  last_time: 0.9198  data_time: 0.0404  last_data_time: 0.0353   lr: 0.0001  max_mem: 29891M
[09/04 18:15:12] d2.utils.events INFO:  eta: 0:10:40  iter: 319  total_loss: 18.25  loss_ce: 0.2227  loss_mask: 0.4268  loss_dice: 1.092  loss_ce_0: 0.2001  loss_mask_0: 0.4771  loss_dice_0: 1.233  loss_ce_1: 0.2855  loss_mask_1: 0.4682  loss_dice_1: 1.166  loss_ce_2: 0.2756  loss_mask_2: 0.4515  loss_dice_2: 1.134  loss_ce_3: 0.2582  loss_mask_3: 0.4394  loss_dice_3: 1.111  loss_ce_4: 0.2443  loss_mask_4: 0.4398  loss_dice_4: 1.087  loss_ce_5: 0.2324  loss_mask_5: 0.4364  loss_dice_5: 1.097  loss_ce_6: 0.2285  loss_mask_6: 0.4349  loss_dice_6: 1.083  loss_ce_7: 0.2168  loss_mask_7: 0.4374  loss_dice_7: 1.095  loss_ce_8: 0.2229  loss_mask_8: 0.4352  loss_dice_8: 1.096    time: 0.9444  last_time: 0.9840  data_time: 0.0407  last_data_time: 0.0471   lr: 0.0001  max_mem: 29891M
[09/04 18:15:31] d2.utils.events INFO:  eta: 0:10:21  iter: 339  total_loss: 16.79  loss_ce: 0.1988  loss_mask: 0.4104  loss_dice: 1.033  loss_ce_0: 0.2019  loss_mask_0: 0.4544  loss_dice_0: 1.176  loss_ce_1: 0.2641  loss_mask_1: 0.4395  loss_dice_1: 1.13  loss_ce_2: 0.2554  loss_mask_2: 0.4284  loss_dice_2: 1.067  loss_ce_3: 0.2458  loss_mask_3: 0.4258  loss_dice_3: 1.084  loss_ce_4: 0.229  loss_mask_4: 0.4268  loss_dice_4: 1.05  loss_ce_5: 0.2024  loss_mask_5: 0.4258  loss_dice_5: 1.061  loss_ce_6: 0.2134  loss_mask_6: 0.4176  loss_dice_6: 1.052  loss_ce_7: 0.1964  loss_mask_7: 0.4187  loss_dice_7: 1.038  loss_ce_8: 0.1919  loss_mask_8: 0.414  loss_dice_8: 1.055    time: 0.9446  last_time: 0.9292  data_time: 0.0389  last_data_time: 0.0432   lr: 0.0001  max_mem: 29891M
[09/04 18:15:50] d2.utils.events INFO:  eta: 0:10:02  iter: 359  total_loss: 16.56  loss_ce: 0.1854  loss_mask: 0.4324  loss_dice: 0.9646  loss_ce_0: 0.1525  loss_mask_0: 0.4714  loss_dice_0: 1.119  loss_ce_1: 0.2094  loss_mask_1: 0.4483  loss_dice_1: 1.041  loss_ce_2: 0.2236  loss_mask_2: 0.4361  loss_dice_2: 1.011  loss_ce_3: 0.2173  loss_mask_3: 0.435  loss_dice_3: 0.9835  loss_ce_4: 0.1955  loss_mask_4: 0.4304  loss_dice_4: 0.9877  loss_ce_5: 0.1767  loss_mask_5: 0.4302  loss_dice_5: 1.004  loss_ce_6: 0.1841  loss_mask_6: 0.436  loss_dice_6: 0.9949  loss_ce_7: 0.1799  loss_mask_7: 0.4342  loss_dice_7: 0.9896  loss_ce_8: 0.1834  loss_mask_8: 0.436  loss_dice_8: 1.006    time: 0.9444  last_time: 0.9778  data_time: 0.0402  last_data_time: 0.0468   lr: 0.0001  max_mem: 29891M
[09/04 18:16:09] d2.utils.events INFO:  eta: 0:09:44  iter: 379  total_loss: 17.37  loss_ce: 0.2056  loss_mask: 0.4232  loss_dice: 1.032  loss_ce_0: 0.2027  loss_mask_0: 0.4887  loss_dice_0: 1.166  loss_ce_1: 0.2451  loss_mask_1: 0.4493  loss_dice_1: 1.131  loss_ce_2: 0.2482  loss_mask_2: 0.4447  loss_dice_2: 1.079  loss_ce_3: 0.2588  loss_mask_3: 0.4445  loss_dice_3: 1.058  loss_ce_4: 0.2053  loss_mask_4: 0.4377  loss_dice_4: 1.057  loss_ce_5: 0.2035  loss_mask_5: 0.4307  loss_dice_5: 1.059  loss_ce_6: 0.2116  loss_mask_6: 0.4194  loss_dice_6: 1.035  loss_ce_7: 0.2025  loss_mask_7: 0.4301  loss_dice_7: 1.037  loss_ce_8: 0.206  loss_mask_8: 0.4221  loss_dice_8: 1.028    time: 0.9452  last_time: 0.9474  data_time: 0.0401  last_data_time: 0.0351   lr: 0.0001  max_mem: 29891M
[09/04 18:16:28] d2.utils.events INFO:  eta: 0:09:25  iter: 399  total_loss: 16.2  loss_ce: 0.204  loss_mask: 0.3858  loss_dice: 0.9834  loss_ce_0: 0.2094  loss_mask_0: 0.4419  loss_dice_0: 1.098  loss_ce_1: 0.2305  loss_mask_1: 0.3994  loss_dice_1: 1.066  loss_ce_2: 0.2191  loss_mask_2: 0.3954  loss_dice_2: 1.024  loss_ce_3: 0.2295  loss_mask_3: 0.3964  loss_dice_3: 1.03  loss_ce_4: 0.2314  loss_mask_4: 0.3931  loss_dice_4: 1.023  loss_ce_5: 0.2082  loss_mask_5: 0.3903  loss_dice_5: 0.9983  loss_ce_6: 0.1929  loss_mask_6: 0.3917  loss_dice_6: 0.9967  loss_ce_7: 0.2049  loss_mask_7: 0.3959  loss_dice_7: 1.013  loss_ce_8: 0.2029  loss_mask_8: 0.3872  loss_dice_8: 0.985    time: 0.9456  last_time: 0.9294  data_time: 0.0415  last_data_time: 0.0466   lr: 0.0001  max_mem: 29891M
[09/04 18:16:48] d2.utils.events INFO:  eta: 0:09:06  iter: 419  total_loss: 16.04  loss_ce: 0.1538  loss_mask: 0.4189  loss_dice: 0.9782  loss_ce_0: 0.1817  loss_mask_0: 0.4345  loss_dice_0: 1.1  loss_ce_1: 0.1828  loss_mask_1: 0.4283  loss_dice_1: 1.031  loss_ce_2: 0.1963  loss_mask_2: 0.4182  loss_dice_2: 1.006  loss_ce_3: 0.1908  loss_mask_3: 0.4156  loss_dice_3: 0.9978  loss_ce_4: 0.1869  loss_mask_4: 0.4244  loss_dice_4: 0.9905  loss_ce_5: 0.1632  loss_mask_5: 0.4245  loss_dice_5: 0.9946  loss_ce_6: 0.1496  loss_mask_6: 0.43  loss_dice_6: 0.9617  loss_ce_7: 0.1605  loss_mask_7: 0.4264  loss_dice_7: 0.9841  loss_ce_8: 0.1525  loss_mask_8: 0.4214  loss_dice_8: 0.9748    time: 0.9460  last_time: 0.9367  data_time: 0.0406  last_data_time: 0.0414   lr: 0.0001  max_mem: 29891M
[09/04 18:17:07] d2.utils.events INFO:  eta: 0:08:48  iter: 439  total_loss: 16.53  loss_ce: 0.1882  loss_mask: 0.4257  loss_dice: 1.057  loss_ce_0: 0.1727  loss_mask_0: 0.4601  loss_dice_0: 1.176  loss_ce_1: 0.1843  loss_mask_1: 0.4592  loss_dice_1: 1.096  loss_ce_2: 0.197  loss_mask_2: 0.4478  loss_dice_2: 1.079  loss_ce_3: 0.2239  loss_mask_3: 0.432  loss_dice_3: 1.077  loss_ce_4: 0.1955  loss_mask_4: 0.4284  loss_dice_4: 1.089  loss_ce_5: 0.1838  loss_mask_5: 0.4141  loss_dice_5: 1.059  loss_ce_6: 0.1802  loss_mask_6: 0.415  loss_dice_6: 1.039  loss_ce_7: 0.1864  loss_mask_7: 0.4249  loss_dice_7: 1.027  loss_ce_8: 0.1744  loss_mask_8: 0.423  loss_dice_8: 1.04    time: 0.9460  last_time: 0.9327  data_time: 0.0405  last_data_time: 0.0386   lr: 0.0001  max_mem: 29891M
[09/04 18:17:26] d2.utils.events INFO:  eta: 0:08:29  iter: 459  total_loss: 16.94  loss_ce: 0.1866  loss_mask: 0.422  loss_dice: 1.056  loss_ce_0: 0.1763  loss_mask_0: 0.4731  loss_dice_0: 1.158  loss_ce_1: 0.2022  loss_mask_1: 0.4507  loss_dice_1: 1.132  loss_ce_2: 0.2113  loss_mask_2: 0.4419  loss_dice_2: 1.09  loss_ce_3: 0.2268  loss_mask_3: 0.4308  loss_dice_3: 1.047  loss_ce_4: 0.2002  loss_mask_4: 0.4238  loss_dice_4: 1.058  loss_ce_5: 0.2018  loss_mask_5: 0.4201  loss_dice_5: 1.055  loss_ce_6: 0.2067  loss_mask_6: 0.4196  loss_dice_6: 1.05  loss_ce_7: 0.1829  loss_mask_7: 0.4202  loss_dice_7: 1.043  loss_ce_8: 0.2044  loss_mask_8: 0.42  loss_dice_8: 1.035    time: 0.9461  last_time: 0.9348  data_time: 0.0382  last_data_time: 0.0370   lr: 0.0001  max_mem: 29891M
[09/04 18:17:45] d2.utils.events INFO:  eta: 0:08:10  iter: 479  total_loss: 15.91  loss_ce: 0.1965  loss_mask: 0.4018  loss_dice: 0.9556  loss_ce_0: 0.1645  loss_mask_0: 0.431  loss_dice_0: 1.081  loss_ce_1: 0.2136  loss_mask_1: 0.405  loss_dice_1: 1.04  loss_ce_2: 0.2036  loss_mask_2: 0.4062  loss_dice_2: 1.005  loss_ce_3: 0.1967  loss_mask_3: 0.4011  loss_dice_3: 0.9879  loss_ce_4: 0.1927  loss_mask_4: 0.3939  loss_dice_4: 0.9855  loss_ce_5: 0.1826  loss_mask_5: 0.4098  loss_dice_5: 0.9685  loss_ce_6: 0.1877  loss_mask_6: 0.4062  loss_dice_6: 0.9747  loss_ce_7: 0.1845  loss_mask_7: 0.4049  loss_dice_7: 0.9587  loss_ce_8: 0.1906  loss_mask_8: 0.4059  loss_dice_8: 0.9645    time: 0.9462  last_time: 0.9418  data_time: 0.0401  last_data_time: 0.0392   lr: 0.0001  max_mem: 29891M
[09/04 18:18:04] d2.utils.events INFO:  eta: 0:07:52  iter: 499  total_loss: 16.25  loss_ce: 0.1833  loss_mask: 0.3847  loss_dice: 1.015  loss_ce_0: 0.1409  loss_mask_0: 0.4237  loss_dice_0: 1.13  loss_ce_1: 0.2056  loss_mask_1: 0.401  loss_dice_1: 1.086  loss_ce_2: 0.1904  loss_mask_2: 0.3892  loss_dice_2: 1.05  loss_ce_3: 0.2019  loss_mask_3: 0.3895  loss_dice_3: 1.031  loss_ce_4: 0.168  loss_mask_4: 0.3862  loss_dice_4: 1.039  loss_ce_5: 0.1827  loss_mask_5: 0.3844  loss_dice_5: 1.017  loss_ce_6: 0.1734  loss_mask_6: 0.3848  loss_dice_6: 1.017  loss_ce_7: 0.183  loss_mask_7: 0.3857  loss_dice_7: 1.028  loss_ce_8: 0.1696  loss_mask_8: 0.3828  loss_dice_8: 1.004    time: 0.9463  last_time: 0.9623  data_time: 0.0405  last_data_time: 0.0375   lr: 0.0001  max_mem: 29891M
[09/04 18:18:23] d2.utils.events INFO:  eta: 0:07:33  iter: 519  total_loss: 16.19  loss_ce: 0.1727  loss_mask: 0.3884  loss_dice: 0.9945  loss_ce_0: 0.1647  loss_mask_0: 0.4298  loss_dice_0: 1.139  loss_ce_1: 0.2048  loss_mask_1: 0.4206  loss_dice_1: 1.102  loss_ce_2: 0.1913  loss_mask_2: 0.3968  loss_dice_2: 1.054  loss_ce_3: 0.2018  loss_mask_3: 0.3885  loss_dice_3: 1.046  loss_ce_4: 0.1954  loss_mask_4: 0.3793  loss_dice_4: 1.009  loss_ce_5: 0.1867  loss_mask_5: 0.3792  loss_dice_5: 1.005  loss_ce_6: 0.2023  loss_mask_6: 0.3822  loss_dice_6: 0.9994  loss_ce_7: 0.1925  loss_mask_7: 0.3871  loss_dice_7: 1.019  loss_ce_8: 0.1759  loss_mask_8: 0.3909  loss_dice_8: 1.019    time: 0.9465  last_time: 0.9347  data_time: 0.0409  last_data_time: 0.0399   lr: 0.0001  max_mem: 29891M
[09/04 18:18:42] d2.utils.events INFO:  eta: 0:07:14  iter: 539  total_loss: 16.19  loss_ce: 0.1863  loss_mask: 0.3841  loss_dice: 0.9872  loss_ce_0: 0.1919  loss_mask_0: 0.4368  loss_dice_0: 1.104  loss_ce_1: 0.2129  loss_mask_1: 0.4015  loss_dice_1: 1.035  loss_ce_2: 0.2147  loss_mask_2: 0.3863  loss_dice_2: 1.026  loss_ce_3: 0.2005  loss_mask_3: 0.3904  loss_dice_3: 1.016  loss_ce_4: 0.1952  loss_mask_4: 0.3888  loss_dice_4: 1.011  loss_ce_5: 0.1986  loss_mask_5: 0.3892  loss_dice_5: 1  loss_ce_6: 0.1862  loss_mask_6: 0.3921  loss_dice_6: 0.9951  loss_ce_7: 0.2117  loss_mask_7: 0.3969  loss_dice_7: 0.9931  loss_ce_8: 0.1915  loss_mask_8: 0.3898  loss_dice_8: 1.001    time: 0.9466  last_time: 0.9559  data_time: 0.0401  last_data_time: 0.0410   lr: 0.0001  max_mem: 29891M
[09/04 18:19:01] d2.utils.events INFO:  eta: 0:06:55  iter: 559  total_loss: 16.2  loss_ce: 0.1466  loss_mask: 0.4078  loss_dice: 0.9975  loss_ce_0: 0.157  loss_mask_0: 0.4318  loss_dice_0: 1.072  loss_ce_1: 0.1893  loss_mask_1: 0.4326  loss_dice_1: 1.059  loss_ce_2: 0.1828  loss_mask_2: 0.4195  loss_dice_2: 1.02  loss_ce_3: 0.1843  loss_mask_3: 0.41  loss_dice_3: 1.007  loss_ce_4: 0.1498  loss_mask_4: 0.4073  loss_dice_4: 1.01  loss_ce_5: 0.1589  loss_mask_5: 0.4115  loss_dice_5: 1.01  loss_ce_6: 0.1495  loss_mask_6: 0.4079  loss_dice_6: 1  loss_ce_7: 0.1601  loss_mask_7: 0.4138  loss_dice_7: 1.008  loss_ce_8: 0.1762  loss_mask_8: 0.4095  loss_dice_8: 0.9935    time: 0.9466  last_time: 0.9435  data_time: 0.0398  last_data_time: 0.0356   lr: 0.0001  max_mem: 29891M
[09/04 18:19:20] d2.utils.events INFO:  eta: 0:06:36  iter: 579  total_loss: 15.62  loss_ce: 0.1896  loss_mask: 0.3975  loss_dice: 0.978  loss_ce_0: 0.1784  loss_mask_0: 0.4694  loss_dice_0: 1.109  loss_ce_1: 0.2467  loss_mask_1: 0.4391  loss_dice_1: 1.049  loss_ce_2: 0.2291  loss_mask_2: 0.4189  loss_dice_2: 1.049  loss_ce_3: 0.2285  loss_mask_3: 0.416  loss_dice_3: 1.002  loss_ce_4: 0.212  loss_mask_4: 0.4035  loss_dice_4: 1.028  loss_ce_5: 0.1921  loss_mask_5: 0.4026  loss_dice_5: 0.9918  loss_ce_6: 0.1998  loss_mask_6: 0.3939  loss_dice_6: 0.9866  loss_ce_7: 0.2052  loss_mask_7: 0.3923  loss_dice_7: 0.9968  loss_ce_8: 0.1825  loss_mask_8: 0.3891  loss_dice_8: 0.9965    time: 0.9469  last_time: 0.9365  data_time: 0.0422  last_data_time: 0.0450   lr: 0.0001  max_mem: 29891M
[09/04 18:19:39] d2.utils.events INFO:  eta: 0:06:17  iter: 599  total_loss: 16.94  loss_ce: 0.1866  loss_mask: 0.3914  loss_dice: 1.061  loss_ce_0: 0.1808  loss_mask_0: 0.4208  loss_dice_0: 1.194  loss_ce_1: 0.2494  loss_mask_1: 0.406  loss_dice_1: 1.12  loss_ce_2: 0.2092  loss_mask_2: 0.404  loss_dice_2: 1.111  loss_ce_3: 0.2249  loss_mask_3: 0.3926  loss_dice_3: 1.08  loss_ce_4: 0.1932  loss_mask_4: 0.3939  loss_dice_4: 1.087  loss_ce_5: 0.1758  loss_mask_5: 0.3943  loss_dice_5: 1.095  loss_ce_6: 0.1909  loss_mask_6: 0.3895  loss_dice_6: 1.073  loss_ce_7: 0.1891  loss_mask_7: 0.3863  loss_dice_7: 1.08  loss_ce_8: 0.1884  loss_mask_8: 0.3909  loss_dice_8: 1.073    time: 0.9470  last_time: 0.9695  data_time: 0.0410  last_data_time: 0.0459   lr: 0.0001  max_mem: 29891M
[09/04 18:19:58] d2.utils.events INFO:  eta: 0:05:58  iter: 619  total_loss: 16.24  loss_ce: 0.2034  loss_mask: 0.4162  loss_dice: 0.9613  loss_ce_0: 0.2097  loss_mask_0: 0.4588  loss_dice_0: 1.074  loss_ce_1: 0.217  loss_mask_1: 0.4383  loss_dice_1: 1.031  loss_ce_2: 0.219  loss_mask_2: 0.417  loss_dice_2: 1.013  loss_ce_3: 0.2133  loss_mask_3: 0.4177  loss_dice_3: 0.9915  loss_ce_4: 0.194  loss_mask_4: 0.4204  loss_dice_4: 0.9965  loss_ce_5: 0.2102  loss_mask_5: 0.4123  loss_dice_5: 0.9658  loss_ce_6: 0.1965  loss_mask_6: 0.4164  loss_dice_6: 0.9779  loss_ce_7: 0.1832  loss_mask_7: 0.4146  loss_dice_7: 0.9652  loss_ce_8: 0.1906  loss_mask_8: 0.4179  loss_dice_8: 0.96    time: 0.9472  last_time: 0.9656  data_time: 0.0397  last_data_time: 0.0432   lr: 0.0001  max_mem: 29891M
[09/04 18:20:17] d2.utils.events INFO:  eta: 0:05:40  iter: 639  total_loss: 15.99  loss_ce: 0.182  loss_mask: 0.4069  loss_dice: 1.008  loss_ce_0: 0.1633  loss_mask_0: 0.4338  loss_dice_0: 1.096  loss_ce_1: 0.1917  loss_mask_1: 0.4331  loss_dice_1: 1.065  loss_ce_2: 0.2107  loss_mask_2: 0.4124  loss_dice_2: 1.022  loss_ce_3: 0.1964  loss_mask_3: 0.4093  loss_dice_3: 1.014  loss_ce_4: 0.1941  loss_mask_4: 0.4157  loss_dice_4: 1.007  loss_ce_5: 0.191  loss_mask_5: 0.4143  loss_dice_5: 1.016  loss_ce_6: 0.1812  loss_mask_6: 0.4114  loss_dice_6: 1.048  loss_ce_7: 0.2042  loss_mask_7: 0.4082  loss_dice_7: 0.9856  loss_ce_8: 0.1764  loss_mask_8: 0.4081  loss_dice_8: 1.015    time: 0.9471  last_time: 0.9464  data_time: 0.0389  last_data_time: 0.0454   lr: 0.0001  max_mem: 29891M
[09/04 18:20:36] d2.utils.events INFO:  eta: 0:05:21  iter: 659  total_loss: 16.7  loss_ce: 0.1655  loss_mask: 0.3775  loss_dice: 1.06  loss_ce_0: 0.1852  loss_mask_0: 0.4175  loss_dice_0: 1.153  loss_ce_1: 0.2041  loss_mask_1: 0.4121  loss_dice_1: 1.097  loss_ce_2: 0.1972  loss_mask_2: 0.3876  loss_dice_2: 1.074  loss_ce_3: 0.2193  loss_mask_3: 0.3807  loss_dice_3: 1.056  loss_ce_4: 0.2069  loss_mask_4: 0.378  loss_dice_4: 1.046  loss_ce_5: 0.2161  loss_mask_5: 0.3745  loss_dice_5: 1.062  loss_ce_6: 0.1906  loss_mask_6: 0.3767  loss_dice_6: 1.044  loss_ce_7: 0.1684  loss_mask_7: 0.3734  loss_dice_7: 1.057  loss_ce_8: 0.1954  loss_mask_8: 0.3735  loss_dice_8: 1.029    time: 0.9473  last_time: 0.9427  data_time: 0.0419  last_data_time: 0.0478   lr: 0.0001  max_mem: 29891M
[09/04 18:20:55] d2.utils.events INFO:  eta: 0:05:02  iter: 679  total_loss: 16.64  loss_ce: 0.1834  loss_mask: 0.4122  loss_dice: 1.022  loss_ce_0: 0.17  loss_mask_0: 0.4607  loss_dice_0: 1.121  loss_ce_1: 0.1973  loss_mask_1: 0.4293  loss_dice_1: 1.051  loss_ce_2: 0.2083  loss_mask_2: 0.4133  loss_dice_2: 1.046  loss_ce_3: 0.2031  loss_mask_3: 0.415  loss_dice_3: 1.029  loss_ce_4: 0.1881  loss_mask_4: 0.4059  loss_dice_4: 1.024  loss_ce_5: 0.1838  loss_mask_5: 0.4096  loss_dice_5: 1.044  loss_ce_6: 0.205  loss_mask_6: 0.4098  loss_dice_6: 1.012  loss_ce_7: 0.194  loss_mask_7: 0.4095  loss_dice_7: 1.013  loss_ce_8: 0.1799  loss_mask_8: 0.4122  loss_dice_8: 1.03    time: 0.9476  last_time: 0.9563  data_time: 0.0422  last_data_time: 0.0495   lr: 0.0001  max_mem: 29891M
[09/04 18:21:15] d2.utils.events INFO:  eta: 0:04:43  iter: 699  total_loss: 15.8  loss_ce: 0.1825  loss_mask: 0.4045  loss_dice: 0.9655  loss_ce_0: 0.1934  loss_mask_0: 0.4388  loss_dice_0: 1.085  loss_ce_1: 0.2159  loss_mask_1: 0.4204  loss_dice_1: 1.048  loss_ce_2: 0.2304  loss_mask_2: 0.4005  loss_dice_2: 1.023  loss_ce_3: 0.2072  loss_mask_3: 0.3951  loss_dice_3: 0.9876  loss_ce_4: 0.2009  loss_mask_4: 0.4  loss_dice_4: 0.9653  loss_ce_5: 0.2229  loss_mask_5: 0.4003  loss_dice_5: 0.9744  loss_ce_6: 0.1725  loss_mask_6: 0.3985  loss_dice_6: 0.967  loss_ce_7: 0.1871  loss_mask_7: 0.4  loss_dice_7: 0.9816  loss_ce_8: 0.2036  loss_mask_8: 0.3979  loss_dice_8: 0.9591    time: 0.9478  last_time: 0.9703  data_time: 0.0414  last_data_time: 0.0438   lr: 0.0001  max_mem: 29891M
[09/04 18:21:34] d2.utils.events INFO:  eta: 0:04:24  iter: 719  total_loss: 15.88  loss_ce: 0.2085  loss_mask: 0.3705  loss_dice: 0.9453  loss_ce_0: 0.2121  loss_mask_0: 0.4207  loss_dice_0: 1.078  loss_ce_1: 0.2402  loss_mask_1: 0.3956  loss_dice_1: 1.036  loss_ce_2: 0.2344  loss_mask_2: 0.3901  loss_dice_2: 0.9813  loss_ce_3: 0.2048  loss_mask_3: 0.3867  loss_dice_3: 1.003  loss_ce_4: 0.2314  loss_mask_4: 0.3841  loss_dice_4: 0.9706  loss_ce_5: 0.2074  loss_mask_5: 0.3815  loss_dice_5: 0.9557  loss_ce_6: 0.224  loss_mask_6: 0.3717  loss_dice_6: 0.9598  loss_ce_7: 0.2118  loss_mask_7: 0.3736  loss_dice_7: 0.9614  loss_ce_8: 0.1885  loss_mask_8: 0.3751  loss_dice_8: 0.9645    time: 0.9479  last_time: 0.9448  data_time: 0.0399  last_data_time: 0.0384   lr: 0.0001  max_mem: 29891M
[09/04 18:21:53] d2.utils.events INFO:  eta: 0:04:05  iter: 739  total_loss: 16.62  loss_ce: 0.1788  loss_mask: 0.4194  loss_dice: 1.025  loss_ce_0: 0.1731  loss_mask_0: 0.4611  loss_dice_0: 1.164  loss_ce_1: 0.2121  loss_mask_1: 0.4359  loss_dice_1: 1.096  loss_ce_2: 0.2069  loss_mask_2: 0.4305  loss_dice_2: 1.069  loss_ce_3: 0.2152  loss_mask_3: 0.4295  loss_dice_3: 1.029  loss_ce_4: 0.184  loss_mask_4: 0.4253  loss_dice_4: 1.039  loss_ce_5: 0.1679  loss_mask_5: 0.421  loss_dice_5: 1.028  loss_ce_6: 0.18  loss_mask_6: 0.4184  loss_dice_6: 1.028  loss_ce_7: 0.1738  loss_mask_7: 0.4182  loss_dice_7: 1.041  loss_ce_8: 0.1789  loss_mask_8: 0.4222  loss_dice_8: 1.023    time: 0.9481  last_time: 0.9393  data_time: 0.0418  last_data_time: 0.0346   lr: 0.0001  max_mem: 29891M
[09/04 18:22:12] d2.utils.events INFO:  eta: 0:03:46  iter: 759  total_loss: 16.26  loss_ce: 0.1519  loss_mask: 0.3987  loss_dice: 0.9993  loss_ce_0: 0.2056  loss_mask_0: 0.4164  loss_dice_0: 1.136  loss_ce_1: 0.2376  loss_mask_1: 0.4006  loss_dice_1: 1.066  loss_ce_2: 0.2116  loss_mask_2: 0.3895  loss_dice_2: 1.029  loss_ce_3: 0.1922  loss_mask_3: 0.3967  loss_dice_3: 1.002  loss_ce_4: 0.1797  loss_mask_4: 0.3952  loss_dice_4: 1.011  loss_ce_5: 0.1968  loss_mask_5: 0.3921  loss_dice_5: 1.017  loss_ce_6: 0.1787  loss_mask_6: 0.3941  loss_dice_6: 0.9881  loss_ce_7: 0.2001  loss_mask_7: 0.3929  loss_dice_7: 0.9895  loss_ce_8: 0.1653  loss_mask_8: 0.3946  loss_dice_8: 0.9924    time: 0.9482  last_time: 0.9266  data_time: 0.0417  last_data_time: 0.0333   lr: 0.0001  max_mem: 29891M
[09/04 18:22:31] d2.utils.events INFO:  eta: 0:03:28  iter: 779  total_loss: 14.98  loss_ce: 0.1599  loss_mask: 0.3803  loss_dice: 0.929  loss_ce_0: 0.1563  loss_mask_0: 0.4087  loss_dice_0: 1.059  loss_ce_1: 0.1863  loss_mask_1: 0.3933  loss_dice_1: 0.9669  loss_ce_2: 0.1938  loss_mask_2: 0.3841  loss_dice_2: 0.9631  loss_ce_3: 0.1889  loss_mask_3: 0.3857  loss_dice_3: 0.9282  loss_ce_4: 0.1741  loss_mask_4: 0.3803  loss_dice_4: 0.9294  loss_ce_5: 0.1551  loss_mask_5: 0.3768  loss_dice_5: 0.9149  loss_ce_6: 0.1572  loss_mask_6: 0.3703  loss_dice_6: 0.9023  loss_ce_7: 0.1522  loss_mask_7: 0.3706  loss_dice_7: 0.8989  loss_ce_8: 0.1472  loss_mask_8: 0.3798  loss_dice_8: 0.9111    time: 0.9482  last_time: 0.9379  data_time: 0.0395  last_data_time: 0.0436   lr: 0.0001  max_mem: 29891M
[09/04 18:22:50] d2.utils.events INFO:  eta: 0:03:09  iter: 799  total_loss: 15.62  loss_ce: 0.1734  loss_mask: 0.3955  loss_dice: 0.9838  loss_ce_0: 0.1593  loss_mask_0: 0.4212  loss_dice_0: 1.091  loss_ce_1: 0.1656  loss_mask_1: 0.4082  loss_dice_1: 0.996  loss_ce_2: 0.1913  loss_mask_2: 0.4017  loss_dice_2: 0.985  loss_ce_3: 0.1764  loss_mask_3: 0.3997  loss_dice_3: 1.007  loss_ce_4: 0.1648  loss_mask_4: 0.3984  loss_dice_4: 0.9882  loss_ce_5: 0.1802  loss_mask_5: 0.3983  loss_dice_5: 0.9672  loss_ce_6: 0.1596  loss_mask_6: 0.3882  loss_dice_6: 0.9817  loss_ce_7: 0.1637  loss_mask_7: 0.3903  loss_dice_7: 0.9614  loss_ce_8: 0.1796  loss_mask_8: 0.3881  loss_dice_8: 0.9745    time: 0.9482  last_time: 0.9786  data_time: 0.0393  last_data_time: 0.0440   lr: 0.0001  max_mem: 29891M
[09/04 18:23:09] d2.utils.events INFO:  eta: 0:02:50  iter: 819  total_loss: 15.55  loss_ce: 0.2028  loss_mask: 0.3745  loss_dice: 0.9728  loss_ce_0: 0.1873  loss_mask_0: 0.4188  loss_dice_0: 1.06  loss_ce_1: 0.2466  loss_mask_1: 0.4017  loss_dice_1: 1.02  loss_ce_2: 0.2213  loss_mask_2: 0.3808  loss_dice_2: 0.9935  loss_ce_3: 0.2382  loss_mask_3: 0.383  loss_dice_3: 0.9858  loss_ce_4: 0.2199  loss_mask_4: 0.3803  loss_dice_4: 0.9784  loss_ce_5: 0.2073  loss_mask_5: 0.3829  loss_dice_5: 0.9875  loss_ce_6: 0.2177  loss_mask_6: 0.3827  loss_dice_6: 0.9753  loss_ce_7: 0.2016  loss_mask_7: 0.3752  loss_dice_7: 0.9735  loss_ce_8: 0.2179  loss_mask_8: 0.3728  loss_dice_8: 0.9482    time: 0.9483  last_time: 0.9814  data_time: 0.0395  last_data_time: 0.0386   lr: 0.0001  max_mem: 29891M
[09/04 18:23:28] d2.utils.events INFO:  eta: 0:02:31  iter: 839  total_loss: 15.34  loss_ce: 0.172  loss_mask: 0.3853  loss_dice: 0.9546  loss_ce_0: 0.1494  loss_mask_0: 0.4163  loss_dice_0: 1.08  loss_ce_1: 0.1725  loss_mask_1: 0.4175  loss_dice_1: 1.005  loss_ce_2: 0.1716  loss_mask_2: 0.3984  loss_dice_2: 0.9734  loss_ce_3: 0.1777  loss_mask_3: 0.3894  loss_dice_3: 0.988  loss_ce_4: 0.1488  loss_mask_4: 0.3874  loss_dice_4: 0.9769  loss_ce_5: 0.1496  loss_mask_5: 0.3886  loss_dice_5: 0.979  loss_ce_6: 0.1564  loss_mask_6: 0.3896  loss_dice_6: 0.9509  loss_ce_7: 0.1383  loss_mask_7: 0.3874  loss_dice_7: 0.9715  loss_ce_8: 0.1476  loss_mask_8: 0.3849  loss_dice_8: 0.9648    time: 0.9486  last_time: 0.9262  data_time: 0.0416  last_data_time: 0.0363   lr: 0.0001  max_mem: 29891M
[09/04 18:23:47] d2.utils.events INFO:  eta: 0:02:12  iter: 859  total_loss: 15.81  loss_ce: 0.2053  loss_mask: 0.3721  loss_dice: 0.9781  loss_ce_0: 0.1697  loss_mask_0: 0.4087  loss_dice_0: 1.075  loss_ce_1: 0.1996  loss_mask_1: 0.3878  loss_dice_1: 1.036  loss_ce_2: 0.2217  loss_mask_2: 0.3849  loss_dice_2: 0.984  loss_ce_3: 0.2014  loss_mask_3: 0.3807  loss_dice_3: 0.9665  loss_ce_4: 0.2164  loss_mask_4: 0.3719  loss_dice_4: 0.9781  loss_ce_5: 0.1966  loss_mask_5: 0.375  loss_dice_5: 0.9754  loss_ce_6: 0.1892  loss_mask_6: 0.3721  loss_dice_6: 0.966  loss_ce_7: 0.1891  loss_mask_7: 0.3638  loss_dice_7: 0.951  loss_ce_8: 0.1871  loss_mask_8: 0.3715  loss_dice_8: 0.9456    time: 0.9487  last_time: 0.9580  data_time: 0.0422  last_data_time: 0.0358   lr: 0.0001  max_mem: 29891M
[09/04 18:24:06] d2.utils.events INFO:  eta: 0:01:53  iter: 879  total_loss: 14.76  loss_ce: 0.1493  loss_mask: 0.3535  loss_dice: 0.9334  loss_ce_0: 0.1506  loss_mask_0: 0.3867  loss_dice_0: 1.048  loss_ce_1: 0.1888  loss_mask_1: 0.3712  loss_dice_1: 1.006  loss_ce_2: 0.1917  loss_mask_2: 0.3571  loss_dice_2: 0.9805  loss_ce_3: 0.1882  loss_mask_3: 0.35  loss_dice_3: 0.9364  loss_ce_4: 0.1599  loss_mask_4: 0.3553  loss_dice_4: 0.958  loss_ce_5: 0.1619  loss_mask_5: 0.3516  loss_dice_5: 0.9348  loss_ce_6: 0.1505  loss_mask_6: 0.3545  loss_dice_6: 0.9446  loss_ce_7: 0.1651  loss_mask_7: 0.3532  loss_dice_7: 0.9352  loss_ce_8: 0.1626  loss_mask_8: 0.3536  loss_dice_8: 0.9317    time: 0.9488  last_time: 0.9488  data_time: 0.0406  last_data_time: 0.0384   lr: 0.0001  max_mem: 29891M
[09/04 18:24:26] d2.utils.events INFO:  eta: 0:01:34  iter: 899  total_loss: 15.66  loss_ce: 0.1534  loss_mask: 0.3872  loss_dice: 0.9848  loss_ce_0: 0.1858  loss_mask_0: 0.4298  loss_dice_0: 1.107  loss_ce_1: 0.1952  loss_mask_1: 0.4103  loss_dice_1: 1.035  loss_ce_2: 0.1757  loss_mask_2: 0.4104  loss_dice_2: 1.018  loss_ce_3: 0.1956  loss_mask_3: 0.4015  loss_dice_3: 0.9877  loss_ce_4: 0.1782  loss_mask_4: 0.3981  loss_dice_4: 0.9834  loss_ce_5: 0.1729  loss_mask_5: 0.3931  loss_dice_5: 0.9722  loss_ce_6: 0.1629  loss_mask_6: 0.3911  loss_dice_6: 0.9762  loss_ce_7: 0.1549  loss_mask_7: 0.3924  loss_dice_7: 0.9742  loss_ce_8: 0.1615  loss_mask_8: 0.3916  loss_dice_8: 0.9887    time: 0.9490  last_time: 0.9534  data_time: 0.0428  last_data_time: 0.0350   lr: 0.0001  max_mem: 29891M
[09/04 18:24:45] d2.utils.events INFO:  eta: 0:01:15  iter: 919  total_loss: 15.05  loss_ce: 0.1465  loss_mask: 0.3521  loss_dice: 0.9434  loss_ce_0: 0.1463  loss_mask_0: 0.3781  loss_dice_0: 1.047  loss_ce_1: 0.1893  loss_mask_1: 0.3674  loss_dice_1: 1.007  loss_ce_2: 0.1781  loss_mask_2: 0.362  loss_dice_2: 0.9656  loss_ce_3: 0.1602  loss_mask_3: 0.3608  loss_dice_3: 0.9638  loss_ce_4: 0.1827  loss_mask_4: 0.3576  loss_dice_4: 0.9687  loss_ce_5: 0.1567  loss_mask_5: 0.3618  loss_dice_5: 0.9737  loss_ce_6: 0.1584  loss_mask_6: 0.3569  loss_dice_6: 0.9594  loss_ce_7: 0.1481  loss_mask_7: 0.3572  loss_dice_7: 0.9339  loss_ce_8: 0.1402  loss_mask_8: 0.3585  loss_dice_8: 0.9505    time: 0.9491  last_time: 0.9434  data_time: 0.0411  last_data_time: 0.0361   lr: 0.0001  max_mem: 29891M
[09/04 18:25:04] d2.utils.events INFO:  eta: 0:00:56  iter: 939  total_loss: 15.26  loss_ce: 0.1682  loss_mask: 0.3933  loss_dice: 0.9285  loss_ce_0: 0.1681  loss_mask_0: 0.4241  loss_dice_0: 1.064  loss_ce_1: 0.1951  loss_mask_1: 0.3983  loss_dice_1: 1.005  loss_ce_2: 0.1826  loss_mask_2: 0.4015  loss_dice_2: 0.9721  loss_ce_3: 0.1746  loss_mask_3: 0.3998  loss_dice_3: 0.9314  loss_ce_4: 0.1614  loss_mask_4: 0.3926  loss_dice_4: 0.9446  loss_ce_5: 0.1708  loss_mask_5: 0.397  loss_dice_5: 0.9363  loss_ce_6: 0.1688  loss_mask_6: 0.3966  loss_dice_6: 0.9219  loss_ce_7: 0.1463  loss_mask_7: 0.4011  loss_dice_7: 0.9312  loss_ce_8: 0.1523  loss_mask_8: 0.3931  loss_dice_8: 0.9233    time: 0.9492  last_time: 0.9396  data_time: 0.0407  last_data_time: 0.0355   lr: 0.0001  max_mem: 29891M
[09/04 18:25:23] d2.utils.events INFO:  eta: 0:00:37  iter: 959  total_loss: 15.14  loss_ce: 0.1473  loss_mask: 0.3556  loss_dice: 0.9669  loss_ce_0: 0.1631  loss_mask_0: 0.3927  loss_dice_0: 1.037  loss_ce_1: 0.1714  loss_mask_1: 0.3814  loss_dice_1: 0.9646  loss_ce_2: 0.1577  loss_mask_2: 0.3709  loss_dice_2: 0.9628  loss_ce_3: 0.1662  loss_mask_3: 0.3768  loss_dice_3: 0.9532  loss_ce_4: 0.1561  loss_mask_4: 0.3736  loss_dice_4: 0.9641  loss_ce_5: 0.1591  loss_mask_5: 0.3625  loss_dice_5: 0.9493  loss_ce_6: 0.1547  loss_mask_6: 0.371  loss_dice_6: 0.9533  loss_ce_7: 0.1509  loss_mask_7: 0.3666  loss_dice_7: 0.9314  loss_ce_8: 0.1434  loss_mask_8: 0.3609  loss_dice_8: 0.9658    time: 0.9493  last_time: 0.9747  data_time: 0.0414  last_data_time: 0.0378   lr: 0.0001  max_mem: 29891M
[09/04 18:25:42] d2.utils.events INFO:  eta: 0:00:18  iter: 979  total_loss: 15.56  loss_ce: 0.1758  loss_mask: 0.3814  loss_dice: 0.9301  loss_ce_0: 0.1616  loss_mask_0: 0.3967  loss_dice_0: 1.049  loss_ce_1: 0.178  loss_mask_1: 0.3854  loss_dice_1: 1.022  loss_ce_2: 0.1779  loss_mask_2: 0.3833  loss_dice_2: 0.9943  loss_ce_3: 0.179  loss_mask_3: 0.3752  loss_dice_3: 0.9729  loss_ce_4: 0.1808  loss_mask_4: 0.369  loss_dice_4: 0.9552  loss_ce_5: 0.188  loss_mask_5: 0.3705  loss_dice_5: 0.9583  loss_ce_6: 0.1604  loss_mask_6: 0.38  loss_dice_6: 0.952  loss_ce_7: 0.1778  loss_mask_7: 0.3748  loss_dice_7: 0.9528  loss_ce_8: 0.1723  loss_mask_8: 0.3779  loss_dice_8: 0.9241    time: 0.9493  last_time: 0.9632  data_time: 0.0418  last_data_time: 0.0381   lr: 0.0001  max_mem: 29891M
[09/04 18:26:01] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Normal/r101_008_1000/model_final.pth
[09/04 18:26:04] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 15.5  loss_ce: 0.1528  loss_mask: 0.3887  loss_dice: 0.9258  loss_ce_0: 0.1488  loss_mask_0: 0.3988  loss_dice_0: 1.073  loss_ce_1: 0.2053  loss_mask_1: 0.3968  loss_dice_1: 1.038  loss_ce_2: 0.211  loss_mask_2: 0.3868  loss_dice_2: 0.9858  loss_ce_3: 0.1882  loss_mask_3: 0.3862  loss_dice_3: 0.9804  loss_ce_4: 0.1834  loss_mask_4: 0.391  loss_dice_4: 0.9839  loss_ce_5: 0.1822  loss_mask_5: 0.3864  loss_dice_5: 0.9462  loss_ce_6: 0.1553  loss_mask_6: 0.3885  loss_dice_6: 0.9623  loss_ce_7: 0.1683  loss_mask_7: 0.3878  loss_dice_7: 0.96  loss_ce_8: 0.183  loss_mask_8: 0.388  loss_dice_8: 0.9548    time: 0.9496  last_time: 0.9479  data_time: 0.0422  last_data_time: 0.0361   lr: 0.0001  max_mem: 29891M
[09/04 18:26:05] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:15:47 (0.9496 s / it)
[09/04 18:26:05] d2.engine.hooks INFO: Total training time: 0:15:53 (0:00:05 on hooks)
[09/04 18:26:05] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[09/04 18:26:05] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[09/04 18:26:05] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/04 18:26:05] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[09/04 18:26:05] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[09/04 18:26:05] d2.evaluation.evaluator INFO: Start inference on 500 batches
[09/04 18:26:09] d2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0045 s/iter. Inference: 0.2097 s/iter. Eval: 0.0656 s/iter. Total: 0.2798 s/iter. ETA=0:02:16
[09/04 18:26:14] d2.evaluation.evaluator INFO: Inference done 30/500. Dataloading: 0.0051 s/iter. Inference: 0.1982 s/iter. Eval: 0.0662 s/iter. Total: 0.2696 s/iter. ETA=0:02:06
[09/04 18:26:19] d2.evaluation.evaluator INFO: Inference done 49/500. Dataloading: 0.0053 s/iter. Inference: 0.1962 s/iter. Eval: 0.0662 s/iter. Total: 0.2678 s/iter. ETA=0:02:00
[09/04 18:26:24] d2.evaluation.evaluator INFO: Inference done 68/500. Dataloading: 0.0052 s/iter. Inference: 0.1958 s/iter. Eval: 0.0663 s/iter. Total: 0.2674 s/iter. ETA=0:01:55
[09/04 18:26:29] d2.evaluation.evaluator INFO: Inference done 88/500. Dataloading: 0.0052 s/iter. Inference: 0.1950 s/iter. Eval: 0.0662 s/iter. Total: 0.2664 s/iter. ETA=0:01:49
[09/04 18:26:34] d2.evaluation.evaluator INFO: Inference done 107/500. Dataloading: 0.0051 s/iter. Inference: 0.1946 s/iter. Eval: 0.0662 s/iter. Total: 0.2659 s/iter. ETA=0:01:44
[09/04 18:26:39] d2.evaluation.evaluator INFO: Inference done 127/500. Dataloading: 0.0050 s/iter. Inference: 0.1942 s/iter. Eval: 0.0662 s/iter. Total: 0.2655 s/iter. ETA=0:01:39
[09/04 18:26:44] d2.evaluation.evaluator INFO: Inference done 146/500. Dataloading: 0.0050 s/iter. Inference: 0.1944 s/iter. Eval: 0.0663 s/iter. Total: 0.2657 s/iter. ETA=0:01:34
[09/04 18:26:50] d2.evaluation.evaluator INFO: Inference done 165/500. Dataloading: 0.0050 s/iter. Inference: 0.1950 s/iter. Eval: 0.0662 s/iter. Total: 0.2662 s/iter. ETA=0:01:29
[09/04 18:26:55] d2.evaluation.evaluator INFO: Inference done 185/500. Dataloading: 0.0049 s/iter. Inference: 0.1945 s/iter. Eval: 0.0662 s/iter. Total: 0.2656 s/iter. ETA=0:01:23
[09/04 18:27:00] d2.evaluation.evaluator INFO: Inference done 205/500. Dataloading: 0.0048 s/iter. Inference: 0.1942 s/iter. Eval: 0.0661 s/iter. Total: 0.2652 s/iter. ETA=0:01:18
[09/04 18:27:05] d2.evaluation.evaluator INFO: Inference done 225/500. Dataloading: 0.0048 s/iter. Inference: 0.1941 s/iter. Eval: 0.0660 s/iter. Total: 0.2649 s/iter. ETA=0:01:12
[09/04 18:27:11] d2.evaluation.evaluator INFO: Inference done 245/500. Dataloading: 0.0047 s/iter. Inference: 0.1939 s/iter. Eval: 0.0660 s/iter. Total: 0.2647 s/iter. ETA=0:01:07
[09/04 18:27:16] d2.evaluation.evaluator INFO: Inference done 264/500. Dataloading: 0.0047 s/iter. Inference: 0.1940 s/iter. Eval: 0.0660 s/iter. Total: 0.2647 s/iter. ETA=0:01:02
[09/04 18:27:21] d2.evaluation.evaluator INFO: Inference done 283/500. Dataloading: 0.0047 s/iter. Inference: 0.1939 s/iter. Eval: 0.0660 s/iter. Total: 0.2646 s/iter. ETA=0:00:57
[09/04 18:27:26] d2.evaluation.evaluator INFO: Inference done 303/500. Dataloading: 0.0047 s/iter. Inference: 0.1938 s/iter. Eval: 0.0660 s/iter. Total: 0.2645 s/iter. ETA=0:00:52
[09/04 18:27:31] d2.evaluation.evaluator INFO: Inference done 323/500. Dataloading: 0.0046 s/iter. Inference: 0.1936 s/iter. Eval: 0.0660 s/iter. Total: 0.2643 s/iter. ETA=0:00:46
[09/04 18:27:36] d2.evaluation.evaluator INFO: Inference done 342/500. Dataloading: 0.0046 s/iter. Inference: 0.1936 s/iter. Eval: 0.0660 s/iter. Total: 0.2642 s/iter. ETA=0:00:41
[09/04 18:27:41] d2.evaluation.evaluator INFO: Inference done 361/500. Dataloading: 0.0046 s/iter. Inference: 0.1935 s/iter. Eval: 0.0660 s/iter. Total: 0.2642 s/iter. ETA=0:00:36
[09/04 18:27:46] d2.evaluation.evaluator INFO: Inference done 380/500. Dataloading: 0.0046 s/iter. Inference: 0.1935 s/iter. Eval: 0.0661 s/iter. Total: 0.2642 s/iter. ETA=0:00:31
[09/04 18:27:51] d2.evaluation.evaluator INFO: Inference done 399/500. Dataloading: 0.0046 s/iter. Inference: 0.1934 s/iter. Eval: 0.0661 s/iter. Total: 0.2641 s/iter. ETA=0:00:26
[09/04 18:27:56] d2.evaluation.evaluator INFO: Inference done 418/500. Dataloading: 0.0046 s/iter. Inference: 0.1934 s/iter. Eval: 0.0661 s/iter. Total: 0.2641 s/iter. ETA=0:00:21
[09/04 18:28:01] d2.evaluation.evaluator INFO: Inference done 437/500. Dataloading: 0.0045 s/iter. Inference: 0.1933 s/iter. Eval: 0.0661 s/iter. Total: 0.2641 s/iter. ETA=0:00:16
[09/04 18:28:06] d2.evaluation.evaluator INFO: Inference done 456/500. Dataloading: 0.0045 s/iter. Inference: 0.1933 s/iter. Eval: 0.0661 s/iter. Total: 0.2640 s/iter. ETA=0:00:11
[09/04 18:28:11] d2.evaluation.evaluator INFO: Inference done 476/500. Dataloading: 0.0045 s/iter. Inference: 0.1933 s/iter. Eval: 0.0661 s/iter. Total: 0.2640 s/iter. ETA=0:00:06
[09/04 18:28:17] d2.evaluation.evaluator INFO: Inference done 496/500. Dataloading: 0.0045 s/iter. Inference: 0.1932 s/iter. Eval: 0.0661 s/iter. Total: 0.2639 s/iter. ETA=0:00:01
[09/04 18:28:18] d2.evaluation.evaluator INFO: Total inference time: 0:02:10.679756 (0.264000 s / iter per device, on 1 devices)
[09/04 18:28:18] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:01:35 (0.193195 s / iter per device, on 1 devices)
[09/04 18:28:18] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evaldsrqx4xm ...
[09/04 18:28:39] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 37.548 | 46.942 | 45.364 |      19       |
| Things | 0.000  | 0.000  | 0.000  |       8       |
| Stuff  | 64.855 | 81.081 | 78.355 |      11       |
[09/04 18:28:39] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.304 | 97.607 | 99.690 |     Stuff     |
| class_8  | 73.877 | 83.517 | 88.457 |     Stuff     |
| class_11 | 87.096 | 88.632 | 98.267 |     Stuff     |
| class_12 | 44.257 | 79.491 | 55.676 |     Stuff     |
| class_13 | 33.538 | 72.725 | 46.117 |     Stuff     |
| class_17 | 50.787 | 66.268 | 76.639 |     Stuff     |
| class_19 | 49.715 | 69.409 | 71.626 |     Stuff     |
| class_20 | 65.789 | 77.531 | 84.855 |     Stuff     |
| class_21 | 89.149 | 90.354 | 98.667 |     Stuff     |
| class_22 | 36.114 | 74.646 | 48.380 |     Stuff     |
| class_23 | 85.781 | 91.712 | 93.533 |     Stuff     |
| class_24 | 0.000  | 0.000  | 0.000  |    Things     |
| class_25 | 0.000  | 0.000  | 0.000  |    Things     |
| class_26 | 0.000  | 0.000  | 0.000  |    Things     |
| class_27 | 0.000  | 0.000  | 0.000  |    Things     |
| class_28 | 0.000  | 0.000  | 0.000  |    Things     |
| class_31 | 0.000  | 0.000  | 0.000  |    Things     |
| class_32 | 0.000  | 0.000  | 0.000  |    Things     |
| class_33 | 0.000  | 0.000  | 0.000  |    Things     |
[09/04 18:28:39] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[09/04 18:28:39] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[09/04 18:28:39] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[09/04 18:28:39] d2.evaluation.testing INFO: copypaste: 37.5478,46.9417,45.3635,0.0000,0.0000,0.0000,64.8553,81.0811,78.3552,97.3044,97.6073,99.6898,73.8765,83.5165,88.4574,87.0961,88.6320,98.2671,44.2574,79.4914,55.6757,33.5383,72.7252,46.1165,50.7872,66.2677,76.6393,49.7151,69.4090,71.6263,65.7885,77.5305,84.8550,89.1492,90.3539,98.6667,36.1139,74.6462,48.3801,85.7814,91.7120,93.5335,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000
