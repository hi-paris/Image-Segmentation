[08/15 13:05:59] detectron2 INFO: Rank of current process: 0. World size: 2
[08/15 13:06:00] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2                        NVIDIA L40S (arch=8.9)
Driver version                   545.29.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/15 13:06:00] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/15 13:06:00] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/15 13:06:01] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/15 13:06:01] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/008_1000/config.yaml
[08/15 13:06:01] d2.utils.env INFO: Using a generated random seed 4686455
[08/15 13:06:10] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/15 13:06:10] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/15 13:42:06] detectron2 INFO: Rank of current process: 0. World size: 2
[08/15 13:42:07] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2                        NVIDIA L40S (arch=8.9)
Driver version                   545.29.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/15 13:42:07] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/15 13:42:07] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/15 13:42:07] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/15 13:42:07] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/008_1000/config.yaml
[08/15 13:42:07] d2.utils.env INFO: Using a generated random seed 11491807
[08/15 13:42:11] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/15 13:42:11] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/21 19:14:39] detectron2 INFO: Rank of current process: 0. World size: 1
[08/21 19:14:41] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA A100-PCIE-40GB (arch=8.0)
Driver version                   535.113.01
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/21 19:14:41] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/21 19:14:41] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/21 19:14:41] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/21 19:14:41] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/008_1000/config.yaml
[08/21 19:14:41] d2.utils.env INFO: Using a generated random seed 43030267
[08/21 19:14:46] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/21 19:14:46] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/21 19:33:08] detectron2 INFO: Rank of current process: 0. World size: 1
[08/21 19:33:09] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA A100-PCIE-40GB (arch=8.0)
Driver version                   535.113.01
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/21 19:33:09] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/21 19:33:09] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/21 19:33:09] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/21 19:33:09] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/008_1000/config.yaml
[08/21 19:33:09] d2.utils.env INFO: Using a generated random seed 11778516
[08/21 19:33:15] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/21 19:33:15] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/21 19:37:09] detectron2 INFO: Rank of current process: 0. World size: 1
[08/21 19:37:10] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA A100-PCIE-40GB (arch=8.0)
Driver version                   535.113.01
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/21 19:37:10] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/21 19:37:10] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/21 19:37:10] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/21 19:37:10] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/008_1000/config.yaml
[08/21 19:37:10] d2.utils.env INFO: Using a generated random seed 12560675
[08/21 19:37:16] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/21 19:37:16] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/21 19:47:54] detectron2 INFO: Rank of current process: 0. World size: 1
[08/21 19:47:55] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA A100-PCIE-40GB (arch=8.0)
Driver version                   535.113.01
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/21 19:47:55] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/21 19:47:55] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_exp.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/21 19:47:55] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/008_1000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/21 19:47:55] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/008_1000/config.yaml
[08/21 19:47:55] d2.utils.env INFO: Using a generated random seed 57184077
[08/21 19:48:00] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/21 19:48:00] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/21 19:48:00] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/21 19:48:00] d2.data.build INFO: Using training sampler TrainingSampler
[08/21 19:48:00] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/21 19:48:00] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/21 19:48:00] d2.data.common INFO: Serialized dataset takes 2.16 MiB
[08/21 19:48:00] d2.data.build INFO: Making batched data loader with batch_size=8
[08/21 19:48:00] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/21 19:48:00] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth ...
[08/21 19:48:00] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth ...
[08/21 19:48:00] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[08/21 19:48:00] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mcriterion.empty_weight[0m
[08/21 19:48:00] d2.engine.train_loop INFO: Starting training from iteration 0
[08/21 19:48:25] d2.utils.events INFO:  eta: 0:16:06  iter: 19  total_loss: 25.18  loss_ce: 0.5363  loss_mask: 0.5932  loss_dice: 1.344  loss_ce_0: 0.6293  loss_mask_0: 0.6454  loss_dice_0: 1.624  loss_ce_1: 0.6089  loss_mask_1: 0.6758  loss_dice_1: 1.504  loss_ce_2: 0.5892  loss_mask_2: 0.62  loss_dice_2: 1.442  loss_ce_3: 0.5862  loss_mask_3: 0.6092  loss_dice_3: 1.397  loss_ce_4: 0.5459  loss_mask_4: 0.6115  loss_dice_4: 1.403  loss_ce_5: 0.5247  loss_mask_5: 0.6112  loss_dice_5: 1.391  loss_ce_6: 0.558  loss_mask_6: 0.6196  loss_dice_6: 1.346  loss_ce_7: 0.5196  loss_mask_7: 0.6091  loss_dice_7: 1.354  loss_ce_8: 0.5404  loss_mask_8: 0.5996  loss_dice_8: 1.368    time: 1.0008  last_time: 0.9874  data_time: 0.0734  last_data_time: 0.0401   lr: 0.0001  max_mem: 29892M
[08/21 19:48:46] d2.utils.events INFO:  eta: 0:15:43  iter: 39  total_loss: 21.3  loss_ce: 0.2883  loss_mask: 0.5313  loss_dice: 1.231  loss_ce_0: 0.3156  loss_mask_0: 0.5854  loss_dice_0: 1.427  loss_ce_1: 0.3682  loss_mask_1: 0.5597  loss_dice_1: 1.401  loss_ce_2: 0.3609  loss_mask_2: 0.5518  loss_dice_2: 1.328  loss_ce_3: 0.3079  loss_mask_3: 0.5301  loss_dice_3: 1.314  loss_ce_4: 0.2886  loss_mask_4: 0.5401  loss_dice_4: 1.266  loss_ce_5: 0.2939  loss_mask_5: 0.5349  loss_dice_5: 1.247  loss_ce_6: 0.306  loss_mask_6: 0.5382  loss_dice_6: 1.272  loss_ce_7: 0.3159  loss_mask_7: 0.535  loss_dice_7: 1.27  loss_ce_8: 0.2824  loss_mask_8: 0.5364  loss_dice_8: 1.217    time: 0.9919  last_time: 0.9790  data_time: 0.0429  last_data_time: 0.0451   lr: 0.0001  max_mem: 29894M
[08/21 19:49:06] d2.utils.events INFO:  eta: 0:15:23  iter: 59  total_loss: 19.7  loss_ce: 0.2245  loss_mask: 0.48  loss_dice: 1.184  loss_ce_0: 0.276  loss_mask_0: 0.5305  loss_dice_0: 1.351  loss_ce_1: 0.3327  loss_mask_1: 0.5079  loss_dice_1: 1.307  loss_ce_2: 0.2952  loss_mask_2: 0.4907  loss_dice_2: 1.256  loss_ce_3: 0.2492  loss_mask_3: 0.4953  loss_dice_3: 1.186  loss_ce_4: 0.2539  loss_mask_4: 0.4909  loss_dice_4: 1.175  loss_ce_5: 0.2305  loss_mask_5: 0.4865  loss_dice_5: 1.203  loss_ce_6: 0.2283  loss_mask_6: 0.4813  loss_dice_6: 1.179  loss_ce_7: 0.2074  loss_mask_7: 0.4886  loss_dice_7: 1.177  loss_ce_8: 0.2099  loss_mask_8: 0.4911  loss_dice_8: 1.209    time: 0.9886  last_time: 0.9859  data_time: 0.0415  last_data_time: 0.0470   lr: 0.0001  max_mem: 29894M
[08/21 19:49:26] d2.utils.events INFO:  eta: 0:15:05  iter: 79  total_loss: 18.46  loss_ce: 0.2345  loss_mask: 0.4841  loss_dice: 1.112  loss_ce_0: 0.2203  loss_mask_0: 0.543  loss_dice_0: 1.26  loss_ce_1: 0.2664  loss_mask_1: 0.5007  loss_dice_1: 1.198  loss_ce_2: 0.2619  loss_mask_2: 0.4934  loss_dice_2: 1.131  loss_ce_3: 0.23  loss_mask_3: 0.4894  loss_dice_3: 1.128  loss_ce_4: 0.2315  loss_mask_4: 0.4908  loss_dice_4: 1.134  loss_ce_5: 0.2312  loss_mask_5: 0.4879  loss_dice_5: 1.116  loss_ce_6: 0.2277  loss_mask_6: 0.4897  loss_dice_6: 1.083  loss_ce_7: 0.2186  loss_mask_7: 0.4811  loss_dice_7: 1.112  loss_ce_8: 0.2037  loss_mask_8: 0.4805  loss_dice_8: 1.124    time: 0.9891  last_time: 1.0015  data_time: 0.0404  last_data_time: 0.0358   lr: 0.0001  max_mem: 29894M
[08/21 19:49:46] d2.utils.events INFO:  eta: 0:14:46  iter: 99  total_loss: 19.31  loss_ce: 0.2284  loss_mask: 0.4836  loss_dice: 1.155  loss_ce_0: 0.231  loss_mask_0: 0.5067  loss_dice_0: 1.318  loss_ce_1: 0.276  loss_mask_1: 0.4954  loss_dice_1: 1.249  loss_ce_2: 0.2777  loss_mask_2: 0.4853  loss_dice_2: 1.186  loss_ce_3: 0.2712  loss_mask_3: 0.4823  loss_dice_3: 1.174  loss_ce_4: 0.2482  loss_mask_4: 0.4784  loss_dice_4: 1.168  loss_ce_5: 0.2313  loss_mask_5: 0.4795  loss_dice_5: 1.189  loss_ce_6: 0.247  loss_mask_6: 0.4782  loss_dice_6: 1.166  loss_ce_7: 0.244  loss_mask_7: 0.4763  loss_dice_7: 1.17  loss_ce_8: 0.2473  loss_mask_8: 0.4745  loss_dice_8: 1.142    time: 0.9886  last_time: 0.9769  data_time: 0.0380  last_data_time: 0.0357   lr: 0.0001  max_mem: 29894M
[08/21 19:50:06] d2.utils.events INFO:  eta: 0:14:26  iter: 119  total_loss: 19.07  loss_ce: 0.2444  loss_mask: 0.4552  loss_dice: 1.123  loss_ce_0: 0.1977  loss_mask_0: 0.4945  loss_dice_0: 1.301  loss_ce_1: 0.2532  loss_mask_1: 0.4807  loss_dice_1: 1.243  loss_ce_2: 0.2329  loss_mask_2: 0.4716  loss_dice_2: 1.19  loss_ce_3: 0.2456  loss_mask_3: 0.4739  loss_dice_3: 1.159  loss_ce_4: 0.2589  loss_mask_4: 0.4518  loss_dice_4: 1.166  loss_ce_5: 0.2628  loss_mask_5: 0.4625  loss_dice_5: 1.152  loss_ce_6: 0.2608  loss_mask_6: 0.4628  loss_dice_6: 1.161  loss_ce_7: 0.2618  loss_mask_7: 0.457  loss_dice_7: 1.142  loss_ce_8: 0.2185  loss_mask_8: 0.4592  loss_dice_8: 1.154    time: 0.9880  last_time: 0.9777  data_time: 0.0396  last_data_time: 0.0378   lr: 0.0001  max_mem: 29895M
[08/21 19:50:27] d2.utils.events INFO:  eta: 0:14:07  iter: 139  total_loss: 18.15  loss_ce: 0.2291  loss_mask: 0.4663  loss_dice: 1.067  loss_ce_0: 0.2039  loss_mask_0: 0.5121  loss_dice_0: 1.265  loss_ce_1: 0.2563  loss_mask_1: 0.4825  loss_dice_1: 1.162  loss_ce_2: 0.2686  loss_mask_2: 0.4653  loss_dice_2: 1.113  loss_ce_3: 0.2661  loss_mask_3: 0.4609  loss_dice_3: 1.085  loss_ce_4: 0.2476  loss_mask_4: 0.4631  loss_dice_4: 1.074  loss_ce_5: 0.2456  loss_mask_5: 0.4599  loss_dice_5: 1.07  loss_ce_6: 0.2285  loss_mask_6: 0.4686  loss_dice_6: 1.078  loss_ce_7: 0.2385  loss_mask_7: 0.4645  loss_dice_7: 1.052  loss_ce_8: 0.2108  loss_mask_8: 0.4643  loss_dice_8: 1.086    time: 0.9881  last_time: 0.9921  data_time: 0.0384  last_data_time: 0.0374   lr: 0.0001  max_mem: 29895M
[08/21 19:50:47] d2.utils.events INFO:  eta: 0:13:47  iter: 159  total_loss: 18.29  loss_ce: 0.223  loss_mask: 0.4349  loss_dice: 1.134  loss_ce_0: 0.2032  loss_mask_0: 0.4948  loss_dice_0: 1.29  loss_ce_1: 0.2436  loss_mask_1: 0.4646  loss_dice_1: 1.21  loss_ce_2: 0.234  loss_mask_2: 0.4507  loss_dice_2: 1.159  loss_ce_3: 0.2216  loss_mask_3: 0.4377  loss_dice_3: 1.137  loss_ce_4: 0.2049  loss_mask_4: 0.4377  loss_dice_4: 1.129  loss_ce_5: 0.2191  loss_mask_5: 0.4383  loss_dice_5: 1.15  loss_ce_6: 0.2237  loss_mask_6: 0.4416  loss_dice_6: 1.132  loss_ce_7: 0.2211  loss_mask_7: 0.4411  loss_dice_7: 1.131  loss_ce_8: 0.21  loss_mask_8: 0.4347  loss_dice_8: 1.135    time: 0.9882  last_time: 0.9761  data_time: 0.0376  last_data_time: 0.0339   lr: 0.0001  max_mem: 29895M
[08/21 19:51:07] d2.utils.events INFO:  eta: 0:13:27  iter: 179  total_loss: 19.02  loss_ce: 0.2431  loss_mask: 0.438  loss_dice: 1.091  loss_ce_0: 0.2103  loss_mask_0: 0.4823  loss_dice_0: 1.264  loss_ce_1: 0.2633  loss_mask_1: 0.4555  loss_dice_1: 1.168  loss_ce_2: 0.2608  loss_mask_2: 0.4535  loss_dice_2: 1.153  loss_ce_3: 0.2768  loss_mask_3: 0.4259  loss_dice_3: 1.134  loss_ce_4: 0.2475  loss_mask_4: 0.4423  loss_dice_4: 1.125  loss_ce_5: 0.2376  loss_mask_5: 0.4325  loss_dice_5: 1.121  loss_ce_6: 0.2458  loss_mask_6: 0.431  loss_dice_6: 1.108  loss_ce_7: 0.2438  loss_mask_7: 0.4412  loss_dice_7: 1.096  loss_ce_8: 0.249  loss_mask_8: 0.4392  loss_dice_8: 1.073    time: 0.9878  last_time: 0.9891  data_time: 0.0372  last_data_time: 0.0366   lr: 0.0001  max_mem: 29895M
[08/21 19:51:28] d2.utils.events INFO:  eta: 0:13:08  iter: 199  total_loss: 17.84  loss_ce: 0.1766  loss_mask: 0.4367  loss_dice: 1.068  loss_ce_0: 0.1852  loss_mask_0: 0.4829  loss_dice_0: 1.216  loss_ce_1: 0.2246  loss_mask_1: 0.4781  loss_dice_1: 1.136  loss_ce_2: 0.2117  loss_mask_2: 0.4523  loss_dice_2: 1.117  loss_ce_3: 0.2112  loss_mask_3: 0.4504  loss_dice_3: 1.108  loss_ce_4: 0.2078  loss_mask_4: 0.4515  loss_dice_4: 1.075  loss_ce_5: 0.1852  loss_mask_5: 0.4474  loss_dice_5: 1.096  loss_ce_6: 0.1939  loss_mask_6: 0.442  loss_dice_6: 1.102  loss_ce_7: 0.2039  loss_mask_7: 0.4404  loss_dice_7: 1.086  loss_ce_8: 0.207  loss_mask_8: 0.4412  loss_dice_8: 1.086    time: 0.9885  last_time: 0.9922  data_time: 0.0388  last_data_time: 0.0391   lr: 0.0001  max_mem: 29895M
[08/21 19:51:48] d2.utils.events INFO:  eta: 0:12:49  iter: 219  total_loss: 18.07  loss_ce: 0.2173  loss_mask: 0.454  loss_dice: 1.095  loss_ce_0: 0.2094  loss_mask_0: 0.4971  loss_dice_0: 1.277  loss_ce_1: 0.2731  loss_mask_1: 0.4825  loss_dice_1: 1.181  loss_ce_2: 0.2672  loss_mask_2: 0.4612  loss_dice_2: 1.124  loss_ce_3: 0.273  loss_mask_3: 0.453  loss_dice_3: 1.087  loss_ce_4: 0.2612  loss_mask_4: 0.4619  loss_dice_4: 1.098  loss_ce_5: 0.245  loss_mask_5: 0.4626  loss_dice_5: 1.099  loss_ce_6: 0.2234  loss_mask_6: 0.4587  loss_dice_6: 1.056  loss_ce_7: 0.2345  loss_mask_7: 0.4597  loss_dice_7: 1.063  loss_ce_8: 0.2362  loss_mask_8: 0.4613  loss_dice_8: 1.078    time: 0.9892  last_time: 0.9810  data_time: 0.0374  last_data_time: 0.0344   lr: 0.0001  max_mem: 29895M
[08/21 19:52:09] d2.utils.events INFO:  eta: 0:12:29  iter: 239  total_loss: 18.56  loss_ce: 0.2483  loss_mask: 0.4423  loss_dice: 1.112  loss_ce_0: 0.2329  loss_mask_0: 0.495  loss_dice_0: 1.302  loss_ce_1: 0.2406  loss_mask_1: 0.4793  loss_dice_1: 1.219  loss_ce_2: 0.2824  loss_mask_2: 0.4614  loss_dice_2: 1.156  loss_ce_3: 0.2489  loss_mask_3: 0.4562  loss_dice_3: 1.108  loss_ce_4: 0.2646  loss_mask_4: 0.4474  loss_dice_4: 1.116  loss_ce_5: 0.2319  loss_mask_5: 0.4435  loss_dice_5: 1.103  loss_ce_6: 0.2369  loss_mask_6: 0.4449  loss_dice_6: 1.092  loss_ce_7: 0.2484  loss_mask_7: 0.4421  loss_dice_7: 1.108  loss_ce_8: 0.2737  loss_mask_8: 0.4452  loss_dice_8: 1.109    time: 0.9901  last_time: 0.9904  data_time: 0.0400  last_data_time: 0.0394   lr: 0.0001  max_mem: 29895M
[08/21 19:52:29] d2.utils.events INFO:  eta: 0:12:10  iter: 259  total_loss: 17.45  loss_ce: 0.2355  loss_mask: 0.4282  loss_dice: 1.065  loss_ce_0: 0.2159  loss_mask_0: 0.4648  loss_dice_0: 1.217  loss_ce_1: 0.2337  loss_mask_1: 0.4513  loss_dice_1: 1.159  loss_ce_2: 0.2636  loss_mask_2: 0.4504  loss_dice_2: 1.123  loss_ce_3: 0.2494  loss_mask_3: 0.4301  loss_dice_3: 1.076  loss_ce_4: 0.2128  loss_mask_4: 0.4329  loss_dice_4: 1.094  loss_ce_5: 0.2281  loss_mask_5: 0.4248  loss_dice_5: 1.08  loss_ce_6: 0.2215  loss_mask_6: 0.429  loss_dice_6: 1.063  loss_ce_7: 0.2366  loss_mask_7: 0.4273  loss_dice_7: 1.057  loss_ce_8: 0.2224  loss_mask_8: 0.4293  loss_dice_8: 1.073    time: 0.9906  last_time: 0.9943  data_time: 0.0373  last_data_time: 0.0388   lr: 0.0001  max_mem: 29895M
[08/21 19:52:50] d2.utils.events INFO:  eta: 0:11:51  iter: 279  total_loss: 17.43  loss_ce: 0.213  loss_mask: 0.44  loss_dice: 1.027  loss_ce_0: 0.19  loss_mask_0: 0.4931  loss_dice_0: 1.176  loss_ce_1: 0.238  loss_mask_1: 0.4555  loss_dice_1: 1.136  loss_ce_2: 0.2354  loss_mask_2: 0.4488  loss_dice_2: 1.078  loss_ce_3: 0.2405  loss_mask_3: 0.4516  loss_dice_3: 1.065  loss_ce_4: 0.2278  loss_mask_4: 0.4511  loss_dice_4: 1.058  loss_ce_5: 0.2272  loss_mask_5: 0.4464  loss_dice_5: 1.039  loss_ce_6: 0.2297  loss_mask_6: 0.4522  loss_dice_6: 1.024  loss_ce_7: 0.2137  loss_mask_7: 0.4466  loss_dice_7: 1.021  loss_ce_8: 0.2164  loss_mask_8: 0.4488  loss_dice_8: 1.042    time: 0.9915  last_time: 1.0165  data_time: 0.0400  last_data_time: 0.0339   lr: 0.0001  max_mem: 29895M
[08/21 19:53:10] d2.utils.events INFO:  eta: 0:11:32  iter: 299  total_loss: 18  loss_ce: 0.2398  loss_mask: 0.4178  loss_dice: 1.093  loss_ce_0: 0.2077  loss_mask_0: 0.4506  loss_dice_0: 1.246  loss_ce_1: 0.2269  loss_mask_1: 0.4338  loss_dice_1: 1.188  loss_ce_2: 0.2456  loss_mask_2: 0.4262  loss_dice_2: 1.131  loss_ce_3: 0.2483  loss_mask_3: 0.4155  loss_dice_3: 1.134  loss_ce_4: 0.2312  loss_mask_4: 0.4155  loss_dice_4: 1.133  loss_ce_5: 0.2313  loss_mask_5: 0.4171  loss_dice_5: 1.097  loss_ce_6: 0.2595  loss_mask_6: 0.4134  loss_dice_6: 1.1  loss_ce_7: 0.2491  loss_mask_7: 0.4142  loss_dice_7: 1.108  loss_ce_8: 0.2526  loss_mask_8: 0.4174  loss_dice_8: 1.098    time: 0.9921  last_time: 1.0054  data_time: 0.0344  last_data_time: 0.0322   lr: 0.0001  max_mem: 29897M
[08/21 19:53:31] d2.utils.events INFO:  eta: 0:11:12  iter: 319  total_loss: 17.83  loss_ce: 0.1887  loss_mask: 0.4288  loss_dice: 1.085  loss_ce_0: 0.1767  loss_mask_0: 0.4827  loss_dice_0: 1.227  loss_ce_1: 0.2267  loss_mask_1: 0.4435  loss_dice_1: 1.176  loss_ce_2: 0.2287  loss_mask_2: 0.4462  loss_dice_2: 1.118  loss_ce_3: 0.2269  loss_mask_3: 0.435  loss_dice_3: 1.083  loss_ce_4: 0.2126  loss_mask_4: 0.4232  loss_dice_4: 1.095  loss_ce_5: 0.1951  loss_mask_5: 0.4377  loss_dice_5: 1.071  loss_ce_6: 0.1996  loss_mask_6: 0.439  loss_dice_6: 1.098  loss_ce_7: 0.1939  loss_mask_7: 0.4398  loss_dice_7: 1.078  loss_ce_8: 0.2229  loss_mask_8: 0.431  loss_dice_8: 1.089    time: 0.9923  last_time: 0.9927  data_time: 0.0339  last_data_time: 0.0367   lr: 0.0001  max_mem: 29897M
[08/21 19:53:51] d2.utils.events INFO:  eta: 0:10:52  iter: 339  total_loss: 17.07  loss_ce: 0.2132  loss_mask: 0.4191  loss_dice: 1.019  loss_ce_0: 0.2424  loss_mask_0: 0.4707  loss_dice_0: 1.145  loss_ce_1: 0.2584  loss_mask_1: 0.4361  loss_dice_1: 1.071  loss_ce_2: 0.2485  loss_mask_2: 0.4241  loss_dice_2: 1.043  loss_ce_3: 0.259  loss_mask_3: 0.4153  loss_dice_3: 1.006  loss_ce_4: 0.263  loss_mask_4: 0.4206  loss_dice_4: 1.033  loss_ce_5: 0.2752  loss_mask_5: 0.4147  loss_dice_5: 1.019  loss_ce_6: 0.2418  loss_mask_6: 0.419  loss_dice_6: 0.9803  loss_ce_7: 0.2384  loss_mask_7: 0.4203  loss_dice_7: 1.044  loss_ce_8: 0.2302  loss_mask_8: 0.4173  loss_dice_8: 1.031    time: 0.9919  last_time: 0.9969  data_time: 0.0336  last_data_time: 0.0402   lr: 0.0001  max_mem: 29897M
[08/21 19:54:12] d2.utils.events INFO:  eta: 0:10:33  iter: 359  total_loss: 17.08  loss_ce: 0.2033  loss_mask: 0.4226  loss_dice: 1.025  loss_ce_0: 0.2179  loss_mask_0: 0.4821  loss_dice_0: 1.172  loss_ce_1: 0.2229  loss_mask_1: 0.4699  loss_dice_1: 1.102  loss_ce_2: 0.2333  loss_mask_2: 0.4451  loss_dice_2: 1.07  loss_ce_3: 0.2433  loss_mask_3: 0.44  loss_dice_3: 1.033  loss_ce_4: 0.2372  loss_mask_4: 0.4348  loss_dice_4: 1.029  loss_ce_5: 0.2074  loss_mask_5: 0.4276  loss_dice_5: 1.033  loss_ce_6: 0.2157  loss_mask_6: 0.4241  loss_dice_6: 1.037  loss_ce_7: 0.2037  loss_mask_7: 0.4344  loss_dice_7: 1.02  loss_ce_8: 0.2035  loss_mask_8: 0.4394  loss_dice_8: 1.019    time: 0.9926  last_time: 1.0063  data_time: 0.0353  last_data_time: 0.0359   lr: 0.0001  max_mem: 29897M
[08/21 19:54:32] d2.utils.events INFO:  eta: 0:10:13  iter: 379  total_loss: 17.36  loss_ce: 0.1812  loss_mask: 0.4147  loss_dice: 1.035  loss_ce_0: 0.1868  loss_mask_0: 0.4621  loss_dice_0: 1.207  loss_ce_1: 0.2246  loss_mask_1: 0.4463  loss_dice_1: 1.137  loss_ce_2: 0.2056  loss_mask_2: 0.4378  loss_dice_2: 1.076  loss_ce_3: 0.1937  loss_mask_3: 0.4254  loss_dice_3: 1.074  loss_ce_4: 0.1823  loss_mask_4: 0.4168  loss_dice_4: 1.06  loss_ce_5: 0.1691  loss_mask_5: 0.4095  loss_dice_5: 1.064  loss_ce_6: 0.1655  loss_mask_6: 0.4125  loss_dice_6: 1.048  loss_ce_7: 0.1928  loss_mask_7: 0.4148  loss_dice_7: 1.054  loss_ce_8: 0.1614  loss_mask_8: 0.415  loss_dice_8: 1.039    time: 0.9927  last_time: 0.9856  data_time: 0.0343  last_data_time: 0.0306   lr: 0.0001  max_mem: 29897M
[08/21 19:54:53] d2.utils.events INFO:  eta: 0:09:54  iter: 399  total_loss: 16.1  loss_ce: 0.1545  loss_mask: 0.3998  loss_dice: 1.028  loss_ce_0: 0.1851  loss_mask_0: 0.4417  loss_dice_0: 1.133  loss_ce_1: 0.1785  loss_mask_1: 0.4175  loss_dice_1: 1.15  loss_ce_2: 0.2187  loss_mask_2: 0.3979  loss_dice_2: 1.074  loss_ce_3: 0.1964  loss_mask_3: 0.3986  loss_dice_3: 1.036  loss_ce_4: 0.1889  loss_mask_4: 0.4012  loss_dice_4: 1.065  loss_ce_5: 0.1977  loss_mask_5: 0.4043  loss_dice_5: 1.046  loss_ce_6: 0.1631  loss_mask_6: 0.3931  loss_dice_6: 1.05  loss_ce_7: 0.1699  loss_mask_7: 0.3986  loss_dice_7: 1.034  loss_ce_8: 0.1725  loss_mask_8: 0.3973  loss_dice_8: 1.007    time: 0.9934  last_time: 1.0081  data_time: 0.0341  last_data_time: 0.0392   lr: 0.0001  max_mem: 29897M
[08/21 19:55:13] d2.utils.events INFO:  eta: 0:09:34  iter: 419  total_loss: 16.31  loss_ce: 0.212  loss_mask: 0.4124  loss_dice: 0.9821  loss_ce_0: 0.2006  loss_mask_0: 0.4291  loss_dice_0: 1.076  loss_ce_1: 0.2235  loss_mask_1: 0.4097  loss_dice_1: 1.033  loss_ce_2: 0.1923  loss_mask_2: 0.4032  loss_dice_2: 1.027  loss_ce_3: 0.1896  loss_mask_3: 0.4163  loss_dice_3: 1.01  loss_ce_4: 0.1926  loss_mask_4: 0.4103  loss_dice_4: 1.021  loss_ce_5: 0.1873  loss_mask_5: 0.4124  loss_dice_5: 0.9701  loss_ce_6: 0.1907  loss_mask_6: 0.4147  loss_dice_6: 0.9769  loss_ce_7: 0.1718  loss_mask_7: 0.4098  loss_dice_7: 0.9813  loss_ce_8: 0.1955  loss_mask_8: 0.4077  loss_dice_8: 0.9838    time: 0.9934  last_time: 0.9857  data_time: 0.0344  last_data_time: 0.0354   lr: 0.0001  max_mem: 29897M
[08/21 19:55:34] d2.utils.events INFO:  eta: 0:09:14  iter: 439  total_loss: 16.32  loss_ce: 0.1762  loss_mask: 0.4213  loss_dice: 0.9661  loss_ce_0: 0.1868  loss_mask_0: 0.457  loss_dice_0: 1.103  loss_ce_1: 0.2089  loss_mask_1: 0.4318  loss_dice_1: 1.039  loss_ce_2: 0.1852  loss_mask_2: 0.4313  loss_dice_2: 1.004  loss_ce_3: 0.2037  loss_mask_3: 0.4278  loss_dice_3: 1.007  loss_ce_4: 0.2062  loss_mask_4: 0.4302  loss_dice_4: 0.9835  loss_ce_5: 0.1856  loss_mask_5: 0.425  loss_dice_5: 0.9727  loss_ce_6: 0.1865  loss_mask_6: 0.4274  loss_dice_6: 0.9758  loss_ce_7: 0.2023  loss_mask_7: 0.4259  loss_dice_7: 0.9845  loss_ce_8: 0.176  loss_mask_8: 0.4244  loss_dice_8: 0.9623    time: 0.9934  last_time: 0.9897  data_time: 0.0349  last_data_time: 0.0369   lr: 0.0001  max_mem: 29897M
[08/21 19:55:54] d2.utils.events INFO:  eta: 0:08:54  iter: 459  total_loss: 16.17  loss_ce: 0.234  loss_mask: 0.3938  loss_dice: 0.9914  loss_ce_0: 0.2029  loss_mask_0: 0.4179  loss_dice_0: 1.177  loss_ce_1: 0.224  loss_mask_1: 0.4026  loss_dice_1: 1.099  loss_ce_2: 0.2373  loss_mask_2: 0.4036  loss_dice_2: 1.04  loss_ce_3: 0.2287  loss_mask_3: 0.3973  loss_dice_3: 1.045  loss_ce_4: 0.2164  loss_mask_4: 0.3984  loss_dice_4: 1.016  loss_ce_5: 0.2111  loss_mask_5: 0.4134  loss_dice_5: 1.022  loss_ce_6: 0.2185  loss_mask_6: 0.3979  loss_dice_6: 1.018  loss_ce_7: 0.2147  loss_mask_7: 0.3851  loss_dice_7: 1.012  loss_ce_8: 0.2165  loss_mask_8: 0.3835  loss_dice_8: 1.028    time: 0.9937  last_time: 0.9944  data_time: 0.0345  last_data_time: 0.0377   lr: 0.0001  max_mem: 29897M
[08/21 19:56:15] d2.utils.events INFO:  eta: 0:08:35  iter: 479  total_loss: 17.16  loss_ce: 0.182  loss_mask: 0.4005  loss_dice: 1.038  loss_ce_0: 0.1752  loss_mask_0: 0.4237  loss_dice_0: 1.197  loss_ce_1: 0.2308  loss_mask_1: 0.4188  loss_dice_1: 1.128  loss_ce_2: 0.2137  loss_mask_2: 0.4017  loss_dice_2: 1.074  loss_ce_3: 0.2136  loss_mask_3: 0.3977  loss_dice_3: 1.058  loss_ce_4: 0.1997  loss_mask_4: 0.3991  loss_dice_4: 1.055  loss_ce_5: 0.2021  loss_mask_5: 0.3993  loss_dice_5: 1.055  loss_ce_6: 0.2099  loss_mask_6: 0.3965  loss_dice_6: 1.037  loss_ce_7: 0.1956  loss_mask_7: 0.4006  loss_dice_7: 1.041  loss_ce_8: 0.1936  loss_mask_8: 0.401  loss_dice_8: 1.043    time: 0.9939  last_time: 0.9970  data_time: 0.0346  last_data_time: 0.0334   lr: 0.0001  max_mem: 29897M
[08/21 19:56:36] d2.utils.events INFO:  eta: 0:08:15  iter: 499  total_loss: 16.41  loss_ce: 0.1756  loss_mask: 0.4091  loss_dice: 1.012  loss_ce_0: 0.1825  loss_mask_0: 0.4679  loss_dice_0: 1.159  loss_ce_1: 0.1897  loss_mask_1: 0.4179  loss_dice_1: 1.075  loss_ce_2: 0.1984  loss_mask_2: 0.412  loss_dice_2: 1.042  loss_ce_3: 0.1914  loss_mask_3: 0.4131  loss_dice_3: 1.01  loss_ce_4: 0.1896  loss_mask_4: 0.4117  loss_dice_4: 1.01  loss_ce_5: 0.1868  loss_mask_5: 0.4039  loss_dice_5: 0.9889  loss_ce_6: 0.1845  loss_mask_6: 0.4075  loss_dice_6: 0.9937  loss_ce_7: 0.1865  loss_mask_7: 0.4042  loss_dice_7: 1.003  loss_ce_8: 0.188  loss_mask_8: 0.4063  loss_dice_8: 1.007    time: 0.9939  last_time: 0.9989  data_time: 0.0341  last_data_time: 0.0367   lr: 0.0001  max_mem: 29897M
[08/21 19:56:56] d2.utils.events INFO:  eta: 0:07:55  iter: 519  total_loss: 16.34  loss_ce: 0.2009  loss_mask: 0.4041  loss_dice: 0.961  loss_ce_0: 0.2153  loss_mask_0: 0.4312  loss_dice_0: 1.073  loss_ce_1: 0.2334  loss_mask_1: 0.4043  loss_dice_1: 1.014  loss_ce_2: 0.2216  loss_mask_2: 0.4027  loss_dice_2: 1.007  loss_ce_3: 0.1989  loss_mask_3: 0.406  loss_dice_3: 0.9789  loss_ce_4: 0.2006  loss_mask_4: 0.4075  loss_dice_4: 0.9919  loss_ce_5: 0.1962  loss_mask_5: 0.4012  loss_dice_5: 0.9993  loss_ce_6: 0.1883  loss_mask_6: 0.4059  loss_dice_6: 0.9483  loss_ce_7: 0.1933  loss_mask_7: 0.4029  loss_dice_7: 0.9772  loss_ce_8: 0.1862  loss_mask_8: 0.4034  loss_dice_8: 0.9544    time: 0.9940  last_time: 0.9931  data_time: 0.0331  last_data_time: 0.0341   lr: 0.0001  max_mem: 29897M
[08/21 19:57:17] d2.utils.events INFO:  eta: 0:07:35  iter: 539  total_loss: 16.64  loss_ce: 0.213  loss_mask: 0.4075  loss_dice: 1.023  loss_ce_0: 0.1639  loss_mask_0: 0.4529  loss_dice_0: 1.168  loss_ce_1: 0.208  loss_mask_1: 0.4476  loss_dice_1: 1.073  loss_ce_2: 0.2318  loss_mask_2: 0.4236  loss_dice_2: 1.036  loss_ce_3: 0.218  loss_mask_3: 0.4244  loss_dice_3: 1.048  loss_ce_4: 0.1958  loss_mask_4: 0.4185  loss_dice_4: 1.036  loss_ce_5: 0.203  loss_mask_5: 0.4106  loss_dice_5: 1.036  loss_ce_6: 0.2181  loss_mask_6: 0.4054  loss_dice_6: 1.002  loss_ce_7: 0.2052  loss_mask_7: 0.4133  loss_dice_7: 1.032  loss_ce_8: 0.2038  loss_mask_8: 0.4079  loss_dice_8: 1.026    time: 0.9942  last_time: 0.9925  data_time: 0.0347  last_data_time: 0.0323   lr: 0.0001  max_mem: 29897M
[08/21 19:57:38] d2.utils.events INFO:  eta: 0:07:16  iter: 559  total_loss: 16.02  loss_ce: 0.1991  loss_mask: 0.3982  loss_dice: 0.9649  loss_ce_0: 0.2075  loss_mask_0: 0.4402  loss_dice_0: 1.088  loss_ce_1: 0.2019  loss_mask_1: 0.4129  loss_dice_1: 1.022  loss_ce_2: 0.2022  loss_mask_2: 0.4119  loss_dice_2: 1.001  loss_ce_3: 0.2165  loss_mask_3: 0.399  loss_dice_3: 0.9819  loss_ce_4: 0.2175  loss_mask_4: 0.4036  loss_dice_4: 0.9911  loss_ce_5: 0.2107  loss_mask_5: 0.399  loss_dice_5: 0.9833  loss_ce_6: 0.2127  loss_mask_6: 0.4043  loss_dice_6: 0.9882  loss_ce_7: 0.1886  loss_mask_7: 0.4051  loss_dice_7: 0.9722  loss_ce_8: 0.1821  loss_mask_8: 0.3979  loss_dice_8: 0.9628    time: 0.9944  last_time: 0.9860  data_time: 0.0358  last_data_time: 0.0342   lr: 0.0001  max_mem: 29897M
[08/21 19:57:58] d2.utils.events INFO:  eta: 0:06:56  iter: 579  total_loss: 15.4  loss_ce: 0.1853  loss_mask: 0.3908  loss_dice: 0.9405  loss_ce_0: 0.1848  loss_mask_0: 0.4156  loss_dice_0: 1.12  loss_ce_1: 0.2146  loss_mask_1: 0.3987  loss_dice_1: 1.042  loss_ce_2: 0.2412  loss_mask_2: 0.3997  loss_dice_2: 0.9737  loss_ce_3: 0.1915  loss_mask_3: 0.3971  loss_dice_3: 0.9569  loss_ce_4: 0.1882  loss_mask_4: 0.39  loss_dice_4: 0.9627  loss_ce_5: 0.1934  loss_mask_5: 0.3893  loss_dice_5: 0.9557  loss_ce_6: 0.1846  loss_mask_6: 0.3881  loss_dice_6: 0.9542  loss_ce_7: 0.1863  loss_mask_7: 0.3878  loss_dice_7: 0.9605  loss_ce_8: 0.1705  loss_mask_8: 0.3911  loss_dice_8: 0.9439    time: 0.9945  last_time: 0.9946  data_time: 0.0355  last_data_time: 0.0342   lr: 0.0001  max_mem: 29897M
[08/21 19:58:18] d2.utils.events INFO:  eta: 0:06:36  iter: 599  total_loss: 15.93  loss_ce: 0.1857  loss_mask: 0.3999  loss_dice: 0.9553  loss_ce_0: 0.1859  loss_mask_0: 0.4434  loss_dice_0: 1.085  loss_ce_1: 0.2251  loss_mask_1: 0.4241  loss_dice_1: 1.021  loss_ce_2: 0.2124  loss_mask_2: 0.4217  loss_dice_2: 0.9705  loss_ce_3: 0.2033  loss_mask_3: 0.4063  loss_dice_3: 0.9754  loss_ce_4: 0.2043  loss_mask_4: 0.4042  loss_dice_4: 0.9619  loss_ce_5: 0.1825  loss_mask_5: 0.4009  loss_dice_5: 0.9555  loss_ce_6: 0.1849  loss_mask_6: 0.4046  loss_dice_6: 0.9667  loss_ce_7: 0.1735  loss_mask_7: 0.4058  loss_dice_7: 0.9573  loss_ce_8: 0.187  loss_mask_8: 0.4072  loss_dice_8: 0.9487    time: 0.9945  last_time: 0.9875  data_time: 0.0357  last_data_time: 0.0363   lr: 0.0001  max_mem: 29897M
[08/21 19:58:38] d2.utils.events INFO:  eta: 0:06:16  iter: 619  total_loss: 16.29  loss_ce: 0.2014  loss_mask: 0.3942  loss_dice: 1.003  loss_ce_0: 0.1822  loss_mask_0: 0.4284  loss_dice_0: 1.11  loss_ce_1: 0.2206  loss_mask_1: 0.4002  loss_dice_1: 1.015  loss_ce_2: 0.2114  loss_mask_2: 0.4041  loss_dice_2: 1.024  loss_ce_3: 0.2203  loss_mask_3: 0.3937  loss_dice_3: 1.014  loss_ce_4: 0.1891  loss_mask_4: 0.3943  loss_dice_4: 1.018  loss_ce_5: 0.2142  loss_mask_5: 0.4007  loss_dice_5: 0.9797  loss_ce_6: 0.2001  loss_mask_6: 0.398  loss_dice_6: 0.9851  loss_ce_7: 0.1926  loss_mask_7: 0.3924  loss_dice_7: 0.9958  loss_ce_8: 0.1923  loss_mask_8: 0.3942  loss_dice_8: 1    time: 0.9944  last_time: 1.0067  data_time: 0.0360  last_data_time: 0.0368   lr: 0.0001  max_mem: 29897M
[08/21 19:58:58] d2.utils.events INFO:  eta: 0:05:56  iter: 639  total_loss: 16.9  loss_ce: 0.1978  loss_mask: 0.3973  loss_dice: 1.021  loss_ce_0: 0.1888  loss_mask_0: 0.428  loss_dice_0: 1.157  loss_ce_1: 0.2376  loss_mask_1: 0.4095  loss_dice_1: 1.084  loss_ce_2: 0.2262  loss_mask_2: 0.3907  loss_dice_2: 1.035  loss_ce_3: 0.2203  loss_mask_3: 0.3913  loss_dice_3: 1.026  loss_ce_4: 0.2286  loss_mask_4: 0.3923  loss_dice_4: 1.013  loss_ce_5: 0.2157  loss_mask_5: 0.3934  loss_dice_5: 1.029  loss_ce_6: 0.2054  loss_mask_6: 0.3991  loss_dice_6: 1.016  loss_ce_7: 0.1929  loss_mask_7: 0.3974  loss_dice_7: 1.022  loss_ce_8: 0.2099  loss_mask_8: 0.3947  loss_dice_8: 1.022    time: 0.9944  last_time: 0.9877  data_time: 0.0345  last_data_time: 0.0323   lr: 0.0001  max_mem: 29897M
[08/21 19:59:19] d2.utils.events INFO:  eta: 0:05:37  iter: 659  total_loss: 16.02  loss_ce: 0.1883  loss_mask: 0.378  loss_dice: 0.9805  loss_ce_0: 0.1624  loss_mask_0: 0.4119  loss_dice_0: 1.119  loss_ce_1: 0.1971  loss_mask_1: 0.3906  loss_dice_1: 1.077  loss_ce_2: 0.1979  loss_mask_2: 0.382  loss_dice_2: 1.034  loss_ce_3: 0.1892  loss_mask_3: 0.3818  loss_dice_3: 0.9689  loss_ce_4: 0.173  loss_mask_4: 0.3843  loss_dice_4: 1.033  loss_ce_5: 0.1802  loss_mask_5: 0.3831  loss_dice_5: 0.9953  loss_ce_6: 0.1874  loss_mask_6: 0.3778  loss_dice_6: 1.006  loss_ce_7: 0.2041  loss_mask_7: 0.3776  loss_dice_7: 1.003  loss_ce_8: 0.1931  loss_mask_8: 0.3777  loss_dice_8: 0.9844    time: 0.9945  last_time: 0.9789  data_time: 0.0344  last_data_time: 0.0314   lr: 0.0001  max_mem: 29897M
[08/21 19:59:39] d2.utils.events INFO:  eta: 0:05:17  iter: 679  total_loss: 16.9  loss_ce: 0.1828  loss_mask: 0.4019  loss_dice: 1.025  loss_ce_0: 0.1902  loss_mask_0: 0.4515  loss_dice_0: 1.149  loss_ce_1: 0.2151  loss_mask_1: 0.4281  loss_dice_1: 1.121  loss_ce_2: 0.2043  loss_mask_2: 0.4168  loss_dice_2: 1.065  loss_ce_3: 0.2046  loss_mask_3: 0.4205  loss_dice_3: 1.058  loss_ce_4: 0.2009  loss_mask_4: 0.4093  loss_dice_4: 1.052  loss_ce_5: 0.2013  loss_mask_5: 0.4092  loss_dice_5: 1.062  loss_ce_6: 0.2021  loss_mask_6: 0.4083  loss_dice_6: 1.035  loss_ce_7: 0.1961  loss_mask_7: 0.4007  loss_dice_7: 1.019  loss_ce_8: 0.1858  loss_mask_8: 0.4056  loss_dice_8: 1.042    time: 0.9945  last_time: 1.0018  data_time: 0.0352  last_data_time: 0.0344   lr: 0.0001  max_mem: 29897M
[08/21 19:59:59] d2.utils.events INFO:  eta: 0:04:57  iter: 699  total_loss: 16.06  loss_ce: 0.192  loss_mask: 0.3938  loss_dice: 0.9793  loss_ce_0: 0.1758  loss_mask_0: 0.4533  loss_dice_0: 1.111  loss_ce_1: 0.1812  loss_mask_1: 0.4434  loss_dice_1: 1.074  loss_ce_2: 0.223  loss_mask_2: 0.4194  loss_dice_2: 1.043  loss_ce_3: 0.1885  loss_mask_3: 0.4054  loss_dice_3: 1.036  loss_ce_4: 0.2124  loss_mask_4: 0.4046  loss_dice_4: 1.017  loss_ce_5: 0.1935  loss_mask_5: 0.3992  loss_dice_5: 1.01  loss_ce_6: 0.2183  loss_mask_6: 0.3963  loss_dice_6: 0.9782  loss_ce_7: 0.2066  loss_mask_7: 0.3941  loss_dice_7: 1  loss_ce_8: 0.1849  loss_mask_8: 0.3946  loss_dice_8: 0.9929    time: 0.9946  last_time: 1.0007  data_time: 0.0362  last_data_time: 0.0388   lr: 0.0001  max_mem: 29897M
[08/21 20:00:19] d2.utils.events INFO:  eta: 0:04:37  iter: 719  total_loss: 16.59  loss_ce: 0.2053  loss_mask: 0.3893  loss_dice: 1.032  loss_ce_0: 0.2161  loss_mask_0: 0.4358  loss_dice_0: 1.152  loss_ce_1: 0.2137  loss_mask_1: 0.4226  loss_dice_1: 1.111  loss_ce_2: 0.2326  loss_mask_2: 0.4108  loss_dice_2: 1.044  loss_ce_3: 0.2274  loss_mask_3: 0.3945  loss_dice_3: 1.003  loss_ce_4: 0.1977  loss_mask_4: 0.3988  loss_dice_4: 1.023  loss_ce_5: 0.2197  loss_mask_5: 0.3871  loss_dice_5: 1.005  loss_ce_6: 0.2151  loss_mask_6: 0.3889  loss_dice_6: 0.9851  loss_ce_7: 0.2261  loss_mask_7: 0.3907  loss_dice_7: 1.003  loss_ce_8: 0.2006  loss_mask_8: 0.391  loss_dice_8: 1.003    time: 0.9946  last_time: 0.9904  data_time: 0.0356  last_data_time: 0.0349   lr: 0.0001  max_mem: 29898M
[08/21 20:00:39] d2.utils.events INFO:  eta: 0:04:17  iter: 739  total_loss: 16.65  loss_ce: 0.1874  loss_mask: 0.4399  loss_dice: 0.9888  loss_ce_0: 0.1817  loss_mask_0: 0.4779  loss_dice_0: 1.147  loss_ce_1: 0.2016  loss_mask_1: 0.4522  loss_dice_1: 1.094  loss_ce_2: 0.2261  loss_mask_2: 0.4577  loss_dice_2: 1.033  loss_ce_3: 0.2053  loss_mask_3: 0.4481  loss_dice_3: 1.004  loss_ce_4: 0.1883  loss_mask_4: 0.4468  loss_dice_4: 1.02  loss_ce_5: 0.1784  loss_mask_5: 0.445  loss_dice_5: 1.01  loss_ce_6: 0.1799  loss_mask_6: 0.4465  loss_dice_6: 1.019  loss_ce_7: 0.18  loss_mask_7: 0.4453  loss_dice_7: 0.9958  loss_ce_8: 0.174  loss_mask_8: 0.4451  loss_dice_8: 0.9839    time: 0.9949  last_time: 1.0232  data_time: 0.0362  last_data_time: 0.0371   lr: 0.0001  max_mem: 29898M
[08/21 20:01:00] d2.utils.events INFO:  eta: 0:03:58  iter: 759  total_loss: 15.05  loss_ce: 0.1697  loss_mask: 0.3506  loss_dice: 0.9488  loss_ce_0: 0.1821  loss_mask_0: 0.384  loss_dice_0: 1.054  loss_ce_1: 0.2023  loss_mask_1: 0.3964  loss_dice_1: 1.028  loss_ce_2: 0.1958  loss_mask_2: 0.3836  loss_dice_2: 1.009  loss_ce_3: 0.1864  loss_mask_3: 0.3856  loss_dice_3: 0.964  loss_ce_4: 0.1414  loss_mask_4: 0.3731  loss_dice_4: 0.9734  loss_ce_5: 0.1422  loss_mask_5: 0.3721  loss_dice_5: 0.9539  loss_ce_6: 0.1395  loss_mask_6: 0.3604  loss_dice_6: 0.9358  loss_ce_7: 0.1637  loss_mask_7: 0.3606  loss_dice_7: 0.944  loss_ce_8: 0.1744  loss_mask_8: 0.364  loss_dice_8: 0.9395    time: 0.9951  last_time: 1.0072  data_time: 0.0348  last_data_time: 0.0355   lr: 0.0001  max_mem: 29898M
[08/21 20:01:20] d2.utils.events INFO:  eta: 0:03:38  iter: 779  total_loss: 15.64  loss_ce: 0.1888  loss_mask: 0.381  loss_dice: 0.94  loss_ce_0: 0.1825  loss_mask_0: 0.4152  loss_dice_0: 1.052  loss_ce_1: 0.2024  loss_mask_1: 0.3962  loss_dice_1: 1.017  loss_ce_2: 0.2128  loss_mask_2: 0.3793  loss_dice_2: 0.9693  loss_ce_3: 0.2103  loss_mask_3: 0.3802  loss_dice_3: 0.941  loss_ce_4: 0.1848  loss_mask_4: 0.3792  loss_dice_4: 0.9494  loss_ce_5: 0.1995  loss_mask_5: 0.3841  loss_dice_5: 0.9575  loss_ce_6: 0.1849  loss_mask_6: 0.3822  loss_dice_6: 0.9441  loss_ce_7: 0.1958  loss_mask_7: 0.382  loss_dice_7: 0.9357  loss_ce_8: 0.1937  loss_mask_8: 0.3801  loss_dice_8: 0.9255    time: 0.9953  last_time: 0.9956  data_time: 0.0361  last_data_time: 0.0345   lr: 0.0001  max_mem: 29900M
[08/21 20:01:40] d2.utils.events INFO:  eta: 0:03:18  iter: 799  total_loss: 15.26  loss_ce: 0.1966  loss_mask: 0.3519  loss_dice: 0.9511  loss_ce_0: 0.1899  loss_mask_0: 0.3841  loss_dice_0: 1.069  loss_ce_1: 0.2269  loss_mask_1: 0.3633  loss_dice_1: 1.041  loss_ce_2: 0.1878  loss_mask_2: 0.3575  loss_dice_2: 0.9807  loss_ce_3: 0.1897  loss_mask_3: 0.3541  loss_dice_3: 0.9538  loss_ce_4: 0.1651  loss_mask_4: 0.3488  loss_dice_4: 0.9653  loss_ce_5: 0.1642  loss_mask_5: 0.353  loss_dice_5: 0.9558  loss_ce_6: 0.1897  loss_mask_6: 0.3527  loss_dice_6: 0.95  loss_ce_7: 0.1718  loss_mask_7: 0.3541  loss_dice_7: 0.9336  loss_ce_8: 0.1706  loss_mask_8: 0.3556  loss_dice_8: 0.9454    time: 0.9957  last_time: 1.0058  data_time: 0.0355  last_data_time: 0.0362   lr: 0.0001  max_mem: 29900M
[08/21 20:02:00] d2.utils.events INFO:  eta: 0:02:58  iter: 819  total_loss: 15.67  loss_ce: 0.1595  loss_mask: 0.3768  loss_dice: 0.9815  loss_ce_0: 0.1656  loss_mask_0: 0.4175  loss_dice_0: 1.104  loss_ce_1: 0.2041  loss_mask_1: 0.3924  loss_dice_1: 1.066  loss_ce_2: 0.1873  loss_mask_2: 0.3785  loss_dice_2: 1.009  loss_ce_3: 0.1566  loss_mask_3: 0.3767  loss_dice_3: 0.9863  loss_ce_4: 0.1672  loss_mask_4: 0.3731  loss_dice_4: 0.9797  loss_ce_5: 0.1657  loss_mask_5: 0.3762  loss_dice_5: 1.001  loss_ce_6: 0.1688  loss_mask_6: 0.372  loss_dice_6: 0.9994  loss_ce_7: 0.1587  loss_mask_7: 0.3751  loss_dice_7: 0.9764  loss_ce_8: 0.1482  loss_mask_8: 0.3762  loss_dice_8: 1.005    time: 0.9958  last_time: 0.9994  data_time: 0.0351  last_data_time: 0.0349   lr: 0.0001  max_mem: 29900M
[08/21 20:02:21] d2.utils.events INFO:  eta: 0:02:38  iter: 839  total_loss: 14.81  loss_ce: 0.1597  loss_mask: 0.3676  loss_dice: 0.9365  loss_ce_0: 0.1684  loss_mask_0: 0.4158  loss_dice_0: 1.031  loss_ce_1: 0.2137  loss_mask_1: 0.3845  loss_dice_1: 1.038  loss_ce_2: 0.2085  loss_mask_2: 0.3721  loss_dice_2: 0.9923  loss_ce_3: 0.1768  loss_mask_3: 0.3732  loss_dice_3: 0.9538  loss_ce_4: 0.1875  loss_mask_4: 0.3743  loss_dice_4: 0.9583  loss_ce_5: 0.1931  loss_mask_5: 0.3771  loss_dice_5: 0.9532  loss_ce_6: 0.1715  loss_mask_6: 0.3707  loss_dice_6: 0.9613  loss_ce_7: 0.1634  loss_mask_7: 0.3739  loss_dice_7: 0.9284  loss_ce_8: 0.1568  loss_mask_8: 0.3675  loss_dice_8: 0.9439    time: 0.9958  last_time: 0.9877  data_time: 0.0357  last_data_time: 0.0343   lr: 0.0001  max_mem: 29900M
[08/21 20:02:41] d2.utils.events INFO:  eta: 0:02:19  iter: 859  total_loss: 15.78  loss_ce: 0.1647  loss_mask: 0.3699  loss_dice: 0.9907  loss_ce_0: 0.1744  loss_mask_0: 0.4108  loss_dice_0: 1.085  loss_ce_1: 0.2085  loss_mask_1: 0.4026  loss_dice_1: 1.043  loss_ce_2: 0.2113  loss_mask_2: 0.3846  loss_dice_2: 1.024  loss_ce_3: 0.2005  loss_mask_3: 0.3683  loss_dice_3: 1.011  loss_ce_4: 0.1828  loss_mask_4: 0.364  loss_dice_4: 1.012  loss_ce_5: 0.1753  loss_mask_5: 0.3677  loss_dice_5: 1.008  loss_ce_6: 0.1845  loss_mask_6: 0.3614  loss_dice_6: 0.9826  loss_ce_7: 0.1666  loss_mask_7: 0.3644  loss_dice_7: 1.009  loss_ce_8: 0.1745  loss_mask_8: 0.3675  loss_dice_8: 1.004    time: 0.9959  last_time: 0.9907  data_time: 0.0356  last_data_time: 0.0342   lr: 0.0001  max_mem: 29900M
[08/21 20:03:01] d2.utils.events INFO:  eta: 0:01:59  iter: 879  total_loss: 15.68  loss_ce: 0.1802  loss_mask: 0.3864  loss_dice: 0.9515  loss_ce_0: 0.1792  loss_mask_0: 0.4274  loss_dice_0: 1.082  loss_ce_1: 0.1832  loss_mask_1: 0.4049  loss_dice_1: 1.039  loss_ce_2: 0.1979  loss_mask_2: 0.3834  loss_dice_2: 0.9709  loss_ce_3: 0.1884  loss_mask_3: 0.3843  loss_dice_3: 1.002  loss_ce_4: 0.1915  loss_mask_4: 0.3722  loss_dice_4: 0.9647  loss_ce_5: 0.2055  loss_mask_5: 0.3766  loss_dice_5: 0.9562  loss_ce_6: 0.2026  loss_mask_6: 0.3791  loss_dice_6: 0.9531  loss_ce_7: 0.197  loss_mask_7: 0.3726  loss_dice_7: 0.9693  loss_ce_8: 0.181  loss_mask_8: 0.3732  loss_dice_8: 0.9595    time: 0.9960  last_time: 0.9909  data_time: 0.0364  last_data_time: 0.0355   lr: 0.0001  max_mem: 29900M
[08/21 20:03:21] d2.utils.events INFO:  eta: 0:01:39  iter: 899  total_loss: 15.32  loss_ce: 0.1421  loss_mask: 0.382  loss_dice: 0.9276  loss_ce_0: 0.1866  loss_mask_0: 0.4138  loss_dice_0: 1.042  loss_ce_1: 0.2051  loss_mask_1: 0.3955  loss_dice_1: 0.9954  loss_ce_2: 0.1986  loss_mask_2: 0.3847  loss_dice_2: 0.966  loss_ce_3: 0.1599  loss_mask_3: 0.3762  loss_dice_3: 0.9562  loss_ce_4: 0.142  loss_mask_4: 0.3795  loss_dice_4: 0.9367  loss_ce_5: 0.1554  loss_mask_5: 0.3817  loss_dice_5: 0.9383  loss_ce_6: 0.1431  loss_mask_6: 0.3818  loss_dice_6: 0.9211  loss_ce_7: 0.1399  loss_mask_7: 0.383  loss_dice_7: 0.9362  loss_ce_8: 0.1428  loss_mask_8: 0.3805  loss_dice_8: 0.9218    time: 0.9959  last_time: 0.9768  data_time: 0.0352  last_data_time: 0.0354   lr: 0.0001  max_mem: 29900M
[08/21 20:03:41] d2.utils.events INFO:  eta: 0:01:19  iter: 919  total_loss: 14.7  loss_ce: 0.1666  loss_mask: 0.3683  loss_dice: 0.9431  loss_ce_0: 0.1496  loss_mask_0: 0.4106  loss_dice_0: 1.057  loss_ce_1: 0.1645  loss_mask_1: 0.3937  loss_dice_1: 1.011  loss_ce_2: 0.1689  loss_mask_2: 0.3729  loss_dice_2: 0.9676  loss_ce_3: 0.1825  loss_mask_3: 0.3825  loss_dice_3: 0.9537  loss_ce_4: 0.1699  loss_mask_4: 0.3796  loss_dice_4: 0.9498  loss_ce_5: 0.1545  loss_mask_5: 0.3797  loss_dice_5: 0.9446  loss_ce_6: 0.1464  loss_mask_6: 0.3767  loss_dice_6: 0.9369  loss_ce_7: 0.149  loss_mask_7: 0.374  loss_dice_7: 0.9341  loss_ce_8: 0.1584  loss_mask_8: 0.3677  loss_dice_8: 0.9462    time: 0.9961  last_time: 0.9988  data_time: 0.0350  last_data_time: 0.0326   lr: 0.0001  max_mem: 29900M
[08/21 20:04:01] d2.utils.events INFO:  eta: 0:00:59  iter: 939  total_loss: 15.76  loss_ce: 0.1598  loss_mask: 0.3792  loss_dice: 0.9414  loss_ce_0: 0.1835  loss_mask_0: 0.4035  loss_dice_0: 1.088  loss_ce_1: 0.1895  loss_mask_1: 0.3758  loss_dice_1: 1.02  loss_ce_2: 0.1824  loss_mask_2: 0.3823  loss_dice_2: 0.9706  loss_ce_3: 0.1786  loss_mask_3: 0.3767  loss_dice_3: 0.9642  loss_ce_4: 0.1834  loss_mask_4: 0.3811  loss_dice_4: 0.969  loss_ce_5: 0.1686  loss_mask_5: 0.3731  loss_dice_5: 0.9792  loss_ce_6: 0.1541  loss_mask_6: 0.3754  loss_dice_6: 0.9763  loss_ce_7: 0.1626  loss_mask_7: 0.3789  loss_dice_7: 0.9616  loss_ce_8: 0.1624  loss_mask_8: 0.3756  loss_dice_8: 0.9487    time: 0.9963  last_time: 1.0028  data_time: 0.0361  last_data_time: 0.0364   lr: 0.0001  max_mem: 29900M
[08/21 20:04:21] d2.utils.events INFO:  eta: 0:00:39  iter: 959  total_loss: 15.5  loss_ce: 0.1696  loss_mask: 0.3726  loss_dice: 0.9389  loss_ce_0: 0.1839  loss_mask_0: 0.4179  loss_dice_0: 1.063  loss_ce_1: 0.1933  loss_mask_1: 0.3884  loss_dice_1: 0.9728  loss_ce_2: 0.1971  loss_mask_2: 0.3874  loss_dice_2: 0.9541  loss_ce_3: 0.2101  loss_mask_3: 0.3913  loss_dice_3: 0.9417  loss_ce_4: 0.1781  loss_mask_4: 0.3922  loss_dice_4: 0.9525  loss_ce_5: 0.2055  loss_mask_5: 0.3769  loss_dice_5: 0.9533  loss_ce_6: 0.1843  loss_mask_6: 0.3678  loss_dice_6: 0.9173  loss_ce_7: 0.1806  loss_mask_7: 0.3715  loss_dice_7: 0.9381  loss_ce_8: 0.1825  loss_mask_8: 0.3703  loss_dice_8: 0.9315    time: 0.9963  last_time: 0.9870  data_time: 0.0354  last_data_time: 0.0331   lr: 0.0001  max_mem: 29900M
[08/21 20:04:41] d2.utils.events INFO:  eta: 0:00:19  iter: 979  total_loss: 15.61  loss_ce: 0.1788  loss_mask: 0.395  loss_dice: 0.9253  loss_ce_0: 0.1978  loss_mask_0: 0.4259  loss_dice_0: 1.066  loss_ce_1: 0.2096  loss_mask_1: 0.4092  loss_dice_1: 1.022  loss_ce_2: 0.1913  loss_mask_2: 0.3904  loss_dice_2: 0.9662  loss_ce_3: 0.2023  loss_mask_3: 0.401  loss_dice_3: 0.9736  loss_ce_4: 0.1786  loss_mask_4: 0.4013  loss_dice_4: 0.9631  loss_ce_5: 0.1819  loss_mask_5: 0.3992  loss_dice_5: 0.9577  loss_ce_6: 0.1812  loss_mask_6: 0.3957  loss_dice_6: 0.9452  loss_ce_7: 0.1851  loss_mask_7: 0.3993  loss_dice_7: 0.9687  loss_ce_8: 0.1931  loss_mask_8: 0.3925  loss_dice_8: 0.9363    time: 0.9964  last_time: 0.9861  data_time: 0.0356  last_data_time: 0.0353   lr: 0.0001  max_mem: 29900M
[08/21 20:05:01] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Normal/008_1000/model_final.pth
[08/21 20:05:05] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 15.38  loss_ce: 0.172  loss_mask: 0.3729  loss_dice: 0.9392  loss_ce_0: 0.1677  loss_mask_0: 0.4152  loss_dice_0: 1.083  loss_ce_1: 0.1751  loss_mask_1: 0.3867  loss_dice_1: 1.001  loss_ce_2: 0.1717  loss_mask_2: 0.3839  loss_dice_2: 0.9579  loss_ce_3: 0.1656  loss_mask_3: 0.3787  loss_dice_3: 0.9628  loss_ce_4: 0.1583  loss_mask_4: 0.3797  loss_dice_4: 0.9486  loss_ce_5: 0.154  loss_mask_5: 0.3711  loss_dice_5: 0.9624  loss_ce_6: 0.1637  loss_mask_6: 0.3726  loss_dice_6: 0.9687  loss_ce_7: 0.1665  loss_mask_7: 0.3728  loss_dice_7: 0.9329  loss_ce_8: 0.1663  loss_mask_8: 0.3745  loss_dice_8: 0.9454    time: 0.9966  last_time: 1.0104  data_time: 0.0365  last_data_time: 0.0395   lr: 0.0001  max_mem: 29900M
[08/21 20:05:05] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:16:34 (0.9966 s / it)
[08/21 20:05:05] d2.engine.hooks INFO: Total training time: 0:16:58 (0:00:23 on hooks)
[08/21 20:05:05] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/21 20:05:05] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/21 20:05:05] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/21 20:05:05] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/21 20:05:05] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/21 20:05:05] d2.evaluation.evaluator INFO: Start inference on 500 batches
[08/21 20:05:10] d2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0038 s/iter. Inference: 0.2217 s/iter. Eval: 0.1048 s/iter. Total: 0.3304 s/iter. ETA=0:02:41
[08/21 20:05:16] d2.evaluation.evaluator INFO: Inference done 26/500. Dataloading: 0.0044 s/iter. Inference: 0.2328 s/iter. Eval: 0.1079 s/iter. Total: 0.3452 s/iter. ETA=0:02:43
[08/21 20:05:21] d2.evaluation.evaluator INFO: Inference done 41/500. Dataloading: 0.0045 s/iter. Inference: 0.2357 s/iter. Eval: 0.1085 s/iter. Total: 0.3488 s/iter. ETA=0:02:40
[08/21 20:05:26] d2.evaluation.evaluator INFO: Inference done 56/500. Dataloading: 0.0045 s/iter. Inference: 0.2315 s/iter. Eval: 0.1083 s/iter. Total: 0.3445 s/iter. ETA=0:02:32
[08/21 20:05:31] d2.evaluation.evaluator INFO: Inference done 72/500. Dataloading: 0.0045 s/iter. Inference: 0.2279 s/iter. Eval: 0.1075 s/iter. Total: 0.3400 s/iter. ETA=0:02:25
[08/21 20:05:36] d2.evaluation.evaluator INFO: Inference done 88/500. Dataloading: 0.0044 s/iter. Inference: 0.2258 s/iter. Eval: 0.1073 s/iter. Total: 0.3377 s/iter. ETA=0:02:19
[08/21 20:05:42] d2.evaluation.evaluator INFO: Inference done 104/500. Dataloading: 0.0044 s/iter. Inference: 0.2243 s/iter. Eval: 0.1073 s/iter. Total: 0.3361 s/iter. ETA=0:02:13
[08/21 20:05:47] d2.evaluation.evaluator INFO: Inference done 119/500. Dataloading: 0.0044 s/iter. Inference: 0.2248 s/iter. Eval: 0.1073 s/iter. Total: 0.3365 s/iter. ETA=0:02:08
[08/21 20:05:52] d2.evaluation.evaluator INFO: Inference done 134/500. Dataloading: 0.0044 s/iter. Inference: 0.2259 s/iter. Eval: 0.1070 s/iter. Total: 0.3374 s/iter. ETA=0:02:03
[08/21 20:05:57] d2.evaluation.evaluator INFO: Inference done 150/500. Dataloading: 0.0044 s/iter. Inference: 0.2252 s/iter. Eval: 0.1068 s/iter. Total: 0.3366 s/iter. ETA=0:01:57
[08/21 20:06:02] d2.evaluation.evaluator INFO: Inference done 165/500. Dataloading: 0.0044 s/iter. Inference: 0.2262 s/iter. Eval: 0.1067 s/iter. Total: 0.3375 s/iter. ETA=0:01:53
[08/21 20:06:08] d2.evaluation.evaluator INFO: Inference done 181/500. Dataloading: 0.0044 s/iter. Inference: 0.2256 s/iter. Eval: 0.1066 s/iter. Total: 0.3367 s/iter. ETA=0:01:47
[08/21 20:06:13] d2.evaluation.evaluator INFO: Inference done 196/500. Dataloading: 0.0044 s/iter. Inference: 0.2266 s/iter. Eval: 0.1065 s/iter. Total: 0.3376 s/iter. ETA=0:01:42
[08/21 20:06:18] d2.evaluation.evaluator INFO: Inference done 212/500. Dataloading: 0.0044 s/iter. Inference: 0.2261 s/iter. Eval: 0.1062 s/iter. Total: 0.3369 s/iter. ETA=0:01:37
[08/21 20:06:23] d2.evaluation.evaluator INFO: Inference done 228/500. Dataloading: 0.0044 s/iter. Inference: 0.2254 s/iter. Eval: 0.1061 s/iter. Total: 0.3360 s/iter. ETA=0:01:31
[08/21 20:06:28] d2.evaluation.evaluator INFO: Inference done 243/500. Dataloading: 0.0045 s/iter. Inference: 0.2257 s/iter. Eval: 0.1061 s/iter. Total: 0.3364 s/iter. ETA=0:01:26
[08/21 20:06:33] d2.evaluation.evaluator INFO: Inference done 258/500. Dataloading: 0.0045 s/iter. Inference: 0.2260 s/iter. Eval: 0.1061 s/iter. Total: 0.3367 s/iter. ETA=0:01:21
[08/21 20:06:39] d2.evaluation.evaluator INFO: Inference done 273/500. Dataloading: 0.0044 s/iter. Inference: 0.2262 s/iter. Eval: 0.1061 s/iter. Total: 0.3368 s/iter. ETA=0:01:16
[08/21 20:06:44] d2.evaluation.evaluator INFO: Inference done 289/500. Dataloading: 0.0044 s/iter. Inference: 0.2258 s/iter. Eval: 0.1061 s/iter. Total: 0.3364 s/iter. ETA=0:01:10
[08/21 20:06:49] d2.evaluation.evaluator INFO: Inference done 304/500. Dataloading: 0.0044 s/iter. Inference: 0.2259 s/iter. Eval: 0.1061 s/iter. Total: 0.3366 s/iter. ETA=0:01:05
[08/21 20:06:54] d2.evaluation.evaluator INFO: Inference done 319/500. Dataloading: 0.0044 s/iter. Inference: 0.2259 s/iter. Eval: 0.1060 s/iter. Total: 0.3365 s/iter. ETA=0:01:00
[08/21 20:06:59] d2.evaluation.evaluator INFO: Inference done 334/500. Dataloading: 0.0044 s/iter. Inference: 0.2267 s/iter. Eval: 0.1060 s/iter. Total: 0.3372 s/iter. ETA=0:00:55
[08/21 20:07:05] d2.evaluation.evaluator INFO: Inference done 350/500. Dataloading: 0.0044 s/iter. Inference: 0.2263 s/iter. Eval: 0.1060 s/iter. Total: 0.3369 s/iter. ETA=0:00:50
[08/21 20:07:10] d2.evaluation.evaluator INFO: Inference done 365/500. Dataloading: 0.0044 s/iter. Inference: 0.2264 s/iter. Eval: 0.1060 s/iter. Total: 0.3369 s/iter. ETA=0:00:45
[08/21 20:07:15] d2.evaluation.evaluator INFO: Inference done 381/500. Dataloading: 0.0044 s/iter. Inference: 0.2259 s/iter. Eval: 0.1060 s/iter. Total: 0.3365 s/iter. ETA=0:00:40
[08/21 20:07:20] d2.evaluation.evaluator INFO: Inference done 396/500. Dataloading: 0.0044 s/iter. Inference: 0.2259 s/iter. Eval: 0.1061 s/iter. Total: 0.3365 s/iter. ETA=0:00:34
[08/21 20:07:25] d2.evaluation.evaluator INFO: Inference done 412/500. Dataloading: 0.0044 s/iter. Inference: 0.2256 s/iter. Eval: 0.1061 s/iter. Total: 0.3362 s/iter. ETA=0:00:29
[08/21 20:07:30] d2.evaluation.evaluator INFO: Inference done 427/500. Dataloading: 0.0044 s/iter. Inference: 0.2256 s/iter. Eval: 0.1061 s/iter. Total: 0.3362 s/iter. ETA=0:00:24
[08/21 20:07:35] d2.evaluation.evaluator INFO: Inference done 442/500. Dataloading: 0.0044 s/iter. Inference: 0.2256 s/iter. Eval: 0.1061 s/iter. Total: 0.3362 s/iter. ETA=0:00:19
[08/21 20:07:40] d2.evaluation.evaluator INFO: Inference done 458/500. Dataloading: 0.0044 s/iter. Inference: 0.2253 s/iter. Eval: 0.1061 s/iter. Total: 0.3358 s/iter. ETA=0:00:14
[08/21 20:07:46] d2.evaluation.evaluator INFO: Inference done 474/500. Dataloading: 0.0044 s/iter. Inference: 0.2250 s/iter. Eval: 0.1060 s/iter. Total: 0.3355 s/iter. ETA=0:00:08
[08/21 20:07:51] d2.evaluation.evaluator INFO: Inference done 489/500. Dataloading: 0.0044 s/iter. Inference: 0.2251 s/iter. Eval: 0.1060 s/iter. Total: 0.3356 s/iter. ETA=0:00:03
[08/21 20:07:54] d2.evaluation.evaluator INFO: Total inference time: 0:02:46.194313 (0.335746 s / iter per device, on 1 devices)
[08/21 20:07:54] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:01:51 (0.225047 s / iter per device, on 1 devices)
[08/21 20:07:54] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evaljeiy4i3z ...
[08/21 20:08:06] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 37.775 | 47.133 | 45.514 |      19       |
| Things | 0.000  | 0.000  | 0.000  |       8       |
| Stuff  | 65.247 | 81.411 | 78.614 |      11       |
[08/21 20:08:06] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.259 | 97.561 | 99.690 |     Stuff     |
| class_8  | 72.363 | 83.846 | 86.304 |     Stuff     |
| class_11 | 87.321 | 89.046 | 98.063 |     Stuff     |
| class_12 | 46.351 | 79.489 | 58.311 |     Stuff     |
| class_13 | 39.062 | 75.120 | 52.000 |     Stuff     |
| class_17 | 47.223 | 65.318 | 72.297 |     Stuff     |
| class_19 | 48.400 | 69.058 | 70.085 |     Stuff     |
| class_20 | 66.703 | 77.876 | 85.653 |     Stuff     |
| class_21 | 88.909 | 89.646 | 99.177 |     Stuff     |
| class_22 | 36.991 | 76.936 | 48.081 |     Stuff     |
| class_23 | 87.136 | 91.628 | 95.097 |     Stuff     |
| class_24 | 0.000  | 0.000  | 0.000  |    Things     |
| class_25 | 0.000  | 0.000  | 0.000  |    Things     |
| class_26 | 0.000  | 0.000  | 0.000  |    Things     |
| class_27 | 0.000  | 0.000  | 0.000  |    Things     |
| class_28 | 0.000  | 0.000  | 0.000  |    Things     |
| class_31 | 0.000  | 0.000  | 0.000  |    Things     |
| class_32 | 0.000  | 0.000  | 0.000  |    Things     |
| class_33 | 0.000  | 0.000  | 0.000  |    Things     |
[08/21 20:08:06] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[08/21 20:08:06] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/21 20:08:06] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/21 20:08:06] d2.evaluation.testing INFO: copypaste: 37.7746,47.1329,45.5136,0.0000,0.0000,0.0000,65.2470,81.4114,78.6143,97.2587,97.5614,99.6898,72.3628,83.8461,86.3043,87.3213,89.0459,98.0632,46.3508,79.4894,58.3106,39.0622,75.1197,52.0000,47.2228,65.3181,72.2966,48.3996,69.0580,70.0855,66.7028,77.8755,85.6531,88.9087,89.6465,99.1770,36.9915,76.9361,48.0808,87.1358,91.6284,95.0969,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000
[08/29 08:55:14] detectron2 INFO: Rank of current process: 0. World size: 1
[08/29 08:55:15] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA L40S (arch=8.9)
Driver version                   545.29.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/29 08:55:15] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_exp_008_19.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/29 08:55:15] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_exp_008_19.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/29 08:55:15] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/29 08:55:15] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/config.yaml
[08/29 08:55:15] d2.utils.env INFO: Using a generated random seed 17925645
[08/29 08:55:19] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/29 08:55:19] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/29 08:55:19] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/29 08:55:19] d2.data.build INFO: Using training sampler TrainingSampler
[08/29 08:55:19] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/29 08:55:19] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/29 08:55:19] d2.data.common INFO: Serialized dataset takes 2.16 MiB
[08/29 08:55:19] d2.data.build INFO: Making batched data loader with batch_size=8
[08/29 08:55:19] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/29 08:55:19] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth ...
[08/29 08:55:19] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth ...
[08/29 08:55:19] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[08/29 08:55:19] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mcriterion.empty_weight[0m
[08/29 08:55:19] d2.engine.train_loop INFO: Starting training from iteration 0
[08/29 08:55:41] d2.utils.events INFO:  eta: 0:14:28  iter: 19  total_loss: 28.56  loss_ce: 0.6383  loss_mask: 0.6301  loss_dice: 1.435  loss_ce_0: 0.7122  loss_mask_0: 0.7156  loss_dice_0: 1.717  loss_ce_1: 0.7408  loss_mask_1: 0.6788  loss_dice_1: 1.657  loss_ce_2: 0.7178  loss_mask_2: 0.6726  loss_dice_2: 1.591  loss_ce_3: 0.6463  loss_mask_3: 0.6455  loss_dice_3: 1.489  loss_ce_4: 0.6452  loss_mask_4: 0.6535  loss_dice_4: 1.437  loss_ce_5: 0.6467  loss_mask_5: 0.636  loss_dice_5: 1.439  loss_ce_6: 0.6062  loss_mask_6: 0.6271  loss_dice_6: 1.43  loss_ce_7: 0.6411  loss_mask_7: 0.6242  loss_dice_7: 1.443  loss_ce_8: 0.6423  loss_mask_8: 0.6254  loss_dice_8: 1.437    time: 0.8994  last_time: 0.8904  data_time: 0.0506  last_data_time: 0.0280   lr: 0.0001  max_mem: 29896M
[08/29 08:55:59] d2.utils.events INFO:  eta: 0:14:08  iter: 39  total_loss: 22.22  loss_ce: 0.3093  loss_mask: 0.5268  loss_dice: 1.276  loss_ce_0: 0.3506  loss_mask_0: 0.6149  loss_dice_0: 1.504  loss_ce_1: 0.3807  loss_mask_1: 0.5778  loss_dice_1: 1.381  loss_ce_2: 0.343  loss_mask_2: 0.5421  loss_dice_2: 1.342  loss_ce_3: 0.3234  loss_mask_3: 0.5396  loss_dice_3: 1.282  loss_ce_4: 0.311  loss_mask_4: 0.5283  loss_dice_4: 1.279  loss_ce_5: 0.298  loss_mask_5: 0.5367  loss_dice_5: 1.274  loss_ce_6: 0.3455  loss_mask_6: 0.5314  loss_dice_6: 1.255  loss_ce_7: 0.304  loss_mask_7: 0.5272  loss_dice_7: 1.272  loss_ce_8: 0.2836  loss_mask_8: 0.5327  loss_dice_8: 1.268    time: 0.8917  last_time: 0.8860  data_time: 0.0232  last_data_time: 0.0213   lr: 0.0001  max_mem: 29896M
[08/29 08:56:17] d2.utils.events INFO:  eta: 0:13:50  iter: 59  total_loss: 19.87  loss_ce: 0.2526  loss_mask: 0.4901  loss_dice: 1.162  loss_ce_0: 0.2744  loss_mask_0: 0.5326  loss_dice_0: 1.359  loss_ce_1: 0.3509  loss_mask_1: 0.5163  loss_dice_1: 1.284  loss_ce_2: 0.3216  loss_mask_2: 0.4947  loss_dice_2: 1.244  loss_ce_3: 0.3145  loss_mask_3: 0.4947  loss_dice_3: 1.176  loss_ce_4: 0.3012  loss_mask_4: 0.4989  loss_dice_4: 1.176  loss_ce_5: 0.2912  loss_mask_5: 0.4902  loss_dice_5: 1.169  loss_ce_6: 0.3079  loss_mask_6: 0.4822  loss_dice_6: 1.147  loss_ce_7: 0.2654  loss_mask_7: 0.4833  loss_dice_7: 1.171  loss_ce_8: 0.2629  loss_mask_8: 0.4846  loss_dice_8: 1.176    time: 0.8897  last_time: 0.8880  data_time: 0.0232  last_data_time: 0.0225   lr: 0.0001  max_mem: 29897M
[08/29 08:56:35] d2.utils.events INFO:  eta: 0:13:33  iter: 79  total_loss: 19.75  loss_ce: 0.2481  loss_mask: 0.4768  loss_dice: 1.179  loss_ce_0: 0.2649  loss_mask_0: 0.5511  loss_dice_0: 1.366  loss_ce_1: 0.2945  loss_mask_1: 0.4954  loss_dice_1: 1.28  loss_ce_2: 0.2771  loss_mask_2: 0.4762  loss_dice_2: 1.248  loss_ce_3: 0.2762  loss_mask_3: 0.4785  loss_dice_3: 1.193  loss_ce_4: 0.252  loss_mask_4: 0.4711  loss_dice_4: 1.184  loss_ce_5: 0.2424  loss_mask_5: 0.4797  loss_dice_5: 1.19  loss_ce_6: 0.2444  loss_mask_6: 0.4702  loss_dice_6: 1.162  loss_ce_7: 0.2534  loss_mask_7: 0.4795  loss_dice_7: 1.168  loss_ce_8: 0.2425  loss_mask_8: 0.4758  loss_dice_8: 1.202    time: 0.8906  last_time: 0.8771  data_time: 0.0241  last_data_time: 0.0224   lr: 0.0001  max_mem: 29897M
[08/29 08:56:53] d2.utils.events INFO:  eta: 0:13:16  iter: 99  total_loss: 19.04  loss_ce: 0.2332  loss_mask: 0.4684  loss_dice: 1.125  loss_ce_0: 0.2225  loss_mask_0: 0.515  loss_dice_0: 1.277  loss_ce_1: 0.2699  loss_mask_1: 0.4926  loss_dice_1: 1.206  loss_ce_2: 0.2742  loss_mask_2: 0.4661  loss_dice_2: 1.144  loss_ce_3: 0.2664  loss_mask_3: 0.4688  loss_dice_3: 1.146  loss_ce_4: 0.2362  loss_mask_4: 0.4601  loss_dice_4: 1.153  loss_ce_5: 0.2462  loss_mask_5: 0.4652  loss_dice_5: 1.175  loss_ce_6: 0.2324  loss_mask_6: 0.4704  loss_dice_6: 1.123  loss_ce_7: 0.2566  loss_mask_7: 0.4635  loss_dice_7: 1.121  loss_ce_8: 0.2334  loss_mask_8: 0.4538  loss_dice_8: 1.143    time: 0.8910  last_time: 0.8836  data_time: 0.0248  last_data_time: 0.0235   lr: 0.0001  max_mem: 29897M
[08/29 08:57:11] d2.utils.events INFO:  eta: 0:12:59  iter: 119  total_loss: 18.55  loss_ce: 0.2142  loss_mask: 0.4522  loss_dice: 1.089  loss_ce_0: 0.189  loss_mask_0: 0.5005  loss_dice_0: 1.281  loss_ce_1: 0.2436  loss_mask_1: 0.478  loss_dice_1: 1.206  loss_ce_2: 0.2393  loss_mask_2: 0.4706  loss_dice_2: 1.168  loss_ce_3: 0.2218  loss_mask_3: 0.4672  loss_dice_3: 1.124  loss_ce_4: 0.2198  loss_mask_4: 0.4693  loss_dice_4: 1.145  loss_ce_5: 0.2251  loss_mask_5: 0.4648  loss_dice_5: 1.134  loss_ce_6: 0.2225  loss_mask_6: 0.4597  loss_dice_6: 1.124  loss_ce_7: 0.2049  loss_mask_7: 0.464  loss_dice_7: 1.121  loss_ce_8: 0.2112  loss_mask_8: 0.4522  loss_dice_8: 1.121    time: 0.8909  last_time: 0.9022  data_time: 0.0233  last_data_time: 0.0226   lr: 0.0001  max_mem: 29897M
[08/29 08:57:29] d2.utils.events INFO:  eta: 0:12:41  iter: 139  total_loss: 18.79  loss_ce: 0.2695  loss_mask: 0.4479  loss_dice: 1.122  loss_ce_0: 0.2173  loss_mask_0: 0.4987  loss_dice_0: 1.302  loss_ce_1: 0.2711  loss_mask_1: 0.4744  loss_dice_1: 1.237  loss_ce_2: 0.2548  loss_mask_2: 0.4655  loss_dice_2: 1.19  loss_ce_3: 0.2697  loss_mask_3: 0.4479  loss_dice_3: 1.149  loss_ce_4: 0.254  loss_mask_4: 0.4518  loss_dice_4: 1.149  loss_ce_5: 0.2682  loss_mask_5: 0.4502  loss_dice_5: 1.134  loss_ce_6: 0.2624  loss_mask_6: 0.4436  loss_dice_6: 1.11  loss_ce_7: 0.2581  loss_mask_7: 0.453  loss_dice_7: 1.12  loss_ce_8: 0.2631  loss_mask_8: 0.4501  loss_dice_8: 1.1    time: 0.8907  last_time: 0.8848  data_time: 0.0248  last_data_time: 0.0232   lr: 0.0001  max_mem: 29897M
[08/29 08:57:46] d2.utils.events INFO:  eta: 0:12:24  iter: 159  total_loss: 18.19  loss_ce: 0.2352  loss_mask: 0.4491  loss_dice: 1.058  loss_ce_0: 0.2078  loss_mask_0: 0.4969  loss_dice_0: 1.239  loss_ce_1: 0.2762  loss_mask_1: 0.4752  loss_dice_1: 1.175  loss_ce_2: 0.249  loss_mask_2: 0.4666  loss_dice_2: 1.134  loss_ce_3: 0.2594  loss_mask_3: 0.4591  loss_dice_3: 1.06  loss_ce_4: 0.257  loss_mask_4: 0.4652  loss_dice_4: 1.09  loss_ce_5: 0.2398  loss_mask_5: 0.4562  loss_dice_5: 1.064  loss_ce_6: 0.2477  loss_mask_6: 0.4485  loss_dice_6: 1.059  loss_ce_7: 0.2268  loss_mask_7: 0.4485  loss_dice_7: 1.079  loss_ce_8: 0.2208  loss_mask_8: 0.4497  loss_dice_8: 1.043    time: 0.8910  last_time: 0.8871  data_time: 0.0241  last_data_time: 0.0236   lr: 0.0001  max_mem: 29897M
[08/29 08:58:04] d2.utils.events INFO:  eta: 0:12:07  iter: 179  total_loss: 17.69  loss_ce: 0.194  loss_mask: 0.4457  loss_dice: 1.078  loss_ce_0: 0.2124  loss_mask_0: 0.4922  loss_dice_0: 1.224  loss_ce_1: 0.2205  loss_mask_1: 0.4709  loss_dice_1: 1.176  loss_ce_2: 0.2053  loss_mask_2: 0.4489  loss_dice_2: 1.102  loss_ce_3: 0.1889  loss_mask_3: 0.451  loss_dice_3: 1.108  loss_ce_4: 0.2072  loss_mask_4: 0.4415  loss_dice_4: 1.083  loss_ce_5: 0.1792  loss_mask_5: 0.437  loss_dice_5: 1.105  loss_ce_6: 0.1933  loss_mask_6: 0.4442  loss_dice_6: 1.064  loss_ce_7: 0.189  loss_mask_7: 0.4391  loss_dice_7: 1.078  loss_ce_8: 0.1823  loss_mask_8: 0.4438  loss_dice_8: 1.086    time: 0.8912  last_time: 0.8976  data_time: 0.0259  last_data_time: 0.0259   lr: 0.0001  max_mem: 29897M
[08/29 08:58:22] d2.utils.events INFO:  eta: 0:11:49  iter: 199  total_loss: 18.18  loss_ce: 0.2484  loss_mask: 0.4571  loss_dice: 1.074  loss_ce_0: 0.1964  loss_mask_0: 0.5086  loss_dice_0: 1.232  loss_ce_1: 0.2586  loss_mask_1: 0.4682  loss_dice_1: 1.171  loss_ce_2: 0.264  loss_mask_2: 0.4556  loss_dice_2: 1.126  loss_ce_3: 0.257  loss_mask_3: 0.4551  loss_dice_3: 1.106  loss_ce_4: 0.2564  loss_mask_4: 0.4589  loss_dice_4: 1.113  loss_ce_5: 0.2412  loss_mask_5: 0.4572  loss_dice_5: 1.086  loss_ce_6: 0.2302  loss_mask_6: 0.4546  loss_dice_6: 1.071  loss_ce_7: 0.2266  loss_mask_7: 0.4589  loss_dice_7: 1.086  loss_ce_8: 0.2178  loss_mask_8: 0.4599  loss_dice_8: 1.077    time: 0.8911  last_time: 0.8929  data_time: 0.0242  last_data_time: 0.0249   lr: 0.0001  max_mem: 29897M
[08/29 08:58:40] d2.utils.events INFO:  eta: 0:11:31  iter: 219  total_loss: 17.2  loss_ce: 0.1887  loss_mask: 0.4544  loss_dice: 1.044  loss_ce_0: 0.1716  loss_mask_0: 0.4884  loss_dice_0: 1.195  loss_ce_1: 0.2115  loss_mask_1: 0.4597  loss_dice_1: 1.111  loss_ce_2: 0.2312  loss_mask_2: 0.453  loss_dice_2: 1.101  loss_ce_3: 0.2088  loss_mask_3: 0.4461  loss_dice_3: 1.076  loss_ce_4: 0.2131  loss_mask_4: 0.4451  loss_dice_4: 1.083  loss_ce_5: 0.2144  loss_mask_5: 0.4451  loss_dice_5: 1.053  loss_ce_6: 0.2054  loss_mask_6: 0.4443  loss_dice_6: 1.038  loss_ce_7: 0.2075  loss_mask_7: 0.4504  loss_dice_7: 1.059  loss_ce_8: 0.1797  loss_mask_8: 0.4542  loss_dice_8: 1.051    time: 0.8917  last_time: 0.8906  data_time: 0.0240  last_data_time: 0.0231   lr: 0.0001  max_mem: 29897M
[08/29 08:58:58] d2.utils.events INFO:  eta: 0:11:14  iter: 239  total_loss: 18.11  loss_ce: 0.1922  loss_mask: 0.4482  loss_dice: 1.062  loss_ce_0: 0.2153  loss_mask_0: 0.5027  loss_dice_0: 1.224  loss_ce_1: 0.2291  loss_mask_1: 0.48  loss_dice_1: 1.16  loss_ce_2: 0.2107  loss_mask_2: 0.4577  loss_dice_2: 1.108  loss_ce_3: 0.2024  loss_mask_3: 0.4595  loss_dice_3: 1.107  loss_ce_4: 0.191  loss_mask_4: 0.4527  loss_dice_4: 1.104  loss_ce_5: 0.1803  loss_mask_5: 0.4387  loss_dice_5: 1.069  loss_ce_6: 0.2072  loss_mask_6: 0.4524  loss_dice_6: 1.079  loss_ce_7: 0.1872  loss_mask_7: 0.4516  loss_dice_7: 1.098  loss_ce_8: 0.1815  loss_mask_8: 0.4511  loss_dice_8: 1.065    time: 0.8915  last_time: 0.8933  data_time: 0.0237  last_data_time: 0.0233   lr: 0.0001  max_mem: 29897M
[08/29 08:59:16] d2.utils.events INFO:  eta: 0:10:57  iter: 259  total_loss: 17.82  loss_ce: 0.2215  loss_mask: 0.4264  loss_dice: 1.054  loss_ce_0: 0.2091  loss_mask_0: 0.4666  loss_dice_0: 1.214  loss_ce_1: 0.273  loss_mask_1: 0.4271  loss_dice_1: 1.163  loss_ce_2: 0.2385  loss_mask_2: 0.4383  loss_dice_2: 1.102  loss_ce_3: 0.2532  loss_mask_3: 0.43  loss_dice_3: 1.089  loss_ce_4: 0.2177  loss_mask_4: 0.4239  loss_dice_4: 1.091  loss_ce_5: 0.2105  loss_mask_5: 0.4276  loss_dice_5: 1.09  loss_ce_6: 0.218  loss_mask_6: 0.4275  loss_dice_6: 1.09  loss_ce_7: 0.2048  loss_mask_7: 0.4266  loss_dice_7: 1.109  loss_ce_8: 0.2364  loss_mask_8: 0.4222  loss_dice_8: 1.073    time: 0.8916  last_time: 0.9006  data_time: 0.0245  last_data_time: 0.0286   lr: 0.0001  max_mem: 29897M
[08/29 08:59:34] d2.utils.events INFO:  eta: 0:10:39  iter: 279  total_loss: 17.88  loss_ce: 0.2276  loss_mask: 0.4092  loss_dice: 1.063  loss_ce_0: 0.2051  loss_mask_0: 0.4538  loss_dice_0: 1.235  loss_ce_1: 0.2621  loss_mask_1: 0.4206  loss_dice_1: 1.132  loss_ce_2: 0.2474  loss_mask_2: 0.4215  loss_dice_2: 1.107  loss_ce_3: 0.2498  loss_mask_3: 0.4149  loss_dice_3: 1.077  loss_ce_4: 0.2239  loss_mask_4: 0.4162  loss_dice_4: 1.09  loss_ce_5: 0.2509  loss_mask_5: 0.4052  loss_dice_5: 1.061  loss_ce_6: 0.2618  loss_mask_6: 0.4079  loss_dice_6: 1.066  loss_ce_7: 0.2221  loss_mask_7: 0.4031  loss_dice_7: 1.094  loss_ce_8: 0.2408  loss_mask_8: 0.404  loss_dice_8: 1.061    time: 0.8917  last_time: 0.9016  data_time: 0.0252  last_data_time: 0.0214   lr: 0.0001  max_mem: 29897M
[08/29 08:59:52] d2.utils.events INFO:  eta: 0:10:22  iter: 299  total_loss: 18.15  loss_ce: 0.208  loss_mask: 0.4171  loss_dice: 1.114  loss_ce_0: 0.2135  loss_mask_0: 0.4448  loss_dice_0: 1.25  loss_ce_1: 0.2416  loss_mask_1: 0.4342  loss_dice_1: 1.188  loss_ce_2: 0.2404  loss_mask_2: 0.4178  loss_dice_2: 1.15  loss_ce_3: 0.2368  loss_mask_3: 0.4143  loss_dice_3: 1.105  loss_ce_4: 0.245  loss_mask_4: 0.4151  loss_dice_4: 1.099  loss_ce_5: 0.2118  loss_mask_5: 0.4129  loss_dice_5: 1.087  loss_ce_6: 0.229  loss_mask_6: 0.4123  loss_dice_6: 1.107  loss_ce_7: 0.2314  loss_mask_7: 0.4092  loss_dice_7: 1.103  loss_ce_8: 0.2219  loss_mask_8: 0.4161  loss_dice_8: 1.077    time: 0.8922  last_time: 0.9207  data_time: 0.0258  last_data_time: 0.0240   lr: 0.0001  max_mem: 29897M
[08/29 09:00:10] d2.utils.events INFO:  eta: 0:10:04  iter: 319  total_loss: 17.67  loss_ce: 0.2256  loss_mask: 0.4096  loss_dice: 1.096  loss_ce_0: 0.2241  loss_mask_0: 0.4548  loss_dice_0: 1.24  loss_ce_1: 0.2621  loss_mask_1: 0.4175  loss_dice_1: 1.185  loss_ce_2: 0.2679  loss_mask_2: 0.425  loss_dice_2: 1.136  loss_ce_3: 0.2417  loss_mask_3: 0.4318  loss_dice_3: 1.12  loss_ce_4: 0.2381  loss_mask_4: 0.4264  loss_dice_4: 1.111  loss_ce_5: 0.2426  loss_mask_5: 0.4306  loss_dice_5: 1.105  loss_ce_6: 0.2188  loss_mask_6: 0.4217  loss_dice_6: 1.091  loss_ce_7: 0.2394  loss_mask_7: 0.4171  loss_dice_7: 1.095  loss_ce_8: 0.2092  loss_mask_8: 0.418  loss_dice_8: 1.095    time: 0.8926  last_time: 0.8893  data_time: 0.0254  last_data_time: 0.0225   lr: 0.0001  max_mem: 29897M
[08/29 09:00:28] d2.utils.events INFO:  eta: 0:09:46  iter: 339  total_loss: 17.94  loss_ce: 0.1938  loss_mask: 0.4134  loss_dice: 1.071  loss_ce_0: 0.1904  loss_mask_0: 0.4791  loss_dice_0: 1.206  loss_ce_1: 0.2184  loss_mask_1: 0.4337  loss_dice_1: 1.156  loss_ce_2: 0.2504  loss_mask_2: 0.4388  loss_dice_2: 1.121  loss_ce_3: 0.2282  loss_mask_3: 0.4288  loss_dice_3: 1.088  loss_ce_4: 0.2187  loss_mask_4: 0.4213  loss_dice_4: 1.087  loss_ce_5: 0.203  loss_mask_5: 0.4242  loss_dice_5: 1.093  loss_ce_6: 0.1926  loss_mask_6: 0.4165  loss_dice_6: 1.083  loss_ce_7: 0.2116  loss_mask_7: 0.4171  loss_dice_7: 1.073  loss_ce_8: 0.193  loss_mask_8: 0.4163  loss_dice_8: 1.095    time: 0.8926  last_time: 0.8814  data_time: 0.0246  last_data_time: 0.0230   lr: 0.0001  max_mem: 29897M
[08/29 09:00:46] d2.utils.events INFO:  eta: 0:09:29  iter: 359  total_loss: 16.92  loss_ce: 0.1991  loss_mask: 0.4158  loss_dice: 1.021  loss_ce_0: 0.184  loss_mask_0: 0.4864  loss_dice_0: 1.17  loss_ce_1: 0.2141  loss_mask_1: 0.4643  loss_dice_1: 1.117  loss_ce_2: 0.2334  loss_mask_2: 0.4376  loss_dice_2: 1.072  loss_ce_3: 0.2423  loss_mask_3: 0.4237  loss_dice_3: 1.07  loss_ce_4: 0.2148  loss_mask_4: 0.4214  loss_dice_4: 1.05  loss_ce_5: 0.2021  loss_mask_5: 0.4173  loss_dice_5: 1.024  loss_ce_6: 0.196  loss_mask_6: 0.416  loss_dice_6: 1.011  loss_ce_7: 0.2156  loss_mask_7: 0.4195  loss_dice_7: 1.023  loss_ce_8: 0.2222  loss_mask_8: 0.4167  loss_dice_8: 1.014    time: 0.8926  last_time: 0.8947  data_time: 0.0251  last_data_time: 0.0252   lr: 0.0001  max_mem: 29897M
[08/29 09:01:04] d2.utils.events INFO:  eta: 0:09:12  iter: 379  total_loss: 17.21  loss_ce: 0.1957  loss_mask: 0.3871  loss_dice: 1.034  loss_ce_0: 0.1977  loss_mask_0: 0.4319  loss_dice_0: 1.189  loss_ce_1: 0.2247  loss_mask_1: 0.4019  loss_dice_1: 1.149  loss_ce_2: 0.2015  loss_mask_2: 0.3944  loss_dice_2: 1.08  loss_ce_3: 0.2166  loss_mask_3: 0.3874  loss_dice_3: 1.077  loss_ce_4: 0.192  loss_mask_4: 0.3889  loss_dice_4: 1.056  loss_ce_5: 0.2043  loss_mask_5: 0.3867  loss_dice_5: 1.066  loss_ce_6: 0.1937  loss_mask_6: 0.3858  loss_dice_6: 1.051  loss_ce_7: 0.2098  loss_mask_7: 0.3782  loss_dice_7: 1.05  loss_ce_8: 0.1975  loss_mask_8: 0.3747  loss_dice_8: 1.038    time: 0.8931  last_time: 0.9006  data_time: 0.0241  last_data_time: 0.0255   lr: 0.0001  max_mem: 29897M
[08/29 09:01:22] d2.utils.events INFO:  eta: 0:08:54  iter: 399  total_loss: 16.63  loss_ce: 0.2042  loss_mask: 0.3748  loss_dice: 1.054  loss_ce_0: 0.2082  loss_mask_0: 0.4233  loss_dice_0: 1.158  loss_ce_1: 0.2622  loss_mask_1: 0.3921  loss_dice_1: 1.073  loss_ce_2: 0.2457  loss_mask_2: 0.3827  loss_dice_2: 1.06  loss_ce_3: 0.2159  loss_mask_3: 0.3828  loss_dice_3: 1.026  loss_ce_4: 0.2042  loss_mask_4: 0.3845  loss_dice_4: 1.027  loss_ce_5: 0.178  loss_mask_5: 0.377  loss_dice_5: 1.01  loss_ce_6: 0.2053  loss_mask_6: 0.3769  loss_dice_6: 1.017  loss_ce_7: 0.1891  loss_mask_7: 0.3768  loss_dice_7: 1.045  loss_ce_8: 0.1869  loss_mask_8: 0.3766  loss_dice_8: 1.023    time: 0.8936  last_time: 0.9054  data_time: 0.0259  last_data_time: 0.0255   lr: 0.0001  max_mem: 29897M
[08/29 09:01:40] d2.utils.events INFO:  eta: 0:08:36  iter: 419  total_loss: 16.4  loss_ce: 0.2096  loss_mask: 0.3907  loss_dice: 0.9869  loss_ce_0: 0.2144  loss_mask_0: 0.4251  loss_dice_0: 1.113  loss_ce_1: 0.2385  loss_mask_1: 0.4093  loss_dice_1: 1.053  loss_ce_2: 0.2543  loss_mask_2: 0.4107  loss_dice_2: 1.029  loss_ce_3: 0.2281  loss_mask_3: 0.3966  loss_dice_3: 0.9849  loss_ce_4: 0.2087  loss_mask_4: 0.4124  loss_dice_4: 0.9959  loss_ce_5: 0.2133  loss_mask_5: 0.4018  loss_dice_5: 0.9879  loss_ce_6: 0.218  loss_mask_6: 0.3901  loss_dice_6: 0.9957  loss_ce_7: 0.2112  loss_mask_7: 0.3909  loss_dice_7: 0.9823  loss_ce_8: 0.2058  loss_mask_8: 0.3969  loss_dice_8: 0.995    time: 0.8941  last_time: 0.8872  data_time: 0.0244  last_data_time: 0.0221   lr: 0.0001  max_mem: 29897M
[08/29 09:01:58] d2.utils.events INFO:  eta: 0:08:19  iter: 439  total_loss: 16.47  loss_ce: 0.1869  loss_mask: 0.4143  loss_dice: 1.021  loss_ce_0: 0.1665  loss_mask_0: 0.4374  loss_dice_0: 1.125  loss_ce_1: 0.1944  loss_mask_1: 0.4157  loss_dice_1: 1.056  loss_ce_2: 0.2086  loss_mask_2: 0.4185  loss_dice_2: 1.037  loss_ce_3: 0.1803  loss_mask_3: 0.424  loss_dice_3: 1.025  loss_ce_4: 0.1815  loss_mask_4: 0.4189  loss_dice_4: 1.02  loss_ce_5: 0.1831  loss_mask_5: 0.4135  loss_dice_5: 1.024  loss_ce_6: 0.1698  loss_mask_6: 0.4191  loss_dice_6: 1.021  loss_ce_7: 0.1809  loss_mask_7: 0.416  loss_dice_7: 0.9893  loss_ce_8: 0.1961  loss_mask_8: 0.413  loss_dice_8: 0.999    time: 0.8946  last_time: 0.8941  data_time: 0.0243  last_data_time: 0.0223   lr: 0.0001  max_mem: 29897M
[08/29 09:02:16] d2.utils.events INFO:  eta: 0:08:01  iter: 459  total_loss: 16.99  loss_ce: 0.2078  loss_mask: 0.4227  loss_dice: 1.036  loss_ce_0: 0.1865  loss_mask_0: 0.4593  loss_dice_0: 1.15  loss_ce_1: 0.2283  loss_mask_1: 0.4287  loss_dice_1: 1.092  loss_ce_2: 0.2376  loss_mask_2: 0.4259  loss_dice_2: 1.039  loss_ce_3: 0.2328  loss_mask_3: 0.4259  loss_dice_3: 1.019  loss_ce_4: 0.21  loss_mask_4: 0.4349  loss_dice_4: 1.042  loss_ce_5: 0.194  loss_mask_5: 0.422  loss_dice_5: 1.023  loss_ce_6: 0.1884  loss_mask_6: 0.4252  loss_dice_6: 1.013  loss_ce_7: 0.177  loss_mask_7: 0.4308  loss_dice_7: 1.021  loss_ce_8: 0.2077  loss_mask_8: 0.4227  loss_dice_8: 1.011    time: 0.8949  last_time: 0.9011  data_time: 0.0243  last_data_time: 0.0221   lr: 0.0001  max_mem: 29897M
[08/29 09:02:35] d2.utils.events INFO:  eta: 0:07:44  iter: 479  total_loss: 16.23  loss_ce: 0.1972  loss_mask: 0.3912  loss_dice: 1.045  loss_ce_0: 0.2079  loss_mask_0: 0.4376  loss_dice_0: 1.195  loss_ce_1: 0.2337  loss_mask_1: 0.4103  loss_dice_1: 1.114  loss_ce_2: 0.225  loss_mask_2: 0.4018  loss_dice_2: 1.058  loss_ce_3: 0.2298  loss_mask_3: 0.3912  loss_dice_3: 1.026  loss_ce_4: 0.1813  loss_mask_4: 0.3925  loss_dice_4: 1.054  loss_ce_5: 0.2092  loss_mask_5: 0.3909  loss_dice_5: 1.037  loss_ce_6: 0.1893  loss_mask_6: 0.3903  loss_dice_6: 1.035  loss_ce_7: 0.1974  loss_mask_7: 0.3925  loss_dice_7: 1.027  loss_ce_8: 0.1917  loss_mask_8: 0.3904  loss_dice_8: 1.035    time: 0.8955  last_time: 0.9046  data_time: 0.0241  last_data_time: 0.0236   lr: 0.0001  max_mem: 29897M
[08/29 09:02:53] d2.utils.events INFO:  eta: 0:07:26  iter: 499  total_loss: 15.95  loss_ce: 0.1821  loss_mask: 0.3972  loss_dice: 0.985  loss_ce_0: 0.1756  loss_mask_0: 0.4485  loss_dice_0: 1.121  loss_ce_1: 0.2083  loss_mask_1: 0.4193  loss_dice_1: 1.027  loss_ce_2: 0.2232  loss_mask_2: 0.4151  loss_dice_2: 0.9976  loss_ce_3: 0.228  loss_mask_3: 0.3989  loss_dice_3: 0.9868  loss_ce_4: 0.2131  loss_mask_4: 0.4005  loss_dice_4: 0.9641  loss_ce_5: 0.1923  loss_mask_5: 0.4046  loss_dice_5: 0.977  loss_ce_6: 0.1808  loss_mask_6: 0.4043  loss_dice_6: 0.9706  loss_ce_7: 0.1873  loss_mask_7: 0.4062  loss_dice_7: 0.9633  loss_ce_8: 0.2154  loss_mask_8: 0.3991  loss_dice_8: 0.9623    time: 0.8956  last_time: 0.9406  data_time: 0.0246  last_data_time: 0.0241   lr: 0.0001  max_mem: 29897M
[08/29 09:03:11] d2.utils.events INFO:  eta: 0:07:08  iter: 519  total_loss: 16.93  loss_ce: 0.1727  loss_mask: 0.4173  loss_dice: 0.998  loss_ce_0: 0.2021  loss_mask_0: 0.4485  loss_dice_0: 1.147  loss_ce_1: 0.205  loss_mask_1: 0.4418  loss_dice_1: 1.089  loss_ce_2: 0.211  loss_mask_2: 0.4276  loss_dice_2: 1.074  loss_ce_3: 0.2009  loss_mask_3: 0.4131  loss_dice_3: 1.027  loss_ce_4: 0.1878  loss_mask_4: 0.4193  loss_dice_4: 1.021  loss_ce_5: 0.1861  loss_mask_5: 0.4146  loss_dice_5: 1.029  loss_ce_6: 0.1761  loss_mask_6: 0.4133  loss_dice_6: 1.009  loss_ce_7: 0.1739  loss_mask_7: 0.4111  loss_dice_7: 1.011  loss_ce_8: 0.1713  loss_mask_8: 0.4154  loss_dice_8: 1.016    time: 0.8959  last_time: 0.8995  data_time: 0.0249  last_data_time: 0.0235   lr: 0.0001  max_mem: 29897M
[08/29 09:03:29] d2.utils.events INFO:  eta: 0:06:51  iter: 539  total_loss: 15.79  loss_ce: 0.1822  loss_mask: 0.3808  loss_dice: 0.929  loss_ce_0: 0.1823  loss_mask_0: 0.431  loss_dice_0: 1.111  loss_ce_1: 0.2234  loss_mask_1: 0.4122  loss_dice_1: 1.019  loss_ce_2: 0.2493  loss_mask_2: 0.4022  loss_dice_2: 0.9699  loss_ce_3: 0.2389  loss_mask_3: 0.3978  loss_dice_3: 0.9702  loss_ce_4: 0.2117  loss_mask_4: 0.3925  loss_dice_4: 0.9472  loss_ce_5: 0.1861  loss_mask_5: 0.3783  loss_dice_5: 0.96  loss_ce_6: 0.2275  loss_mask_6: 0.3805  loss_dice_6: 0.947  loss_ce_7: 0.1893  loss_mask_7: 0.3819  loss_dice_7: 0.936  loss_ce_8: 0.2104  loss_mask_8: 0.3861  loss_dice_8: 0.9395    time: 0.8965  last_time: 0.8997  data_time: 0.0247  last_data_time: 0.0248   lr: 0.0001  max_mem: 29897M
[08/29 09:03:47] d2.utils.events INFO:  eta: 0:06:33  iter: 559  total_loss: 17.35  loss_ce: 0.1991  loss_mask: 0.4292  loss_dice: 1.026  loss_ce_0: 0.2235  loss_mask_0: 0.4724  loss_dice_0: 1.193  loss_ce_1: 0.2579  loss_mask_1: 0.4425  loss_dice_1: 1.121  loss_ce_2: 0.2426  loss_mask_2: 0.4438  loss_dice_2: 1.089  loss_ce_3: 0.2186  loss_mask_3: 0.439  loss_dice_3: 1.057  loss_ce_4: 0.2151  loss_mask_4: 0.4358  loss_dice_4: 1.066  loss_ce_5: 0.2109  loss_mask_5: 0.4309  loss_dice_5: 1.052  loss_ce_6: 0.1897  loss_mask_6: 0.4268  loss_dice_6: 1.037  loss_ce_7: 0.1933  loss_mask_7: 0.4408  loss_dice_7: 1.043  loss_ce_8: 0.1967  loss_mask_8: 0.4269  loss_dice_8: 1.05    time: 0.8966  last_time: 0.9000  data_time: 0.0252  last_data_time: 0.0215   lr: 0.0001  max_mem: 29897M
[08/29 09:04:05] d2.utils.events INFO:  eta: 0:06:15  iter: 579  total_loss: 16.49  loss_ce: 0.1951  loss_mask: 0.3983  loss_dice: 0.9964  loss_ce_0: 0.1817  loss_mask_0: 0.4407  loss_dice_0: 1.141  loss_ce_1: 0.2223  loss_mask_1: 0.4245  loss_dice_1: 1.072  loss_ce_2: 0.1965  loss_mask_2: 0.4094  loss_dice_2: 1.05  loss_ce_3: 0.1985  loss_mask_3: 0.4131  loss_dice_3: 1.055  loss_ce_4: 0.1976  loss_mask_4: 0.411  loss_dice_4: 1.033  loss_ce_5: 0.1966  loss_mask_5: 0.3988  loss_dice_5: 1.036  loss_ce_6: 0.1894  loss_mask_6: 0.3988  loss_dice_6: 0.9999  loss_ce_7: 0.17  loss_mask_7: 0.4066  loss_dice_7: 1.025  loss_ce_8: 0.1841  loss_mask_8: 0.3957  loss_dice_8: 1.032    time: 0.8968  last_time: 0.8967  data_time: 0.0241  last_data_time: 0.0235   lr: 0.0001  max_mem: 29897M
[08/29 09:04:23] d2.utils.events INFO:  eta: 0:05:57  iter: 599  total_loss: 16.49  loss_ce: 0.155  loss_mask: 0.4119  loss_dice: 0.9814  loss_ce_0: 0.1546  loss_mask_0: 0.4541  loss_dice_0: 1.099  loss_ce_1: 0.1963  loss_mask_1: 0.4288  loss_dice_1: 1.072  loss_ce_2: 0.2034  loss_mask_2: 0.4288  loss_dice_2: 1.021  loss_ce_3: 0.2153  loss_mask_3: 0.4239  loss_dice_3: 0.9936  loss_ce_4: 0.1838  loss_mask_4: 0.4174  loss_dice_4: 0.9833  loss_ce_5: 0.1868  loss_mask_5: 0.4182  loss_dice_5: 1  loss_ce_6: 0.1697  loss_mask_6: 0.4123  loss_dice_6: 0.99  loss_ce_7: 0.1575  loss_mask_7: 0.4096  loss_dice_7: 0.9792  loss_ce_8: 0.1559  loss_mask_8: 0.3905  loss_dice_8: 0.9844    time: 0.8969  last_time: 0.8969  data_time: 0.0249  last_data_time: 0.0238   lr: 0.0001  max_mem: 29897M
[08/29 09:04:41] d2.utils.events INFO:  eta: 0:05:40  iter: 619  total_loss: 15.9  loss_ce: 0.1873  loss_mask: 0.4069  loss_dice: 0.9657  loss_ce_0: 0.168  loss_mask_0: 0.4309  loss_dice_0: 1.087  loss_ce_1: 0.2139  loss_mask_1: 0.4042  loss_dice_1: 1.042  loss_ce_2: 0.1812  loss_mask_2: 0.4057  loss_dice_2: 1.016  loss_ce_3: 0.1967  loss_mask_3: 0.4089  loss_dice_3: 0.9699  loss_ce_4: 0.1933  loss_mask_4: 0.3942  loss_dice_4: 0.9679  loss_ce_5: 0.1787  loss_mask_5: 0.4017  loss_dice_5: 0.963  loss_ce_6: 0.1635  loss_mask_6: 0.4038  loss_dice_6: 0.9719  loss_ce_7: 0.1723  loss_mask_7: 0.4011  loss_dice_7: 0.9449  loss_ce_8: 0.1923  loss_mask_8: 0.3954  loss_dice_8: 0.9612    time: 0.8972  last_time: 0.8970  data_time: 0.0246  last_data_time: 0.0217   lr: 0.0001  max_mem: 29897M
[08/29 09:05:00] d2.utils.events INFO:  eta: 0:05:22  iter: 639  total_loss: 16.25  loss_ce: 0.1917  loss_mask: 0.3868  loss_dice: 0.9348  loss_ce_0: 0.1922  loss_mask_0: 0.4309  loss_dice_0: 1.124  loss_ce_1: 0.2192  loss_mask_1: 0.4114  loss_dice_1: 1.06  loss_ce_2: 0.2229  loss_mask_2: 0.3963  loss_dice_2: 0.9986  loss_ce_3: 0.1927  loss_mask_3: 0.3876  loss_dice_3: 0.993  loss_ce_4: 0.2063  loss_mask_4: 0.3875  loss_dice_4: 0.9767  loss_ce_5: 0.1848  loss_mask_5: 0.3899  loss_dice_5: 1.005  loss_ce_6: 0.2064  loss_mask_6: 0.384  loss_dice_6: 0.9546  loss_ce_7: 0.1942  loss_mask_7: 0.3854  loss_dice_7: 0.9684  loss_ce_8: 0.2157  loss_mask_8: 0.3862  loss_dice_8: 0.9779    time: 0.8975  last_time: 0.8919  data_time: 0.0252  last_data_time: 0.0231   lr: 0.0001  max_mem: 29897M
[08/29 09:05:18] d2.utils.events INFO:  eta: 0:05:04  iter: 659  total_loss: 15.94  loss_ce: 0.176  loss_mask: 0.3851  loss_dice: 0.9901  loss_ce_0: 0.1837  loss_mask_0: 0.4143  loss_dice_0: 1.108  loss_ce_1: 0.2138  loss_mask_1: 0.399  loss_dice_1: 1.065  loss_ce_2: 0.1956  loss_mask_2: 0.3828  loss_dice_2: 1.027  loss_ce_3: 0.179  loss_mask_3: 0.3907  loss_dice_3: 1.041  loss_ce_4: 0.1982  loss_mask_4: 0.3817  loss_dice_4: 1.03  loss_ce_5: 0.1648  loss_mask_5: 0.3855  loss_dice_5: 1.02  loss_ce_6: 0.1881  loss_mask_6: 0.3861  loss_dice_6: 1.012  loss_ce_7: 0.1832  loss_mask_7: 0.3821  loss_dice_7: 0.9914  loss_ce_8: 0.1695  loss_mask_8: 0.383  loss_dice_8: 0.9842    time: 0.8976  last_time: 0.8950  data_time: 0.0252  last_data_time: 0.0226   lr: 0.0001  max_mem: 29897M
[08/29 09:05:36] d2.utils.events INFO:  eta: 0:04:46  iter: 679  total_loss: 16.67  loss_ce: 0.1736  loss_mask: 0.3795  loss_dice: 1.007  loss_ce_0: 0.2047  loss_mask_0: 0.4037  loss_dice_0: 1.175  loss_ce_1: 0.2148  loss_mask_1: 0.3966  loss_dice_1: 1.111  loss_ce_2: 0.1977  loss_mask_2: 0.3842  loss_dice_2: 1.068  loss_ce_3: 0.2034  loss_mask_3: 0.3841  loss_dice_3: 1.046  loss_ce_4: 0.1788  loss_mask_4: 0.3916  loss_dice_4: 1.07  loss_ce_5: 0.1856  loss_mask_5: 0.3843  loss_dice_5: 1.041  loss_ce_6: 0.1593  loss_mask_6: 0.3899  loss_dice_6: 1.026  loss_ce_7: 0.17  loss_mask_7: 0.3813  loss_dice_7: 1.032  loss_ce_8: 0.1686  loss_mask_8: 0.3812  loss_dice_8: 1.037    time: 0.8974  last_time: 0.8900  data_time: 0.0233  last_data_time: 0.0244   lr: 0.0001  max_mem: 29897M
[08/29 09:05:54] d2.utils.events INFO:  eta: 0:04:28  iter: 699  total_loss: 16.2  loss_ce: 0.1924  loss_mask: 0.3904  loss_dice: 0.9774  loss_ce_0: 0.1893  loss_mask_0: 0.4322  loss_dice_0: 1.11  loss_ce_1: 0.2172  loss_mask_1: 0.4005  loss_dice_1: 1.059  loss_ce_2: 0.2516  loss_mask_2: 0.3978  loss_dice_2: 1.022  loss_ce_3: 0.2181  loss_mask_3: 0.3951  loss_dice_3: 1.009  loss_ce_4: 0.1961  loss_mask_4: 0.3944  loss_dice_4: 1.006  loss_ce_5: 0.2102  loss_mask_5: 0.3896  loss_dice_5: 1.006  loss_ce_6: 0.1932  loss_mask_6: 0.3956  loss_dice_6: 0.9896  loss_ce_7: 0.1861  loss_mask_7: 0.3888  loss_dice_7: 0.9757  loss_ce_8: 0.1887  loss_mask_8: 0.3909  loss_dice_8: 1.02    time: 0.8974  last_time: 0.8925  data_time: 0.0241  last_data_time: 0.0247   lr: 0.0001  max_mem: 29897M
[08/29 09:06:12] d2.utils.events INFO:  eta: 0:04:10  iter: 719  total_loss: 15.77  loss_ce: 0.1761  loss_mask: 0.4038  loss_dice: 0.9994  loss_ce_0: 0.1933  loss_mask_0: 0.4473  loss_dice_0: 1.102  loss_ce_1: 0.2256  loss_mask_1: 0.4055  loss_dice_1: 1.032  loss_ce_2: 0.2198  loss_mask_2: 0.3987  loss_dice_2: 0.9976  loss_ce_3: 0.1986  loss_mask_3: 0.4055  loss_dice_3: 1.023  loss_ce_4: 0.2005  loss_mask_4: 0.4019  loss_dice_4: 1.016  loss_ce_5: 0.1945  loss_mask_5: 0.4046  loss_dice_5: 1.013  loss_ce_6: 0.1991  loss_mask_6: 0.4017  loss_dice_6: 0.9891  loss_ce_7: 0.1876  loss_mask_7: 0.4054  loss_dice_7: 0.9866  loss_ce_8: 0.182  loss_mask_8: 0.4018  loss_dice_8: 0.9828    time: 0.8975  last_time: 0.9144  data_time: 0.0239  last_data_time: 0.0230   lr: 0.0001  max_mem: 29897M
[08/29 09:06:30] d2.utils.events INFO:  eta: 0:03:52  iter: 739  total_loss: 16.05  loss_ce: 0.1813  loss_mask: 0.3712  loss_dice: 0.9993  loss_ce_0: 0.1934  loss_mask_0: 0.4143  loss_dice_0: 1.139  loss_ce_1: 0.2207  loss_mask_1: 0.4064  loss_dice_1: 1.073  loss_ce_2: 0.2203  loss_mask_2: 0.3681  loss_dice_2: 1.02  loss_ce_3: 0.2186  loss_mask_3: 0.3684  loss_dice_3: 1.003  loss_ce_4: 0.1842  loss_mask_4: 0.3716  loss_dice_4: 1.019  loss_ce_5: 0.1816  loss_mask_5: 0.3703  loss_dice_5: 1.031  loss_ce_6: 0.1901  loss_mask_6: 0.3702  loss_dice_6: 1.006  loss_ce_7: 0.1846  loss_mask_7: 0.3728  loss_dice_7: 1.026  loss_ce_8: 0.1729  loss_mask_8: 0.3663  loss_dice_8: 1.008    time: 0.8977  last_time: 0.9077  data_time: 0.0240  last_data_time: 0.0300   lr: 0.0001  max_mem: 29897M
[08/29 09:06:48] d2.utils.events INFO:  eta: 0:03:34  iter: 759  total_loss: 15.33  loss_ce: 0.1473  loss_mask: 0.3655  loss_dice: 0.9294  loss_ce_0: 0.1634  loss_mask_0: 0.3986  loss_dice_0: 1.06  loss_ce_1: 0.1816  loss_mask_1: 0.3875  loss_dice_1: 1.011  loss_ce_2: 0.1582  loss_mask_2: 0.3835  loss_dice_2: 0.9755  loss_ce_3: 0.1384  loss_mask_3: 0.3675  loss_dice_3: 0.9647  loss_ce_4: 0.1475  loss_mask_4: 0.364  loss_dice_4: 0.9506  loss_ce_5: 0.1344  loss_mask_5: 0.3671  loss_dice_5: 0.956  loss_ce_6: 0.1453  loss_mask_6: 0.3641  loss_dice_6: 0.9603  loss_ce_7: 0.1427  loss_mask_7: 0.3665  loss_dice_7: 0.9492  loss_ce_8: 0.1541  loss_mask_8: 0.3708  loss_dice_8: 0.9417    time: 0.8978  last_time: 0.9120  data_time: 0.0243  last_data_time: 0.0240   lr: 0.0001  max_mem: 29897M
[08/29 09:07:06] d2.utils.events INFO:  eta: 0:03:16  iter: 779  total_loss: 15.11  loss_ce: 0.197  loss_mask: 0.3752  loss_dice: 0.9113  loss_ce_0: 0.1722  loss_mask_0: 0.4183  loss_dice_0: 1.039  loss_ce_1: 0.194  loss_mask_1: 0.3889  loss_dice_1: 0.9727  loss_ce_2: 0.1823  loss_mask_2: 0.3779  loss_dice_2: 0.9532  loss_ce_3: 0.2024  loss_mask_3: 0.3759  loss_dice_3: 0.9484  loss_ce_4: 0.1821  loss_mask_4: 0.3749  loss_dice_4: 0.9194  loss_ce_5: 0.1721  loss_mask_5: 0.3703  loss_dice_5: 0.9282  loss_ce_6: 0.1795  loss_mask_6: 0.3708  loss_dice_6: 0.8988  loss_ce_7: 0.1691  loss_mask_7: 0.3763  loss_dice_7: 0.9177  loss_ce_8: 0.1656  loss_mask_8: 0.3753  loss_dice_8: 0.9003    time: 0.8979  last_time: 0.9021  data_time: 0.0265  last_data_time: 0.0214   lr: 0.0001  max_mem: 29897M
[08/29 09:07:24] d2.utils.events INFO:  eta: 0:02:59  iter: 799  total_loss: 16.13  loss_ce: 0.163  loss_mask: 0.3799  loss_dice: 0.9662  loss_ce_0: 0.1578  loss_mask_0: 0.407  loss_dice_0: 1.089  loss_ce_1: 0.1805  loss_mask_1: 0.3817  loss_dice_1: 1.067  loss_ce_2: 0.1878  loss_mask_2: 0.3778  loss_dice_2: 1.048  loss_ce_3: 0.182  loss_mask_3: 0.3725  loss_dice_3: 0.9938  loss_ce_4: 0.1852  loss_mask_4: 0.3692  loss_dice_4: 0.9878  loss_ce_5: 0.1712  loss_mask_5: 0.3767  loss_dice_5: 1.019  loss_ce_6: 0.177  loss_mask_6: 0.3738  loss_dice_6: 0.9633  loss_ce_7: 0.165  loss_mask_7: 0.3702  loss_dice_7: 0.9974  loss_ce_8: 0.1404  loss_mask_8: 0.3762  loss_dice_8: 0.9976    time: 0.8981  last_time: 0.9066  data_time: 0.0204  last_data_time: 0.0191   lr: 0.0001  max_mem: 29897M
[08/29 09:07:42] d2.utils.events INFO:  eta: 0:02:41  iter: 819  total_loss: 15.81  loss_ce: 0.1827  loss_mask: 0.3906  loss_dice: 0.9529  loss_ce_0: 0.2017  loss_mask_0: 0.4131  loss_dice_0: 1.046  loss_ce_1: 0.2368  loss_mask_1: 0.3954  loss_dice_1: 1.02  loss_ce_2: 0.221  loss_mask_2: 0.3914  loss_dice_2: 0.9796  loss_ce_3: 0.1921  loss_mask_3: 0.3987  loss_dice_3: 0.9748  loss_ce_4: 0.2058  loss_mask_4: 0.3958  loss_dice_4: 0.947  loss_ce_5: 0.1987  loss_mask_5: 0.3975  loss_dice_5: 0.9624  loss_ce_6: 0.1816  loss_mask_6: 0.3947  loss_dice_6: 0.9834  loss_ce_7: 0.1802  loss_mask_7: 0.3909  loss_dice_7: 0.9856  loss_ce_8: 0.1801  loss_mask_8: 0.3918  loss_dice_8: 0.9408    time: 0.8982  last_time: 0.9028  data_time: 0.0206  last_data_time: 0.0205   lr: 0.0001  max_mem: 29897M
[08/29 09:08:01] d2.utils.events INFO:  eta: 0:02:23  iter: 839  total_loss: 15.78  loss_ce: 0.1653  loss_mask: 0.3616  loss_dice: 0.9524  loss_ce_0: 0.1973  loss_mask_0: 0.4024  loss_dice_0: 1.088  loss_ce_1: 0.1977  loss_mask_1: 0.3853  loss_dice_1: 1.038  loss_ce_2: 0.1934  loss_mask_2: 0.3699  loss_dice_2: 1.015  loss_ce_3: 0.1817  loss_mask_3: 0.3673  loss_dice_3: 0.9681  loss_ce_4: 0.1715  loss_mask_4: 0.3595  loss_dice_4: 0.9743  loss_ce_5: 0.1855  loss_mask_5: 0.3601  loss_dice_5: 0.9667  loss_ce_6: 0.156  loss_mask_6: 0.3574  loss_dice_6: 0.9878  loss_ce_7: 0.1713  loss_mask_7: 0.3603  loss_dice_7: 0.9682  loss_ce_8: 0.1809  loss_mask_8: 0.3611  loss_dice_8: 0.9666    time: 0.8986  last_time: 0.9287  data_time: 0.0217  last_data_time: 0.0284   lr: 0.0001  max_mem: 29897M
[08/29 09:08:19] d2.utils.events INFO:  eta: 0:02:05  iter: 859  total_loss: 15.5  loss_ce: 0.1479  loss_mask: 0.382  loss_dice: 0.9666  loss_ce_0: 0.1822  loss_mask_0: 0.4113  loss_dice_0: 1.057  loss_ce_1: 0.1867  loss_mask_1: 0.399  loss_dice_1: 1.027  loss_ce_2: 0.1941  loss_mask_2: 0.3878  loss_dice_2: 0.9967  loss_ce_3: 0.1752  loss_mask_3: 0.3903  loss_dice_3: 0.9569  loss_ce_4: 0.1802  loss_mask_4: 0.3874  loss_dice_4: 0.978  loss_ce_5: 0.1772  loss_mask_5: 0.3859  loss_dice_5: 0.969  loss_ce_6: 0.1831  loss_mask_6: 0.3852  loss_dice_6: 0.9596  loss_ce_7: 0.1655  loss_mask_7: 0.3864  loss_dice_7: 0.9674  loss_ce_8: 0.158  loss_mask_8: 0.3808  loss_dice_8: 0.9547    time: 0.8991  last_time: 0.9061  data_time: 0.0237  last_data_time: 0.0210   lr: 0.0001  max_mem: 29897M
[08/29 09:08:37] d2.utils.events INFO:  eta: 0:01:47  iter: 879  total_loss: 15.4  loss_ce: 0.1782  loss_mask: 0.3727  loss_dice: 0.9442  loss_ce_0: 0.1756  loss_mask_0: 0.4015  loss_dice_0: 1.108  loss_ce_1: 0.173  loss_mask_1: 0.4016  loss_dice_1: 1.039  loss_ce_2: 0.1709  loss_mask_2: 0.3717  loss_dice_2: 1.013  loss_ce_3: 0.1948  loss_mask_3: 0.3723  loss_dice_3: 0.973  loss_ce_4: 0.2004  loss_mask_4: 0.3756  loss_dice_4: 0.951  loss_ce_5: 0.1875  loss_mask_5: 0.3706  loss_dice_5: 0.9588  loss_ce_6: 0.1792  loss_mask_6: 0.3668  loss_dice_6: 0.9471  loss_ce_7: 0.1922  loss_mask_7: 0.3644  loss_dice_7: 0.9534  loss_ce_8: 0.1797  loss_mask_8: 0.3649  loss_dice_8: 0.9502    time: 0.8994  last_time: 0.9053  data_time: 0.0237  last_data_time: 0.0240   lr: 0.0001  max_mem: 29898M
[08/29 09:08:56] d2.utils.events INFO:  eta: 0:01:29  iter: 899  total_loss: 16.33  loss_ce: 0.1666  loss_mask: 0.3987  loss_dice: 0.9894  loss_ce_0: 0.1865  loss_mask_0: 0.4358  loss_dice_0: 1.071  loss_ce_1: 0.1776  loss_mask_1: 0.4124  loss_dice_1: 1.023  loss_ce_2: 0.1771  loss_mask_2: 0.3985  loss_dice_2: 1.024  loss_ce_3: 0.1708  loss_mask_3: 0.4035  loss_dice_3: 0.9835  loss_ce_4: 0.1705  loss_mask_4: 0.398  loss_dice_4: 0.9927  loss_ce_5: 0.1615  loss_mask_5: 0.3972  loss_dice_5: 0.9918  loss_ce_6: 0.1749  loss_mask_6: 0.3934  loss_dice_6: 1.005  loss_ce_7: 0.1467  loss_mask_7: 0.3937  loss_dice_7: 0.9801  loss_ce_8: 0.1682  loss_mask_8: 0.4029  loss_dice_8: 1.002    time: 0.8997  last_time: 0.8981  data_time: 0.0235  last_data_time: 0.0242   lr: 0.0001  max_mem: 29898M
[08/29 09:09:14] d2.utils.events INFO:  eta: 0:01:11  iter: 919  total_loss: 15.15  loss_ce: 0.1509  loss_mask: 0.3718  loss_dice: 0.9766  loss_ce_0: 0.1626  loss_mask_0: 0.4066  loss_dice_0: 1.108  loss_ce_1: 0.2086  loss_mask_1: 0.386  loss_dice_1: 1.036  loss_ce_2: 0.2005  loss_mask_2: 0.3849  loss_dice_2: 0.9728  loss_ce_3: 0.1687  loss_mask_3: 0.3828  loss_dice_3: 0.9917  loss_ce_4: 0.1735  loss_mask_4: 0.3777  loss_dice_4: 0.9737  loss_ce_5: 0.1408  loss_mask_5: 0.3817  loss_dice_5: 0.9948  loss_ce_6: 0.1591  loss_mask_6: 0.3747  loss_dice_6: 0.9592  loss_ce_7: 0.146  loss_mask_7: 0.3779  loss_dice_7: 0.9517  loss_ce_8: 0.1537  loss_mask_8: 0.3756  loss_dice_8: 0.9807    time: 0.9001  last_time: 0.9232  data_time: 0.0201  last_data_time: 0.0193   lr: 0.0001  max_mem: 29898M
[08/29 09:09:32] d2.utils.events INFO:  eta: 0:00:53  iter: 939  total_loss: 15.1  loss_ce: 0.1514  loss_mask: 0.3927  loss_dice: 0.9142  loss_ce_0: 0.1594  loss_mask_0: 0.4397  loss_dice_0: 1.017  loss_ce_1: 0.1733  loss_mask_1: 0.4267  loss_dice_1: 0.9691  loss_ce_2: 0.1718  loss_mask_2: 0.4128  loss_dice_2: 0.9507  loss_ce_3: 0.1459  loss_mask_3: 0.4005  loss_dice_3: 0.9113  loss_ce_4: 0.1612  loss_mask_4: 0.4115  loss_dice_4: 0.9223  loss_ce_5: 0.1537  loss_mask_5: 0.3926  loss_dice_5: 0.9198  loss_ce_6: 0.1594  loss_mask_6: 0.3975  loss_dice_6: 0.9098  loss_ce_7: 0.1426  loss_mask_7: 0.3923  loss_dice_7: 0.8975  loss_ce_8: 0.1425  loss_mask_8: 0.398  loss_dice_8: 0.9137    time: 0.9001  last_time: 0.8930  data_time: 0.0193  last_data_time: 0.0166   lr: 0.0001  max_mem: 29898M
[08/29 09:09:50] d2.utils.events INFO:  eta: 0:00:35  iter: 959  total_loss: 15.2  loss_ce: 0.1905  loss_mask: 0.3855  loss_dice: 0.9081  loss_ce_0: 0.1961  loss_mask_0: 0.4391  loss_dice_0: 1.041  loss_ce_1: 0.2183  loss_mask_1: 0.3905  loss_dice_1: 0.9777  loss_ce_2: 0.1516  loss_mask_2: 0.3971  loss_dice_2: 0.9977  loss_ce_3: 0.1792  loss_mask_3: 0.3887  loss_dice_3: 0.9517  loss_ce_4: 0.1787  loss_mask_4: 0.3857  loss_dice_4: 0.9354  loss_ce_5: 0.1858  loss_mask_5: 0.3884  loss_dice_5: 0.9512  loss_ce_6: 0.1895  loss_mask_6: 0.3851  loss_dice_6: 0.9268  loss_ce_7: 0.1555  loss_mask_7: 0.3804  loss_dice_7: 0.921  loss_ce_8: 0.15  loss_mask_8: 0.3824  loss_dice_8: 0.9111    time: 0.9001  last_time: 0.8803  data_time: 0.0204  last_data_time: 0.0159   lr: 0.0001  max_mem: 29898M
[08/29 09:10:09] d2.utils.events INFO:  eta: 0:00:17  iter: 979  total_loss: 15.07  loss_ce: 0.1518  loss_mask: 0.3661  loss_dice: 0.9424  loss_ce_0: 0.1615  loss_mask_0: 0.4197  loss_dice_0: 1.037  loss_ce_1: 0.1971  loss_mask_1: 0.3841  loss_dice_1: 1.007  loss_ce_2: 0.1839  loss_mask_2: 0.3733  loss_dice_2: 0.9662  loss_ce_3: 0.1761  loss_mask_3: 0.3659  loss_dice_3: 0.9543  loss_ce_4: 0.1739  loss_mask_4: 0.3675  loss_dice_4: 0.9435  loss_ce_5: 0.172  loss_mask_5: 0.3671  loss_dice_5: 0.9471  loss_ce_6: 0.1601  loss_mask_6: 0.3736  loss_dice_6: 0.9388  loss_ce_7: 0.1422  loss_mask_7: 0.3673  loss_dice_7: 0.9487  loss_ce_8: 0.1605  loss_mask_8: 0.3637  loss_dice_8: 0.9556    time: 0.9005  last_time: 0.9018  data_time: 0.0196  last_data_time: 0.0168   lr: 0.0001  max_mem: 29898M
[08/29 09:10:27] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
[08/29 09:10:30] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 15.46  loss_ce: 0.1527  loss_mask: 0.3948  loss_dice: 0.9699  loss_ce_0: 0.1704  loss_mask_0: 0.4239  loss_dice_0: 1.075  loss_ce_1: 0.1946  loss_mask_1: 0.4141  loss_dice_1: 1.023  loss_ce_2: 0.2008  loss_mask_2: 0.3929  loss_dice_2: 1.005  loss_ce_3: 0.1981  loss_mask_3: 0.3942  loss_dice_3: 0.9823  loss_ce_4: 0.2029  loss_mask_4: 0.3778  loss_dice_4: 0.9902  loss_ce_5: 0.1838  loss_mask_5: 0.3827  loss_dice_5: 0.9952  loss_ce_6: 0.1675  loss_mask_6: 0.388  loss_dice_6: 0.9786  loss_ce_7: 0.182  loss_mask_7: 0.3914  loss_dice_7: 0.9733  loss_ce_8: 0.1572  loss_mask_8: 0.3924  loss_dice_8: 0.9795    time: 0.9007  last_time: 0.9250  data_time: 0.0186  last_data_time: 0.0156   lr: 0.0001  max_mem: 29898M
[08/29 09:10:30] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:14:58 (0.9008 s / it)
[08/29 09:10:30] d2.engine.hooks INFO: Total training time: 0:15:04 (0:00:05 on hooks)
[08/29 09:10:30] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/29 09:10:30] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/29 09:10:30] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/29 09:10:30] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/29 09:10:30] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/29 09:10:30] d2.evaluation.evaluator INFO: Start inference on 500 batches
[08/29 09:10:34] d2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0018 s/iter. Inference: 0.1909 s/iter. Eval: 0.0572 s/iter. Total: 0.2499 s/iter. ETA=0:02:02
[08/29 09:10:39] d2.evaluation.evaluator INFO: Inference done 32/500. Dataloading: 0.0020 s/iter. Inference: 0.1882 s/iter. Eval: 0.0578 s/iter. Total: 0.2480 s/iter. ETA=0:01:56
[08/29 09:10:44] d2.evaluation.evaluator INFO: Inference done 53/500. Dataloading: 0.0021 s/iter. Inference: 0.1880 s/iter. Eval: 0.0581 s/iter. Total: 0.2482 s/iter. ETA=0:01:50
[08/29 09:10:49] d2.evaluation.evaluator INFO: Inference done 74/500. Dataloading: 0.0020 s/iter. Inference: 0.1874 s/iter. Eval: 0.0579 s/iter. Total: 0.2474 s/iter. ETA=0:01:45
[08/29 09:10:54] d2.evaluation.evaluator INFO: Inference done 93/500. Dataloading: 0.0021 s/iter. Inference: 0.1935 s/iter. Eval: 0.0576 s/iter. Total: 0.2532 s/iter. ETA=0:01:43
[08/29 09:11:00] d2.evaluation.evaluator INFO: Inference done 113/500. Dataloading: 0.0021 s/iter. Inference: 0.1950 s/iter. Eval: 0.0573 s/iter. Total: 0.2545 s/iter. ETA=0:01:38
[08/29 09:11:05] d2.evaluation.evaluator INFO: Inference done 131/500. Dataloading: 0.0021 s/iter. Inference: 0.1985 s/iter. Eval: 0.0572 s/iter. Total: 0.2579 s/iter. ETA=0:01:35
[08/29 09:11:10] d2.evaluation.evaluator INFO: Inference done 151/500. Dataloading: 0.0021 s/iter. Inference: 0.1990 s/iter. Eval: 0.0571 s/iter. Total: 0.2583 s/iter. ETA=0:01:30
[08/29 09:11:15] d2.evaluation.evaluator INFO: Inference done 171/500. Dataloading: 0.0021 s/iter. Inference: 0.1986 s/iter. Eval: 0.0571 s/iter. Total: 0.2578 s/iter. ETA=0:01:24
[08/29 09:11:20] d2.evaluation.evaluator INFO: Inference done 191/500. Dataloading: 0.0021 s/iter. Inference: 0.1980 s/iter. Eval: 0.0571 s/iter. Total: 0.2573 s/iter. ETA=0:01:19
[08/29 09:11:25] d2.evaluation.evaluator INFO: Inference done 212/500. Dataloading: 0.0021 s/iter. Inference: 0.1967 s/iter. Eval: 0.0571 s/iter. Total: 0.2561 s/iter. ETA=0:01:13
[08/29 09:11:30] d2.evaluation.evaluator INFO: Inference done 233/500. Dataloading: 0.0021 s/iter. Inference: 0.1961 s/iter. Eval: 0.0572 s/iter. Total: 0.2554 s/iter. ETA=0:01:08
[08/29 09:11:36] d2.evaluation.evaluator INFO: Inference done 253/500. Dataloading: 0.0022 s/iter. Inference: 0.1965 s/iter. Eval: 0.0571 s/iter. Total: 0.2559 s/iter. ETA=0:01:03
[08/29 09:11:41] d2.evaluation.evaluator INFO: Inference done 272/500. Dataloading: 0.0022 s/iter. Inference: 0.1978 s/iter. Eval: 0.0571 s/iter. Total: 0.2571 s/iter. ETA=0:00:58
[08/29 09:11:46] d2.evaluation.evaluator INFO: Inference done 292/500. Dataloading: 0.0022 s/iter. Inference: 0.1976 s/iter. Eval: 0.0571 s/iter. Total: 0.2570 s/iter. ETA=0:00:53
[08/29 09:11:51] d2.evaluation.evaluator INFO: Inference done 311/500. Dataloading: 0.0022 s/iter. Inference: 0.1982 s/iter. Eval: 0.0570 s/iter. Total: 0.2575 s/iter. ETA=0:00:48
[08/29 09:11:56] d2.evaluation.evaluator INFO: Inference done 332/500. Dataloading: 0.0023 s/iter. Inference: 0.1975 s/iter. Eval: 0.0570 s/iter. Total: 0.2568 s/iter. ETA=0:00:43
[08/29 09:12:01] d2.evaluation.evaluator INFO: Inference done 353/500. Dataloading: 0.0023 s/iter. Inference: 0.1968 s/iter. Eval: 0.0571 s/iter. Total: 0.2563 s/iter. ETA=0:00:37
[08/29 09:12:07] d2.evaluation.evaluator INFO: Inference done 374/500. Dataloading: 0.0023 s/iter. Inference: 0.1962 s/iter. Eval: 0.0572 s/iter. Total: 0.2558 s/iter. ETA=0:00:32
[08/29 09:12:12] d2.evaluation.evaluator INFO: Inference done 395/500. Dataloading: 0.0024 s/iter. Inference: 0.1956 s/iter. Eval: 0.0573 s/iter. Total: 0.2554 s/iter. ETA=0:00:26
[08/29 09:12:17] d2.evaluation.evaluator INFO: Inference done 416/500. Dataloading: 0.0024 s/iter. Inference: 0.1951 s/iter. Eval: 0.0574 s/iter. Total: 0.2549 s/iter. ETA=0:00:21
[08/29 09:12:22] d2.evaluation.evaluator INFO: Inference done 437/500. Dataloading: 0.0024 s/iter. Inference: 0.1947 s/iter. Eval: 0.0574 s/iter. Total: 0.2546 s/iter. ETA=0:00:16
[08/29 09:12:27] d2.evaluation.evaluator INFO: Inference done 457/500. Dataloading: 0.0024 s/iter. Inference: 0.1945 s/iter. Eval: 0.0574 s/iter. Total: 0.2544 s/iter. ETA=0:00:10
[08/29 09:12:32] d2.evaluation.evaluator INFO: Inference done 477/500. Dataloading: 0.0024 s/iter. Inference: 0.1944 s/iter. Eval: 0.0574 s/iter. Total: 0.2543 s/iter. ETA=0:00:05
[08/29 09:12:37] d2.evaluation.evaluator INFO: Inference done 497/500. Dataloading: 0.0024 s/iter. Inference: 0.1947 s/iter. Eval: 0.0574 s/iter. Total: 0.2546 s/iter. ETA=0:00:00
[08/29 09:12:38] d2.evaluation.evaluator INFO: Total inference time: 0:02:06.086971 (0.254721 s / iter per device, on 1 devices)
[08/29 09:12:38] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:01:36 (0.194656 s / iter per device, on 1 devices)
[08/29 09:12:38] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval0kjfn87j ...
[08/29 09:12:57] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 37.584 | 47.383 | 45.034 |      19       |
| Things | 0.000  | 0.000  | 0.000  |       8       |
| Stuff  | 64.918 | 81.844 | 77.786 |      11       |
[08/29 09:12:57] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.504 | 97.808 | 99.690 |     Stuff     |
| class_8  | 74.914 | 86.037 | 87.072 |     Stuff     |
| class_11 | 86.498 | 89.418 | 96.735 |     Stuff     |
| class_12 | 40.508 | 78.510 | 51.596 |     Stuff     |
| class_13 | 36.456 | 77.470 | 47.059 |     Stuff     |
| class_17 | 51.278 | 65.909 | 77.800 |     Stuff     |
| class_19 | 50.096 | 69.000 | 72.603 |     Stuff     |
| class_20 | 68.657 | 78.012 | 88.009 |     Stuff     |
| class_21 | 89.030 | 90.228 | 98.672 |     Stuff     |
| class_22 | 30.848 | 75.440 | 40.891 |     Stuff     |
| class_23 | 88.309 | 92.449 | 95.522 |     Stuff     |
| class_24 | 0.000  | 0.000  | 0.000  |    Things     |
| class_25 | 0.000  | 0.000  | 0.000  |    Things     |
| class_26 | 0.000  | 0.000  | 0.000  |    Things     |
| class_27 | 0.000  | 0.000  | 0.000  |    Things     |
| class_28 | 0.000  | 0.000  | 0.000  |    Things     |
| class_31 | 0.000  | 0.000  | 0.000  |    Things     |
| class_32 | 0.000  | 0.000  | 0.000  |    Things     |
| class_33 | 0.000  | 0.000  | 0.000  |    Things     |
[08/29 09:12:57] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[08/29 09:12:57] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/29 09:12:57] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/29 09:12:57] d2.evaluation.testing INFO: copypaste: 37.5841,47.3832,45.0341,0.0000,0.0000,0.0000,64.9180,81.8437,77.7862,97.5044,97.8078,99.6898,74.9144,86.0375,87.0718,86.4982,89.4180,96.7347,40.5076,78.5096,51.5957,36.4563,77.4696,47.0588,51.2777,65.9093,77.8004,50.0962,69.0004,72.6027,68.6570,78.0117,88.0086,89.0296,90.2278,98.6721,30.8479,75.4399,40.8907,88.3092,92.4487,95.5224,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000
[09/04 17:42:19] detectron2 INFO: Rank of current process: 0. World size: 1
[09/04 17:42:20] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[09/04 17:42:20] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_exp_008_19.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[09/04 17:42:20] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_exp_008_19.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[09/04 17:42:20] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[09/04 17:42:20] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/config.yaml
[09/04 17:42:20] d2.utils.env INFO: Using a generated random seed 23765633
[09/04 17:42:24] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[09/04 17:42:24] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[09/04 17:42:24] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[09/04 17:42:24] d2.data.build INFO: Using training sampler TrainingSampler
[09/04 17:42:24] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/04 17:42:24] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[09/04 17:42:24] d2.data.common INFO: Serialized dataset takes 2.16 MiB
[09/04 17:42:24] d2.data.build INFO: Making batched data loader with batch_size=8
[09/04 17:42:24] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[09/04 17:42:24] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth ...
[09/04 17:42:24] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /home/ids/gbrison/segmentation/segmentation/fc-clip/fcclip_cocopan_r50.pth ...
[09/04 17:42:24] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[09/04 17:42:24] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mcriterion.empty_weight[0m
[09/04 17:42:24] d2.engine.train_loop INFO: Starting training from iteration 0
[09/04 17:42:47] d2.utils.events INFO:  eta: 0:15:18  iter: 19  total_loss: 27.8  loss_ce: 0.6258  loss_mask: 0.6494  loss_dice: 1.451  loss_ce_0: 0.6845  loss_mask_0: 0.6951  loss_dice_0: 1.701  loss_ce_1: 0.7157  loss_mask_1: 0.6818  loss_dice_1: 1.592  loss_ce_2: 0.6623  loss_mask_2: 0.6615  loss_dice_2: 1.508  loss_ce_3: 0.627  loss_mask_3: 0.6645  loss_dice_3: 1.502  loss_ce_4: 0.6509  loss_mask_4: 0.6719  loss_dice_4: 1.541  loss_ce_5: 0.6276  loss_mask_5: 0.6672  loss_dice_5: 1.506  loss_ce_6: 0.641  loss_mask_6: 0.6466  loss_dice_6: 1.429  loss_ce_7: 0.6593  loss_mask_7: 0.6568  loss_dice_7: 1.451  loss_ce_8: 0.6272  loss_mask_8: 0.6617  loss_dice_8: 1.468    time: 0.9503  last_time: 0.9021  data_time: 0.0783  last_data_time: 0.0319   lr: 0.0001  max_mem: 29897M
[09/04 17:43:06] d2.utils.events INFO:  eta: 0:14:55  iter: 39  total_loss: 21.95  loss_ce: 0.2874  loss_mask: 0.5387  loss_dice: 1.253  loss_ce_0: 0.3356  loss_mask_0: 0.5719  loss_dice_0: 1.456  loss_ce_1: 0.3895  loss_mask_1: 0.5556  loss_dice_1: 1.337  loss_ce_2: 0.3662  loss_mask_2: 0.546  loss_dice_2: 1.289  loss_ce_3: 0.354  loss_mask_3: 0.5343  loss_dice_3: 1.249  loss_ce_4: 0.3314  loss_mask_4: 0.529  loss_dice_4: 1.244  loss_ce_5: 0.3051  loss_mask_5: 0.5289  loss_dice_5: 1.236  loss_ce_6: 0.3085  loss_mask_6: 0.5393  loss_dice_6: 1.227  loss_ce_7: 0.2969  loss_mask_7: 0.5397  loss_dice_7: 1.258  loss_ce_8: 0.2965  loss_mask_8: 0.541  loss_dice_8: 1.228    time: 0.9435  last_time: 0.9714  data_time: 0.0413  last_data_time: 0.0439   lr: 0.0001  max_mem: 29897M
[09/04 17:43:24] d2.utils.events INFO:  eta: 0:14:33  iter: 59  total_loss: 20.36  loss_ce: 0.2859  loss_mask: 0.5157  loss_dice: 1.16  loss_ce_0: 0.2537  loss_mask_0: 0.5445  loss_dice_0: 1.362  loss_ce_1: 0.3129  loss_mask_1: 0.5364  loss_dice_1: 1.278  loss_ce_2: 0.3025  loss_mask_2: 0.5254  loss_dice_2: 1.238  loss_ce_3: 0.2994  loss_mask_3: 0.5307  loss_dice_3: 1.146  loss_ce_4: 0.2582  loss_mask_4: 0.5296  loss_dice_4: 1.199  loss_ce_5: 0.2638  loss_mask_5: 0.5211  loss_dice_5: 1.169  loss_ce_6: 0.2759  loss_mask_6: 0.5215  loss_dice_6: 1.143  loss_ce_7: 0.2849  loss_mask_7: 0.5238  loss_dice_7: 1.153  loss_ce_8: 0.2889  loss_mask_8: 0.5226  loss_dice_8: 1.162    time: 0.9365  last_time: 0.9505  data_time: 0.0375  last_data_time: 0.0377   lr: 0.0001  max_mem: 29897M
[09/04 17:43:43] d2.utils.events INFO:  eta: 0:14:12  iter: 79  total_loss: 19.09  loss_ce: 0.2263  loss_mask: 0.501  loss_dice: 1.166  loss_ce_0: 0.2345  loss_mask_0: 0.53  loss_dice_0: 1.318  loss_ce_1: 0.2937  loss_mask_1: 0.4977  loss_dice_1: 1.257  loss_ce_2: 0.2812  loss_mask_2: 0.4849  loss_dice_2: 1.189  loss_ce_3: 0.2463  loss_mask_3: 0.4873  loss_dice_3: 1.161  loss_ce_4: 0.2505  loss_mask_4: 0.4954  loss_dice_4: 1.17  loss_ce_5: 0.2352  loss_mask_5: 0.4992  loss_dice_5: 1.159  loss_ce_6: 0.2339  loss_mask_6: 0.5068  loss_dice_6: 1.152  loss_ce_7: 0.2191  loss_mask_7: 0.4997  loss_dice_7: 1.178  loss_ce_8: 0.2128  loss_mask_8: 0.4978  loss_dice_8: 1.172    time: 0.9353  last_time: 0.9179  data_time: 0.0408  last_data_time: 0.0353   lr: 0.0001  max_mem: 29897M
[09/04 17:44:02] d2.utils.events INFO:  eta: 0:13:55  iter: 99  total_loss: 19.21  loss_ce: 0.2131  loss_mask: 0.4799  loss_dice: 1.184  loss_ce_0: 0.2218  loss_mask_0: 0.5167  loss_dice_0: 1.298  loss_ce_1: 0.2469  loss_mask_1: 0.4996  loss_dice_1: 1.245  loss_ce_2: 0.2421  loss_mask_2: 0.4883  loss_dice_2: 1.213  loss_ce_3: 0.2256  loss_mask_3: 0.4838  loss_dice_3: 1.196  loss_ce_4: 0.2296  loss_mask_4: 0.4694  loss_dice_4: 1.189  loss_ce_5: 0.2067  loss_mask_5: 0.4812  loss_dice_5: 1.171  loss_ce_6: 0.1982  loss_mask_6: 0.4832  loss_dice_6: 1.191  loss_ce_7: 0.221  loss_mask_7: 0.4739  loss_dice_7: 1.182  loss_ce_8: 0.2116  loss_mask_8: 0.4729  loss_dice_8: 1.184    time: 0.9360  last_time: 0.9530  data_time: 0.0389  last_data_time: 0.0428   lr: 0.0001  max_mem: 29897M
[09/04 17:44:21] d2.utils.events INFO:  eta: 0:13:37  iter: 119  total_loss: 18.09  loss_ce: 0.2395  loss_mask: 0.4486  loss_dice: 1.098  loss_ce_0: 0.2134  loss_mask_0: 0.4816  loss_dice_0: 1.243  loss_ce_1: 0.2893  loss_mask_1: 0.474  loss_dice_1: 1.156  loss_ce_2: 0.2528  loss_mask_2: 0.4741  loss_dice_2: 1.138  loss_ce_3: 0.2617  loss_mask_3: 0.4654  loss_dice_3: 1.112  loss_ce_4: 0.2578  loss_mask_4: 0.4537  loss_dice_4: 1.128  loss_ce_5: 0.2406  loss_mask_5: 0.4526  loss_dice_5: 1.121  loss_ce_6: 0.237  loss_mask_6: 0.4566  loss_dice_6: 1.083  loss_ce_7: 0.2266  loss_mask_7: 0.4495  loss_dice_7: 1.08  loss_ce_8: 0.2393  loss_mask_8: 0.4483  loss_dice_8: 1.08    time: 0.9352  last_time: 0.9039  data_time: 0.0405  last_data_time: 0.0383   lr: 0.0001  max_mem: 29898M
[09/04 17:44:39] d2.utils.events INFO:  eta: 0:13:18  iter: 139  total_loss: 18.71  loss_ce: 0.2338  loss_mask: 0.4445  loss_dice: 1.107  loss_ce_0: 0.2186  loss_mask_0: 0.4926  loss_dice_0: 1.248  loss_ce_1: 0.2729  loss_mask_1: 0.4606  loss_dice_1: 1.191  loss_ce_2: 0.2618  loss_mask_2: 0.4556  loss_dice_2: 1.163  loss_ce_3: 0.2709  loss_mask_3: 0.4522  loss_dice_3: 1.144  loss_ce_4: 0.2431  loss_mask_4: 0.4545  loss_dice_4: 1.139  loss_ce_5: 0.2265  loss_mask_5: 0.4486  loss_dice_5: 1.138  loss_ce_6: 0.2578  loss_mask_6: 0.4479  loss_dice_6: 1.105  loss_ce_7: 0.2295  loss_mask_7: 0.4488  loss_dice_7: 1.123  loss_ce_8: 0.221  loss_mask_8: 0.4469  loss_dice_8: 1.12    time: 0.9352  last_time: 0.9132  data_time: 0.0410  last_data_time: 0.0345   lr: 0.0001  max_mem: 29899M
[09/04 17:44:58] d2.utils.events INFO:  eta: 0:13:00  iter: 159  total_loss: 19.31  loss_ce: 0.2471  loss_mask: 0.4874  loss_dice: 1.092  loss_ce_0: 0.2058  loss_mask_0: 0.5087  loss_dice_0: 1.282  loss_ce_1: 0.2819  loss_mask_1: 0.4825  loss_dice_1: 1.186  loss_ce_2: 0.3149  loss_mask_2: 0.4716  loss_dice_2: 1.155  loss_ce_3: 0.2817  loss_mask_3: 0.471  loss_dice_3: 1.116  loss_ce_4: 0.2867  loss_mask_4: 0.4745  loss_dice_4: 1.128  loss_ce_5: 0.2695  loss_mask_5: 0.4819  loss_dice_5: 1.107  loss_ce_6: 0.2571  loss_mask_6: 0.4822  loss_dice_6: 1.094  loss_ce_7: 0.2781  loss_mask_7: 0.4814  loss_dice_7: 1.106  loss_ce_8: 0.2545  loss_mask_8: 0.488  loss_dice_8: 1.133    time: 0.9351  last_time: 0.9789  data_time: 0.0365  last_data_time: 0.0349   lr: 0.0001  max_mem: 29899M
[09/04 17:45:17] d2.utils.events INFO:  eta: 0:12:41  iter: 179  total_loss: 18.67  loss_ce: 0.2251  loss_mask: 0.4261  loss_dice: 1.14  loss_ce_0: 0.2029  loss_mask_0: 0.4668  loss_dice_0: 1.287  loss_ce_1: 0.2627  loss_mask_1: 0.4412  loss_dice_1: 1.207  loss_ce_2: 0.2523  loss_mask_2: 0.4301  loss_dice_2: 1.199  loss_ce_3: 0.2707  loss_mask_3: 0.423  loss_dice_3: 1.142  loss_ce_4: 0.2388  loss_mask_4: 0.4224  loss_dice_4: 1.147  loss_ce_5: 0.2243  loss_mask_5: 0.4206  loss_dice_5: 1.146  loss_ce_6: 0.2427  loss_mask_6: 0.4223  loss_dice_6: 1.109  loss_ce_7: 0.2292  loss_mask_7: 0.4259  loss_dice_7: 1.149  loss_ce_8: 0.2195  loss_mask_8: 0.4224  loss_dice_8: 1.133    time: 0.9347  last_time: 0.9201  data_time: 0.0379  last_data_time: 0.0341   lr: 0.0001  max_mem: 29899M
[09/04 17:45:35] d2.utils.events INFO:  eta: 0:12:22  iter: 199  total_loss: 17.57  loss_ce: 0.1998  loss_mask: 0.4556  loss_dice: 1.055  loss_ce_0: 0.1953  loss_mask_0: 0.4933  loss_dice_0: 1.218  loss_ce_1: 0.2271  loss_mask_1: 0.4705  loss_dice_1: 1.121  loss_ce_2: 0.2364  loss_mask_2: 0.4555  loss_dice_2: 1.092  loss_ce_3: 0.2146  loss_mask_3: 0.4655  loss_dice_3: 1.07  loss_ce_4: 0.2188  loss_mask_4: 0.4601  loss_dice_4: 1.066  loss_ce_5: 0.22  loss_mask_5: 0.4557  loss_dice_5: 1.055  loss_ce_6: 0.206  loss_mask_6: 0.4573  loss_dice_6: 1.057  loss_ce_7: 0.1987  loss_mask_7: 0.4544  loss_dice_7: 1.088  loss_ce_8: 0.1782  loss_mask_8: 0.4534  loss_dice_8: 1.091    time: 0.9341  last_time: 0.9462  data_time: 0.0353  last_data_time: 0.0332   lr: 0.0001  max_mem: 29899M
[09/04 17:45:54] d2.utils.events INFO:  eta: 0:12:03  iter: 219  total_loss: 18.14  loss_ce: 0.2117  loss_mask: 0.4331  loss_dice: 1.078  loss_ce_0: 0.202  loss_mask_0: 0.4784  loss_dice_0: 1.245  loss_ce_1: 0.2423  loss_mask_1: 0.465  loss_dice_1: 1.157  loss_ce_2: 0.2547  loss_mask_2: 0.4506  loss_dice_2: 1.129  loss_ce_3: 0.2221  loss_mask_3: 0.445  loss_dice_3: 1.109  loss_ce_4: 0.1921  loss_mask_4: 0.4481  loss_dice_4: 1.1  loss_ce_5: 0.2314  loss_mask_5: 0.4468  loss_dice_5: 1.103  loss_ce_6: 0.1884  loss_mask_6: 0.4383  loss_dice_6: 1.094  loss_ce_7: 0.2135  loss_mask_7: 0.4441  loss_dice_7: 1.105  loss_ce_8: 0.2383  loss_mask_8: 0.4419  loss_dice_8: 1.11    time: 0.9351  last_time: 0.9291  data_time: 0.0347  last_data_time: 0.0330   lr: 0.0001  max_mem: 29899M
[09/04 17:46:13] d2.utils.events INFO:  eta: 0:11:43  iter: 239  total_loss: 18.08  loss_ce: 0.2297  loss_mask: 0.4434  loss_dice: 1.075  loss_ce_0: 0.1932  loss_mask_0: 0.474  loss_dice_0: 1.274  loss_ce_1: 0.2234  loss_mask_1: 0.4623  loss_dice_1: 1.145  loss_ce_2: 0.2421  loss_mask_2: 0.4492  loss_dice_2: 1.128  loss_ce_3: 0.2275  loss_mask_3: 0.4417  loss_dice_3: 1.099  loss_ce_4: 0.2419  loss_mask_4: 0.4539  loss_dice_4: 1.106  loss_ce_5: 0.2043  loss_mask_5: 0.4525  loss_dice_5: 1.072  loss_ce_6: 0.2346  loss_mask_6: 0.4491  loss_dice_6: 1.087  loss_ce_7: 0.2103  loss_mask_7: 0.4464  loss_dice_7: 1.082  loss_ce_8: 0.2253  loss_mask_8: 0.4465  loss_dice_8: 1.095    time: 0.9339  last_time: 0.9481  data_time: 0.0339  last_data_time: 0.0337   lr: 0.0001  max_mem: 29899M
[09/04 17:46:32] d2.utils.events INFO:  eta: 0:11:25  iter: 259  total_loss: 18.48  loss_ce: 0.2348  loss_mask: 0.4648  loss_dice: 1.126  loss_ce_0: 0.2097  loss_mask_0: 0.5032  loss_dice_0: 1.26  loss_ce_1: 0.2593  loss_mask_1: 0.4665  loss_dice_1: 1.2  loss_ce_2: 0.2639  loss_mask_2: 0.4696  loss_dice_2: 1.149  loss_ce_3: 0.2595  loss_mask_3: 0.4599  loss_dice_3: 1.123  loss_ce_4: 0.2654  loss_mask_4: 0.4597  loss_dice_4: 1.13  loss_ce_5: 0.2375  loss_mask_5: 0.4582  loss_dice_5: 1.119  loss_ce_6: 0.2526  loss_mask_6: 0.4604  loss_dice_6: 1.112  loss_ce_7: 0.2264  loss_mask_7: 0.4584  loss_dice_7: 1.142  loss_ce_8: 0.2379  loss_mask_8: 0.4622  loss_dice_8: 1.117    time: 0.9338  last_time: 0.9287  data_time: 0.0355  last_data_time: 0.0351   lr: 0.0001  max_mem: 29899M
[09/04 17:46:50] d2.utils.events INFO:  eta: 0:11:07  iter: 279  total_loss: 17.83  loss_ce: 0.2269  loss_mask: 0.4202  loss_dice: 1.062  loss_ce_0: 0.1833  loss_mask_0: 0.4612  loss_dice_0: 1.288  loss_ce_1: 0.269  loss_mask_1: 0.444  loss_dice_1: 1.185  loss_ce_2: 0.2474  loss_mask_2: 0.4453  loss_dice_2: 1.128  loss_ce_3: 0.2723  loss_mask_3: 0.4294  loss_dice_3: 1.083  loss_ce_4: 0.2382  loss_mask_4: 0.4238  loss_dice_4: 1.09  loss_ce_5: 0.2468  loss_mask_5: 0.411  loss_dice_5: 1.077  loss_ce_6: 0.2331  loss_mask_6: 0.4189  loss_dice_6: 1.063  loss_ce_7: 0.2442  loss_mask_7: 0.4151  loss_dice_7: 1.07  loss_ce_8: 0.2089  loss_mask_8: 0.4188  loss_dice_8: 1.086    time: 0.9334  last_time: 0.9634  data_time: 0.0326  last_data_time: 0.0324   lr: 0.0001  max_mem: 29899M
[09/04 17:47:09] d2.utils.events INFO:  eta: 0:10:47  iter: 299  total_loss: 17.24  loss_ce: 0.1954  loss_mask: 0.4322  loss_dice: 1.067  loss_ce_0: 0.1744  loss_mask_0: 0.4721  loss_dice_0: 1.193  loss_ce_1: 0.2305  loss_mask_1: 0.4342  loss_dice_1: 1.145  loss_ce_2: 0.2245  loss_mask_2: 0.4263  loss_dice_2: 1.102  loss_ce_3: 0.2096  loss_mask_3: 0.4329  loss_dice_3: 1.104  loss_ce_4: 0.2032  loss_mask_4: 0.4321  loss_dice_4: 1.07  loss_ce_5: 0.1948  loss_mask_5: 0.4355  loss_dice_5: 1.078  loss_ce_6: 0.197  loss_mask_6: 0.4352  loss_dice_6: 1.047  loss_ce_7: 0.2313  loss_mask_7: 0.4346  loss_dice_7: 1.052  loss_ce_8: 0.1905  loss_mask_8: 0.4309  loss_dice_8: 1.067    time: 0.9322  last_time: 0.9040  data_time: 0.0321  last_data_time: 0.0326   lr: 0.0001  max_mem: 29899M
[09/04 17:47:27] d2.utils.events INFO:  eta: 0:10:29  iter: 319  total_loss: 17.4  loss_ce: 0.2292  loss_mask: 0.4392  loss_dice: 1.032  loss_ce_0: 0.1912  loss_mask_0: 0.4698  loss_dice_0: 1.196  loss_ce_1: 0.2416  loss_mask_1: 0.4519  loss_dice_1: 1.116  loss_ce_2: 0.2281  loss_mask_2: 0.4424  loss_dice_2: 1.079  loss_ce_3: 0.2428  loss_mask_3: 0.4534  loss_dice_3: 1.051  loss_ce_4: 0.2335  loss_mask_4: 0.4334  loss_dice_4: 1.046  loss_ce_5: 0.2114  loss_mask_5: 0.436  loss_dice_5: 1.055  loss_ce_6: 0.199  loss_mask_6: 0.4429  loss_dice_6: 1.04  loss_ce_7: 0.2176  loss_mask_7: 0.437  loss_dice_7: 1.042  loss_ce_8: 0.2127  loss_mask_8: 0.4383  loss_dice_8: 1.027    time: 0.9317  last_time: 0.9303  data_time: 0.0315  last_data_time: 0.0321   lr: 0.0001  max_mem: 29899M
[09/04 17:47:46] d2.utils.events INFO:  eta: 0:10:10  iter: 339  total_loss: 17.46  loss_ce: 0.227  loss_mask: 0.4196  loss_dice: 1.071  loss_ce_0: 0.1883  loss_mask_0: 0.4388  loss_dice_0: 1.203  loss_ce_1: 0.2314  loss_mask_1: 0.4135  loss_dice_1: 1.167  loss_ce_2: 0.2274  loss_mask_2: 0.4315  loss_dice_2: 1.125  loss_ce_3: 0.2327  loss_mask_3: 0.4226  loss_dice_3: 1.066  loss_ce_4: 0.2048  loss_mask_4: 0.4214  loss_dice_4: 1.081  loss_ce_5: 0.2063  loss_mask_5: 0.4155  loss_dice_5: 1.085  loss_ce_6: 0.2184  loss_mask_6: 0.4185  loss_dice_6: 1.078  loss_ce_7: 0.2005  loss_mask_7: 0.4183  loss_dice_7: 1.051  loss_ce_8: 0.2243  loss_mask_8: 0.4141  loss_dice_8: 1.077    time: 0.9314  last_time: 0.9793  data_time: 0.0324  last_data_time: 0.0342   lr: 0.0001  max_mem: 29899M
[09/04 17:48:04] d2.utils.events INFO:  eta: 0:09:52  iter: 359  total_loss: 17.25  loss_ce: 0.1746  loss_mask: 0.4286  loss_dice: 1.054  loss_ce_0: 0.1627  loss_mask_0: 0.4538  loss_dice_0: 1.186  loss_ce_1: 0.2131  loss_mask_1: 0.4345  loss_dice_1: 1.126  loss_ce_2: 0.2231  loss_mask_2: 0.4323  loss_dice_2: 1.079  loss_ce_3: 0.1993  loss_mask_3: 0.4275  loss_dice_3: 1.065  loss_ce_4: 0.2064  loss_mask_4: 0.4237  loss_dice_4: 1.063  loss_ce_5: 0.2057  loss_mask_5: 0.4249  loss_dice_5: 1.046  loss_ce_6: 0.1736  loss_mask_6: 0.4291  loss_dice_6: 1.055  loss_ce_7: 0.1938  loss_mask_7: 0.4294  loss_dice_7: 1.054  loss_ce_8: 0.1884  loss_mask_8: 0.4298  loss_dice_8: 1.049    time: 0.9315  last_time: 0.9664  data_time: 0.0367  last_data_time: 0.0353   lr: 0.0001  max_mem: 29899M
[09/04 17:48:23] d2.utils.events INFO:  eta: 0:09:33  iter: 379  total_loss: 16.79  loss_ce: 0.1785  loss_mask: 0.414  loss_dice: 1.034  loss_ce_0: 0.1878  loss_mask_0: 0.4479  loss_dice_0: 1.167  loss_ce_1: 0.2597  loss_mask_1: 0.4365  loss_dice_1: 1.098  loss_ce_2: 0.1934  loss_mask_2: 0.4128  loss_dice_2: 1.104  loss_ce_3: 0.1918  loss_mask_3: 0.4164  loss_dice_3: 1.062  loss_ce_4: 0.2049  loss_mask_4: 0.4111  loss_dice_4: 1.055  loss_ce_5: 0.2018  loss_mask_5: 0.4105  loss_dice_5: 1.07  loss_ce_6: 0.1831  loss_mask_6: 0.415  loss_dice_6: 1.059  loss_ce_7: 0.1946  loss_mask_7: 0.4122  loss_dice_7: 1.061  loss_ce_8: 0.1758  loss_mask_8: 0.4125  loss_dice_8: 1.039    time: 0.9315  last_time: 0.9561  data_time: 0.0369  last_data_time: 0.0346   lr: 0.0001  max_mem: 29899M
[09/04 17:48:42] d2.utils.events INFO:  eta: 0:09:15  iter: 399  total_loss: 16.76  loss_ce: 0.1919  loss_mask: 0.418  loss_dice: 0.9814  loss_ce_0: 0.1857  loss_mask_0: 0.4553  loss_dice_0: 1.14  loss_ce_1: 0.2161  loss_mask_1: 0.4369  loss_dice_1: 1.083  loss_ce_2: 0.2248  loss_mask_2: 0.4194  loss_dice_2: 1.051  loss_ce_3: 0.2227  loss_mask_3: 0.4192  loss_dice_3: 1.016  loss_ce_4: 0.2021  loss_mask_4: 0.418  loss_dice_4: 0.9865  loss_ce_5: 0.2131  loss_mask_5: 0.421  loss_dice_5: 0.986  loss_ce_6: 0.1902  loss_mask_6: 0.4225  loss_dice_6: 1.002  loss_ce_7: 0.2123  loss_mask_7: 0.4209  loss_dice_7: 0.9856  loss_ce_8: 0.1883  loss_mask_8: 0.4224  loss_dice_8: 0.9755    time: 0.9316  last_time: 0.9217  data_time: 0.0359  last_data_time: 0.0341   lr: 0.0001  max_mem: 29899M
[09/04 17:49:01] d2.utils.events INFO:  eta: 0:08:56  iter: 419  total_loss: 16.72  loss_ce: 0.1828  loss_mask: 0.4206  loss_dice: 1.028  loss_ce_0: 0.1744  loss_mask_0: 0.4624  loss_dice_0: 1.161  loss_ce_1: 0.1927  loss_mask_1: 0.4539  loss_dice_1: 1.075  loss_ce_2: 0.198  loss_mask_2: 0.4459  loss_dice_2: 1.089  loss_ce_3: 0.1852  loss_mask_3: 0.4378  loss_dice_3: 1.025  loss_ce_4: 0.1947  loss_mask_4: 0.4231  loss_dice_4: 1.01  loss_ce_5: 0.1977  loss_mask_5: 0.4248  loss_dice_5: 1.031  loss_ce_6: 0.1619  loss_mask_6: 0.4298  loss_dice_6: 1.006  loss_ce_7: 0.1829  loss_mask_7: 0.4297  loss_dice_7: 1.038  loss_ce_8: 0.1859  loss_mask_8: 0.4328  loss_dice_8: 1.034    time: 0.9326  last_time: 0.9527  data_time: 0.0400  last_data_time: 0.0333   lr: 0.0001  max_mem: 29899M
[09/04 17:49:20] d2.utils.events INFO:  eta: 0:08:38  iter: 439  total_loss: 16.51  loss_ce: 0.207  loss_mask: 0.4131  loss_dice: 1.044  loss_ce_0: 0.2012  loss_mask_0: 0.4461  loss_dice_0: 1.152  loss_ce_1: 0.1963  loss_mask_1: 0.4225  loss_dice_1: 1.098  loss_ce_2: 0.1977  loss_mask_2: 0.4203  loss_dice_2: 1.049  loss_ce_3: 0.1983  loss_mask_3: 0.4183  loss_dice_3: 1.052  loss_ce_4: 0.1926  loss_mask_4: 0.418  loss_dice_4: 1.034  loss_ce_5: 0.1971  loss_mask_5: 0.4166  loss_dice_5: 1.048  loss_ce_6: 0.182  loss_mask_6: 0.4144  loss_dice_6: 1.021  loss_ce_7: 0.1725  loss_mask_7: 0.4123  loss_dice_7: 1.032  loss_ce_8: 0.1903  loss_mask_8: 0.4116  loss_dice_8: 1.03    time: 0.9333  last_time: 0.9514  data_time: 0.0386  last_data_time: 0.0425   lr: 0.0001  max_mem: 29899M
[09/04 17:49:39] d2.utils.events INFO:  eta: 0:08:20  iter: 459  total_loss: 16.59  loss_ce: 0.1816  loss_mask: 0.4171  loss_dice: 0.9982  loss_ce_0: 0.1975  loss_mask_0: 0.4524  loss_dice_0: 1.156  loss_ce_1: 0.2057  loss_mask_1: 0.433  loss_dice_1: 1.075  loss_ce_2: 0.2157  loss_mask_2: 0.4252  loss_dice_2: 1.027  loss_ce_3: 0.2361  loss_mask_3: 0.4151  loss_dice_3: 0.9999  loss_ce_4: 0.1966  loss_mask_4: 0.4187  loss_dice_4: 1.031  loss_ce_5: 0.186  loss_mask_5: 0.4114  loss_dice_5: 1.026  loss_ce_6: 0.1775  loss_mask_6: 0.4076  loss_dice_6: 1.015  loss_ce_7: 0.1885  loss_mask_7: 0.423  loss_dice_7: 1.001  loss_ce_8: 0.1842  loss_mask_8: 0.4135  loss_dice_8: 1.006    time: 0.9335  last_time: 0.9204  data_time: 0.0407  last_data_time: 0.0352   lr: 0.0001  max_mem: 29899M
[09/04 17:49:57] d2.utils.events INFO:  eta: 0:08:01  iter: 479  total_loss: 16.91  loss_ce: 0.2108  loss_mask: 0.4229  loss_dice: 0.9751  loss_ce_0: 0.21  loss_mask_0: 0.4598  loss_dice_0: 1.138  loss_ce_1: 0.2206  loss_mask_1: 0.4438  loss_dice_1: 1.094  loss_ce_2: 0.2049  loss_mask_2: 0.4286  loss_dice_2: 1.057  loss_ce_3: 0.2003  loss_mask_3: 0.4365  loss_dice_3: 1.023  loss_ce_4: 0.191  loss_mask_4: 0.4102  loss_dice_4: 1.027  loss_ce_5: 0.2086  loss_mask_5: 0.4143  loss_dice_5: 1.003  loss_ce_6: 0.2014  loss_mask_6: 0.4155  loss_dice_6: 1.008  loss_ce_7: 0.1837  loss_mask_7: 0.4128  loss_dice_7: 1.027  loss_ce_8: 0.1882  loss_mask_8: 0.4187  loss_dice_8: 1.001    time: 0.9335  last_time: 0.9527  data_time: 0.0365  last_data_time: 0.0347   lr: 0.0001  max_mem: 29899M
[09/04 17:50:16] d2.utils.events INFO:  eta: 0:07:43  iter: 499  total_loss: 16.87  loss_ce: 0.196  loss_mask: 0.4023  loss_dice: 0.9938  loss_ce_0: 0.1867  loss_mask_0: 0.4372  loss_dice_0: 1.139  loss_ce_1: 0.1914  loss_mask_1: 0.4212  loss_dice_1: 1.07  loss_ce_2: 0.2391  loss_mask_2: 0.4103  loss_dice_2: 1.055  loss_ce_3: 0.2082  loss_mask_3: 0.4048  loss_dice_3: 1.027  loss_ce_4: 0.2166  loss_mask_4: 0.4067  loss_dice_4: 1.036  loss_ce_5: 0.1961  loss_mask_5: 0.4047  loss_dice_5: 1.036  loss_ce_6: 0.1955  loss_mask_6: 0.4029  loss_dice_6: 1.028  loss_ce_7: 0.186  loss_mask_7: 0.4045  loss_dice_7: 1.017  loss_ce_8: 0.1853  loss_mask_8: 0.3996  loss_dice_8: 1.024    time: 0.9335  last_time: 0.9311  data_time: 0.0368  last_data_time: 0.0373   lr: 0.0001  max_mem: 29899M
[09/04 17:50:35] d2.utils.events INFO:  eta: 0:07:25  iter: 519  total_loss: 15.71  loss_ce: 0.1895  loss_mask: 0.3737  loss_dice: 0.969  loss_ce_0: 0.1725  loss_mask_0: 0.4263  loss_dice_0: 1.14  loss_ce_1: 0.2036  loss_mask_1: 0.3972  loss_dice_1: 1.063  loss_ce_2: 0.2072  loss_mask_2: 0.3808  loss_dice_2: 1.017  loss_ce_3: 0.2068  loss_mask_3: 0.3828  loss_dice_3: 0.9891  loss_ce_4: 0.1984  loss_mask_4: 0.3761  loss_dice_4: 0.9864  loss_ce_5: 0.1955  loss_mask_5: 0.374  loss_dice_5: 1.014  loss_ce_6: 0.1896  loss_mask_6: 0.3752  loss_dice_6: 0.995  loss_ce_7: 0.1891  loss_mask_7: 0.374  loss_dice_7: 0.9775  loss_ce_8: 0.1797  loss_mask_8: 0.3787  loss_dice_8: 1.015    time: 0.9337  last_time: 0.9265  data_time: 0.0364  last_data_time: 0.0363   lr: 0.0001  max_mem: 29899M
[09/04 17:50:54] d2.utils.events INFO:  eta: 0:07:06  iter: 539  total_loss: 16.75  loss_ce: 0.2019  loss_mask: 0.4181  loss_dice: 1.025  loss_ce_0: 0.1945  loss_mask_0: 0.4527  loss_dice_0: 1.161  loss_ce_1: 0.2064  loss_mask_1: 0.4328  loss_dice_1: 1.094  loss_ce_2: 0.2102  loss_mask_2: 0.4143  loss_dice_2: 1.058  loss_ce_3: 0.2003  loss_mask_3: 0.4231  loss_dice_3: 1.038  loss_ce_4: 0.1992  loss_mask_4: 0.414  loss_dice_4: 1.037  loss_ce_5: 0.1807  loss_mask_5: 0.4109  loss_dice_5: 1.02  loss_ce_6: 0.2087  loss_mask_6: 0.4099  loss_dice_6: 1.008  loss_ce_7: 0.1711  loss_mask_7: 0.4141  loss_dice_7: 1.027  loss_ce_8: 0.1729  loss_mask_8: 0.4112  loss_dice_8: 1.01    time: 0.9337  last_time: 0.9369  data_time: 0.0394  last_data_time: 0.0439   lr: 0.0001  max_mem: 29899M
[09/04 17:51:12] d2.utils.events INFO:  eta: 0:06:48  iter: 559  total_loss: 16.91  loss_ce: 0.1612  loss_mask: 0.4297  loss_dice: 1.007  loss_ce_0: 0.1743  loss_mask_0: 0.4748  loss_dice_0: 1.134  loss_ce_1: 0.1825  loss_mask_1: 0.4469  loss_dice_1: 1.097  loss_ce_2: 0.2  loss_mask_2: 0.4303  loss_dice_2: 1.06  loss_ce_3: 0.1782  loss_mask_3: 0.4247  loss_dice_3: 1.046  loss_ce_4: 0.1958  loss_mask_4: 0.4248  loss_dice_4: 1.007  loss_ce_5: 0.1829  loss_mask_5: 0.4251  loss_dice_5: 1.051  loss_ce_6: 0.172  loss_mask_6: 0.4256  loss_dice_6: 1.036  loss_ce_7: 0.1647  loss_mask_7: 0.4268  loss_dice_7: 1.033  loss_ce_8: 0.1787  loss_mask_8: 0.4303  loss_dice_8: 1.017    time: 0.9337  last_time: 0.9401  data_time: 0.0388  last_data_time: 0.0423   lr: 0.0001  max_mem: 29899M
[09/04 17:51:31] d2.utils.events INFO:  eta: 0:06:30  iter: 579  total_loss: 16.65  loss_ce: 0.1825  loss_mask: 0.3839  loss_dice: 0.9861  loss_ce_0: 0.1939  loss_mask_0: 0.4214  loss_dice_0: 1.134  loss_ce_1: 0.1867  loss_mask_1: 0.3984  loss_dice_1: 1.064  loss_ce_2: 0.1947  loss_mask_2: 0.3897  loss_dice_2: 1.028  loss_ce_3: 0.2021  loss_mask_3: 0.3921  loss_dice_3: 1.015  loss_ce_4: 0.1898  loss_mask_4: 0.3912  loss_dice_4: 1.024  loss_ce_5: 0.196  loss_mask_5: 0.3909  loss_dice_5: 1.005  loss_ce_6: 0.1867  loss_mask_6: 0.3879  loss_dice_6: 1.005  loss_ce_7: 0.1873  loss_mask_7: 0.3951  loss_dice_7: 1.014  loss_ce_8: 0.1924  loss_mask_8: 0.3875  loss_dice_8: 0.995    time: 0.9341  last_time: 0.9669  data_time: 0.0419  last_data_time: 0.0347   lr: 0.0001  max_mem: 29899M
[09/04 17:51:50] d2.utils.events INFO:  eta: 0:06:11  iter: 599  total_loss: 16.46  loss_ce: 0.1967  loss_mask: 0.3798  loss_dice: 0.9637  loss_ce_0: 0.2015  loss_mask_0: 0.449  loss_dice_0: 1.115  loss_ce_1: 0.2038  loss_mask_1: 0.4116  loss_dice_1: 1.055  loss_ce_2: 0.192  loss_mask_2: 0.4023  loss_dice_2: 1.015  loss_ce_3: 0.1952  loss_mask_3: 0.3827  loss_dice_3: 1.001  loss_ce_4: 0.2036  loss_mask_4: 0.3848  loss_dice_4: 1.014  loss_ce_5: 0.1937  loss_mask_5: 0.3856  loss_dice_5: 0.995  loss_ce_6: 0.2102  loss_mask_6: 0.3815  loss_dice_6: 0.98  loss_ce_7: 0.206  loss_mask_7: 0.3853  loss_dice_7: 0.9721  loss_ce_8: 0.1901  loss_mask_8: 0.3881  loss_dice_8: 0.9844    time: 0.9346  last_time: 0.9302  data_time: 0.0401  last_data_time: 0.0343   lr: 0.0001  max_mem: 29899M
[09/04 17:52:10] d2.utils.events INFO:  eta: 0:05:53  iter: 619  total_loss: 16.25  loss_ce: 0.1855  loss_mask: 0.4084  loss_dice: 0.971  loss_ce_0: 0.2087  loss_mask_0: 0.4288  loss_dice_0: 1.11  loss_ce_1: 0.2215  loss_mask_1: 0.4163  loss_dice_1: 1.061  loss_ce_2: 0.2135  loss_mask_2: 0.4159  loss_dice_2: 1.005  loss_ce_3: 0.2118  loss_mask_3: 0.4112  loss_dice_3: 1.005  loss_ce_4: 0.1939  loss_mask_4: 0.4066  loss_dice_4: 1.003  loss_ce_5: 0.1855  loss_mask_5: 0.4073  loss_dice_5: 0.972  loss_ce_6: 0.2097  loss_mask_6: 0.4019  loss_dice_6: 0.9875  loss_ce_7: 0.1942  loss_mask_7: 0.4032  loss_dice_7: 0.9869  loss_ce_8: 0.1881  loss_mask_8: 0.4002  loss_dice_8: 0.9894    time: 0.9353  last_time: 0.9582  data_time: 0.0432  last_data_time: 0.0374   lr: 0.0001  max_mem: 29899M
[09/04 17:52:28] d2.utils.events INFO:  eta: 0:05:34  iter: 639  total_loss: 16.41  loss_ce: 0.2007  loss_mask: 0.378  loss_dice: 1.005  loss_ce_0: 0.1874  loss_mask_0: 0.41  loss_dice_0: 1.119  loss_ce_1: 0.2039  loss_mask_1: 0.3962  loss_dice_1: 1.071  loss_ce_2: 0.1997  loss_mask_2: 0.3861  loss_dice_2: 1.041  loss_ce_3: 0.211  loss_mask_3: 0.3778  loss_dice_3: 1.005  loss_ce_4: 0.218  loss_mask_4: 0.3775  loss_dice_4: 1.027  loss_ce_5: 0.1864  loss_mask_5: 0.3807  loss_dice_5: 0.9968  loss_ce_6: 0.1896  loss_mask_6: 0.3732  loss_dice_6: 0.9995  loss_ce_7: 0.1999  loss_mask_7: 0.3729  loss_dice_7: 0.9974  loss_ce_8: 0.1985  loss_mask_8: 0.3746  loss_dice_8: 1.017    time: 0.9353  last_time: 0.9438  data_time: 0.0402  last_data_time: 0.0354   lr: 0.0001  max_mem: 29899M
[09/04 17:52:48] d2.utils.events INFO:  eta: 0:05:16  iter: 659  total_loss: 16.47  loss_ce: 0.1853  loss_mask: 0.3893  loss_dice: 0.9938  loss_ce_0: 0.1855  loss_mask_0: 0.4403  loss_dice_0: 1.095  loss_ce_1: 0.1965  loss_mask_1: 0.4056  loss_dice_1: 1.084  loss_ce_2: 0.1963  loss_mask_2: 0.4014  loss_dice_2: 1.037  loss_ce_3: 0.2117  loss_mask_3: 0.4052  loss_dice_3: 1.031  loss_ce_4: 0.1889  loss_mask_4: 0.404  loss_dice_4: 1.01  loss_ce_5: 0.1851  loss_mask_5: 0.405  loss_dice_5: 1.019  loss_ce_6: 0.1829  loss_mask_6: 0.3981  loss_dice_6: 1.015  loss_ce_7: 0.1941  loss_mask_7: 0.3942  loss_dice_7: 1.026  loss_ce_8: 0.1863  loss_mask_8: 0.3976  loss_dice_8: 0.9937    time: 0.9359  last_time: 0.9362  data_time: 0.0440  last_data_time: 0.0460   lr: 0.0001  max_mem: 29899M
[09/04 17:53:07] d2.utils.events INFO:  eta: 0:04:57  iter: 679  total_loss: 16.39  loss_ce: 0.1774  loss_mask: 0.382  loss_dice: 0.9955  loss_ce_0: 0.1782  loss_mask_0: 0.4222  loss_dice_0: 1.142  loss_ce_1: 0.2055  loss_mask_1: 0.3982  loss_dice_1: 1.067  loss_ce_2: 0.2182  loss_mask_2: 0.3948  loss_dice_2: 1.044  loss_ce_3: 0.1987  loss_mask_3: 0.3814  loss_dice_3: 1.016  loss_ce_4: 0.1913  loss_mask_4: 0.3817  loss_dice_4: 1.014  loss_ce_5: 0.1617  loss_mask_5: 0.3847  loss_dice_5: 1.006  loss_ce_6: 0.1767  loss_mask_6: 0.3793  loss_dice_6: 1.019  loss_ce_7: 0.1577  loss_mask_7: 0.3854  loss_dice_7: 1.001  loss_ce_8: 0.1657  loss_mask_8: 0.3816  loss_dice_8: 1.007    time: 0.9366  last_time: 0.9374  data_time: 0.0457  last_data_time: 0.0374   lr: 0.0001  max_mem: 29899M
[09/04 17:53:26] d2.utils.events INFO:  eta: 0:04:39  iter: 699  total_loss: 16.73  loss_ce: 0.202  loss_mask: 0.4038  loss_dice: 0.9928  loss_ce_0: 0.1911  loss_mask_0: 0.4246  loss_dice_0: 1.157  loss_ce_1: 0.2378  loss_mask_1: 0.4094  loss_dice_1: 1.092  loss_ce_2: 0.2181  loss_mask_2: 0.4013  loss_dice_2: 1.052  loss_ce_3: 0.2265  loss_mask_3: 0.3994  loss_dice_3: 1.048  loss_ce_4: 0.2161  loss_mask_4: 0.4038  loss_dice_4: 1.026  loss_ce_5: 0.184  loss_mask_5: 0.3992  loss_dice_5: 1.001  loss_ce_6: 0.2031  loss_mask_6: 0.3984  loss_dice_6: 1.002  loss_ce_7: 0.2071  loss_mask_7: 0.399  loss_dice_7: 1.008  loss_ce_8: 0.2064  loss_mask_8: 0.3996  loss_dice_8: 1.011    time: 0.9370  last_time: 0.9324  data_time: 0.0432  last_data_time: 0.0409   lr: 0.0001  max_mem: 29899M
[09/04 17:53:45] d2.utils.events INFO:  eta: 0:04:20  iter: 719  total_loss: 16.6  loss_ce: 0.1999  loss_mask: 0.4224  loss_dice: 0.9947  loss_ce_0: 0.19  loss_mask_0: 0.4438  loss_dice_0: 1.106  loss_ce_1: 0.2219  loss_mask_1: 0.4343  loss_dice_1: 1.097  loss_ce_2: 0.2275  loss_mask_2: 0.4253  loss_dice_2: 1.079  loss_ce_3: 0.1797  loss_mask_3: 0.418  loss_dice_3: 1.023  loss_ce_4: 0.1879  loss_mask_4: 0.4266  loss_dice_4: 1.04  loss_ce_5: 0.1925  loss_mask_5: 0.4245  loss_dice_5: 1.027  loss_ce_6: 0.1987  loss_mask_6: 0.4341  loss_dice_6: 1.011  loss_ce_7: 0.1957  loss_mask_7: 0.4248  loss_dice_7: 1.009  loss_ce_8: 0.2034  loss_mask_8: 0.4252  loss_dice_8: 1.013    time: 0.9369  last_time: 0.9449  data_time: 0.0402  last_data_time: 0.0422   lr: 0.0001  max_mem: 29899M
[09/04 17:54:04] d2.utils.events INFO:  eta: 0:04:02  iter: 739  total_loss: 16.11  loss_ce: 0.1925  loss_mask: 0.4133  loss_dice: 0.9473  loss_ce_0: 0.187  loss_mask_0: 0.4384  loss_dice_0: 1.06  loss_ce_1: 0.2084  loss_mask_1: 0.4085  loss_dice_1: 1.015  loss_ce_2: 0.2405  loss_mask_2: 0.4049  loss_dice_2: 0.9887  loss_ce_3: 0.1865  loss_mask_3: 0.4066  loss_dice_3: 0.9647  loss_ce_4: 0.2055  loss_mask_4: 0.4114  loss_dice_4: 0.9662  loss_ce_5: 0.1982  loss_mask_5: 0.4114  loss_dice_5: 0.9709  loss_ce_6: 0.1738  loss_mask_6: 0.4095  loss_dice_6: 0.9481  loss_ce_7: 0.186  loss_mask_7: 0.4113  loss_dice_7: 0.9565  loss_ce_8: 0.1813  loss_mask_8: 0.4113  loss_dice_8: 0.9621    time: 0.9372  last_time: 0.9471  data_time: 0.0406  last_data_time: 0.0383   lr: 0.0001  max_mem: 29899M
[09/04 17:54:22] d2.utils.events INFO:  eta: 0:03:43  iter: 759  total_loss: 14.75  loss_ce: 0.163  loss_mask: 0.3708  loss_dice: 0.911  loss_ce_0: 0.1812  loss_mask_0: 0.4177  loss_dice_0: 1.023  loss_ce_1: 0.1895  loss_mask_1: 0.3969  loss_dice_1: 0.9671  loss_ce_2: 0.1653  loss_mask_2: 0.3829  loss_dice_2: 0.9689  loss_ce_3: 0.1776  loss_mask_3: 0.373  loss_dice_3: 0.9175  loss_ce_4: 0.1724  loss_mask_4: 0.3708  loss_dice_4: 0.9089  loss_ce_5: 0.1476  loss_mask_5: 0.3696  loss_dice_5: 0.9209  loss_ce_6: 0.1478  loss_mask_6: 0.3659  loss_dice_6: 0.9027  loss_ce_7: 0.1618  loss_mask_7: 0.37  loss_dice_7: 0.9173  loss_ce_8: 0.1635  loss_mask_8: 0.3675  loss_dice_8: 0.9176    time: 0.9372  last_time: 0.9099  data_time: 0.0420  last_data_time: 0.0382   lr: 0.0001  max_mem: 29899M
[09/04 17:54:41] d2.utils.events INFO:  eta: 0:03:25  iter: 779  total_loss: 16.15  loss_ce: 0.1924  loss_mask: 0.3882  loss_dice: 0.993  loss_ce_0: 0.1813  loss_mask_0: 0.4099  loss_dice_0: 1.122  loss_ce_1: 0.2087  loss_mask_1: 0.4034  loss_dice_1: 1.051  loss_ce_2: 0.2329  loss_mask_2: 0.3942  loss_dice_2: 1.013  loss_ce_3: 0.2079  loss_mask_3: 0.3924  loss_dice_3: 0.9984  loss_ce_4: 0.2116  loss_mask_4: 0.3916  loss_dice_4: 1.006  loss_ce_5: 0.2013  loss_mask_5: 0.3912  loss_dice_5: 1.017  loss_ce_6: 0.2098  loss_mask_6: 0.3952  loss_dice_6: 1.004  loss_ce_7: 0.1987  loss_mask_7: 0.391  loss_dice_7: 1.011  loss_ce_8: 0.1849  loss_mask_8: 0.3897  loss_dice_8: 1.003    time: 0.9373  last_time: 0.9602  data_time: 0.0394  last_data_time: 0.0474   lr: 0.0001  max_mem: 29899M
[09/04 17:55:00] d2.utils.events INFO:  eta: 0:03:06  iter: 799  total_loss: 14.95  loss_ce: 0.1653  loss_mask: 0.3592  loss_dice: 0.9203  loss_ce_0: 0.1553  loss_mask_0: 0.3973  loss_dice_0: 1.044  loss_ce_1: 0.1848  loss_mask_1: 0.3822  loss_dice_1: 0.9863  loss_ce_2: 0.1844  loss_mask_2: 0.3735  loss_dice_2: 0.9512  loss_ce_3: 0.1745  loss_mask_3: 0.3718  loss_dice_3: 0.9285  loss_ce_4: 0.1647  loss_mask_4: 0.3692  loss_dice_4: 0.9061  loss_ce_5: 0.1562  loss_mask_5: 0.3719  loss_dice_5: 0.9358  loss_ce_6: 0.1641  loss_mask_6: 0.3636  loss_dice_6: 0.9284  loss_ce_7: 0.142  loss_mask_7: 0.364  loss_dice_7: 0.9352  loss_ce_8: 0.1536  loss_mask_8: 0.3657  loss_dice_8: 0.9141    time: 0.9373  last_time: 0.9791  data_time: 0.0382  last_data_time: 0.0381   lr: 0.0001  max_mem: 29899M
[09/04 17:55:19] d2.utils.events INFO:  eta: 0:02:47  iter: 819  total_loss: 14.9  loss_ce: 0.1702  loss_mask: 0.3564  loss_dice: 0.9303  loss_ce_0: 0.1778  loss_mask_0: 0.3959  loss_dice_0: 1.034  loss_ce_1: 0.1729  loss_mask_1: 0.3756  loss_dice_1: 0.9662  loss_ce_2: 0.1942  loss_mask_2: 0.3624  loss_dice_2: 0.9557  loss_ce_3: 0.2055  loss_mask_3: 0.3574  loss_dice_3: 0.9385  loss_ce_4: 0.1787  loss_mask_4: 0.3551  loss_dice_4: 0.94  loss_ce_5: 0.1739  loss_mask_5: 0.3533  loss_dice_5: 0.9199  loss_ce_6: 0.1781  loss_mask_6: 0.3525  loss_dice_6: 0.9131  loss_ce_7: 0.1746  loss_mask_7: 0.3532  loss_dice_7: 0.9449  loss_ce_8: 0.1866  loss_mask_8: 0.3552  loss_dice_8: 0.9097    time: 0.9374  last_time: 0.9194  data_time: 0.0414  last_data_time: 0.0343   lr: 0.0001  max_mem: 29899M
[09/04 17:55:38] d2.utils.events INFO:  eta: 0:02:29  iter: 839  total_loss: 16.02  loss_ce: 0.1815  loss_mask: 0.3869  loss_dice: 1.005  loss_ce_0: 0.1774  loss_mask_0: 0.4358  loss_dice_0: 1.136  loss_ce_1: 0.178  loss_mask_1: 0.4134  loss_dice_1: 1.071  loss_ce_2: 0.1817  loss_mask_2: 0.3977  loss_dice_2: 1.046  loss_ce_3: 0.1752  loss_mask_3: 0.3969  loss_dice_3: 0.9981  loss_ce_4: 0.1606  loss_mask_4: 0.4007  loss_dice_4: 0.9945  loss_ce_5: 0.1743  loss_mask_5: 0.3936  loss_dice_5: 1.013  loss_ce_6: 0.1738  loss_mask_6: 0.3959  loss_dice_6: 0.9949  loss_ce_7: 0.1826  loss_mask_7: 0.397  loss_dice_7: 0.9919  loss_ce_8: 0.1928  loss_mask_8: 0.3988  loss_dice_8: 0.9974    time: 0.9374  last_time: 0.9192  data_time: 0.0396  last_data_time: 0.0371   lr: 0.0001  max_mem: 29899M
[09/04 17:55:57] d2.utils.events INFO:  eta: 0:02:10  iter: 859  total_loss: 16.03  loss_ce: 0.1423  loss_mask: 0.3891  loss_dice: 0.9934  loss_ce_0: 0.1837  loss_mask_0: 0.43  loss_dice_0: 1.09  loss_ce_1: 0.196  loss_mask_1: 0.394  loss_dice_1: 1.067  loss_ce_2: 0.1722  loss_mask_2: 0.3887  loss_dice_2: 1.035  loss_ce_3: 0.174  loss_mask_3: 0.3883  loss_dice_3: 1.007  loss_ce_4: 0.1624  loss_mask_4: 0.39  loss_dice_4: 0.9904  loss_ce_5: 0.1448  loss_mask_5: 0.3951  loss_dice_5: 0.9841  loss_ce_6: 0.1488  loss_mask_6: 0.3915  loss_dice_6: 0.9828  loss_ce_7: 0.1663  loss_mask_7: 0.3894  loss_dice_7: 0.9708  loss_ce_8: 0.1565  loss_mask_8: 0.3916  loss_dice_8: 0.9866    time: 0.9379  last_time: 0.9801  data_time: 0.0414  last_data_time: 0.0460   lr: 0.0001  max_mem: 29899M
[09/04 17:56:16] d2.utils.events INFO:  eta: 0:01:51  iter: 879  total_loss: 15.53  loss_ce: 0.1875  loss_mask: 0.3842  loss_dice: 0.9429  loss_ce_0: 0.1854  loss_mask_0: 0.4172  loss_dice_0: 1.05  loss_ce_1: 0.2069  loss_mask_1: 0.3948  loss_dice_1: 0.9993  loss_ce_2: 0.2225  loss_mask_2: 0.3887  loss_dice_2: 0.9459  loss_ce_3: 0.2249  loss_mask_3: 0.3886  loss_dice_3: 0.932  loss_ce_4: 0.2123  loss_mask_4: 0.3855  loss_dice_4: 0.9536  loss_ce_5: 0.1955  loss_mask_5: 0.3873  loss_dice_5: 0.9495  loss_ce_6: 0.197  loss_mask_6: 0.384  loss_dice_6: 0.9547  loss_ce_7: 0.1951  loss_mask_7: 0.3838  loss_dice_7: 0.9438  loss_ce_8: 0.2139  loss_mask_8: 0.3832  loss_dice_8: 0.9479    time: 0.9383  last_time: 0.9513  data_time: 0.0411  last_data_time: 0.0419   lr: 0.0001  max_mem: 29899M
[09/04 17:56:35] d2.utils.events INFO:  eta: 0:01:33  iter: 899  total_loss: 15.35  loss_ce: 0.1547  loss_mask: 0.3796  loss_dice: 0.9368  loss_ce_0: 0.1793  loss_mask_0: 0.4102  loss_dice_0: 1.073  loss_ce_1: 0.2089  loss_mask_1: 0.3968  loss_dice_1: 1.005  loss_ce_2: 0.2121  loss_mask_2: 0.3801  loss_dice_2: 0.9925  loss_ce_3: 0.1856  loss_mask_3: 0.381  loss_dice_3: 0.936  loss_ce_4: 0.1691  loss_mask_4: 0.3784  loss_dice_4: 0.9674  loss_ce_5: 0.1665  loss_mask_5: 0.3781  loss_dice_5: 0.982  loss_ce_6: 0.1748  loss_mask_6: 0.3774  loss_dice_6: 0.9538  loss_ce_7: 0.1637  loss_mask_7: 0.379  loss_dice_7: 0.9331  loss_ce_8: 0.1681  loss_mask_8: 0.3889  loss_dice_8: 0.9401    time: 0.9385  last_time: 0.9673  data_time: 0.0425  last_data_time: 0.0382   lr: 0.0001  max_mem: 29899M
[09/04 17:56:54] d2.utils.events INFO:  eta: 0:01:14  iter: 919  total_loss: 15.2  loss_ce: 0.1491  loss_mask: 0.382  loss_dice: 0.9291  loss_ce_0: 0.1725  loss_mask_0: 0.4249  loss_dice_0: 1.032  loss_ce_1: 0.1774  loss_mask_1: 0.3967  loss_dice_1: 0.9963  loss_ce_2: 0.1882  loss_mask_2: 0.3885  loss_dice_2: 0.9667  loss_ce_3: 0.191  loss_mask_3: 0.3853  loss_dice_3: 0.9466  loss_ce_4: 0.1531  loss_mask_4: 0.3858  loss_dice_4: 0.9525  loss_ce_5: 0.1439  loss_mask_5: 0.3846  loss_dice_5: 0.9473  loss_ce_6: 0.1336  loss_mask_6: 0.3857  loss_dice_6: 0.9401  loss_ce_7: 0.1503  loss_mask_7: 0.385  loss_dice_7: 0.9549  loss_ce_8: 0.149  loss_mask_8: 0.3839  loss_dice_8: 0.9474    time: 0.9388  last_time: 0.9757  data_time: 0.0430  last_data_time: 0.0455   lr: 0.0001  max_mem: 29899M
[09/04 17:57:13] d2.utils.events INFO:  eta: 0:00:56  iter: 939  total_loss: 15.37  loss_ce: 0.1611  loss_mask: 0.3724  loss_dice: 0.9363  loss_ce_0: 0.174  loss_mask_0: 0.4237  loss_dice_0: 1.054  loss_ce_1: 0.1933  loss_mask_1: 0.4034  loss_dice_1: 1.02  loss_ce_2: 0.1804  loss_mask_2: 0.388  loss_dice_2: 0.9894  loss_ce_3: 0.1807  loss_mask_3: 0.3785  loss_dice_3: 0.9597  loss_ce_4: 0.1571  loss_mask_4: 0.3754  loss_dice_4: 0.9523  loss_ce_5: 0.1694  loss_mask_5: 0.3743  loss_dice_5: 0.9736  loss_ce_6: 0.1648  loss_mask_6: 0.3848  loss_dice_6: 0.9659  loss_ce_7: 0.173  loss_mask_7: 0.3724  loss_dice_7: 0.9246  loss_ce_8: 0.1738  loss_mask_8: 0.3788  loss_dice_8: 0.9625    time: 0.9391  last_time: 0.9644  data_time: 0.0415  last_data_time: 0.0439   lr: 0.0001  max_mem: 29899M
[09/04 17:57:33] d2.utils.events INFO:  eta: 0:00:37  iter: 959  total_loss: 15.73  loss_ce: 0.1897  loss_mask: 0.3834  loss_dice: 0.9541  loss_ce_0: 0.1712  loss_mask_0: 0.4081  loss_dice_0: 1.071  loss_ce_1: 0.218  loss_mask_1: 0.3976  loss_dice_1: 1.021  loss_ce_2: 0.1858  loss_mask_2: 0.3912  loss_dice_2: 0.9871  loss_ce_3: 0.1945  loss_mask_3: 0.389  loss_dice_3: 0.9444  loss_ce_4: 0.1924  loss_mask_4: 0.3795  loss_dice_4: 0.9466  loss_ce_5: 0.1887  loss_mask_5: 0.3856  loss_dice_5: 0.9447  loss_ce_6: 0.1892  loss_mask_6: 0.3835  loss_dice_6: 0.9551  loss_ce_7: 0.1732  loss_mask_7: 0.3839  loss_dice_7: 0.9506  loss_ce_8: 0.1862  loss_mask_8: 0.3859  loss_dice_8: 0.9313    time: 0.9394  last_time: 0.9841  data_time: 0.0397  last_data_time: 0.0369   lr: 0.0001  max_mem: 29899M
[09/04 17:57:52] d2.utils.events INFO:  eta: 0:00:18  iter: 979  total_loss: 15.36  loss_ce: 0.1553  loss_mask: 0.3978  loss_dice: 0.9303  loss_ce_0: 0.1647  loss_mask_0: 0.4372  loss_dice_0: 1.061  loss_ce_1: 0.1729  loss_mask_1: 0.4181  loss_dice_1: 1.005  loss_ce_2: 0.189  loss_mask_2: 0.4039  loss_dice_2: 0.9868  loss_ce_3: 0.1742  loss_mask_3: 0.4025  loss_dice_3: 0.9621  loss_ce_4: 0.1882  loss_mask_4: 0.3868  loss_dice_4: 0.9541  loss_ce_5: 0.1549  loss_mask_5: 0.399  loss_dice_5: 0.9503  loss_ce_6: 0.1612  loss_mask_6: 0.3961  loss_dice_6: 0.9503  loss_ce_7: 0.1612  loss_mask_7: 0.4012  loss_dice_7: 0.9424  loss_ce_8: 0.1544  loss_mask_8: 0.3986  loss_dice_8: 0.939    time: 0.9396  last_time: 0.9293  data_time: 0.0395  last_data_time: 0.0356   lr: 0.0001  max_mem: 29899M
[09/04 17:58:11] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Normal/r50_008_1000_19/model_final.pth
[09/04 17:58:14] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 14.79  loss_ce: 0.1743  loss_mask: 0.3623  loss_dice: 0.9002  loss_ce_0: 0.1591  loss_mask_0: 0.4152  loss_dice_0: 1.046  loss_ce_1: 0.1849  loss_mask_1: 0.3842  loss_dice_1: 0.979  loss_ce_2: 0.1817  loss_mask_2: 0.3984  loss_dice_2: 0.9436  loss_ce_3: 0.1818  loss_mask_3: 0.3862  loss_dice_3: 0.9455  loss_ce_4: 0.1807  loss_mask_4: 0.3853  loss_dice_4: 0.9474  loss_ce_5: 0.1536  loss_mask_5: 0.3832  loss_dice_5: 0.9218  loss_ce_6: 0.171  loss_mask_6: 0.3774  loss_dice_6: 0.932  loss_ce_7: 0.15  loss_mask_7: 0.3668  loss_dice_7: 0.9032  loss_ce_8: 0.1545  loss_mask_8: 0.3656  loss_dice_8: 0.914    time: 0.9400  last_time: 0.9355  data_time: 0.0418  last_data_time: 0.0442   lr: 0.0001  max_mem: 29899M
[09/04 17:58:14] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:15:38 (0.9400 s / it)
[09/04 17:58:14] d2.engine.hooks INFO: Total training time: 0:15:44 (0:00:06 on hooks)
[09/04 17:58:14] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[09/04 17:58:15] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[09/04 17:58:15] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/04 17:58:15] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[09/04 17:58:15] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[09/04 17:58:15] d2.evaluation.evaluator INFO: Start inference on 500 batches
[09/04 17:58:19] d2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0038 s/iter. Inference: 0.1961 s/iter. Eval: 0.0669 s/iter. Total: 0.2668 s/iter. ETA=0:02:10
[09/04 17:58:24] d2.evaluation.evaluator INFO: Inference done 30/500. Dataloading: 0.0047 s/iter. Inference: 0.2022 s/iter. Eval: 0.0664 s/iter. Total: 0.2733 s/iter. ETA=0:02:08
[09/04 17:58:29] d2.evaluation.evaluator INFO: Inference done 49/500. Dataloading: 0.0048 s/iter. Inference: 0.2028 s/iter. Eval: 0.0660 s/iter. Total: 0.2737 s/iter. ETA=0:02:03
[09/04 17:58:34] d2.evaluation.evaluator INFO: Inference done 68/500. Dataloading: 0.0049 s/iter. Inference: 0.2034 s/iter. Eval: 0.0661 s/iter. Total: 0.2744 s/iter. ETA=0:01:58
[09/04 17:58:39] d2.evaluation.evaluator INFO: Inference done 87/500. Dataloading: 0.0050 s/iter. Inference: 0.2035 s/iter. Eval: 0.0660 s/iter. Total: 0.2745 s/iter. ETA=0:01:53
[09/04 17:58:45] d2.evaluation.evaluator INFO: Inference done 107/500. Dataloading: 0.0050 s/iter. Inference: 0.2010 s/iter. Eval: 0.0663 s/iter. Total: 0.2724 s/iter. ETA=0:01:47
[09/04 17:58:50] d2.evaluation.evaluator INFO: Inference done 125/500. Dataloading: 0.0050 s/iter. Inference: 0.2022 s/iter. Eval: 0.0664 s/iter. Total: 0.2736 s/iter. ETA=0:01:42
[09/04 17:58:55] d2.evaluation.evaluator INFO: Inference done 144/500. Dataloading: 0.0050 s/iter. Inference: 0.2009 s/iter. Eval: 0.0663 s/iter. Total: 0.2723 s/iter. ETA=0:01:36
[09/04 17:59:00] d2.evaluation.evaluator INFO: Inference done 164/500. Dataloading: 0.0050 s/iter. Inference: 0.2002 s/iter. Eval: 0.0661 s/iter. Total: 0.2714 s/iter. ETA=0:01:31
[09/04 17:59:05] d2.evaluation.evaluator INFO: Inference done 184/500. Dataloading: 0.0050 s/iter. Inference: 0.1992 s/iter. Eval: 0.0661 s/iter. Total: 0.2705 s/iter. ETA=0:01:25
[09/04 17:59:11] d2.evaluation.evaluator INFO: Inference done 204/500. Dataloading: 0.0050 s/iter. Inference: 0.1982 s/iter. Eval: 0.0661 s/iter. Total: 0.2695 s/iter. ETA=0:01:19
[09/04 17:59:16] d2.evaluation.evaluator INFO: Inference done 223/500. Dataloading: 0.0050 s/iter. Inference: 0.1979 s/iter. Eval: 0.0661 s/iter. Total: 0.2691 s/iter. ETA=0:01:14
[09/04 17:59:21] d2.evaluation.evaluator INFO: Inference done 242/500. Dataloading: 0.0050 s/iter. Inference: 0.1974 s/iter. Eval: 0.0663 s/iter. Total: 0.2687 s/iter. ETA=0:01:09
[09/04 17:59:26] d2.evaluation.evaluator INFO: Inference done 261/500. Dataloading: 0.0050 s/iter. Inference: 0.1973 s/iter. Eval: 0.0663 s/iter. Total: 0.2687 s/iter. ETA=0:01:04
[09/04 17:59:31] d2.evaluation.evaluator INFO: Inference done 279/500. Dataloading: 0.0050 s/iter. Inference: 0.1987 s/iter. Eval: 0.0662 s/iter. Total: 0.2700 s/iter. ETA=0:00:59
[09/04 17:59:36] d2.evaluation.evaluator INFO: Inference done 298/500. Dataloading: 0.0050 s/iter. Inference: 0.1985 s/iter. Eval: 0.0662 s/iter. Total: 0.2698 s/iter. ETA=0:00:54
[09/04 17:59:41] d2.evaluation.evaluator INFO: Inference done 317/500. Dataloading: 0.0050 s/iter. Inference: 0.1985 s/iter. Eval: 0.0662 s/iter. Total: 0.2698 s/iter. ETA=0:00:49
[09/04 17:59:46] d2.evaluation.evaluator INFO: Inference done 336/500. Dataloading: 0.0050 s/iter. Inference: 0.1982 s/iter. Eval: 0.0662 s/iter. Total: 0.2694 s/iter. ETA=0:00:44
[09/04 17:59:51] d2.evaluation.evaluator INFO: Inference done 355/500. Dataloading: 0.0050 s/iter. Inference: 0.1980 s/iter. Eval: 0.0663 s/iter. Total: 0.2694 s/iter. ETA=0:00:39
[09/04 17:59:56] d2.evaluation.evaluator INFO: Inference done 374/500. Dataloading: 0.0049 s/iter. Inference: 0.1978 s/iter. Eval: 0.0664 s/iter. Total: 0.2692 s/iter. ETA=0:00:33
[09/04 18:00:01] d2.evaluation.evaluator INFO: Inference done 393/500. Dataloading: 0.0049 s/iter. Inference: 0.1978 s/iter. Eval: 0.0664 s/iter. Total: 0.2693 s/iter. ETA=0:00:28
[09/04 18:00:07] d2.evaluation.evaluator INFO: Inference done 413/500. Dataloading: 0.0049 s/iter. Inference: 0.1975 s/iter. Eval: 0.0665 s/iter. Total: 0.2690 s/iter. ETA=0:00:23
[09/04 18:00:12] d2.evaluation.evaluator INFO: Inference done 432/500. Dataloading: 0.0049 s/iter. Inference: 0.1977 s/iter. Eval: 0.0664 s/iter. Total: 0.2691 s/iter. ETA=0:00:18
[09/04 18:00:17] d2.evaluation.evaluator INFO: Inference done 451/500. Dataloading: 0.0049 s/iter. Inference: 0.1976 s/iter. Eval: 0.0664 s/iter. Total: 0.2690 s/iter. ETA=0:00:13
[09/04 18:00:22] d2.evaluation.evaluator INFO: Inference done 471/500. Dataloading: 0.0049 s/iter. Inference: 0.1974 s/iter. Eval: 0.0664 s/iter. Total: 0.2687 s/iter. ETA=0:00:07
[09/04 18:00:27] d2.evaluation.evaluator INFO: Inference done 490/500. Dataloading: 0.0049 s/iter. Inference: 0.1976 s/iter. Eval: 0.0664 s/iter. Total: 0.2690 s/iter. ETA=0:00:02
[09/04 18:00:30] d2.evaluation.evaluator INFO: Total inference time: 0:02:13.223926 (0.269139 s / iter per device, on 1 devices)
[09/04 18:00:30] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:01:37 (0.197650 s / iter per device, on 1 devices)
[09/04 18:00:30] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evalrymgkwx0 ...
[09/04 18:00:54] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 37.964 | 47.240 | 45.669 |      19       |
| Things | 0.000  | 0.000  | 0.000  |       8       |
| Stuff  | 65.573 | 81.597 | 78.883 |      11       |
[09/04 18:00:54] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.580 | 97.884 | 99.690 |     Stuff     |
| class_8  | 74.598 | 85.228 | 87.527 |     Stuff     |
| class_11 | 86.537 | 88.709 | 97.551 |     Stuff     |
| class_12 | 43.775 | 79.878 | 54.802 |     Stuff     |
| class_13 | 40.129 | 76.683 | 52.332 |     Stuff     |
| class_17 | 49.099 | 65.063 | 75.464 |     Stuff     |
| class_19 | 48.154 | 69.090 | 69.697 |     Stuff     |
| class_20 | 66.766 | 77.400 | 86.262 |     Stuff     |
| class_21 | 89.317 | 90.239 | 98.978 |     Stuff     |
| class_22 | 38.102 | 75.492 | 50.472 |     Stuff     |
| class_23 | 87.251 | 91.898 | 94.943 |     Stuff     |
| class_24 | 0.000  | 0.000  | 0.000  |    Things     |
| class_25 | 0.000  | 0.000  | 0.000  |    Things     |
| class_26 | 0.000  | 0.000  | 0.000  |    Things     |
| class_27 | 0.000  | 0.000  | 0.000  |    Things     |
| class_28 | 0.000  | 0.000  | 0.000  |    Things     |
| class_31 | 0.000  | 0.000  | 0.000  |    Things     |
| class_32 | 0.000  | 0.000  | 0.000  |    Things     |
| class_33 | 0.000  | 0.000  | 0.000  |    Things     |
[09/04 18:00:54] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[09/04 18:00:54] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[09/04 18:00:54] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[09/04 18:00:54] d2.evaluation.testing INFO: copypaste: 37.9636,47.2402,45.6693,0.0000,0.0000,0.0000,65.5734,81.5968,78.8833,97.5804,97.8841,99.6898,74.5981,85.2284,87.5274,86.5365,88.7090,97.5510,43.7747,79.8776,54.8023,40.1294,76.6830,52.3316,49.0990,65.0629,75.4639,48.1538,69.0902,69.6970,66.7664,77.3995,86.2620,89.3168,90.2395,98.9775,38.1021,75.4921,50.4717,87.2506,91.8983,94.9425,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000
