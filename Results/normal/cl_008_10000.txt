[08/16 07:57:59] detectron2 INFO: Rank of current process: 0. World size: 2
[08/16 07:58:00] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1,2                        NVIDIA L40S (arch=8.9)
Driver version                   555.42.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/16 07:58:00] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r50_exp_cl.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/16 07:58:00] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r50_exp_cl.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r50.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_10000
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/16 07:58:00] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN50
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 1024
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_10000
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/16 07:58:00] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_10000/config.yaml
[08/16 07:58:00] d2.utils.env INFO: Using a generated random seed 1927864
[08/16 07:58:05] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=1024, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=1024, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 1024)
)
[08/16 07:58:05] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/16 07:58:05] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/16 07:58:05] d2.data.build INFO: Using training sampler TrainingSampler
[08/16 07:58:05] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/16 07:58:05] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/16 07:58:05] d2.data.common INFO: Serialized dataset takes 2.16 MiB
[08/16 07:58:05] d2.data.build INFO: Making batched data loader with batch_size=4
[08/16 07:58:05] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/16 07:58:05] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan.pth ...
[08/16 07:58:05] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan.pth ...
[08/16 07:58:06] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.pixel_decoder.input_proj.0.0.weight' to the model due to incompatible shapes: (256, 1536, 1, 1) in the checkpoint but (256, 2048, 1, 1) in the model! You might want to double check if this is expected.
[08/16 07:58:06] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.pixel_decoder.input_proj.1.0.weight' to the model due to incompatible shapes: (256, 768, 1, 1) in the checkpoint but (256, 1024, 1, 1) in the model! You might want to double check if this is expected.
[08/16 07:58:06] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.pixel_decoder.input_proj.2.0.weight' to the model due to incompatible shapes: (256, 384, 1, 1) in the checkpoint but (256, 512, 1, 1) in the model! You might want to double check if this is expected.
[08/16 07:58:06] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.pixel_decoder.adapter_1.weight' to the model due to incompatible shapes: (256, 192, 1, 1) in the checkpoint but (256, 256, 1, 1) in the model! You might want to double check if this is expected.
[08/16 07:58:06] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.predictor.class_embed.layers.2.weight' to the model due to incompatible shapes: (768, 256) in the checkpoint but (1024, 256) in the model! You might want to double check if this is expected.
[08/16 07:58:06] fvcore.common.checkpoint WARNING: Skip loading parameter 'sem_seg_head.predictor.class_embed.layers.2.bias' to the model due to incompatible shapes: (768,) in the checkpoint but (1024,) in the model! You might want to double check if this is expected.
[08/16 07:58:06] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[08/16 07:58:06] fvcore.common.checkpoint WARNING: Skip loading parameter 'void_embedding.weight' to the model due to incompatible shapes: (1, 768) in the checkpoint but (1, 1024) in the model! You might want to double check if this is expected.
[08/16 07:58:06] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mcriterion.empty_weight[0m
[34msem_seg_head.pixel_decoder.adapter_1.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.0.0.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.1.0.weight[0m
[34msem_seg_head.pixel_decoder.input_proj.2.0.weight[0m
[34msem_seg_head.predictor.class_embed.layers.2.{bias, weight}[0m
[34mvoid_embedding.weight[0m
[08/16 07:58:06] d2.engine.train_loop INFO: Starting training from iteration 0
[08/16 07:58:24] d2.utils.events INFO:  eta: 0:09:11  iter: 19  total_loss: 80.39  loss_ce: 2.611  loss_mask: 1.554  loss_dice: 3.41  loss_ce_0: 4.598  loss_mask_0: 1.543  loss_dice_0: 3.688  loss_ce_1: 3.382  loss_mask_1: 1.499  loss_dice_1: 3.578  loss_ce_2: 2.908  loss_mask_2: 1.496  loss_dice_2: 3.442  loss_ce_3: 2.85  loss_mask_3: 1.499  loss_dice_3: 3.379  loss_ce_4: 2.801  loss_mask_4: 1.498  loss_dice_4: 3.491  loss_ce_5: 2.643  loss_mask_5: 1.462  loss_dice_5: 3.426  loss_ce_6: 2.702  loss_mask_6: 1.545  loss_dice_6: 3.39  loss_ce_7: 2.73  loss_mask_7: 1.54  loss_dice_7: 3.449  loss_ce_8: 2.658  loss_mask_8: 1.52  loss_dice_8: 3.483    time: 0.5661  last_time: 0.5197  data_time: 0.1952  last_data_time: 0.0240   lr: 0.0001  max_mem: 15465M
[08/16 07:58:35] d2.utils.events INFO:  eta: 0:09:00  iter: 39  total_loss: 57.76  loss_ce: 2.093  loss_mask: 1.092  loss_dice: 2.445  loss_ce_0: 2.05  loss_mask_0: 1.353  loss_dice_0: 2.711  loss_ce_1: 2.106  loss_mask_1: 1.15  loss_dice_1: 2.555  loss_ce_2: 2.067  loss_mask_2: 1.104  loss_dice_2: 2.5  loss_ce_3: 2.1  loss_mask_3: 1.089  loss_dice_3: 2.505  loss_ce_4: 2.099  loss_mask_4: 1.077  loss_dice_4: 2.5  loss_ce_5: 2.109  loss_mask_5: 1.086  loss_dice_5: 2.457  loss_ce_6: 2.096  loss_mask_6: 1.117  loss_dice_6: 2.437  loss_ce_7: 2.104  loss_mask_7: 1.1  loss_dice_7: 2.437  loss_ce_8: 2.083  loss_mask_8: 1.101  loss_dice_8: 2.428    time: 0.5667  last_time: 0.5489  data_time: 0.0253  last_data_time: 0.0248   lr: 0.0001  max_mem: 15465M
[08/16 07:58:47] d2.utils.events INFO:  eta: 0:08:50  iter: 59  total_loss: 42.04  loss_ce: 1.336  loss_mask: 0.7985  loss_dice: 1.987  loss_ce_0: 1.555  loss_mask_0: 0.9726  loss_dice_0: 2.154  loss_ce_1: 1.415  loss_mask_1: 0.827  loss_dice_1: 2.07  loss_ce_2: 1.43  loss_mask_2: 0.804  loss_dice_2: 2.047  loss_ce_3: 1.416  loss_mask_3: 0.8092  loss_dice_3: 2.047  loss_ce_4: 1.38  loss_mask_4: 0.7891  loss_dice_4: 1.991  loss_ce_5: 1.381  loss_mask_5: 0.8031  loss_dice_5: 1.994  loss_ce_6: 1.378  loss_mask_6: 0.7845  loss_dice_6: 1.968  loss_ce_7: 1.343  loss_mask_7: 0.7999  loss_dice_7: 1.997  loss_ce_8: 1.344  loss_mask_8: 0.8091  loss_dice_8: 1.988    time: 0.5672  last_time: 0.5652  data_time: 0.0259  last_data_time: 0.0268   lr: 0.0001  max_mem: 15465M
[08/16 07:58:58] d2.utils.events INFO:  eta: 0:08:36  iter: 79  total_loss: 34.23  loss_ce: 0.8464  loss_mask: 0.7456  loss_dice: 1.755  loss_ce_0: 1.102  loss_mask_0: 0.9006  loss_dice_0: 1.936  loss_ce_1: 0.9661  loss_mask_1: 0.7815  loss_dice_1: 1.837  loss_ce_2: 0.9706  loss_mask_2: 0.7543  loss_dice_2: 1.77  loss_ce_3: 0.9458  loss_mask_3: 0.7471  loss_dice_3: 1.778  loss_ce_4: 0.8946  loss_mask_4: 0.7418  loss_dice_4: 1.774  loss_ce_5: 0.8853  loss_mask_5: 0.7241  loss_dice_5: 1.755  loss_ce_6: 0.8581  loss_mask_6: 0.7468  loss_dice_6: 1.752  loss_ce_7: 0.8414  loss_mask_7: 0.7447  loss_dice_7: 1.756  loss_ce_8: 0.8603  loss_mask_8: 0.7536  loss_dice_8: 1.757    time: 0.5637  last_time: 0.5483  data_time: 0.0245  last_data_time: 0.0247   lr: 0.0001  max_mem: 15465M
[08/16 07:59:09] d2.utils.events INFO:  eta: 0:08:25  iter: 99  total_loss: 31.54  loss_ce: 0.725  loss_mask: 0.6929  loss_dice: 1.646  loss_ce_0: 0.8902  loss_mask_0: 0.8327  loss_dice_0: 1.824  loss_ce_1: 0.8273  loss_mask_1: 0.7335  loss_dice_1: 1.736  loss_ce_2: 0.7887  loss_mask_2: 0.6838  loss_dice_2: 1.709  loss_ce_3: 0.7602  loss_mask_3: 0.6954  loss_dice_3: 1.683  loss_ce_4: 0.7259  loss_mask_4: 0.6892  loss_dice_4: 1.676  loss_ce_5: 0.6791  loss_mask_5: 0.6951  loss_dice_5: 1.673  loss_ce_6: 0.7179  loss_mask_6: 0.6973  loss_dice_6: 1.637  loss_ce_7: 0.7052  loss_mask_7: 0.692  loss_dice_7: 1.642  loss_ce_8: 0.7105  loss_mask_8: 0.6861  loss_dice_8: 1.669    time: 0.5630  last_time: 0.5385  data_time: 0.0251  last_data_time: 0.0231   lr: 0.0001  max_mem: 15465M
[08/16 07:59:20] d2.utils.events INFO:  eta: 0:08:12  iter: 119  total_loss: 28.9  loss_ce: 0.5384  loss_mask: 0.6911  loss_dice: 1.582  loss_ce_0: 0.693  loss_mask_0: 0.8416  loss_dice_0: 1.738  loss_ce_1: 0.6437  loss_mask_1: 0.7466  loss_dice_1: 1.664  loss_ce_2: 0.633  loss_mask_2: 0.7129  loss_dice_2: 1.639  loss_ce_3: 0.6044  loss_mask_3: 0.7017  loss_dice_3: 1.553  loss_ce_4: 0.5451  loss_mask_4: 0.7121  loss_dice_4: 1.612  loss_ce_5: 0.5726  loss_mask_5: 0.7121  loss_dice_5: 1.58  loss_ce_6: 0.5816  loss_mask_6: 0.6907  loss_dice_6: 1.545  loss_ce_7: 0.5712  loss_mask_7: 0.6962  loss_dice_7: 1.565  loss_ce_8: 0.5533  loss_mask_8: 0.694  loss_dice_8: 1.552    time: 0.5611  last_time: 0.5584  data_time: 0.0252  last_data_time: 0.0246   lr: 0.0001  max_mem: 15465M
[08/16 07:59:31] d2.utils.events INFO:  eta: 0:08:00  iter: 139  total_loss: 27.34  loss_ce: 0.4535  loss_mask: 0.6354  loss_dice: 1.537  loss_ce_0: 0.5429  loss_mask_0: 0.7707  loss_dice_0: 1.712  loss_ce_1: 0.5872  loss_mask_1: 0.6665  loss_dice_1: 1.644  loss_ce_2: 0.5508  loss_mask_2: 0.6431  loss_dice_2: 1.574  loss_ce_3: 0.4912  loss_mask_3: 0.6582  loss_dice_3: 1.566  loss_ce_4: 0.4686  loss_mask_4: 0.6438  loss_dice_4: 1.587  loss_ce_5: 0.4539  loss_mask_5: 0.6372  loss_dice_5: 1.546  loss_ce_6: 0.4702  loss_mask_6: 0.6354  loss_dice_6: 1.52  loss_ce_7: 0.4675  loss_mask_7: 0.6294  loss_dice_7: 1.525  loss_ce_8: 0.4464  loss_mask_8: 0.6419  loss_dice_8: 1.534    time: 0.5605  last_time: 0.5670  data_time: 0.0251  last_data_time: 0.0241   lr: 0.0001  max_mem: 15465M
[08/16 07:59:42] d2.utils.events INFO:  eta: 0:07:48  iter: 159  total_loss: 26.1  loss_ce: 0.4503  loss_mask: 0.657  loss_dice: 1.455  loss_ce_0: 0.4816  loss_mask_0: 0.7921  loss_dice_0: 1.683  loss_ce_1: 0.5212  loss_mask_1: 0.7073  loss_dice_1: 1.594  loss_ce_2: 0.5187  loss_mask_2: 0.6709  loss_dice_2: 1.526  loss_ce_3: 0.4818  loss_mask_3: 0.6469  loss_dice_3: 1.493  loss_ce_4: 0.4869  loss_mask_4: 0.6476  loss_dice_4: 1.492  loss_ce_5: 0.4312  loss_mask_5: 0.6601  loss_dice_5: 1.487  loss_ce_6: 0.448  loss_mask_6: 0.6541  loss_dice_6: 1.491  loss_ce_7: 0.4221  loss_mask_7: 0.6585  loss_dice_7: 1.471  loss_ce_8: 0.4416  loss_mask_8: 0.6525  loss_dice_8: 1.481    time: 0.5596  last_time: 0.6161  data_time: 0.0250  last_data_time: 0.0236   lr: 0.0001  max_mem: 15465M
[08/16 07:59:54] d2.utils.events INFO:  eta: 0:07:37  iter: 179  total_loss: 24.77  loss_ce: 0.3644  loss_mask: 0.6275  loss_dice: 1.438  loss_ce_0: 0.3943  loss_mask_0: 0.7248  loss_dice_0: 1.595  loss_ce_1: 0.4669  loss_mask_1: 0.6574  loss_dice_1: 1.537  loss_ce_2: 0.4668  loss_mask_2: 0.6528  loss_dice_2: 1.454  loss_ce_3: 0.4436  loss_mask_3: 0.6527  loss_dice_3: 1.408  loss_ce_4: 0.3915  loss_mask_4: 0.6504  loss_dice_4: 1.447  loss_ce_5: 0.3884  loss_mask_5: 0.6383  loss_dice_5: 1.44  loss_ce_6: 0.3787  loss_mask_6: 0.6397  loss_dice_6: 1.412  loss_ce_7: 0.3897  loss_mask_7: 0.6298  loss_dice_7: 1.433  loss_ce_8: 0.3665  loss_mask_8: 0.6253  loss_dice_8: 1.448    time: 0.5596  last_time: 0.5581  data_time: 0.0256  last_data_time: 0.0245   lr: 0.0001  max_mem: 15465M
[08/16 08:00:05] d2.utils.events INFO:  eta: 0:07:25  iter: 199  total_loss: 25.09  loss_ce: 0.405  loss_mask: 0.5815  loss_dice: 1.362  loss_ce_0: 0.4209  loss_mask_0: 0.6605  loss_dice_0: 1.536  loss_ce_1: 0.5014  loss_mask_1: 0.6145  loss_dice_1: 1.468  loss_ce_2: 0.4948  loss_mask_2: 0.586  loss_dice_2: 1.479  loss_ce_3: 0.4563  loss_mask_3: 0.5939  loss_dice_3: 1.414  loss_ce_4: 0.4122  loss_mask_4: 0.5866  loss_dice_4: 1.396  loss_ce_5: 0.4034  loss_mask_5: 0.5863  loss_dice_5: 1.374  loss_ce_6: 0.4402  loss_mask_6: 0.5819  loss_dice_6: 1.379  loss_ce_7: 0.4076  loss_mask_7: 0.5739  loss_dice_7: 1.375  loss_ce_8: 0.3965  loss_mask_8: 0.5715  loss_dice_8: 1.39    time: 0.5588  last_time: 0.5334  data_time: 0.0249  last_data_time: 0.0238   lr: 0.0001  max_mem: 15465M
[08/16 08:00:15] d2.utils.events INFO:  eta: 0:07:11  iter: 219  total_loss: 24.46  loss_ce: 0.3676  loss_mask: 0.5857  loss_dice: 1.408  loss_ce_0: 0.3515  loss_mask_0: 0.6892  loss_dice_0: 1.556  loss_ce_1: 0.5176  loss_mask_1: 0.6225  loss_dice_1: 1.511  loss_ce_2: 0.4707  loss_mask_2: 0.621  loss_dice_2: 1.458  loss_ce_3: 0.4347  loss_mask_3: 0.616  loss_dice_3: 1.408  loss_ce_4: 0.4074  loss_mask_4: 0.6135  loss_dice_4: 1.433  loss_ce_5: 0.3942  loss_mask_5: 0.5933  loss_dice_5: 1.414  loss_ce_6: 0.3441  loss_mask_6: 0.6003  loss_dice_6: 1.43  loss_ce_7: 0.3675  loss_mask_7: 0.5956  loss_dice_7: 1.417  loss_ce_8: 0.3328  loss_mask_8: 0.5908  loss_dice_8: 1.426    time: 0.5563  last_time: 0.5222  data_time: 0.0241  last_data_time: 0.0239   lr: 0.0001  max_mem: 15465M
[08/16 08:00:26] d2.utils.events INFO:  eta: 0:07:00  iter: 239  total_loss: 24.27  loss_ce: 0.3631  loss_mask: 0.6087  loss_dice: 1.385  loss_ce_0: 0.3336  loss_mask_0: 0.6875  loss_dice_0: 1.579  loss_ce_1: 0.438  loss_mask_1: 0.6381  loss_dice_1: 1.475  loss_ce_2: 0.4491  loss_mask_2: 0.6105  loss_dice_2: 1.437  loss_ce_3: 0.4104  loss_mask_3: 0.6012  loss_dice_3: 1.392  loss_ce_4: 0.3866  loss_mask_4: 0.6213  loss_dice_4: 1.419  loss_ce_5: 0.3674  loss_mask_5: 0.6155  loss_dice_5: 1.401  loss_ce_6: 0.3599  loss_mask_6: 0.6106  loss_dice_6: 1.395  loss_ce_7: 0.361  loss_mask_7: 0.608  loss_dice_7: 1.398  loss_ce_8: 0.373  loss_mask_8: 0.6036  loss_dice_8: 1.407    time: 0.5557  last_time: 0.5760  data_time: 0.0246  last_data_time: 0.0221   lr: 0.0001  max_mem: 15465M
[08/16 08:00:38] d2.utils.events INFO:  eta: 0:06:49  iter: 259  total_loss: 23.73  loss_ce: 0.3585  loss_mask: 0.5546  loss_dice: 1.364  loss_ce_0: 0.3414  loss_mask_0: 0.6231  loss_dice_0: 1.53  loss_ce_1: 0.4323  loss_mask_1: 0.5891  loss_dice_1: 1.436  loss_ce_2: 0.4328  loss_mask_2: 0.5841  loss_dice_2: 1.397  loss_ce_3: 0.3934  loss_mask_3: 0.5651  loss_dice_3: 1.381  loss_ce_4: 0.3772  loss_mask_4: 0.5609  loss_dice_4: 1.388  loss_ce_5: 0.3497  loss_mask_5: 0.5614  loss_dice_5: 1.381  loss_ce_6: 0.3527  loss_mask_6: 0.5622  loss_dice_6: 1.356  loss_ce_7: 0.3617  loss_mask_7: 0.5627  loss_dice_7: 1.359  loss_ce_8: 0.3688  loss_mask_8: 0.5594  loss_dice_8: 1.351    time: 0.5557  last_time: 0.5262  data_time: 0.0257  last_data_time: 0.0281   lr: 0.0001  max_mem: 15465M
[08/16 08:00:49] d2.utils.events INFO:  eta: 0:06:37  iter: 279  total_loss: 23.55  loss_ce: 0.3336  loss_mask: 0.5902  loss_dice: 1.404  loss_ce_0: 0.3134  loss_mask_0: 0.6519  loss_dice_0: 1.551  loss_ce_1: 0.4306  loss_mask_1: 0.6011  loss_dice_1: 1.473  loss_ce_2: 0.3759  loss_mask_2: 0.6019  loss_dice_2: 1.438  loss_ce_3: 0.3838  loss_mask_3: 0.5973  loss_dice_3: 1.416  loss_ce_4: 0.3405  loss_mask_4: 0.5967  loss_dice_4: 1.416  loss_ce_5: 0.3257  loss_mask_5: 0.6041  loss_dice_5: 1.434  loss_ce_6: 0.3124  loss_mask_6: 0.6032  loss_dice_6: 1.398  loss_ce_7: 0.3398  loss_mask_7: 0.5976  loss_dice_7: 1.384  loss_ce_8: 0.3362  loss_mask_8: 0.5922  loss_dice_8: 1.403    time: 0.5547  last_time: 0.5169  data_time: 0.0248  last_data_time: 0.0216   lr: 0.0001  max_mem: 15465M
[08/16 08:01:00] d2.utils.events INFO:  eta: 0:06:26  iter: 299  total_loss: 22.47  loss_ce: 0.3306  loss_mask: 0.5233  loss_dice: 1.309  loss_ce_0: 0.3346  loss_mask_0: 0.5953  loss_dice_0: 1.477  loss_ce_1: 0.4183  loss_mask_1: 0.554  loss_dice_1: 1.426  loss_ce_2: 0.3876  loss_mask_2: 0.5175  loss_dice_2: 1.4  loss_ce_3: 0.3848  loss_mask_3: 0.5293  loss_dice_3: 1.34  loss_ce_4: 0.3532  loss_mask_4: 0.5296  loss_dice_4: 1.322  loss_ce_5: 0.3474  loss_mask_5: 0.5206  loss_dice_5: 1.343  loss_ce_6: 0.3188  loss_mask_6: 0.518  loss_dice_6: 1.332  loss_ce_7: 0.3299  loss_mask_7: 0.5282  loss_dice_7: 1.338  loss_ce_8: 0.3193  loss_mask_8: 0.5226  loss_dice_8: 1.337    time: 0.5553  last_time: 0.5648  data_time: 0.0248  last_data_time: 0.0230   lr: 0.0001  max_mem: 15467M
[08/16 08:01:11] d2.utils.events INFO:  eta: 0:06:15  iter: 319  total_loss: 23.31  loss_ce: 0.316  loss_mask: 0.5487  loss_dice: 1.345  loss_ce_0: 0.2953  loss_mask_0: 0.6223  loss_dice_0: 1.498  loss_ce_1: 0.4127  loss_mask_1: 0.5696  loss_dice_1: 1.435  loss_ce_2: 0.3937  loss_mask_2: 0.5706  loss_dice_2: 1.412  loss_ce_3: 0.3914  loss_mask_3: 0.5665  loss_dice_3: 1.369  loss_ce_4: 0.3438  loss_mask_4: 0.5584  loss_dice_4: 1.377  loss_ce_5: 0.3508  loss_mask_5: 0.5497  loss_dice_5: 1.34  loss_ce_6: 0.3209  loss_mask_6: 0.5587  loss_dice_6: 1.34  loss_ce_7: 0.3298  loss_mask_7: 0.5417  loss_dice_7: 1.323  loss_ce_8: 0.3279  loss_mask_8: 0.5413  loss_dice_8: 1.317    time: 0.5551  last_time: 0.5156  data_time: 0.0255  last_data_time: 0.0241   lr: 0.0001  max_mem: 15467M
[08/16 08:01:22] d2.utils.events INFO:  eta: 0:06:03  iter: 339  total_loss: 22.41  loss_ce: 0.3326  loss_mask: 0.5557  loss_dice: 1.303  loss_ce_0: 0.2739  loss_mask_0: 0.6417  loss_dice_0: 1.459  loss_ce_1: 0.3746  loss_mask_1: 0.5876  loss_dice_1: 1.397  loss_ce_2: 0.3853  loss_mask_2: 0.57  loss_dice_2: 1.353  loss_ce_3: 0.3646  loss_mask_3: 0.5629  loss_dice_3: 1.331  loss_ce_4: 0.3176  loss_mask_4: 0.5625  loss_dice_4: 1.318  loss_ce_5: 0.3211  loss_mask_5: 0.5567  loss_dice_5: 1.314  loss_ce_6: 0.3231  loss_mask_6: 0.5467  loss_dice_6: 1.307  loss_ce_7: 0.3178  loss_mask_7: 0.5527  loss_dice_7: 1.306  loss_ce_8: 0.3197  loss_mask_8: 0.5534  loss_dice_8: 1.305    time: 0.5544  last_time: 0.5182  data_time: 0.0247  last_data_time: 0.0229   lr: 0.0001  max_mem: 15467M
[08/16 08:01:33] d2.utils.events INFO:  eta: 0:05:53  iter: 359  total_loss: 22.73  loss_ce: 0.3372  loss_mask: 0.5558  loss_dice: 1.305  loss_ce_0: 0.3363  loss_mask_0: 0.6427  loss_dice_0: 1.468  loss_ce_1: 0.4213  loss_mask_1: 0.5973  loss_dice_1: 1.382  loss_ce_2: 0.3789  loss_mask_2: 0.5929  loss_dice_2: 1.358  loss_ce_3: 0.3743  loss_mask_3: 0.5805  loss_dice_3: 1.306  loss_ce_4: 0.3686  loss_mask_4: 0.5755  loss_dice_4: 1.321  loss_ce_5: 0.3543  loss_mask_5: 0.5589  loss_dice_5: 1.292  loss_ce_6: 0.3356  loss_mask_6: 0.5536  loss_dice_6: 1.319  loss_ce_7: 0.3252  loss_mask_7: 0.5575  loss_dice_7: 1.309  loss_ce_8: 0.3047  loss_mask_8: 0.571  loss_dice_8: 1.327    time: 0.5544  last_time: 0.5224  data_time: 0.0255  last_data_time: 0.0221   lr: 0.0001  max_mem: 15467M
[08/16 08:01:44] d2.utils.events INFO:  eta: 0:05:42  iter: 379  total_loss: 22.13  loss_ce: 0.2997  loss_mask: 0.5478  loss_dice: 1.269  loss_ce_0: 0.3214  loss_mask_0: 0.6395  loss_dice_0: 1.477  loss_ce_1: 0.3665  loss_mask_1: 0.5708  loss_dice_1: 1.372  loss_ce_2: 0.3931  loss_mask_2: 0.5581  loss_dice_2: 1.3  loss_ce_3: 0.3642  loss_mask_3: 0.5663  loss_dice_3: 1.277  loss_ce_4: 0.334  loss_mask_4: 0.5673  loss_dice_4: 1.277  loss_ce_5: 0.3124  loss_mask_5: 0.5532  loss_dice_5: 1.309  loss_ce_6: 0.3199  loss_mask_6: 0.5518  loss_dice_6: 1.244  loss_ce_7: 0.3168  loss_mask_7: 0.5437  loss_dice_7: 1.239  loss_ce_8: 0.2731  loss_mask_8: 0.5468  loss_dice_8: 1.291    time: 0.5544  last_time: 0.5199  data_time: 0.0251  last_data_time: 0.0250   lr: 0.0001  max_mem: 15467M
[08/16 08:01:55] d2.utils.events INFO:  eta: 0:05:31  iter: 399  total_loss: 20.97  loss_ce: 0.2614  loss_mask: 0.5435  loss_dice: 1.269  loss_ce_0: 0.2387  loss_mask_0: 0.5912  loss_dice_0: 1.431  loss_ce_1: 0.3566  loss_mask_1: 0.5466  loss_dice_1: 1.336  loss_ce_2: 0.3402  loss_mask_2: 0.5298  loss_dice_2: 1.327  loss_ce_3: 0.3328  loss_mask_3: 0.5302  loss_dice_3: 1.266  loss_ce_4: 0.2826  loss_mask_4: 0.5394  loss_dice_4: 1.301  loss_ce_5: 0.2793  loss_mask_5: 0.5371  loss_dice_5: 1.264  loss_ce_6: 0.2614  loss_mask_6: 0.5333  loss_dice_6: 1.266  loss_ce_7: 0.2538  loss_mask_7: 0.5296  loss_dice_7: 1.269  loss_ce_8: 0.2617  loss_mask_8: 0.5437  loss_dice_8: 1.258    time: 0.5541  last_time: 0.5595  data_time: 0.0239  last_data_time: 0.0292   lr: 0.0001  max_mem: 15467M
[08/16 08:02:06] d2.utils.events INFO:  eta: 0:05:19  iter: 419  total_loss: 21.39  loss_ce: 0.2906  loss_mask: 0.5358  loss_dice: 1.265  loss_ce_0: 0.2862  loss_mask_0: 0.6141  loss_dice_0: 1.442  loss_ce_1: 0.3703  loss_mask_1: 0.5589  loss_dice_1: 1.363  loss_ce_2: 0.3461  loss_mask_2: 0.5502  loss_dice_2: 1.294  loss_ce_3: 0.3216  loss_mask_3: 0.5399  loss_dice_3: 1.284  loss_ce_4: 0.3126  loss_mask_4: 0.5394  loss_dice_4: 1.274  loss_ce_5: 0.2848  loss_mask_5: 0.5382  loss_dice_5: 1.276  loss_ce_6: 0.2907  loss_mask_6: 0.5397  loss_dice_6: 1.262  loss_ce_7: 0.2913  loss_mask_7: 0.5347  loss_dice_7: 1.274  loss_ce_8: 0.264  loss_mask_8: 0.524  loss_dice_8: 1.271    time: 0.5543  last_time: 0.5473  data_time: 0.0245  last_data_time: 0.0231   lr: 0.0001  max_mem: 15467M
[08/16 08:02:17] d2.utils.events INFO:  eta: 0:05:08  iter: 439  total_loss: 20.03  loss_ce: 0.2424  loss_mask: 0.5224  loss_dice: 1.157  loss_ce_0: 0.2542  loss_mask_0: 0.5815  loss_dice_0: 1.3  loss_ce_1: 0.3251  loss_mask_1: 0.5255  loss_dice_1: 1.225  loss_ce_2: 0.3109  loss_mask_2: 0.5284  loss_dice_2: 1.194  loss_ce_3: 0.2924  loss_mask_3: 0.5201  loss_dice_3: 1.19  loss_ce_4: 0.2544  loss_mask_4: 0.5211  loss_dice_4: 1.17  loss_ce_5: 0.2619  loss_mask_5: 0.528  loss_dice_5: 1.17  loss_ce_6: 0.2582  loss_mask_6: 0.5137  loss_dice_6: 1.145  loss_ce_7: 0.2312  loss_mask_7: 0.5228  loss_dice_7: 1.187  loss_ce_8: 0.2245  loss_mask_8: 0.527  loss_dice_8: 1.158    time: 0.5536  last_time: 0.5566  data_time: 0.0245  last_data_time: 0.0236   lr: 0.0001  max_mem: 15467M
[08/16 08:02:28] d2.utils.events INFO:  eta: 0:04:57  iter: 459  total_loss: 20.62  loss_ce: 0.2735  loss_mask: 0.5012  loss_dice: 1.25  loss_ce_0: 0.2722  loss_mask_0: 0.5435  loss_dice_0: 1.389  loss_ce_1: 0.3555  loss_mask_1: 0.5185  loss_dice_1: 1.315  loss_ce_2: 0.3443  loss_mask_2: 0.5085  loss_dice_2: 1.282  loss_ce_3: 0.329  loss_mask_3: 0.4959  loss_dice_3: 1.239  loss_ce_4: 0.2909  loss_mask_4: 0.5004  loss_dice_4: 1.255  loss_ce_5: 0.2961  loss_mask_5: 0.4954  loss_dice_5: 1.261  loss_ce_6: 0.2957  loss_mask_6: 0.5065  loss_dice_6: 1.246  loss_ce_7: 0.2847  loss_mask_7: 0.4973  loss_dice_7: 1.229  loss_ce_8: 0.2793  loss_mask_8: 0.5029  loss_dice_8: 1.257    time: 0.5539  last_time: 0.5817  data_time: 0.0238  last_data_time: 0.0292   lr: 0.0001  max_mem: 15467M
[08/16 08:02:40] d2.utils.events INFO:  eta: 0:04:46  iter: 479  total_loss: 21.07  loss_ce: 0.2906  loss_mask: 0.5062  loss_dice: 1.229  loss_ce_0: 0.2696  loss_mask_0: 0.5757  loss_dice_0: 1.361  loss_ce_1: 0.3257  loss_mask_1: 0.5234  loss_dice_1: 1.322  loss_ce_2: 0.3358  loss_mask_2: 0.5231  loss_dice_2: 1.272  loss_ce_3: 0.3016  loss_mask_3: 0.5224  loss_dice_3: 1.255  loss_ce_4: 0.303  loss_mask_4: 0.5179  loss_dice_4: 1.252  loss_ce_5: 0.2967  loss_mask_5: 0.5143  loss_dice_5: 1.245  loss_ce_6: 0.3014  loss_mask_6: 0.5045  loss_dice_6: 1.238  loss_ce_7: 0.2877  loss_mask_7: 0.4986  loss_dice_7: 1.235  loss_ce_8: 0.2931  loss_mask_8: 0.5119  loss_dice_8: 1.237    time: 0.5538  last_time: 0.5530  data_time: 0.0239  last_data_time: 0.0267   lr: 0.0001  max_mem: 15467M
[08/16 08:02:50] d2.utils.events INFO:  eta: 0:04:35  iter: 499  total_loss: 21.05  loss_ce: 0.2585  loss_mask: 0.537  loss_dice: 1.279  loss_ce_0: 0.2959  loss_mask_0: 0.5898  loss_dice_0: 1.369  loss_ce_1: 0.3375  loss_mask_1: 0.5492  loss_dice_1: 1.311  loss_ce_2: 0.3118  loss_mask_2: 0.5469  loss_dice_2: 1.305  loss_ce_3: 0.3097  loss_mask_3: 0.5382  loss_dice_3: 1.244  loss_ce_4: 0.2963  loss_mask_4: 0.5474  loss_dice_4: 1.263  loss_ce_5: 0.2749  loss_mask_5: 0.5402  loss_dice_5: 1.252  loss_ce_6: 0.2737  loss_mask_6: 0.5414  loss_dice_6: 1.229  loss_ce_7: 0.2742  loss_mask_7: 0.5392  loss_dice_7: 1.26  loss_ce_8: 0.2662  loss_mask_8: 0.5355  loss_dice_8: 1.239    time: 0.5531  last_time: 0.5186  data_time: 0.0238  last_data_time: 0.0224   lr: 0.0001  max_mem: 15467M
[08/16 08:03:01] d2.utils.events INFO:  eta: 0:04:23  iter: 519  total_loss: 20.27  loss_ce: 0.2503  loss_mask: 0.4994  loss_dice: 1.148  loss_ce_0: 0.3094  loss_mask_0: 0.5599  loss_dice_0: 1.303  loss_ce_1: 0.3347  loss_mask_1: 0.5294  loss_dice_1: 1.244  loss_ce_2: 0.3233  loss_mask_2: 0.5141  loss_dice_2: 1.219  loss_ce_3: 0.2946  loss_mask_3: 0.5238  loss_dice_3: 1.183  loss_ce_4: 0.279  loss_mask_4: 0.5118  loss_dice_4: 1.178  loss_ce_5: 0.2603  loss_mask_5: 0.5122  loss_dice_5: 1.161  loss_ce_6: 0.2627  loss_mask_6: 0.5078  loss_dice_6: 1.15  loss_ce_7: 0.2461  loss_mask_7: 0.5027  loss_dice_7: 1.164  loss_ce_8: 0.2521  loss_mask_8: 0.5006  loss_dice_8: 1.161    time: 0.5525  last_time: 0.5198  data_time: 0.0240  last_data_time: 0.0218   lr: 0.0001  max_mem: 15467M
[08/16 08:03:12] d2.utils.events INFO:  eta: 0:04:12  iter: 539  total_loss: 20.23  loss_ce: 0.2677  loss_mask: 0.4839  loss_dice: 1.173  loss_ce_0: 0.2666  loss_mask_0: 0.5386  loss_dice_0: 1.338  loss_ce_1: 0.362  loss_mask_1: 0.5025  loss_dice_1: 1.271  loss_ce_2: 0.342  loss_mask_2: 0.4979  loss_dice_2: 1.205  loss_ce_3: 0.3098  loss_mask_3: 0.4928  loss_dice_3: 1.201  loss_ce_4: 0.2803  loss_mask_4: 0.4856  loss_dice_4: 1.205  loss_ce_5: 0.2727  loss_mask_5: 0.4793  loss_dice_5: 1.184  loss_ce_6: 0.281  loss_mask_6: 0.4834  loss_dice_6: 1.174  loss_ce_7: 0.2664  loss_mask_7: 0.491  loss_dice_7: 1.187  loss_ce_8: 0.2715  loss_mask_8: 0.4857  loss_dice_8: 1.186    time: 0.5525  last_time: 0.5593  data_time: 0.0246  last_data_time: 0.0230   lr: 0.0001  max_mem: 15467M
[08/16 08:03:23] d2.utils.events INFO:  eta: 0:04:01  iter: 559  total_loss: 20.17  loss_ce: 0.247  loss_mask: 0.5105  loss_dice: 1.214  loss_ce_0: 0.2696  loss_mask_0: 0.5636  loss_dice_0: 1.32  loss_ce_1: 0.2971  loss_mask_1: 0.5271  loss_dice_1: 1.291  loss_ce_2: 0.3134  loss_mask_2: 0.5202  loss_dice_2: 1.234  loss_ce_3: 0.2803  loss_mask_3: 0.5159  loss_dice_3: 1.19  loss_ce_4: 0.2377  loss_mask_4: 0.5165  loss_dice_4: 1.206  loss_ce_5: 0.2446  loss_mask_5: 0.5141  loss_dice_5: 1.213  loss_ce_6: 0.2473  loss_mask_6: 0.5066  loss_dice_6: 1.21  loss_ce_7: 0.2478  loss_mask_7: 0.5032  loss_dice_7: 1.178  loss_ce_8: 0.2228  loss_mask_8: 0.5095  loss_dice_8: 1.198    time: 0.5526  last_time: 0.5316  data_time: 0.0240  last_data_time: 0.0242   lr: 0.0001  max_mem: 15467M
[08/16 08:03:35] d2.utils.events INFO:  eta: 0:03:51  iter: 579  total_loss: 21.09  loss_ce: 0.2647  loss_mask: 0.5266  loss_dice: 1.234  loss_ce_0: 0.2522  loss_mask_0: 0.6006  loss_dice_0: 1.366  loss_ce_1: 0.3128  loss_mask_1: 0.5483  loss_dice_1: 1.316  loss_ce_2: 0.2977  loss_mask_2: 0.5324  loss_dice_2: 1.309  loss_ce_3: 0.3058  loss_mask_3: 0.5396  loss_dice_3: 1.243  loss_ce_4: 0.2679  loss_mask_4: 0.5336  loss_dice_4: 1.27  loss_ce_5: 0.2423  loss_mask_5: 0.5362  loss_dice_5: 1.251  loss_ce_6: 0.282  loss_mask_6: 0.5286  loss_dice_6: 1.237  loss_ce_7: 0.2567  loss_mask_7: 0.5302  loss_dice_7: 1.265  loss_ce_8: 0.2509  loss_mask_8: 0.5315  loss_dice_8: 1.224    time: 0.5526  last_time: 0.5593  data_time: 0.0234  last_data_time: 0.0235   lr: 0.0001  max_mem: 15467M
[08/16 08:03:46] d2.utils.events INFO:  eta: 0:03:40  iter: 599  total_loss: 19.92  loss_ce: 0.2708  loss_mask: 0.4966  loss_dice: 1.229  loss_ce_0: 0.235  loss_mask_0: 0.5345  loss_dice_0: 1.357  loss_ce_1: 0.2974  loss_mask_1: 0.5096  loss_dice_1: 1.266  loss_ce_2: 0.3081  loss_mask_2: 0.5012  loss_dice_2: 1.251  loss_ce_3: 0.2657  loss_mask_3: 0.4941  loss_dice_3: 1.246  loss_ce_4: 0.25  loss_mask_4: 0.4997  loss_dice_4: 1.269  loss_ce_5: 0.2399  loss_mask_5: 0.5012  loss_dice_5: 1.251  loss_ce_6: 0.2529  loss_mask_6: 0.4951  loss_dice_6: 1.239  loss_ce_7: 0.2277  loss_mask_7: 0.4889  loss_dice_7: 1.236  loss_ce_8: 0.2245  loss_mask_8: 0.4877  loss_dice_8: 1.225    time: 0.5526  last_time: 0.5680  data_time: 0.0241  last_data_time: 0.0236   lr: 0.0001  max_mem: 15467M
[08/16 08:03:57] d2.utils.events INFO:  eta: 0:03:29  iter: 619  total_loss: 21.41  loss_ce: 0.2888  loss_mask: 0.5151  loss_dice: 1.29  loss_ce_0: 0.289  loss_mask_0: 0.5831  loss_dice_0: 1.412  loss_ce_1: 0.37  loss_mask_1: 0.5522  loss_dice_1: 1.341  loss_ce_2: 0.3229  loss_mask_2: 0.5348  loss_dice_2: 1.305  loss_ce_3: 0.3271  loss_mask_3: 0.5202  loss_dice_3: 1.283  loss_ce_4: 0.304  loss_mask_4: 0.5223  loss_dice_4: 1.299  loss_ce_5: 0.2817  loss_mask_5: 0.5248  loss_dice_5: 1.303  loss_ce_6: 0.2943  loss_mask_6: 0.519  loss_dice_6: 1.267  loss_ce_7: 0.2868  loss_mask_7: 0.5193  loss_dice_7: 1.263  loss_ce_8: 0.2957  loss_mask_8: 0.5158  loss_dice_8: 1.27    time: 0.5526  last_time: 0.5752  data_time: 0.0247  last_data_time: 0.0297   lr: 0.0001  max_mem: 15467M
[08/16 08:04:08] d2.utils.events INFO:  eta: 0:03:17  iter: 639  total_loss: 19.92  loss_ce: 0.2423  loss_mask: 0.5016  loss_dice: 1.164  loss_ce_0: 0.2442  loss_mask_0: 0.5538  loss_dice_0: 1.317  loss_ce_1: 0.2917  loss_mask_1: 0.5274  loss_dice_1: 1.249  loss_ce_2: 0.281  loss_mask_2: 0.5086  loss_dice_2: 1.241  loss_ce_3: 0.2623  loss_mask_3: 0.5107  loss_dice_3: 1.195  loss_ce_4: 0.2622  loss_mask_4: 0.5144  loss_dice_4: 1.212  loss_ce_5: 0.2554  loss_mask_5: 0.5127  loss_dice_5: 1.207  loss_ce_6: 0.274  loss_mask_6: 0.5124  loss_dice_6: 1.179  loss_ce_7: 0.2414  loss_mask_7: 0.5014  loss_dice_7: 1.172  loss_ce_8: 0.2647  loss_mask_8: 0.5056  loss_dice_8: 1.2    time: 0.5523  last_time: 0.5200  data_time: 0.0242  last_data_time: 0.0228   lr: 0.0001  max_mem: 15467M
[08/16 08:04:19] d2.utils.events INFO:  eta: 0:03:06  iter: 659  total_loss: 20.05  loss_ce: 0.2801  loss_mask: 0.5303  loss_dice: 1.173  loss_ce_0: 0.2857  loss_mask_0: 0.5986  loss_dice_0: 1.316  loss_ce_1: 0.3424  loss_mask_1: 0.5308  loss_dice_1: 1.285  loss_ce_2: 0.332  loss_mask_2: 0.5216  loss_dice_2: 1.242  loss_ce_3: 0.2742  loss_mask_3: 0.5207  loss_dice_3: 1.207  loss_ce_4: 0.2876  loss_mask_4: 0.5158  loss_dice_4: 1.199  loss_ce_5: 0.2793  loss_mask_5: 0.5127  loss_dice_5: 1.185  loss_ce_6: 0.2837  loss_mask_6: 0.5288  loss_dice_6: 1.185  loss_ce_7: 0.2877  loss_mask_7: 0.5222  loss_dice_7: 1.174  loss_ce_8: 0.297  loss_mask_8: 0.5274  loss_dice_8: 1.187    time: 0.5522  last_time: 0.5174  data_time: 0.0231  last_data_time: 0.0225   lr: 0.0001  max_mem: 15467M
[08/16 08:04:30] d2.utils.events INFO:  eta: 0:02:56  iter: 679  total_loss: 19.61  loss_ce: 0.248  loss_mask: 0.461  loss_dice: 1.143  loss_ce_0: 0.2317  loss_mask_0: 0.5187  loss_dice_0: 1.317  loss_ce_1: 0.3185  loss_mask_1: 0.4972  loss_dice_1: 1.235  loss_ce_2: 0.2853  loss_mask_2: 0.484  loss_dice_2: 1.211  loss_ce_3: 0.2695  loss_mask_3: 0.4727  loss_dice_3: 1.2  loss_ce_4: 0.245  loss_mask_4: 0.4733  loss_dice_4: 1.192  loss_ce_5: 0.2599  loss_mask_5: 0.4669  loss_dice_5: 1.171  loss_ce_6: 0.2685  loss_mask_6: 0.4622  loss_dice_6: 1.158  loss_ce_7: 0.2548  loss_mask_7: 0.4655  loss_dice_7: 1.158  loss_ce_8: 0.2658  loss_mask_8: 0.4654  loss_dice_8: 1.152    time: 0.5525  last_time: 0.5739  data_time: 0.0238  last_data_time: 0.0233   lr: 0.0001  max_mem: 15467M
[08/16 08:04:41] d2.utils.events INFO:  eta: 0:02:45  iter: 699  total_loss: 19.73  loss_ce: 0.275  loss_mask: 0.5063  loss_dice: 1.168  loss_ce_0: 0.2553  loss_mask_0: 0.5428  loss_dice_0: 1.293  loss_ce_1: 0.307  loss_mask_1: 0.511  loss_dice_1: 1.236  loss_ce_2: 0.2848  loss_mask_2: 0.5137  loss_dice_2: 1.242  loss_ce_3: 0.2744  loss_mask_3: 0.5014  loss_dice_3: 1.175  loss_ce_4: 0.2728  loss_mask_4: 0.4951  loss_dice_4: 1.178  loss_ce_5: 0.2768  loss_mask_5: 0.5012  loss_dice_5: 1.158  loss_ce_6: 0.2709  loss_mask_6: 0.5024  loss_dice_6: 1.131  loss_ce_7: 0.2625  loss_mask_7: 0.5049  loss_dice_7: 1.153  loss_ce_8: 0.2542  loss_mask_8: 0.5086  loss_dice_8: 1.154    time: 0.5525  last_time: 0.5404  data_time: 0.0247  last_data_time: 0.0219   lr: 0.0001  max_mem: 15467M
[08/16 08:04:52] d2.utils.events INFO:  eta: 0:02:34  iter: 719  total_loss: 20.01  loss_ce: 0.2601  loss_mask: 0.516  loss_dice: 1.183  loss_ce_0: 0.2889  loss_mask_0: 0.5557  loss_dice_0: 1.309  loss_ce_1: 0.3183  loss_mask_1: 0.5276  loss_dice_1: 1.265  loss_ce_2: 0.3203  loss_mask_2: 0.5192  loss_dice_2: 1.254  loss_ce_3: 0.2992  loss_mask_3: 0.5232  loss_dice_3: 1.19  loss_ce_4: 0.2566  loss_mask_4: 0.5136  loss_dice_4: 1.207  loss_ce_5: 0.237  loss_mask_5: 0.5086  loss_dice_5: 1.197  loss_ce_6: 0.2706  loss_mask_6: 0.5099  loss_dice_6: 1.167  loss_ce_7: 0.2435  loss_mask_7: 0.5106  loss_dice_7: 1.197  loss_ce_8: 0.2347  loss_mask_8: 0.5138  loss_dice_8: 1.184    time: 0.5525  last_time: 0.5263  data_time: 0.0240  last_data_time: 0.0239   lr: 0.0001  max_mem: 15467M
[08/16 08:05:03] d2.utils.events INFO:  eta: 0:02:23  iter: 739  total_loss: 19.7  loss_ce: 0.2225  loss_mask: 0.455  loss_dice: 1.183  loss_ce_0: 0.2233  loss_mask_0: 0.5227  loss_dice_0: 1.343  loss_ce_1: 0.289  loss_mask_1: 0.5022  loss_dice_1: 1.264  loss_ce_2: 0.3212  loss_mask_2: 0.4877  loss_dice_2: 1.228  loss_ce_3: 0.2705  loss_mask_3: 0.4694  loss_dice_3: 1.209  loss_ce_4: 0.2768  loss_mask_4: 0.4588  loss_dice_4: 1.217  loss_ce_5: 0.2486  loss_mask_5: 0.4608  loss_dice_5: 1.198  loss_ce_6: 0.2588  loss_mask_6: 0.4661  loss_dice_6: 1.181  loss_ce_7: 0.251  loss_mask_7: 0.4531  loss_dice_7: 1.181  loss_ce_8: 0.2442  loss_mask_8: 0.4559  loss_dice_8: 1.174    time: 0.5523  last_time: 0.5441  data_time: 0.0243  last_data_time: 0.0243   lr: 0.0001  max_mem: 15467M
[08/16 08:05:14] d2.utils.events INFO:  eta: 0:02:11  iter: 759  total_loss: 19.35  loss_ce: 0.2423  loss_mask: 0.4395  loss_dice: 1.18  loss_ce_0: 0.2413  loss_mask_0: 0.516  loss_dice_0: 1.333  loss_ce_1: 0.3056  loss_mask_1: 0.4749  loss_dice_1: 1.258  loss_ce_2: 0.2811  loss_mask_2: 0.4533  loss_dice_2: 1.215  loss_ce_3: 0.2646  loss_mask_3: 0.4539  loss_dice_3: 1.194  loss_ce_4: 0.2315  loss_mask_4: 0.4588  loss_dice_4: 1.237  loss_ce_5: 0.2251  loss_mask_5: 0.4575  loss_dice_5: 1.201  loss_ce_6: 0.2301  loss_mask_6: 0.4445  loss_dice_6: 1.209  loss_ce_7: 0.2259  loss_mask_7: 0.4365  loss_dice_7: 1.168  loss_ce_8: 0.2353  loss_mask_8: 0.4396  loss_dice_8: 1.205    time: 0.5523  last_time: 0.5577  data_time: 0.0236  last_data_time: 0.0283   lr: 0.0001  max_mem: 15467M
[08/16 08:05:25] d2.utils.events INFO:  eta: 0:02:00  iter: 779  total_loss: 18.69  loss_ce: 0.2297  loss_mask: 0.4662  loss_dice: 1.145  loss_ce_0: 0.2067  loss_mask_0: 0.4991  loss_dice_0: 1.273  loss_ce_1: 0.2685  loss_mask_1: 0.4749  loss_dice_1: 1.205  loss_ce_2: 0.2756  loss_mask_2: 0.4621  loss_dice_2: 1.188  loss_ce_3: 0.2282  loss_mask_3: 0.4613  loss_dice_3: 1.153  loss_ce_4: 0.2287  loss_mask_4: 0.4667  loss_dice_4: 1.145  loss_ce_5: 0.2327  loss_mask_5: 0.4668  loss_dice_5: 1.145  loss_ce_6: 0.2214  loss_mask_6: 0.4645  loss_dice_6: 1.156  loss_ce_7: 0.2276  loss_mask_7: 0.4602  loss_dice_7: 1.144  loss_ce_8: 0.2416  loss_mask_8: 0.4625  loss_dice_8: 1.133    time: 0.5522  last_time: 0.5599  data_time: 0.0236  last_data_time: 0.0225   lr: 0.0001  max_mem: 15467M
[08/16 08:05:36] d2.utils.events INFO:  eta: 0:01:49  iter: 799  total_loss: 18.24  loss_ce: 0.2375  loss_mask: 0.4471  loss_dice: 1.085  loss_ce_0: 0.225  loss_mask_0: 0.5199  loss_dice_0: 1.167  loss_ce_1: 0.2775  loss_mask_1: 0.4764  loss_dice_1: 1.148  loss_ce_2: 0.2439  loss_mask_2: 0.4629  loss_dice_2: 1.12  loss_ce_3: 0.2615  loss_mask_3: 0.4517  loss_dice_3: 1.097  loss_ce_4: 0.2163  loss_mask_4: 0.4595  loss_dice_4: 1.098  loss_ce_5: 0.2147  loss_mask_5: 0.4599  loss_dice_5: 1.096  loss_ce_6: 0.2244  loss_mask_6: 0.4522  loss_dice_6: 1.093  loss_ce_7: 0.2366  loss_mask_7: 0.4427  loss_dice_7: 1.108  loss_ce_8: 0.2354  loss_mask_8: 0.445  loss_dice_8: 1.089    time: 0.5522  last_time: 0.5653  data_time: 0.0232  last_data_time: 0.0220   lr: 0.0001  max_mem: 15467M
[08/16 08:05:48] d2.utils.events INFO:  eta: 0:01:39  iter: 819  total_loss: 18.63  loss_ce: 0.2443  loss_mask: 0.4756  loss_dice: 1.093  loss_ce_0: 0.2245  loss_mask_0: 0.5087  loss_dice_0: 1.206  loss_ce_1: 0.2497  loss_mask_1: 0.5062  loss_dice_1: 1.18  loss_ce_2: 0.2651  loss_mask_2: 0.483  loss_dice_2: 1.149  loss_ce_3: 0.2536  loss_mask_3: 0.4785  loss_dice_3: 1.144  loss_ce_4: 0.2407  loss_mask_4: 0.4744  loss_dice_4: 1.134  loss_ce_5: 0.2339  loss_mask_5: 0.4876  loss_dice_5: 1.111  loss_ce_6: 0.2416  loss_mask_6: 0.4787  loss_dice_6: 1.099  loss_ce_7: 0.258  loss_mask_7: 0.4759  loss_dice_7: 1.111  loss_ce_8: 0.2212  loss_mask_8: 0.48  loss_dice_8: 1.103    time: 0.5525  last_time: 0.5763  data_time: 0.0236  last_data_time: 0.0227   lr: 0.0001  max_mem: 15467M
[08/16 08:05:59] d2.utils.events INFO:  eta: 0:01:28  iter: 839  total_loss: 18.87  loss_ce: 0.2269  loss_mask: 0.4543  loss_dice: 1.156  loss_ce_0: 0.2467  loss_mask_0: 0.5069  loss_dice_0: 1.281  loss_ce_1: 0.2564  loss_mask_1: 0.4803  loss_dice_1: 1.235  loss_ce_2: 0.2833  loss_mask_2: 0.4601  loss_dice_2: 1.203  loss_ce_3: 0.2797  loss_mask_3: 0.4568  loss_dice_3: 1.176  loss_ce_4: 0.2767  loss_mask_4: 0.4528  loss_dice_4: 1.158  loss_ce_5: 0.2498  loss_mask_5: 0.4472  loss_dice_5: 1.165  loss_ce_6: 0.2329  loss_mask_6: 0.4521  loss_dice_6: 1.166  loss_ce_7: 0.2305  loss_mask_7: 0.4488  loss_dice_7: 1.141  loss_ce_8: 0.2177  loss_mask_8: 0.4554  loss_dice_8: 1.17    time: 0.5528  last_time: 0.5925  data_time: 0.0248  last_data_time: 0.0255   lr: 0.0001  max_mem: 15467M
[08/16 08:06:10] d2.utils.events INFO:  eta: 0:01:17  iter: 859  total_loss: 19.05  loss_ce: 0.2082  loss_mask: 0.5067  loss_dice: 1.119  loss_ce_0: 0.2243  loss_mask_0: 0.554  loss_dice_0: 1.253  loss_ce_1: 0.2873  loss_mask_1: 0.5106  loss_dice_1: 1.172  loss_ce_2: 0.2901  loss_mask_2: 0.5174  loss_dice_2: 1.155  loss_ce_3: 0.2276  loss_mask_3: 0.5094  loss_dice_3: 1.127  loss_ce_4: 0.2223  loss_mask_4: 0.506  loss_dice_4: 1.135  loss_ce_5: 0.2324  loss_mask_5: 0.4941  loss_dice_5: 1.143  loss_ce_6: 0.2135  loss_mask_6: 0.505  loss_dice_6: 1.135  loss_ce_7: 0.2144  loss_mask_7: 0.5042  loss_dice_7: 1.155  loss_ce_8: 0.2301  loss_mask_8: 0.5017  loss_dice_8: 1.123    time: 0.5530  last_time: 0.5558  data_time: 0.0246  last_data_time: 0.0243   lr: 0.0001  max_mem: 15467M
[08/16 08:06:22] d2.utils.events INFO:  eta: 0:01:06  iter: 879  total_loss: 18.97  loss_ce: 0.2088  loss_mask: 0.4663  loss_dice: 1.141  loss_ce_0: 0.2229  loss_mask_0: 0.5001  loss_dice_0: 1.28  loss_ce_1: 0.2732  loss_mask_1: 0.4832  loss_dice_1: 1.228  loss_ce_2: 0.2495  loss_mask_2: 0.4786  loss_dice_2: 1.181  loss_ce_3: 0.2413  loss_mask_3: 0.4709  loss_dice_3: 1.141  loss_ce_4: 0.2288  loss_mask_4: 0.4781  loss_dice_4: 1.17  loss_ce_5: 0.2172  loss_mask_5: 0.4686  loss_dice_5: 1.172  loss_ce_6: 0.2181  loss_mask_6: 0.4665  loss_dice_6: 1.166  loss_ce_7: 0.2  loss_mask_7: 0.4645  loss_dice_7: 1.147  loss_ce_8: 0.2116  loss_mask_8: 0.4571  loss_dice_8: 1.156    time: 0.5534  last_time: 0.6248  data_time: 0.0235  last_data_time: 0.0232   lr: 0.0001  max_mem: 15467M
[08/16 08:06:33] d2.utils.events INFO:  eta: 0:00:55  iter: 899  total_loss: 18.75  loss_ce: 0.2184  loss_mask: 0.4765  loss_dice: 1.139  loss_ce_0: 0.2527  loss_mask_0: 0.5195  loss_dice_0: 1.301  loss_ce_1: 0.2707  loss_mask_1: 0.4954  loss_dice_1: 1.257  loss_ce_2: 0.2497  loss_mask_2: 0.4868  loss_dice_2: 1.186  loss_ce_3: 0.2425  loss_mask_3: 0.4814  loss_dice_3: 1.153  loss_ce_4: 0.2401  loss_mask_4: 0.4658  loss_dice_4: 1.155  loss_ce_5: 0.2241  loss_mask_5: 0.4689  loss_dice_5: 1.156  loss_ce_6: 0.2535  loss_mask_6: 0.4845  loss_dice_6: 1.139  loss_ce_7: 0.2375  loss_mask_7: 0.4756  loss_dice_7: 1.175  loss_ce_8: 0.2167  loss_mask_8: 0.4722  loss_dice_8: 1.134    time: 0.5535  last_time: 0.5444  data_time: 0.0249  last_data_time: 0.0251   lr: 0.0001  max_mem: 15467M
[08/16 08:06:45] d2.utils.events INFO:  eta: 0:00:44  iter: 919  total_loss: 19.11  loss_ce: 0.2456  loss_mask: 0.4484  loss_dice: 1.142  loss_ce_0: 0.2607  loss_mask_0: 0.5111  loss_dice_0: 1.249  loss_ce_1: 0.2787  loss_mask_1: 0.483  loss_dice_1: 1.208  loss_ce_2: 0.2813  loss_mask_2: 0.454  loss_dice_2: 1.161  loss_ce_3: 0.2687  loss_mask_3: 0.4408  loss_dice_3: 1.159  loss_ce_4: 0.2566  loss_mask_4: 0.4511  loss_dice_4: 1.173  loss_ce_5: 0.2598  loss_mask_5: 0.4523  loss_dice_5: 1.151  loss_ce_6: 0.2533  loss_mask_6: 0.4495  loss_dice_6: 1.163  loss_ce_7: 0.2447  loss_mask_7: 0.449  loss_dice_7: 1.126  loss_ce_8: 0.2206  loss_mask_8: 0.4505  loss_dice_8: 1.172    time: 0.5539  last_time: 0.5715  data_time: 0.0244  last_data_time: 0.0240   lr: 0.0001  max_mem: 15467M
[08/16 08:06:56] d2.utils.events INFO:  eta: 0:00:33  iter: 939  total_loss: 18.68  loss_ce: 0.2213  loss_mask: 0.4393  loss_dice: 1.132  loss_ce_0: 0.2439  loss_mask_0: 0.4982  loss_dice_0: 1.248  loss_ce_1: 0.271  loss_mask_1: 0.4522  loss_dice_1: 1.231  loss_ce_2: 0.2754  loss_mask_2: 0.444  loss_dice_2: 1.18  loss_ce_3: 0.2516  loss_mask_3: 0.4466  loss_dice_3: 1.17  loss_ce_4: 0.2323  loss_mask_4: 0.4531  loss_dice_4: 1.159  loss_ce_5: 0.2418  loss_mask_5: 0.4501  loss_dice_5: 1.171  loss_ce_6: 0.235  loss_mask_6: 0.4498  loss_dice_6: 1.116  loss_ce_7: 0.2195  loss_mask_7: 0.4529  loss_dice_7: 1.131  loss_ce_8: 0.2304  loss_mask_8: 0.4383  loss_dice_8: 1.131    time: 0.5544  last_time: 0.5948  data_time: 0.0244  last_data_time: 0.0294   lr: 0.0001  max_mem: 15467M
[08/16 08:07:08] d2.utils.events INFO:  eta: 0:00:22  iter: 959  total_loss: 18.77  loss_ce: 0.2056  loss_mask: 0.4408  loss_dice: 1.122  loss_ce_0: 0.2493  loss_mask_0: 0.5089  loss_dice_0: 1.227  loss_ce_1: 0.2816  loss_mask_1: 0.4861  loss_dice_1: 1.172  loss_ce_2: 0.2833  loss_mask_2: 0.4486  loss_dice_2: 1.154  loss_ce_3: 0.2436  loss_mask_3: 0.4593  loss_dice_3: 1.144  loss_ce_4: 0.2278  loss_mask_4: 0.4452  loss_dice_4: 1.131  loss_ce_5: 0.2404  loss_mask_5: 0.4416  loss_dice_5: 1.149  loss_ce_6: 0.2356  loss_mask_6: 0.4472  loss_dice_6: 1.097  loss_ce_7: 0.2202  loss_mask_7: 0.4428  loss_dice_7: 1.119  loss_ce_8: 0.2117  loss_mask_8: 0.444  loss_dice_8: 1.114    time: 0.5547  last_time: 0.5562  data_time: 0.0249  last_data_time: 0.0280   lr: 0.0001  max_mem: 15467M
[08/16 08:07:19] d2.utils.events INFO:  eta: 0:00:11  iter: 979  total_loss: 18.21  loss_ce: 0.209  loss_mask: 0.4304  loss_dice: 1.07  loss_ce_0: 0.2526  loss_mask_0: 0.5153  loss_dice_0: 1.205  loss_ce_1: 0.2681  loss_mask_1: 0.4518  loss_dice_1: 1.212  loss_ce_2: 0.3073  loss_mask_2: 0.4469  loss_dice_2: 1.141  loss_ce_3: 0.2538  loss_mask_3: 0.4368  loss_dice_3: 1.086  loss_ce_4: 0.2519  loss_mask_4: 0.4317  loss_dice_4: 1.088  loss_ce_5: 0.2405  loss_mask_5: 0.4337  loss_dice_5: 1.097  loss_ce_6: 0.2193  loss_mask_6: 0.438  loss_dice_6: 1.068  loss_ce_7: 0.2512  loss_mask_7: 0.4352  loss_dice_7: 1.071  loss_ce_8: 0.2341  loss_mask_8: 0.4339  loss_dice_8: 1.088    time: 0.5549  last_time: 0.5599  data_time: 0.0241  last_data_time: 0.0239   lr: 0.0001  max_mem: 15467M
[08/16 08:07:30] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/Normal/cl_008_10000/model_final.pth
[08/16 08:07:33] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 18.79  loss_ce: 0.224  loss_mask: 0.4372  loss_dice: 1.118  loss_ce_0: 0.2199  loss_mask_0: 0.4773  loss_dice_0: 1.226  loss_ce_1: 0.2601  loss_mask_1: 0.4584  loss_dice_1: 1.176  loss_ce_2: 0.2615  loss_mask_2: 0.4552  loss_dice_2: 1.153  loss_ce_3: 0.2431  loss_mask_3: 0.461  loss_dice_3: 1.119  loss_ce_4: 0.237  loss_mask_4: 0.4535  loss_dice_4: 1.123  loss_ce_5: 0.2398  loss_mask_5: 0.4527  loss_dice_5: 1.125  loss_ce_6: 0.2581  loss_mask_6: 0.4462  loss_dice_6: 1.092  loss_ce_7: 0.226  loss_mask_7: 0.4416  loss_dice_7: 1.101  loss_ce_8: 0.2253  loss_mask_8: 0.4507  loss_dice_8: 1.114    time: 0.5547  last_time: 0.5729  data_time: 0.0229  last_data_time: 0.0274   lr: 0.0001  max_mem: 15467M
[08/16 08:07:33] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:09:13 (0.5547 s / it)
[08/16 08:07:33] d2.engine.hooks INFO: Total training time: 0:09:19 (0:00:06 on hooks)
[08/16 08:07:33] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/16 08:07:33] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/16 08:07:33] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/16 08:07:33] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/16 08:07:33] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/16 08:07:33] d2.evaluation.evaluator INFO: Start inference on 250 batches
[08/16 08:07:40] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0055 s/iter. Inference: 0.2092 s/iter. Eval: 0.0731 s/iter. Total: 0.2878 s/iter. ETA=0:01:08
[08/16 08:07:45] d2.evaluation.evaluator INFO: Inference done 29/250. Dataloading: 0.0068 s/iter. Inference: 0.2130 s/iter. Eval: 0.0707 s/iter. Total: 0.2906 s/iter. ETA=0:01:04
[08/16 08:07:50] d2.evaluation.evaluator INFO: Inference done 47/250. Dataloading: 0.0069 s/iter. Inference: 0.2117 s/iter. Eval: 0.0692 s/iter. Total: 0.2879 s/iter. ETA=0:00:58
[08/16 08:07:55] d2.evaluation.evaluator INFO: Inference done 63/250. Dataloading: 0.0070 s/iter. Inference: 0.2198 s/iter. Eval: 0.0697 s/iter. Total: 0.2966 s/iter. ETA=0:00:55
[08/16 08:08:00] d2.evaluation.evaluator INFO: Inference done 81/250. Dataloading: 0.0070 s/iter. Inference: 0.2158 s/iter. Eval: 0.0698 s/iter. Total: 0.2926 s/iter. ETA=0:00:49
[08/16 08:08:05] d2.evaluation.evaluator INFO: Inference done 99/250. Dataloading: 0.0070 s/iter. Inference: 0.2130 s/iter. Eval: 0.0698 s/iter. Total: 0.2899 s/iter. ETA=0:00:43
[08/16 08:08:10] d2.evaluation.evaluator INFO: Inference done 117/250. Dataloading: 0.0070 s/iter. Inference: 0.2119 s/iter. Eval: 0.0704 s/iter. Total: 0.2894 s/iter. ETA=0:00:38
[08/16 08:08:16] d2.evaluation.evaluator INFO: Inference done 135/250. Dataloading: 0.0069 s/iter. Inference: 0.2120 s/iter. Eval: 0.0706 s/iter. Total: 0.2896 s/iter. ETA=0:00:33
[08/16 08:08:21] d2.evaluation.evaluator INFO: Inference done 153/250. Dataloading: 0.0069 s/iter. Inference: 0.2120 s/iter. Eval: 0.0703 s/iter. Total: 0.2893 s/iter. ETA=0:00:28
[08/16 08:08:26] d2.evaluation.evaluator INFO: Inference done 170/250. Dataloading: 0.0069 s/iter. Inference: 0.2124 s/iter. Eval: 0.0713 s/iter. Total: 0.2907 s/iter. ETA=0:00:23
[08/16 08:08:31] d2.evaluation.evaluator INFO: Inference done 187/250. Dataloading: 0.0069 s/iter. Inference: 0.2135 s/iter. Eval: 0.0709 s/iter. Total: 0.2914 s/iter. ETA=0:00:18
[08/16 08:08:36] d2.evaluation.evaluator INFO: Inference done 204/250. Dataloading: 0.0069 s/iter. Inference: 0.2144 s/iter. Eval: 0.0706 s/iter. Total: 0.2920 s/iter. ETA=0:00:13
[08/16 08:08:41] d2.evaluation.evaluator INFO: Inference done 221/250. Dataloading: 0.0070 s/iter. Inference: 0.2140 s/iter. Eval: 0.0713 s/iter. Total: 0.2923 s/iter. ETA=0:00:08
[08/16 08:08:46] d2.evaluation.evaluator INFO: Inference done 239/250. Dataloading: 0.0070 s/iter. Inference: 0.2134 s/iter. Eval: 0.0714 s/iter. Total: 0.2918 s/iter. ETA=0:00:03
[08/16 08:08:50] d2.evaluation.evaluator INFO: Total inference time: 0:01:11.990524 (0.293839 s / iter per device, on 2 devices)
[08/16 08:08:50] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:00:52 (0.212252 s / iter per device, on 2 devices)
[08/16 08:08:50] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evaliokbfyep ...
[08/16 08:09:02] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 33.231 | 45.607 | 40.749 |      19       |
| Things | 0.000  | 0.000  | 0.000  |       8       |
| Stuff  | 57.398 | 78.775 | 70.384 |      11       |
[08/16 08:09:02] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 95.973 | 96.372 | 99.586 |     Stuff     |
| class_8  | 65.377 | 80.538 | 81.175 |     Stuff     |
| class_11 | 82.849 | 86.647 | 95.617 |     Stuff     |
| class_12 | 30.326 | 78.342 | 38.710 |     Stuff     |
| class_13 | 29.024 | 71.641 | 40.513 |     Stuff     |
| class_17 | 36.660 | 61.707 | 59.410 |     Stuff     |
| class_19 | 35.610 | 65.116 | 54.688 |     Stuff     |
| class_20 | 55.535 | 74.258 | 74.786 |     Stuff     |
| class_21 | 87.135 | 88.867 | 98.051 |     Stuff     |
| class_22 | 26.889 | 71.753 | 37.475 |     Stuff     |
| class_23 | 86.005 | 91.288 | 94.213 |     Stuff     |
| class_24 | 0.000  | 0.000  | 0.000  |    Things     |
| class_25 | 0.000  | 0.000  | 0.000  |    Things     |
| class_26 | 0.000  | 0.000  | 0.000  |    Things     |
| class_27 | 0.000  | 0.000  | 0.000  |    Things     |
| class_28 | 0.000  | 0.000  | 0.000  |    Things     |
| class_31 | 0.000  | 0.000  | 0.000  |    Things     |
| class_32 | 0.000  | 0.000  | 0.000  |    Things     |
| class_33 | 0.000  | 0.000  | 0.000  |    Things     |
[08/16 08:09:02] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[08/16 08:09:02] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/16 08:09:02] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/16 08:09:02] d2.evaluation.testing INFO: copypaste: 33.2307,45.6068,40.7486,0.0000,0.0000,0.0000,57.3985,78.7754,70.3839,95.9726,96.3716,99.5859,65.3766,80.5377,81.1752,82.8491,86.6471,95.6167,30.3260,78.3421,38.7097,29.0239,71.6413,40.5128,36.6604,61.7074,59.4100,35.6105,65.1163,54.6875,55.5348,74.2580,74.7863,87.1349,88.8667,98.0513,26.8892,71.7534,37.4745,86.0053,91.2882,94.2130,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000,0.0000
