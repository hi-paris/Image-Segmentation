[08/29 23:42:21] detectron2 INFO: Rank of current process: 0. World size: 1
[08/29 23:42:22] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA L40S (arch=8.9)
Driver version                   545.29.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[08/29 23:42:22] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_exp.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[08/29 23:42:22] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_exp.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[08/29 23:42:22] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[08/29 23:42:22] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/config.yaml
[08/29 23:42:22] d2.utils.env INFO: Using a generated random seed 23134683
[08/29 23:42:26] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 512)
)
[08/29 23:42:26] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[08/29 23:42:26] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[08/29 23:42:26] d2.data.build INFO: Using training sampler TrainingSampler
[08/29 23:42:26] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/29 23:42:26] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[08/29 23:42:26] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[08/29 23:42:26] d2.data.build INFO: Making batched data loader with batch_size=8
[08/29 23:42:26] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[08/29 23:42:26] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[08/29 23:42:26] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[08/29 23:42:26] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[08/29 23:42:26] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.10.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.11.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.12.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.13.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.14.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.15.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.16.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.17.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.18.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.19.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.20.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.21.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.22.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.6.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.7.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.8.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.9.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mcriterion.empty_weight[0m
[08/29 23:42:26] d2.engine.train_loop INFO: Starting training from iteration 0
[08/29 23:42:50] d2.utils.events INFO:  eta: 0:16:30  iter: 19  total_loss: 32.21  loss_ce: 1.354  loss_mask: 0.2828  loss_dice: 1.5  loss_ce_0: 1.531  loss_mask_0: 0.3045  loss_dice_0: 1.835  loss_ce_1: 1.549  loss_mask_1: 0.3048  loss_dice_1: 1.694  loss_ce_2: 1.434  loss_mask_2: 0.3053  loss_dice_2: 1.597  loss_ce_3: 1.408  loss_mask_3: 0.2872  loss_dice_3: 1.55  loss_ce_4: 1.341  loss_mask_4: 0.2809  loss_dice_4: 1.532  loss_ce_5: 1.375  loss_mask_5: 0.2751  loss_dice_5: 1.503  loss_ce_6: 1.337  loss_mask_6: 0.2845  loss_dice_6: 1.486  loss_ce_7: 1.357  loss_mask_7: 0.2814  loss_dice_7: 1.486  loss_ce_8: 1.342  loss_mask_8: 0.2813  loss_dice_8: 1.481    time: 1.0197  last_time: 1.0304  data_time: 0.0660  last_data_time: 0.0432   lr: 0.0001  max_mem: 31285M
[08/29 23:43:11] d2.utils.events INFO:  eta: 0:16:23  iter: 39  total_loss: 26.07  loss_ce: 0.7881  loss_mask: 0.2252  loss_dice: 1.379  loss_ce_0: 0.8649  loss_mask_0: 0.2561  loss_dice_0: 1.717  loss_ce_1: 0.9589  loss_mask_1: 0.249  loss_dice_1: 1.629  loss_ce_2: 0.9116  loss_mask_2: 0.2319  loss_dice_2: 1.489  loss_ce_3: 0.8631  loss_mask_3: 0.221  loss_dice_3: 1.44  loss_ce_4: 0.8217  loss_mask_4: 0.2293  loss_dice_4: 1.446  loss_ce_5: 0.8511  loss_mask_5: 0.2254  loss_dice_5: 1.461  loss_ce_6: 0.856  loss_mask_6: 0.226  loss_dice_6: 1.413  loss_ce_7: 0.8391  loss_mask_7: 0.2257  loss_dice_7: 1.403  loss_ce_8: 0.8303  loss_mask_8: 0.2269  loss_dice_8: 1.419    time: 1.0318  last_time: 1.0428  data_time: 0.0381  last_data_time: 0.0459   lr: 0.0001  max_mem: 31567M
[08/29 23:43:31] d2.utils.events INFO:  eta: 0:16:04  iter: 59  total_loss: 23.4  loss_ce: 0.6985  loss_mask: 0.2291  loss_dice: 1.294  loss_ce_0: 0.7686  loss_mask_0: 0.2596  loss_dice_0: 1.597  loss_ce_1: 0.8501  loss_mask_1: 0.2438  loss_dice_1: 1.452  loss_ce_2: 0.775  loss_mask_2: 0.2327  loss_dice_2: 1.417  loss_ce_3: 0.7432  loss_mask_3: 0.2246  loss_dice_3: 1.371  loss_ce_4: 0.6991  loss_mask_4: 0.2297  loss_dice_4: 1.312  loss_ce_5: 0.7243  loss_mask_5: 0.2262  loss_dice_5: 1.371  loss_ce_6: 0.7012  loss_mask_6: 0.2275  loss_dice_6: 1.317  loss_ce_7: 0.6857  loss_mask_7: 0.2296  loss_dice_7: 1.316  loss_ce_8: 0.7168  loss_mask_8: 0.2278  loss_dice_8: 1.31    time: 1.0287  last_time: 1.0567  data_time: 0.0370  last_data_time: 0.0402   lr: 0.0001  max_mem: 31567M
[08/29 23:43:52] d2.utils.events INFO:  eta: 0:15:45  iter: 79  total_loss: 23.54  loss_ce: 0.6752  loss_mask: 0.1936  loss_dice: 1.323  loss_ce_0: 0.7703  loss_mask_0: 0.2314  loss_dice_0: 1.542  loss_ce_1: 0.8609  loss_mask_1: 0.2142  loss_dice_1: 1.426  loss_ce_2: 0.7861  loss_mask_2: 0.2021  loss_dice_2: 1.364  loss_ce_3: 0.7626  loss_mask_3: 0.1981  loss_dice_3: 1.316  loss_ce_4: 0.7245  loss_mask_4: 0.1981  loss_dice_4: 1.313  loss_ce_5: 0.7129  loss_mask_5: 0.1991  loss_dice_5: 1.299  loss_ce_6: 0.7248  loss_mask_6: 0.197  loss_dice_6: 1.278  loss_ce_7: 0.6884  loss_mask_7: 0.1963  loss_dice_7: 1.295  loss_ce_8: 0.7043  loss_mask_8: 0.1949  loss_dice_8: 1.265    time: 1.0296  last_time: 0.9879  data_time: 0.0371  last_data_time: 0.0292   lr: 0.0001  max_mem: 31567M
[08/29 23:44:13] d2.utils.events INFO:  eta: 0:15:25  iter: 99  total_loss: 22.68  loss_ce: 0.6845  loss_mask: 0.1934  loss_dice: 1.29  loss_ce_0: 0.7808  loss_mask_0: 0.213  loss_dice_0: 1.554  loss_ce_1: 0.8563  loss_mask_1: 0.202  loss_dice_1: 1.486  loss_ce_2: 0.7544  loss_mask_2: 0.1938  loss_dice_2: 1.419  loss_ce_3: 0.7162  loss_mask_3: 0.1922  loss_dice_3: 1.341  loss_ce_4: 0.6858  loss_mask_4: 0.1963  loss_dice_4: 1.334  loss_ce_5: 0.681  loss_mask_5: 0.195  loss_dice_5: 1.348  loss_ce_6: 0.6948  loss_mask_6: 0.1947  loss_dice_6: 1.323  loss_ce_7: 0.6987  loss_mask_7: 0.1937  loss_dice_7: 1.33  loss_ce_8: 0.6907  loss_mask_8: 0.1947  loss_dice_8: 1.308    time: 1.0322  last_time: 0.9956  data_time: 0.0408  last_data_time: 0.0279   lr: 0.0001  max_mem: 32877M
[08/29 23:44:33] d2.utils.events INFO:  eta: 0:15:04  iter: 119  total_loss: 23.05  loss_ce: 0.7045  loss_mask: 0.1942  loss_dice: 1.307  loss_ce_0: 0.7721  loss_mask_0: 0.2173  loss_dice_0: 1.567  loss_ce_1: 0.8271  loss_mask_1: 0.2073  loss_dice_1: 1.468  loss_ce_2: 0.7973  loss_mask_2: 0.1967  loss_dice_2: 1.37  loss_ce_3: 0.7524  loss_mask_3: 0.1968  loss_dice_3: 1.353  loss_ce_4: 0.7174  loss_mask_4: 0.1988  loss_dice_4: 1.34  loss_ce_5: 0.6889  loss_mask_5: 0.2  loss_dice_5: 1.328  loss_ce_6: 0.6766  loss_mask_6: 0.199  loss_dice_6: 1.311  loss_ce_7: 0.6735  loss_mask_7: 0.1973  loss_dice_7: 1.306  loss_ce_8: 0.6979  loss_mask_8: 0.1983  loss_dice_8: 1.286    time: 1.0317  last_time: 1.0239  data_time: 0.0404  last_data_time: 0.0385   lr: 0.0001  max_mem: 32877M
[08/29 23:44:54] d2.utils.events INFO:  eta: 0:14:44  iter: 139  total_loss: 22.8  loss_ce: 0.6616  loss_mask: 0.1939  loss_dice: 1.331  loss_ce_0: 0.6936  loss_mask_0: 0.2149  loss_dice_0: 1.578  loss_ce_1: 0.7422  loss_mask_1: 0.2032  loss_dice_1: 1.5  loss_ce_2: 0.7282  loss_mask_2: 0.1959  loss_dice_2: 1.446  loss_ce_3: 0.6951  loss_mask_3: 0.1916  loss_dice_3: 1.392  loss_ce_4: 0.6632  loss_mask_4: 0.1959  loss_dice_4: 1.385  loss_ce_5: 0.6593  loss_mask_5: 0.1936  loss_dice_5: 1.371  loss_ce_6: 0.6663  loss_mask_6: 0.1922  loss_dice_6: 1.339  loss_ce_7: 0.6687  loss_mask_7: 0.1935  loss_dice_7: 1.374  loss_ce_8: 0.6828  loss_mask_8: 0.1923  loss_dice_8: 1.34    time: 1.0335  last_time: 1.0563  data_time: 0.0369  last_data_time: 0.0416   lr: 0.0001  max_mem: 32877M
[08/29 23:45:15] d2.utils.events INFO:  eta: 0:14:28  iter: 159  total_loss: 22.65  loss_ce: 0.652  loss_mask: 0.1796  loss_dice: 1.341  loss_ce_0: 0.6959  loss_mask_0: 0.2101  loss_dice_0: 1.578  loss_ce_1: 0.7989  loss_mask_1: 0.1885  loss_dice_1: 1.446  loss_ce_2: 0.7183  loss_mask_2: 0.1808  loss_dice_2: 1.382  loss_ce_3: 0.6784  loss_mask_3: 0.1774  loss_dice_3: 1.35  loss_ce_4: 0.6726  loss_mask_4: 0.1781  loss_dice_4: 1.366  loss_ce_5: 0.6658  loss_mask_5: 0.1786  loss_dice_5: 1.325  loss_ce_6: 0.6678  loss_mask_6: 0.1779  loss_dice_6: 1.302  loss_ce_7: 0.6417  loss_mask_7: 0.1789  loss_dice_7: 1.296  loss_ce_8: 0.6499  loss_mask_8: 0.1778  loss_dice_8: 1.306    time: 1.0359  last_time: 1.0925  data_time: 0.0400  last_data_time: 0.0389   lr: 0.0001  max_mem: 32877M
[08/29 23:45:36] d2.utils.events INFO:  eta: 0:14:05  iter: 179  total_loss: 23.02  loss_ce: 0.7155  loss_mask: 0.1942  loss_dice: 1.325  loss_ce_0: 0.7292  loss_mask_0: 0.2198  loss_dice_0: 1.573  loss_ce_1: 0.7957  loss_mask_1: 0.2093  loss_dice_1: 1.494  loss_ce_2: 0.7397  loss_mask_2: 0.1983  loss_dice_2: 1.434  loss_ce_3: 0.7231  loss_mask_3: 0.1955  loss_dice_3: 1.385  loss_ce_4: 0.7076  loss_mask_4: 0.1947  loss_dice_4: 1.366  loss_ce_5: 0.6917  loss_mask_5: 0.1905  loss_dice_5: 1.328  loss_ce_6: 0.6878  loss_mask_6: 0.1922  loss_dice_6: 1.316  loss_ce_7: 0.6937  loss_mask_7: 0.1942  loss_dice_7: 1.336  loss_ce_8: 0.6917  loss_mask_8: 0.194  loss_dice_8: 1.321    time: 1.0346  last_time: 1.0279  data_time: 0.0409  last_data_time: 0.0439   lr: 0.0001  max_mem: 32877M
[08/29 23:45:57] d2.utils.events INFO:  eta: 0:13:45  iter: 199  total_loss: 23.62  loss_ce: 0.6627  loss_mask: 0.1944  loss_dice: 1.316  loss_ce_0: 0.6906  loss_mask_0: 0.2197  loss_dice_0: 1.665  loss_ce_1: 0.7389  loss_mask_1: 0.1997  loss_dice_1: 1.531  loss_ce_2: 0.7504  loss_mask_2: 0.195  loss_dice_2: 1.438  loss_ce_3: 0.6949  loss_mask_3: 0.1964  loss_dice_3: 1.377  loss_ce_4: 0.6921  loss_mask_4: 0.1943  loss_dice_4: 1.411  loss_ce_5: 0.6816  loss_mask_5: 0.1965  loss_dice_5: 1.385  loss_ce_6: 0.6757  loss_mask_6: 0.1985  loss_dice_6: 1.345  loss_ce_7: 0.664  loss_mask_7: 0.1953  loss_dice_7: 1.357  loss_ce_8: 0.6623  loss_mask_8: 0.1952  loss_dice_8: 1.403    time: 1.0352  last_time: 1.0024  data_time: 0.0390  last_data_time: 0.0411   lr: 0.0001  max_mem: 32877M
[08/29 23:46:18] d2.utils.events INFO:  eta: 0:13:24  iter: 219  total_loss: 22.11  loss_ce: 0.6408  loss_mask: 0.1825  loss_dice: 1.27  loss_ce_0: 0.7338  loss_mask_0: 0.2032  loss_dice_0: 1.552  loss_ce_1: 0.8151  loss_mask_1: 0.1905  loss_dice_1: 1.441  loss_ce_2: 0.7698  loss_mask_2: 0.1835  loss_dice_2: 1.357  loss_ce_3: 0.7048  loss_mask_3: 0.1813  loss_dice_3: 1.31  loss_ce_4: 0.6663  loss_mask_4: 0.1824  loss_dice_4: 1.312  loss_ce_5: 0.6722  loss_mask_5: 0.1807  loss_dice_5: 1.303  loss_ce_6: 0.6294  loss_mask_6: 0.183  loss_dice_6: 1.312  loss_ce_7: 0.6516  loss_mask_7: 0.1824  loss_dice_7: 1.275  loss_ce_8: 0.6502  loss_mask_8: 0.1844  loss_dice_8: 1.275    time: 1.0349  last_time: 1.0413  data_time: 0.0392  last_data_time: 0.0439   lr: 0.0001  max_mem: 32877M
[08/29 23:46:38] d2.utils.events INFO:  eta: 0:13:02  iter: 239  total_loss: 22.56  loss_ce: 0.6641  loss_mask: 0.1857  loss_dice: 1.282  loss_ce_0: 0.7481  loss_mask_0: 0.2246  loss_dice_0: 1.528  loss_ce_1: 0.7885  loss_mask_1: 0.2021  loss_dice_1: 1.44  loss_ce_2: 0.6957  loss_mask_2: 0.1962  loss_dice_2: 1.374  loss_ce_3: 0.6969  loss_mask_3: 0.192  loss_dice_3: 1.337  loss_ce_4: 0.6563  loss_mask_4: 0.1901  loss_dice_4: 1.331  loss_ce_5: 0.6481  loss_mask_5: 0.1883  loss_dice_5: 1.303  loss_ce_6: 0.6439  loss_mask_6: 0.1893  loss_dice_6: 1.292  loss_ce_7: 0.6374  loss_mask_7: 0.1887  loss_dice_7: 1.322  loss_ce_8: 0.6569  loss_mask_8: 0.1884  loss_dice_8: 1.318    time: 1.0338  last_time: 1.0077  data_time: 0.0380  last_data_time: 0.0308   lr: 0.0001  max_mem: 32877M
[08/29 23:46:59] d2.utils.events INFO:  eta: 0:12:42  iter: 259  total_loss: 21.82  loss_ce: 0.6525  loss_mask: 0.1835  loss_dice: 1.228  loss_ce_0: 0.7337  loss_mask_0: 0.2145  loss_dice_0: 1.576  loss_ce_1: 0.7717  loss_mask_1: 0.2022  loss_dice_1: 1.415  loss_ce_2: 0.7366  loss_mask_2: 0.1915  loss_dice_2: 1.338  loss_ce_3: 0.6796  loss_mask_3: 0.1852  loss_dice_3: 1.286  loss_ce_4: 0.6515  loss_mask_4: 0.1858  loss_dice_4: 1.276  loss_ce_5: 0.6515  loss_mask_5: 0.1898  loss_dice_5: 1.29  loss_ce_6: 0.6542  loss_mask_6: 0.1848  loss_dice_6: 1.29  loss_ce_7: 0.6299  loss_mask_7: 0.1836  loss_dice_7: 1.246  loss_ce_8: 0.6264  loss_mask_8: 0.1855  loss_dice_8: 1.258    time: 1.0343  last_time: 1.0301  data_time: 0.0370  last_data_time: 0.0373   lr: 0.0001  max_mem: 32877M
[08/29 23:47:20] d2.utils.events INFO:  eta: 0:12:21  iter: 279  total_loss: 23.46  loss_ce: 0.6787  loss_mask: 0.1731  loss_dice: 1.359  loss_ce_0: 0.6961  loss_mask_0: 0.2016  loss_dice_0: 1.643  loss_ce_1: 0.7913  loss_mask_1: 0.1951  loss_dice_1: 1.525  loss_ce_2: 0.7603  loss_mask_2: 0.1861  loss_dice_2: 1.43  loss_ce_3: 0.7119  loss_mask_3: 0.1802  loss_dice_3: 1.406  loss_ce_4: 0.6695  loss_mask_4: 0.1821  loss_dice_4: 1.407  loss_ce_5: 0.6743  loss_mask_5: 0.1744  loss_dice_5: 1.392  loss_ce_6: 0.6708  loss_mask_6: 0.1769  loss_dice_6: 1.344  loss_ce_7: 0.6387  loss_mask_7: 0.1756  loss_dice_7: 1.392  loss_ce_8: 0.6476  loss_mask_8: 0.1783  loss_dice_8: 1.402    time: 1.0345  last_time: 1.0505  data_time: 0.0396  last_data_time: 0.0378   lr: 0.0001  max_mem: 32877M
[08/29 23:47:40] d2.utils.events INFO:  eta: 0:12:01  iter: 299  total_loss: 21.45  loss_ce: 0.627  loss_mask: 0.1846  loss_dice: 1.27  loss_ce_0: 0.6867  loss_mask_0: 0.2151  loss_dice_0: 1.486  loss_ce_1: 0.7713  loss_mask_1: 0.1964  loss_dice_1: 1.375  loss_ce_2: 0.6821  loss_mask_2: 0.1912  loss_dice_2: 1.308  loss_ce_3: 0.6432  loss_mask_3: 0.1852  loss_dice_3: 1.292  loss_ce_4: 0.6544  loss_mask_4: 0.1896  loss_dice_4: 1.267  loss_ce_5: 0.6083  loss_mask_5: 0.1826  loss_dice_5: 1.274  loss_ce_6: 0.5981  loss_mask_6: 0.1815  loss_dice_6: 1.255  loss_ce_7: 0.5986  loss_mask_7: 0.1848  loss_dice_7: 1.276  loss_ce_8: 0.6017  loss_mask_8: 0.1832  loss_dice_8: 1.245    time: 1.0339  last_time: 1.0276  data_time: 0.0374  last_data_time: 0.0283   lr: 0.0001  max_mem: 32877M
[08/29 23:48:01] d2.utils.events INFO:  eta: 0:11:40  iter: 319  total_loss: 21.93  loss_ce: 0.67  loss_mask: 0.17  loss_dice: 1.272  loss_ce_0: 0.6858  loss_mask_0: 0.1995  loss_dice_0: 1.559  loss_ce_1: 0.7763  loss_mask_1: 0.1929  loss_dice_1: 1.423  loss_ce_2: 0.6838  loss_mask_2: 0.1774  loss_dice_2: 1.355  loss_ce_3: 0.6771  loss_mask_3: 0.1723  loss_dice_3: 1.316  loss_ce_4: 0.6606  loss_mask_4: 0.1751  loss_dice_4: 1.298  loss_ce_5: 0.6745  loss_mask_5: 0.1742  loss_dice_5: 1.318  loss_ce_6: 0.6502  loss_mask_6: 0.1703  loss_dice_6: 1.259  loss_ce_7: 0.6635  loss_mask_7: 0.1727  loss_dice_7: 1.264  loss_ce_8: 0.695  loss_mask_8: 0.1759  loss_dice_8: 1.295    time: 1.0339  last_time: 1.0247  data_time: 0.0395  last_data_time: 0.0298   lr: 0.0001  max_mem: 32877M
[08/29 23:48:22] d2.utils.events INFO:  eta: 0:11:19  iter: 339  total_loss: 21.86  loss_ce: 0.6036  loss_mask: 0.1992  loss_dice: 1.276  loss_ce_0: 0.723  loss_mask_0: 0.2285  loss_dice_0: 1.556  loss_ce_1: 0.8175  loss_mask_1: 0.2086  loss_dice_1: 1.419  loss_ce_2: 0.7378  loss_mask_2: 0.2021  loss_dice_2: 1.338  loss_ce_3: 0.6841  loss_mask_3: 0.1963  loss_dice_3: 1.288  loss_ce_4: 0.6341  loss_mask_4: 0.1983  loss_dice_4: 1.284  loss_ce_5: 0.6456  loss_mask_5: 0.1969  loss_dice_5: 1.286  loss_ce_6: 0.6616  loss_mask_6: 0.1944  loss_dice_6: 1.271  loss_ce_7: 0.6431  loss_mask_7: 0.1965  loss_dice_7: 1.288  loss_ce_8: 0.6333  loss_mask_8: 0.1947  loss_dice_8: 1.267    time: 1.0338  last_time: 1.0309  data_time: 0.0390  last_data_time: 0.0485   lr: 0.0001  max_mem: 32877M
[08/29 23:48:42] d2.utils.events INFO:  eta: 0:10:59  iter: 359  total_loss: 21.92  loss_ce: 0.629  loss_mask: 0.1844  loss_dice: 1.261  loss_ce_0: 0.7017  loss_mask_0: 0.2013  loss_dice_0: 1.496  loss_ce_1: 0.7855  loss_mask_1: 0.1914  loss_dice_1: 1.433  loss_ce_2: 0.7147  loss_mask_2: 0.1845  loss_dice_2: 1.322  loss_ce_3: 0.677  loss_mask_3: 0.1846  loss_dice_3: 1.266  loss_ce_4: 0.6519  loss_mask_4: 0.1864  loss_dice_4: 1.284  loss_ce_5: 0.6409  loss_mask_5: 0.1839  loss_dice_5: 1.279  loss_ce_6: 0.6205  loss_mask_6: 0.1831  loss_dice_6: 1.231  loss_ce_7: 0.6235  loss_mask_7: 0.1867  loss_dice_7: 1.251  loss_ce_8: 0.6478  loss_mask_8: 0.1849  loss_dice_8: 1.242    time: 1.0327  last_time: 1.0355  data_time: 0.0344  last_data_time: 0.0387   lr: 0.0001  max_mem: 32877M
[08/29 23:49:02] d2.utils.events INFO:  eta: 0:10:37  iter: 379  total_loss: 21.41  loss_ce: 0.5863  loss_mask: 0.1805  loss_dice: 1.224  loss_ce_0: 0.6966  loss_mask_0: 0.2191  loss_dice_0: 1.472  loss_ce_1: 0.7595  loss_mask_1: 0.1876  loss_dice_1: 1.376  loss_ce_2: 0.6864  loss_mask_2: 0.1805  loss_dice_2: 1.297  loss_ce_3: 0.6805  loss_mask_3: 0.1808  loss_dice_3: 1.229  loss_ce_4: 0.6516  loss_mask_4: 0.1799  loss_dice_4: 1.253  loss_ce_5: 0.6588  loss_mask_5: 0.1807  loss_dice_5: 1.244  loss_ce_6: 0.6167  loss_mask_6: 0.1827  loss_dice_6: 1.226  loss_ce_7: 0.6023  loss_mask_7: 0.1802  loss_dice_7: 1.261  loss_ce_8: 0.6244  loss_mask_8: 0.1809  loss_dice_8: 1.25    time: 1.0318  last_time: 1.0206  data_time: 0.0352  last_data_time: 0.0455   lr: 0.0001  max_mem: 32877M
[08/29 23:49:23] d2.utils.events INFO:  eta: 0:10:17  iter: 399  total_loss: 21.19  loss_ce: 0.6148  loss_mask: 0.1695  loss_dice: 1.248  loss_ce_0: 0.6948  loss_mask_0: 0.2011  loss_dice_0: 1.512  loss_ce_1: 0.7414  loss_mask_1: 0.1905  loss_dice_1: 1.378  loss_ce_2: 0.6661  loss_mask_2: 0.1757  loss_dice_2: 1.311  loss_ce_3: 0.6522  loss_mask_3: 0.1738  loss_dice_3: 1.275  loss_ce_4: 0.6178  loss_mask_4: 0.1725  loss_dice_4: 1.274  loss_ce_5: 0.6004  loss_mask_5: 0.1717  loss_dice_5: 1.282  loss_ce_6: 0.5802  loss_mask_6: 0.1697  loss_dice_6: 1.272  loss_ce_7: 0.5835  loss_mask_7: 0.1711  loss_dice_7: 1.243  loss_ce_8: 0.5917  loss_mask_8: 0.1693  loss_dice_8: 1.245    time: 1.0320  last_time: 1.0634  data_time: 0.0376  last_data_time: 0.0406   lr: 0.0001  max_mem: 32877M
[08/29 23:49:44] d2.utils.events INFO:  eta: 0:09:56  iter: 419  total_loss: 21.42  loss_ce: 0.5801  loss_mask: 0.1846  loss_dice: 1.264  loss_ce_0: 0.6286  loss_mask_0: 0.2106  loss_dice_0: 1.543  loss_ce_1: 0.7493  loss_mask_1: 0.1977  loss_dice_1: 1.468  loss_ce_2: 0.708  loss_mask_2: 0.1923  loss_dice_2: 1.366  loss_ce_3: 0.6356  loss_mask_3: 0.1916  loss_dice_3: 1.309  loss_ce_4: 0.6081  loss_mask_4: 0.1889  loss_dice_4: 1.314  loss_ce_5: 0.5924  loss_mask_5: 0.186  loss_dice_5: 1.306  loss_ce_6: 0.5569  loss_mask_6: 0.1862  loss_dice_6: 1.291  loss_ce_7: 0.5767  loss_mask_7: 0.1843  loss_dice_7: 1.301  loss_ce_8: 0.5679  loss_mask_8: 0.1871  loss_dice_8: 1.331    time: 1.0313  last_time: 1.0097  data_time: 0.0363  last_data_time: 0.0325   lr: 0.0001  max_mem: 32877M
[08/29 23:50:04] d2.utils.events INFO:  eta: 0:09:35  iter: 439  total_loss: 21.13  loss_ce: 0.543  loss_mask: 0.1744  loss_dice: 1.218  loss_ce_0: 0.6388  loss_mask_0: 0.2106  loss_dice_0: 1.431  loss_ce_1: 0.7049  loss_mask_1: 0.1934  loss_dice_1: 1.386  loss_ce_2: 0.6655  loss_mask_2: 0.1823  loss_dice_2: 1.277  loss_ce_3: 0.6031  loss_mask_3: 0.1783  loss_dice_3: 1.259  loss_ce_4: 0.575  loss_mask_4: 0.1797  loss_dice_4: 1.25  loss_ce_5: 0.5899  loss_mask_5: 0.1788  loss_dice_5: 1.262  loss_ce_6: 0.565  loss_mask_6: 0.1749  loss_dice_6: 1.244  loss_ce_7: 0.5505  loss_mask_7: 0.1738  loss_dice_7: 1.222  loss_ce_8: 0.5359  loss_mask_8: 0.1755  loss_dice_8: 1.212    time: 1.0315  last_time: 1.1042  data_time: 0.0377  last_data_time: 0.0383   lr: 0.0001  max_mem: 32877M
[08/29 23:50:25] d2.utils.events INFO:  eta: 0:09:15  iter: 459  total_loss: 22.64  loss_ce: 0.664  loss_mask: 0.1841  loss_dice: 1.277  loss_ce_0: 0.7331  loss_mask_0: 0.2191  loss_dice_0: 1.472  loss_ce_1: 0.8052  loss_mask_1: 0.1988  loss_dice_1: 1.398  loss_ce_2: 0.7318  loss_mask_2: 0.1893  loss_dice_2: 1.36  loss_ce_3: 0.6755  loss_mask_3: 0.1839  loss_dice_3: 1.318  loss_ce_4: 0.6782  loss_mask_4: 0.1829  loss_dice_4: 1.321  loss_ce_5: 0.6766  loss_mask_5: 0.1851  loss_dice_5: 1.321  loss_ce_6: 0.6462  loss_mask_6: 0.1841  loss_dice_6: 1.31  loss_ce_7: 0.66  loss_mask_7: 0.1844  loss_dice_7: 1.287  loss_ce_8: 0.6465  loss_mask_8: 0.1817  loss_dice_8: 1.274    time: 1.0314  last_time: 1.0165  data_time: 0.0386  last_data_time: 0.0422   lr: 0.0001  max_mem: 32877M
[08/29 23:50:46] d2.utils.events INFO:  eta: 0:08:54  iter: 479  total_loss: 22.05  loss_ce: 0.6916  loss_mask: 0.1666  loss_dice: 1.301  loss_ce_0: 0.7684  loss_mask_0: 0.1921  loss_dice_0: 1.55  loss_ce_1: 0.8326  loss_mask_1: 0.1826  loss_dice_1: 1.448  loss_ce_2: 0.754  loss_mask_2: 0.1737  loss_dice_2: 1.397  loss_ce_3: 0.7143  loss_mask_3: 0.1689  loss_dice_3: 1.356  loss_ce_4: 0.7083  loss_mask_4: 0.1752  loss_dice_4: 1.355  loss_ce_5: 0.6939  loss_mask_5: 0.1711  loss_dice_5: 1.315  loss_ce_6: 0.7045  loss_mask_6: 0.1689  loss_dice_6: 1.288  loss_ce_7: 0.6904  loss_mask_7: 0.1685  loss_dice_7: 1.279  loss_ce_8: 0.6898  loss_mask_8: 0.1672  loss_dice_8: 1.247    time: 1.0317  last_time: 1.0109  data_time: 0.0386  last_data_time: 0.0405   lr: 0.0001  max_mem: 32877M
[08/29 23:51:06] d2.utils.events INFO:  eta: 0:08:33  iter: 499  total_loss: 21.28  loss_ce: 0.5799  loss_mask: 0.1815  loss_dice: 1.185  loss_ce_0: 0.6591  loss_mask_0: 0.2151  loss_dice_0: 1.437  loss_ce_1: 0.7252  loss_mask_1: 0.2128  loss_dice_1: 1.359  loss_ce_2: 0.6757  loss_mask_2: 0.1958  loss_dice_2: 1.254  loss_ce_3: 0.6177  loss_mask_3: 0.1911  loss_dice_3: 1.22  loss_ce_4: 0.5985  loss_mask_4: 0.1916  loss_dice_4: 1.209  loss_ce_5: 0.5914  loss_mask_5: 0.1852  loss_dice_5: 1.198  loss_ce_6: 0.5782  loss_mask_6: 0.1848  loss_dice_6: 1.177  loss_ce_7: 0.5965  loss_mask_7: 0.1839  loss_dice_7: 1.182  loss_ce_8: 0.5688  loss_mask_8: 0.1829  loss_dice_8: 1.192    time: 1.0312  last_time: 1.0786  data_time: 0.0383  last_data_time: 0.0320   lr: 0.0001  max_mem: 32877M
[08/29 23:51:27] d2.utils.events INFO:  eta: 0:08:13  iter: 519  total_loss: 21.58  loss_ce: 0.5899  loss_mask: 0.1685  loss_dice: 1.244  loss_ce_0: 0.6536  loss_mask_0: 0.1954  loss_dice_0: 1.471  loss_ce_1: 0.7584  loss_mask_1: 0.1903  loss_dice_1: 1.402  loss_ce_2: 0.6852  loss_mask_2: 0.1852  loss_dice_2: 1.363  loss_ce_3: 0.6811  loss_mask_3: 0.1767  loss_dice_3: 1.304  loss_ce_4: 0.6172  loss_mask_4: 0.1752  loss_dice_4: 1.266  loss_ce_5: 0.6151  loss_mask_5: 0.1736  loss_dice_5: 1.279  loss_ce_6: 0.5772  loss_mask_6: 0.1731  loss_dice_6: 1.271  loss_ce_7: 0.5933  loss_mask_7: 0.1734  loss_dice_7: 1.266  loss_ce_8: 0.5847  loss_mask_8: 0.172  loss_dice_8: 1.264    time: 1.0308  last_time: 0.9932  data_time: 0.0379  last_data_time: 0.0319   lr: 0.0001  max_mem: 32877M
[08/29 23:51:47] d2.utils.events INFO:  eta: 0:07:52  iter: 539  total_loss: 21.53  loss_ce: 0.618  loss_mask: 0.1666  loss_dice: 1.255  loss_ce_0: 0.6879  loss_mask_0: 0.1993  loss_dice_0: 1.545  loss_ce_1: 0.7819  loss_mask_1: 0.1898  loss_dice_1: 1.429  loss_ce_2: 0.7146  loss_mask_2: 0.1705  loss_dice_2: 1.359  loss_ce_3: 0.6613  loss_mask_3: 0.1712  loss_dice_3: 1.321  loss_ce_4: 0.6643  loss_mask_4: 0.1691  loss_dice_4: 1.254  loss_ce_5: 0.624  loss_mask_5: 0.1692  loss_dice_5: 1.311  loss_ce_6: 0.6353  loss_mask_6: 0.1682  loss_dice_6: 1.253  loss_ce_7: 0.6345  loss_mask_7: 0.1669  loss_dice_7: 1.262  loss_ce_8: 0.6096  loss_mask_8: 0.1694  loss_dice_8: 1.262    time: 1.0307  last_time: 1.0895  data_time: 0.0383  last_data_time: 0.0475   lr: 0.0001  max_mem: 32877M
[08/29 23:52:08] d2.utils.events INFO:  eta: 0:07:32  iter: 559  total_loss: 20.51  loss_ce: 0.589  loss_mask: 0.1695  loss_dice: 1.213  loss_ce_0: 0.6522  loss_mask_0: 0.1978  loss_dice_0: 1.433  loss_ce_1: 0.7336  loss_mask_1: 0.1839  loss_dice_1: 1.327  loss_ce_2: 0.6624  loss_mask_2: 0.1752  loss_dice_2: 1.261  loss_ce_3: 0.6587  loss_mask_3: 0.1699  loss_dice_3: 1.232  loss_ce_4: 0.6278  loss_mask_4: 0.1712  loss_dice_4: 1.233  loss_ce_5: 0.5974  loss_mask_5: 0.1713  loss_dice_5: 1.23  loss_ce_6: 0.5756  loss_mask_6: 0.1708  loss_dice_6: 1.241  loss_ce_7: 0.5909  loss_mask_7: 0.1698  loss_dice_7: 1.235  loss_ce_8: 0.5811  loss_mask_8: 0.1695  loss_dice_8: 1.232    time: 1.0308  last_time: 1.0560  data_time: 0.0419  last_data_time: 0.0420   lr: 0.0001  max_mem: 32877M
[08/29 23:52:29] d2.utils.events INFO:  eta: 0:07:11  iter: 579  total_loss: 20.88  loss_ce: 0.5821  loss_mask: 0.1677  loss_dice: 1.284  loss_ce_0: 0.6696  loss_mask_0: 0.1929  loss_dice_0: 1.547  loss_ce_1: 0.7496  loss_mask_1: 0.1826  loss_dice_1: 1.439  loss_ce_2: 0.7099  loss_mask_2: 0.1744  loss_dice_2: 1.342  loss_ce_3: 0.6431  loss_mask_3: 0.1703  loss_dice_3: 1.299  loss_ce_4: 0.6023  loss_mask_4: 0.1699  loss_dice_4: 1.316  loss_ce_5: 0.5958  loss_mask_5: 0.1709  loss_dice_5: 1.281  loss_ce_6: 0.5954  loss_mask_6: 0.1703  loss_dice_6: 1.233  loss_ce_7: 0.5936  loss_mask_7: 0.1683  loss_dice_7: 1.283  loss_ce_8: 0.5677  loss_mask_8: 0.167  loss_dice_8: 1.272    time: 1.0304  last_time: 1.0375  data_time: 0.0385  last_data_time: 0.0413   lr: 0.0001  max_mem: 32877M
[08/29 23:52:49] d2.utils.events INFO:  eta: 0:06:50  iter: 599  total_loss: 20.94  loss_ce: 0.5841  loss_mask: 0.1696  loss_dice: 1.193  loss_ce_0: 0.6671  loss_mask_0: 0.2004  loss_dice_0: 1.472  loss_ce_1: 0.7424  loss_mask_1: 0.1875  loss_dice_1: 1.391  loss_ce_2: 0.6899  loss_mask_2: 0.1806  loss_dice_2: 1.297  loss_ce_3: 0.6423  loss_mask_3: 0.178  loss_dice_3: 1.27  loss_ce_4: 0.6005  loss_mask_4: 0.1758  loss_dice_4: 1.271  loss_ce_5: 0.6015  loss_mask_5: 0.1684  loss_dice_5: 1.232  loss_ce_6: 0.5764  loss_mask_6: 0.171  loss_dice_6: 1.246  loss_ce_7: 0.5905  loss_mask_7: 0.1722  loss_dice_7: 1.259  loss_ce_8: 0.5677  loss_mask_8: 0.1692  loss_dice_8: 1.233    time: 1.0304  last_time: 1.0826  data_time: 0.0391  last_data_time: 0.0441   lr: 0.0001  max_mem: 32877M
[08/29 23:53:10] d2.utils.events INFO:  eta: 0:06:30  iter: 619  total_loss: 21.69  loss_ce: 0.6541  loss_mask: 0.1682  loss_dice: 1.251  loss_ce_0: 0.6932  loss_mask_0: 0.1925  loss_dice_0: 1.47  loss_ce_1: 0.7881  loss_mask_1: 0.1808  loss_dice_1: 1.368  loss_ce_2: 0.7207  loss_mask_2: 0.1712  loss_dice_2: 1.3  loss_ce_3: 0.6972  loss_mask_3: 0.1664  loss_dice_3: 1.262  loss_ce_4: 0.6751  loss_mask_4: 0.1689  loss_dice_4: 1.265  loss_ce_5: 0.6711  loss_mask_5: 0.1695  loss_dice_5: 1.274  loss_ce_6: 0.6622  loss_mask_6: 0.1662  loss_dice_6: 1.267  loss_ce_7: 0.6903  loss_mask_7: 0.1681  loss_dice_7: 1.243  loss_ce_8: 0.6591  loss_mask_8: 0.1665  loss_dice_8: 1.244    time: 1.0305  last_time: 1.0497  data_time: 0.0395  last_data_time: 0.0366   lr: 0.0001  max_mem: 32877M
[08/29 23:53:30] d2.utils.events INFO:  eta: 0:06:09  iter: 639  total_loss: 20.11  loss_ce: 0.5585  loss_mask: 0.1856  loss_dice: 1.209  loss_ce_0: 0.6289  loss_mask_0: 0.2155  loss_dice_0: 1.396  loss_ce_1: 0.6838  loss_mask_1: 0.2088  loss_dice_1: 1.321  loss_ce_2: 0.6432  loss_mask_2: 0.1998  loss_dice_2: 1.278  loss_ce_3: 0.5974  loss_mask_3: 0.1952  loss_dice_3: 1.225  loss_ce_4: 0.5766  loss_mask_4: 0.1907  loss_dice_4: 1.245  loss_ce_5: 0.5612  loss_mask_5: 0.1909  loss_dice_5: 1.194  loss_ce_6: 0.563  loss_mask_6: 0.1928  loss_dice_6: 1.188  loss_ce_7: 0.5759  loss_mask_7: 0.1871  loss_dice_7: 1.173  loss_ce_8: 0.5483  loss_mask_8: 0.1902  loss_dice_8: 1.176    time: 1.0303  last_time: 1.0319  data_time: 0.0351  last_data_time: 0.0410   lr: 0.0001  max_mem: 32877M
[08/29 23:53:51] d2.utils.events INFO:  eta: 0:05:49  iter: 659  total_loss: 20.44  loss_ce: 0.5468  loss_mask: 0.1759  loss_dice: 1.201  loss_ce_0: 0.6383  loss_mask_0: 0.2103  loss_dice_0: 1.41  loss_ce_1: 0.7146  loss_mask_1: 0.198  loss_dice_1: 1.362  loss_ce_2: 0.6395  loss_mask_2: 0.1898  loss_dice_2: 1.279  loss_ce_3: 0.5944  loss_mask_3: 0.1838  loss_dice_3: 1.246  loss_ce_4: 0.5685  loss_mask_4: 0.1845  loss_dice_4: 1.202  loss_ce_5: 0.5894  loss_mask_5: 0.1809  loss_dice_5: 1.227  loss_ce_6: 0.5899  loss_mask_6: 0.1808  loss_dice_6: 1.225  loss_ce_7: 0.5405  loss_mask_7: 0.1812  loss_dice_7: 1.22  loss_ce_8: 0.5661  loss_mask_8: 0.1818  loss_dice_8: 1.215    time: 1.0296  last_time: 0.9785  data_time: 0.0366  last_data_time: 0.0398   lr: 0.0001  max_mem: 32877M
[08/29 23:54:12] d2.utils.events INFO:  eta: 0:05:28  iter: 679  total_loss: 21.7  loss_ce: 0.6203  loss_mask: 0.1752  loss_dice: 1.243  loss_ce_0: 0.6953  loss_mask_0: 0.196  loss_dice_0: 1.5  loss_ce_1: 0.7476  loss_mask_1: 0.1879  loss_dice_1: 1.436  loss_ce_2: 0.6767  loss_mask_2: 0.1811  loss_dice_2: 1.377  loss_ce_3: 0.6623  loss_mask_3: 0.1757  loss_dice_3: 1.318  loss_ce_4: 0.6407  loss_mask_4: 0.1768  loss_dice_4: 1.302  loss_ce_5: 0.6053  loss_mask_5: 0.1734  loss_dice_5: 1.301  loss_ce_6: 0.6276  loss_mask_6: 0.172  loss_dice_6: 1.251  loss_ce_7: 0.6356  loss_mask_7: 0.1738  loss_dice_7: 1.253  loss_ce_8: 0.6203  loss_mask_8: 0.1747  loss_dice_8: 1.27    time: 1.0302  last_time: 1.0698  data_time: 0.0373  last_data_time: 0.0431   lr: 0.0001  max_mem: 32877M
[08/29 23:54:33] d2.utils.events INFO:  eta: 0:05:08  iter: 699  total_loss: 22.1  loss_ce: 0.5821  loss_mask: 0.1697  loss_dice: 1.325  loss_ce_0: 0.6931  loss_mask_0: 0.1984  loss_dice_0: 1.588  loss_ce_1: 0.7335  loss_mask_1: 0.1876  loss_dice_1: 1.473  loss_ce_2: 0.6982  loss_mask_2: 0.1817  loss_dice_2: 1.425  loss_ce_3: 0.6175  loss_mask_3: 0.1656  loss_dice_3: 1.375  loss_ce_4: 0.6311  loss_mask_4: 0.1736  loss_dice_4: 1.347  loss_ce_5: 0.598  loss_mask_5: 0.17  loss_dice_5: 1.366  loss_ce_6: 0.6148  loss_mask_6: 0.1713  loss_dice_6: 1.27  loss_ce_7: 0.5791  loss_mask_7: 0.1717  loss_dice_7: 1.29  loss_ce_8: 0.577  loss_mask_8: 0.1743  loss_dice_8: 1.293    time: 1.0309  last_time: 0.9825  data_time: 0.0390  last_data_time: 0.0313   lr: 0.0001  max_mem: 32877M
[08/29 23:54:53] d2.utils.events INFO:  eta: 0:04:47  iter: 719  total_loss: 20.92  loss_ce: 0.5755  loss_mask: 0.1751  loss_dice: 1.212  loss_ce_0: 0.6782  loss_mask_0: 0.1982  loss_dice_0: 1.433  loss_ce_1: 0.7262  loss_mask_1: 0.1894  loss_dice_1: 1.343  loss_ce_2: 0.6542  loss_mask_2: 0.1825  loss_dice_2: 1.302  loss_ce_3: 0.6318  loss_mask_3: 0.1758  loss_dice_3: 1.243  loss_ce_4: 0.5931  loss_mask_4: 0.174  loss_dice_4: 1.262  loss_ce_5: 0.5762  loss_mask_5: 0.1744  loss_dice_5: 1.242  loss_ce_6: 0.598  loss_mask_6: 0.1772  loss_dice_6: 1.235  loss_ce_7: 0.6026  loss_mask_7: 0.1698  loss_dice_7: 1.243  loss_ce_8: 0.5915  loss_mask_8: 0.1742  loss_dice_8: 1.218    time: 1.0307  last_time: 1.0352  data_time: 0.0353  last_data_time: 0.0481   lr: 0.0001  max_mem: 32877M
[08/29 23:55:14] d2.utils.events INFO:  eta: 0:04:27  iter: 739  total_loss: 21.57  loss_ce: 0.5667  loss_mask: 0.1703  loss_dice: 1.264  loss_ce_0: 0.6491  loss_mask_0: 0.1953  loss_dice_0: 1.47  loss_ce_1: 0.7029  loss_mask_1: 0.1858  loss_dice_1: 1.387  loss_ce_2: 0.6439  loss_mask_2: 0.1774  loss_dice_2: 1.339  loss_ce_3: 0.6217  loss_mask_3: 0.168  loss_dice_3: 1.304  loss_ce_4: 0.6238  loss_mask_4: 0.1695  loss_dice_4: 1.307  loss_ce_5: 0.5556  loss_mask_5: 0.1671  loss_dice_5: 1.282  loss_ce_6: 0.5607  loss_mask_6: 0.1675  loss_dice_6: 1.263  loss_ce_7: 0.5682  loss_mask_7: 0.1706  loss_dice_7: 1.263  loss_ce_8: 0.576  loss_mask_8: 0.1645  loss_dice_8: 1.237    time: 1.0307  last_time: 0.9951  data_time: 0.0375  last_data_time: 0.0518   lr: 0.0001  max_mem: 32877M
[08/29 23:55:35] d2.utils.events INFO:  eta: 0:04:06  iter: 759  total_loss: 20.88  loss_ce: 0.5748  loss_mask: 0.1819  loss_dice: 1.196  loss_ce_0: 0.6883  loss_mask_0: 0.2022  loss_dice_0: 1.441  loss_ce_1: 0.7057  loss_mask_1: 0.1913  loss_dice_1: 1.385  loss_ce_2: 0.6783  loss_mask_2: 0.1861  loss_dice_2: 1.307  loss_ce_3: 0.613  loss_mask_3: 0.1815  loss_dice_3: 1.256  loss_ce_4: 0.5923  loss_mask_4: 0.1795  loss_dice_4: 1.253  loss_ce_5: 0.5611  loss_mask_5: 0.1803  loss_dice_5: 1.274  loss_ce_6: 0.5831  loss_mask_6: 0.1803  loss_dice_6: 1.214  loss_ce_7: 0.5573  loss_mask_7: 0.1791  loss_dice_7: 1.235  loss_ce_8: 0.5782  loss_mask_8: 0.1796  loss_dice_8: 1.25    time: 1.0308  last_time: 1.0362  data_time: 0.0389  last_data_time: 0.0418   lr: 0.0001  max_mem: 32877M
[08/29 23:55:55] d2.utils.events INFO:  eta: 0:03:45  iter: 779  total_loss: 19.98  loss_ce: 0.5611  loss_mask: 0.1747  loss_dice: 1.17  loss_ce_0: 0.6862  loss_mask_0: 0.2054  loss_dice_0: 1.377  loss_ce_1: 0.7191  loss_mask_1: 0.1946  loss_dice_1: 1.321  loss_ce_2: 0.6597  loss_mask_2: 0.1789  loss_dice_2: 1.249  loss_ce_3: 0.6341  loss_mask_3: 0.1766  loss_dice_3: 1.207  loss_ce_4: 0.6199  loss_mask_4: 0.1775  loss_dice_4: 1.211  loss_ce_5: 0.6022  loss_mask_5: 0.1774  loss_dice_5: 1.185  loss_ce_6: 0.5455  loss_mask_6: 0.176  loss_dice_6: 1.166  loss_ce_7: 0.5582  loss_mask_7: 0.1749  loss_dice_7: 1.169  loss_ce_8: 0.5763  loss_mask_8: 0.1749  loss_dice_8: 1.187    time: 1.0305  last_time: 0.9730  data_time: 0.0370  last_data_time: 0.0322   lr: 0.0001  max_mem: 32877M
[08/29 23:56:16] d2.utils.events INFO:  eta: 0:03:25  iter: 799  total_loss: 21.35  loss_ce: 0.5619  loss_mask: 0.158  loss_dice: 1.271  loss_ce_0: 0.6641  loss_mask_0: 0.1885  loss_dice_0: 1.489  loss_ce_1: 0.7271  loss_mask_1: 0.1766  loss_dice_1: 1.432  loss_ce_2: 0.6671  loss_mask_2: 0.1628  loss_dice_2: 1.334  loss_ce_3: 0.6427  loss_mask_3: 0.1621  loss_dice_3: 1.308  loss_ce_4: 0.5801  loss_mask_4: 0.1631  loss_dice_4: 1.325  loss_ce_5: 0.6009  loss_mask_5: 0.162  loss_dice_5: 1.3  loss_ce_6: 0.6077  loss_mask_6: 0.1598  loss_dice_6: 1.286  loss_ce_7: 0.577  loss_mask_7: 0.1599  loss_dice_7: 1.283  loss_ce_8: 0.5833  loss_mask_8: 0.1588  loss_dice_8: 1.286    time: 1.0303  last_time: 1.0137  data_time: 0.0372  last_data_time: 0.0278   lr: 0.0001  max_mem: 32877M
[08/29 23:56:36] d2.utils.events INFO:  eta: 0:03:04  iter: 819  total_loss: 20.51  loss_ce: 0.5794  loss_mask: 0.17  loss_dice: 1.257  loss_ce_0: 0.6088  loss_mask_0: 0.1904  loss_dice_0: 1.459  loss_ce_1: 0.7555  loss_mask_1: 0.1794  loss_dice_1: 1.34  loss_ce_2: 0.684  loss_mask_2: 0.1733  loss_dice_2: 1.295  loss_ce_3: 0.6125  loss_mask_3: 0.1743  loss_dice_3: 1.285  loss_ce_4: 0.6278  loss_mask_4: 0.1722  loss_dice_4: 1.276  loss_ce_5: 0.593  loss_mask_5: 0.1696  loss_dice_5: 1.227  loss_ce_6: 0.5758  loss_mask_6: 0.1696  loss_dice_6: 1.231  loss_ce_7: 0.5805  loss_mask_7: 0.1732  loss_dice_7: 1.235  loss_ce_8: 0.5659  loss_mask_8: 0.1692  loss_dice_8: 1.246    time: 1.0303  last_time: 0.9943  data_time: 0.0398  last_data_time: 0.0312   lr: 0.0001  max_mem: 32877M
[08/29 23:56:57] d2.utils.events INFO:  eta: 0:02:44  iter: 839  total_loss: 21.8  loss_ce: 0.587  loss_mask: 0.1657  loss_dice: 1.269  loss_ce_0: 0.6886  loss_mask_0: 0.1998  loss_dice_0: 1.504  loss_ce_1: 0.7774  loss_mask_1: 0.18  loss_dice_1: 1.395  loss_ce_2: 0.7038  loss_mask_2: 0.1688  loss_dice_2: 1.322  loss_ce_3: 0.6389  loss_mask_3: 0.1698  loss_dice_3: 1.272  loss_ce_4: 0.6067  loss_mask_4: 0.1701  loss_dice_4: 1.296  loss_ce_5: 0.6205  loss_mask_5: 0.1682  loss_dice_5: 1.279  loss_ce_6: 0.5529  loss_mask_6: 0.1688  loss_dice_6: 1.261  loss_ce_7: 0.5543  loss_mask_7: 0.1655  loss_dice_7: 1.265  loss_ce_8: 0.5745  loss_mask_8: 0.1657  loss_dice_8: 1.246    time: 1.0304  last_time: 1.0226  data_time: 0.0370  last_data_time: 0.0299   lr: 0.0001  max_mem: 32877M
[08/29 23:57:18] d2.utils.events INFO:  eta: 0:02:23  iter: 859  total_loss: 20.23  loss_ce: 0.5785  loss_mask: 0.1623  loss_dice: 1.236  loss_ce_0: 0.6886  loss_mask_0: 0.1932  loss_dice_0: 1.484  loss_ce_1: 0.769  loss_mask_1: 0.1768  loss_dice_1: 1.359  loss_ce_2: 0.6466  loss_mask_2: 0.1661  loss_dice_2: 1.27  loss_ce_3: 0.6434  loss_mask_3: 0.1646  loss_dice_3: 1.247  loss_ce_4: 0.5678  loss_mask_4: 0.1642  loss_dice_4: 1.217  loss_ce_5: 0.5707  loss_mask_5: 0.1645  loss_dice_5: 1.276  loss_ce_6: 0.5715  loss_mask_6: 0.1608  loss_dice_6: 1.214  loss_ce_7: 0.5823  loss_mask_7: 0.1602  loss_dice_7: 1.23  loss_ce_8: 0.5636  loss_mask_8: 0.1621  loss_dice_8: 1.222    time: 1.0303  last_time: 1.0195  data_time: 0.0389  last_data_time: 0.0297   lr: 0.0001  max_mem: 32877M
[08/29 23:57:38] d2.utils.events INFO:  eta: 0:02:03  iter: 879  total_loss: 20.3  loss_ce: 0.5976  loss_mask: 0.1717  loss_dice: 1.202  loss_ce_0: 0.6554  loss_mask_0: 0.1942  loss_dice_0: 1.431  loss_ce_1: 0.7435  loss_mask_1: 0.181  loss_dice_1: 1.345  loss_ce_2: 0.6505  loss_mask_2: 0.1708  loss_dice_2: 1.288  loss_ce_3: 0.6061  loss_mask_3: 0.1717  loss_dice_3: 1.234  loss_ce_4: 0.6061  loss_mask_4: 0.1724  loss_dice_4: 1.183  loss_ce_5: 0.6006  loss_mask_5: 0.173  loss_dice_5: 1.225  loss_ce_6: 0.586  loss_mask_6: 0.1687  loss_dice_6: 1.207  loss_ce_7: 0.5952  loss_mask_7: 0.1687  loss_dice_7: 1.196  loss_ce_8: 0.5812  loss_mask_8: 0.1695  loss_dice_8: 1.216    time: 1.0302  last_time: 1.0268  data_time: 0.0353  last_data_time: 0.0360   lr: 0.0001  max_mem: 32877M
[08/29 23:57:59] d2.utils.events INFO:  eta: 0:01:42  iter: 899  total_loss: 20.3  loss_ce: 0.5446  loss_mask: 0.1658  loss_dice: 1.219  loss_ce_0: 0.6542  loss_mask_0: 0.1932  loss_dice_0: 1.421  loss_ce_1: 0.6995  loss_mask_1: 0.1844  loss_dice_1: 1.33  loss_ce_2: 0.6742  loss_mask_2: 0.1761  loss_dice_2: 1.238  loss_ce_3: 0.6116  loss_mask_3: 0.169  loss_dice_3: 1.244  loss_ce_4: 0.589  loss_mask_4: 0.1735  loss_dice_4: 1.219  loss_ce_5: 0.567  loss_mask_5: 0.1674  loss_dice_5: 1.227  loss_ce_6: 0.5297  loss_mask_6: 0.1618  loss_dice_6: 1.214  loss_ce_7: 0.523  loss_mask_7: 0.1649  loss_dice_7: 1.221  loss_ce_8: 0.5433  loss_mask_8: 0.1631  loss_dice_8: 1.229    time: 1.0303  last_time: 1.0311  data_time: 0.0366  last_data_time: 0.0336   lr: 0.0001  max_mem: 32877M
[08/29 23:58:20] d2.utils.events INFO:  eta: 0:01:22  iter: 919  total_loss: 21.05  loss_ce: 0.5907  loss_mask: 0.1721  loss_dice: 1.233  loss_ce_0: 0.697  loss_mask_0: 0.1912  loss_dice_0: 1.415  loss_ce_1: 0.7702  loss_mask_1: 0.1886  loss_dice_1: 1.313  loss_ce_2: 0.6976  loss_mask_2: 0.1766  loss_dice_2: 1.282  loss_ce_3: 0.6637  loss_mask_3: 0.1774  loss_dice_3: 1.235  loss_ce_4: 0.5965  loss_mask_4: 0.172  loss_dice_4: 1.244  loss_ce_5: 0.5988  loss_mask_5: 0.1713  loss_dice_5: 1.221  loss_ce_6: 0.5775  loss_mask_6: 0.1708  loss_dice_6: 1.201  loss_ce_7: 0.5784  loss_mask_7: 0.1715  loss_dice_7: 1.225  loss_ce_8: 0.5817  loss_mask_8: 0.1727  loss_dice_8: 1.233    time: 1.0304  last_time: 1.0492  data_time: 0.0404  last_data_time: 0.0253   lr: 0.0001  max_mem: 32877M
[08/29 23:58:40] d2.utils.events INFO:  eta: 0:01:01  iter: 939  total_loss: 19.87  loss_ce: 0.5474  loss_mask: 0.1813  loss_dice: 1.174  loss_ce_0: 0.669  loss_mask_0: 0.1992  loss_dice_0: 1.401  loss_ce_1: 0.6821  loss_mask_1: 0.1954  loss_dice_1: 1.308  loss_ce_2: 0.6373  loss_mask_2: 0.1822  loss_dice_2: 1.288  loss_ce_3: 0.5997  loss_mask_3: 0.1814  loss_dice_3: 1.22  loss_ce_4: 0.5814  loss_mask_4: 0.1754  loss_dice_4: 1.196  loss_ce_5: 0.5853  loss_mask_5: 0.1758  loss_dice_5: 1.223  loss_ce_6: 0.5305  loss_mask_6: 0.1763  loss_dice_6: 1.173  loss_ce_7: 0.5402  loss_mask_7: 0.1791  loss_dice_7: 1.178  loss_ce_8: 0.5198  loss_mask_8: 0.1838  loss_dice_8: 1.172    time: 1.0303  last_time: 1.0273  data_time: 0.0351  last_data_time: 0.0453   lr: 0.0001  max_mem: 32877M
[08/29 23:59:01] d2.utils.events INFO:  eta: 0:00:41  iter: 959  total_loss: 19.78  loss_ce: 0.522  loss_mask: 0.1607  loss_dice: 1.16  loss_ce_0: 0.645  loss_mask_0: 0.2002  loss_dice_0: 1.413  loss_ce_1: 0.7007  loss_mask_1: 0.176  loss_dice_1: 1.318  loss_ce_2: 0.671  loss_mask_2: 0.1697  loss_dice_2: 1.234  loss_ce_3: 0.5824  loss_mask_3: 0.1694  loss_dice_3: 1.226  loss_ce_4: 0.5544  loss_mask_4: 0.1657  loss_dice_4: 1.198  loss_ce_5: 0.5492  loss_mask_5: 0.1639  loss_dice_5: 1.22  loss_ce_6: 0.5285  loss_mask_6: 0.1604  loss_dice_6: 1.178  loss_ce_7: 0.5396  loss_mask_7: 0.1646  loss_dice_7: 1.192  loss_ce_8: 0.5339  loss_mask_8: 0.1626  loss_dice_8: 1.19    time: 1.0304  last_time: 1.0123  data_time: 0.0375  last_data_time: 0.0299   lr: 0.0001  max_mem: 32877M
[08/29 23:59:22] d2.utils.events INFO:  eta: 0:00:20  iter: 979  total_loss: 21.25  loss_ce: 0.5647  loss_mask: 0.1602  loss_dice: 1.264  loss_ce_0: 0.6397  loss_mask_0: 0.1806  loss_dice_0: 1.423  loss_ce_1: 0.7176  loss_mask_1: 0.1672  loss_dice_1: 1.372  loss_ce_2: 0.655  loss_mask_2: 0.1601  loss_dice_2: 1.329  loss_ce_3: 0.6244  loss_mask_3: 0.1607  loss_dice_3: 1.263  loss_ce_4: 0.5617  loss_mask_4: 0.1583  loss_dice_4: 1.283  loss_ce_5: 0.5737  loss_mask_5: 0.1595  loss_dice_5: 1.256  loss_ce_6: 0.5598  loss_mask_6: 0.1593  loss_dice_6: 1.235  loss_ce_7: 0.5427  loss_mask_7: 0.1582  loss_dice_7: 1.272  loss_ce_8: 0.5384  loss_mask_8: 0.1597  loss_dice_8: 1.283    time: 1.0306  last_time: 0.9922  data_time: 0.0392  last_data_time: 0.0369   lr: 0.0001  max_mem: 32877M
[08/29 23:59:43] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19/model_final.pth
[08/29 23:59:45] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 21.04  loss_ce: 0.6087  loss_mask: 0.171  loss_dice: 1.191  loss_ce_0: 0.686  loss_mask_0: 0.2036  loss_dice_0: 1.436  loss_ce_1: 0.77  loss_mask_1: 0.1846  loss_dice_1: 1.344  loss_ce_2: 0.7047  loss_mask_2: 0.1788  loss_dice_2: 1.276  loss_ce_3: 0.6448  loss_mask_3: 0.1754  loss_dice_3: 1.205  loss_ce_4: 0.6222  loss_mask_4: 0.1752  loss_dice_4: 1.232  loss_ce_5: 0.6185  loss_mask_5: 0.1722  loss_dice_5: 1.232  loss_ce_6: 0.5835  loss_mask_6: 0.1727  loss_dice_6: 1.232  loss_ce_7: 0.5948  loss_mask_7: 0.1721  loss_dice_7: 1.193  loss_ce_8: 0.6245  loss_mask_8: 0.1699  loss_dice_8: 1.247    time: 1.0305  last_time: 1.0460  data_time: 0.0409  last_data_time: 0.0438   lr: 0.0001  max_mem: 32877M
[08/29 23:59:45] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:17:08 (1.0305 s / it)
[08/29 23:59:45] d2.engine.hooks INFO: Total training time: 0:17:14 (0:00:05 on hooks)
[08/29 23:59:45] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[08/29 23:59:45] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[08/29 23:59:45] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[08/29 23:59:45] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[08/29 23:59:45] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[08/29 23:59:45] d2.evaluation.evaluator INFO: Start inference on 500 batches
[08/29 23:59:50] d2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0024 s/iter. Inference: 0.2414 s/iter. Eval: 0.0559 s/iter. Total: 0.2997 s/iter. ETA=0:02:26
[08/29 23:59:55] d2.evaluation.evaluator INFO: Inference done 27/500. Dataloading: 0.0026 s/iter. Inference: 0.2623 s/iter. Eval: 0.0560 s/iter. Total: 0.3210 s/iter. ETA=0:02:31
[08/30 00:00:01] d2.evaluation.evaluator INFO: Inference done 44/500. Dataloading: 0.0027 s/iter. Inference: 0.2573 s/iter. Eval: 0.0566 s/iter. Total: 0.3166 s/iter. ETA=0:02:24
[08/30 00:00:06] d2.evaluation.evaluator INFO: Inference done 61/500. Dataloading: 0.0027 s/iter. Inference: 0.2540 s/iter. Eval: 0.0567 s/iter. Total: 0.3135 s/iter. ETA=0:02:17
[08/30 00:00:11] d2.evaluation.evaluator INFO: Inference done 78/500. Dataloading: 0.0027 s/iter. Inference: 0.2519 s/iter. Eval: 0.0567 s/iter. Total: 0.3114 s/iter. ETA=0:02:11
[08/30 00:00:16] d2.evaluation.evaluator INFO: Inference done 95/500. Dataloading: 0.0027 s/iter. Inference: 0.2499 s/iter. Eval: 0.0568 s/iter. Total: 0.3095 s/iter. ETA=0:02:05
[08/30 00:00:21] d2.evaluation.evaluator INFO: Inference done 112/500. Dataloading: 0.0027 s/iter. Inference: 0.2491 s/iter. Eval: 0.0569 s/iter. Total: 0.3088 s/iter. ETA=0:01:59
[08/30 00:00:26] d2.evaluation.evaluator INFO: Inference done 129/500. Dataloading: 0.0027 s/iter. Inference: 0.2482 s/iter. Eval: 0.0570 s/iter. Total: 0.3079 s/iter. ETA=0:01:54
[08/30 00:00:31] d2.evaluation.evaluator INFO: Inference done 146/500. Dataloading: 0.0027 s/iter. Inference: 0.2473 s/iter. Eval: 0.0570 s/iter. Total: 0.3070 s/iter. ETA=0:01:48
[08/30 00:00:36] d2.evaluation.evaluator INFO: Inference done 162/500. Dataloading: 0.0027 s/iter. Inference: 0.2479 s/iter. Eval: 0.0569 s/iter. Total: 0.3076 s/iter. ETA=0:01:43
[08/30 00:00:42] d2.evaluation.evaluator INFO: Inference done 179/500. Dataloading: 0.0027 s/iter. Inference: 0.2483 s/iter. Eval: 0.0569 s/iter. Total: 0.3080 s/iter. ETA=0:01:38
[08/30 00:00:47] d2.evaluation.evaluator INFO: Inference done 196/500. Dataloading: 0.0027 s/iter. Inference: 0.2485 s/iter. Eval: 0.0569 s/iter. Total: 0.3082 s/iter. ETA=0:01:33
[08/30 00:00:52] d2.evaluation.evaluator INFO: Inference done 213/500. Dataloading: 0.0027 s/iter. Inference: 0.2488 s/iter. Eval: 0.0568 s/iter. Total: 0.3084 s/iter. ETA=0:01:28
[08/30 00:00:58] d2.evaluation.evaluator INFO: Inference done 230/500. Dataloading: 0.0027 s/iter. Inference: 0.2485 s/iter. Eval: 0.0568 s/iter. Total: 0.3081 s/iter. ETA=0:01:23
[08/30 00:01:03] d2.evaluation.evaluator INFO: Inference done 247/500. Dataloading: 0.0027 s/iter. Inference: 0.2479 s/iter. Eval: 0.0568 s/iter. Total: 0.3075 s/iter. ETA=0:01:17
[08/30 00:01:08] d2.evaluation.evaluator INFO: Inference done 264/500. Dataloading: 0.0027 s/iter. Inference: 0.2473 s/iter. Eval: 0.0568 s/iter. Total: 0.3069 s/iter. ETA=0:01:12
[08/30 00:01:13] d2.evaluation.evaluator INFO: Inference done 281/500. Dataloading: 0.0027 s/iter. Inference: 0.2467 s/iter. Eval: 0.0568 s/iter. Total: 0.3063 s/iter. ETA=0:01:07
[08/30 00:01:18] d2.evaluation.evaluator INFO: Inference done 298/500. Dataloading: 0.0027 s/iter. Inference: 0.2466 s/iter. Eval: 0.0567 s/iter. Total: 0.3061 s/iter. ETA=0:01:01
[08/30 00:01:23] d2.evaluation.evaluator INFO: Inference done 315/500. Dataloading: 0.0027 s/iter. Inference: 0.2461 s/iter. Eval: 0.0566 s/iter. Total: 0.3056 s/iter. ETA=0:00:56
[08/30 00:01:28] d2.evaluation.evaluator INFO: Inference done 332/500. Dataloading: 0.0027 s/iter. Inference: 0.2463 s/iter. Eval: 0.0566 s/iter. Total: 0.3057 s/iter. ETA=0:00:51
[08/30 00:01:33] d2.evaluation.evaluator INFO: Inference done 349/500. Dataloading: 0.0027 s/iter. Inference: 0.2460 s/iter. Eval: 0.0566 s/iter. Total: 0.3054 s/iter. ETA=0:00:46
[08/30 00:01:39] d2.evaluation.evaluator INFO: Inference done 366/500. Dataloading: 0.0027 s/iter. Inference: 0.2463 s/iter. Eval: 0.0566 s/iter. Total: 0.3057 s/iter. ETA=0:00:40
[08/30 00:01:44] d2.evaluation.evaluator INFO: Inference done 383/500. Dataloading: 0.0027 s/iter. Inference: 0.2465 s/iter. Eval: 0.0567 s/iter. Total: 0.3059 s/iter. ETA=0:00:35
[08/30 00:01:49] d2.evaluation.evaluator INFO: Inference done 400/500. Dataloading: 0.0027 s/iter. Inference: 0.2467 s/iter. Eval: 0.0567 s/iter. Total: 0.3061 s/iter. ETA=0:00:30
[08/30 00:01:54] d2.evaluation.evaluator INFO: Inference done 417/500. Dataloading: 0.0027 s/iter. Inference: 0.2464 s/iter. Eval: 0.0567 s/iter. Total: 0.3058 s/iter. ETA=0:00:25
[08/30 00:01:59] d2.evaluation.evaluator INFO: Inference done 434/500. Dataloading: 0.0027 s/iter. Inference: 0.2465 s/iter. Eval: 0.0567 s/iter. Total: 0.3059 s/iter. ETA=0:00:20
[08/30 00:02:05] d2.evaluation.evaluator INFO: Inference done 451/500. Dataloading: 0.0027 s/iter. Inference: 0.2461 s/iter. Eval: 0.0567 s/iter. Total: 0.3056 s/iter. ETA=0:00:14
[08/30 00:02:10] d2.evaluation.evaluator INFO: Inference done 468/500. Dataloading: 0.0027 s/iter. Inference: 0.2461 s/iter. Eval: 0.0566 s/iter. Total: 0.3055 s/iter. ETA=0:00:09
[08/30 00:02:15] d2.evaluation.evaluator INFO: Inference done 485/500. Dataloading: 0.0027 s/iter. Inference: 0.2461 s/iter. Eval: 0.0566 s/iter. Total: 0.3055 s/iter. ETA=0:00:04
[08/30 00:02:19] d2.evaluation.evaluator INFO: Total inference time: 0:02:31.268315 (0.305593 s / iter per device, on 1 devices)
[08/30 00:02:19] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:02:01 (0.246114 s / iter per device, on 1 devices)
[08/30 00:02:19] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evalm0dwag4d ...
[08/30 00:02:36] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 54.450 | 80.150 | 66.527 |      19       |
| Things | 48.348 | 79.611 | 60.392 |       8       |
| Stuff  | 58.888 | 80.543 | 70.990 |      11       |
[08/30 00:02:36] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 96.687 | 97.190 | 99.482 |     Stuff     |
| class_8  | 54.914 | 82.480 | 66.578 |     Stuff     |
| class_11 | 86.590 | 88.859 | 97.446 |     Stuff     |
| class_12 | 40.785 | 78.171 | 52.174 |     Stuff     |
| class_13 | 28.404 | 76.909 | 36.932 |     Stuff     |
| class_17 | 41.810 | 63.449 | 65.895 |     Stuff     |
| class_19 | 38.512 | 68.627 | 56.118 |     Stuff     |
| class_20 | 61.364 | 75.671 | 81.093 |     Stuff     |
| class_21 | 88.322 | 89.710 | 98.452 |     Stuff     |
| class_22 | 23.660 | 72.902 | 32.454 |     Stuff     |
| class_23 | 86.723 | 92.001 | 94.263 |     Stuff     |
| class_24 | 41.141 | 76.529 | 53.759 |    Things     |
| class_25 | 45.930 | 74.149 | 61.943 |    Things     |
| class_26 | 62.254 | 83.658 | 74.415 |    Things     |
| class_27 | 51.109 | 86.192 | 59.296 |    Things     |
| class_28 | 59.007 | 89.432 | 65.979 |    Things     |
| class_31 | 50.198 | 81.090 | 61.905 |    Things     |
| class_32 | 39.089 | 74.920 | 52.174 |    Things     |
| class_33 | 38.056 | 70.917 | 53.663 |    Things     |
[08/30 00:02:36] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[08/30 00:02:36] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[08/30 00:02:36] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[08/30 00:02:36] d2.evaluation.testing INFO: copypaste: 54.4502,80.1504,66.5275,48.3480,79.6107,60.3918,58.8882,80.5428,70.9897,96.6869,97.1904,99.4819,54.9138,82.4805,66.5779,86.5903,88.8594,97.4464,40.7850,78.1712,52.1739,28.4040,76.9093,36.9318,41.8097,63.4493,65.8947,38.5123,68.6272,56.1181,61.3635,75.6707,81.0929,88.3216,89.7103,98.4520,23.6598,72.9019,32.4544,86.7232,92.0011,94.2632,41.1409,76.5288,53.7587,45.9299,74.1489,61.9429,62.2538,83.6577,74.4149,51.1086,86.1916,59.2965,59.0069,89.4323,65.9794,50.1984,81.0897,61.9048,39.0887,74.9200,52.1739,38.0564,70.9170,53.6634
