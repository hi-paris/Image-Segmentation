[09/02 21:14:03] detectron2 INFO: Rank of current process: 0. World size: 2
[09/02 21:14:03] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0,1                          NVIDIA L40S (arch=8.9)
Driver version                   545.29.06
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[09/02 21:14:03] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/cl_exp.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[09/02 21:14:03] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/cl_exp.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[09/02 21:14:03] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: convnext_large_d_320
    CLIP_PRETRAINED_WEIGHTS: laion2b_s29b_b131k_ft_soup
    EMBED_DIM: 768
    ENSEMBLE_ON_VALID_MASK: false
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[09/02 21:14:03] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/config.yaml
[09/02 21:14:03] d2.utils.env INFO: Using a generated random seed 4120963
[09/02 21:14:15] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): TimmModel(
        (trunk): ConvNeXt(
          (stem): Sequential(
            (0): Conv2d(3, 192, kernel_size=(4, 4), stride=(4, 4))
            (1): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          )
          (stages): Sequential(
            (0): ConvNeXtStage(
              (downsample): Identity()
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): Identity()
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.003)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
                  (norm): LayerNorm((192,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=192, out_features=768, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=768, out_features=192, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.006)
                )
              )
            )
            (1): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.009)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.011)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
                  (norm): LayerNorm((384,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=384, out_features=1536, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=1536, out_features=384, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.014)
                )
              )
            )
            (2): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.017)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.020)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.023)
                )
                (3): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.026)
                )
                (4): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.029)
                )
                (5): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.031)
                )
                (6): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.034)
                )
                (7): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.037)
                )
                (8): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.040)
                )
                (9): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.043)
                )
                (10): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.046)
                )
                (11): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.049)
                )
                (12): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.051)
                )
                (13): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.054)
                )
                (14): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.057)
                )
                (15): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.060)
                )
                (16): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.063)
                )
                (17): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.066)
                )
                (18): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.069)
                )
                (19): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.071)
                )
                (20): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.074)
                )
                (21): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.077)
                )
                (22): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.080)
                )
                (23): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.083)
                )
                (24): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.086)
                )
                (25): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.089)
                )
                (26): ConvNeXtBlock(
                  (conv_dw): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
                  (norm): LayerNorm((768,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=768, out_features=3072, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=3072, out_features=768, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.091)
                )
              )
            )
            (3): ConvNeXtStage(
              (downsample): Sequential(
                (0): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
                (1): Conv2d(768, 1536, kernel_size=(2, 2), stride=(2, 2))
              )
              (blocks): Sequential(
                (0): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.094)
                )
                (1): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.097)
                )
                (2): ConvNeXtBlock(
                  (conv_dw): Conv2d(1536, 1536, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=1536)
                  (norm): LayerNorm((1536,), eps=1e-06, elementwise_affine=True)
                  (mlp): Mlp(
                    (fc1): Linear(in_features=1536, out_features=6144, bias=True)
                    (act): GELU()
                    (drop1): Dropout(p=0.0, inplace=False)
                    (norm): Identity()
                    (fc2): Linear(in_features=6144, out_features=1536, bias=True)
                    (drop2): Dropout(p=0.0, inplace=False)
                  )
                  (shortcut): Identity()
                  (drop_path): DropPath(drop_prob=0.100)
                )
              )
            )
          )
          (norm_pre): Identity()
          (head): NormMlpClassifierHead(
            (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Identity())
            (norm): LayerNorm2d((1536,), eps=1e-06, elementwise_affine=True)
            (flatten): Flatten(start_dim=1, end_dim=-1)
            (pre_logits): Identity()
            (drop): Dropout(p=0.0, inplace=False)
            (fc): Identity()
          )
        )
        (head): Sequential(
          (mlp): Mlp(
            (fc1): Linear(in_features=1536, out_features=1536, bias=True)
            (act): GELU(approximate='none')
            (drop1): Dropout(p=0.0, inplace=False)
            (norm): Identity()
            (fc2): Linear(in_features=1536, out_features=768, bias=False)
            (drop2): Dropout(p=0, inplace=False)
          )
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-15): 16 x ResidualAttentionBlock(
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): GELU(approximate='none')
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 768)
      (ln_final): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(1536, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=768, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (mask_pooling): MaskPooling()
  (void_embedding): Embedding(1, 768)
)
[09/02 21:14:15] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[09/02 21:14:15] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[09/02 21:14:15] d2.data.build INFO: Using training sampler TrainingSampler
[09/02 21:14:16] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/02 21:14:16] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[09/02 21:14:16] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[09/02 21:14:16] d2.data.build INFO: Making batched data loader with batch_size=4
[09/02 21:14:16] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[09/02 21:14:16] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan.pth ...
[09/02 21:14:16] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan.pth ...
[09/02 21:14:18] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[09/02 21:14:18] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.12.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.12.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.12.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.12.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.12.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.12.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.13.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.13.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.13.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.13.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.13.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.13.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.14.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.14.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.14.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.14.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.14.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.14.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.15.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.15.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.15.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.15.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.15.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.15.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.head.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.head.mlp.fc2.weight[0m
[34mbackbone.clip_model.visual.trunk.head.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.0.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.0.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.0.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.0.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.0.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.1.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.1.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.1.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.1.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.1.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.2.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.2.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.2.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.2.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.0.blocks.2.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.0.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.0.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.0.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.0.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.0.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.1.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.1.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.1.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.1.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.1.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.2.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.2.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.2.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.2.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.blocks.2.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.downsample.0.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.1.downsample.1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.0.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.0.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.0.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.0.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.0.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.1.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.1.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.1.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.1.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.1.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.10.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.10.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.10.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.10.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.10.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.11.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.11.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.11.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.11.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.11.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.12.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.12.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.12.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.12.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.12.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.13.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.13.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.13.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.13.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.13.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.14.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.14.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.14.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.14.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.14.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.15.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.15.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.15.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.15.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.15.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.16.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.16.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.16.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.16.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.16.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.17.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.17.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.17.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.17.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.17.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.18.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.18.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.18.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.18.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.18.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.19.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.19.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.19.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.19.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.19.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.2.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.2.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.2.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.2.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.2.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.20.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.20.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.20.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.20.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.20.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.21.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.21.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.21.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.21.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.21.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.22.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.22.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.22.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.22.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.22.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.23.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.23.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.23.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.23.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.23.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.24.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.24.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.24.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.24.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.24.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.25.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.25.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.25.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.25.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.25.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.26.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.26.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.26.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.26.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.26.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.3.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.3.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.3.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.3.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.3.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.4.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.4.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.4.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.4.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.4.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.5.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.5.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.5.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.5.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.5.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.6.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.6.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.6.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.6.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.6.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.7.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.7.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.7.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.7.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.7.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.8.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.8.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.8.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.8.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.8.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.9.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.9.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.9.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.9.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.blocks.9.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.downsample.0.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.2.downsample.1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.0.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.0.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.0.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.0.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.0.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.1.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.1.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.1.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.1.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.1.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.2.conv_dw.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.2.gamma[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.2.mlp.fc1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.2.mlp.fc2.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.blocks.2.norm.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.downsample.0.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stages.3.downsample.1.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stem.0.{bias, weight}[0m
[34mbackbone.clip_model.visual.trunk.stem.1.{bias, weight}[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mcriterion.empty_weight[0m
[09/02 21:14:18] d2.engine.train_loop INFO: Starting training from iteration 0
[09/02 21:14:39] d2.utils.events INFO:  eta: 0:11:35  iter: 19  total_loss: 29.95  loss_ce: 1.119  loss_mask: 0.2891  loss_dice: 1.461  loss_ce_0: 1.335  loss_mask_0: 0.318  loss_dice_0: 1.745  loss_ce_1: 1.315  loss_mask_1: 0.2958  loss_dice_1: 1.627  loss_ce_2: 1.224  loss_mask_2: 0.2923  loss_dice_2: 1.559  loss_ce_3: 1.174  loss_mask_3: 0.2914  loss_dice_3: 1.506  loss_ce_4: 1.172  loss_mask_4: 0.2881  loss_dice_4: 1.541  loss_ce_5: 1.112  loss_mask_5: 0.2824  loss_dice_5: 1.479  loss_ce_6: 1.114  loss_mask_6: 0.2909  loss_dice_6: 1.476  loss_ce_7: 1.13  loss_mask_7: 0.2865  loss_dice_7: 1.454  loss_ce_8: 1.119  loss_mask_8: 0.2814  loss_dice_8: 1.473    time: 0.7091  last_time: 0.7135  data_time: 0.2612  last_data_time: 0.0224   lr: 0.0001  max_mem: 16998M
[09/02 21:14:54] d2.utils.events INFO:  eta: 0:11:18  iter: 39  total_loss: 25.39  loss_ce: 0.7832  loss_mask: 0.2251  loss_dice: 1.396  loss_ce_0: 0.916  loss_mask_0: 0.2694  loss_dice_0: 1.7  loss_ce_1: 0.9567  loss_mask_1: 0.2521  loss_dice_1: 1.518  loss_ce_2: 0.8638  loss_mask_2: 0.2342  loss_dice_2: 1.486  loss_ce_3: 0.8297  loss_mask_3: 0.2227  loss_dice_3: 1.437  loss_ce_4: 0.8023  loss_mask_4: 0.2264  loss_dice_4: 1.41  loss_ce_5: 0.7869  loss_mask_5: 0.2226  loss_dice_5: 1.398  loss_ce_6: 0.7642  loss_mask_6: 0.2263  loss_dice_6: 1.379  loss_ce_7: 0.7791  loss_mask_7: 0.225  loss_dice_7: 1.401  loss_ce_8: 0.78  loss_mask_8: 0.2258  loss_dice_8: 1.383    time: 0.7102  last_time: 0.7130  data_time: 0.0321  last_data_time: 0.0223   lr: 0.0001  max_mem: 16998M
[09/02 21:15:08] d2.utils.events INFO:  eta: 0:11:05  iter: 59  total_loss: 23.25  loss_ce: 0.6698  loss_mask: 0.1909  loss_dice: 1.283  loss_ce_0: 0.8797  loss_mask_0: 0.2385  loss_dice_0: 1.566  loss_ce_1: 0.8553  loss_mask_1: 0.2185  loss_dice_1: 1.508  loss_ce_2: 0.7783  loss_mask_2: 0.1964  loss_dice_2: 1.391  loss_ce_3: 0.7446  loss_mask_3: 0.1973  loss_dice_3: 1.336  loss_ce_4: 0.7397  loss_mask_4: 0.1928  loss_dice_4: 1.351  loss_ce_5: 0.6595  loss_mask_5: 0.1947  loss_dice_5: 1.35  loss_ce_6: 0.6963  loss_mask_6: 0.1935  loss_dice_6: 1.295  loss_ce_7: 0.6671  loss_mask_7: 0.1951  loss_dice_7: 1.332  loss_ce_8: 0.6774  loss_mask_8: 0.1928  loss_dice_8: 1.32    time: 0.7073  last_time: 0.7627  data_time: 0.0319  last_data_time: 0.0987   lr: 0.0001  max_mem: 16998M
[09/02 21:15:22] d2.utils.events INFO:  eta: 0:10:49  iter: 79  total_loss: 23.62  loss_ce: 0.687  loss_mask: 0.2128  loss_dice: 1.316  loss_ce_0: 0.85  loss_mask_0: 0.2346  loss_dice_0: 1.623  loss_ce_1: 0.8345  loss_mask_1: 0.2147  loss_dice_1: 1.488  loss_ce_2: 0.7881  loss_mask_2: 0.2039  loss_dice_2: 1.453  loss_ce_3: 0.7198  loss_mask_3: 0.2143  loss_dice_3: 1.343  loss_ce_4: 0.7131  loss_mask_4: 0.2162  loss_dice_4: 1.361  loss_ce_5: 0.6761  loss_mask_5: 0.2203  loss_dice_5: 1.374  loss_ce_6: 0.6685  loss_mask_6: 0.2163  loss_dice_6: 1.346  loss_ce_7: 0.6764  loss_mask_7: 0.2161  loss_dice_7: 1.326  loss_ce_8: 0.6897  loss_mask_8: 0.2126  loss_dice_8: 1.317    time: 0.7093  last_time: 0.6955  data_time: 0.0334  last_data_time: 0.0257   lr: 0.0001  max_mem: 17304M
[09/02 21:15:37] d2.utils.events INFO:  eta: 0:10:35  iter: 99  total_loss: 23.06  loss_ce: 0.6393  loss_mask: 0.1801  loss_dice: 1.371  loss_ce_0: 0.7808  loss_mask_0: 0.201  loss_dice_0: 1.635  loss_ce_1: 0.8099  loss_mask_1: 0.1959  loss_dice_1: 1.54  loss_ce_2: 0.7658  loss_mask_2: 0.1882  loss_dice_2: 1.454  loss_ce_3: 0.7015  loss_mask_3: 0.1826  loss_dice_3: 1.411  loss_ce_4: 0.6969  loss_mask_4: 0.1821  loss_dice_4: 1.362  loss_ce_5: 0.6668  loss_mask_5: 0.1787  loss_dice_5: 1.366  loss_ce_6: 0.654  loss_mask_6: 0.1804  loss_dice_6: 1.346  loss_ce_7: 0.6494  loss_mask_7: 0.1823  loss_dice_7: 1.336  loss_ce_8: 0.6303  loss_mask_8: 0.1761  loss_dice_8: 1.302    time: 0.7095  last_time: 0.7312  data_time: 0.0392  last_data_time: 0.0512   lr: 0.0001  max_mem: 17304M
[09/02 21:15:51] d2.utils.events INFO:  eta: 0:10:24  iter: 119  total_loss: 21.93  loss_ce: 0.589  loss_mask: 0.1879  loss_dice: 1.286  loss_ce_0: 0.6841  loss_mask_0: 0.2162  loss_dice_0: 1.564  loss_ce_1: 0.7651  loss_mask_1: 0.1984  loss_dice_1: 1.437  loss_ce_2: 0.6792  loss_mask_2: 0.1887  loss_dice_2: 1.387  loss_ce_3: 0.6405  loss_mask_3: 0.1897  loss_dice_3: 1.299  loss_ce_4: 0.6424  loss_mask_4: 0.1879  loss_dice_4: 1.27  loss_ce_5: 0.6435  loss_mask_5: 0.1882  loss_dice_5: 1.31  loss_ce_6: 0.5926  loss_mask_6: 0.1886  loss_dice_6: 1.267  loss_ce_7: 0.6215  loss_mask_7: 0.1884  loss_dice_7: 1.258  loss_ce_8: 0.5903  loss_mask_8: 0.1867  loss_dice_8: 1.279    time: 0.7097  last_time: 0.7335  data_time: 0.0371  last_data_time: 0.0285   lr: 0.0001  max_mem: 17304M
[09/02 21:16:05] d2.utils.events INFO:  eta: 0:10:12  iter: 139  total_loss: 21.54  loss_ce: 0.5456  loss_mask: 0.1761  loss_dice: 1.305  loss_ce_0: 0.6927  loss_mask_0: 0.2045  loss_dice_0: 1.538  loss_ce_1: 0.6913  loss_mask_1: 0.1902  loss_dice_1: 1.447  loss_ce_2: 0.6562  loss_mask_2: 0.1799  loss_dice_2: 1.393  loss_ce_3: 0.6017  loss_mask_3: 0.1791  loss_dice_3: 1.316  loss_ce_4: 0.5648  loss_mask_4: 0.1799  loss_dice_4: 1.317  loss_ce_5: 0.5526  loss_mask_5: 0.1777  loss_dice_5: 1.346  loss_ce_6: 0.5571  loss_mask_6: 0.1761  loss_dice_6: 1.352  loss_ce_7: 0.562  loss_mask_7: 0.1759  loss_dice_7: 1.249  loss_ce_8: 0.5523  loss_mask_8: 0.1743  loss_dice_8: 1.329    time: 0.7106  last_time: 0.7151  data_time: 0.0392  last_data_time: 0.0308   lr: 0.0001  max_mem: 17304M
[09/02 21:16:19] d2.utils.events INFO:  eta: 0:09:55  iter: 159  total_loss: 21.34  loss_ce: 0.5974  loss_mask: 0.1723  loss_dice: 1.26  loss_ce_0: 0.7214  loss_mask_0: 0.1955  loss_dice_0: 1.489  loss_ce_1: 0.755  loss_mask_1: 0.1743  loss_dice_1: 1.407  loss_ce_2: 0.6877  loss_mask_2: 0.1814  loss_dice_2: 1.343  loss_ce_3: 0.6636  loss_mask_3: 0.1722  loss_dice_3: 1.281  loss_ce_4: 0.619  loss_mask_4: 0.1755  loss_dice_4: 1.265  loss_ce_5: 0.6264  loss_mask_5: 0.1779  loss_dice_5: 1.244  loss_ce_6: 0.6015  loss_mask_6: 0.1747  loss_dice_6: 1.246  loss_ce_7: 0.6179  loss_mask_7: 0.1753  loss_dice_7: 1.224  loss_ce_8: 0.619  loss_mask_8: 0.1763  loss_dice_8: 1.254    time: 0.7089  last_time: 0.7050  data_time: 0.0356  last_data_time: 0.0194   lr: 0.0001  max_mem: 17953M
[09/02 21:16:33] d2.utils.events INFO:  eta: 0:09:40  iter: 179  total_loss: 20.46  loss_ce: 0.6272  loss_mask: 0.1903  loss_dice: 1.145  loss_ce_0: 0.6707  loss_mask_0: 0.2263  loss_dice_0: 1.413  loss_ce_1: 0.7702  loss_mask_1: 0.2087  loss_dice_1: 1.262  loss_ce_2: 0.6771  loss_mask_2: 0.196  loss_dice_2: 1.227  loss_ce_3: 0.6274  loss_mask_3: 0.194  loss_dice_3: 1.181  loss_ce_4: 0.6123  loss_mask_4: 0.1973  loss_dice_4: 1.179  loss_ce_5: 0.6097  loss_mask_5: 0.1915  loss_dice_5: 1.175  loss_ce_6: 0.6024  loss_mask_6: 0.1899  loss_dice_6: 1.216  loss_ce_7: 0.6241  loss_mask_7: 0.1903  loss_dice_7: 1.152  loss_ce_8: 0.5978  loss_mask_8: 0.1903  loss_dice_8: 1.161    time: 0.7076  last_time: 0.7005  data_time: 0.0316  last_data_time: 0.0265   lr: 0.0001  max_mem: 17953M
[09/02 21:16:47] d2.utils.events INFO:  eta: 0:09:24  iter: 199  total_loss: 21.87  loss_ce: 0.5814  loss_mask: 0.1705  loss_dice: 1.269  loss_ce_0: 0.6803  loss_mask_0: 0.2023  loss_dice_0: 1.51  loss_ce_1: 0.768  loss_mask_1: 0.1877  loss_dice_1: 1.449  loss_ce_2: 0.6891  loss_mask_2: 0.1868  loss_dice_2: 1.375  loss_ce_3: 0.6075  loss_mask_3: 0.1856  loss_dice_3: 1.344  loss_ce_4: 0.6057  loss_mask_4: 0.1812  loss_dice_4: 1.318  loss_ce_5: 0.6064  loss_mask_5: 0.1776  loss_dice_5: 1.325  loss_ce_6: 0.5935  loss_mask_6: 0.1769  loss_dice_6: 1.277  loss_ce_7: 0.5739  loss_mask_7: 0.1823  loss_dice_7: 1.278  loss_ce_8: 0.5843  loss_mask_8: 0.1743  loss_dice_8: 1.299    time: 0.7049  last_time: 0.6278  data_time: 0.0292  last_data_time: 0.0208   lr: 0.0001  max_mem: 17953M
[09/02 21:17:02] d2.utils.events INFO:  eta: 0:09:12  iter: 219  total_loss: 21.58  loss_ce: 0.6227  loss_mask: 0.1643  loss_dice: 1.215  loss_ce_0: 0.6824  loss_mask_0: 0.1952  loss_dice_0: 1.455  loss_ce_1: 0.8197  loss_mask_1: 0.177  loss_dice_1: 1.378  loss_ce_2: 0.6845  loss_mask_2: 0.1682  loss_dice_2: 1.327  loss_ce_3: 0.6748  loss_mask_3: 0.1651  loss_dice_3: 1.279  loss_ce_4: 0.6351  loss_mask_4: 0.1647  loss_dice_4: 1.278  loss_ce_5: 0.6399  loss_mask_5: 0.1624  loss_dice_5: 1.261  loss_ce_6: 0.6279  loss_mask_6: 0.1646  loss_dice_6: 1.231  loss_ce_7: 0.6151  loss_mask_7: 0.1658  loss_dice_7: 1.278  loss_ce_8: 0.6735  loss_mask_8: 0.1636  loss_dice_8: 1.264    time: 0.7061  last_time: 0.7702  data_time: 0.0271  last_data_time: 0.0212   lr: 0.0001  max_mem: 17953M
[09/02 21:17:16] d2.utils.events INFO:  eta: 0:08:59  iter: 239  total_loss: 20.52  loss_ce: 0.6322  loss_mask: 0.1752  loss_dice: 1.191  loss_ce_0: 0.6775  loss_mask_0: 0.1884  loss_dice_0: 1.457  loss_ce_1: 0.786  loss_mask_1: 0.1827  loss_dice_1: 1.346  loss_ce_2: 0.7166  loss_mask_2: 0.1757  loss_dice_2: 1.276  loss_ce_3: 0.6655  loss_mask_3: 0.1721  loss_dice_3: 1.227  loss_ce_4: 0.6301  loss_mask_4: 0.1753  loss_dice_4: 1.231  loss_ce_5: 0.6381  loss_mask_5: 0.1713  loss_dice_5: 1.203  loss_ce_6: 0.6264  loss_mask_6: 0.1755  loss_dice_6: 1.205  loss_ce_7: 0.5952  loss_mask_7: 0.1733  loss_dice_7: 1.192  loss_ce_8: 0.5967  loss_mask_8: 0.1746  loss_dice_8: 1.174    time: 0.7064  last_time: 0.7093  data_time: 0.0235  last_data_time: 0.0217   lr: 0.0001  max_mem: 17953M
[09/02 21:17:30] d2.utils.events INFO:  eta: 0:08:44  iter: 259  total_loss: 20.59  loss_ce: 0.6026  loss_mask: 0.1778  loss_dice: 1.197  loss_ce_0: 0.682  loss_mask_0: 0.2025  loss_dice_0: 1.429  loss_ce_1: 0.7232  loss_mask_1: 0.1937  loss_dice_1: 1.333  loss_ce_2: 0.6889  loss_mask_2: 0.1817  loss_dice_2: 1.267  loss_ce_3: 0.6277  loss_mask_3: 0.1835  loss_dice_3: 1.245  loss_ce_4: 0.6316  loss_mask_4: 0.1815  loss_dice_4: 1.224  loss_ce_5: 0.6024  loss_mask_5: 0.1779  loss_dice_5: 1.244  loss_ce_6: 0.5958  loss_mask_6: 0.1783  loss_dice_6: 1.189  loss_ce_7: 0.5804  loss_mask_7: 0.1777  loss_dice_7: 1.194  loss_ce_8: 0.5804  loss_mask_8: 0.1795  loss_dice_8: 1.174    time: 0.7066  last_time: 0.7105  data_time: 0.0236  last_data_time: 0.0231   lr: 0.0001  max_mem: 17953M
[09/02 21:17:44] d2.utils.events INFO:  eta: 0:08:30  iter: 279  total_loss: 20.33  loss_ce: 0.551  loss_mask: 0.1697  loss_dice: 1.216  loss_ce_0: 0.6488  loss_mask_0: 0.1904  loss_dice_0: 1.387  loss_ce_1: 0.6911  loss_mask_1: 0.1835  loss_dice_1: 1.343  loss_ce_2: 0.6725  loss_mask_2: 0.1745  loss_dice_2: 1.238  loss_ce_3: 0.6133  loss_mask_3: 0.1749  loss_dice_3: 1.26  loss_ce_4: 0.549  loss_mask_4: 0.1713  loss_dice_4: 1.222  loss_ce_5: 0.5347  loss_mask_5: 0.1708  loss_dice_5: 1.229  loss_ce_6: 0.5249  loss_mask_6: 0.17  loss_dice_6: 1.207  loss_ce_7: 0.5335  loss_mask_7: 0.1713  loss_dice_7: 1.22  loss_ce_8: 0.5159  loss_mask_8: 0.171  loss_dice_8: 1.247    time: 0.7067  last_time: 0.6707  data_time: 0.0309  last_data_time: 0.0260   lr: 0.0001  max_mem: 17953M
[09/02 21:17:58] d2.utils.events INFO:  eta: 0:08:16  iter: 299  total_loss: 20.3  loss_ce: 0.5112  loss_mask: 0.1887  loss_dice: 1.238  loss_ce_0: 0.6565  loss_mask_0: 0.2024  loss_dice_0: 1.444  loss_ce_1: 0.7306  loss_mask_1: 0.1926  loss_dice_1: 1.376  loss_ce_2: 0.6655  loss_mask_2: 0.1879  loss_dice_2: 1.289  loss_ce_3: 0.6008  loss_mask_3: 0.1886  loss_dice_3: 1.245  loss_ce_4: 0.5848  loss_mask_4: 0.1863  loss_dice_4: 1.248  loss_ce_5: 0.5445  loss_mask_5: 0.1862  loss_dice_5: 1.264  loss_ce_6: 0.5407  loss_mask_6: 0.1864  loss_dice_6: 1.209  loss_ce_7: 0.5426  loss_mask_7: 0.1889  loss_dice_7: 1.24  loss_ce_8: 0.5523  loss_mask_8: 0.1868  loss_dice_8: 1.271    time: 0.7059  last_time: 0.7179  data_time: 0.0246  last_data_time: 0.0215   lr: 0.0001  max_mem: 17953M
[09/02 21:18:12] d2.utils.events INFO:  eta: 0:08:02  iter: 319  total_loss: 21.17  loss_ce: 0.5419  loss_mask: 0.1779  loss_dice: 1.293  loss_ce_0: 0.6335  loss_mask_0: 0.1943  loss_dice_0: 1.524  loss_ce_1: 0.6957  loss_mask_1: 0.1859  loss_dice_1: 1.424  loss_ce_2: 0.6347  loss_mask_2: 0.1829  loss_dice_2: 1.327  loss_ce_3: 0.5689  loss_mask_3: 0.1822  loss_dice_3: 1.321  loss_ce_4: 0.577  loss_mask_4: 0.1817  loss_dice_4: 1.284  loss_ce_5: 0.5493  loss_mask_5: 0.178  loss_dice_5: 1.272  loss_ce_6: 0.547  loss_mask_6: 0.1807  loss_dice_6: 1.257  loss_ce_7: 0.5208  loss_mask_7: 0.1786  loss_dice_7: 1.294  loss_ce_8: 0.5491  loss_mask_8: 0.1774  loss_dice_8: 1.271    time: 0.7062  last_time: 0.6947  data_time: 0.0299  last_data_time: 0.0257   lr: 0.0001  max_mem: 17953M
[09/02 21:18:27] d2.utils.events INFO:  eta: 0:07:48  iter: 339  total_loss: 20.1  loss_ce: 0.5663  loss_mask: 0.1722  loss_dice: 1.209  loss_ce_0: 0.6602  loss_mask_0: 0.1985  loss_dice_0: 1.408  loss_ce_1: 0.7128  loss_mask_1: 0.1833  loss_dice_1: 1.336  loss_ce_2: 0.6513  loss_mask_2: 0.1755  loss_dice_2: 1.281  loss_ce_3: 0.6231  loss_mask_3: 0.1771  loss_dice_3: 1.225  loss_ce_4: 0.6091  loss_mask_4: 0.1762  loss_dice_4: 1.224  loss_ce_5: 0.5481  loss_mask_5: 0.1753  loss_dice_5: 1.255  loss_ce_6: 0.567  loss_mask_6: 0.1746  loss_dice_6: 1.185  loss_ce_7: 0.532  loss_mask_7: 0.1753  loss_dice_7: 1.195  loss_ce_8: 0.567  loss_mask_8: 0.1756  loss_dice_8: 1.186    time: 0.7067  last_time: 0.6985  data_time: 0.0288  last_data_time: 0.0236   lr: 0.0001  max_mem: 17953M
[09/02 21:18:41] d2.utils.events INFO:  eta: 0:07:33  iter: 359  total_loss: 19.69  loss_ce: 0.5403  loss_mask: 0.1697  loss_dice: 1.157  loss_ce_0: 0.6501  loss_mask_0: 0.1954  loss_dice_0: 1.414  loss_ce_1: 0.7211  loss_mask_1: 0.1784  loss_dice_1: 1.304  loss_ce_2: 0.6311  loss_mask_2: 0.1758  loss_dice_2: 1.228  loss_ce_3: 0.5777  loss_mask_3: 0.1738  loss_dice_3: 1.22  loss_ce_4: 0.5617  loss_mask_4: 0.177  loss_dice_4: 1.191  loss_ce_5: 0.5287  loss_mask_5: 0.1712  loss_dice_5: 1.214  loss_ce_6: 0.5477  loss_mask_6: 0.1692  loss_dice_6: 1.144  loss_ce_7: 0.5625  loss_mask_7: 0.1689  loss_dice_7: 1.17  loss_ce_8: 0.5538  loss_mask_8: 0.1686  loss_dice_8: 1.175    time: 0.7064  last_time: 0.7690  data_time: 0.0296  last_data_time: 0.0315   lr: 0.0001  max_mem: 17953M
[09/02 21:18:55] d2.utils.events INFO:  eta: 0:07:20  iter: 379  total_loss: 20.54  loss_ce: 0.5836  loss_mask: 0.1573  loss_dice: 1.205  loss_ce_0: 0.6885  loss_mask_0: 0.1714  loss_dice_0: 1.464  loss_ce_1: 0.7119  loss_mask_1: 0.1665  loss_dice_1: 1.394  loss_ce_2: 0.6078  loss_mask_2: 0.1612  loss_dice_2: 1.337  loss_ce_3: 0.6262  loss_mask_3: 0.1567  loss_dice_3: 1.27  loss_ce_4: 0.6077  loss_mask_4: 0.1585  loss_dice_4: 1.243  loss_ce_5: 0.5826  loss_mask_5: 0.1584  loss_dice_5: 1.248  loss_ce_6: 0.5514  loss_mask_6: 0.1572  loss_dice_6: 1.226  loss_ce_7: 0.5525  loss_mask_7: 0.1563  loss_dice_7: 1.271  loss_ce_8: 0.5509  loss_mask_8: 0.1553  loss_dice_8: 1.254    time: 0.7072  last_time: 0.7225  data_time: 0.0292  last_data_time: 0.0349   lr: 0.0001  max_mem: 17953M
[09/02 21:19:10] d2.utils.events INFO:  eta: 0:07:06  iter: 399  total_loss: 20.02  loss_ce: 0.5067  loss_mask: 0.1644  loss_dice: 1.184  loss_ce_0: 0.6379  loss_mask_0: 0.1826  loss_dice_0: 1.399  loss_ce_1: 0.6763  loss_mask_1: 0.1736  loss_dice_1: 1.318  loss_ce_2: 0.6019  loss_mask_2: 0.1635  loss_dice_2: 1.26  loss_ce_3: 0.5553  loss_mask_3: 0.1626  loss_dice_3: 1.201  loss_ce_4: 0.5431  loss_mask_4: 0.1626  loss_dice_4: 1.179  loss_ce_5: 0.5205  loss_mask_5: 0.1637  loss_dice_5: 1.214  loss_ce_6: 0.4926  loss_mask_6: 0.1632  loss_dice_6: 1.172  loss_ce_7: 0.538  loss_mask_7: 0.1638  loss_dice_7: 1.206  loss_ce_8: 0.5181  loss_mask_8: 0.1661  loss_dice_8: 1.144    time: 0.7087  last_time: 0.7040  data_time: 0.0355  last_data_time: 0.0455   lr: 0.0001  max_mem: 17953M
[09/02 21:19:25] d2.utils.events INFO:  eta: 0:06:52  iter: 419  total_loss: 19.9  loss_ce: 0.5465  loss_mask: 0.159  loss_dice: 1.167  loss_ce_0: 0.6704  loss_mask_0: 0.1847  loss_dice_0: 1.374  loss_ce_1: 0.7076  loss_mask_1: 0.1732  loss_dice_1: 1.338  loss_ce_2: 0.6429  loss_mask_2: 0.1663  loss_dice_2: 1.253  loss_ce_3: 0.6232  loss_mask_3: 0.1606  loss_dice_3: 1.218  loss_ce_4: 0.58  loss_mask_4: 0.1561  loss_dice_4: 1.207  loss_ce_5: 0.5654  loss_mask_5: 0.1594  loss_dice_5: 1.193  loss_ce_6: 0.5583  loss_mask_6: 0.1627  loss_dice_6: 1.148  loss_ce_7: 0.5433  loss_mask_7: 0.1595  loss_dice_7: 1.182  loss_ce_8: 0.5449  loss_mask_8: 0.1588  loss_dice_8: 1.165    time: 0.7092  last_time: 0.7267  data_time: 0.0352  last_data_time: 0.0328   lr: 0.0001  max_mem: 17953M
[09/02 21:19:39] d2.utils.events INFO:  eta: 0:06:38  iter: 439  total_loss: 20.33  loss_ce: 0.5412  loss_mask: 0.1671  loss_dice: 1.221  loss_ce_0: 0.6045  loss_mask_0: 0.1967  loss_dice_0: 1.379  loss_ce_1: 0.6811  loss_mask_1: 0.1804  loss_dice_1: 1.342  loss_ce_2: 0.6155  loss_mask_2: 0.1713  loss_dice_2: 1.324  loss_ce_3: 0.5821  loss_mask_3: 0.1665  loss_dice_3: 1.264  loss_ce_4: 0.5417  loss_mask_4: 0.1676  loss_dice_4: 1.233  loss_ce_5: 0.5509  loss_mask_5: 0.1692  loss_dice_5: 1.234  loss_ce_6: 0.5345  loss_mask_6: 0.1671  loss_dice_6: 1.238  loss_ce_7: 0.4907  loss_mask_7: 0.1647  loss_dice_7: 1.24  loss_ce_8: 0.4994  loss_mask_8: 0.1696  loss_dice_8: 1.212    time: 0.7092  last_time: 0.7157  data_time: 0.0299  last_data_time: 0.0253   lr: 0.0001  max_mem: 17953M
[09/02 21:19:53] d2.utils.events INFO:  eta: 0:06:24  iter: 459  total_loss: 21.14  loss_ce: 0.5456  loss_mask: 0.151  loss_dice: 1.306  loss_ce_0: 0.6499  loss_mask_0: 0.1813  loss_dice_0: 1.485  loss_ce_1: 0.6943  loss_mask_1: 0.1756  loss_dice_1: 1.379  loss_ce_2: 0.6444  loss_mask_2: 0.1695  loss_dice_2: 1.394  loss_ce_3: 0.602  loss_mask_3: 0.1542  loss_dice_3: 1.301  loss_ce_4: 0.5789  loss_mask_4: 0.1537  loss_dice_4: 1.365  loss_ce_5: 0.5554  loss_mask_5: 0.1533  loss_dice_5: 1.33  loss_ce_6: 0.5771  loss_mask_6: 0.1513  loss_dice_6: 1.299  loss_ce_7: 0.5488  loss_mask_7: 0.1498  loss_dice_7: 1.298  loss_ce_8: 0.5585  loss_mask_8: 0.1516  loss_dice_8: 1.314    time: 0.7092  last_time: 0.6935  data_time: 0.0343  last_data_time: 0.0292   lr: 0.0001  max_mem: 17953M
[09/02 21:20:07] d2.utils.events INFO:  eta: 0:06:09  iter: 479  total_loss: 19.99  loss_ce: 0.4908  loss_mask: 0.1564  loss_dice: 1.169  loss_ce_0: 0.6225  loss_mask_0: 0.1865  loss_dice_0: 1.345  loss_ce_1: 0.6851  loss_mask_1: 0.1716  loss_dice_1: 1.271  loss_ce_2: 0.6119  loss_mask_2: 0.1613  loss_dice_2: 1.263  loss_ce_3: 0.5876  loss_mask_3: 0.1611  loss_dice_3: 1.163  loss_ce_4: 0.5509  loss_mask_4: 0.1619  loss_dice_4: 1.218  loss_ce_5: 0.5373  loss_mask_5: 0.1591  loss_dice_5: 1.18  loss_ce_6: 0.5309  loss_mask_6: 0.1564  loss_dice_6: 1.155  loss_ce_7: 0.5238  loss_mask_7: 0.1588  loss_dice_7: 1.178  loss_ce_8: 0.5206  loss_mask_8: 0.1573  loss_dice_8: 1.178    time: 0.7090  last_time: 0.6798  data_time: 0.0375  last_data_time: 0.0298   lr: 0.0001  max_mem: 17953M
[09/02 21:20:22] d2.utils.events INFO:  eta: 0:05:55  iter: 499  total_loss: 19.87  loss_ce: 0.5201  loss_mask: 0.1621  loss_dice: 1.161  loss_ce_0: 0.6512  loss_mask_0: 0.1907  loss_dice_0: 1.402  loss_ce_1: 0.7184  loss_mask_1: 0.1743  loss_dice_1: 1.272  loss_ce_2: 0.6495  loss_mask_2: 0.1681  loss_dice_2: 1.249  loss_ce_3: 0.6109  loss_mask_3: 0.1657  loss_dice_3: 1.195  loss_ce_4: 0.5831  loss_mask_4: 0.1655  loss_dice_4: 1.182  loss_ce_5: 0.5892  loss_mask_5: 0.1637  loss_dice_5: 1.2  loss_ce_6: 0.5335  loss_mask_6: 0.1613  loss_dice_6: 1.165  loss_ce_7: 0.5697  loss_mask_7: 0.165  loss_dice_7: 1.138  loss_ce_8: 0.5791  loss_mask_8: 0.1596  loss_dice_8: 1.145    time: 0.7090  last_time: 0.7436  data_time: 0.0339  last_data_time: 0.0280   lr: 0.0001  max_mem: 17953M
[09/02 21:20:36] d2.utils.events INFO:  eta: 0:05:41  iter: 519  total_loss: 19.94  loss_ce: 0.5304  loss_mask: 0.1596  loss_dice: 1.2  loss_ce_0: 0.6194  loss_mask_0: 0.185  loss_dice_0: 1.422  loss_ce_1: 0.6833  loss_mask_1: 0.1724  loss_dice_1: 1.342  loss_ce_2: 0.6289  loss_mask_2: 0.1599  loss_dice_2: 1.305  loss_ce_3: 0.6151  loss_mask_3: 0.1625  loss_dice_3: 1.244  loss_ce_4: 0.5636  loss_mask_4: 0.1623  loss_dice_4: 1.225  loss_ce_5: 0.5557  loss_mask_5: 0.1605  loss_dice_5: 1.237  loss_ce_6: 0.5353  loss_mask_6: 0.1609  loss_dice_6: 1.203  loss_ce_7: 0.5152  loss_mask_7: 0.16  loss_dice_7: 1.207  loss_ce_8: 0.5554  loss_mask_8: 0.1585  loss_dice_8: 1.215    time: 0.7085  last_time: 0.7061  data_time: 0.0331  last_data_time: 0.0256   lr: 0.0001  max_mem: 17953M
[09/02 21:20:50] d2.utils.events INFO:  eta: 0:05:26  iter: 539  total_loss: 19.87  loss_ce: 0.5262  loss_mask: 0.1653  loss_dice: 1.191  loss_ce_0: 0.5985  loss_mask_0: 0.1892  loss_dice_0: 1.381  loss_ce_1: 0.6495  loss_mask_1: 0.1758  loss_dice_1: 1.34  loss_ce_2: 0.6185  loss_mask_2: 0.1699  loss_dice_2: 1.285  loss_ce_3: 0.5671  loss_mask_3: 0.1707  loss_dice_3: 1.241  loss_ce_4: 0.5365  loss_mask_4: 0.1719  loss_dice_4: 1.225  loss_ce_5: 0.5442  loss_mask_5: 0.1662  loss_dice_5: 1.182  loss_ce_6: 0.5291  loss_mask_6: 0.1674  loss_dice_6: 1.193  loss_ce_7: 0.5376  loss_mask_7: 0.1657  loss_dice_7: 1.203  loss_ce_8: 0.5442  loss_mask_8: 0.1655  loss_dice_8: 1.218    time: 0.7082  last_time: 0.6675  data_time: 0.0306  last_data_time: 0.0307   lr: 0.0001  max_mem: 17953M
[09/02 21:21:04] d2.utils.events INFO:  eta: 0:05:12  iter: 559  total_loss: 20.1  loss_ce: 0.5484  loss_mask: 0.1622  loss_dice: 1.232  loss_ce_0: 0.6651  loss_mask_0: 0.1969  loss_dice_0: 1.483  loss_ce_1: 0.7378  loss_mask_1: 0.1779  loss_dice_1: 1.345  loss_ce_2: 0.6485  loss_mask_2: 0.1733  loss_dice_2: 1.281  loss_ce_3: 0.6194  loss_mask_3: 0.172  loss_dice_3: 1.243  loss_ce_4: 0.5667  loss_mask_4: 0.1752  loss_dice_4: 1.229  loss_ce_5: 0.5522  loss_mask_5: 0.1657  loss_dice_5: 1.216  loss_ce_6: 0.5725  loss_mask_6: 0.1694  loss_dice_6: 1.249  loss_ce_7: 0.5795  loss_mask_7: 0.1626  loss_dice_7: 1.211  loss_ce_8: 0.5644  loss_mask_8: 0.1617  loss_dice_8: 1.212    time: 0.7083  last_time: 0.7198  data_time: 0.0359  last_data_time: 0.0424   lr: 0.0001  max_mem: 17953M
[09/02 21:21:18] d2.utils.events INFO:  eta: 0:04:58  iter: 579  total_loss: 19.73  loss_ce: 0.5536  loss_mask: 0.1691  loss_dice: 1.167  loss_ce_0: 0.6547  loss_mask_0: 0.1875  loss_dice_0: 1.367  loss_ce_1: 0.7105  loss_mask_1: 0.1768  loss_dice_1: 1.301  loss_ce_2: 0.6145  loss_mask_2: 0.1679  loss_dice_2: 1.297  loss_ce_3: 0.5722  loss_mask_3: 0.1666  loss_dice_3: 1.201  loss_ce_4: 0.5769  loss_mask_4: 0.1694  loss_dice_4: 1.19  loss_ce_5: 0.5186  loss_mask_5: 0.169  loss_dice_5: 1.218  loss_ce_6: 0.5375  loss_mask_6: 0.1686  loss_dice_6: 1.206  loss_ce_7: 0.5504  loss_mask_7: 0.1659  loss_dice_7: 1.145  loss_ce_8: 0.5556  loss_mask_8: 0.1678  loss_dice_8: 1.199    time: 0.7087  last_time: 0.6221  data_time: 0.0282  last_data_time: 0.0294   lr: 0.0001  max_mem: 17953M
[09/02 21:21:33] d2.utils.events INFO:  eta: 0:04:44  iter: 599  total_loss: 19.88  loss_ce: 0.5429  loss_mask: 0.1641  loss_dice: 1.194  loss_ce_0: 0.6208  loss_mask_0: 0.1761  loss_dice_0: 1.397  loss_ce_1: 0.7615  loss_mask_1: 0.1734  loss_dice_1: 1.322  loss_ce_2: 0.6758  loss_mask_2: 0.1673  loss_dice_2: 1.257  loss_ce_3: 0.6177  loss_mask_3: 0.171  loss_dice_3: 1.236  loss_ce_4: 0.5706  loss_mask_4: 0.1654  loss_dice_4: 1.206  loss_ce_5: 0.5674  loss_mask_5: 0.1677  loss_dice_5: 1.224  loss_ce_6: 0.5391  loss_mask_6: 0.1643  loss_dice_6: 1.174  loss_ce_7: 0.5762  loss_mask_7: 0.1658  loss_dice_7: 1.198  loss_ce_8: 0.5645  loss_mask_8: 0.1638  loss_dice_8: 1.18    time: 0.7087  last_time: 0.7177  data_time: 0.0314  last_data_time: 0.0278   lr: 0.0001  max_mem: 17953M
[09/02 21:21:46] d2.utils.events INFO:  eta: 0:04:29  iter: 619  total_loss: 19.88  loss_ce: 0.5375  loss_mask: 0.1613  loss_dice: 1.167  loss_ce_0: 0.6107  loss_mask_0: 0.1972  loss_dice_0: 1.383  loss_ce_1: 0.706  loss_mask_1: 0.1728  loss_dice_1: 1.327  loss_ce_2: 0.6362  loss_mask_2: 0.1658  loss_dice_2: 1.267  loss_ce_3: 0.5972  loss_mask_3: 0.1683  loss_dice_3: 1.207  loss_ce_4: 0.5662  loss_mask_4: 0.1666  loss_dice_4: 1.201  loss_ce_5: 0.5338  loss_mask_5: 0.1655  loss_dice_5: 1.217  loss_ce_6: 0.5377  loss_mask_6: 0.1649  loss_dice_6: 1.172  loss_ce_7: 0.5378  loss_mask_7: 0.1654  loss_dice_7: 1.159  loss_ce_8: 0.5633  loss_mask_8: 0.165  loss_dice_8: 1.177    time: 0.7081  last_time: 0.7436  data_time: 0.0346  last_data_time: 0.0785   lr: 0.0001  max_mem: 17953M
[09/02 21:22:00] d2.utils.events INFO:  eta: 0:04:15  iter: 639  total_loss: 19.85  loss_ce: 0.5179  loss_mask: 0.1687  loss_dice: 1.181  loss_ce_0: 0.6369  loss_mask_0: 0.1922  loss_dice_0: 1.37  loss_ce_1: 0.6934  loss_mask_1: 0.1827  loss_dice_1: 1.341  loss_ce_2: 0.5878  loss_mask_2: 0.1763  loss_dice_2: 1.269  loss_ce_3: 0.5641  loss_mask_3: 0.1724  loss_dice_3: 1.238  loss_ce_4: 0.5627  loss_mask_4: 0.174  loss_dice_4: 1.211  loss_ce_5: 0.5509  loss_mask_5: 0.1723  loss_dice_5: 1.206  loss_ce_6: 0.5177  loss_mask_6: 0.1681  loss_dice_6: 1.193  loss_ce_7: 0.5482  loss_mask_7: 0.1701  loss_dice_7: 1.196  loss_ce_8: 0.5545  loss_mask_8: 0.1676  loss_dice_8: 1.19    time: 0.7074  last_time: 0.6455  data_time: 0.0277  last_data_time: 0.0270   lr: 0.0001  max_mem: 17953M
[09/02 21:22:14] d2.utils.events INFO:  eta: 0:04:01  iter: 659  total_loss: 19.83  loss_ce: 0.5349  loss_mask: 0.1667  loss_dice: 1.179  loss_ce_0: 0.6438  loss_mask_0: 0.1884  loss_dice_0: 1.368  loss_ce_1: 0.6849  loss_mask_1: 0.1784  loss_dice_1: 1.325  loss_ce_2: 0.6134  loss_mask_2: 0.1708  loss_dice_2: 1.265  loss_ce_3: 0.5929  loss_mask_3: 0.1774  loss_dice_3: 1.235  loss_ce_4: 0.5532  loss_mask_4: 0.1713  loss_dice_4: 1.236  loss_ce_5: 0.5519  loss_mask_5: 0.1711  loss_dice_5: 1.227  loss_ce_6: 0.5394  loss_mask_6: 0.1701  loss_dice_6: 1.169  loss_ce_7: 0.53  loss_mask_7: 0.1693  loss_dice_7: 1.164  loss_ce_8: 0.5396  loss_mask_8: 0.1653  loss_dice_8: 1.174    time: 0.7073  last_time: 0.7049  data_time: 0.0282  last_data_time: 0.0247   lr: 0.0001  max_mem: 17953M
[09/02 21:22:29] d2.utils.events INFO:  eta: 0:03:47  iter: 679  total_loss: 20.22  loss_ce: 0.5446  loss_mask: 0.1545  loss_dice: 1.229  loss_ce_0: 0.597  loss_mask_0: 0.1762  loss_dice_0: 1.445  loss_ce_1: 0.6699  loss_mask_1: 0.1635  loss_dice_1: 1.333  loss_ce_2: 0.6281  loss_mask_2: 0.1542  loss_dice_2: 1.259  loss_ce_3: 0.5866  loss_mask_3: 0.1556  loss_dice_3: 1.281  loss_ce_4: 0.5261  loss_mask_4: 0.1548  loss_dice_4: 1.218  loss_ce_5: 0.5353  loss_mask_5: 0.1549  loss_dice_5: 1.212  loss_ce_6: 0.5209  loss_mask_6: 0.1534  loss_dice_6: 1.18  loss_ce_7: 0.5252  loss_mask_7: 0.1525  loss_dice_7: 1.211  loss_ce_8: 0.5146  loss_mask_8: 0.1531  loss_dice_8: 1.193    time: 0.7076  last_time: 0.7800  data_time: 0.0327  last_data_time: 0.0669   lr: 0.0001  max_mem: 17953M
[09/02 21:22:43] d2.utils.events INFO:  eta: 0:03:33  iter: 699  total_loss: 19.49  loss_ce: 0.5553  loss_mask: 0.1749  loss_dice: 1.143  loss_ce_0: 0.6495  loss_mask_0: 0.2035  loss_dice_0: 1.361  loss_ce_1: 0.7404  loss_mask_1: 0.1876  loss_dice_1: 1.296  loss_ce_2: 0.671  loss_mask_2: 0.1768  loss_dice_2: 1.206  loss_ce_3: 0.6108  loss_mask_3: 0.1796  loss_dice_3: 1.173  loss_ce_4: 0.5697  loss_mask_4: 0.176  loss_dice_4: 1.182  loss_ce_5: 0.5683  loss_mask_5: 0.1759  loss_dice_5: 1.15  loss_ce_6: 0.5486  loss_mask_6: 0.1735  loss_dice_6: 1.124  loss_ce_7: 0.5593  loss_mask_7: 0.1735  loss_dice_7: 1.122  loss_ce_8: 0.5531  loss_mask_8: 0.1749  loss_dice_8: 1.151    time: 0.7077  last_time: 0.6556  data_time: 0.0299  last_data_time: 0.0400   lr: 0.0001  max_mem: 17953M
[09/02 21:22:57] d2.utils.events INFO:  eta: 0:03:18  iter: 719  total_loss: 19.78  loss_ce: 0.5253  loss_mask: 0.1577  loss_dice: 1.15  loss_ce_0: 0.5917  loss_mask_0: 0.1848  loss_dice_0: 1.375  loss_ce_1: 0.7233  loss_mask_1: 0.1716  loss_dice_1: 1.276  loss_ce_2: 0.6416  loss_mask_2: 0.1672  loss_dice_2: 1.223  loss_ce_3: 0.6075  loss_mask_3: 0.1638  loss_dice_3: 1.182  loss_ce_4: 0.5272  loss_mask_4: 0.1619  loss_dice_4: 1.209  loss_ce_5: 0.5328  loss_mask_5: 0.1612  loss_dice_5: 1.158  loss_ce_6: 0.516  loss_mask_6: 0.1602  loss_dice_6: 1.191  loss_ce_7: 0.5093  loss_mask_7: 0.1583  loss_dice_7: 1.163  loss_ce_8: 0.5257  loss_mask_8: 0.1612  loss_dice_8: 1.144    time: 0.7076  last_time: 0.7110  data_time: 0.0272  last_data_time: 0.0211   lr: 0.0001  max_mem: 17953M
[09/02 21:23:12] d2.utils.events INFO:  eta: 0:03:04  iter: 739  total_loss: 20.19  loss_ce: 0.5024  loss_mask: 0.1634  loss_dice: 1.188  loss_ce_0: 0.6142  loss_mask_0: 0.1968  loss_dice_0: 1.404  loss_ce_1: 0.6933  loss_mask_1: 0.1803  loss_dice_1: 1.331  loss_ce_2: 0.6057  loss_mask_2: 0.1724  loss_dice_2: 1.252  loss_ce_3: 0.5738  loss_mask_3: 0.17  loss_dice_3: 1.243  loss_ce_4: 0.5492  loss_mask_4: 0.1675  loss_dice_4: 1.203  loss_ce_5: 0.5241  loss_mask_5: 0.1677  loss_dice_5: 1.213  loss_ce_6: 0.5318  loss_mask_6: 0.1683  loss_dice_6: 1.183  loss_ce_7: 0.5358  loss_mask_7: 0.1678  loss_dice_7: 1.165  loss_ce_8: 0.5501  loss_mask_8: 0.164  loss_dice_8: 1.183    time: 0.7078  last_time: 0.6220  data_time: 0.0399  last_data_time: 0.0222   lr: 0.0001  max_mem: 17953M
[09/02 21:23:26] d2.utils.events INFO:  eta: 0:02:50  iter: 759  total_loss: 20.45  loss_ce: 0.5527  loss_mask: 0.1709  loss_dice: 1.191  loss_ce_0: 0.6364  loss_mask_0: 0.1961  loss_dice_0: 1.436  loss_ce_1: 0.7171  loss_mask_1: 0.1852  loss_dice_1: 1.385  loss_ce_2: 0.6245  loss_mask_2: 0.1777  loss_dice_2: 1.29  loss_ce_3: 0.5778  loss_mask_3: 0.1778  loss_dice_3: 1.266  loss_ce_4: 0.5953  loss_mask_4: 0.1719  loss_dice_4: 1.25  loss_ce_5: 0.5745  loss_mask_5: 0.171  loss_dice_5: 1.244  loss_ce_6: 0.5564  loss_mask_6: 0.1715  loss_dice_6: 1.212  loss_ce_7: 0.5334  loss_mask_7: 0.1722  loss_dice_7: 1.225  loss_ce_8: 0.5173  loss_mask_8: 0.1689  loss_dice_8: 1.212    time: 0.7080  last_time: 0.7199  data_time: 0.0339  last_data_time: 0.0225   lr: 0.0001  max_mem: 17953M
[09/02 21:23:40] d2.utils.events INFO:  eta: 0:02:36  iter: 779  total_loss: 20.02  loss_ce: 0.55  loss_mask: 0.1543  loss_dice: 1.157  loss_ce_0: 0.662  loss_mask_0: 0.1813  loss_dice_0: 1.386  loss_ce_1: 0.7127  loss_mask_1: 0.166  loss_dice_1: 1.357  loss_ce_2: 0.6374  loss_mask_2: 0.1578  loss_dice_2: 1.237  loss_ce_3: 0.5915  loss_mask_3: 0.1601  loss_dice_3: 1.215  loss_ce_4: 0.5721  loss_mask_4: 0.1582  loss_dice_4: 1.195  loss_ce_5: 0.5712  loss_mask_5: 0.1547  loss_dice_5: 1.217  loss_ce_6: 0.5413  loss_mask_6: 0.1539  loss_dice_6: 1.172  loss_ce_7: 0.5515  loss_mask_7: 0.1538  loss_dice_7: 1.21  loss_ce_8: 0.5259  loss_mask_8: 0.1552  loss_dice_8: 1.193    time: 0.7077  last_time: 0.6411  data_time: 0.0286  last_data_time: 0.0295   lr: 0.0001  max_mem: 17953M
[09/02 21:23:54] d2.utils.events INFO:  eta: 0:02:21  iter: 799  total_loss: 19.46  loss_ce: 0.5245  loss_mask: 0.1539  loss_dice: 1.176  loss_ce_0: 0.5943  loss_mask_0: 0.1794  loss_dice_0: 1.346  loss_ce_1: 0.6809  loss_mask_1: 0.1626  loss_dice_1: 1.319  loss_ce_2: 0.6089  loss_mask_2: 0.1588  loss_dice_2: 1.24  loss_ce_3: 0.555  loss_mask_3: 0.16  loss_dice_3: 1.203  loss_ce_4: 0.5349  loss_mask_4: 0.1522  loss_dice_4: 1.195  loss_ce_5: 0.5343  loss_mask_5: 0.1491  loss_dice_5: 1.201  loss_ce_6: 0.5204  loss_mask_6: 0.1488  loss_dice_6: 1.192  loss_ce_7: 0.5173  loss_mask_7: 0.1508  loss_dice_7: 1.17  loss_ce_8: 0.5181  loss_mask_8: 0.1527  loss_dice_8: 1.162    time: 0.7072  last_time: 0.7572  data_time: 0.0270  last_data_time: 0.0279   lr: 0.0001  max_mem: 17953M
[09/02 21:24:08] d2.utils.events INFO:  eta: 0:02:07  iter: 819  total_loss: 19.38  loss_ce: 0.5262  loss_mask: 0.158  loss_dice: 1.176  loss_ce_0: 0.6235  loss_mask_0: 0.1864  loss_dice_0: 1.39  loss_ce_1: 0.6799  loss_mask_1: 0.172  loss_dice_1: 1.325  loss_ce_2: 0.6405  loss_mask_2: 0.1639  loss_dice_2: 1.263  loss_ce_3: 0.5522  loss_mask_3: 0.1589  loss_dice_3: 1.171  loss_ce_4: 0.583  loss_mask_4: 0.1583  loss_dice_4: 1.188  loss_ce_5: 0.527  loss_mask_5: 0.1564  loss_dice_5: 1.191  loss_ce_6: 0.5257  loss_mask_6: 0.159  loss_dice_6: 1.196  loss_ce_7: 0.5294  loss_mask_7: 0.1589  loss_dice_7: 1.169  loss_ce_8: 0.5348  loss_mask_8: 0.1597  loss_dice_8: 1.175    time: 0.7076  last_time: 0.7236  data_time: 0.0402  last_data_time: 0.0565   lr: 0.0001  max_mem: 17953M
[09/02 21:24:22] d2.utils.events INFO:  eta: 0:01:53  iter: 839  total_loss: 19.38  loss_ce: 0.509  loss_mask: 0.1493  loss_dice: 1.131  loss_ce_0: 0.616  loss_mask_0: 0.1804  loss_dice_0: 1.35  loss_ce_1: 0.6753  loss_mask_1: 0.1698  loss_dice_1: 1.271  loss_ce_2: 0.6336  loss_mask_2: 0.1572  loss_dice_2: 1.23  loss_ce_3: 0.5515  loss_mask_3: 0.1529  loss_dice_3: 1.176  loss_ce_4: 0.5648  loss_mask_4: 0.1565  loss_dice_4: 1.171  loss_ce_5: 0.53  loss_mask_5: 0.1517  loss_dice_5: 1.156  loss_ce_6: 0.5129  loss_mask_6: 0.1525  loss_dice_6: 1.139  loss_ce_7: 0.5328  loss_mask_7: 0.1487  loss_dice_7: 1.124  loss_ce_8: 0.5196  loss_mask_8: 0.1479  loss_dice_8: 1.184    time: 0.7075  last_time: 0.7305  data_time: 0.0318  last_data_time: 0.0643   lr: 0.0001  max_mem: 17953M
[09/02 21:24:37] d2.utils.events INFO:  eta: 0:01:39  iter: 859  total_loss: 19.79  loss_ce: 0.5119  loss_mask: 0.1535  loss_dice: 1.159  loss_ce_0: 0.596  loss_mask_0: 0.1665  loss_dice_0: 1.378  loss_ce_1: 0.6947  loss_mask_1: 0.1636  loss_dice_1: 1.293  loss_ce_2: 0.5955  loss_mask_2: 0.1518  loss_dice_2: 1.274  loss_ce_3: 0.5861  loss_mask_3: 0.1516  loss_dice_3: 1.25  loss_ce_4: 0.5773  loss_mask_4: 0.1512  loss_dice_4: 1.188  loss_ce_5: 0.5257  loss_mask_5: 0.151  loss_dice_5: 1.17  loss_ce_6: 0.5398  loss_mask_6: 0.1489  loss_dice_6: 1.168  loss_ce_7: 0.5521  loss_mask_7: 0.1511  loss_dice_7: 1.18  loss_ce_8: 0.5282  loss_mask_8: 0.1505  loss_dice_8: 1.177    time: 0.7076  last_time: 0.6573  data_time: 0.0369  last_data_time: 0.0263   lr: 0.0001  max_mem: 17953M
[09/02 21:24:51] d2.utils.events INFO:  eta: 0:01:25  iter: 879  total_loss: 19.35  loss_ce: 0.5233  loss_mask: 0.1569  loss_dice: 1.173  loss_ce_0: 0.6218  loss_mask_0: 0.1752  loss_dice_0: 1.326  loss_ce_1: 0.6779  loss_mask_1: 0.1672  loss_dice_1: 1.287  loss_ce_2: 0.6005  loss_mask_2: 0.1631  loss_dice_2: 1.268  loss_ce_3: 0.5045  loss_mask_3: 0.1593  loss_dice_3: 1.189  loss_ce_4: 0.5115  loss_mask_4: 0.1604  loss_dice_4: 1.209  loss_ce_5: 0.5024  loss_mask_5: 0.1609  loss_dice_5: 1.196  loss_ce_6: 0.4874  loss_mask_6: 0.1566  loss_dice_6: 1.175  loss_ce_7: 0.4871  loss_mask_7: 0.1574  loss_dice_7: 1.191  loss_ce_8: 0.4851  loss_mask_8: 0.1569  loss_dice_8: 1.196    time: 0.7078  last_time: 0.7888  data_time: 0.0305  last_data_time: 0.0259   lr: 0.0001  max_mem: 17953M
[09/02 21:25:05] d2.utils.events INFO:  eta: 0:01:11  iter: 899  total_loss: 19.27  loss_ce: 0.5231  loss_mask: 0.1425  loss_dice: 1.173  loss_ce_0: 0.6475  loss_mask_0: 0.1721  loss_dice_0: 1.372  loss_ce_1: 0.6905  loss_mask_1: 0.1598  loss_dice_1: 1.28  loss_ce_2: 0.5925  loss_mask_2: 0.1583  loss_dice_2: 1.263  loss_ce_3: 0.5703  loss_mask_3: 0.15  loss_dice_3: 1.227  loss_ce_4: 0.5349  loss_mask_4: 0.1463  loss_dice_4: 1.198  loss_ce_5: 0.5205  loss_mask_5: 0.1451  loss_dice_5: 1.198  loss_ce_6: 0.4954  loss_mask_6: 0.1436  loss_dice_6: 1.213  loss_ce_7: 0.5265  loss_mask_7: 0.143  loss_dice_7: 1.174  loss_ce_8: 0.5143  loss_mask_8: 0.1425  loss_dice_8: 1.171    time: 0.7079  last_time: 0.7411  data_time: 0.0341  last_data_time: 0.0266   lr: 0.0001  max_mem: 17953M
[09/02 21:25:20] d2.utils.events INFO:  eta: 0:00:56  iter: 919  total_loss: 19.59  loss_ce: 0.5308  loss_mask: 0.1531  loss_dice: 1.153  loss_ce_0: 0.6322  loss_mask_0: 0.1779  loss_dice_0: 1.336  loss_ce_1: 0.6285  loss_mask_1: 0.1646  loss_dice_1: 1.278  loss_ce_2: 0.625  loss_mask_2: 0.1628  loss_dice_2: 1.221  loss_ce_3: 0.5525  loss_mask_3: 0.1565  loss_dice_3: 1.166  loss_ce_4: 0.5303  loss_mask_4: 0.1519  loss_dice_4: 1.174  loss_ce_5: 0.4911  loss_mask_5: 0.153  loss_dice_5: 1.194  loss_ce_6: 0.4905  loss_mask_6: 0.1504  loss_dice_6: 1.177  loss_ce_7: 0.5058  loss_mask_7: 0.1531  loss_dice_7: 1.151  loss_ce_8: 0.5059  loss_mask_8: 0.154  loss_dice_8: 1.18    time: 0.7079  last_time: 0.7136  data_time: 0.0338  last_data_time: 0.0256   lr: 0.0001  max_mem: 17953M
[09/02 21:25:34] d2.utils.events INFO:  eta: 0:00:42  iter: 939  total_loss: 19.25  loss_ce: 0.4876  loss_mask: 0.1617  loss_dice: 1.164  loss_ce_0: 0.595  loss_mask_0: 0.1798  loss_dice_0: 1.356  loss_ce_1: 0.6377  loss_mask_1: 0.1712  loss_dice_1: 1.27  loss_ce_2: 0.5934  loss_mask_2: 0.1717  loss_dice_2: 1.234  loss_ce_3: 0.5339  loss_mask_3: 0.1645  loss_dice_3: 1.179  loss_ce_4: 0.5019  loss_mask_4: 0.1677  loss_dice_4: 1.19  loss_ce_5: 0.4922  loss_mask_5: 0.1611  loss_dice_5: 1.143  loss_ce_6: 0.4931  loss_mask_6: 0.1627  loss_dice_6: 1.14  loss_ce_7: 0.4767  loss_mask_7: 0.1659  loss_dice_7: 1.173  loss_ce_8: 0.5033  loss_mask_8: 0.1621  loss_dice_8: 1.176    time: 0.7083  last_time: 0.7378  data_time: 0.0294  last_data_time: 0.0281   lr: 0.0001  max_mem: 17953M
[09/02 21:25:48] d2.utils.events INFO:  eta: 0:00:28  iter: 959  total_loss: 18.7  loss_ce: 0.4972  loss_mask: 0.1515  loss_dice: 1.122  loss_ce_0: 0.586  loss_mask_0: 0.176  loss_dice_0: 1.351  loss_ce_1: 0.6313  loss_mask_1: 0.1691  loss_dice_1: 1.272  loss_ce_2: 0.5637  loss_mask_2: 0.1656  loss_dice_2: 1.184  loss_ce_3: 0.5036  loss_mask_3: 0.165  loss_dice_3: 1.164  loss_ce_4: 0.4879  loss_mask_4: 0.1644  loss_dice_4: 1.167  loss_ce_5: 0.4869  loss_mask_5: 0.1553  loss_dice_5: 1.153  loss_ce_6: 0.4761  loss_mask_6: 0.1553  loss_dice_6: 1.161  loss_ce_7: 0.4735  loss_mask_7: 0.1537  loss_dice_7: 1.114  loss_ce_8: 0.4599  loss_mask_8: 0.1534  loss_dice_8: 1.159    time: 0.7082  last_time: 0.5946  data_time: 0.0358  last_data_time: 0.0220   lr: 0.0001  max_mem: 17953M
[09/02 21:26:03] d2.utils.events INFO:  eta: 0:00:14  iter: 979  total_loss: 19.71  loss_ce: 0.5025  loss_mask: 0.1523  loss_dice: 1.199  loss_ce_0: 0.6299  loss_mask_0: 0.1811  loss_dice_0: 1.416  loss_ce_1: 0.6542  loss_mask_1: 0.1592  loss_dice_1: 1.299  loss_ce_2: 0.5845  loss_mask_2: 0.1562  loss_dice_2: 1.274  loss_ce_3: 0.5458  loss_mask_3: 0.1567  loss_dice_3: 1.246  loss_ce_4: 0.5558  loss_mask_4: 0.1514  loss_dice_4: 1.195  loss_ce_5: 0.5155  loss_mask_5: 0.1521  loss_dice_5: 1.187  loss_ce_6: 0.5151  loss_mask_6: 0.1498  loss_dice_6: 1.156  loss_ce_7: 0.5181  loss_mask_7: 0.1504  loss_dice_7: 1.162  loss_ce_8: 0.5054  loss_mask_8: 0.1493  loss_dice_8: 1.164    time: 0.7084  last_time: 0.7334  data_time: 0.0320  last_data_time: 0.0279   lr: 0.0001  max_mem: 17953M
[09/02 21:26:17] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/In_vocab/cl_008_1000_19/model_final.pth
[09/02 21:26:23] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 19.97  loss_ce: 0.5016  loss_mask: 0.1642  loss_dice: 1.178  loss_ce_0: 0.6199  loss_mask_0: 0.1889  loss_dice_0: 1.396  loss_ce_1: 0.6815  loss_mask_1: 0.1789  loss_dice_1: 1.324  loss_ce_2: 0.6135  loss_mask_2: 0.1672  loss_dice_2: 1.26  loss_ce_3: 0.5648  loss_mask_3: 0.1707  loss_dice_3: 1.217  loss_ce_4: 0.5433  loss_mask_4: 0.1654  loss_dice_4: 1.24  loss_ce_5: 0.5453  loss_mask_5: 0.1658  loss_dice_5: 1.214  loss_ce_6: 0.5464  loss_mask_6: 0.1665  loss_dice_6: 1.203  loss_ce_7: 0.4948  loss_mask_7: 0.1631  loss_dice_7: 1.21  loss_ce_8: 0.513  loss_mask_8: 0.1603  loss_dice_8: 1.21    time: 0.7084  last_time: 0.7158  data_time: 0.0319  last_data_time: 0.0284   lr: 0.0001  max_mem: 17953M
[09/02 21:26:23] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:11:47 (0.7084 s / it)
[09/02 21:26:23] d2.engine.hooks INFO: Total training time: 0:11:55 (0:00:08 on hooks)
[09/02 21:26:23] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[09/02 21:26:23] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[09/02 21:26:23] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[09/02 21:26:23] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[09/02 21:26:23] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[09/02 21:26:23] d2.evaluation.evaluator INFO: Start inference on 250 batches
[09/02 21:26:32] d2.evaluation.evaluator INFO: Inference done 11/250. Dataloading: 0.0027 s/iter. Inference: 0.3337 s/iter. Eval: 0.0785 s/iter. Total: 0.4148 s/iter. ETA=0:01:39
[09/02 21:26:37] d2.evaluation.evaluator INFO: Inference done 23/250. Dataloading: 0.0031 s/iter. Inference: 0.3512 s/iter. Eval: 0.0714 s/iter. Total: 0.4257 s/iter. ETA=0:01:36
[09/02 21:26:42] d2.evaluation.evaluator INFO: Inference done 35/250. Dataloading: 0.0033 s/iter. Inference: 0.3555 s/iter. Eval: 0.0710 s/iter. Total: 0.4298 s/iter. ETA=0:01:32
[09/02 21:26:47] d2.evaluation.evaluator INFO: Inference done 48/250. Dataloading: 0.0033 s/iter. Inference: 0.3519 s/iter. Eval: 0.0687 s/iter. Total: 0.4239 s/iter. ETA=0:01:25
[09/02 21:26:53] d2.evaluation.evaluator INFO: Inference done 60/250. Dataloading: 0.0033 s/iter. Inference: 0.3519 s/iter. Eval: 0.0700 s/iter. Total: 0.4254 s/iter. ETA=0:01:20
[09/02 21:26:58] d2.evaluation.evaluator INFO: Inference done 73/250. Dataloading: 0.0033 s/iter. Inference: 0.3512 s/iter. Eval: 0.0683 s/iter. Total: 0.4229 s/iter. ETA=0:01:14
[09/02 21:27:03] d2.evaluation.evaluator INFO: Inference done 85/250. Dataloading: 0.0033 s/iter. Inference: 0.3509 s/iter. Eval: 0.0681 s/iter. Total: 0.4224 s/iter. ETA=0:01:09
[09/02 21:27:08] d2.evaluation.evaluator INFO: Inference done 97/250. Dataloading: 0.0033 s/iter. Inference: 0.3517 s/iter. Eval: 0.0684 s/iter. Total: 0.4235 s/iter. ETA=0:01:04
[09/02 21:27:13] d2.evaluation.evaluator INFO: Inference done 108/250. Dataloading: 0.0034 s/iter. Inference: 0.3537 s/iter. Eval: 0.0707 s/iter. Total: 0.4279 s/iter. ETA=0:01:00
[09/02 21:27:18] d2.evaluation.evaluator INFO: Inference done 120/250. Dataloading: 0.0033 s/iter. Inference: 0.3559 s/iter. Eval: 0.0695 s/iter. Total: 0.4288 s/iter. ETA=0:00:55
[09/02 21:27:24] d2.evaluation.evaluator INFO: Inference done 131/250. Dataloading: 0.0034 s/iter. Inference: 0.3582 s/iter. Eval: 0.0696 s/iter. Total: 0.4313 s/iter. ETA=0:00:51
[09/02 21:27:29] d2.evaluation.evaluator INFO: Inference done 143/250. Dataloading: 0.0034 s/iter. Inference: 0.3578 s/iter. Eval: 0.0705 s/iter. Total: 0.4318 s/iter. ETA=0:00:46
[09/02 21:27:34] d2.evaluation.evaluator INFO: Inference done 155/250. Dataloading: 0.0034 s/iter. Inference: 0.3569 s/iter. Eval: 0.0709 s/iter. Total: 0.4313 s/iter. ETA=0:00:40
[09/02 21:27:39] d2.evaluation.evaluator INFO: Inference done 167/250. Dataloading: 0.0034 s/iter. Inference: 0.3555 s/iter. Eval: 0.0719 s/iter. Total: 0.4308 s/iter. ETA=0:00:35
[09/02 21:27:44] d2.evaluation.evaluator INFO: Inference done 180/250. Dataloading: 0.0034 s/iter. Inference: 0.3548 s/iter. Eval: 0.0713 s/iter. Total: 0.4296 s/iter. ETA=0:00:30
[09/02 21:27:50] d2.evaluation.evaluator INFO: Inference done 193/250. Dataloading: 0.0034 s/iter. Inference: 0.3534 s/iter. Eval: 0.0718 s/iter. Total: 0.4287 s/iter. ETA=0:00:24
[09/02 21:27:55] d2.evaluation.evaluator INFO: Inference done 205/250. Dataloading: 0.0034 s/iter. Inference: 0.3533 s/iter. Eval: 0.0716 s/iter. Total: 0.4284 s/iter. ETA=0:00:19
[09/02 21:28:00] d2.evaluation.evaluator INFO: Inference done 216/250. Dataloading: 0.0034 s/iter. Inference: 0.3551 s/iter. Eval: 0.0729 s/iter. Total: 0.4316 s/iter. ETA=0:00:14
[09/02 21:28:05] d2.evaluation.evaluator INFO: Inference done 228/250. Dataloading: 0.0034 s/iter. Inference: 0.3554 s/iter. Eval: 0.0730 s/iter. Total: 0.4319 s/iter. ETA=0:00:09
[09/02 21:28:11] d2.evaluation.evaluator INFO: Inference done 240/250. Dataloading: 0.0034 s/iter. Inference: 0.3564 s/iter. Eval: 0.0725 s/iter. Total: 0.4323 s/iter. ETA=0:00:04
[09/02 21:28:16] d2.evaluation.evaluator INFO: Total inference time: 0:01:46.341925 (0.434049 s / iter per device, on 2 devices)
[09/02 21:28:16] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:01:27 (0.356639 s / iter per device, on 2 devices)
[09/02 21:28:16] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_evalcceza6ov ...
[09/02 21:29:23] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 59.612 | 80.892 | 72.567 |      19       |
| Things | 53.319 | 80.271 | 65.905 |       8       |
| Stuff  | 64.189 | 81.344 | 77.412 |      11       |
[09/02 21:29:23] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 97.120 | 97.524 | 99.586 |     Stuff     |
| class_8  | 68.731 | 83.473 | 82.339 |     Stuff     |
| class_11 | 84.788 | 88.685 | 95.607 |     Stuff     |
| class_12 | 44.395 | 79.120 | 56.111 |     Stuff     |
| class_13 | 41.866 | 75.522 | 55.435 |     Stuff     |
| class_17 | 53.120 | 64.887 | 81.865 |     Stuff     |
| class_19 | 40.257 | 69.299 | 58.091 |     Stuff     |
| class_20 | 65.801 | 77.241 | 85.189 |     Stuff     |
| class_21 | 88.943 | 90.147 | 98.664 |     Stuff     |
| class_22 | 33.239 | 76.788 | 43.287 |     Stuff     |
| class_23 | 87.819 | 92.095 | 95.357 |     Stuff     |
| class_24 | 47.292 | 77.321 | 61.163 |    Things     |
| class_25 | 45.557 | 74.161 | 61.430 |    Things     |
| class_26 | 63.578 | 83.772 | 75.895 |    Things     |
| class_27 | 53.083 | 85.239 | 62.275 |    Things     |
| class_28 | 71.234 | 90.122 | 79.042 |    Things     |
| class_31 | 61.294 | 83.769 | 73.171 |    Things     |
| class_32 | 44.900 | 75.902 | 59.155 |    Things     |
| class_33 | 39.614 | 71.883 | 55.109 |    Things     |
[09/02 21:29:23] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[09/02 21:29:23] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[09/02 21:29:23] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[09/02 21:29:23] d2.evaluation.testing INFO: copypaste: 59.6122,80.8921,72.5669,53.3190,80.2709,65.9050,64.1891,81.3439,77.4119,97.1205,97.5243,99.5859,68.7313,83.4734,82.3392,84.7885,88.6846,95.6067,44.3954,79.1205,56.1111,41.8656,75.5222,55.4348,53.1196,64.8866,81.8653,40.2567,69.2991,58.0913,65.8011,77.2411,85.1892,88.9428,90.1473,98.6639,33.2391,76.7885,43.2866,87.8192,92.0954,95.3567,47.2916,77.3210,61.1627,45.5573,74.1610,61.4302,63.5785,83.7717,75.8949,53.0827,85.2386,62.2754,71.2343,90.1222,79.0419,61.2942,83.7687,73.1707,44.8995,75.9016,59.1549,39.6139,71.8826,55.1092
