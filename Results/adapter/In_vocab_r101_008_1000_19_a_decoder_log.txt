[10/10 16:55:26] detectron2 INFO: Rank of current process: 0. World size: 1
[10/10 16:55:27] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA A100-PCIE-40GB (arch=8.0)
Driver version                   535.113.01
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/10 16:55:27] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_exp_1000_a_decoder.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[10/10 16:55:27] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_exp_1000_a_decoder.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19_a_decoder
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/10 16:55:27] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19_a_decoder
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/10 16:55:27] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19_a_decoder/config.yaml
[10/10 16:55:27] d2.utils.env INFO: Using a generated random seed 30185092
[10/10 16:55:33] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (conv1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (conv2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU()
  (mask_pooling): MaskPooling()
  (decoder_adapter): DecoderAdapter(
    (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
    (conv2): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
    (norm1): LayerNorm((64, 1, 1), eps=1e-05, elementwise_affine=True)
    (norm2): LayerNorm((256, 1, 1), eps=1e-05, elementwise_affine=True)
    (relu): ReLU()
  )
  (void_embedding): Embedding(1, 512)
)
[10/10 16:55:33] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/10 16:55:34] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/10 16:55:34] d2.data.build INFO: Using training sampler TrainingSampler
[10/10 16:55:34] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/10 16:55:34] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/10 16:55:34] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/10 16:55:34] d2.data.build INFO: Making batched data loader with batch_size=8
[10/10 16:55:34] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/10 16:55:34] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[10/10 16:55:34] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[10/10 16:55:36] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[10/10 16:55:36] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.10.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.11.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.12.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.13.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.14.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.15.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.16.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.17.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.18.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.19.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.20.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.21.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.22.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.6.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.7.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.8.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.9.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mbn1.{bias, running_mean, running_var, weight}[0m
[34mbn2.{bias, running_mean, running_var, weight}[0m
[34mconv1.{bias, weight}[0m
[34mconv2.{bias, weight}[0m
[34mcriterion.empty_weight[0m
[34mdecoder_adapter.conv1.{bias, weight}[0m
[34mdecoder_adapter.conv2.{bias, weight}[0m
[34mdecoder_adapter.norm1.{bias, weight}[0m
[34mdecoder_adapter.norm2.{bias, weight}[0m
[10/10 16:55:36] d2.engine.train_loop INFO: Starting training from iteration 0
[10/10 16:56:03] d2.utils.events INFO:  eta: 0:17:57  iter: 19  total_loss: 31.97  loss_ce: 1.172  loss_mask: 0.2844  loss_dice: 1.504  loss_ce_0: 1.37  loss_mask_0: 0.3089  loss_dice_0: 1.822  loss_ce_1: 1.421  loss_mask_1: 0.3074  loss_dice_1: 1.649  loss_ce_2: 1.322  loss_mask_2: 0.2978  loss_dice_2: 1.559  loss_ce_3: 1.263  loss_mask_3: 0.2906  loss_dice_3: 1.527  loss_ce_4: 1.188  loss_mask_4: 0.2916  loss_dice_4: 1.544  loss_ce_5: 1.2  loss_mask_5: 0.2803  loss_dice_5: 1.534  loss_ce_6: 1.212  loss_mask_6: 0.2827  loss_dice_6: 1.493  loss_ce_7: 1.226  loss_mask_7: 0.284  loss_dice_7: 1.498  loss_ce_8: 1.182  loss_mask_8: 0.2863  loss_dice_8: 1.507    time: 1.1051  last_time: 1.0999  data_time: 0.0858  last_data_time: 0.0522   lr: 0.0001  max_mem: 30827M
[10/10 16:56:26] d2.utils.events INFO:  eta: 0:17:38  iter: 39  total_loss: 25.07  loss_ce: 0.744  loss_mask: 0.2391  loss_dice: 1.369  loss_ce_0: 0.8749  loss_mask_0: 0.2715  loss_dice_0: 1.712  loss_ce_1: 0.9263  loss_mask_1: 0.2701  loss_dice_1: 1.571  loss_ce_2: 0.8565  loss_mask_2: 0.2517  loss_dice_2: 1.449  loss_ce_3: 0.801  loss_mask_3: 0.245  loss_dice_3: 1.441  loss_ce_4: 0.7595  loss_mask_4: 0.2465  loss_dice_4: 1.421  loss_ce_5: 0.776  loss_mask_5: 0.2425  loss_dice_5: 1.414  loss_ce_6: 0.792  loss_mask_6: 0.2383  loss_dice_6: 1.383  loss_ce_7: 0.7457  loss_mask_7: 0.2429  loss_dice_7: 1.367  loss_ce_8: 0.7756  loss_mask_8: 0.24  loss_dice_8: 1.395    time: 1.1061  last_time: 1.1314  data_time: 0.0484  last_data_time: 0.0518   lr: 0.0001  max_mem: 31500M
[10/10 16:56:37] d2.engine.hooks INFO: Overall training speed: 48 iterations in 0:00:53 (1.1132 s / it)
[10/10 16:56:37] d2.engine.hooks INFO: Total training time: 0:00:53 (0:00:00 on hooks)
[10/10 16:56:37] d2.utils.events INFO:  eta: 0:17:28  iter: 50  total_loss: 24.12  loss_ce: 0.6769  loss_mask: 0.2248  loss_dice: 1.346  loss_ce_0: 0.78  loss_mask_0: 0.2559  loss_dice_0: 1.664  loss_ce_1: 0.7892  loss_mask_1: 0.253  loss_dice_1: 1.548  loss_ce_2: 0.7561  loss_mask_2: 0.2319  loss_dice_2: 1.445  loss_ce_3: 0.7147  loss_mask_3: 0.2248  loss_dice_3: 1.421  loss_ce_4: 0.7133  loss_mask_4: 0.226  loss_dice_4: 1.411  loss_ce_5: 0.6951  loss_mask_5: 0.2247  loss_dice_5: 1.414  loss_ce_6: 0.7084  loss_mask_6: 0.2245  loss_dice_6: 1.381  loss_ce_7: 0.7003  loss_mask_7: 0.2239  loss_dice_7: 1.37  loss_ce_8: 0.6589  loss_mask_8: 0.227  loss_dice_8: 1.395    time: 1.1113  last_time: 1.0879  data_time: 0.0474  last_data_time: 0.0442   lr: 0.0001  max_mem: 32031M
[10/10 18:39:44] detectron2 INFO: Rank of current process: 0. World size: 1
[10/10 18:39:45] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA A100-PCIE-40GB (arch=8.0)
Driver version                   535.113.01
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/10 18:39:45] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_exp_1000_a_decoder.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[10/10 18:39:45] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_exp_1000_a_decoder.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19_a_decoder
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/10 18:39:46] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19_a_decoder
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/10 18:39:46] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19_a_decoder/config.yaml
[10/10 18:39:46] d2.utils.env INFO: Using a generated random seed 48835722
[10/10 18:40:15] detectron2 INFO: Rank of current process: 0. World size: 1
[10/10 18:40:16] detectron2 INFO: Environment info:
-------------------------------  -------------------------------------------------------------------------------------------------------
sys.platform                     linux
Python                           3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]
numpy                            1.24.4
detectron2                       0.6 @/home/ids/gbrison/segmentation/segmentation/detectron2/detectron2
Compiler                         GCC 11.4
CUDA compiler                    CUDA 12.5
detectron2 arch flags            8.9
DETECTRON2_ENV_MODULE            <not set>
PyTorch                          2.4.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torch
PyTorch debug build              False
torch._C._GLIBCXX_USE_CXX11_ABI  False
GPU available                    Yes
GPU 0                            NVIDIA A100-PCIE-40GB (arch=8.0)
Driver version                   535.113.01
CUDA_HOME                        /usr/local/cuda
Pillow                           9.4.0
torchvision                      0.19.0+cu121 @/home/ids/gbrison/segmentation/miniconda3/envs/fc/lib/python3.8/site-packages/torchvision
torchvision arch flags           5.0, 6.0, 7.0, 7.5, 8.0, 8.6, 9.0
fvcore                           0.1.5.post20221221
iopath                           0.1.9
cv2                              4.10.0
-------------------------------  -------------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 90.1  (built against CUDA 12.4)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=9.1.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.0, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

[10/10 18:40:16] detectron2 INFO: Command line arguments: Namespace(config_file='configs/coco/panoptic-segmentation/fcclip/r101_exp_1000_a_decoder.yaml', dist_url='tcp://127.0.0.1:51163', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=[], resume=False)
[10/10 18:40:16] detectron2 INFO: Contents of args.config_file=configs/coco/panoptic-segmentation/fcclip/r101_exp_1000_a_decoder.yaml:
_BASE_: ./fcclip_convnext_large_eval_ade20k_r101.yaml

INPUT:
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TEST: 2560

MODEL:
  SEM_SEG_HEAD:
    NUM_CLASSES: 19
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19_a_decoder
DATASETS:
  TRAIN: ("openvocab_cityscapes_fine_panoptic_train",)
  TEST: ("openvocab_cityscapes_fine_panoptic_val",)
SOLVER:
  IMS_PER_BATCH: 8
  MAX_ITER: 1000
TEST:
  EVAL_PERIOD: 1000


[10/10 18:40:16] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_SQRT: true
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - openvocab_cityscapes_fine_panoptic_val
  TRAIN:
  - openvocab_cityscapes_fine_panoptic_train
GLOBAL:
  HACK: 1.0
INPUT:
  COLOR_AUG_SSD: false
  CROP:
    ENABLED: false
    MINIMUM_INST_AREA: 1
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  DATASET_MAPPER_NAME: coco_panoptic_lsj
  FORMAT: RGB
  IMAGE_SIZE: 1024
  MASK_FORMAT: polygon
  MAX_SCALE: 2.0
  MAX_SIZE_TEST: 2560
  MAX_SIZE_TRAIN: 1333
  MIN_SCALE: 0.1
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN:
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SIZE_DIVISIBILITY: -1
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: CLIP
  DEVICE: cuda
  FC_CLIP:
    CLIP_MODEL_NAME: RN101
    CLIP_PRETRAINED_WEIGHTS: openai
    EMBED_DIM: 512
    ENSEMBLE_ON_VALID_MASK: true
    GEOMETRIC_ENSEMBLE_ALPHA: 0.4
    GEOMETRIC_ENSEMBLE_BETA: 0.8
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_FORMER:
    CLASS_WEIGHT: 2.0
    DEC_LAYERS: 10
    DEEP_SUPERVISION: true
    DICE_WEIGHT: 5.0
    DIM_FEEDFORWARD: 2048
    DROPOUT: 0.0
    ENC_LAYERS: 0
    ENFORCE_INPUT_PROJ: false
    HIDDEN_DIM: 256
    IMPORTANCE_SAMPLE_RATIO: 0.75
    MASK_WEIGHT: 5.0
    NHEADS: 8
    NO_OBJECT_WEIGHT: 0.1
    NUM_OBJECT_QUERIES: 250
    OVERSAMPLE_RATIO: 3.0
    PRE_NORM: false
    SIZE_DIVISIBILITY: 32
    TEST:
      INSTANCE_ON: true
      OBJECT_MASK_THRESHOLD: 0.0
      OVERLAP_THRESHOLD: 0.8
      PANOPTIC_ON: true
      SEMANTIC_ON: true
      SEM_SEG_POSTPROCESSING_BEFORE_INFERENCE: false
    TRAIN_NUM_POINTS: 12544
    TRANSFORMER_DECODER_NAME: MultiScaleMaskedTransformerDecoder
    TRANSFORMER_IN_FEATURE: multi_scale_pixel_decoder
  MASK_ON: false
  META_ARCHITECTURE: FCCLIP
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 122.7709383
  - 116.7460125
  - 104.09373615
  PIXEL_STD:
  - 68.5005327
  - 66.6321579
  - 70.32316305
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: FrozenBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 1
    RES5_MULTI_GRID:
    - 1
    - 1
    - 1
    STEM_OUT_CHANNELS: 64
    STEM_TYPE: basic
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    DEFORMABLE_TRANSFORMER_ENCODER_IN_FEATURES:
    - res3
    - res4
    - res5
    DEFORMABLE_TRANSFORMER_ENCODER_N_HEADS: 8
    DEFORMABLE_TRANSFORMER_ENCODER_N_POINTS: 4
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res4
    - res5
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    MASK_DIM: 256
    NAME: FCCLIPHead
    NORM: GN
    NUM_CLASSES: 19
    PIXEL_DECODER_NAME: MSDeformAttnPixelDecoder
    PROJECT_CHANNELS:
    - 48
    PROJECT_FEATURES:
    - res2
    TRANSFORMER_ENC_LAYERS: 6
    USE_DEPTHWISE_SEPARABLE_CONV: false
  SWIN:
    APE: false
    ATTN_DROP_RATE: 0.0
    DEPTHS:
    - 2
    - 2
    - 6
    - 2
    DROP_PATH_RATE: 0.3
    DROP_RATE: 0.0
    EMBED_DIM: 96
    MLP_RATIO: 4.0
    NUM_HEADS:
    - 3
    - 6
    - 12
    - 24
    OUT_FEATURES:
    - res2
    - res3
    - res4
    - res5
    PATCH_NORM: true
    PATCH_SIZE: 4
    PRETRAIN_IMG_SIZE: 224
    QKV_BIAS: true
    QK_SCALE: null
    USE_CHECKPOINT: false
    WINDOW_SIZE: 7
  WEIGHTS: /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth
OUTPUT_DIR: /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19_a_decoder
SEED: -1
SOLVER:
  AMP:
    ENABLED: true
  BACKBONE_MULTIPLIER: 0.1
  BASE_LR: 0.0001
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: full_model
    CLIP_VALUE: 0.01
    ENABLED: true
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 8
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 1000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAMW
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 327778
  - 355092
  WARMUP_FACTOR: 1.0
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.05
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_EMBED: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 1000
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[10/10 18:40:16] detectron2 INFO: Full config saved to /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19_a_decoder/config.yaml
[10/10 18:40:16] d2.utils.env INFO: Using a generated random seed 19511322
[10/10 18:40:22] d2.engine.defaults INFO: Model:
FCCLIP(
  (backbone): CLIP(
    (clip_model): CLIP(
      (visual): ModifiedResNet(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (act3): ReLU(inplace=True)
        (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
        (layer1): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=1, stride=1, padding=0)
              (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer2): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer3): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (3): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (4): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (5): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (6): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (7): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (8): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (9): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (10): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (11): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (12): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (13): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (14): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (15): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (16): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (17): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (18): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (19): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (20): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (21): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (22): Bottleneck(
            (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (layer4): Sequential(
          (0): Bottleneck(
            (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
            (downsample): Sequential(
              (-1): AvgPool2d(kernel_size=2, stride=2, padding=0)
              (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
          (2): Bottleneck(
            (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act1): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act2): ReLU(inplace=True)
            (avgpool): Identity()
            (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act3): ReLU(inplace=True)
          )
        )
        (attnpool): AttentionPool2d(
          (k_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (q_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (v_proj): Linear(in_features=2048, out_features=2048, bias=True)
          (c_proj): Linear(in_features=2048, out_features=512, bias=True)
        )
      )
      (transformer): Transformer(
        (resblocks): ModuleList(
          (0-11): 12 x ResidualAttentionBlock(
            (ln_1): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
            )
            (ls_1): Identity()
            (ln_2): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=512, out_features=2048, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=2048, out_features=512, bias=True)
            )
            (ls_2): Identity()
          )
        )
      )
      (token_embedding): Embedding(49408, 512)
      (ln_final): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
    )
  )
  (sem_seg_head): FCCLIPHead(
    (pixel_decoder): MSDeformAttnPixelDecoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (transformer): MSDeformAttnTransformerEncoderOnly(
        (encoder): MSDeformAttnTransformerEncoder(
          (layers): ModuleList(
            (0-5): 6 x MSDeformAttnTransformerEncoderLayer(
              (self_attn): MSDeformAttn(
                (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
                (attention_weights): Linear(in_features=256, out_features=96, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (dropout1): Dropout(p=0.0, inplace=False)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout2): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (dropout3): Dropout(p=0.0, inplace=False)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (mask_features): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      (adapter_1): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
      (layer_1): Conv2d(
        256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    (predictor): MultiScaleMaskedTransformerDecoder(
      (pe_layer): Positional encoding PositionEmbeddingSine
          num_pos_feats: 128
          temperature: 10000
          normalize: True
          scale: 6.283185307179586
      (transformer_self_attention_layers): ModuleList(
        (0-8): 9 x SelfAttentionLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_cross_attention_layers): ModuleList(
        (0-8): 9 x CrossAttentionLayer(
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
          )
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (dropout): Dropout(p=0.0, inplace=False)
        )
      )
      (transformer_ffn_layers): ModuleList(
        (0-8): 9 x FFNLayer(
          (linear1): Linear(in_features=256, out_features=2048, bias=True)
          (dropout): Dropout(p=0.0, inplace=False)
          (linear2): Linear(in_features=2048, out_features=256, bias=True)
          (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
      (decoder_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (query_feat): Embedding(250, 256)
      (query_embed): Embedding(250, 256)
      (level_embed): Embedding(3, 256)
      (input_proj): ModuleList(
        (0-2): 3 x Sequential()
      )
      (mask_embed): MLP(
        (layers): ModuleList(
          (0-2): 3 x Linear(in_features=256, out_features=256, bias=True)
        )
      )
      (mask_pooling): MaskPooling()
      (_mask_pooling_proj): Sequential(
        (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (1): Linear(in_features=256, out_features=256, bias=True)
      )
      (class_embed): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=512, bias=True)
        )
      )
    )
  )
  (criterion): Criterion SetCriterion
      matcher: Matcher HungarianMatcher
          cost_class: 2.0
          cost_mask: 5.0
          cost_dice: 5.0
      losses: ['labels', 'masks']
      weight_dict: {'loss_ce': 2.0, 'loss_mask': 5.0, 'loss_dice': 5.0, 'loss_ce_0': 2.0, 'loss_mask_0': 5.0, 'loss_dice_0': 5.0, 'loss_ce_1': 2.0, 'loss_mask_1': 5.0, 'loss_dice_1': 5.0, 'loss_ce_2': 2.0, 'loss_mask_2': 5.0, 'loss_dice_2': 5.0, 'loss_ce_3': 2.0, 'loss_mask_3': 5.0, 'loss_dice_3': 5.0, 'loss_ce_4': 2.0, 'loss_mask_4': 5.0, 'loss_dice_4': 5.0, 'loss_ce_5': 2.0, 'loss_mask_5': 5.0, 'loss_dice_5': 5.0, 'loss_ce_6': 2.0, 'loss_mask_6': 5.0, 'loss_dice_6': 5.0, 'loss_ce_7': 2.0, 'loss_mask_7': 5.0, 'loss_dice_7': 5.0, 'loss_ce_8': 2.0, 'loss_mask_8': 5.0, 'loss_dice_8': 5.0}
      num_classes: 19
      eos_coef: 0.1
      num_points: 12544
      oversample_ratio: 3.0
      importance_sample_ratio: 0.75
  (conv1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (conv2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU()
  (mask_pooling): MaskPooling()
  (decoder_adapter): DecoderAdapter(
    (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
    (conv2): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
    (norm1): LayerNorm((64, 1, 1), eps=1e-05, elementwise_affine=True)
    (norm2): LayerNorm((256, 1, 1), eps=1e-05, elementwise_affine=True)
    (relu): ReLU()
  )
  (void_embedding): Embedding(1, 512)
)
[10/10 18:40:22] fcclip.data.dataset_mappers.mask_former_semantic_dataset_mapper INFO: [MaskFormerPanopticDatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(800,), max_size=1333, sample_style='choice'), RandomFlip()]
[10/10 18:40:22] fcclip.data.datasets.register_cityscapes_panoptic INFO: 18 cities found in 'datasets/cityscapes/leftImg8bit/train'.
[10/10 18:40:23] d2.data.build INFO: Using training sampler TrainingSampler
[10/10 18:40:23] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/10 18:40:23] d2.data.common INFO: Serializing 2975 elements to byte tensors and concatenating them all ...
[10/10 18:40:23] d2.data.common INFO: Serialized dataset takes 4.12 MiB
[10/10 18:40:23] d2.data.build INFO: Making batched data loader with batch_size=8
[10/10 18:40:23] d2.solver.build WARNING: SOLVER.STEPS contains values larger than SOLVER.MAX_ITER. These values will be ignored.
[10/10 18:40:23] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[10/10 18:40:23] fvcore.common.checkpoint INFO: [Checkpointer] Loading from /tsi/hi-paris/GB/segmentation/models/fcclip_cocopan_r101.pth ...
[10/10 18:40:23] fvcore.common.checkpoint WARNING: Skip loading parameter 'criterion.empty_weight' to the model due to incompatible shapes: (134,) in the checkpoint but (20,) in the model! You might want to double check if this is expected.
[10/10 18:40:23] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mbackbone.clip_model.ln_final.{bias, weight}[0m
[34mbackbone.clip_model.token_embedding.weight[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.0.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.1.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.10.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.11.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.2.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.3.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.4.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.5.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.6.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.7.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.8.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.out_proj.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.attn.{in_proj_bias, in_proj_weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_1.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.ln_2.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_fc.{bias, weight}[0m
[34mbackbone.clip_model.transformer.resblocks.9.mlp.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.c_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.k_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.positional_embedding[0m
[34mbackbone.clip_model.visual.attnpool.q_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.attnpool.v_proj.{bias, weight}[0m
[34mbackbone.clip_model.visual.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.conv1.weight[0m
[34mbackbone.clip_model.visual.conv2.weight[0m
[34mbackbone.clip_model.visual.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer1.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer1.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer1.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer1.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer2.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer2.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer2.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer2.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer3.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.10.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.10.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.10.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.11.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.11.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.11.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.12.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.12.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.12.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.13.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.13.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.13.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.14.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.14.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.14.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.15.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.15.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.15.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.16.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.16.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.16.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.17.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.17.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.17.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.18.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.18.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.18.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.19.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.19.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.19.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.2.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.20.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.20.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.20.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.21.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.21.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.21.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.22.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.22.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.22.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.3.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.3.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.3.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.4.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.4.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.4.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.5.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.5.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.5.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.6.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.6.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.6.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.7.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.7.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.7.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.8.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.8.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.8.conv3.weight[0m
[34mbackbone.clip_model.visual.layer3.9.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer3.9.conv1.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv2.weight[0m
[34mbackbone.clip_model.visual.layer3.9.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.0.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.0.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.0.weight[0m
[34mbackbone.clip_model.visual.layer4.0.downsample.1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.1.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.1.conv3.weight[0m
[34mbackbone.clip_model.visual.layer4.2.bn1.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn2.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.bn3.{bias, num_batches_tracked, running_mean, running_var, weight}[0m
[34mbackbone.clip_model.visual.layer4.2.conv1.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv2.weight[0m
[34mbackbone.clip_model.visual.layer4.2.conv3.weight[0m
[34mbackbone.clip_model.{logit_scale, positional_embedding, text_projection}[0m
[34mbn1.{bias, running_mean, running_var, weight}[0m
[34mbn2.{bias, running_mean, running_var, weight}[0m
[34mconv1.{bias, weight}[0m
[34mconv2.{bias, weight}[0m
[34mcriterion.empty_weight[0m
[34mdecoder_adapter.conv1.{bias, weight}[0m
[34mdecoder_adapter.conv2.{bias, weight}[0m
[34mdecoder_adapter.norm1.{bias, weight}[0m
[34mdecoder_adapter.norm2.{bias, weight}[0m
[10/10 18:40:23] d2.engine.train_loop INFO: Starting training from iteration 0
[10/10 18:40:50] d2.utils.events INFO:  eta: 0:18:08  iter: 19  total_loss: 30.35  loss_ce: 1.012  loss_mask: 0.2911  loss_dice: 1.507  loss_ce_0: 1.248  loss_mask_0: 0.3184  loss_dice_0: 1.877  loss_ce_1: 1.276  loss_mask_1: 0.3156  loss_dice_1: 1.722  loss_ce_2: 1.181  loss_mask_2: 0.3059  loss_dice_2: 1.612  loss_ce_3: 1.139  loss_mask_3: 0.3005  loss_dice_3: 1.584  loss_ce_4: 1.15  loss_mask_4: 0.2937  loss_dice_4: 1.568  loss_ce_5: 1.082  loss_mask_5: 0.2915  loss_dice_5: 1.553  loss_ce_6: 1.07  loss_mask_6: 0.2897  loss_dice_6: 1.516  loss_ce_7: 1.077  loss_mask_7: 0.2906  loss_dice_7: 1.503  loss_ce_8: 1.089  loss_mask_8: 0.2901  loss_dice_8: 1.507    time: 1.1265  last_time: 1.0938  data_time: 0.1037  last_data_time: 0.0628   lr: 0.0001  max_mem: 30974M
[10/10 18:41:12] d2.utils.events INFO:  eta: 0:17:50  iter: 39  total_loss: 25.16  loss_ce: 0.7754  loss_mask: 0.2184  loss_dice: 1.429  loss_ce_0: 0.8108  loss_mask_0: 0.2722  loss_dice_0: 1.813  loss_ce_1: 0.9789  loss_mask_1: 0.2484  loss_dice_1: 1.635  loss_ce_2: 0.8857  loss_mask_2: 0.2334  loss_dice_2: 1.532  loss_ce_3: 0.8169  loss_mask_3: 0.2247  loss_dice_3: 1.448  loss_ce_4: 0.8033  loss_mask_4: 0.2227  loss_dice_4: 1.429  loss_ce_5: 0.791  loss_mask_5: 0.2186  loss_dice_5: 1.46  loss_ce_6: 0.775  loss_mask_6: 0.2191  loss_dice_6: 1.404  loss_ce_7: 0.7535  loss_mask_7: 0.2184  loss_dice_7: 1.419  loss_ce_8: 0.7627  loss_mask_8: 0.2204  loss_dice_8: 1.398    time: 1.1279  last_time: 1.1417  data_time: 0.0665  last_data_time: 0.0588   lr: 0.0001  max_mem: 32271M
[10/10 18:41:35] d2.utils.events INFO:  eta: 0:17:28  iter: 59  total_loss: 24.17  loss_ce: 0.6445  loss_mask: 0.2066  loss_dice: 1.433  loss_ce_0: 0.7308  loss_mask_0: 0.2276  loss_dice_0: 1.729  loss_ce_1: 0.8418  loss_mask_1: 0.2243  loss_dice_1: 1.6  loss_ce_2: 0.7492  loss_mask_2: 0.2121  loss_dice_2: 1.545  loss_ce_3: 0.7112  loss_mask_3: 0.2072  loss_dice_3: 1.456  loss_ce_4: 0.7078  loss_mask_4: 0.2115  loss_dice_4: 1.452  loss_ce_5: 0.6786  loss_mask_5: 0.2089  loss_dice_5: 1.437  loss_ce_6: 0.6778  loss_mask_6: 0.2068  loss_dice_6: 1.437  loss_ce_7: 0.6703  loss_mask_7: 0.209  loss_dice_7: 1.423  loss_ce_8: 0.677  loss_mask_8: 0.2045  loss_dice_8: 1.404    time: 1.1243  last_time: 1.0729  data_time: 0.0606  last_data_time: 0.0622   lr: 0.0001  max_mem: 32271M
[10/10 18:41:57] d2.utils.events INFO:  eta: 0:17:03  iter: 79  total_loss: 23.11  loss_ce: 0.6417  loss_mask: 0.2103  loss_dice: 1.345  loss_ce_0: 0.6877  loss_mask_0: 0.2412  loss_dice_0: 1.652  loss_ce_1: 0.8035  loss_mask_1: 0.2212  loss_dice_1: 1.504  loss_ce_2: 0.7195  loss_mask_2: 0.2136  loss_dice_2: 1.446  loss_ce_3: 0.6812  loss_mask_3: 0.2098  loss_dice_3: 1.369  loss_ce_4: 0.6509  loss_mask_4: 0.2102  loss_dice_4: 1.368  loss_ce_5: 0.634  loss_mask_5: 0.2116  loss_dice_5: 1.376  loss_ce_6: 0.6656  loss_mask_6: 0.2106  loss_dice_6: 1.321  loss_ce_7: 0.6385  loss_mask_7: 0.2154  loss_dice_7: 1.345  loss_ce_8: 0.6375  loss_mask_8: 0.2076  loss_dice_8: 1.326    time: 1.1193  last_time: 1.1187  data_time: 0.0583  last_data_time: 0.0545   lr: 0.0001  max_mem: 32364M
[10/10 18:42:19] d2.utils.events INFO:  eta: 0:16:37  iter: 99  total_loss: 22.06  loss_ce: 0.5876  loss_mask: 0.2068  loss_dice: 1.314  loss_ce_0: 0.6752  loss_mask_0: 0.237  loss_dice_0: 1.564  loss_ce_1: 0.7598  loss_mask_1: 0.2246  loss_dice_1: 1.382  loss_ce_2: 0.6993  loss_mask_2: 0.2087  loss_dice_2: 1.357  loss_ce_3: 0.6282  loss_mask_3: 0.2025  loss_dice_3: 1.333  loss_ce_4: 0.5757  loss_mask_4: 0.2004  loss_dice_4: 1.316  loss_ce_5: 0.5725  loss_mask_5: 0.2021  loss_dice_5: 1.314  loss_ce_6: 0.5802  loss_mask_6: 0.2043  loss_dice_6: 1.293  loss_ce_7: 0.6032  loss_mask_7: 0.2007  loss_dice_7: 1.307  loss_ce_8: 0.5971  loss_mask_8: 0.2022  loss_dice_8: 1.302    time: 1.1156  last_time: 1.0918  data_time: 0.0580  last_data_time: 0.0567   lr: 0.0001  max_mem: 32364M
[10/10 18:42:41] d2.utils.events INFO:  eta: 0:16:15  iter: 119  total_loss: 22.23  loss_ce: 0.6043  loss_mask: 0.1822  loss_dice: 1.338  loss_ce_0: 0.6436  loss_mask_0: 0.2167  loss_dice_0: 1.615  loss_ce_1: 0.7683  loss_mask_1: 0.2058  loss_dice_1: 1.483  loss_ce_2: 0.6858  loss_mask_2: 0.1941  loss_dice_2: 1.425  loss_ce_3: 0.6747  loss_mask_3: 0.1892  loss_dice_3: 1.357  loss_ce_4: 0.6333  loss_mask_4: 0.1875  loss_dice_4: 1.361  loss_ce_5: 0.6238  loss_mask_5: 0.189  loss_dice_5: 1.371  loss_ce_6: 0.6252  loss_mask_6: 0.1858  loss_dice_6: 1.319  loss_ce_7: 0.6033  loss_mask_7: 0.1859  loss_dice_7: 1.346  loss_ce_8: 0.6214  loss_mask_8: 0.186  loss_dice_8: 1.354    time: 1.1146  last_time: 1.1201  data_time: 0.0614  last_data_time: 0.0629   lr: 0.0001  max_mem: 32364M
[10/10 18:43:04] d2.utils.events INFO:  eta: 0:15:56  iter: 139  total_loss: 23.25  loss_ce: 0.6404  loss_mask: 0.2087  loss_dice: 1.356  loss_ce_0: 0.6879  loss_mask_0: 0.2324  loss_dice_0: 1.605  loss_ce_1: 0.7875  loss_mask_1: 0.2196  loss_dice_1: 1.499  loss_ce_2: 0.7175  loss_mask_2: 0.2128  loss_dice_2: 1.439  loss_ce_3: 0.674  loss_mask_3: 0.2044  loss_dice_3: 1.402  loss_ce_4: 0.6243  loss_mask_4: 0.2084  loss_dice_4: 1.401  loss_ce_5: 0.6469  loss_mask_5: 0.2077  loss_dice_5: 1.364  loss_ce_6: 0.6422  loss_mask_6: 0.2061  loss_dice_6: 1.364  loss_ce_7: 0.6546  loss_mask_7: 0.2075  loss_dice_7: 1.385  loss_ce_8: 0.6343  loss_mask_8: 0.2079  loss_dice_8: 1.342    time: 1.1172  last_time: 1.1619  data_time: 0.0652  last_data_time: 0.0819   lr: 0.0001  max_mem: 32364M
[10/10 18:43:26] d2.utils.events INFO:  eta: 0:15:33  iter: 159  total_loss: 21.03  loss_ce: 0.5975  loss_mask: 0.1847  loss_dice: 1.274  loss_ce_0: 0.6949  loss_mask_0: 0.2164  loss_dice_0: 1.51  loss_ce_1: 0.7622  loss_mask_1: 0.2039  loss_dice_1: 1.438  loss_ce_2: 0.6605  loss_mask_2: 0.1889  loss_dice_2: 1.381  loss_ce_3: 0.6046  loss_mask_3: 0.1904  loss_dice_3: 1.321  loss_ce_4: 0.6203  loss_mask_4: 0.1891  loss_dice_4: 1.31  loss_ce_5: 0.5978  loss_mask_5: 0.1918  loss_dice_5: 1.311  loss_ce_6: 0.614  loss_mask_6: 0.1911  loss_dice_6: 1.281  loss_ce_7: 0.5882  loss_mask_7: 0.1942  loss_dice_7: 1.287  loss_ce_8: 0.582  loss_mask_8: 0.185  loss_dice_8: 1.269    time: 1.1165  last_time: 1.1022  data_time: 0.0641  last_data_time: 0.0734   lr: 0.0001  max_mem: 32364M
[10/10 18:43:49] d2.utils.events INFO:  eta: 0:15:11  iter: 179  total_loss: 22.34  loss_ce: 0.6076  loss_mask: 0.1918  loss_dice: 1.333  loss_ce_0: 0.639  loss_mask_0: 0.2213  loss_dice_0: 1.551  loss_ce_1: 0.7592  loss_mask_1: 0.2006  loss_dice_1: 1.492  loss_ce_2: 0.7117  loss_mask_2: 0.1854  loss_dice_2: 1.371  loss_ce_3: 0.6413  loss_mask_3: 0.1869  loss_dice_3: 1.31  loss_ce_4: 0.6311  loss_mask_4: 0.1912  loss_dice_4: 1.324  loss_ce_5: 0.6195  loss_mask_5: 0.1913  loss_dice_5: 1.295  loss_ce_6: 0.6067  loss_mask_6: 0.1911  loss_dice_6: 1.287  loss_ce_7: 0.6298  loss_mask_7: 0.1915  loss_dice_7: 1.32  loss_ce_8: 0.6283  loss_mask_8: 0.1913  loss_dice_8: 1.321    time: 1.1181  last_time: 1.1835  data_time: 0.0626  last_data_time: 0.0507   lr: 0.0001  max_mem: 32364M
[10/10 18:44:12] d2.utils.events INFO:  eta: 0:14:49  iter: 199  total_loss: 21.76  loss_ce: 0.6047  loss_mask: 0.1934  loss_dice: 1.332  loss_ce_0: 0.6258  loss_mask_0: 0.2143  loss_dice_0: 1.602  loss_ce_1: 0.7442  loss_mask_1: 0.1977  loss_dice_1: 1.448  loss_ce_2: 0.6501  loss_mask_2: 0.1931  loss_dice_2: 1.402  loss_ce_3: 0.6241  loss_mask_3: 0.1907  loss_dice_3: 1.353  loss_ce_4: 0.5558  loss_mask_4: 0.1956  loss_dice_4: 1.336  loss_ce_5: 0.5616  loss_mask_5: 0.1938  loss_dice_5: 1.323  loss_ce_6: 0.5789  loss_mask_6: 0.1916  loss_dice_6: 1.305  loss_ce_7: 0.6097  loss_mask_7: 0.196  loss_dice_7: 1.321  loss_ce_8: 0.5764  loss_mask_8: 0.193  loss_dice_8: 1.303    time: 1.1181  last_time: 1.1258  data_time: 0.0620  last_data_time: 0.0549   lr: 0.0001  max_mem: 32364M
[10/10 18:44:34] d2.utils.events INFO:  eta: 0:14:27  iter: 219  total_loss: 21.41  loss_ce: 0.5685  loss_mask: 0.2004  loss_dice: 1.278  loss_ce_0: 0.6246  loss_mask_0: 0.2361  loss_dice_0: 1.494  loss_ce_1: 0.7387  loss_mask_1: 0.2117  loss_dice_1: 1.411  loss_ce_2: 0.6458  loss_mask_2: 0.2037  loss_dice_2: 1.363  loss_ce_3: 0.5959  loss_mask_3: 0.1952  loss_dice_3: 1.326  loss_ce_4: 0.5651  loss_mask_4: 0.199  loss_dice_4: 1.334  loss_ce_5: 0.6044  loss_mask_5: 0.1979  loss_dice_5: 1.304  loss_ce_6: 0.5661  loss_mask_6: 0.2033  loss_dice_6: 1.26  loss_ce_7: 0.5834  loss_mask_7: 0.2009  loss_dice_7: 1.285  loss_ce_8: 0.5799  loss_mask_8: 0.2006  loss_dice_8: 1.273    time: 1.1182  last_time: 1.2074  data_time: 0.0609  last_data_time: 0.0522   lr: 0.0001  max_mem: 32364M
[10/10 18:44:57] d2.utils.events INFO:  eta: 0:14:06  iter: 239  total_loss: 20.97  loss_ce: 0.5199  loss_mask: 0.1982  loss_dice: 1.221  loss_ce_0: 0.6307  loss_mask_0: 0.2319  loss_dice_0: 1.514  loss_ce_1: 0.7295  loss_mask_1: 0.2088  loss_dice_1: 1.377  loss_ce_2: 0.6242  loss_mask_2: 0.2043  loss_dice_2: 1.341  loss_ce_3: 0.565  loss_mask_3: 0.1992  loss_dice_3: 1.282  loss_ce_4: 0.5674  loss_mask_4: 0.2019  loss_dice_4: 1.287  loss_ce_5: 0.5485  loss_mask_5: 0.1995  loss_dice_5: 1.297  loss_ce_6: 0.5369  loss_mask_6: 0.2007  loss_dice_6: 1.247  loss_ce_7: 0.5389  loss_mask_7: 0.1999  loss_dice_7: 1.219  loss_ce_8: 0.5344  loss_mask_8: 0.1974  loss_dice_8: 1.26    time: 1.1193  last_time: 1.1103  data_time: 0.0661  last_data_time: 0.0649   lr: 0.0001  max_mem: 32364M
[10/10 18:45:19] d2.utils.events INFO:  eta: 0:13:44  iter: 259  total_loss: 21.51  loss_ce: 0.5247  loss_mask: 0.2017  loss_dice: 1.282  loss_ce_0: 0.5979  loss_mask_0: 0.232  loss_dice_0: 1.545  loss_ce_1: 0.7147  loss_mask_1: 0.2155  loss_dice_1: 1.441  loss_ce_2: 0.6089  loss_mask_2: 0.2053  loss_dice_2: 1.403  loss_ce_3: 0.598  loss_mask_3: 0.207  loss_dice_3: 1.351  loss_ce_4: 0.5433  loss_mask_4: 0.2061  loss_dice_4: 1.298  loss_ce_5: 0.5473  loss_mask_5: 0.205  loss_dice_5: 1.321  loss_ce_6: 0.5373  loss_mask_6: 0.2038  loss_dice_6: 1.286  loss_ce_7: 0.5666  loss_mask_7: 0.2026  loss_dice_7: 1.3  loss_ce_8: 0.5352  loss_mask_8: 0.2047  loss_dice_8: 1.309    time: 1.1197  last_time: 1.1144  data_time: 0.0645  last_data_time: 0.0554   lr: 0.0001  max_mem: 32537M
[10/10 18:45:42] d2.utils.events INFO:  eta: 0:13:22  iter: 279  total_loss: 21.36  loss_ce: 0.5276  loss_mask: 0.1707  loss_dice: 1.323  loss_ce_0: 0.6088  loss_mask_0: 0.1991  loss_dice_0: 1.576  loss_ce_1: 0.7028  loss_mask_1: 0.1875  loss_dice_1: 1.46  loss_ce_2: 0.6332  loss_mask_2: 0.1713  loss_dice_2: 1.405  loss_ce_3: 0.5865  loss_mask_3: 0.1743  loss_dice_3: 1.342  loss_ce_4: 0.5391  loss_mask_4: 0.1728  loss_dice_4: 1.311  loss_ce_5: 0.5149  loss_mask_5: 0.1719  loss_dice_5: 1.309  loss_ce_6: 0.5405  loss_mask_6: 0.1747  loss_dice_6: 1.316  loss_ce_7: 0.5314  loss_mask_7: 0.1743  loss_dice_7: 1.342  loss_ce_8: 0.5244  loss_mask_8: 0.1718  loss_dice_8: 1.314    time: 1.1205  last_time: 1.1438  data_time: 0.0664  last_data_time: 0.0764   lr: 0.0001  max_mem: 32537M
[10/10 18:46:05] d2.utils.events INFO:  eta: 0:13:00  iter: 299  total_loss: 20.71  loss_ce: 0.5169  loss_mask: 0.1765  loss_dice: 1.237  loss_ce_0: 0.6253  loss_mask_0: 0.2068  loss_dice_0: 1.471  loss_ce_1: 0.6981  loss_mask_1: 0.1885  loss_dice_1: 1.386  loss_ce_2: 0.6255  loss_mask_2: 0.1838  loss_dice_2: 1.321  loss_ce_3: 0.5731  loss_mask_3: 0.1781  loss_dice_3: 1.283  loss_ce_4: 0.5839  loss_mask_4: 0.1788  loss_dice_4: 1.269  loss_ce_5: 0.5479  loss_mask_5: 0.1773  loss_dice_5: 1.253  loss_ce_6: 0.5309  loss_mask_6: 0.1744  loss_dice_6: 1.226  loss_ce_7: 0.5327  loss_mask_7: 0.1772  loss_dice_7: 1.244  loss_ce_8: 0.5386  loss_mask_8: 0.1743  loss_dice_8: 1.261    time: 1.1212  last_time: 1.0946  data_time: 0.0600  last_data_time: 0.0694   lr: 0.0001  max_mem: 32537M
[10/10 18:46:28] d2.utils.events INFO:  eta: 0:12:39  iter: 319  total_loss: 21.24  loss_ce: 0.5254  loss_mask: 0.1822  loss_dice: 1.276  loss_ce_0: 0.6088  loss_mask_0: 0.2249  loss_dice_0: 1.531  loss_ce_1: 0.6984  loss_mask_1: 0.2003  loss_dice_1: 1.426  loss_ce_2: 0.6339  loss_mask_2: 0.1888  loss_dice_2: 1.369  loss_ce_3: 0.588  loss_mask_3: 0.1884  loss_dice_3: 1.32  loss_ce_4: 0.5706  loss_mask_4: 0.1817  loss_dice_4: 1.301  loss_ce_5: 0.5344  loss_mask_5: 0.1811  loss_dice_5: 1.313  loss_ce_6: 0.5384  loss_mask_6: 0.1863  loss_dice_6: 1.29  loss_ce_7: 0.5252  loss_mask_7: 0.1849  loss_dice_7: 1.296  loss_ce_8: 0.536  loss_mask_8: 0.1836  loss_dice_8: 1.319    time: 1.1229  last_time: 1.1517  data_time: 0.0633  last_data_time: 0.0552   lr: 0.0001  max_mem: 32537M
[10/10 18:46:50] d2.utils.events INFO:  eta: 0:12:16  iter: 339  total_loss: 20.54  loss_ce: 0.5653  loss_mask: 0.1866  loss_dice: 1.231  loss_ce_0: 0.6056  loss_mask_0: 0.2109  loss_dice_0: 1.477  loss_ce_1: 0.7407  loss_mask_1: 0.1964  loss_dice_1: 1.421  loss_ce_2: 0.643  loss_mask_2: 0.1869  loss_dice_2: 1.332  loss_ce_3: 0.6015  loss_mask_3: 0.1856  loss_dice_3: 1.257  loss_ce_4: 0.5982  loss_mask_4: 0.1871  loss_dice_4: 1.243  loss_ce_5: 0.5792  loss_mask_5: 0.1869  loss_dice_5: 1.286  loss_ce_6: 0.5325  loss_mask_6: 0.1858  loss_dice_6: 1.244  loss_ce_7: 0.5549  loss_mask_7: 0.1847  loss_dice_7: 1.226  loss_ce_8: 0.551  loss_mask_8: 0.1845  loss_dice_8: 1.234    time: 1.1226  last_time: 1.1138  data_time: 0.0567  last_data_time: 0.0599   lr: 0.0001  max_mem: 32537M
[10/10 18:47:13] d2.utils.events INFO:  eta: 0:11:53  iter: 359  total_loss: 20.99  loss_ce: 0.5292  loss_mask: 0.1968  loss_dice: 1.241  loss_ce_0: 0.6096  loss_mask_0: 0.2176  loss_dice_0: 1.494  loss_ce_1: 0.6642  loss_mask_1: 0.2118  loss_dice_1: 1.405  loss_ce_2: 0.6266  loss_mask_2: 0.2018  loss_dice_2: 1.406  loss_ce_3: 0.5613  loss_mask_3: 0.1995  loss_dice_3: 1.276  loss_ce_4: 0.5713  loss_mask_4: 0.2001  loss_dice_4: 1.304  loss_ce_5: 0.5389  loss_mask_5: 0.1967  loss_dice_5: 1.274  loss_ce_6: 0.5269  loss_mask_6: 0.2047  loss_dice_6: 1.257  loss_ce_7: 0.5522  loss_mask_7: 0.2017  loss_dice_7: 1.276  loss_ce_8: 0.5565  loss_mask_8: 0.1966  loss_dice_8: 1.263    time: 1.1226  last_time: 1.0932  data_time: 0.0573  last_data_time: 0.0503   lr: 0.0001  max_mem: 32537M
[10/10 18:47:35] d2.utils.events INFO:  eta: 0:11:31  iter: 379  total_loss: 20.3  loss_ce: 0.4995  loss_mask: 0.1871  loss_dice: 1.239  loss_ce_0: 0.5807  loss_mask_0: 0.213  loss_dice_0: 1.464  loss_ce_1: 0.6352  loss_mask_1: 0.1933  loss_dice_1: 1.354  loss_ce_2: 0.6256  loss_mask_2: 0.1886  loss_dice_2: 1.337  loss_ce_3: 0.5539  loss_mask_3: 0.1945  loss_dice_3: 1.262  loss_ce_4: 0.5279  loss_mask_4: 0.1873  loss_dice_4: 1.26  loss_ce_5: 0.5098  loss_mask_5: 0.1919  loss_dice_5: 1.27  loss_ce_6: 0.5286  loss_mask_6: 0.1885  loss_dice_6: 1.245  loss_ce_7: 0.4972  loss_mask_7: 0.1881  loss_dice_7: 1.237  loss_ce_8: 0.5278  loss_mask_8: 0.1897  loss_dice_8: 1.23    time: 1.1225  last_time: 1.1183  data_time: 0.0570  last_data_time: 0.0618   lr: 0.0001  max_mem: 32537M
[10/10 18:47:58] d2.utils.events INFO:  eta: 0:11:09  iter: 399  total_loss: 21.22  loss_ce: 0.5515  loss_mask: 0.1927  loss_dice: 1.259  loss_ce_0: 0.6391  loss_mask_0: 0.2201  loss_dice_0: 1.525  loss_ce_1: 0.7221  loss_mask_1: 0.2031  loss_dice_1: 1.426  loss_ce_2: 0.6457  loss_mask_2: 0.194  loss_dice_2: 1.35  loss_ce_3: 0.5828  loss_mask_3: 0.1983  loss_dice_3: 1.284  loss_ce_4: 0.558  loss_mask_4: 0.1965  loss_dice_4: 1.316  loss_ce_5: 0.5619  loss_mask_5: 0.1952  loss_dice_5: 1.294  loss_ce_6: 0.5838  loss_mask_6: 0.1935  loss_dice_6: 1.281  loss_ce_7: 0.5522  loss_mask_7: 0.1909  loss_dice_7: 1.275  loss_ce_8: 0.5504  loss_mask_8: 0.195  loss_dice_8: 1.286    time: 1.1228  last_time: 1.1007  data_time: 0.0590  last_data_time: 0.0534   lr: 0.0001  max_mem: 32537M
[10/10 18:48:20] d2.utils.events INFO:  eta: 0:10:47  iter: 419  total_loss: 20.16  loss_ce: 0.4894  loss_mask: 0.1748  loss_dice: 1.203  loss_ce_0: 0.5748  loss_mask_0: 0.2042  loss_dice_0: 1.504  loss_ce_1: 0.6405  loss_mask_1: 0.1868  loss_dice_1: 1.389  loss_ce_2: 0.6429  loss_mask_2: 0.1858  loss_dice_2: 1.316  loss_ce_3: 0.5652  loss_mask_3: 0.1825  loss_dice_3: 1.24  loss_ce_4: 0.5137  loss_mask_4: 0.1782  loss_dice_4: 1.26  loss_ce_5: 0.5087  loss_mask_5: 0.175  loss_dice_5: 1.249  loss_ce_6: 0.5063  loss_mask_6: 0.1756  loss_dice_6: 1.247  loss_ce_7: 0.4716  loss_mask_7: 0.1748  loss_dice_7: 1.254  loss_ce_8: 0.4907  loss_mask_8: 0.1739  loss_dice_8: 1.233    time: 1.1228  last_time: 1.1586  data_time: 0.0574  last_data_time: 0.0606   lr: 0.0001  max_mem: 32537M
[10/10 18:48:43] d2.utils.events INFO:  eta: 0:10:25  iter: 439  total_loss: 20.32  loss_ce: 0.5148  loss_mask: 0.1833  loss_dice: 1.221  loss_ce_0: 0.5484  loss_mask_0: 0.21  loss_dice_0: 1.525  loss_ce_1: 0.6234  loss_mask_1: 0.1978  loss_dice_1: 1.342  loss_ce_2: 0.581  loss_mask_2: 0.1862  loss_dice_2: 1.318  loss_ce_3: 0.5369  loss_mask_3: 0.1897  loss_dice_3: 1.271  loss_ce_4: 0.5293  loss_mask_4: 0.1856  loss_dice_4: 1.26  loss_ce_5: 0.5275  loss_mask_5: 0.1783  loss_dice_5: 1.247  loss_ce_6: 0.533  loss_mask_6: 0.1798  loss_dice_6: 1.213  loss_ce_7: 0.5224  loss_mask_7: 0.1794  loss_dice_7: 1.248  loss_ce_8: 0.5296  loss_mask_8: 0.183  loss_dice_8: 1.239    time: 1.1229  last_time: 1.1223  data_time: 0.0624  last_data_time: 0.0723   lr: 0.0001  max_mem: 32537M
[10/10 18:49:06] d2.utils.events INFO:  eta: 0:10:03  iter: 459  total_loss: 21.2  loss_ce: 0.507  loss_mask: 0.1758  loss_dice: 1.296  loss_ce_0: 0.6542  loss_mask_0: 0.2011  loss_dice_0: 1.545  loss_ce_1: 0.6616  loss_mask_1: 0.1892  loss_dice_1: 1.48  loss_ce_2: 0.5831  loss_mask_2: 0.1767  loss_dice_2: 1.397  loss_ce_3: 0.5217  loss_mask_3: 0.1783  loss_dice_3: 1.343  loss_ce_4: 0.5167  loss_mask_4: 0.178  loss_dice_4: 1.345  loss_ce_5: 0.5092  loss_mask_5: 0.1742  loss_dice_5: 1.28  loss_ce_6: 0.4903  loss_mask_6: 0.1769  loss_dice_6: 1.347  loss_ce_7: 0.4977  loss_mask_7: 0.1762  loss_dice_7: 1.302  loss_ce_8: 0.4932  loss_mask_8: 0.1742  loss_dice_8: 1.323    time: 1.1236  last_time: 1.1099  data_time: 0.0620  last_data_time: 0.0554   lr: 0.0001  max_mem: 32537M
[10/10 18:49:29] d2.utils.events INFO:  eta: 0:09:41  iter: 479  total_loss: 21.3  loss_ce: 0.5372  loss_mask: 0.1863  loss_dice: 1.308  loss_ce_0: 0.6187  loss_mask_0: 0.209  loss_dice_0: 1.513  loss_ce_1: 0.7016  loss_mask_1: 0.1974  loss_dice_1: 1.416  loss_ce_2: 0.6313  loss_mask_2: 0.1932  loss_dice_2: 1.387  loss_ce_3: 0.6014  loss_mask_3: 0.1893  loss_dice_3: 1.358  loss_ce_4: 0.5783  loss_mask_4: 0.1847  loss_dice_4: 1.318  loss_ce_5: 0.5621  loss_mask_5: 0.1865  loss_dice_5: 1.328  loss_ce_6: 0.5256  loss_mask_6: 0.1841  loss_dice_6: 1.313  loss_ce_7: 0.5406  loss_mask_7: 0.1823  loss_dice_7: 1.312  loss_ce_8: 0.5639  loss_mask_8: 0.1827  loss_dice_8: 1.294    time: 1.1240  last_time: 1.1759  data_time: 0.0609  last_data_time: 0.0598   lr: 0.0001  max_mem: 32537M
[10/10 18:49:51] d2.utils.events INFO:  eta: 0:09:19  iter: 499  total_loss: 19.92  loss_ce: 0.5298  loss_mask: 0.1718  loss_dice: 1.24  loss_ce_0: 0.5787  loss_mask_0: 0.2071  loss_dice_0: 1.456  loss_ce_1: 0.6832  loss_mask_1: 0.1934  loss_dice_1: 1.387  loss_ce_2: 0.5821  loss_mask_2: 0.1823  loss_dice_2: 1.329  loss_ce_3: 0.5664  loss_mask_3: 0.1788  loss_dice_3: 1.288  loss_ce_4: 0.5398  loss_mask_4: 0.1745  loss_dice_4: 1.304  loss_ce_5: 0.5123  loss_mask_5: 0.1709  loss_dice_5: 1.287  loss_ce_6: 0.5524  loss_mask_6: 0.1743  loss_dice_6: 1.24  loss_ce_7: 0.546  loss_mask_7: 0.1736  loss_dice_7: 1.243  loss_ce_8: 0.5207  loss_mask_8: 0.1746  loss_dice_8: 1.246    time: 1.1244  last_time: 1.1434  data_time: 0.0574  last_data_time: 0.0540   lr: 0.0001  max_mem: 32537M
[10/10 18:50:14] d2.utils.events INFO:  eta: 0:08:57  iter: 519  total_loss: 21.22  loss_ce: 0.5421  loss_mask: 0.166  loss_dice: 1.265  loss_ce_0: 0.609  loss_mask_0: 0.1829  loss_dice_0: 1.52  loss_ce_1: 0.7016  loss_mask_1: 0.1714  loss_dice_1: 1.478  loss_ce_2: 0.6089  loss_mask_2: 0.1657  loss_dice_2: 1.399  loss_ce_3: 0.5702  loss_mask_3: 0.1686  loss_dice_3: 1.363  loss_ce_4: 0.5383  loss_mask_4: 0.1718  loss_dice_4: 1.351  loss_ce_5: 0.5198  loss_mask_5: 0.1673  loss_dice_5: 1.324  loss_ce_6: 0.5165  loss_mask_6: 0.1646  loss_dice_6: 1.337  loss_ce_7: 0.5549  loss_mask_7: 0.1639  loss_dice_7: 1.302  loss_ce_8: 0.5118  loss_mask_8: 0.166  loss_dice_8: 1.304    time: 1.1252  last_time: 1.1540  data_time: 0.0643  last_data_time: 0.0602   lr: 0.0001  max_mem: 32537M
[10/10 18:50:37] d2.utils.events INFO:  eta: 0:08:35  iter: 539  total_loss: 19.85  loss_ce: 0.5156  loss_mask: 0.167  loss_dice: 1.187  loss_ce_0: 0.595  loss_mask_0: 0.1937  loss_dice_0: 1.413  loss_ce_1: 0.72  loss_mask_1: 0.1808  loss_dice_1: 1.358  loss_ce_2: 0.5876  loss_mask_2: 0.1719  loss_dice_2: 1.312  loss_ce_3: 0.5339  loss_mask_3: 0.1709  loss_dice_3: 1.188  loss_ce_4: 0.5183  loss_mask_4: 0.1678  loss_dice_4: 1.219  loss_ce_5: 0.5305  loss_mask_5: 0.1653  loss_dice_5: 1.209  loss_ce_6: 0.5392  loss_mask_6: 0.1694  loss_dice_6: 1.167  loss_ce_7: 0.523  loss_mask_7: 0.1683  loss_dice_7: 1.193  loss_ce_8: 0.51  loss_mask_8: 0.168  loss_dice_8: 1.211    time: 1.1255  last_time: 1.1656  data_time: 0.0620  last_data_time: 0.0517   lr: 0.0001  max_mem: 32537M
[10/10 18:50:59] d2.utils.events INFO:  eta: 0:08:12  iter: 559  total_loss: 20.74  loss_ce: 0.5314  loss_mask: 0.1778  loss_dice: 1.21  loss_ce_0: 0.6259  loss_mask_0: 0.2021  loss_dice_0: 1.418  loss_ce_1: 0.6979  loss_mask_1: 0.1886  loss_dice_1: 1.337  loss_ce_2: 0.6063  loss_mask_2: 0.1807  loss_dice_2: 1.3  loss_ce_3: 0.5775  loss_mask_3: 0.1817  loss_dice_3: 1.241  loss_ce_4: 0.5749  loss_mask_4: 0.1823  loss_dice_4: 1.218  loss_ce_5: 0.5524  loss_mask_5: 0.1829  loss_dice_5: 1.244  loss_ce_6: 0.5443  loss_mask_6: 0.1794  loss_dice_6: 1.225  loss_ce_7: 0.5184  loss_mask_7: 0.1784  loss_dice_7: 1.211  loss_ce_8: 0.5675  loss_mask_8: 0.1803  loss_dice_8: 1.216    time: 1.1253  last_time: 1.0909  data_time: 0.0594  last_data_time: 0.0501   lr: 0.0001  max_mem: 32537M
[10/10 18:51:22] d2.utils.events INFO:  eta: 0:07:50  iter: 579  total_loss: 21.44  loss_ce: 0.5758  loss_mask: 0.1682  loss_dice: 1.306  loss_ce_0: 0.628  loss_mask_0: 0.2072  loss_dice_0: 1.519  loss_ce_1: 0.6779  loss_mask_1: 0.1842  loss_dice_1: 1.43  loss_ce_2: 0.6574  loss_mask_2: 0.1795  loss_dice_2: 1.397  loss_ce_3: 0.6048  loss_mask_3: 0.1728  loss_dice_3: 1.323  loss_ce_4: 0.5691  loss_mask_4: 0.1718  loss_dice_4: 1.319  loss_ce_5: 0.5445  loss_mask_5: 0.171  loss_dice_5: 1.313  loss_ce_6: 0.5668  loss_mask_6: 0.1726  loss_dice_6: 1.311  loss_ce_7: 0.5444  loss_mask_7: 0.1733  loss_dice_7: 1.312  loss_ce_8: 0.5468  loss_mask_8: 0.1713  loss_dice_8: 1.322    time: 1.1255  last_time: 1.0976  data_time: 0.0574  last_data_time: 0.0518   lr: 0.0001  max_mem: 32537M
[10/10 18:51:45] d2.utils.events INFO:  eta: 0:07:28  iter: 599  total_loss: 21.24  loss_ce: 0.5436  loss_mask: 0.1771  loss_dice: 1.305  loss_ce_0: 0.6408  loss_mask_0: 0.2074  loss_dice_0: 1.488  loss_ce_1: 0.6902  loss_mask_1: 0.1862  loss_dice_1: 1.393  loss_ce_2: 0.6387  loss_mask_2: 0.18  loss_dice_2: 1.373  loss_ce_3: 0.5883  loss_mask_3: 0.1841  loss_dice_3: 1.328  loss_ce_4: 0.5584  loss_mask_4: 0.1813  loss_dice_4: 1.302  loss_ce_5: 0.571  loss_mask_5: 0.1813  loss_dice_5: 1.336  loss_ce_6: 0.5476  loss_mask_6: 0.1802  loss_dice_6: 1.288  loss_ce_7: 0.5401  loss_mask_7: 0.1799  loss_dice_7: 1.293  loss_ce_8: 0.5591  loss_mask_8: 0.1783  loss_dice_8: 1.303    time: 1.1256  last_time: 1.1104  data_time: 0.0619  last_data_time: 0.0488   lr: 0.0001  max_mem: 32537M
[10/10 18:52:07] d2.utils.events INFO:  eta: 0:07:05  iter: 619  total_loss: 20.19  loss_ce: 0.5091  loss_mask: 0.1689  loss_dice: 1.21  loss_ce_0: 0.5735  loss_mask_0: 0.2066  loss_dice_0: 1.415  loss_ce_1: 0.6501  loss_mask_1: 0.1885  loss_dice_1: 1.354  loss_ce_2: 0.5954  loss_mask_2: 0.184  loss_dice_2: 1.307  loss_ce_3: 0.5469  loss_mask_3: 0.1825  loss_dice_3: 1.259  loss_ce_4: 0.4989  loss_mask_4: 0.1741  loss_dice_4: 1.22  loss_ce_5: 0.4951  loss_mask_5: 0.1734  loss_dice_5: 1.253  loss_ce_6: 0.501  loss_mask_6: 0.1725  loss_dice_6: 1.224  loss_ce_7: 0.5061  loss_mask_7: 0.1698  loss_dice_7: 1.209  loss_ce_8: 0.5217  loss_mask_8: 0.1697  loss_dice_8: 1.233    time: 1.1250  last_time: 1.1309  data_time: 0.0577  last_data_time: 0.0709   lr: 0.0001  max_mem: 32537M
[10/10 18:52:29] d2.utils.events INFO:  eta: 0:06:42  iter: 639  total_loss: 21.13  loss_ce: 0.5898  loss_mask: 0.175  loss_dice: 1.29  loss_ce_0: 0.6099  loss_mask_0: 0.2083  loss_dice_0: 1.54  loss_ce_1: 0.7383  loss_mask_1: 0.1902  loss_dice_1: 1.404  loss_ce_2: 0.6614  loss_mask_2: 0.1808  loss_dice_2: 1.365  loss_ce_3: 0.6053  loss_mask_3: 0.1818  loss_dice_3: 1.306  loss_ce_4: 0.553  loss_mask_4: 0.1776  loss_dice_4: 1.302  loss_ce_5: 0.5505  loss_mask_5: 0.1757  loss_dice_5: 1.281  loss_ce_6: 0.5591  loss_mask_6: 0.1786  loss_dice_6: 1.268  loss_ce_7: 0.5473  loss_mask_7: 0.174  loss_dice_7: 1.282  loss_ce_8: 0.5523  loss_mask_8: 0.1746  loss_dice_8: 1.247    time: 1.1245  last_time: 1.0604  data_time: 0.0563  last_data_time: 0.0477   lr: 0.0001  max_mem: 32537M
[10/10 18:52:51] d2.utils.events INFO:  eta: 0:06:20  iter: 659  total_loss: 20.12  loss_ce: 0.4897  loss_mask: 0.1828  loss_dice: 1.246  loss_ce_0: 0.5248  loss_mask_0: 0.2083  loss_dice_0: 1.416  loss_ce_1: 0.6026  loss_mask_1: 0.1979  loss_dice_1: 1.327  loss_ce_2: 0.5562  loss_mask_2: 0.1901  loss_dice_2: 1.323  loss_ce_3: 0.5372  loss_mask_3: 0.1863  loss_dice_3: 1.252  loss_ce_4: 0.5027  loss_mask_4: 0.185  loss_dice_4: 1.259  loss_ce_5: 0.4731  loss_mask_5: 0.1837  loss_dice_5: 1.229  loss_ce_6: 0.4768  loss_mask_6: 0.1822  loss_dice_6: 1.222  loss_ce_7: 0.5006  loss_mask_7: 0.1832  loss_dice_7: 1.246  loss_ce_8: 0.4632  loss_mask_8: 0.1828  loss_dice_8: 1.195    time: 1.1239  last_time: 1.1003  data_time: 0.0581  last_data_time: 0.0655   lr: 0.0001  max_mem: 32537M
[10/10 18:53:14] d2.utils.events INFO:  eta: 0:05:57  iter: 679  total_loss: 20.49  loss_ce: 0.5071  loss_mask: 0.1724  loss_dice: 1.278  loss_ce_0: 0.5608  loss_mask_0: 0.2038  loss_dice_0: 1.473  loss_ce_1: 0.6686  loss_mask_1: 0.1829  loss_dice_1: 1.425  loss_ce_2: 0.5972  loss_mask_2: 0.176  loss_dice_2: 1.341  loss_ce_3: 0.5574  loss_mask_3: 0.1735  loss_dice_3: 1.288  loss_ce_4: 0.5437  loss_mask_4: 0.1709  loss_dice_4: 1.286  loss_ce_5: 0.5433  loss_mask_5: 0.1724  loss_dice_5: 1.322  loss_ce_6: 0.5029  loss_mask_6: 0.1736  loss_dice_6: 1.27  loss_ce_7: 0.5113  loss_mask_7: 0.1734  loss_dice_7: 1.218  loss_ce_8: 0.4946  loss_mask_8: 0.1719  loss_dice_8: 1.255    time: 1.1244  last_time: 1.1648  data_time: 0.0657  last_data_time: 0.0845   lr: 0.0001  max_mem: 32542M
[10/10 18:53:37] d2.utils.events INFO:  eta: 0:05:35  iter: 699  total_loss: 19.64  loss_ce: 0.5021  loss_mask: 0.1806  loss_dice: 1.209  loss_ce_0: 0.5591  loss_mask_0: 0.1981  loss_dice_0: 1.418  loss_ce_1: 0.6528  loss_mask_1: 0.1843  loss_dice_1: 1.359  loss_ce_2: 0.5843  loss_mask_2: 0.1839  loss_dice_2: 1.307  loss_ce_3: 0.5231  loss_mask_3: 0.1784  loss_dice_3: 1.242  loss_ce_4: 0.5188  loss_mask_4: 0.1794  loss_dice_4: 1.252  loss_ce_5: 0.503  loss_mask_5: 0.1811  loss_dice_5: 1.239  loss_ce_6: 0.4975  loss_mask_6: 0.1809  loss_dice_6: 1.235  loss_ce_7: 0.5113  loss_mask_7: 0.181  loss_dice_7: 1.215  loss_ce_8: 0.4898  loss_mask_8: 0.1859  loss_dice_8: 1.218    time: 1.1244  last_time: 1.0916  data_time: 0.0587  last_data_time: 0.0570   lr: 0.0001  max_mem: 32542M
[10/10 18:54:00] d2.utils.events INFO:  eta: 0:05:13  iter: 719  total_loss: 21.55  loss_ce: 0.5113  loss_mask: 0.1602  loss_dice: 1.342  loss_ce_0: 0.5573  loss_mask_0: 0.1824  loss_dice_0: 1.542  loss_ce_1: 0.673  loss_mask_1: 0.1746  loss_dice_1: 1.479  loss_ce_2: 0.6091  loss_mask_2: 0.1658  loss_dice_2: 1.414  loss_ce_3: 0.5676  loss_mask_3: 0.1683  loss_dice_3: 1.369  loss_ce_4: 0.5315  loss_mask_4: 0.1648  loss_dice_4: 1.319  loss_ce_5: 0.5407  loss_mask_5: 0.1624  loss_dice_5: 1.381  loss_ce_6: 0.5341  loss_mask_6: 0.1607  loss_dice_6: 1.333  loss_ce_7: 0.5256  loss_mask_7: 0.1599  loss_dice_7: 1.377  loss_ce_8: 0.5181  loss_mask_8: 0.1608  loss_dice_8: 1.319    time: 1.1247  last_time: 1.1019  data_time: 0.0573  last_data_time: 0.0601   lr: 0.0001  max_mem: 32542M
[10/10 18:54:22] d2.utils.events INFO:  eta: 0:04:50  iter: 739  total_loss: 20.14  loss_ce: 0.5077  loss_mask: 0.1763  loss_dice: 1.227  loss_ce_0: 0.6158  loss_mask_0: 0.2019  loss_dice_0: 1.426  loss_ce_1: 0.6837  loss_mask_1: 0.1828  loss_dice_1: 1.342  loss_ce_2: 0.6017  loss_mask_2: 0.1765  loss_dice_2: 1.3  loss_ce_3: 0.5564  loss_mask_3: 0.1788  loss_dice_3: 1.284  loss_ce_4: 0.5343  loss_mask_4: 0.1772  loss_dice_4: 1.261  loss_ce_5: 0.5426  loss_mask_5: 0.1751  loss_dice_5: 1.229  loss_ce_6: 0.5168  loss_mask_6: 0.1784  loss_dice_6: 1.255  loss_ce_7: 0.5083  loss_mask_7: 0.1786  loss_dice_7: 1.227  loss_ce_8: 0.5189  loss_mask_8: 0.1774  loss_dice_8: 1.219    time: 1.1246  last_time: 1.1054  data_time: 0.0575  last_data_time: 0.0546   lr: 0.0001  max_mem: 32542M
[10/10 18:54:45] d2.utils.events INFO:  eta: 0:04:28  iter: 759  total_loss: 20.46  loss_ce: 0.4702  loss_mask: 0.1713  loss_dice: 1.305  loss_ce_0: 0.5463  loss_mask_0: 0.2045  loss_dice_0: 1.542  loss_ce_1: 0.643  loss_mask_1: 0.188  loss_dice_1: 1.392  loss_ce_2: 0.5699  loss_mask_2: 0.1842  loss_dice_2: 1.353  loss_ce_3: 0.5333  loss_mask_3: 0.1769  loss_dice_3: 1.34  loss_ce_4: 0.5067  loss_mask_4: 0.1805  loss_dice_4: 1.319  loss_ce_5: 0.4795  loss_mask_5: 0.1739  loss_dice_5: 1.326  loss_ce_6: 0.4815  loss_mask_6: 0.1731  loss_dice_6: 1.34  loss_ce_7: 0.482  loss_mask_7: 0.1726  loss_dice_7: 1.315  loss_ce_8: 0.4692  loss_mask_8: 0.1723  loss_dice_8: 1.32    time: 1.1248  last_time: 1.0776  data_time: 0.0609  last_data_time: 0.0569   lr: 0.0001  max_mem: 32542M
[10/10 18:55:07] d2.utils.events INFO:  eta: 0:04:06  iter: 779  total_loss: 19.04  loss_ce: 0.4415  loss_mask: 0.1708  loss_dice: 1.217  loss_ce_0: 0.5549  loss_mask_0: 0.1912  loss_dice_0: 1.458  loss_ce_1: 0.588  loss_mask_1: 0.1815  loss_dice_1: 1.328  loss_ce_2: 0.5336  loss_mask_2: 0.1691  loss_dice_2: 1.272  loss_ce_3: 0.4811  loss_mask_3: 0.1685  loss_dice_3: 1.226  loss_ce_4: 0.457  loss_mask_4: 0.1696  loss_dice_4: 1.223  loss_ce_5: 0.4765  loss_mask_5: 0.1669  loss_dice_5: 1.233  loss_ce_6: 0.4245  loss_mask_6: 0.1696  loss_dice_6: 1.211  loss_ce_7: 0.4369  loss_mask_7: 0.1688  loss_dice_7: 1.227  loss_ce_8: 0.415  loss_mask_8: 0.169  loss_dice_8: 1.215    time: 1.1247  last_time: 1.0969  data_time: 0.0621  last_data_time: 0.0620   lr: 0.0001  max_mem: 32542M
[10/10 18:55:30] d2.utils.events INFO:  eta: 0:03:43  iter: 799  total_loss: 20.16  loss_ce: 0.5266  loss_mask: 0.1586  loss_dice: 1.213  loss_ce_0: 0.6116  loss_mask_0: 0.1745  loss_dice_0: 1.448  loss_ce_1: 0.6518  loss_mask_1: 0.1654  loss_dice_1: 1.342  loss_ce_2: 0.5733  loss_mask_2: 0.1606  loss_dice_2: 1.293  loss_ce_3: 0.5535  loss_mask_3: 0.1557  loss_dice_3: 1.278  loss_ce_4: 0.548  loss_mask_4: 0.1563  loss_dice_4: 1.252  loss_ce_5: 0.5593  loss_mask_5: 0.1572  loss_dice_5: 1.235  loss_ce_6: 0.506  loss_mask_6: 0.1588  loss_dice_6: 1.242  loss_ce_7: 0.4994  loss_mask_7: 0.1579  loss_dice_7: 1.221  loss_ce_8: 0.514  loss_mask_8: 0.1577  loss_dice_8: 1.243    time: 1.1247  last_time: 1.1396  data_time: 0.0593  last_data_time: 0.0691   lr: 0.0001  max_mem: 32542M
[10/10 18:55:53] d2.utils.events INFO:  eta: 0:03:21  iter: 819  total_loss: 19.8  loss_ce: 0.5135  loss_mask: 0.1816  loss_dice: 1.243  loss_ce_0: 0.6063  loss_mask_0: 0.2111  loss_dice_0: 1.463  loss_ce_1: 0.6445  loss_mask_1: 0.1968  loss_dice_1: 1.347  loss_ce_2: 0.5991  loss_mask_2: 0.1874  loss_dice_2: 1.299  loss_ce_3: 0.5235  loss_mask_3: 0.1823  loss_dice_3: 1.249  loss_ce_4: 0.5265  loss_mask_4: 0.1807  loss_dice_4: 1.238  loss_ce_5: 0.5164  loss_mask_5: 0.1843  loss_dice_5: 1.254  loss_ce_6: 0.499  loss_mask_6: 0.1814  loss_dice_6: 1.219  loss_ce_7: 0.5151  loss_mask_7: 0.1814  loss_dice_7: 1.21  loss_ce_8: 0.4865  loss_mask_8: 0.1818  loss_dice_8: 1.215    time: 1.1247  last_time: 1.1547  data_time: 0.0557  last_data_time: 0.0589   lr: 0.0001  max_mem: 32542M
[10/10 18:56:15] d2.utils.events INFO:  eta: 0:02:59  iter: 839  total_loss: 19.68  loss_ce: 0.5021  loss_mask: 0.1719  loss_dice: 1.179  loss_ce_0: 0.6421  loss_mask_0: 0.1962  loss_dice_0: 1.429  loss_ce_1: 0.6709  loss_mask_1: 0.1895  loss_dice_1: 1.351  loss_ce_2: 0.624  loss_mask_2: 0.1775  loss_dice_2: 1.272  loss_ce_3: 0.5621  loss_mask_3: 0.1791  loss_dice_3: 1.203  loss_ce_4: 0.505  loss_mask_4: 0.1773  loss_dice_4: 1.233  loss_ce_5: 0.5226  loss_mask_5: 0.1725  loss_dice_5: 1.223  loss_ce_6: 0.5355  loss_mask_6: 0.1712  loss_dice_6: 1.204  loss_ce_7: 0.5266  loss_mask_7: 0.1742  loss_dice_7: 1.198  loss_ce_8: 0.525  loss_mask_8: 0.1746  loss_dice_8: 1.219    time: 1.1247  last_time: 1.1257  data_time: 0.0571  last_data_time: 0.0577   lr: 0.0001  max_mem: 32542M
[10/10 18:56:38] d2.utils.events INFO:  eta: 0:02:36  iter: 859  total_loss: 21.11  loss_ce: 0.4843  loss_mask: 0.1749  loss_dice: 1.311  loss_ce_0: 0.6044  loss_mask_0: 0.2064  loss_dice_0: 1.514  loss_ce_1: 0.6788  loss_mask_1: 0.1928  loss_dice_1: 1.413  loss_ce_2: 0.6207  loss_mask_2: 0.1841  loss_dice_2: 1.357  loss_ce_3: 0.5604  loss_mask_3: 0.1851  loss_dice_3: 1.326  loss_ce_4: 0.5112  loss_mask_4: 0.1834  loss_dice_4: 1.346  loss_ce_5: 0.5033  loss_mask_5: 0.1796  loss_dice_5: 1.357  loss_ce_6: 0.5216  loss_mask_6: 0.1784  loss_dice_6: 1.358  loss_ce_7: 0.508  loss_mask_7: 0.1794  loss_dice_7: 1.282  loss_ce_8: 0.5142  loss_mask_8: 0.1774  loss_dice_8: 1.301    time: 1.1251  last_time: 1.1563  data_time: 0.0578  last_data_time: 0.0822   lr: 0.0001  max_mem: 32542M
[10/10 18:57:00] d2.utils.events INFO:  eta: 0:02:14  iter: 879  total_loss: 18.88  loss_ce: 0.4389  loss_mask: 0.1695  loss_dice: 1.182  loss_ce_0: 0.5236  loss_mask_0: 0.1995  loss_dice_0: 1.348  loss_ce_1: 0.594  loss_mask_1: 0.1788  loss_dice_1: 1.298  loss_ce_2: 0.5269  loss_mask_2: 0.1719  loss_dice_2: 1.254  loss_ce_3: 0.4998  loss_mask_3: 0.1692  loss_dice_3: 1.223  loss_ce_4: 0.4496  loss_mask_4: 0.1704  loss_dice_4: 1.212  loss_ce_5: 0.4706  loss_mask_5: 0.1672  loss_dice_5: 1.236  loss_ce_6: 0.4328  loss_mask_6: 0.1676  loss_dice_6: 1.132  loss_ce_7: 0.4521  loss_mask_7: 0.1678  loss_dice_7: 1.175  loss_ce_8: 0.4113  loss_mask_8: 0.1687  loss_dice_8: 1.189    time: 1.1247  last_time: 1.1046  data_time: 0.0584  last_data_time: 0.0692   lr: 0.0001  max_mem: 32542M
[10/10 18:57:22] d2.utils.events INFO:  eta: 0:01:51  iter: 899  total_loss: 19.67  loss_ce: 0.4818  loss_mask: 0.174  loss_dice: 1.195  loss_ce_0: 0.5673  loss_mask_0: 0.2039  loss_dice_0: 1.372  loss_ce_1: 0.6076  loss_mask_1: 0.1904  loss_dice_1: 1.297  loss_ce_2: 0.5506  loss_mask_2: 0.179  loss_dice_2: 1.254  loss_ce_3: 0.5288  loss_mask_3: 0.1782  loss_dice_3: 1.247  loss_ce_4: 0.502  loss_mask_4: 0.174  loss_dice_4: 1.195  loss_ce_5: 0.4813  loss_mask_5: 0.1747  loss_dice_5: 1.23  loss_ce_6: 0.5111  loss_mask_6: 0.1762  loss_dice_6: 1.223  loss_ce_7: 0.4951  loss_mask_7: 0.1778  loss_dice_7: 1.182  loss_ce_8: 0.5043  loss_mask_8: 0.1735  loss_dice_8: 1.16    time: 1.1243  last_time: 1.1062  data_time: 0.0575  last_data_time: 0.0548   lr: 0.0001  max_mem: 32542M
[10/10 18:57:45] d2.utils.events INFO:  eta: 0:01:29  iter: 919  total_loss: 19.67  loss_ce: 0.501  loss_mask: 0.1605  loss_dice: 1.192  loss_ce_0: 0.5618  loss_mask_0: 0.1947  loss_dice_0: 1.426  loss_ce_1: 0.6558  loss_mask_1: 0.1754  loss_dice_1: 1.301  loss_ce_2: 0.5749  loss_mask_2: 0.169  loss_dice_2: 1.286  loss_ce_3: 0.5502  loss_mask_3: 0.1664  loss_dice_3: 1.251  loss_ce_4: 0.5383  loss_mask_4: 0.1692  loss_dice_4: 1.259  loss_ce_5: 0.5033  loss_mask_5: 0.1652  loss_dice_5: 1.176  loss_ce_6: 0.5085  loss_mask_6: 0.1636  loss_dice_6: 1.207  loss_ce_7: 0.5055  loss_mask_7: 0.1599  loss_dice_7: 1.181  loss_ce_8: 0.4773  loss_mask_8: 0.1627  loss_dice_8: 1.166    time: 1.1245  last_time: 1.1345  data_time: 0.0592  last_data_time: 0.0549   lr: 0.0001  max_mem: 32542M
[10/10 18:58:08] d2.utils.events INFO:  eta: 0:01:07  iter: 939  total_loss: 19.64  loss_ce: 0.5117  loss_mask: 0.1647  loss_dice: 1.235  loss_ce_0: 0.5514  loss_mask_0: 0.1821  loss_dice_0: 1.432  loss_ce_1: 0.6538  loss_mask_1: 0.1735  loss_dice_1: 1.36  loss_ce_2: 0.5975  loss_mask_2: 0.167  loss_dice_2: 1.273  loss_ce_3: 0.546  loss_mask_3: 0.1675  loss_dice_3: 1.247  loss_ce_4: 0.5486  loss_mask_4: 0.1669  loss_dice_4: 1.242  loss_ce_5: 0.5074  loss_mask_5: 0.1678  loss_dice_5: 1.251  loss_ce_6: 0.4971  loss_mask_6: 0.1665  loss_dice_6: 1.24  loss_ce_7: 0.4835  loss_mask_7: 0.1654  loss_dice_7: 1.242  loss_ce_8: 0.5014  loss_mask_8: 0.1655  loss_dice_8: 1.261    time: 1.1246  last_time: 1.1038  data_time: 0.0596  last_data_time: 0.0634   lr: 0.0001  max_mem: 32542M
[10/10 18:58:31] d2.utils.events INFO:  eta: 0:00:44  iter: 959  total_loss: 19.94  loss_ce: 0.4926  loss_mask: 0.1654  loss_dice: 1.208  loss_ce_0: 0.5789  loss_mask_0: 0.1959  loss_dice_0: 1.441  loss_ce_1: 0.6349  loss_mask_1: 0.1843  loss_dice_1: 1.351  loss_ce_2: 0.5615  loss_mask_2: 0.1684  loss_dice_2: 1.265  loss_ce_3: 0.5301  loss_mask_3: 0.1674  loss_dice_3: 1.21  loss_ce_4: 0.5286  loss_mask_4: 0.1688  loss_dice_4: 1.253  loss_ce_5: 0.5497  loss_mask_5: 0.169  loss_dice_5: 1.217  loss_ce_6: 0.4912  loss_mask_6: 0.1673  loss_dice_6: 1.232  loss_ce_7: 0.5009  loss_mask_7: 0.167  loss_dice_7: 1.232  loss_ce_8: 0.5008  loss_mask_8: 0.1689  loss_dice_8: 1.238    time: 1.1249  last_time: 1.1522  data_time: 0.0606  last_data_time: 0.0746   lr: 0.0001  max_mem: 32542M
[10/10 18:58:54] d2.utils.events INFO:  eta: 0:00:22  iter: 979  total_loss: 19.22  loss_ce: 0.4989  loss_mask: 0.168  loss_dice: 1.228  loss_ce_0: 0.5903  loss_mask_0: 0.1959  loss_dice_0: 1.405  loss_ce_1: 0.6225  loss_mask_1: 0.1769  loss_dice_1: 1.349  loss_ce_2: 0.5712  loss_mask_2: 0.1725  loss_dice_2: 1.272  loss_ce_3: 0.5135  loss_mask_3: 0.1721  loss_dice_3: 1.242  loss_ce_4: 0.5084  loss_mask_4: 0.1696  loss_dice_4: 1.211  loss_ce_5: 0.5113  loss_mask_5: 0.1679  loss_dice_5: 1.227  loss_ce_6: 0.4939  loss_mask_6: 0.1678  loss_dice_6: 1.2  loss_ce_7: 0.4842  loss_mask_7: 0.1674  loss_dice_7: 1.202  loss_ce_8: 0.5033  loss_mask_8: 0.1674  loss_dice_8: 1.204    time: 1.1253  last_time: 1.1325  data_time: 0.0631  last_data_time: 0.0605   lr: 0.0001  max_mem: 32542M
[10/10 18:59:17] fvcore.common.checkpoint INFO: Saving checkpoint to /tsi/hi-paris/GB/segmentation/results/In_vocab/r101_008_1000_19_a_decoder/model_final.pth
[10/10 18:59:20] d2.utils.events INFO:  eta: 0:00:00  iter: 999  total_loss: 19.95  loss_ce: 0.4889  loss_mask: 0.1577  loss_dice: 1.221  loss_ce_0: 0.557  loss_mask_0: 0.1866  loss_dice_0: 1.428  loss_ce_1: 0.6537  loss_mask_1: 0.1649  loss_dice_1: 1.378  loss_ce_2: 0.5858  loss_mask_2: 0.1627  loss_dice_2: 1.32  loss_ce_3: 0.5114  loss_mask_3: 0.163  loss_dice_3: 1.253  loss_ce_4: 0.4825  loss_mask_4: 0.1605  loss_dice_4: 1.268  loss_ce_5: 0.5041  loss_mask_5: 0.1605  loss_dice_5: 1.259  loss_ce_6: 0.4787  loss_mask_6: 0.1587  loss_dice_6: 1.228  loss_ce_7: 0.488  loss_mask_7: 0.1577  loss_dice_7: 1.266  loss_ce_8: 0.5089  loss_mask_8: 0.1568  loss_dice_8: 1.211    time: 1.1257  last_time: 1.1341  data_time: 0.0632  last_data_time: 0.0639   lr: 0.0001  max_mem: 32542M
[10/10 18:59:20] d2.engine.hooks INFO: Overall training speed: 998 iterations in 0:18:43 (1.1257 s / it)
[10/10 18:59:20] d2.engine.hooks INFO: Total training time: 0:18:50 (0:00:07 on hooks)
[10/10 18:59:20] fcclip.data.datasets.register_cityscapes_panoptic INFO: 3 cities found in 'datasets/cityscapes/leftImg8bit/val'.
[10/10 18:59:20] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(1024, 1024), max_size=2560, sample_style='choice')]
[10/10 18:59:20] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common._TorchSerializedList'>
[10/10 18:59:20] d2.data.common INFO: Serializing 500 elements to byte tensors and concatenating them all ...
[10/10 18:59:20] d2.data.common INFO: Serialized dataset takes 0.74 MiB
[10/10 18:59:20] d2.evaluation.evaluator INFO: Start inference on 500 batches
[10/10 18:59:25] d2.evaluation.evaluator INFO: Inference done 11/500. Dataloading: 0.0037 s/iter. Inference: 0.1778 s/iter. Eval: 0.0861 s/iter. Total: 0.2677 s/iter. ETA=0:02:10
[10/10 18:59:30] d2.evaluation.evaluator INFO: Inference done 30/500. Dataloading: 0.0044 s/iter. Inference: 0.1799 s/iter. Eval: 0.0858 s/iter. Total: 0.2702 s/iter. ETA=0:02:06
[10/10 18:59:35] d2.evaluation.evaluator INFO: Inference done 49/500. Dataloading: 0.0046 s/iter. Inference: 0.1814 s/iter. Eval: 0.0856 s/iter. Total: 0.2717 s/iter. ETA=0:02:02
[10/10 18:59:40] d2.evaluation.evaluator INFO: Inference done 67/500. Dataloading: 0.0046 s/iter. Inference: 0.1849 s/iter. Eval: 0.0856 s/iter. Total: 0.2752 s/iter. ETA=0:01:59
[10/10 18:59:45] d2.evaluation.evaluator INFO: Inference done 86/500. Dataloading: 0.0046 s/iter. Inference: 0.1844 s/iter. Eval: 0.0858 s/iter. Total: 0.2749 s/iter. ETA=0:01:53
[10/10 18:59:51] d2.evaluation.evaluator INFO: Inference done 105/500. Dataloading: 0.0046 s/iter. Inference: 0.1843 s/iter. Eval: 0.0858 s/iter. Total: 0.2749 s/iter. ETA=0:01:48
[10/10 18:59:56] d2.evaluation.evaluator INFO: Inference done 124/500. Dataloading: 0.0047 s/iter. Inference: 0.1835 s/iter. Eval: 0.0859 s/iter. Total: 0.2742 s/iter. ETA=0:01:43
[10/10 19:00:01] d2.evaluation.evaluator INFO: Inference done 142/500. Dataloading: 0.0047 s/iter. Inference: 0.1849 s/iter. Eval: 0.0860 s/iter. Total: 0.2757 s/iter. ETA=0:01:38
[10/10 19:00:06] d2.evaluation.evaluator INFO: Inference done 161/500. Dataloading: 0.0047 s/iter. Inference: 0.1844 s/iter. Eval: 0.0860 s/iter. Total: 0.2751 s/iter. ETA=0:01:33
[10/10 19:00:11] d2.evaluation.evaluator INFO: Inference done 180/500. Dataloading: 0.0047 s/iter. Inference: 0.1841 s/iter. Eval: 0.0860 s/iter. Total: 0.2748 s/iter. ETA=0:01:27
[10/10 19:00:17] d2.evaluation.evaluator INFO: Inference done 199/500. Dataloading: 0.0047 s/iter. Inference: 0.1844 s/iter. Eval: 0.0859 s/iter. Total: 0.2751 s/iter. ETA=0:01:22
[10/10 19:00:22] d2.evaluation.evaluator INFO: Inference done 218/500. Dataloading: 0.0047 s/iter. Inference: 0.1844 s/iter. Eval: 0.0858 s/iter. Total: 0.2751 s/iter. ETA=0:01:17
[10/10 19:00:27] d2.evaluation.evaluator INFO: Inference done 237/500. Dataloading: 0.0047 s/iter. Inference: 0.1843 s/iter. Eval: 0.0858 s/iter. Total: 0.2749 s/iter. ETA=0:01:12
[10/10 19:00:32] d2.evaluation.evaluator INFO: Inference done 256/500. Dataloading: 0.0047 s/iter. Inference: 0.1840 s/iter. Eval: 0.0858 s/iter. Total: 0.2746 s/iter. ETA=0:01:06
[10/10 19:00:37] d2.evaluation.evaluator INFO: Inference done 275/500. Dataloading: 0.0047 s/iter. Inference: 0.1834 s/iter. Eval: 0.0857 s/iter. Total: 0.2739 s/iter. ETA=0:01:01
[10/10 19:00:42] d2.evaluation.evaluator INFO: Inference done 295/500. Dataloading: 0.0048 s/iter. Inference: 0.1827 s/iter. Eval: 0.0857 s/iter. Total: 0.2732 s/iter. ETA=0:00:56
[10/10 19:00:47] d2.evaluation.evaluator INFO: Inference done 314/500. Dataloading: 0.0047 s/iter. Inference: 0.1823 s/iter. Eval: 0.0857 s/iter. Total: 0.2728 s/iter. ETA=0:00:50
[10/10 19:00:53] d2.evaluation.evaluator INFO: Inference done 332/500. Dataloading: 0.0047 s/iter. Inference: 0.1827 s/iter. Eval: 0.0857 s/iter. Total: 0.2732 s/iter. ETA=0:00:45
[10/10 19:00:58] d2.evaluation.evaluator INFO: Inference done 350/500. Dataloading: 0.0047 s/iter. Inference: 0.1832 s/iter. Eval: 0.0857 s/iter. Total: 0.2738 s/iter. ETA=0:00:41
[10/10 19:01:03] d2.evaluation.evaluator INFO: Inference done 369/500. Dataloading: 0.0047 s/iter. Inference: 0.1832 s/iter. Eval: 0.0857 s/iter. Total: 0.2737 s/iter. ETA=0:00:35
[10/10 19:01:08] d2.evaluation.evaluator INFO: Inference done 387/500. Dataloading: 0.0047 s/iter. Inference: 0.1836 s/iter. Eval: 0.0857 s/iter. Total: 0.2741 s/iter. ETA=0:00:30
[10/10 19:01:13] d2.evaluation.evaluator INFO: Inference done 405/500. Dataloading: 0.0048 s/iter. Inference: 0.1840 s/iter. Eval: 0.0857 s/iter. Total: 0.2745 s/iter. ETA=0:00:26
[10/10 19:01:18] d2.evaluation.evaluator INFO: Inference done 424/500. Dataloading: 0.0048 s/iter. Inference: 0.1838 s/iter. Eval: 0.0857 s/iter. Total: 0.2744 s/iter. ETA=0:00:20
[10/10 19:01:23] d2.evaluation.evaluator INFO: Inference done 443/500. Dataloading: 0.0048 s/iter. Inference: 0.1835 s/iter. Eval: 0.0858 s/iter. Total: 0.2742 s/iter. ETA=0:00:15
[10/10 19:01:28] d2.evaluation.evaluator INFO: Inference done 462/500. Dataloading: 0.0048 s/iter. Inference: 0.1831 s/iter. Eval: 0.0858 s/iter. Total: 0.2737 s/iter. ETA=0:00:10
[10/10 19:01:33] d2.evaluation.evaluator INFO: Inference done 481/500. Dataloading: 0.0048 s/iter. Inference: 0.1830 s/iter. Eval: 0.0857 s/iter. Total: 0.2736 s/iter. ETA=0:00:05
[10/10 19:01:38] d2.evaluation.evaluator INFO: Total inference time: 0:02:15.302452 (0.273338 s / iter per device, on 1 devices)
[10/10 19:01:38] d2.evaluation.evaluator INFO: Total inference pure compute time: 0:01:30 (0.182611 s / iter per device, on 1 devices)
[10/10 19:01:38] d2.evaluation.panoptic_evaluation INFO: Writing all panoptic predictions to /tmp/panoptic_eval7s834gty ...
[10/10 19:01:54] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 57.986 | 79.937 | 71.318 |      19       |
| Things | 50.934 | 79.438 | 63.878 |       8       |
| Stuff  | 63.115 | 80.299 | 76.729 |      11       |
[10/10 19:01:54] d2.evaluation.panoptic_evaluation INFO: Panoptic Evaluation Results:
|          |   PQ   |   SQ   |   RQ   |  #categories  |
|:--------:|:------:|:------:|:------:|:-------------:|
| class_7  | 96.520 | 96.921 | 99.586 |     Stuff     |
| class_8  | 73.048 | 83.432 | 87.555 |     Stuff     |
| class_11 | 86.698 | 89.172 | 97.225 |     Stuff     |
| class_12 | 39.064 | 78.370 | 49.846 |     Stuff     |
| class_13 | 37.534 | 75.532 | 49.693 |     Stuff     |
| class_17 | 39.866 | 62.085 | 64.213 |     Stuff     |
| class_19 | 47.052 | 66.636 | 70.610 |     Stuff     |
| class_20 | 63.380 | 75.695 | 83.731 |     Stuff     |
| class_21 | 88.844 | 89.768 | 98.971 |     Stuff     |
| class_22 | 34.998 | 74.289 | 47.111 |     Stuff     |
| class_23 | 87.261 | 91.391 | 95.481 |     Stuff     |
| class_24 | 50.959 | 75.554 | 67.447 |    Things     |
| class_25 | 44.629 | 72.321 | 61.709 |    Things     |
| class_26 | 64.157 | 82.087 | 78.157 |    Things     |
| class_27 | 51.476 | 88.586 | 58.108 |    Things     |
| class_28 | 63.146 | 89.457 | 70.588 |    Things     |
| class_31 | 51.158 | 82.640 | 61.905 |    Things     |
| class_32 | 42.425 | 74.085 | 57.265 |    Things     |
| class_33 | 39.523 | 70.772 | 55.845 |    Things     |
[10/10 19:01:54] d2.engine.defaults INFO: Evaluation results for openvocab_cityscapes_fine_panoptic_val in csv format:
[10/10 19:01:54] d2.evaluation.testing INFO: copypaste: Task: panoptic_seg
[10/10 19:01:54] d2.evaluation.testing INFO: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st,PQ_7,SQ_7,RQ_7,PQ_8,SQ_8,RQ_8,PQ_11,SQ_11,RQ_11,PQ_12,SQ_12,RQ_12,PQ_13,SQ_13,RQ_13,PQ_17,SQ_17,RQ_17,PQ_19,SQ_19,RQ_19,PQ_20,SQ_20,RQ_20,PQ_21,SQ_21,RQ_21,PQ_22,SQ_22,RQ_22,PQ_23,SQ_23,RQ_23,PQ_24,SQ_24,RQ_24,PQ_25,SQ_25,RQ_25,PQ_26,SQ_26,RQ_26,PQ_27,SQ_27,RQ_27,PQ_28,SQ_28,RQ_28,PQ_31,SQ_31,RQ_31,PQ_32,SQ_32,RQ_32,PQ_33,SQ_33,RQ_33
[10/10 19:01:54] d2.evaluation.testing INFO: copypaste: 57.9863,79.9365,71.3182,50.9340,79.4379,63.8780,63.1151,80.2992,76.7293,96.5196,96.9209,99.5859,73.0485,83.4319,87.5546,86.6978,89.1722,97.2251,39.0645,78.3700,49.8462,37.5343,75.5319,49.6933,39.8664,62.0850,64.2127,47.0518,66.6362,70.6100,63.3801,75.6949,83.7310,88.8440,89.7675,98.9712,34.9984,74.2891,47.1111,87.2613,91.3914,95.4809,50.9589,75.5537,67.4473,44.6289,72.3214,61.7092,64.1569,82.0874,78.1569,51.4757,88.5861,58.1081,63.1462,89.4571,70.5882,51.1581,82.6400,61.9048,42.4248,74.0851,57.2650,39.5227,70.7724,55.8448
